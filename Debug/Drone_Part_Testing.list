
Drone_Part_Testing.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000aec0  080002a0  080002a0  000012a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000007ac  0800b160  0800b160  0000c160  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800b90c  0800b90c  0000c90c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800b914  0800b914  0000c914  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  0800b918  0800b918  0000c918  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         000001d8  24000000  0800b91c  0000d000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000003e8  240001d8  0800baf4  0000d1d8  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  240005c0  0800baf4  0000d5c0  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  0000d1d8  2**0
                  CONTENTS, READONLY
 10 .debug_info   0001728f  00000000  00000000  0000d206  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00002cad  00000000  00000000  00024495  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001000  00000000  00000000  00027148  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 00000c6f  00000000  00000000  00028148  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00038c8a  00000000  00000000  00028db7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00016a27  00000000  00000000  00061a41  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0015f3b6  00000000  00000000  00078468  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  001d781e  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00005234  00000000  00000000  001d7864  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 00000062  00000000  00000000  001dca98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	@ (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	@ (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	@ (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	240001d8 	.word	0x240001d8
 80002bc:	00000000 	.word	0x00000000
 80002c0:	0800b148 	.word	0x0800b148

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	@ (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	@ (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	@ (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	240001dc 	.word	0x240001dc
 80002dc:	0800b148 	.word	0x0800b148

080002e0 <memchr>:
 80002e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002e4:	2a10      	cmp	r2, #16
 80002e6:	db2b      	blt.n	8000340 <memchr+0x60>
 80002e8:	f010 0f07 	tst.w	r0, #7
 80002ec:	d008      	beq.n	8000300 <memchr+0x20>
 80002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f2:	3a01      	subs	r2, #1
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d02d      	beq.n	8000354 <memchr+0x74>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	b342      	cbz	r2, 8000350 <memchr+0x70>
 80002fe:	d1f6      	bne.n	80002ee <memchr+0xe>
 8000300:	b4f0      	push	{r4, r5, r6, r7}
 8000302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800030a:	f022 0407 	bic.w	r4, r2, #7
 800030e:	f07f 0700 	mvns.w	r7, #0
 8000312:	2300      	movs	r3, #0
 8000314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000318:	3c08      	subs	r4, #8
 800031a:	ea85 0501 	eor.w	r5, r5, r1
 800031e:	ea86 0601 	eor.w	r6, r6, r1
 8000322:	fa85 f547 	uadd8	r5, r5, r7
 8000326:	faa3 f587 	sel	r5, r3, r7
 800032a:	fa86 f647 	uadd8	r6, r6, r7
 800032e:	faa5 f687 	sel	r6, r5, r7
 8000332:	b98e      	cbnz	r6, 8000358 <memchr+0x78>
 8000334:	d1ee      	bne.n	8000314 <memchr+0x34>
 8000336:	bcf0      	pop	{r4, r5, r6, r7}
 8000338:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800033c:	f002 0207 	and.w	r2, r2, #7
 8000340:	b132      	cbz	r2, 8000350 <memchr+0x70>
 8000342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000346:	3a01      	subs	r2, #1
 8000348:	ea83 0301 	eor.w	r3, r3, r1
 800034c:	b113      	cbz	r3, 8000354 <memchr+0x74>
 800034e:	d1f8      	bne.n	8000342 <memchr+0x62>
 8000350:	2000      	movs	r0, #0
 8000352:	4770      	bx	lr
 8000354:	3801      	subs	r0, #1
 8000356:	4770      	bx	lr
 8000358:	2d00      	cmp	r5, #0
 800035a:	bf06      	itte	eq
 800035c:	4635      	moveq	r5, r6
 800035e:	3803      	subeq	r0, #3
 8000360:	3807      	subne	r0, #7
 8000362:	f015 0f01 	tst.w	r5, #1
 8000366:	d107      	bne.n	8000378 <memchr+0x98>
 8000368:	3001      	adds	r0, #1
 800036a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800036e:	bf02      	ittt	eq
 8000370:	3001      	addeq	r0, #1
 8000372:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000376:	3001      	addeq	r0, #1
 8000378:	bcf0      	pop	{r4, r5, r6, r7}
 800037a:	3801      	subs	r0, #1
 800037c:	4770      	bx	lr
 800037e:	bf00      	nop

08000380 <strlen>:
 8000380:	4603      	mov	r3, r0
 8000382:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000386:	2a00      	cmp	r2, #0
 8000388:	d1fb      	bne.n	8000382 <strlen+0x2>
 800038a:	1a18      	subs	r0, r3, r0
 800038c:	3801      	subs	r0, #1
 800038e:	4770      	bx	lr

08000390 <__aeabi_uldivmod>:
 8000390:	b953      	cbnz	r3, 80003a8 <__aeabi_uldivmod+0x18>
 8000392:	b94a      	cbnz	r2, 80003a8 <__aeabi_uldivmod+0x18>
 8000394:	2900      	cmp	r1, #0
 8000396:	bf08      	it	eq
 8000398:	2800      	cmpeq	r0, #0
 800039a:	bf1c      	itt	ne
 800039c:	f04f 31ff 	movne.w	r1, #4294967295
 80003a0:	f04f 30ff 	movne.w	r0, #4294967295
 80003a4:	f000 b988 	b.w	80006b8 <__aeabi_idiv0>
 80003a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003b0:	f000 f806 	bl	80003c0 <__udivmoddi4>
 80003b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003bc:	b004      	add	sp, #16
 80003be:	4770      	bx	lr

080003c0 <__udivmoddi4>:
 80003c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003c4:	9d08      	ldr	r5, [sp, #32]
 80003c6:	468e      	mov	lr, r1
 80003c8:	4604      	mov	r4, r0
 80003ca:	4688      	mov	r8, r1
 80003cc:	2b00      	cmp	r3, #0
 80003ce:	d14a      	bne.n	8000466 <__udivmoddi4+0xa6>
 80003d0:	428a      	cmp	r2, r1
 80003d2:	4617      	mov	r7, r2
 80003d4:	d962      	bls.n	800049c <__udivmoddi4+0xdc>
 80003d6:	fab2 f682 	clz	r6, r2
 80003da:	b14e      	cbz	r6, 80003f0 <__udivmoddi4+0x30>
 80003dc:	f1c6 0320 	rsb	r3, r6, #32
 80003e0:	fa01 f806 	lsl.w	r8, r1, r6
 80003e4:	fa20 f303 	lsr.w	r3, r0, r3
 80003e8:	40b7      	lsls	r7, r6
 80003ea:	ea43 0808 	orr.w	r8, r3, r8
 80003ee:	40b4      	lsls	r4, r6
 80003f0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003f4:	fa1f fc87 	uxth.w	ip, r7
 80003f8:	fbb8 f1fe 	udiv	r1, r8, lr
 80003fc:	0c23      	lsrs	r3, r4, #16
 80003fe:	fb0e 8811 	mls	r8, lr, r1, r8
 8000402:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000406:	fb01 f20c 	mul.w	r2, r1, ip
 800040a:	429a      	cmp	r2, r3
 800040c:	d909      	bls.n	8000422 <__udivmoddi4+0x62>
 800040e:	18fb      	adds	r3, r7, r3
 8000410:	f101 30ff 	add.w	r0, r1, #4294967295
 8000414:	f080 80ea 	bcs.w	80005ec <__udivmoddi4+0x22c>
 8000418:	429a      	cmp	r2, r3
 800041a:	f240 80e7 	bls.w	80005ec <__udivmoddi4+0x22c>
 800041e:	3902      	subs	r1, #2
 8000420:	443b      	add	r3, r7
 8000422:	1a9a      	subs	r2, r3, r2
 8000424:	b2a3      	uxth	r3, r4
 8000426:	fbb2 f0fe 	udiv	r0, r2, lr
 800042a:	fb0e 2210 	mls	r2, lr, r0, r2
 800042e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000432:	fb00 fc0c 	mul.w	ip, r0, ip
 8000436:	459c      	cmp	ip, r3
 8000438:	d909      	bls.n	800044e <__udivmoddi4+0x8e>
 800043a:	18fb      	adds	r3, r7, r3
 800043c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000440:	f080 80d6 	bcs.w	80005f0 <__udivmoddi4+0x230>
 8000444:	459c      	cmp	ip, r3
 8000446:	f240 80d3 	bls.w	80005f0 <__udivmoddi4+0x230>
 800044a:	443b      	add	r3, r7
 800044c:	3802      	subs	r0, #2
 800044e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000452:	eba3 030c 	sub.w	r3, r3, ip
 8000456:	2100      	movs	r1, #0
 8000458:	b11d      	cbz	r5, 8000462 <__udivmoddi4+0xa2>
 800045a:	40f3      	lsrs	r3, r6
 800045c:	2200      	movs	r2, #0
 800045e:	e9c5 3200 	strd	r3, r2, [r5]
 8000462:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000466:	428b      	cmp	r3, r1
 8000468:	d905      	bls.n	8000476 <__udivmoddi4+0xb6>
 800046a:	b10d      	cbz	r5, 8000470 <__udivmoddi4+0xb0>
 800046c:	e9c5 0100 	strd	r0, r1, [r5]
 8000470:	2100      	movs	r1, #0
 8000472:	4608      	mov	r0, r1
 8000474:	e7f5      	b.n	8000462 <__udivmoddi4+0xa2>
 8000476:	fab3 f183 	clz	r1, r3
 800047a:	2900      	cmp	r1, #0
 800047c:	d146      	bne.n	800050c <__udivmoddi4+0x14c>
 800047e:	4573      	cmp	r3, lr
 8000480:	d302      	bcc.n	8000488 <__udivmoddi4+0xc8>
 8000482:	4282      	cmp	r2, r0
 8000484:	f200 8105 	bhi.w	8000692 <__udivmoddi4+0x2d2>
 8000488:	1a84      	subs	r4, r0, r2
 800048a:	eb6e 0203 	sbc.w	r2, lr, r3
 800048e:	2001      	movs	r0, #1
 8000490:	4690      	mov	r8, r2
 8000492:	2d00      	cmp	r5, #0
 8000494:	d0e5      	beq.n	8000462 <__udivmoddi4+0xa2>
 8000496:	e9c5 4800 	strd	r4, r8, [r5]
 800049a:	e7e2      	b.n	8000462 <__udivmoddi4+0xa2>
 800049c:	2a00      	cmp	r2, #0
 800049e:	f000 8090 	beq.w	80005c2 <__udivmoddi4+0x202>
 80004a2:	fab2 f682 	clz	r6, r2
 80004a6:	2e00      	cmp	r6, #0
 80004a8:	f040 80a4 	bne.w	80005f4 <__udivmoddi4+0x234>
 80004ac:	1a8a      	subs	r2, r1, r2
 80004ae:	0c03      	lsrs	r3, r0, #16
 80004b0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004b4:	b280      	uxth	r0, r0
 80004b6:	b2bc      	uxth	r4, r7
 80004b8:	2101      	movs	r1, #1
 80004ba:	fbb2 fcfe 	udiv	ip, r2, lr
 80004be:	fb0e 221c 	mls	r2, lr, ip, r2
 80004c2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80004c6:	fb04 f20c 	mul.w	r2, r4, ip
 80004ca:	429a      	cmp	r2, r3
 80004cc:	d907      	bls.n	80004de <__udivmoddi4+0x11e>
 80004ce:	18fb      	adds	r3, r7, r3
 80004d0:	f10c 38ff 	add.w	r8, ip, #4294967295
 80004d4:	d202      	bcs.n	80004dc <__udivmoddi4+0x11c>
 80004d6:	429a      	cmp	r2, r3
 80004d8:	f200 80e0 	bhi.w	800069c <__udivmoddi4+0x2dc>
 80004dc:	46c4      	mov	ip, r8
 80004de:	1a9b      	subs	r3, r3, r2
 80004e0:	fbb3 f2fe 	udiv	r2, r3, lr
 80004e4:	fb0e 3312 	mls	r3, lr, r2, r3
 80004e8:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80004ec:	fb02 f404 	mul.w	r4, r2, r4
 80004f0:	429c      	cmp	r4, r3
 80004f2:	d907      	bls.n	8000504 <__udivmoddi4+0x144>
 80004f4:	18fb      	adds	r3, r7, r3
 80004f6:	f102 30ff 	add.w	r0, r2, #4294967295
 80004fa:	d202      	bcs.n	8000502 <__udivmoddi4+0x142>
 80004fc:	429c      	cmp	r4, r3
 80004fe:	f200 80ca 	bhi.w	8000696 <__udivmoddi4+0x2d6>
 8000502:	4602      	mov	r2, r0
 8000504:	1b1b      	subs	r3, r3, r4
 8000506:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800050a:	e7a5      	b.n	8000458 <__udivmoddi4+0x98>
 800050c:	f1c1 0620 	rsb	r6, r1, #32
 8000510:	408b      	lsls	r3, r1
 8000512:	fa22 f706 	lsr.w	r7, r2, r6
 8000516:	431f      	orrs	r7, r3
 8000518:	fa0e f401 	lsl.w	r4, lr, r1
 800051c:	fa20 f306 	lsr.w	r3, r0, r6
 8000520:	fa2e fe06 	lsr.w	lr, lr, r6
 8000524:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000528:	4323      	orrs	r3, r4
 800052a:	fa00 f801 	lsl.w	r8, r0, r1
 800052e:	fa1f fc87 	uxth.w	ip, r7
 8000532:	fbbe f0f9 	udiv	r0, lr, r9
 8000536:	0c1c      	lsrs	r4, r3, #16
 8000538:	fb09 ee10 	mls	lr, r9, r0, lr
 800053c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000540:	fb00 fe0c 	mul.w	lr, r0, ip
 8000544:	45a6      	cmp	lr, r4
 8000546:	fa02 f201 	lsl.w	r2, r2, r1
 800054a:	d909      	bls.n	8000560 <__udivmoddi4+0x1a0>
 800054c:	193c      	adds	r4, r7, r4
 800054e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000552:	f080 809c 	bcs.w	800068e <__udivmoddi4+0x2ce>
 8000556:	45a6      	cmp	lr, r4
 8000558:	f240 8099 	bls.w	800068e <__udivmoddi4+0x2ce>
 800055c:	3802      	subs	r0, #2
 800055e:	443c      	add	r4, r7
 8000560:	eba4 040e 	sub.w	r4, r4, lr
 8000564:	fa1f fe83 	uxth.w	lr, r3
 8000568:	fbb4 f3f9 	udiv	r3, r4, r9
 800056c:	fb09 4413 	mls	r4, r9, r3, r4
 8000570:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000574:	fb03 fc0c 	mul.w	ip, r3, ip
 8000578:	45a4      	cmp	ip, r4
 800057a:	d908      	bls.n	800058e <__udivmoddi4+0x1ce>
 800057c:	193c      	adds	r4, r7, r4
 800057e:	f103 3eff 	add.w	lr, r3, #4294967295
 8000582:	f080 8082 	bcs.w	800068a <__udivmoddi4+0x2ca>
 8000586:	45a4      	cmp	ip, r4
 8000588:	d97f      	bls.n	800068a <__udivmoddi4+0x2ca>
 800058a:	3b02      	subs	r3, #2
 800058c:	443c      	add	r4, r7
 800058e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000592:	eba4 040c 	sub.w	r4, r4, ip
 8000596:	fba0 ec02 	umull	lr, ip, r0, r2
 800059a:	4564      	cmp	r4, ip
 800059c:	4673      	mov	r3, lr
 800059e:	46e1      	mov	r9, ip
 80005a0:	d362      	bcc.n	8000668 <__udivmoddi4+0x2a8>
 80005a2:	d05f      	beq.n	8000664 <__udivmoddi4+0x2a4>
 80005a4:	b15d      	cbz	r5, 80005be <__udivmoddi4+0x1fe>
 80005a6:	ebb8 0203 	subs.w	r2, r8, r3
 80005aa:	eb64 0409 	sbc.w	r4, r4, r9
 80005ae:	fa04 f606 	lsl.w	r6, r4, r6
 80005b2:	fa22 f301 	lsr.w	r3, r2, r1
 80005b6:	431e      	orrs	r6, r3
 80005b8:	40cc      	lsrs	r4, r1
 80005ba:	e9c5 6400 	strd	r6, r4, [r5]
 80005be:	2100      	movs	r1, #0
 80005c0:	e74f      	b.n	8000462 <__udivmoddi4+0xa2>
 80005c2:	fbb1 fcf2 	udiv	ip, r1, r2
 80005c6:	0c01      	lsrs	r1, r0, #16
 80005c8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80005cc:	b280      	uxth	r0, r0
 80005ce:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80005d2:	463b      	mov	r3, r7
 80005d4:	4638      	mov	r0, r7
 80005d6:	463c      	mov	r4, r7
 80005d8:	46b8      	mov	r8, r7
 80005da:	46be      	mov	lr, r7
 80005dc:	2620      	movs	r6, #32
 80005de:	fbb1 f1f7 	udiv	r1, r1, r7
 80005e2:	eba2 0208 	sub.w	r2, r2, r8
 80005e6:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80005ea:	e766      	b.n	80004ba <__udivmoddi4+0xfa>
 80005ec:	4601      	mov	r1, r0
 80005ee:	e718      	b.n	8000422 <__udivmoddi4+0x62>
 80005f0:	4610      	mov	r0, r2
 80005f2:	e72c      	b.n	800044e <__udivmoddi4+0x8e>
 80005f4:	f1c6 0220 	rsb	r2, r6, #32
 80005f8:	fa2e f302 	lsr.w	r3, lr, r2
 80005fc:	40b7      	lsls	r7, r6
 80005fe:	40b1      	lsls	r1, r6
 8000600:	fa20 f202 	lsr.w	r2, r0, r2
 8000604:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000608:	430a      	orrs	r2, r1
 800060a:	fbb3 f8fe 	udiv	r8, r3, lr
 800060e:	b2bc      	uxth	r4, r7
 8000610:	fb0e 3318 	mls	r3, lr, r8, r3
 8000614:	0c11      	lsrs	r1, r2, #16
 8000616:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800061a:	fb08 f904 	mul.w	r9, r8, r4
 800061e:	40b0      	lsls	r0, r6
 8000620:	4589      	cmp	r9, r1
 8000622:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000626:	b280      	uxth	r0, r0
 8000628:	d93e      	bls.n	80006a8 <__udivmoddi4+0x2e8>
 800062a:	1879      	adds	r1, r7, r1
 800062c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000630:	d201      	bcs.n	8000636 <__udivmoddi4+0x276>
 8000632:	4589      	cmp	r9, r1
 8000634:	d81f      	bhi.n	8000676 <__udivmoddi4+0x2b6>
 8000636:	eba1 0109 	sub.w	r1, r1, r9
 800063a:	fbb1 f9fe 	udiv	r9, r1, lr
 800063e:	fb09 f804 	mul.w	r8, r9, r4
 8000642:	fb0e 1119 	mls	r1, lr, r9, r1
 8000646:	b292      	uxth	r2, r2
 8000648:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800064c:	4542      	cmp	r2, r8
 800064e:	d229      	bcs.n	80006a4 <__udivmoddi4+0x2e4>
 8000650:	18ba      	adds	r2, r7, r2
 8000652:	f109 31ff 	add.w	r1, r9, #4294967295
 8000656:	d2c4      	bcs.n	80005e2 <__udivmoddi4+0x222>
 8000658:	4542      	cmp	r2, r8
 800065a:	d2c2      	bcs.n	80005e2 <__udivmoddi4+0x222>
 800065c:	f1a9 0102 	sub.w	r1, r9, #2
 8000660:	443a      	add	r2, r7
 8000662:	e7be      	b.n	80005e2 <__udivmoddi4+0x222>
 8000664:	45f0      	cmp	r8, lr
 8000666:	d29d      	bcs.n	80005a4 <__udivmoddi4+0x1e4>
 8000668:	ebbe 0302 	subs.w	r3, lr, r2
 800066c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000670:	3801      	subs	r0, #1
 8000672:	46e1      	mov	r9, ip
 8000674:	e796      	b.n	80005a4 <__udivmoddi4+0x1e4>
 8000676:	eba7 0909 	sub.w	r9, r7, r9
 800067a:	4449      	add	r1, r9
 800067c:	f1a8 0c02 	sub.w	ip, r8, #2
 8000680:	fbb1 f9fe 	udiv	r9, r1, lr
 8000684:	fb09 f804 	mul.w	r8, r9, r4
 8000688:	e7db      	b.n	8000642 <__udivmoddi4+0x282>
 800068a:	4673      	mov	r3, lr
 800068c:	e77f      	b.n	800058e <__udivmoddi4+0x1ce>
 800068e:	4650      	mov	r0, sl
 8000690:	e766      	b.n	8000560 <__udivmoddi4+0x1a0>
 8000692:	4608      	mov	r0, r1
 8000694:	e6fd      	b.n	8000492 <__udivmoddi4+0xd2>
 8000696:	443b      	add	r3, r7
 8000698:	3a02      	subs	r2, #2
 800069a:	e733      	b.n	8000504 <__udivmoddi4+0x144>
 800069c:	f1ac 0c02 	sub.w	ip, ip, #2
 80006a0:	443b      	add	r3, r7
 80006a2:	e71c      	b.n	80004de <__udivmoddi4+0x11e>
 80006a4:	4649      	mov	r1, r9
 80006a6:	e79c      	b.n	80005e2 <__udivmoddi4+0x222>
 80006a8:	eba1 0109 	sub.w	r1, r1, r9
 80006ac:	46c4      	mov	ip, r8
 80006ae:	fbb1 f9fe 	udiv	r9, r1, lr
 80006b2:	fb09 f804 	mul.w	r8, r9, r4
 80006b6:	e7c4      	b.n	8000642 <__udivmoddi4+0x282>

080006b8 <__aeabi_idiv0>:
 80006b8:	4770      	bx	lr
 80006ba:	bf00      	nop

080006bc <dps_probe>:
static inline float   dps_osr_scale(uint8_t osr_code);
static dps310_t* getSelfStatePointer(sensor_if_t *self);

/* ---- vtable ops (minimal) ---- */
static HAL_StatusTypeDef dps_probe(sensor_if_t *self)
{
 80006bc:	b580      	push	{r7, lr}
 80006be:	b088      	sub	sp, #32
 80006c0:	af04      	add	r7, sp, #16
 80006c2:	6078      	str	r0, [r7, #4]
	dps310_t *s = (dps310_t*)self->state;
 80006c4:	687b      	ldr	r3, [r7, #4]
 80006c6:	685b      	ldr	r3, [r3, #4]
 80006c8:	60fb      	str	r3, [r7, #12]
	if (!s) return HAL_ERROR;
 80006ca:	68fb      	ldr	r3, [r7, #12]
 80006cc:	2b00      	cmp	r3, #0
 80006ce:	d101      	bne.n	80006d4 <dps_probe+0x18>
 80006d0:	2301      	movs	r3, #1
 80006d2:	e022      	b.n	800071a <dps_probe+0x5e>

	uint8_t id = 0;
 80006d4:	2300      	movs	r3, #0
 80006d6:	72bb      	strb	r3, [r7, #10]
	HAL_StatusTypeDef st = HAL_I2C_Mem_Read(s->i2c, s->addr7 << 1,
 80006d8:	68fb      	ldr	r3, [r7, #12]
 80006da:	6818      	ldr	r0, [r3, #0]
 80006dc:	68fb      	ldr	r3, [r7, #12]
 80006de:	791b      	ldrb	r3, [r3, #4]
 80006e0:	005b      	lsls	r3, r3, #1
 80006e2:	b299      	uxth	r1, r3
 80006e4:	23c8      	movs	r3, #200	@ 0xc8
 80006e6:	9302      	str	r3, [sp, #8]
 80006e8:	2301      	movs	r3, #1
 80006ea:	9301      	str	r3, [sp, #4]
 80006ec:	f107 030a 	add.w	r3, r7, #10
 80006f0:	9300      	str	r3, [sp, #0]
 80006f2:	2301      	movs	r3, #1
 80006f4:	220d      	movs	r2, #13
 80006f6:	f003 f951 	bl	800399c <HAL_I2C_Mem_Read>
 80006fa:	4603      	mov	r3, r0
 80006fc:	72fb      	strb	r3, [r7, #11]
			DPS_ID_REG, I2C_MEMADD_SIZE_8BIT,
			&id, 1, 200);
	if (st != HAL_OK) return st;
 80006fe:	7afb      	ldrb	r3, [r7, #11]
 8000700:	2b00      	cmp	r3, #0
 8000702:	d001      	beq.n	8000708 <dps_probe+0x4c>
 8000704:	7afb      	ldrb	r3, [r7, #11]
 8000706:	e008      	b.n	800071a <dps_probe+0x5e>

	s->last_whoami = id;
 8000708:	7aba      	ldrb	r2, [r7, #10]
 800070a:	68fb      	ldr	r3, [r7, #12]
 800070c:	731a      	strb	r2, [r3, #12]
	return (id == DPS_WHOAMI_EXPECT) ? HAL_OK : HAL_ERROR;
 800070e:	7abb      	ldrb	r3, [r7, #10]
 8000710:	2b10      	cmp	r3, #16
 8000712:	bf14      	ite	ne
 8000714:	2301      	movne	r3, #1
 8000716:	2300      	moveq	r3, #0
 8000718:	b2db      	uxtb	r3, r3
}
 800071a:	4618      	mov	r0, r3
 800071c:	3710      	adds	r7, #16
 800071e:	46bd      	mov	sp, r7
 8000720:	bd80      	pop	{r7, pc}

08000722 <dps_init>:

static HAL_StatusTypeDef dps_init(sensor_if_t *self)
{
 8000722:	b580      	push	{r7, lr}
 8000724:	b084      	sub	sp, #16
 8000726:	af00      	add	r7, sp, #0
 8000728:	6078      	str	r0, [r7, #4]
	dps310_t *s = getSelfStatePointer(self);
 800072a:	6878      	ldr	r0, [r7, #4]
 800072c:	f000 fe2e 	bl	800138c <getSelfStatePointer>
 8000730:	60f8      	str	r0, [r7, #12]

	HAL_StatusTypeDef response;

	//TODO: If this is 8 or higher, a bit shift needs to be applied. Check the docs.
	const uint8_t pressure_oversampling_rate = 6;
 8000732:	2306      	movs	r3, #6
 8000734:	72fb      	strb	r3, [r7, #11]

	response = dsp_soft_reset(s);
 8000736:	68f8      	ldr	r0, [r7, #12]
 8000738:	f000 fb11 	bl	8000d5e <dsp_soft_reset>
 800073c:	4603      	mov	r3, r0
 800073e:	72bb      	strb	r3, [r7, #10]
	if(response != HAL_OK){
 8000740:	7abb      	ldrb	r3, [r7, #10]
 8000742:	2b00      	cmp	r3, #0
 8000744:	d004      	beq.n	8000750 <dps_init+0x2e>
		s->last_err = DPS_ERR_NOT_INITIALIZED;
 8000746:	68fb      	ldr	r3, [r7, #12]
 8000748:	2205      	movs	r2, #5
 800074a:	715a      	strb	r2, [r3, #5]
		return HAL_ERROR;
 800074c:	2301      	movs	r3, #1
 800074e:	e063      	b.n	8000818 <dps_init+0xf6>
	}

	HAL_Delay(500);
 8000750:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000754:	f002 fc1c 	bl	8002f90 <HAL_Delay>

	response = dsp_pressure_configuration(s, 6, pressure_oversampling_rate);
 8000758:	7afb      	ldrb	r3, [r7, #11]
 800075a:	461a      	mov	r2, r3
 800075c:	2106      	movs	r1, #6
 800075e:	68f8      	ldr	r0, [r7, #12]
 8000760:	f000 f8f0 	bl	8000944 <dsp_pressure_configuration>
 8000764:	4603      	mov	r3, r0
 8000766:	72bb      	strb	r3, [r7, #10]
	if(response != HAL_OK){
 8000768:	7abb      	ldrb	r3, [r7, #10]
 800076a:	2b00      	cmp	r3, #0
 800076c:	d004      	beq.n	8000778 <dps_init+0x56>
		s->last_err = DPS_ERR_NOT_INITIALIZED;
 800076e:	68fb      	ldr	r3, [r7, #12]
 8000770:	2205      	movs	r2, #5
 8000772:	715a      	strb	r2, [r3, #5]
		return response;
 8000774:	7abb      	ldrb	r3, [r7, #10]
 8000776:	e04f      	b.n	8000818 <dps_init+0xf6>
	}

	HAL_Delay(500);
 8000778:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800077c:	f002 fc08 	bl	8002f90 <HAL_Delay>

	response = dsp_temperature_configuration(s, 1, 6, 6);
 8000780:	2306      	movs	r3, #6
 8000782:	2206      	movs	r2, #6
 8000784:	2101      	movs	r1, #1
 8000786:	68f8      	ldr	r0, [r7, #12]
 8000788:	f000 f957 	bl	8000a3a <dsp_temperature_configuration>
 800078c:	4603      	mov	r3, r0
 800078e:	72bb      	strb	r3, [r7, #10]
	if(response != HAL_OK){
 8000790:	7abb      	ldrb	r3, [r7, #10]
 8000792:	2b00      	cmp	r3, #0
 8000794:	d004      	beq.n	80007a0 <dps_init+0x7e>
		s->last_err = DPS_ERR_NOT_INITIALIZED;
 8000796:	68fb      	ldr	r3, [r7, #12]
 8000798:	2205      	movs	r2, #5
 800079a:	715a      	strb	r2, [r3, #5]
		return response;
 800079c:	7abb      	ldrb	r3, [r7, #10]
 800079e:	e03b      	b.n	8000818 <dps_init+0xf6>
	}

	HAL_Delay(500);
 80007a0:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80007a4:	f002 fbf4 	bl	8002f90 <HAL_Delay>

	response = dsp_fifo_config(s);
 80007a8:	68f8      	ldr	r0, [r7, #12]
 80007aa:	f000 f9c9 	bl	8000b40 <dsp_fifo_config>
 80007ae:	4603      	mov	r3, r0
 80007b0:	72bb      	strb	r3, [r7, #10]
	if(response != HAL_OK){
 80007b2:	7abb      	ldrb	r3, [r7, #10]
 80007b4:	2b00      	cmp	r3, #0
 80007b6:	d004      	beq.n	80007c2 <dps_init+0xa0>
		s->last_err = DPS_ERR_NOT_INITIALIZED;
 80007b8:	68fb      	ldr	r3, [r7, #12]
 80007ba:	2205      	movs	r2, #5
 80007bc:	715a      	strb	r2, [r3, #5]
		return HAL_ERROR;
 80007be:	2301      	movs	r3, #1
 80007c0:	e02a      	b.n	8000818 <dps_init+0xf6>
	}

	HAL_Delay(500);
 80007c2:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80007c6:	f002 fbe3 	bl	8002f90 <HAL_Delay>

	response = dsp_status_configuration(s, 7);
 80007ca:	2107      	movs	r1, #7
 80007cc:	68f8      	ldr	r0, [r7, #12]
 80007ce:	f000 fa4b 	bl	8000c68 <dsp_status_configuration>
 80007d2:	4603      	mov	r3, r0
 80007d4:	72bb      	strb	r3, [r7, #10]
	if(response != HAL_OK){
 80007d6:	7abb      	ldrb	r3, [r7, #10]
 80007d8:	2b00      	cmp	r3, #0
 80007da:	d004      	beq.n	80007e6 <dps_init+0xc4>
		s->last_err = DPS_ERR_NOT_INITIALIZED;
 80007dc:	68fb      	ldr	r3, [r7, #12]
 80007de:	2205      	movs	r2, #5
 80007e0:	715a      	strb	r2, [r3, #5]
		return response;
 80007e2:	7abb      	ldrb	r3, [r7, #10]
 80007e4:	e018      	b.n	8000818 <dps_init+0xf6>
	}

	HAL_Delay(500);
 80007e6:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80007ea:	f002 fbd1 	bl	8002f90 <HAL_Delay>

	response = dsp_read_coefficients(s);
 80007ee:	68f8      	ldr	r0, [r7, #12]
 80007f0:	f000 fad6 	bl	8000da0 <dsp_read_coefficients>
 80007f4:	4603      	mov	r3, r0
 80007f6:	72bb      	strb	r3, [r7, #10]
	if(response != HAL_OK){
 80007f8:	7abb      	ldrb	r3, [r7, #10]
 80007fa:	2b00      	cmp	r3, #0
 80007fc:	d004      	beq.n	8000808 <dps_init+0xe6>
		s->last_err = DPS_ERR_NOT_INITIALIZED;
 80007fe:	68fb      	ldr	r3, [r7, #12]
 8000800:	2205      	movs	r2, #5
 8000802:	715a      	strb	r2, [r3, #5]
		return response;
 8000804:	7abb      	ldrb	r3, [r7, #10]
 8000806:	e007      	b.n	8000818 <dps_init+0xf6>
	}

	HAL_Delay(500);
 8000808:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800080c:	f002 fbc0 	bl	8002f90 <HAL_Delay>

	s->last_err = DPS_OK;
 8000810:	68fb      	ldr	r3, [r7, #12]
 8000812:	2200      	movs	r2, #0
 8000814:	715a      	strb	r2, [r3, #5]
	return HAL_OK;
 8000816:	2300      	movs	r3, #0
}
 8000818:	4618      	mov	r0, r3
 800081a:	3710      	adds	r7, #16
 800081c:	46bd      	mov	sp, r7
 800081e:	bd80      	pop	{r7, pc}

08000820 <dps_read>:

static HAL_StatusTypeDef dps_read(sensor_if_t *self)
{
 8000820:	b580      	push	{r7, lr}
 8000822:	b084      	sub	sp, #16
 8000824:	af00      	add	r7, sp, #0
 8000826:	6078      	str	r0, [r7, #4]
	dps310_t *s = getSelfStatePointer(self);
 8000828:	6878      	ldr	r0, [r7, #4]
 800082a:	f000 fdaf 	bl	800138c <getSelfStatePointer>
 800082e:	60f8      	str	r0, [r7, #12]

	HAL_StatusTypeDef response;

	response = dsp_read_pressure_raw(s);
 8000830:	68f8      	ldr	r0, [r7, #12]
 8000832:	f000 fc9b 	bl	800116c <dsp_read_pressure_raw>
 8000836:	4603      	mov	r3, r0
 8000838:	72fb      	strb	r3, [r7, #11]
	if(response != HAL_OK){
 800083a:	7afb      	ldrb	r3, [r7, #11]
 800083c:	2b00      	cmp	r3, #0
 800083e:	d004      	beq.n	800084a <dps_read+0x2a>
		s->last_err = DPS_ERR_NOT_INITIALIZED;
 8000840:	68fb      	ldr	r3, [r7, #12]
 8000842:	2205      	movs	r2, #5
 8000844:	715a      	strb	r2, [r3, #5]
		return HAL_ERROR;
 8000846:	2301      	movs	r3, #1
 8000848:	e037      	b.n	80008ba <dps_read+0x9a>
	}

	response = dsp_read_temperature_raw(s);  // fill self->temperature_raw   (sign-extended 24-bit, as float)
 800084a:	68f8      	ldr	r0, [r7, #12]
 800084c:	f000 fcd9 	bl	8001202 <dsp_read_temperature_raw>
 8000850:	4603      	mov	r3, r0
 8000852:	72fb      	strb	r3, [r7, #11]
	if(response != HAL_OK){
 8000854:	7afb      	ldrb	r3, [r7, #11]
 8000856:	2b00      	cmp	r3, #0
 8000858:	d004      	beq.n	8000864 <dps_read+0x44>
		s->last_err = DPS_ERR_NOT_INITIALIZED;
 800085a:	68fb      	ldr	r3, [r7, #12]
 800085c:	2205      	movs	r2, #5
 800085e:	715a      	strb	r2, [r3, #5]
		return HAL_ERROR;
 8000860:	2301      	movs	r3, #1
 8000862:	e02a      	b.n	80008ba <dps_read+0x9a>
	}

	response = dsp_read_pressure_raw(s);     // fill self->pressure_raw      (sign-extended 24-bit, as float)
 8000864:	68f8      	ldr	r0, [r7, #12]
 8000866:	f000 fc81 	bl	800116c <dsp_read_pressure_raw>
 800086a:	4603      	mov	r3, r0
 800086c:	72fb      	strb	r3, [r7, #11]
	if(response != HAL_OK){
 800086e:	7afb      	ldrb	r3, [r7, #11]
 8000870:	2b00      	cmp	r3, #0
 8000872:	d004      	beq.n	800087e <dps_read+0x5e>
		s->last_err = DPS_ERR_NOT_INITIALIZED;
 8000874:	68fb      	ldr	r3, [r7, #12]
 8000876:	2205      	movs	r2, #5
 8000878:	715a      	strb	r2, [r3, #5]
		return HAL_ERROR;
 800087a:	2301      	movs	r3, #1
 800087c:	e01d      	b.n	80008ba <dps_read+0x9a>
	}

	response = dsp_compensate_all(s);        // fills self->temperature (°C) and self->pressure (Pa)
 800087e:	68f8      	ldr	r0, [r7, #12]
 8000880:	f000 fb5a 	bl	8000f38 <dsp_compensate_all>
 8000884:	4603      	mov	r3, r0
 8000886:	72fb      	strb	r3, [r7, #11]
	if(response != HAL_OK){
 8000888:	7afb      	ldrb	r3, [r7, #11]
 800088a:	2b00      	cmp	r3, #0
 800088c:	d004      	beq.n	8000898 <dps_read+0x78>
		s->last_err = DPS_ERR_NOT_INITIALIZED;
 800088e:	68fb      	ldr	r3, [r7, #12]
 8000890:	2205      	movs	r2, #5
 8000892:	715a      	strb	r2, [r3, #5]
		return HAL_ERROR;
 8000894:	2301      	movs	r3, #1
 8000896:	e010      	b.n	80008ba <dps_read+0x9a>
	}

	response = dps_pressure_to_altitude(s);
 8000898:	68f8      	ldr	r0, [r7, #12]
 800089a:	f000 fc31 	bl	8001100 <dps_pressure_to_altitude>
 800089e:	4603      	mov	r3, r0
 80008a0:	72fb      	strb	r3, [r7, #11]
	if(response != HAL_OK){
 80008a2:	7afb      	ldrb	r3, [r7, #11]
 80008a4:	2b00      	cmp	r3, #0
 80008a6:	d004      	beq.n	80008b2 <dps_read+0x92>
		s->last_err = DPS_ERR_NOT_INITIALIZED;
 80008a8:	68fb      	ldr	r3, [r7, #12]
 80008aa:	2205      	movs	r2, #5
 80008ac:	715a      	strb	r2, [r3, #5]
		return HAL_ERROR;
 80008ae:	2301      	movs	r3, #1
 80008b0:	e003      	b.n	80008ba <dps_read+0x9a>
	}

	s->last_err = DPS_OK;
 80008b2:	68fb      	ldr	r3, [r7, #12]
 80008b4:	2200      	movs	r2, #0
 80008b6:	715a      	strb	r2, [r3, #5]
	return HAL_OK;
 80008b8:	2300      	movs	r3, #0
}
 80008ba:	4618      	mov	r0, r3
 80008bc:	3710      	adds	r7, #16
 80008be:	46bd      	mov	sp, r7
 80008c0:	bd80      	pop	{r7, pc}

080008c2 <dps_whoami>:

static HAL_StatusTypeDef dps_whoami(sensor_if_t *self, uint8_t *out)
{
 80008c2:	b580      	push	{r7, lr}
 80008c4:	b088      	sub	sp, #32
 80008c6:	af04      	add	r7, sp, #16
 80008c8:	6078      	str	r0, [r7, #4]
 80008ca:	6039      	str	r1, [r7, #0]
	dps310_t *s = (dps310_t*)self->state;
 80008cc:	687b      	ldr	r3, [r7, #4]
 80008ce:	685b      	ldr	r3, [r3, #4]
 80008d0:	60fb      	str	r3, [r7, #12]
	if (!s || !out) return HAL_ERROR;
 80008d2:	68fb      	ldr	r3, [r7, #12]
 80008d4:	2b00      	cmp	r3, #0
 80008d6:	d002      	beq.n	80008de <dps_whoami+0x1c>
 80008d8:	683b      	ldr	r3, [r7, #0]
 80008da:	2b00      	cmp	r3, #0
 80008dc:	d101      	bne.n	80008e2 <dps_whoami+0x20>
 80008de:	2301      	movs	r3, #1
 80008e0:	e010      	b.n	8000904 <dps_whoami+0x42>

	return HAL_I2C_Mem_Read(s->i2c, s->addr7 << 1,
 80008e2:	68fb      	ldr	r3, [r7, #12]
 80008e4:	6818      	ldr	r0, [r3, #0]
 80008e6:	68fb      	ldr	r3, [r7, #12]
 80008e8:	791b      	ldrb	r3, [r3, #4]
 80008ea:	005b      	lsls	r3, r3, #1
 80008ec:	b299      	uxth	r1, r3
 80008ee:	23c8      	movs	r3, #200	@ 0xc8
 80008f0:	9302      	str	r3, [sp, #8]
 80008f2:	2301      	movs	r3, #1
 80008f4:	9301      	str	r3, [sp, #4]
 80008f6:	683b      	ldr	r3, [r7, #0]
 80008f8:	9300      	str	r3, [sp, #0]
 80008fa:	2301      	movs	r3, #1
 80008fc:	220d      	movs	r2, #13
 80008fe:	f003 f84d 	bl	800399c <HAL_I2C_Mem_Read>
 8000902:	4603      	mov	r3, r0
			DPS_ID_REG, I2C_MEMADD_SIZE_8BIT,
			out, 1, 200);
}
 8000904:	4618      	mov	r0, r3
 8000906:	3710      	adds	r7, #16
 8000908:	46bd      	mov	sp, r7
 800090a:	bd80      	pop	{r7, pc}

0800090c <dps310_bind>:
		.whoami = dps_whoami
};

void dps310_bind(sensor_if_t *iface, dps310_t *inst,
		I2C_HandleTypeDef *i2c, uint8_t addr7)
{
 800090c:	b480      	push	{r7}
 800090e:	b085      	sub	sp, #20
 8000910:	af00      	add	r7, sp, #0
 8000912:	60f8      	str	r0, [r7, #12]
 8000914:	60b9      	str	r1, [r7, #8]
 8000916:	607a      	str	r2, [r7, #4]
 8000918:	70fb      	strb	r3, [r7, #3]
	inst->i2c   = i2c;
 800091a:	68bb      	ldr	r3, [r7, #8]
 800091c:	687a      	ldr	r2, [r7, #4]
 800091e:	601a      	str	r2, [r3, #0]
	inst->addr7 = addr7;
 8000920:	68bb      	ldr	r3, [r7, #8]
 8000922:	78fa      	ldrb	r2, [r7, #3]
 8000924:	711a      	strb	r2, [r3, #4]
	iface->vTable    = &DPS310_VTBL;
 8000926:	68fb      	ldr	r3, [r7, #12]
 8000928:	4a05      	ldr	r2, [pc, #20]	@ (8000940 <dps310_bind+0x34>)
 800092a:	601a      	str	r2, [r3, #0]
	iface->state = inst;
 800092c:	68fb      	ldr	r3, [r7, #12]
 800092e:	68ba      	ldr	r2, [r7, #8]
 8000930:	605a      	str	r2, [r3, #4]
}
 8000932:	bf00      	nop
 8000934:	3714      	adds	r7, #20
 8000936:	46bd      	mov	sp, r7
 8000938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800093c:	4770      	bx	lr
 800093e:	bf00      	nop
 8000940:	0800b29c 	.word	0x0800b29c

08000944 <dsp_pressure_configuration>:

/* ---------- Configuration ---------- */
static HAL_StatusTypeDef dsp_pressure_configuration(dps310_t *self, uint8_t pressure_measurement_rate, uint8_t pressure_oversampling_rate){
 8000944:	b580      	push	{r7, lr}
 8000946:	b088      	sub	sp, #32
 8000948:	af04      	add	r7, sp, #16
 800094a:	6078      	str	r0, [r7, #4]
 800094c:	460b      	mov	r3, r1
 800094e:	70fb      	strb	r3, [r7, #3]
 8000950:	4613      	mov	r3, r2
 8000952:	70bb      	strb	r3, [r7, #2]
	if(!self) {return HAL_ERROR;}
 8000954:	687b      	ldr	r3, [r7, #4]
 8000956:	2b00      	cmp	r3, #0
 8000958:	d101      	bne.n	800095e <dsp_pressure_configuration+0x1a>
 800095a:	2301      	movs	r3, #1
 800095c:	e069      	b.n	8000a32 <dsp_pressure_configuration+0xee>

	uint8_t v;
	HAL_StatusTypeDef response;

	pressure_measurement_rate = clip3(pressure_measurement_rate);
 800095e:	78fb      	ldrb	r3, [r7, #3]
 8000960:	4618      	mov	r0, r3
 8000962:	f000 fc99 	bl	8001298 <clip3>
 8000966:	4603      	mov	r3, r0
 8000968:	70fb      	strb	r3, [r7, #3]
	pressure_oversampling_rate = clip4(pressure_oversampling_rate);
 800096a:	78bb      	ldrb	r3, [r7, #2]
 800096c:	4618      	mov	r0, r3
 800096e:	f000 fca2 	bl	80012b6 <clip4>
 8000972:	4603      	mov	r3, r0
 8000974:	70bb      	strb	r3, [r7, #2]

	//Read
	response = HAL_I2C_Mem_Read(self->i2c, self->addr7<<1, DPS_PRESSURE_CONFIGURATION_Reg, I2C_MEMADD_SIZE_8BIT, &v, sizeof(v), 200);
 8000976:	687b      	ldr	r3, [r7, #4]
 8000978:	6818      	ldr	r0, [r3, #0]
 800097a:	687b      	ldr	r3, [r7, #4]
 800097c:	791b      	ldrb	r3, [r3, #4]
 800097e:	005b      	lsls	r3, r3, #1
 8000980:	b299      	uxth	r1, r3
 8000982:	23c8      	movs	r3, #200	@ 0xc8
 8000984:	9302      	str	r3, [sp, #8]
 8000986:	2301      	movs	r3, #1
 8000988:	9301      	str	r3, [sp, #4]
 800098a:	f107 030d 	add.w	r3, r7, #13
 800098e:	9300      	str	r3, [sp, #0]
 8000990:	2301      	movs	r3, #1
 8000992:	2206      	movs	r2, #6
 8000994:	f003 f802 	bl	800399c <HAL_I2C_Mem_Read>
 8000998:	4603      	mov	r3, r0
 800099a:	73fb      	strb	r3, [r7, #15]
	if(response != HAL_OK){
 800099c:	7bfb      	ldrb	r3, [r7, #15]
 800099e:	2b00      	cmp	r3, #0
 80009a0:	d004      	beq.n	80009ac <dsp_pressure_configuration+0x68>
		self->last_err = DPS_ERR_I2C;
 80009a2:	687b      	ldr	r3, [r7, #4]
 80009a4:	2202      	movs	r2, #2
 80009a6:	715a      	strb	r2, [r3, #5]
		return HAL_ERROR;
 80009a8:	2301      	movs	r3, #1
 80009aa:	e042      	b.n	8000a32 <dsp_pressure_configuration+0xee>
	}

	//Modify
	uint8_t set = (uint8_t)	(pressure_measurement_rate 	<< DPS_PRESSURE_CONFIGURATION_MR_Pos) | \
 80009ac:	78fb      	ldrb	r3, [r7, #3]
 80009ae:	011b      	lsls	r3, r3, #4
 80009b0:	b2da      	uxtb	r2, r3
 80009b2:	78bb      	ldrb	r3, [r7, #2]
 80009b4:	4313      	orrs	r3, r2
 80009b6:	73bb      	strb	r3, [r7, #14]
			(pressure_oversampling_rate << DPS_PRESSURE_CONFIGURATION_POR_Pos);

	uint8_t nv   = (uint8_t)((v & ~DPS_PRESSURE_CONFIGURATION_Msk) | set);
 80009b8:	7b7b      	ldrb	r3, [r7, #13]
 80009ba:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80009be:	b2da      	uxtb	r2, r3
 80009c0:	7bbb      	ldrb	r3, [r7, #14]
 80009c2:	4313      	orrs	r3, r2
 80009c4:	b2db      	uxtb	r3, r3
 80009c6:	733b      	strb	r3, [r7, #12]


	//Write
	if (nv != v){
 80009c8:	7b3a      	ldrb	r2, [r7, #12]
 80009ca:	7b7b      	ldrb	r3, [r7, #13]
 80009cc:	429a      	cmp	r2, r3
 80009ce:	d01a      	beq.n	8000a06 <dsp_pressure_configuration+0xc2>
		response = HAL_I2C_Mem_Write(self->i2c, self->addr7<<1, DPS_PRESSURE_CONFIGURATION_Reg, I2C_MEMADD_SIZE_8BIT, &nv, sizeof(nv), 200);
 80009d0:	687b      	ldr	r3, [r7, #4]
 80009d2:	6818      	ldr	r0, [r3, #0]
 80009d4:	687b      	ldr	r3, [r7, #4]
 80009d6:	791b      	ldrb	r3, [r3, #4]
 80009d8:	005b      	lsls	r3, r3, #1
 80009da:	b299      	uxth	r1, r3
 80009dc:	23c8      	movs	r3, #200	@ 0xc8
 80009de:	9302      	str	r3, [sp, #8]
 80009e0:	2301      	movs	r3, #1
 80009e2:	9301      	str	r3, [sp, #4]
 80009e4:	f107 030c 	add.w	r3, r7, #12
 80009e8:	9300      	str	r3, [sp, #0]
 80009ea:	2301      	movs	r3, #1
 80009ec:	2206      	movs	r2, #6
 80009ee:	f002 fec1 	bl	8003774 <HAL_I2C_Mem_Write>
 80009f2:	4603      	mov	r3, r0
 80009f4:	73fb      	strb	r3, [r7, #15]
		if(response != HAL_OK){
 80009f6:	7bfb      	ldrb	r3, [r7, #15]
 80009f8:	2b00      	cmp	r3, #0
 80009fa:	d004      	beq.n	8000a06 <dsp_pressure_configuration+0xc2>
			self->last_err = DPS_ERR_I2C;
 80009fc:	687b      	ldr	r3, [r7, #4]
 80009fe:	2202      	movs	r2, #2
 8000a00:	715a      	strb	r2, [r3, #5]
			return HAL_ERROR;
 8000a02:	2301      	movs	r3, #1
 8000a04:	e015      	b.n	8000a32 <dsp_pressure_configuration+0xee>
		}
	}

	self->p_osr_code = (uint8_t)(pressure_oversampling_rate & 0x0F);
 8000a06:	78bb      	ldrb	r3, [r7, #2]
 8000a08:	f003 030f 	and.w	r3, r3, #15
 8000a0c:	b2da      	uxtb	r2, r3
 8000a0e:	687b      	ldr	r3, [r7, #4]
 8000a10:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26
	self->kP = dps_osr_scale(self->p_osr_code);
 8000a14:	687b      	ldr	r3, [r7, #4]
 8000a16:	f893 3026 	ldrb.w	r3, [r3, #38]	@ 0x26
 8000a1a:	4618      	mov	r0, r3
 8000a1c:	f000 fc9e 	bl	800135c <dps_osr_scale>
 8000a20:	eef0 7a40 	vmov.f32	s15, s0
 8000a24:	687b      	ldr	r3, [r7, #4]
 8000a26:	edc3 7a0a 	vstr	s15, [r3, #40]	@ 0x28


	self->last_err = DPS_OK;
 8000a2a:	687b      	ldr	r3, [r7, #4]
 8000a2c:	2200      	movs	r2, #0
 8000a2e:	715a      	strb	r2, [r3, #5]
	return HAL_OK;
 8000a30:	2300      	movs	r3, #0
}
 8000a32:	4618      	mov	r0, r3
 8000a34:	3710      	adds	r7, #16
 8000a36:	46bd      	mov	sp, r7
 8000a38:	bd80      	pop	{r7, pc}

08000a3a <dsp_temperature_configuration>:

static HAL_StatusTypeDef dsp_temperature_configuration(dps310_t *self, uint8_t temperature_sensor, uint8_t temperature_measurement_rate, uint8_t temperature_oversampling_rate){
 8000a3a:	b580      	push	{r7, lr}
 8000a3c:	b088      	sub	sp, #32
 8000a3e:	af04      	add	r7, sp, #16
 8000a40:	6078      	str	r0, [r7, #4]
 8000a42:	4608      	mov	r0, r1
 8000a44:	4611      	mov	r1, r2
 8000a46:	461a      	mov	r2, r3
 8000a48:	4603      	mov	r3, r0
 8000a4a:	70fb      	strb	r3, [r7, #3]
 8000a4c:	460b      	mov	r3, r1
 8000a4e:	70bb      	strb	r3, [r7, #2]
 8000a50:	4613      	mov	r3, r2
 8000a52:	707b      	strb	r3, [r7, #1]
	if(!self) {return HAL_ERROR;}
 8000a54:	687b      	ldr	r3, [r7, #4]
 8000a56:	2b00      	cmp	r3, #0
 8000a58:	d101      	bne.n	8000a5e <dsp_temperature_configuration+0x24>
 8000a5a:	2301      	movs	r3, #1
 8000a5c:	e06c      	b.n	8000b38 <dsp_temperature_configuration+0xfe>

	uint8_t v;
	HAL_StatusTypeDef response;

	temperature_measurement_rate = clip3(temperature_measurement_rate);
 8000a5e:	78bb      	ldrb	r3, [r7, #2]
 8000a60:	4618      	mov	r0, r3
 8000a62:	f000 fc19 	bl	8001298 <clip3>
 8000a66:	4603      	mov	r3, r0
 8000a68:	70bb      	strb	r3, [r7, #2]
	temperature_oversampling_rate = clip4(temperature_oversampling_rate);
 8000a6a:	787b      	ldrb	r3, [r7, #1]
 8000a6c:	4618      	mov	r0, r3
 8000a6e:	f000 fc22 	bl	80012b6 <clip4>
 8000a72:	4603      	mov	r3, r0
 8000a74:	707b      	strb	r3, [r7, #1]

	//Read
	response = HAL_I2C_Mem_Read(self->i2c, self->addr7<<1, DPS_TEMPERATURE_CONFIGURATION_Reg, I2C_MEMADD_SIZE_8BIT, &v, sizeof(v), 200);
 8000a76:	687b      	ldr	r3, [r7, #4]
 8000a78:	6818      	ldr	r0, [r3, #0]
 8000a7a:	687b      	ldr	r3, [r7, #4]
 8000a7c:	791b      	ldrb	r3, [r3, #4]
 8000a7e:	005b      	lsls	r3, r3, #1
 8000a80:	b299      	uxth	r1, r3
 8000a82:	23c8      	movs	r3, #200	@ 0xc8
 8000a84:	9302      	str	r3, [sp, #8]
 8000a86:	2301      	movs	r3, #1
 8000a88:	9301      	str	r3, [sp, #4]
 8000a8a:	f107 030d 	add.w	r3, r7, #13
 8000a8e:	9300      	str	r3, [sp, #0]
 8000a90:	2301      	movs	r3, #1
 8000a92:	2207      	movs	r2, #7
 8000a94:	f002 ff82 	bl	800399c <HAL_I2C_Mem_Read>
 8000a98:	4603      	mov	r3, r0
 8000a9a:	73fb      	strb	r3, [r7, #15]
	if(response != HAL_OK){
 8000a9c:	7bfb      	ldrb	r3, [r7, #15]
 8000a9e:	2b00      	cmp	r3, #0
 8000aa0:	d004      	beq.n	8000aac <dsp_temperature_configuration+0x72>
		self->last_err = DPS_ERR_I2C;
 8000aa2:	687b      	ldr	r3, [r7, #4]
 8000aa4:	2202      	movs	r2, #2
 8000aa6:	715a      	strb	r2, [r3, #5]
		return HAL_ERROR;
 8000aa8:	2301      	movs	r3, #1
 8000aaa:	e045      	b.n	8000b38 <dsp_temperature_configuration+0xfe>
	}

	//Modify
	uint8_t set = (uint8_t)	(temperature_sensor << DPS_TEMPERATURE_CONFIGURATION_SENSE_Pos) | \
 8000aac:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8000ab0:	01db      	lsls	r3, r3, #7
 8000ab2:	b25a      	sxtb	r2, r3
 8000ab4:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8000ab8:	011b      	lsls	r3, r3, #4
 8000aba:	b25b      	sxtb	r3, r3
 8000abc:	4313      	orrs	r3, r2
 8000abe:	b25a      	sxtb	r2, r3
			(temperature_measurement_rate 	<< DPS_TEMPERATURE_CONFIGURATION_MR_Pos) | \
 8000ac0:	f997 3001 	ldrsb.w	r3, [r7, #1]
 8000ac4:	4313      	orrs	r3, r2
 8000ac6:	b25b      	sxtb	r3, r3
	uint8_t set = (uint8_t)	(temperature_sensor << DPS_TEMPERATURE_CONFIGURATION_SENSE_Pos) | \
 8000ac8:	73bb      	strb	r3, [r7, #14]
			(temperature_oversampling_rate << DPS_TEMPERATURE_CONFIGURATION_TOS_Pos);

	uint8_t nv   = (uint8_t)((v & ~DPS_TEMPERATURE_CONFIGURATION_Msk) | set);
 8000aca:	7bbb      	ldrb	r3, [r7, #14]
 8000acc:	733b      	strb	r3, [r7, #12]


	//Write
	if (nv != v){
 8000ace:	7b3a      	ldrb	r2, [r7, #12]
 8000ad0:	7b7b      	ldrb	r3, [r7, #13]
 8000ad2:	429a      	cmp	r2, r3
 8000ad4:	d01a      	beq.n	8000b0c <dsp_temperature_configuration+0xd2>
		response = HAL_I2C_Mem_Write(self->i2c, self->addr7<<1, DPS_TEMPERATURE_CONFIGURATION_Reg, I2C_MEMADD_SIZE_8BIT, &nv, sizeof(nv), 200);
 8000ad6:	687b      	ldr	r3, [r7, #4]
 8000ad8:	6818      	ldr	r0, [r3, #0]
 8000ada:	687b      	ldr	r3, [r7, #4]
 8000adc:	791b      	ldrb	r3, [r3, #4]
 8000ade:	005b      	lsls	r3, r3, #1
 8000ae0:	b299      	uxth	r1, r3
 8000ae2:	23c8      	movs	r3, #200	@ 0xc8
 8000ae4:	9302      	str	r3, [sp, #8]
 8000ae6:	2301      	movs	r3, #1
 8000ae8:	9301      	str	r3, [sp, #4]
 8000aea:	f107 030c 	add.w	r3, r7, #12
 8000aee:	9300      	str	r3, [sp, #0]
 8000af0:	2301      	movs	r3, #1
 8000af2:	2207      	movs	r2, #7
 8000af4:	f002 fe3e 	bl	8003774 <HAL_I2C_Mem_Write>
 8000af8:	4603      	mov	r3, r0
 8000afa:	73fb      	strb	r3, [r7, #15]
		if(response != HAL_OK){
 8000afc:	7bfb      	ldrb	r3, [r7, #15]
 8000afe:	2b00      	cmp	r3, #0
 8000b00:	d004      	beq.n	8000b0c <dsp_temperature_configuration+0xd2>
			self->last_err = DPS_ERR_I2C;
 8000b02:	687b      	ldr	r3, [r7, #4]
 8000b04:	2202      	movs	r2, #2
 8000b06:	715a      	strb	r2, [r3, #5]
			return HAL_ERROR;
 8000b08:	2301      	movs	r3, #1
 8000b0a:	e015      	b.n	8000b38 <dsp_temperature_configuration+0xfe>
		}
	}

	self->t_osr_code = (uint8_t)(temperature_oversampling_rate & 0x0F);
 8000b0c:	787b      	ldrb	r3, [r7, #1]
 8000b0e:	f003 030f 	and.w	r3, r3, #15
 8000b12:	b2da      	uxtb	r2, r3
 8000b14:	687b      	ldr	r3, [r7, #4]
 8000b16:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27
	self->kT = dps_osr_scale(self->t_osr_code);
 8000b1a:	687b      	ldr	r3, [r7, #4]
 8000b1c:	f893 3027 	ldrb.w	r3, [r3, #39]	@ 0x27
 8000b20:	4618      	mov	r0, r3
 8000b22:	f000 fc1b 	bl	800135c <dps_osr_scale>
 8000b26:	eef0 7a40 	vmov.f32	s15, s0
 8000b2a:	687b      	ldr	r3, [r7, #4]
 8000b2c:	edc3 7a0b 	vstr	s15, [r3, #44]	@ 0x2c

	self->last_err = DPS_OK;
 8000b30:	687b      	ldr	r3, [r7, #4]
 8000b32:	2200      	movs	r2, #0
 8000b34:	715a      	strb	r2, [r3, #5]
	return HAL_OK;
 8000b36:	2300      	movs	r3, #0
}
 8000b38:	4618      	mov	r0, r3
 8000b3a:	3710      	adds	r7, #16
 8000b3c:	46bd      	mov	sp, r7
 8000b3e:	bd80      	pop	{r7, pc}

08000b40 <dsp_fifo_config>:

static HAL_StatusTypeDef dsp_fifo_config(dps310_t *self)
{
 8000b40:	b580      	push	{r7, lr}
 8000b42:	b088      	sub	sp, #32
 8000b44:	af04      	add	r7, sp, #16
 8000b46:	6078      	str	r0, [r7, #4]
	if (!self) return HAL_ERROR;
 8000b48:	687b      	ldr	r3, [r7, #4]
 8000b4a:	2b00      	cmp	r3, #0
 8000b4c:	d101      	bne.n	8000b52 <dsp_fifo_config+0x12>
 8000b4e:	2301      	movs	r3, #1
 8000b50:	e086      	b.n	8000c60 <dsp_fifo_config+0x120>

	HAL_StatusTypeDef st;
	uint8_t pv = 0, tv = 0, cfg = 0;
 8000b52:	2300      	movs	r3, #0
 8000b54:	733b      	strb	r3, [r7, #12]
 8000b56:	2300      	movs	r3, #0
 8000b58:	72fb      	strb	r3, [r7, #11]
 8000b5a:	2300      	movs	r3, #0
 8000b5c:	72bb      	strb	r3, [r7, #10]

	/* Read pressure & temperature config to get OSR codes */
	st = HAL_I2C_Mem_Read(self->i2c, self->addr7 << 1,
 8000b5e:	687b      	ldr	r3, [r7, #4]
 8000b60:	6818      	ldr	r0, [r3, #0]
 8000b62:	687b      	ldr	r3, [r7, #4]
 8000b64:	791b      	ldrb	r3, [r3, #4]
 8000b66:	005b      	lsls	r3, r3, #1
 8000b68:	b299      	uxth	r1, r3
 8000b6a:	23c8      	movs	r3, #200	@ 0xc8
 8000b6c:	9302      	str	r3, [sp, #8]
 8000b6e:	2301      	movs	r3, #1
 8000b70:	9301      	str	r3, [sp, #4]
 8000b72:	f107 030c 	add.w	r3, r7, #12
 8000b76:	9300      	str	r3, [sp, #0]
 8000b78:	2301      	movs	r3, #1
 8000b7a:	2206      	movs	r2, #6
 8000b7c:	f002 ff0e 	bl	800399c <HAL_I2C_Mem_Read>
 8000b80:	4603      	mov	r3, r0
 8000b82:	73fb      	strb	r3, [r7, #15]
			DPS_PRESSURE_CONFIGURATION_Reg, I2C_MEMADD_SIZE_8BIT,
			&pv, 1, 200);
	if (st != HAL_OK) return st;
 8000b84:	7bfb      	ldrb	r3, [r7, #15]
 8000b86:	2b00      	cmp	r3, #0
 8000b88:	d001      	beq.n	8000b8e <dsp_fifo_config+0x4e>
 8000b8a:	7bfb      	ldrb	r3, [r7, #15]
 8000b8c:	e068      	b.n	8000c60 <dsp_fifo_config+0x120>

	st = HAL_I2C_Mem_Read(self->i2c, self->addr7 << 1,
 8000b8e:	687b      	ldr	r3, [r7, #4]
 8000b90:	6818      	ldr	r0, [r3, #0]
 8000b92:	687b      	ldr	r3, [r7, #4]
 8000b94:	791b      	ldrb	r3, [r3, #4]
 8000b96:	005b      	lsls	r3, r3, #1
 8000b98:	b299      	uxth	r1, r3
 8000b9a:	23c8      	movs	r3, #200	@ 0xc8
 8000b9c:	9302      	str	r3, [sp, #8]
 8000b9e:	2301      	movs	r3, #1
 8000ba0:	9301      	str	r3, [sp, #4]
 8000ba2:	f107 030b 	add.w	r3, r7, #11
 8000ba6:	9300      	str	r3, [sp, #0]
 8000ba8:	2301      	movs	r3, #1
 8000baa:	2207      	movs	r2, #7
 8000bac:	f002 fef6 	bl	800399c <HAL_I2C_Mem_Read>
 8000bb0:	4603      	mov	r3, r0
 8000bb2:	73fb      	strb	r3, [r7, #15]
			DPS_TEMPERATURE_CONFIGURATION_Reg, I2C_MEMADD_SIZE_8BIT,
			&tv, 1, 200);
	if (st != HAL_OK) return st;
 8000bb4:	7bfb      	ldrb	r3, [r7, #15]
 8000bb6:	2b00      	cmp	r3, #0
 8000bb8:	d001      	beq.n	8000bbe <dsp_fifo_config+0x7e>
 8000bba:	7bfb      	ldrb	r3, [r7, #15]
 8000bbc:	e050      	b.n	8000c60 <dsp_fifo_config+0x120>

	/* Extract OSR codes */
	uint8_t p_osr = (uint8_t)((pv & DPS_PRESSURE_CONFIGURATION_POR_Msk) >>
 8000bbe:	7b3b      	ldrb	r3, [r7, #12]
 8000bc0:	f003 030f 	and.w	r3, r3, #15
 8000bc4:	73bb      	strb	r3, [r7, #14]
			DPS_PRESSURE_CONFIGURATION_POR_Pos);
	uint8_t t_osr = (uint8_t)((tv & DPS_TEMPERATURE_CONFIGURATION_TOS_Msk) >>
 8000bc6:	7afb      	ldrb	r3, [r7, #11]
 8000bc8:	f003 030f 	and.w	r3, r3, #15
 8000bcc:	737b      	strb	r3, [r7, #13]
			DPS_TEMPERATURE_CONFIGURATION_TOS_Pos);

	/* Read current CFG_REG */
	st = HAL_I2C_Mem_Read(self->i2c, self->addr7 << 1,
 8000bce:	687b      	ldr	r3, [r7, #4]
 8000bd0:	6818      	ldr	r0, [r3, #0]
 8000bd2:	687b      	ldr	r3, [r7, #4]
 8000bd4:	791b      	ldrb	r3, [r3, #4]
 8000bd6:	005b      	lsls	r3, r3, #1
 8000bd8:	b299      	uxth	r1, r3
 8000bda:	23c8      	movs	r3, #200	@ 0xc8
 8000bdc:	9302      	str	r3, [sp, #8]
 8000bde:	2301      	movs	r3, #1
 8000be0:	9301      	str	r3, [sp, #4]
 8000be2:	f107 030a 	add.w	r3, r7, #10
 8000be6:	9300      	str	r3, [sp, #0]
 8000be8:	2301      	movs	r3, #1
 8000bea:	2209      	movs	r2, #9
 8000bec:	f002 fed6 	bl	800399c <HAL_I2C_Mem_Read>
 8000bf0:	4603      	mov	r3, r0
 8000bf2:	73fb      	strb	r3, [r7, #15]
			DPS_CFG_REG, I2C_MEMADD_SIZE_8BIT,
			&cfg, 1, 200);
	if (st != HAL_OK) return st;
 8000bf4:	7bfb      	ldrb	r3, [r7, #15]
 8000bf6:	2b00      	cmp	r3, #0
 8000bf8:	d001      	beq.n	8000bfe <dsp_fifo_config+0xbe>
 8000bfa:	7bfb      	ldrb	r3, [r7, #15]
 8000bfc:	e030      	b.n	8000c60 <dsp_fifo_config+0x120>

	/* Compute new CFG: toggle only T_SHIFT/P_SHIFT based on OSR */
	uint8_t nv = (uint8_t)(cfg & ~(DPS_CFG_P_SHIFT_Msk | DPS_CFG_T_SHIFT_Msk));
 8000bfe:	7abb      	ldrb	r3, [r7, #10]
 8000c00:	f023 030c 	bic.w	r3, r3, #12
 8000c04:	b2db      	uxtb	r3, r3
 8000c06:	727b      	strb	r3, [r7, #9]

	if (DPS_OSR_NEEDS_SHIFT(p_osr)) nv |= DPS_CFG_P_SHIFT_Msk;
 8000c08:	7bbb      	ldrb	r3, [r7, #14]
 8000c0a:	f003 030c 	and.w	r3, r3, #12
 8000c0e:	2b00      	cmp	r3, #0
 8000c10:	d004      	beq.n	8000c1c <dsp_fifo_config+0xdc>
 8000c12:	7a7b      	ldrb	r3, [r7, #9]
 8000c14:	f043 0304 	orr.w	r3, r3, #4
 8000c18:	b2db      	uxtb	r3, r3
 8000c1a:	727b      	strb	r3, [r7, #9]
	if (DPS_OSR_NEEDS_SHIFT(t_osr)) nv |= DPS_CFG_T_SHIFT_Msk;
 8000c1c:	7b7b      	ldrb	r3, [r7, #13]
 8000c1e:	f003 030c 	and.w	r3, r3, #12
 8000c22:	2b00      	cmp	r3, #0
 8000c24:	d004      	beq.n	8000c30 <dsp_fifo_config+0xf0>
 8000c26:	7a7b      	ldrb	r3, [r7, #9]
 8000c28:	f043 0308 	orr.w	r3, r3, #8
 8000c2c:	b2db      	uxtb	r3, r3
 8000c2e:	727b      	strb	r3, [r7, #9]

	if (nv == cfg) return HAL_OK;  /* nothing to do */
 8000c30:	7a7a      	ldrb	r2, [r7, #9]
 8000c32:	7abb      	ldrb	r3, [r7, #10]
 8000c34:	429a      	cmp	r2, r3
 8000c36:	d101      	bne.n	8000c3c <dsp_fifo_config+0xfc>
 8000c38:	2300      	movs	r3, #0
 8000c3a:	e011      	b.n	8000c60 <dsp_fifo_config+0x120>

	return HAL_I2C_Mem_Write(self->i2c, self->addr7 << 1,
 8000c3c:	687b      	ldr	r3, [r7, #4]
 8000c3e:	6818      	ldr	r0, [r3, #0]
 8000c40:	687b      	ldr	r3, [r7, #4]
 8000c42:	791b      	ldrb	r3, [r3, #4]
 8000c44:	005b      	lsls	r3, r3, #1
 8000c46:	b299      	uxth	r1, r3
 8000c48:	23c8      	movs	r3, #200	@ 0xc8
 8000c4a:	9302      	str	r3, [sp, #8]
 8000c4c:	2301      	movs	r3, #1
 8000c4e:	9301      	str	r3, [sp, #4]
 8000c50:	f107 0309 	add.w	r3, r7, #9
 8000c54:	9300      	str	r3, [sp, #0]
 8000c56:	2301      	movs	r3, #1
 8000c58:	2209      	movs	r2, #9
 8000c5a:	f002 fd8b 	bl	8003774 <HAL_I2C_Mem_Write>
 8000c5e:	4603      	mov	r3, r0
			DPS_CFG_REG, I2C_MEMADD_SIZE_8BIT,
			&nv, 1, 200);
}
 8000c60:	4618      	mov	r0, r3
 8000c62:	3710      	adds	r7, #16
 8000c64:	46bd      	mov	sp, r7
 8000c66:	bd80      	pop	{r7, pc}

08000c68 <dsp_status_configuration>:


static HAL_StatusTypeDef dsp_status_configuration(dps310_t *self, uint8_t meas_ctrl){
 8000c68:	b580      	push	{r7, lr}
 8000c6a:	b08a      	sub	sp, #40	@ 0x28
 8000c6c:	af04      	add	r7, sp, #16
 8000c6e:	6078      	str	r0, [r7, #4]
 8000c70:	460b      	mov	r3, r1
 8000c72:	70fb      	strb	r3, [r7, #3]
	if (!self) return HAL_ERROR;
 8000c74:	687b      	ldr	r3, [r7, #4]
 8000c76:	2b00      	cmp	r3, #0
 8000c78:	d101      	bne.n	8000c7e <dsp_status_configuration+0x16>
 8000c7a:	2301      	movs	r3, #1
 8000c7c:	e06b      	b.n	8000d56 <dsp_status_configuration+0xee>
	meas_ctrl = clip3(meas_ctrl);
 8000c7e:	78fb      	ldrb	r3, [r7, #3]
 8000c80:	4618      	mov	r0, r3
 8000c82:	f000 fb09 	bl	8001298 <clip3>
 8000c86:	4603      	mov	r3, r0
 8000c88:	70fb      	strb	r3, [r7, #3]

	uint8_t v = 0;
 8000c8a:	2300      	movs	r3, #0
 8000c8c:	743b      	strb	r3, [r7, #16]
	uint32_t t0 = HAL_GetTick();
 8000c8e:	f002 f973 	bl	8002f78 <HAL_GetTick>
 8000c92:	6178      	str	r0, [r7, #20]
	for (;;) {
		HAL_StatusTypeDef st = HAL_I2C_Mem_Read(self->i2c, (self->addr7 << 1),
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	6818      	ldr	r0, [r3, #0]
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	791b      	ldrb	r3, [r3, #4]
 8000c9c:	005b      	lsls	r3, r3, #1
 8000c9e:	b299      	uxth	r1, r3
 8000ca0:	23c8      	movs	r3, #200	@ 0xc8
 8000ca2:	9302      	str	r3, [sp, #8]
 8000ca4:	2301      	movs	r3, #1
 8000ca6:	9301      	str	r3, [sp, #4]
 8000ca8:	f107 0310 	add.w	r3, r7, #16
 8000cac:	9300      	str	r3, [sp, #0]
 8000cae:	2301      	movs	r3, #1
 8000cb0:	2208      	movs	r2, #8
 8000cb2:	f002 fe73 	bl	800399c <HAL_I2C_Mem_Read>
 8000cb6:	4603      	mov	r3, r0
 8000cb8:	74fb      	strb	r3, [r7, #19]
				DPS_STATUS_Reg, I2C_MEMADD_SIZE_8BIT,
				&v, 1, 200);
		if (st != HAL_OK) { self->last_err = DPS_ERR_I2C; return st; }
 8000cba:	7cfb      	ldrb	r3, [r7, #19]
 8000cbc:	2b00      	cmp	r3, #0
 8000cbe:	d004      	beq.n	8000cca <dsp_status_configuration+0x62>
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	2202      	movs	r2, #2
 8000cc4:	715a      	strb	r2, [r3, #5]
 8000cc6:	7cfb      	ldrb	r3, [r7, #19]
 8000cc8:	e045      	b.n	8000d56 <dsp_status_configuration+0xee>
		if ((v & DPS_STATUS_READY_Msk) == DPS_STATUS_READY_Msk) break;
 8000cca:	7c3b      	ldrb	r3, [r7, #16]
 8000ccc:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8000cd0:	2bc0      	cmp	r3, #192	@ 0xc0
 8000cd2:	d012      	beq.n	8000cfa <dsp_status_configuration+0x92>
		if ((HAL_GetTick() - t0) > 5000) {
 8000cd4:	f002 f950 	bl	8002f78 <HAL_GetTick>
 8000cd8:	4602      	mov	r2, r0
 8000cda:	697b      	ldr	r3, [r7, #20]
 8000cdc:	1ad3      	subs	r3, r2, r3
 8000cde:	f241 3288 	movw	r2, #5000	@ 0x1388
 8000ce2:	4293      	cmp	r3, r2
 8000ce4:	d904      	bls.n	8000cf0 <dsp_status_configuration+0x88>
			self->last_err = DPS_ERR_NOT_INITIALIZED;
 8000ce6:	687b      	ldr	r3, [r7, #4]
 8000ce8:	2205      	movs	r2, #5
 8000cea:	715a      	strb	r2, [r3, #5]
			return HAL_TIMEOUT;
 8000cec:	2303      	movs	r3, #3
 8000cee:	e032      	b.n	8000d56 <dsp_status_configuration+0xee>
		}
		HAL_Delay(1000);
 8000cf0:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000cf4:	f002 f94c 	bl	8002f90 <HAL_Delay>
	for (;;) {
 8000cf8:	e7cc      	b.n	8000c94 <dsp_status_configuration+0x2c>
		if ((v & DPS_STATUS_READY_Msk) == DPS_STATUS_READY_Msk) break;
 8000cfa:	bf00      	nop
	}

	// ---- RMW only MEAS_CTRL[2:0] ----
	uint8_t set = (uint8_t)(meas_ctrl << DPS_STATUS_MEAS_CTRL_Pos);
 8000cfc:	78fb      	ldrb	r3, [r7, #3]
 8000cfe:	74bb      	strb	r3, [r7, #18]
	uint8_t nv  = (uint8_t)((v & ~DPS_STATUS_MEAS_CTRL_Msk) | set);
 8000d00:	7c3b      	ldrb	r3, [r7, #16]
 8000d02:	f023 0303 	bic.w	r3, r3, #3
 8000d06:	b2da      	uxtb	r2, r3
 8000d08:	7cbb      	ldrb	r3, [r7, #18]
 8000d0a:	4313      	orrs	r3, r2
 8000d0c:	b2db      	uxtb	r3, r3
 8000d0e:	73fb      	strb	r3, [r7, #15]

	if (nv != v) {
 8000d10:	7bfa      	ldrb	r2, [r7, #15]
 8000d12:	7c3b      	ldrb	r3, [r7, #16]
 8000d14:	429a      	cmp	r2, r3
 8000d16:	d01a      	beq.n	8000d4e <dsp_status_configuration+0xe6>
		HAL_StatusTypeDef st = HAL_I2C_Mem_Write(self->i2c, (self->addr7 << 1), DPS_STATUS_Reg, I2C_MEMADD_SIZE_8BIT, &nv, 1, 200);
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	6818      	ldr	r0, [r3, #0]
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	791b      	ldrb	r3, [r3, #4]
 8000d20:	005b      	lsls	r3, r3, #1
 8000d22:	b299      	uxth	r1, r3
 8000d24:	23c8      	movs	r3, #200	@ 0xc8
 8000d26:	9302      	str	r3, [sp, #8]
 8000d28:	2301      	movs	r3, #1
 8000d2a:	9301      	str	r3, [sp, #4]
 8000d2c:	f107 030f 	add.w	r3, r7, #15
 8000d30:	9300      	str	r3, [sp, #0]
 8000d32:	2301      	movs	r3, #1
 8000d34:	2208      	movs	r2, #8
 8000d36:	f002 fd1d 	bl	8003774 <HAL_I2C_Mem_Write>
 8000d3a:	4603      	mov	r3, r0
 8000d3c:	747b      	strb	r3, [r7, #17]
		if (st != HAL_OK) { self->last_err = DPS_ERR_I2C; return st; }
 8000d3e:	7c7b      	ldrb	r3, [r7, #17]
 8000d40:	2b00      	cmp	r3, #0
 8000d42:	d004      	beq.n	8000d4e <dsp_status_configuration+0xe6>
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	2202      	movs	r2, #2
 8000d48:	715a      	strb	r2, [r3, #5]
 8000d4a:	7c7b      	ldrb	r3, [r7, #17]
 8000d4c:	e003      	b.n	8000d56 <dsp_status_configuration+0xee>
	}

	self->last_err = DPS_OK;
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	2200      	movs	r2, #0
 8000d52:	715a      	strb	r2, [r3, #5]
	return HAL_OK;
 8000d54:	2300      	movs	r3, #0
}
 8000d56:	4618      	mov	r0, r3
 8000d58:	3718      	adds	r7, #24
 8000d5a:	46bd      	mov	sp, r7
 8000d5c:	bd80      	pop	{r7, pc}

08000d5e <dsp_soft_reset>:

static HAL_StatusTypeDef dsp_soft_reset(dps310_t *self){
 8000d5e:	b580      	push	{r7, lr}
 8000d60:	b088      	sub	sp, #32
 8000d62:	af04      	add	r7, sp, #16
 8000d64:	6078      	str	r0, [r7, #4]
	if (!self) return HAL_ERROR;
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	2b00      	cmp	r3, #0
 8000d6a:	d101      	bne.n	8000d70 <dsp_soft_reset+0x12>
 8000d6c:	2301      	movs	r3, #1
 8000d6e:	e013      	b.n	8000d98 <dsp_soft_reset+0x3a>
	uint8_t v = 0x09; // SOFT_RST = 0b1001
 8000d70:	2309      	movs	r3, #9
 8000d72:	73fb      	strb	r3, [r7, #15]
	return HAL_I2C_Mem_Write(self->i2c, self->addr7 << 1,
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	6818      	ldr	r0, [r3, #0]
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	791b      	ldrb	r3, [r3, #4]
 8000d7c:	005b      	lsls	r3, r3, #1
 8000d7e:	b299      	uxth	r1, r3
 8000d80:	23c8      	movs	r3, #200	@ 0xc8
 8000d82:	9302      	str	r3, [sp, #8]
 8000d84:	2301      	movs	r3, #1
 8000d86:	9301      	str	r3, [sp, #4]
 8000d88:	f107 030f 	add.w	r3, r7, #15
 8000d8c:	9300      	str	r3, [sp, #0]
 8000d8e:	2301      	movs	r3, #1
 8000d90:	220c      	movs	r2, #12
 8000d92:	f002 fcef 	bl	8003774 <HAL_I2C_Mem_Write>
 8000d96:	4603      	mov	r3, r0
			DPS_SOFT_RESET_Reg, I2C_MEMADD_SIZE_8BIT,
			&v, 1, 200);
}
 8000d98:	4618      	mov	r0, r3
 8000d9a:	3710      	adds	r7, #16
 8000d9c:	46bd      	mov	sp, r7
 8000d9e:	bd80      	pop	{r7, pc}

08000da0 <dsp_read_coefficients>:

static HAL_StatusTypeDef dsp_read_coefficients(dps310_t *self)
{
 8000da0:	b580      	push	{r7, lr}
 8000da2:	b090      	sub	sp, #64	@ 0x40
 8000da4:	af04      	add	r7, sp, #16
 8000da6:	6078      	str	r0, [r7, #4]
	if (!self) return HAL_ERROR;
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	2b00      	cmp	r3, #0
 8000dac:	d101      	bne.n	8000db2 <dsp_read_coefficients+0x12>
 8000dae:	2301      	movs	r3, #1
 8000db0:	e0be      	b.n	8000f30 <dsp_read_coefficients+0x190>

	uint8_t b[DPS_COEF_BLOCK_LEN];  // 0x10 .. 0x21
	HAL_StatusTypeDef st = HAL_I2C_Mem_Read(self->i2c, self->addr7 << 1,
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	6818      	ldr	r0, [r3, #0]
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	791b      	ldrb	r3, [r3, #4]
 8000dba:	005b      	lsls	r3, r3, #1
 8000dbc:	b299      	uxth	r1, r3
 8000dbe:	23c8      	movs	r3, #200	@ 0xc8
 8000dc0:	9302      	str	r3, [sp, #8]
 8000dc2:	2312      	movs	r3, #18
 8000dc4:	9301      	str	r3, [sp, #4]
 8000dc6:	f107 030c 	add.w	r3, r7, #12
 8000dca:	9300      	str	r3, [sp, #0]
 8000dcc:	2301      	movs	r3, #1
 8000dce:	2210      	movs	r2, #16
 8000dd0:	f002 fde4 	bl	800399c <HAL_I2C_Mem_Read>
 8000dd4:	4603      	mov	r3, r0
 8000dd6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
			DPS_COEF_BLOCK_START, I2C_MEMADD_SIZE_8BIT,
			b, sizeof(b), 200);
	if (st != HAL_OK) {
 8000dda:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000dde:	2b00      	cmp	r3, #0
 8000de0:	d013      	beq.n	8000e0a <dsp_read_coefficients+0x6a>
		self->last_hal_err = HAL_I2C_GetError(self->i2c);
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	681b      	ldr	r3, [r3, #0]
 8000de6:	4618      	mov	r0, r3
 8000de8:	f002 fef2 	bl	8003bd0 <HAL_I2C_GetError>
 8000dec:	4602      	mov	r2, r0
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	609a      	str	r2, [r3, #8]
		self->last_err = (st == HAL_TIMEOUT) ? DPS_ERR_TIMEOUT : DPS_ERR_I2C;
 8000df2:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000df6:	2b03      	cmp	r3, #3
 8000df8:	d101      	bne.n	8000dfe <dsp_read_coefficients+0x5e>
 8000dfa:	2203      	movs	r2, #3
 8000dfc:	e000      	b.n	8000e00 <dsp_read_coefficients+0x60>
 8000dfe:	2202      	movs	r2, #2
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	715a      	strb	r2, [r3, #5]
		return st;
 8000e04:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000e08:	e092      	b.n	8000f30 <dsp_read_coefficients+0x190>
	}

	/* Index helper: b[0] = 0x10, b[1] = 0x11, ... b[18] = 0x22 (but we read to 0x21) */
	/* c0: 12-bit signed: 0x10[7:0]=c0[11:4], 0x11[7:4]=c0[3:0] */
	uint16_t c0u = ((uint16_t)b[0] << 4) | (b[1] >> 4);
 8000e0a:	7b3b      	ldrb	r3, [r7, #12]
 8000e0c:	b21b      	sxth	r3, r3
 8000e0e:	011b      	lsls	r3, r3, #4
 8000e10:	b21a      	sxth	r2, r3
 8000e12:	7b7b      	ldrb	r3, [r7, #13]
 8000e14:	091b      	lsrs	r3, r3, #4
 8000e16:	b2db      	uxtb	r3, r3
 8000e18:	b21b      	sxth	r3, r3
 8000e1a:	4313      	orrs	r3, r2
 8000e1c:	b21b      	sxth	r3, r3
 8000e1e:	85bb      	strh	r3, [r7, #44]	@ 0x2c
	self->c0 = sx12(c0u);
 8000e20:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8000e22:	4618      	mov	r0, r3
 8000e24:	f000 fa6a 	bl	80012fc <sx12>
 8000e28:	4603      	mov	r3, r0
 8000e2a:	461a      	mov	r2, r3
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	81da      	strh	r2, [r3, #14]

	/* c1: 12-bit signed: 0x11[3:0]=c1[11:8], 0x12= c1[7:0] */
	uint16_t c1u = ((uint16_t)(b[1] & 0x0F) << 8) | b[2];
 8000e30:	7b7b      	ldrb	r3, [r7, #13]
 8000e32:	b21b      	sxth	r3, r3
 8000e34:	021b      	lsls	r3, r3, #8
 8000e36:	b21b      	sxth	r3, r3
 8000e38:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8000e3c:	b21a      	sxth	r2, r3
 8000e3e:	7bbb      	ldrb	r3, [r7, #14]
 8000e40:	b21b      	sxth	r3, r3
 8000e42:	4313      	orrs	r3, r2
 8000e44:	b21b      	sxth	r3, r3
 8000e46:	857b      	strh	r3, [r7, #42]	@ 0x2a
	self->c1 = sx12(c1u);
 8000e48:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8000e4a:	4618      	mov	r0, r3
 8000e4c:	f000 fa56 	bl	80012fc <sx12>
 8000e50:	4603      	mov	r3, r0
 8000e52:	461a      	mov	r2, r3
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	821a      	strh	r2, [r3, #16]

	/* c00: 20-bit signed: 0x13[7:0]=[19:12], 0x14[7:0]=[11:4], 0x15[7:4]=[3:0] */
	uint32_t c00u = ((uint32_t)b[3] << 12) | ((uint32_t)b[4] << 4) | (b[5] >> 4);
 8000e58:	7bfb      	ldrb	r3, [r7, #15]
 8000e5a:	031a      	lsls	r2, r3, #12
 8000e5c:	7c3b      	ldrb	r3, [r7, #16]
 8000e5e:	011b      	lsls	r3, r3, #4
 8000e60:	4313      	orrs	r3, r2
 8000e62:	7c7a      	ldrb	r2, [r7, #17]
 8000e64:	0912      	lsrs	r2, r2, #4
 8000e66:	b2d2      	uxtb	r2, r2
 8000e68:	4313      	orrs	r3, r2
 8000e6a:	627b      	str	r3, [r7, #36]	@ 0x24
	self->c00 = sx20(c00u);
 8000e6c:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8000e6e:	f000 fa5f 	bl	8001330 <sx20>
 8000e72:	4602      	mov	r2, r0
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	615a      	str	r2, [r3, #20]

	/* c10: 20-bit signed: 0x15[3:0]=[19:16], 0x16[7:0]=[15:8], 0x17[7:0]=[7:0] */
	uint32_t c10u = ((uint32_t)(b[5] & 0x0F) << 16) | ((uint32_t)b[6] << 8) | b[7];
 8000e78:	7c7b      	ldrb	r3, [r7, #17]
 8000e7a:	041b      	lsls	r3, r3, #16
 8000e7c:	f403 2270 	and.w	r2, r3, #983040	@ 0xf0000
 8000e80:	7cbb      	ldrb	r3, [r7, #18]
 8000e82:	021b      	lsls	r3, r3, #8
 8000e84:	4313      	orrs	r3, r2
 8000e86:	7cfa      	ldrb	r2, [r7, #19]
 8000e88:	4313      	orrs	r3, r2
 8000e8a:	623b      	str	r3, [r7, #32]
	self->c10 = sx20(c10u);
 8000e8c:	6a38      	ldr	r0, [r7, #32]
 8000e8e:	f000 fa4f 	bl	8001330 <sx20>
 8000e92:	4602      	mov	r2, r0
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	619a      	str	r2, [r3, #24]

	/* signed 16-bit pairs */
	self->c01 = (int16_t)((b[8]  << 8) | b[9]);   // 0x18,0x19
 8000e98:	7d3b      	ldrb	r3, [r7, #20]
 8000e9a:	b21b      	sxth	r3, r3
 8000e9c:	021b      	lsls	r3, r3, #8
 8000e9e:	b21a      	sxth	r2, r3
 8000ea0:	7d7b      	ldrb	r3, [r7, #21]
 8000ea2:	b21b      	sxth	r3, r3
 8000ea4:	4313      	orrs	r3, r2
 8000ea6:	b21a      	sxth	r2, r3
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	839a      	strh	r2, [r3, #28]
	self->c11 = (int16_t)((b[10] << 8) | b[11]);  // 0x1A,0x1B
 8000eac:	7dbb      	ldrb	r3, [r7, #22]
 8000eae:	b21b      	sxth	r3, r3
 8000eb0:	021b      	lsls	r3, r3, #8
 8000eb2:	b21a      	sxth	r2, r3
 8000eb4:	7dfb      	ldrb	r3, [r7, #23]
 8000eb6:	b21b      	sxth	r3, r3
 8000eb8:	4313      	orrs	r3, r2
 8000eba:	b21a      	sxth	r2, r3
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	83da      	strh	r2, [r3, #30]
	self->c20 = (int16_t)((b[12] << 8) | b[13]);  // 0x1C,0x1D
 8000ec0:	7e3b      	ldrb	r3, [r7, #24]
 8000ec2:	b21b      	sxth	r3, r3
 8000ec4:	021b      	lsls	r3, r3, #8
 8000ec6:	b21a      	sxth	r2, r3
 8000ec8:	7e7b      	ldrb	r3, [r7, #25]
 8000eca:	b21b      	sxth	r3, r3
 8000ecc:	4313      	orrs	r3, r2
 8000ece:	b21a      	sxth	r2, r3
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	841a      	strh	r2, [r3, #32]
	self->c21 = (int16_t)((b[14] << 8) | b[15]);  // 0x1E,0x1F
 8000ed4:	7ebb      	ldrb	r3, [r7, #26]
 8000ed6:	b21b      	sxth	r3, r3
 8000ed8:	021b      	lsls	r3, r3, #8
 8000eda:	b21a      	sxth	r2, r3
 8000edc:	7efb      	ldrb	r3, [r7, #27]
 8000ede:	b21b      	sxth	r3, r3
 8000ee0:	4313      	orrs	r3, r2
 8000ee2:	b21a      	sxth	r2, r3
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	845a      	strh	r2, [r3, #34]	@ 0x22
	self->c30 = (int16_t)((b[16] << 8) | b[17]);  // 0x20,0x21
 8000ee8:	7f3b      	ldrb	r3, [r7, #28]
 8000eea:	b21b      	sxth	r3, r3
 8000eec:	021b      	lsls	r3, r3, #8
 8000eee:	b21a      	sxth	r2, r3
 8000ef0:	7f7b      	ldrb	r3, [r7, #29]
 8000ef2:	b21b      	sxth	r3, r3
 8000ef4:	4313      	orrs	r3, r2
 8000ef6:	b21a      	sxth	r2, r3
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	849a      	strh	r2, [r3, #36]	@ 0x24

	/* If you captured OSR codes in your config, prime the scale factors now */
	self->kT = dps_osr_scale(self->t_osr_code);
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	f893 3027 	ldrb.w	r3, [r3, #39]	@ 0x27
 8000f02:	4618      	mov	r0, r3
 8000f04:	f000 fa2a 	bl	800135c <dps_osr_scale>
 8000f08:	eef0 7a40 	vmov.f32	s15, s0
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	edc3 7a0b 	vstr	s15, [r3, #44]	@ 0x2c
	self->kP = dps_osr_scale(self->p_osr_code);
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	f893 3026 	ldrb.w	r3, [r3, #38]	@ 0x26
 8000f18:	4618      	mov	r0, r3
 8000f1a:	f000 fa1f 	bl	800135c <dps_osr_scale>
 8000f1e:	eef0 7a40 	vmov.f32	s15, s0
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	edc3 7a0a 	vstr	s15, [r3, #40]	@ 0x28

	self->last_err = DPS_OK;
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	2200      	movs	r2, #0
 8000f2c:	715a      	strb	r2, [r3, #5]
	return HAL_OK;
 8000f2e:	2300      	movs	r3, #0
}
 8000f30:	4618      	mov	r0, r3
 8000f32:	3730      	adds	r7, #48	@ 0x30
 8000f34:	46bd      	mov	sp, r7
 8000f36:	bd80      	pop	{r7, pc}

08000f38 <dsp_compensate_all>:
 *   T(°C) = c0*0.5 + c1*T_sc
 *   P(Pa) = c00 + P_sc*(c10 + P_sc*(c20 + P_sc*c30))
 *                + T_sc*(c01 + P_sc*(c11 + P_sc*c21))
 */
static HAL_StatusTypeDef dsp_compensate_all(dps310_t *self)
{
 8000f38:	b580      	push	{r7, lr}
 8000f3a:	b086      	sub	sp, #24
 8000f3c:	af00      	add	r7, sp, #0
 8000f3e:	6078      	str	r0, [r7, #4]
	if (!self) return HAL_ERROR;
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	2b00      	cmp	r3, #0
 8000f44:	d101      	bne.n	8000f4a <dsp_compensate_all+0x12>
 8000f46:	2301      	movs	r3, #1
 8000f48:	e0d6      	b.n	80010f8 <dsp_compensate_all+0x1c0>
	if (self->kT <= 0.f || self->kP <= 0.f) {
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 8000f50:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000f54:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000f58:	d907      	bls.n	8000f6a <dsp_compensate_all+0x32>
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 8000f60:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000f64:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000f68:	d837      	bhi.n	8000fda <dsp_compensate_all+0xa2>
		/* Set from your config routines or default to OSR code 0 if unset */
		if (self->kT <= 0.f) self->kT = dps_osr_scale(self->t_osr_code);
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 8000f70:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000f74:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000f78:	d80a      	bhi.n	8000f90 <dsp_compensate_all+0x58>
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	f893 3027 	ldrb.w	r3, [r3, #39]	@ 0x27
 8000f80:	4618      	mov	r0, r3
 8000f82:	f000 f9eb 	bl	800135c <dps_osr_scale>
 8000f86:	eef0 7a40 	vmov.f32	s15, s0
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	edc3 7a0b 	vstr	s15, [r3, #44]	@ 0x2c
		if (self->kP <= 0.f) self->kP = dps_osr_scale(self->p_osr_code);
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 8000f96:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000f9a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000f9e:	d80a      	bhi.n	8000fb6 <dsp_compensate_all+0x7e>
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	f893 3026 	ldrb.w	r3, [r3, #38]	@ 0x26
 8000fa6:	4618      	mov	r0, r3
 8000fa8:	f000 f9d8 	bl	800135c <dps_osr_scale>
 8000fac:	eef0 7a40 	vmov.f32	s15, s0
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	edc3 7a0a 	vstr	s15, [r3, #40]	@ 0x28
		if (self->kT <= 0.f || self->kP <= 0.f) return HAL_ERROR;
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 8000fbc:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000fc0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000fc4:	d907      	bls.n	8000fd6 <dsp_compensate_all+0x9e>
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 8000fcc:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000fd0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000fd4:	d801      	bhi.n	8000fda <dsp_compensate_all+0xa2>
 8000fd6:	2301      	movs	r3, #1
 8000fd8:	e08e      	b.n	80010f8 <dsp_compensate_all+0x1c0>
	}

	const float T_sc = self->temperature_raw / self->kT;
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	edd3 6a0d 	vldr	s13, [r3, #52]	@ 0x34
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	ed93 7a0b 	vldr	s14, [r3, #44]	@ 0x2c
 8000fe6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000fea:	edc7 7a05 	vstr	s15, [r7, #20]
	const float P_sc = self->pressure_raw    / self->kP;
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	edd3 6a0c 	vldr	s13, [r3, #48]	@ 0x30
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	ed93 7a0a 	vldr	s14, [r3, #40]	@ 0x28
 8000ffa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000ffe:	edc7 7a04 	vstr	s15, [r7, #16]

	/* Temperature in °C */
	self->temperature = 0.5f * (float)self->c0 + (float)self->c1 * T_sc;
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8001008:	ee07 3a90 	vmov	s15, r3
 800100c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001010:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8001014:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 800101e:	ee07 3a90 	vmov	s15, r3
 8001022:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001026:	edd7 7a05 	vldr	s15, [r7, #20]
 800102a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800102e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	edc3 7a0f 	vstr	s15, [r3, #60]	@ 0x3c

	/* Pressure in Pa (polynomial from datasheet) */
	const float P_lin =
			(float)self->c00
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	695b      	ldr	r3, [r3, #20]
 800103c:	ee07 3a90 	vmov	s15, r3
 8001040:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
			+ P_sc * ((float)self->c10 + P_sc * ((float)self->c20 + P_sc * (float)self->c30))
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	699b      	ldr	r3, [r3, #24]
 8001048:	ee07 3a90 	vmov	s15, r3
 800104c:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 8001056:	ee07 3a90 	vmov	s15, r3
 800105a:	eeb8 6ae7 	vcvt.f32.s32	s12, s15
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	f9b3 3024 	ldrsh.w	r3, [r3, #36]	@ 0x24
 8001064:	ee07 3a90 	vmov	s15, r3
 8001068:	eef8 5ae7 	vcvt.f32.s32	s11, s15
 800106c:	edd7 7a04 	vldr	s15, [r7, #16]
 8001070:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8001074:	ee36 6a27 	vadd.f32	s12, s12, s15
 8001078:	edd7 7a04 	vldr	s15, [r7, #16]
 800107c:	ee66 7a27 	vmul.f32	s15, s12, s15
 8001080:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8001084:	edd7 7a04 	vldr	s15, [r7, #16]
 8001088:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800108c:	ee37 7a27 	vadd.f32	s14, s14, s15
			+ T_sc * (float)self->c01 + T_sc * P_sc * ((float)self->c11+P_sc*(float)self->c21);
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 8001096:	ee07 3a90 	vmov	s15, r3
 800109a:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800109e:	edd7 7a05 	vldr	s15, [r7, #20]
 80010a2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80010a6:	ee37 7a27 	vadd.f32	s14, s14, s15
 80010aa:	edd7 6a05 	vldr	s13, [r7, #20]
 80010ae:	edd7 7a04 	vldr	s15, [r7, #16]
 80010b2:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	f9b3 301e 	ldrsh.w	r3, [r3, #30]
 80010bc:	ee07 3a90 	vmov	s15, r3
 80010c0:	eeb8 6ae7 	vcvt.f32.s32	s12, s15
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	f9b3 3022 	ldrsh.w	r3, [r3, #34]	@ 0x22
 80010ca:	ee07 3a90 	vmov	s15, r3
 80010ce:	eef8 5ae7 	vcvt.f32.s32	s11, s15
 80010d2:	edd7 7a04 	vldr	s15, [r7, #16]
 80010d6:	ee65 7aa7 	vmul.f32	s15, s11, s15
 80010da:	ee76 7a27 	vadd.f32	s15, s12, s15
 80010de:	ee66 7aa7 	vmul.f32	s15, s13, s15
	const float P_lin =
 80010e2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80010e6:	edc7 7a03 	vstr	s15, [r7, #12]

	self->pressure = P_lin;
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	68fa      	ldr	r2, [r7, #12]
 80010ee:	639a      	str	r2, [r3, #56]	@ 0x38

	self->last_err = DPS_OK;
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	2200      	movs	r2, #0
 80010f4:	715a      	strb	r2, [r3, #5]
	return HAL_OK;
 80010f6:	2300      	movs	r3, #0
}
 80010f8:	4618      	mov	r0, r3
 80010fa:	3718      	adds	r7, #24
 80010fc:	46bd      	mov	sp, r7
 80010fe:	bd80      	pop	{r7, pc}

08001100 <dps_pressure_to_altitude>:

// International Standard Atmosphere barometric formula.
// pressure_pa = measured static pressure in Pa.
// p0_pa       = sea-level reference pressure in Pa (use local QNH if you have it).
static HAL_StatusTypeDef dps_pressure_to_altitude(dps310_t *self)
{
 8001100:	b580      	push	{r7, lr}
 8001102:	b084      	sub	sp, #16
 8001104:	af00      	add	r7, sp, #0
 8001106:	6078      	str	r0, [r7, #4]
	if (self->pressure <= 0.0f) return 0.0f;
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	edd3 7a0e 	vldr	s15, [r3, #56]	@ 0x38
 800110e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001112:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001116:	d801      	bhi.n	800111c <dps_pressure_to_altitude+0x1c>
 8001118:	2300      	movs	r3, #0
 800111a:	e01c      	b.n	8001156 <dps_pressure_to_altitude+0x56>
	// Exponent 1/5.255 ≈ 0.190295
	float ratio = self->pressure / 101325;
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	ed93 7a0e 	vldr	s14, [r3, #56]	@ 0x38
 8001122:	eddf 6a0f 	vldr	s13, [pc, #60]	@ 8001160 <dps_pressure_to_altitude+0x60>
 8001126:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800112a:	edc7 7a03 	vstr	s15, [r7, #12]
	self->altitude = 44330.0f * (1.0f - powf(ratio, 0.190295f));
 800112e:	eddf 0a0d 	vldr	s1, [pc, #52]	@ 8001164 <dps_pressure_to_altitude+0x64>
 8001132:	ed97 0a03 	vldr	s0, [r7, #12]
 8001136:	f007 f947 	bl	80083c8 <powf>
 800113a:	eef0 7a40 	vmov.f32	s15, s0
 800113e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8001142:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001146:	ed9f 7a08 	vldr	s14, [pc, #32]	@ 8001168 <dps_pressure_to_altitude+0x68>
 800114a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	edc3 7a10 	vstr	s15, [r3, #64]	@ 0x40

	return HAL_OK;
 8001154:	2300      	movs	r3, #0
}
 8001156:	4618      	mov	r0, r3
 8001158:	3710      	adds	r7, #16
 800115a:	46bd      	mov	sp, r7
 800115c:	bd80      	pop	{r7, pc}
 800115e:	bf00      	nop
 8001160:	47c5e680 	.word	0x47c5e680
 8001164:	3e42dcb1 	.word	0x3e42dcb1
 8001168:	472d2a00 	.word	0x472d2a00

0800116c <dsp_read_pressure_raw>:


/* ---------- Read Values ---------- */
static HAL_StatusTypeDef dsp_read_pressure_raw(dps310_t *self)
{
 800116c:	b580      	push	{r7, lr}
 800116e:	b08a      	sub	sp, #40	@ 0x28
 8001170:	af04      	add	r7, sp, #16
 8001172:	6078      	str	r0, [r7, #4]
	if (!self) return HAL_ERROR;
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	2b00      	cmp	r3, #0
 8001178:	d101      	bne.n	800117e <dsp_read_pressure_raw+0x12>
 800117a:	2301      	movs	r3, #1
 800117c:	e03d      	b.n	80011fa <dsp_read_pressure_raw+0x8e>

	uint8_t v[3];
	HAL_StatusTypeDef st = HAL_I2C_Mem_Read(self->i2c, self->addr7 << 1,
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	6818      	ldr	r0, [r3, #0]
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	791b      	ldrb	r3, [r3, #4]
 8001186:	005b      	lsls	r3, r3, #1
 8001188:	b299      	uxth	r1, r3
 800118a:	23c8      	movs	r3, #200	@ 0xc8
 800118c:	9302      	str	r3, [sp, #8]
 800118e:	2303      	movs	r3, #3
 8001190:	9301      	str	r3, [sp, #4]
 8001192:	f107 030c 	add.w	r3, r7, #12
 8001196:	9300      	str	r3, [sp, #0]
 8001198:	2301      	movs	r3, #1
 800119a:	2200      	movs	r2, #0
 800119c:	f002 fbfe 	bl	800399c <HAL_I2C_Mem_Read>
 80011a0:	4603      	mov	r3, r0
 80011a2:	75fb      	strb	r3, [r7, #23]
			DPS_PRESSURE_BYTE3_Reg, I2C_MEMADD_SIZE_8BIT,
			v, 3, 200);
	if (st != HAL_OK) {
 80011a4:	7dfb      	ldrb	r3, [r7, #23]
 80011a6:	2b00      	cmp	r3, #0
 80011a8:	d011      	beq.n	80011ce <dsp_read_pressure_raw+0x62>
		self->last_hal_err = HAL_I2C_GetError(self->i2c);
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	681b      	ldr	r3, [r3, #0]
 80011ae:	4618      	mov	r0, r3
 80011b0:	f002 fd0e 	bl	8003bd0 <HAL_I2C_GetError>
 80011b4:	4602      	mov	r2, r0
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	609a      	str	r2, [r3, #8]
		self->last_err = (st == HAL_TIMEOUT) ? DPS_ERR_TIMEOUT : DPS_ERR_I2C;
 80011ba:	7dfb      	ldrb	r3, [r7, #23]
 80011bc:	2b03      	cmp	r3, #3
 80011be:	d101      	bne.n	80011c4 <dsp_read_pressure_raw+0x58>
 80011c0:	2203      	movs	r2, #3
 80011c2:	e000      	b.n	80011c6 <dsp_read_pressure_raw+0x5a>
 80011c4:	2202      	movs	r2, #2
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	715a      	strb	r2, [r3, #5]
		return st;
 80011ca:	7dfb      	ldrb	r3, [r7, #23]
 80011cc:	e015      	b.n	80011fa <dsp_read_pressure_raw+0x8e>
	}

	uint32_t u = ((uint32_t)v[0] << 16) | ((uint32_t)v[1] << 8) | (uint32_t)v[2];
 80011ce:	7b3b      	ldrb	r3, [r7, #12]
 80011d0:	041a      	lsls	r2, r3, #16
 80011d2:	7b7b      	ldrb	r3, [r7, #13]
 80011d4:	021b      	lsls	r3, r3, #8
 80011d6:	4313      	orrs	r3, r2
 80011d8:	7bba      	ldrb	r2, [r7, #14]
 80011da:	4313      	orrs	r3, r2
 80011dc:	613b      	str	r3, [r7, #16]
	self->pressure_raw = sx24(u);
 80011de:	6938      	ldr	r0, [r7, #16]
 80011e0:	f000 f878 	bl	80012d4 <sx24>
 80011e4:	ee07 0a90 	vmov	s15, r0
 80011e8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	edc3 7a0c 	vstr	s15, [r3, #48]	@ 0x30

	self->last_err = DPS_OK;
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	2200      	movs	r2, #0
 80011f6:	715a      	strb	r2, [r3, #5]
	return HAL_OK;
 80011f8:	2300      	movs	r3, #0
}
 80011fa:	4618      	mov	r0, r3
 80011fc:	3718      	adds	r7, #24
 80011fe:	46bd      	mov	sp, r7
 8001200:	bd80      	pop	{r7, pc}

08001202 <dsp_read_temperature_raw>:


static HAL_StatusTypeDef dsp_read_temperature_raw(dps310_t *self)
{
 8001202:	b580      	push	{r7, lr}
 8001204:	b08a      	sub	sp, #40	@ 0x28
 8001206:	af04      	add	r7, sp, #16
 8001208:	6078      	str	r0, [r7, #4]
	if (!self) return HAL_ERROR;
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	2b00      	cmp	r3, #0
 800120e:	d101      	bne.n	8001214 <dsp_read_temperature_raw+0x12>
 8001210:	2301      	movs	r3, #1
 8001212:	e03d      	b.n	8001290 <dsp_read_temperature_raw+0x8e>

	uint8_t v[3];
	HAL_StatusTypeDef st = HAL_I2C_Mem_Read(self->i2c, self->addr7 << 1,
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	6818      	ldr	r0, [r3, #0]
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	791b      	ldrb	r3, [r3, #4]
 800121c:	005b      	lsls	r3, r3, #1
 800121e:	b299      	uxth	r1, r3
 8001220:	23c8      	movs	r3, #200	@ 0xc8
 8001222:	9302      	str	r3, [sp, #8]
 8001224:	2303      	movs	r3, #3
 8001226:	9301      	str	r3, [sp, #4]
 8001228:	f107 030c 	add.w	r3, r7, #12
 800122c:	9300      	str	r3, [sp, #0]
 800122e:	2301      	movs	r3, #1
 8001230:	2203      	movs	r2, #3
 8001232:	f002 fbb3 	bl	800399c <HAL_I2C_Mem_Read>
 8001236:	4603      	mov	r3, r0
 8001238:	75fb      	strb	r3, [r7, #23]
			DPS_TEMPERATURE_BYTE3_Reg, I2C_MEMADD_SIZE_8BIT,
			v, 3, 200);
	if (st != HAL_OK) {
 800123a:	7dfb      	ldrb	r3, [r7, #23]
 800123c:	2b00      	cmp	r3, #0
 800123e:	d011      	beq.n	8001264 <dsp_read_temperature_raw+0x62>
		self->last_hal_err = HAL_I2C_GetError(self->i2c);
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	4618      	mov	r0, r3
 8001246:	f002 fcc3 	bl	8003bd0 <HAL_I2C_GetError>
 800124a:	4602      	mov	r2, r0
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	609a      	str	r2, [r3, #8]
		self->last_err = (st == HAL_TIMEOUT) ? DPS_ERR_TIMEOUT : DPS_ERR_I2C;
 8001250:	7dfb      	ldrb	r3, [r7, #23]
 8001252:	2b03      	cmp	r3, #3
 8001254:	d101      	bne.n	800125a <dsp_read_temperature_raw+0x58>
 8001256:	2203      	movs	r2, #3
 8001258:	e000      	b.n	800125c <dsp_read_temperature_raw+0x5a>
 800125a:	2202      	movs	r2, #2
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	715a      	strb	r2, [r3, #5]
		return st;
 8001260:	7dfb      	ldrb	r3, [r7, #23]
 8001262:	e015      	b.n	8001290 <dsp_read_temperature_raw+0x8e>
	}

	const uint32_t u = ((uint32_t)v[0] << 16) | ((uint32_t)v[1] << 8) | (uint32_t)v[2];
 8001264:	7b3b      	ldrb	r3, [r7, #12]
 8001266:	041a      	lsls	r2, r3, #16
 8001268:	7b7b      	ldrb	r3, [r7, #13]
 800126a:	021b      	lsls	r3, r3, #8
 800126c:	4313      	orrs	r3, r2
 800126e:	7bba      	ldrb	r2, [r7, #14]
 8001270:	4313      	orrs	r3, r2
 8001272:	613b      	str	r3, [r7, #16]
	self->temperature_raw = sx24(u);
 8001274:	6938      	ldr	r0, [r7, #16]
 8001276:	f000 f82d 	bl	80012d4 <sx24>
 800127a:	ee07 0a90 	vmov	s15, r0
 800127e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	edc3 7a0d 	vstr	s15, [r3, #52]	@ 0x34

	self->last_err = DPS_OK;
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	2200      	movs	r2, #0
 800128c:	715a      	strb	r2, [r3, #5]
	return HAL_OK;
 800128e:	2300      	movs	r3, #0
}
 8001290:	4618      	mov	r0, r3
 8001292:	3718      	adds	r7, #24
 8001294:	46bd      	mov	sp, r7
 8001296:	bd80      	pop	{r7, pc}

08001298 <clip3>:


/* ---------- Helpers ---------- */
static inline uint8_t clip2(uint8_t x)	{ return (uint8_t)(x & 0x03u);	} // 2-bit
static inline uint8_t clip3(uint8_t x) 	{ return (uint8_t)(x & 0x07u); 	} // 3-bit
 8001298:	b480      	push	{r7}
 800129a:	b083      	sub	sp, #12
 800129c:	af00      	add	r7, sp, #0
 800129e:	4603      	mov	r3, r0
 80012a0:	71fb      	strb	r3, [r7, #7]
 80012a2:	79fb      	ldrb	r3, [r7, #7]
 80012a4:	f003 0307 	and.w	r3, r3, #7
 80012a8:	b2db      	uxtb	r3, r3
 80012aa:	4618      	mov	r0, r3
 80012ac:	370c      	adds	r7, #12
 80012ae:	46bd      	mov	sp, r7
 80012b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b4:	4770      	bx	lr

080012b6 <clip4>:
static inline uint8_t clip4(uint8_t x) 	{ return (uint8_t)(x & 0x0Fu); 	} // 4-bit
 80012b6:	b480      	push	{r7}
 80012b8:	b083      	sub	sp, #12
 80012ba:	af00      	add	r7, sp, #0
 80012bc:	4603      	mov	r3, r0
 80012be:	71fb      	strb	r3, [r7, #7]
 80012c0:	79fb      	ldrb	r3, [r7, #7]
 80012c2:	f003 030f 	and.w	r3, r3, #15
 80012c6:	b2db      	uxtb	r3, r3
 80012c8:	4618      	mov	r0, r3
 80012ca:	370c      	adds	r7, #12
 80012cc:	46bd      	mov	sp, r7
 80012ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d2:	4770      	bx	lr

080012d4 <sx24>:

static inline int32_t sx24(uint32_t u) {
 80012d4:	b480      	push	{r7}
 80012d6:	b083      	sub	sp, #12
 80012d8:	af00      	add	r7, sp, #0
 80012da:	6078      	str	r0, [r7, #4]
	return (u & 0x00800000u) ? (int32_t)(u | 0xFF000000u) : (int32_t)u;
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	d003      	beq.n	80012ee <sx24+0x1a>
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80012ec:	e000      	b.n	80012f0 <sx24+0x1c>
 80012ee:	687b      	ldr	r3, [r7, #4]
}
 80012f0:	4618      	mov	r0, r3
 80012f2:	370c      	adds	r7, #12
 80012f4:	46bd      	mov	sp, r7
 80012f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012fa:	4770      	bx	lr

080012fc <sx12>:

static inline int16_t sx12(uint16_t u) {            // 12-bit signed -> int16
 80012fc:	b480      	push	{r7}
 80012fe:	b083      	sub	sp, #12
 8001300:	af00      	add	r7, sp, #0
 8001302:	4603      	mov	r3, r0
 8001304:	80fb      	strh	r3, [r7, #6]
	return (u & 0x0800u) ? (int16_t)(u | 0xF000u) : (int16_t)u;
 8001306:	88fb      	ldrh	r3, [r7, #6]
 8001308:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800130c:	2b00      	cmp	r3, #0
 800130e:	d007      	beq.n	8001320 <sx12+0x24>
 8001310:	88fb      	ldrh	r3, [r7, #6]
 8001312:	ea6f 5303 	mvn.w	r3, r3, lsl #20
 8001316:	ea6f 5313 	mvn.w	r3, r3, lsr #20
 800131a:	b29b      	uxth	r3, r3
 800131c:	b21b      	sxth	r3, r3
 800131e:	e001      	b.n	8001324 <sx12+0x28>
 8001320:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
}
 8001324:	4618      	mov	r0, r3
 8001326:	370c      	adds	r7, #12
 8001328:	46bd      	mov	sp, r7
 800132a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800132e:	4770      	bx	lr

08001330 <sx20>:
static inline int32_t sx20(uint32_t u) {            // 20-bit signed -> int32
 8001330:	b480      	push	{r7}
 8001332:	b083      	sub	sp, #12
 8001334:	af00      	add	r7, sp, #0
 8001336:	6078      	str	r0, [r7, #4]
	return (u & 0x00080000u) ? (int32_t)(u | 0xFFF00000u) : (int32_t)u;
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800133e:	2b00      	cmp	r3, #0
 8001340:	d003      	beq.n	800134a <sx20+0x1a>
 8001342:	687a      	ldr	r2, [r7, #4]
 8001344:	4b04      	ldr	r3, [pc, #16]	@ (8001358 <sx20+0x28>)
 8001346:	4313      	orrs	r3, r2
 8001348:	e000      	b.n	800134c <sx20+0x1c>
 800134a:	687b      	ldr	r3, [r7, #4]
}
 800134c:	4618      	mov	r0, r3
 800134e:	370c      	adds	r7, #12
 8001350:	46bd      	mov	sp, r7
 8001352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001356:	4770      	bx	lr
 8001358:	fff00000 	.word	0xfff00000

0800135c <dps_osr_scale>:

/* OSR code (0..7) -> scale factor used for raw scaling (Infineon table) */
static inline float dps_osr_scale(uint8_t osr_code) {
 800135c:	b480      	push	{r7}
 800135e:	b083      	sub	sp, #12
 8001360:	af00      	add	r7, sp, #0
 8001362:	4603      	mov	r3, r0
 8001364:	71fb      	strb	r3, [r7, #7]
	static const float K[8] = {
			524288.0f,  1572864.0f, 3670016.0f, 7864320.0f,
			253952.0f,   516096.0f,  1040384.0f, 2088960.0f
	};
	return K[osr_code & 7u];
 8001366:	79fb      	ldrb	r3, [r7, #7]
 8001368:	f003 0307 	and.w	r3, r3, #7
 800136c:	4a06      	ldr	r2, [pc, #24]	@ (8001388 <dps_osr_scale+0x2c>)
 800136e:	009b      	lsls	r3, r3, #2
 8001370:	4413      	add	r3, r2
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	ee07 3a90 	vmov	s15, r3
}
 8001378:	eeb0 0a67 	vmov.f32	s0, s15
 800137c:	370c      	adds	r7, #12
 800137e:	46bd      	mov	sp, r7
 8001380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001384:	4770      	bx	lr
 8001386:	bf00      	nop
 8001388:	0800b2ac 	.word	0x0800b2ac

0800138c <getSelfStatePointer>:

static dps310_t* getSelfStatePointer(sensor_if_t *self) {
 800138c:	b480      	push	{r7}
 800138e:	b083      	sub	sp, #12
 8001390:	af00      	add	r7, sp, #0
 8001392:	6078      	str	r0, [r7, #4]
	if (!self || !self->state) return NULL;
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	2b00      	cmp	r3, #0
 8001398:	d003      	beq.n	80013a2 <getSelfStatePointer+0x16>
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	685b      	ldr	r3, [r3, #4]
 800139e:	2b00      	cmp	r3, #0
 80013a0:	d101      	bne.n	80013a6 <getSelfStatePointer+0x1a>
 80013a2:	2300      	movs	r3, #0
 80013a4:	e001      	b.n	80013aa <getSelfStatePointer+0x1e>
	return (dps310_t*)self->state;
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	685b      	ldr	r3, [r3, #4]
}
 80013aa:	4618      	mov	r0, r3
 80013ac:	370c      	adds	r7, #12
 80013ae:	46bd      	mov	sp, r7
 80013b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b4:	4770      	bx	lr

080013b6 <rx1>:
 */

#include "gps6m.h"

/* receive one byte with a short timeout */
static HAL_StatusTypeDef rx1(UART_HandleTypeDef *u, uint8_t *c, uint32_t to_ms) {
 80013b6:	b580      	push	{r7, lr}
 80013b8:	b084      	sub	sp, #16
 80013ba:	af00      	add	r7, sp, #0
 80013bc:	60f8      	str	r0, [r7, #12]
 80013be:	60b9      	str	r1, [r7, #8]
 80013c0:	607a      	str	r2, [r7, #4]
    return HAL_UART_Receive(u, c, 1, to_ms);
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	2201      	movs	r2, #1
 80013c6:	68b9      	ldr	r1, [r7, #8]
 80013c8:	68f8      	ldr	r0, [r7, #12]
 80013ca:	f005 fe91 	bl	80070f0 <HAL_UART_Receive>
 80013ce:	4603      	mov	r3, r0
}
 80013d0:	4618      	mov	r0, r3
 80013d2:	3710      	adds	r7, #16
 80013d4:	46bd      	mov	sp, r7
 80013d6:	bd80      	pop	{r7, pc}

080013d8 <nmea_probe_stream>:

/* very small state machine: look for "$G[P|N]" within ~1.5 s */
static HAL_StatusTypeDef nmea_probe_stream(UART_HandleTypeDef *u) {
 80013d8:	b580      	push	{r7, lr}
 80013da:	b086      	sub	sp, #24
 80013dc:	af00      	add	r7, sp, #0
 80013de:	6078      	str	r0, [r7, #4]
    uint32_t t0 = HAL_GetTick();
 80013e0:	f001 fdca 	bl	8002f78 <HAL_GetTick>
 80013e4:	6138      	str	r0, [r7, #16]
    enum { S_WAIT_DOLLAR, S_G, S_GP_OR_GN } st = S_WAIT_DOLLAR;
 80013e6:	2300      	movs	r3, #0
 80013e8:	75fb      	strb	r3, [r7, #23]
    while ((HAL_GetTick() - t0) < 1500) {
 80013ea:	e02f      	b.n	800144c <nmea_probe_stream+0x74>
        uint8_t c;
        if (rx1(u, &c, 50) != HAL_OK) continue;    // keep polling
 80013ec:	f107 030f 	add.w	r3, r7, #15
 80013f0:	2232      	movs	r2, #50	@ 0x32
 80013f2:	4619      	mov	r1, r3
 80013f4:	6878      	ldr	r0, [r7, #4]
 80013f6:	f7ff ffde 	bl	80013b6 <rx1>
 80013fa:	4603      	mov	r3, r0
 80013fc:	2b00      	cmp	r3, #0
 80013fe:	d122      	bne.n	8001446 <nmea_probe_stream+0x6e>
        switch (st) {
 8001400:	7dfb      	ldrb	r3, [r7, #23]
 8001402:	2b02      	cmp	r3, #2
 8001404:	d014      	beq.n	8001430 <nmea_probe_stream+0x58>
 8001406:	2b02      	cmp	r3, #2
 8001408:	dc20      	bgt.n	800144c <nmea_probe_stream+0x74>
 800140a:	2b00      	cmp	r3, #0
 800140c:	d002      	beq.n	8001414 <nmea_probe_stream+0x3c>
 800140e:	2b01      	cmp	r3, #1
 8001410:	d006      	beq.n	8001420 <nmea_probe_stream+0x48>
 8001412:	e01b      	b.n	800144c <nmea_probe_stream+0x74>
            case S_WAIT_DOLLAR: if (c == '$') st = S_G; break;
 8001414:	7bfb      	ldrb	r3, [r7, #15]
 8001416:	2b24      	cmp	r3, #36	@ 0x24
 8001418:	d117      	bne.n	800144a <nmea_probe_stream+0x72>
 800141a:	2301      	movs	r3, #1
 800141c:	75fb      	strb	r3, [r7, #23]
 800141e:	e014      	b.n	800144a <nmea_probe_stream+0x72>
            case S_G:           st = (c == 'G') ? S_GP_OR_GN : S_WAIT_DOLLAR; break;
 8001420:	7bfb      	ldrb	r3, [r7, #15]
 8001422:	2b47      	cmp	r3, #71	@ 0x47
 8001424:	d101      	bne.n	800142a <nmea_probe_stream+0x52>
 8001426:	2302      	movs	r3, #2
 8001428:	e000      	b.n	800142c <nmea_probe_stream+0x54>
 800142a:	2300      	movs	r3, #0
 800142c:	75fb      	strb	r3, [r7, #23]
 800142e:	e00d      	b.n	800144c <nmea_probe_stream+0x74>
            case S_GP_OR_GN:    if (c == 'P' || c == 'N') return HAL_OK; else st = S_WAIT_DOLLAR; break;
 8001430:	7bfb      	ldrb	r3, [r7, #15]
 8001432:	2b50      	cmp	r3, #80	@ 0x50
 8001434:	d002      	beq.n	800143c <nmea_probe_stream+0x64>
 8001436:	7bfb      	ldrb	r3, [r7, #15]
 8001438:	2b4e      	cmp	r3, #78	@ 0x4e
 800143a:	d101      	bne.n	8001440 <nmea_probe_stream+0x68>
 800143c:	2300      	movs	r3, #0
 800143e:	e00f      	b.n	8001460 <nmea_probe_stream+0x88>
 8001440:	2300      	movs	r3, #0
 8001442:	75fb      	strb	r3, [r7, #23]
 8001444:	e002      	b.n	800144c <nmea_probe_stream+0x74>
        if (rx1(u, &c, 50) != HAL_OK) continue;    // keep polling
 8001446:	bf00      	nop
 8001448:	e000      	b.n	800144c <nmea_probe_stream+0x74>
            case S_WAIT_DOLLAR: if (c == '$') st = S_G; break;
 800144a:	bf00      	nop
    while ((HAL_GetTick() - t0) < 1500) {
 800144c:	f001 fd94 	bl	8002f78 <HAL_GetTick>
 8001450:	4602      	mov	r2, r0
 8001452:	693b      	ldr	r3, [r7, #16]
 8001454:	1ad3      	subs	r3, r2, r3
 8001456:	f240 52db 	movw	r2, #1499	@ 0x5db
 800145a:	4293      	cmp	r3, r2
 800145c:	d9c6      	bls.n	80013ec <nmea_probe_stream+0x14>
        }
    }
    return HAL_TIMEOUT;
 800145e:	2303      	movs	r3, #3
}
 8001460:	4618      	mov	r0, r3
 8001462:	3718      	adds	r7, #24
 8001464:	46bd      	mov	sp, r7
 8001466:	bd80      	pop	{r7, pc}

08001468 <gps_probe>:

/* -------- vtable ops (minimal) -------- */
static HAL_StatusTypeDef gps_probe(sensor_if_t *self) {
 8001468:	b580      	push	{r7, lr}
 800146a:	b084      	sub	sp, #16
 800146c:	af00      	add	r7, sp, #0
 800146e:	6078      	str	r0, [r7, #4]
    gps6m_t *s = (gps6m_t*)self->state;
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	685b      	ldr	r3, [r3, #4]
 8001474:	60fb      	str	r3, [r7, #12]
    return nmea_probe_stream(s->uart);  // OK if we see $GP/$GN
 8001476:	68fb      	ldr	r3, [r7, #12]
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	4618      	mov	r0, r3
 800147c:	f7ff ffac 	bl	80013d8 <nmea_probe_stream>
 8001480:	4603      	mov	r3, r0
}
 8001482:	4618      	mov	r0, r3
 8001484:	3710      	adds	r7, #16
 8001486:	46bd      	mov	sp, r7
 8001488:	bd80      	pop	{r7, pc}

0800148a <gps_init>:

static HAL_StatusTypeDef gps_init(sensor_if_t *self) {
 800148a:	b480      	push	{r7}
 800148c:	b083      	sub	sp, #12
 800148e:	af00      	add	r7, sp, #0
 8001490:	6078      	str	r0, [r7, #4]
    (void)self;          // nothing yet
    return HAL_OK;
 8001492:	2300      	movs	r3, #0
}
 8001494:	4618      	mov	r0, r3
 8001496:	370c      	adds	r7, #12
 8001498:	46bd      	mov	sp, r7
 800149a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800149e:	4770      	bx	lr

080014a0 <gps_read>:

static HAL_StatusTypeDef gps_read(sensor_if_t *self) {
 80014a0:	b480      	push	{r7}
 80014a2:	b083      	sub	sp, #12
 80014a4:	af00      	add	r7, sp, #0
 80014a6:	6078      	str	r0, [r7, #4]
    (void)self;          // intentionally unstateemented for now
    return HAL_OK;
 80014a8:	2300      	movs	r3, #0
}
 80014aa:	4618      	mov	r0, r3
 80014ac:	370c      	adds	r7, #12
 80014ae:	46bd      	mov	sp, r7
 80014b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b4:	4770      	bx	lr

080014b6 <gps_whoami>:

static HAL_StatusTypeDef gps_whoami(sensor_if_t *self, uint8_t *out) {
 80014b6:	b580      	push	{r7, lr}
 80014b8:	b084      	sub	sp, #16
 80014ba:	af00      	add	r7, sp, #0
 80014bc:	6078      	str	r0, [r7, #4]
 80014be:	6039      	str	r1, [r7, #0]
    // Not really meaningful for GPS; return 'G' if we see a '$G?'
    gps6m_t *s = (gps6m_t*)self->state;
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	685b      	ldr	r3, [r3, #4]
 80014c4:	60fb      	str	r3, [r7, #12]
    if (nmea_probe_stream(s->uart) == HAL_OK) { if (out) *out = 'G'; return HAL_OK; }
 80014c6:	68fb      	ldr	r3, [r7, #12]
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	4618      	mov	r0, r3
 80014cc:	f7ff ff84 	bl	80013d8 <nmea_probe_stream>
 80014d0:	4603      	mov	r3, r0
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	d107      	bne.n	80014e6 <gps_whoami+0x30>
 80014d6:	683b      	ldr	r3, [r7, #0]
 80014d8:	2b00      	cmp	r3, #0
 80014da:	d002      	beq.n	80014e2 <gps_whoami+0x2c>
 80014dc:	683b      	ldr	r3, [r7, #0]
 80014de:	2247      	movs	r2, #71	@ 0x47
 80014e0:	701a      	strb	r2, [r3, #0]
 80014e2:	2300      	movs	r3, #0
 80014e4:	e000      	b.n	80014e8 <gps_whoami+0x32>
    return HAL_ERROR;
 80014e6:	2301      	movs	r3, #1
}
 80014e8:	4618      	mov	r0, r3
 80014ea:	3710      	adds	r7, #16
 80014ec:	46bd      	mov	sp, r7
 80014ee:	bd80      	pop	{r7, pc}

080014f0 <gps6m_bind>:
    .init   = gps_init,
    .read   = gps_read,
    .whoami = gps_whoami
};

void gps6m_bind(sensor_if_t *iface, gps6m_t *inst, UART_HandleTypeDef *uart) {
 80014f0:	b480      	push	{r7}
 80014f2:	b085      	sub	sp, #20
 80014f4:	af00      	add	r7, sp, #0
 80014f6:	60f8      	str	r0, [r7, #12]
 80014f8:	60b9      	str	r1, [r7, #8]
 80014fa:	607a      	str	r2, [r7, #4]
    inst->uart = uart;
 80014fc:	68bb      	ldr	r3, [r7, #8]
 80014fe:	687a      	ldr	r2, [r7, #4]
 8001500:	601a      	str	r2, [r3, #0]
    iface->vTable   = &GPS_VTBL;
 8001502:	68fb      	ldr	r3, [r7, #12]
 8001504:	4a05      	ldr	r2, [pc, #20]	@ (800151c <gps6m_bind+0x2c>)
 8001506:	601a      	str	r2, [r3, #0]
    iface->state= inst;
 8001508:	68fb      	ldr	r3, [r7, #12]
 800150a:	68ba      	ldr	r2, [r7, #8]
 800150c:	605a      	str	r2, [r3, #4]
}
 800150e:	bf00      	nop
 8001510:	3714      	adds	r7, #20
 8001512:	46bd      	mov	sp, r7
 8001514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001518:	4770      	bx	lr
 800151a:	bf00      	nop
 800151c:	0800b2cc 	.word	0x0800b2cc

08001520 <icm_probe>:
static inline uint8_t clip3(uint8_t x);
static inline uint8_t clip4(uint8_t x);
static icm42688_t* getSelfStatePointer(sensor_if_t *self);

/* ---------- vtable ops ---------- */
static HAL_StatusTypeDef icm_probe(sensor_if_t *self) {
 8001520:	b580      	push	{r7, lr}
 8001522:	b084      	sub	sp, #16
 8001524:	af00      	add	r7, sp, #0
 8001526:	6078      	str	r0, [r7, #4]
	icm42688_t *s = getSelfStatePointer(self);
 8001528:	6878      	ldr	r0, [r7, #4]
 800152a:	f000 fddc 	bl	80020e6 <getSelfStatePointer>
 800152e:	60f8      	str	r0, [r7, #12]
	if (!s) return HAL_ERROR;
 8001530:	68fb      	ldr	r3, [r7, #12]
 8001532:	2b00      	cmp	r3, #0
 8001534:	d101      	bne.n	800153a <icm_probe+0x1a>
 8001536:	2301      	movs	r3, #1
 8001538:	e02d      	b.n	8001596 <icm_probe+0x76>

	//Get the id.
	uint8_t id = 0;
 800153a:	2300      	movs	r3, #0
 800153c:	72bb      	strb	r3, [r7, #10]
	HAL_StatusTypeDef st = icm_whoami(self, &id);
 800153e:	f107 030a 	add.w	r3, r7, #10
 8001542:	4619      	mov	r1, r3
 8001544:	6878      	ldr	r0, [r7, #4]
 8001546:	f000 f8b7 	bl	80016b8 <icm_whoami>
 800154a:	4603      	mov	r3, r0
 800154c:	72fb      	strb	r3, [r7, #11]
	if (st != HAL_OK) {
 800154e:	7afb      	ldrb	r3, [r7, #11]
 8001550:	2b00      	cmp	r3, #0
 8001552:	d011      	beq.n	8001578 <icm_probe+0x58>
		s->last_hal_err = HAL_I2C_GetError(s->i2c);
 8001554:	68fb      	ldr	r3, [r7, #12]
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	4618      	mov	r0, r3
 800155a:	f002 fb39 	bl	8003bd0 <HAL_I2C_GetError>
 800155e:	4602      	mov	r2, r0
 8001560:	68fb      	ldr	r3, [r7, #12]
 8001562:	609a      	str	r2, [r3, #8]
		s->last_err = (st == HAL_TIMEOUT) ? ICM_ERR_TIMEOUT : ICM_ERR_I2C;
 8001564:	7afb      	ldrb	r3, [r7, #11]
 8001566:	2b03      	cmp	r3, #3
 8001568:	d101      	bne.n	800156e <icm_probe+0x4e>
 800156a:	2203      	movs	r2, #3
 800156c:	e000      	b.n	8001570 <icm_probe+0x50>
 800156e:	2202      	movs	r2, #2
 8001570:	68fb      	ldr	r3, [r7, #12]
 8001572:	715a      	strb	r2, [r3, #5]
		return st;
 8001574:	7afb      	ldrb	r3, [r7, #11]
 8001576:	e00e      	b.n	8001596 <icm_probe+0x76>
	}

	//Check that the id matches the documentation.
	if (id != ICM_WHO_AM_I_DEFAULT) {
 8001578:	7abb      	ldrb	r3, [r7, #10]
 800157a:	2b47      	cmp	r3, #71	@ 0x47
 800157c:	d007      	beq.n	800158e <icm_probe+0x6e>
		s->last_err = ICM_ERR_WHOAMI_MISMATCH;
 800157e:	68fb      	ldr	r3, [r7, #12]
 8001580:	2204      	movs	r2, #4
 8001582:	715a      	strb	r2, [r3, #5]
		s->last_whoami = id;
 8001584:	7aba      	ldrb	r2, [r7, #10]
 8001586:	68fb      	ldr	r3, [r7, #12]
 8001588:	731a      	strb	r2, [r3, #12]
		return HAL_ERROR;
 800158a:	2301      	movs	r3, #1
 800158c:	e003      	b.n	8001596 <icm_probe+0x76>
	}

	s->last_err = ICM_OK;
 800158e:	68fb      	ldr	r3, [r7, #12]
 8001590:	2200      	movs	r2, #0
 8001592:	715a      	strb	r2, [r3, #5]
	return HAL_OK;
 8001594:	2300      	movs	r3, #0
}
 8001596:	4618      	mov	r0, r3
 8001598:	3710      	adds	r7, #16
 800159a:	46bd      	mov	sp, r7
 800159c:	bd80      	pop	{r7, pc}

0800159e <icm_init>:

static HAL_StatusTypeDef icm_init(sensor_if_t *self) {
 800159e:	b580      	push	{r7, lr}
 80015a0:	b086      	sub	sp, #24
 80015a2:	af02      	add	r7, sp, #8
 80015a4:	6078      	str	r0, [r7, #4]
	icm42688_t *s = getSelfStatePointer(self);
 80015a6:	6878      	ldr	r0, [r7, #4]
 80015a8:	f000 fd9d 	bl	80020e6 <getSelfStatePointer>
 80015ac:	60f8      	str	r0, [r7, #12]
	if (!s) return HAL_ERROR;
 80015ae:	68fb      	ldr	r3, [r7, #12]
 80015b0:	2b00      	cmp	r3, #0
 80015b2:	d101      	bne.n	80015b8 <icm_init+0x1a>
 80015b4:	2301      	movs	r3, #1
 80015b6:	e066      	b.n	8001686 <icm_init+0xe8>

	//TODO: Configure sensor filters, etc.

	HAL_StatusTypeDef response;

	response = icm_soft_reset(s);
 80015b8:	68f8      	ldr	r0, [r7, #12]
 80015ba:	f000 fbd7 	bl	8001d6c <icm_soft_reset>
 80015be:	4603      	mov	r3, r0
 80015c0:	72fb      	strb	r3, [r7, #11]
	if (response != HAL_OK){
 80015c2:	7afb      	ldrb	r3, [r7, #11]
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	d004      	beq.n	80015d2 <icm_init+0x34>
		s->last_err = ICM_ERR_NOT_INITIALIZED;
 80015c8:	68fb      	ldr	r3, [r7, #12]
 80015ca:	2205      	movs	r2, #5
 80015cc:	715a      	strb	r2, [r3, #5]
		return HAL_ERROR;
 80015ce:	2301      	movs	r3, #1
 80015d0:	e059      	b.n	8001686 <icm_init+0xe8>
	}

	HAL_Delay(500);
 80015d2:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80015d6:	f001 fcdb 	bl	8002f90 <HAL_Delay>

	// Put in standby power modes
	response = icm_power_mgmt0_config(s, /*gyro_mode*/0, /*accel_mode*/0, /*temp_disable*/1, /*idle*/0);
 80015da:	2300      	movs	r3, #0
 80015dc:	9300      	str	r3, [sp, #0]
 80015de:	2301      	movs	r3, #1
 80015e0:	2200      	movs	r2, #0
 80015e2:	2100      	movs	r1, #0
 80015e4:	68f8      	ldr	r0, [r7, #12]
 80015e6:	f000 f8a1 	bl	800172c <icm_power_mgmt0_config>
 80015ea:	4603      	mov	r3, r0
 80015ec:	72fb      	strb	r3, [r7, #11]
	if (response != HAL_OK){
 80015ee:	7afb      	ldrb	r3, [r7, #11]
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	d004      	beq.n	80015fe <icm_init+0x60>
		s->last_err = ICM_ERR_NOT_INITIALIZED;
 80015f4:	68fb      	ldr	r3, [r7, #12]
 80015f6:	2205      	movs	r2, #5
 80015f8:	715a      	strb	r2, [r3, #5]
		return HAL_ERROR;
 80015fa:	2301      	movs	r3, #1
 80015fc:	e043      	b.n	8001686 <icm_init+0xe8>
	}

	HAL_Delay(500);
 80015fe:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8001602:	f001 fcc5 	bl	8002f90 <HAL_Delay>

	response = icm_gyro_config0(s, 0, 6);
 8001606:	2206      	movs	r2, #6
 8001608:	2100      	movs	r1, #0
 800160a:	68f8      	ldr	r0, [r7, #12]
 800160c:	f000 f92c 	bl	8001868 <icm_gyro_config0>
 8001610:	4603      	mov	r3, r0
 8001612:	72fb      	strb	r3, [r7, #11]
	if (response != HAL_OK){
 8001614:	7afb      	ldrb	r3, [r7, #11]
 8001616:	2b00      	cmp	r3, #0
 8001618:	d004      	beq.n	8001624 <icm_init+0x86>
		s->last_err = ICM_ERR_NOT_INITIALIZED;
 800161a:	68fb      	ldr	r3, [r7, #12]
 800161c:	2205      	movs	r2, #5
 800161e:	715a      	strb	r2, [r3, #5]
		return HAL_ERROR;
 8001620:	2301      	movs	r3, #1
 8001622:	e030      	b.n	8001686 <icm_init+0xe8>
	}

	HAL_Delay(500);
 8001624:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8001628:	f001 fcb2 	bl	8002f90 <HAL_Delay>

	response = icm_accel_config0(s, 0 , 6);
 800162c:	2206      	movs	r2, #6
 800162e:	2100      	movs	r1, #0
 8001630:	68f8      	ldr	r0, [r7, #12]
 8001632:	f000 fa63 	bl	8001afc <icm_accel_config0>
 8001636:	4603      	mov	r3, r0
 8001638:	72fb      	strb	r3, [r7, #11]
	if (response != HAL_OK){
 800163a:	7afb      	ldrb	r3, [r7, #11]
 800163c:	2b00      	cmp	r3, #0
 800163e:	d004      	beq.n	800164a <icm_init+0xac>
		s->last_err = ICM_ERR_NOT_INITIALIZED;
 8001640:	68fb      	ldr	r3, [r7, #12]
 8001642:	2205      	movs	r2, #5
 8001644:	715a      	strb	r2, [r3, #5]
		return HAL_ERROR;
 8001646:	2301      	movs	r3, #1
 8001648:	e01d      	b.n	8001686 <icm_init+0xe8>
	}

	HAL_Delay(500);
 800164a:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800164e:	f001 fc9f 	bl	8002f90 <HAL_Delay>

	// Configure power modes
	response = icm_power_mgmt0_config(s, /*gyro_mode*/2, /*accel_mode*/2, /*temp_disable*/0, /*idle*/0);
 8001652:	2300      	movs	r3, #0
 8001654:	9300      	str	r3, [sp, #0]
 8001656:	2300      	movs	r3, #0
 8001658:	2202      	movs	r2, #2
 800165a:	2102      	movs	r1, #2
 800165c:	68f8      	ldr	r0, [r7, #12]
 800165e:	f000 f865 	bl	800172c <icm_power_mgmt0_config>
 8001662:	4603      	mov	r3, r0
 8001664:	72fb      	strb	r3, [r7, #11]
	if (response != HAL_OK){
 8001666:	7afb      	ldrb	r3, [r7, #11]
 8001668:	2b00      	cmp	r3, #0
 800166a:	d004      	beq.n	8001676 <icm_init+0xd8>
		s->last_err = ICM_ERR_NOT_INITIALIZED;
 800166c:	68fb      	ldr	r3, [r7, #12]
 800166e:	2205      	movs	r2, #5
 8001670:	715a      	strb	r2, [r3, #5]
		return HAL_ERROR;
 8001672:	2301      	movs	r3, #1
 8001674:	e007      	b.n	8001686 <icm_init+0xe8>
	}

	HAL_Delay(500);
 8001676:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800167a:	f001 fc89 	bl	8002f90 <HAL_Delay>

	s->last_err = ICM_OK;
 800167e:	68fb      	ldr	r3, [r7, #12]
 8001680:	2200      	movs	r2, #0
 8001682:	715a      	strb	r2, [r3, #5]
	return HAL_OK;
 8001684:	2300      	movs	r3, #0
}
 8001686:	4618      	mov	r0, r3
 8001688:	3710      	adds	r7, #16
 800168a:	46bd      	mov	sp, r7
 800168c:	bd80      	pop	{r7, pc}

0800168e <icm_read>:

static HAL_StatusTypeDef icm_read(sensor_if_t *self) {
 800168e:	b580      	push	{r7, lr}
 8001690:	b084      	sub	sp, #16
 8001692:	af00      	add	r7, sp, #0
 8001694:	6078      	str	r0, [r7, #4]
	icm42688_t *s = getSelfStatePointer(self);
 8001696:	6878      	ldr	r0, [r7, #4]
 8001698:	f000 fd25 	bl	80020e6 <getSelfStatePointer>
 800169c:	60f8      	str	r0, [r7, #12]
	if (!s) return HAL_ERROR;
 800169e:	68fb      	ldr	r3, [r7, #12]
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	d101      	bne.n	80016a8 <icm_read+0x1a>
 80016a4:	2301      	movs	r3, #1
 80016a6:	e003      	b.n	80016b0 <icm_read+0x22>

	return icm_read_all(s);
 80016a8:	68f8      	ldr	r0, [r7, #12]
 80016aa:	f000 fc47 	bl	8001f3c <icm_read_all>
 80016ae:	4603      	mov	r3, r0
}
 80016b0:	4618      	mov	r0, r3
 80016b2:	3710      	adds	r7, #16
 80016b4:	46bd      	mov	sp, r7
 80016b6:	bd80      	pop	{r7, pc}

080016b8 <icm_whoami>:

static HAL_StatusTypeDef icm_whoami(sensor_if_t *self, uint8_t *out) {
 80016b8:	b580      	push	{r7, lr}
 80016ba:	b086      	sub	sp, #24
 80016bc:	af02      	add	r7, sp, #8
 80016be:	6078      	str	r0, [r7, #4]
 80016c0:	6039      	str	r1, [r7, #0]
	icm42688_t *s = getSelfStatePointer(self);
 80016c2:	6878      	ldr	r0, [r7, #4]
 80016c4:	f000 fd0f 	bl	80020e6 <getSelfStatePointer>
 80016c8:	60f8      	str	r0, [r7, #12]
	if (!s) return HAL_ERROR;
 80016ca:	68fb      	ldr	r3, [r7, #12]
 80016cc:	2b00      	cmp	r3, #0
 80016ce:	d101      	bne.n	80016d4 <icm_whoami+0x1c>
 80016d0:	2301      	movs	r3, #1
 80016d2:	e00a      	b.n	80016ea <icm_whoami+0x32>

	return rd(s->i2c, s->addr7, ICM_WHO_AM_I_REG, out, 1);
 80016d4:	68fb      	ldr	r3, [r7, #12]
 80016d6:	6818      	ldr	r0, [r3, #0]
 80016d8:	68fb      	ldr	r3, [r7, #12]
 80016da:	7919      	ldrb	r1, [r3, #4]
 80016dc:	2301      	movs	r3, #1
 80016de:	9300      	str	r3, [sp, #0]
 80016e0:	683b      	ldr	r3, [r7, #0]
 80016e2:	2275      	movs	r2, #117	@ 0x75
 80016e4:	f000 fcb4 	bl	8002050 <rd>
 80016e8:	4603      	mov	r3, r0
}
 80016ea:	4618      	mov	r0, r3
 80016ec:	3710      	adds	r7, #16
 80016ee:	46bd      	mov	sp, r7
 80016f0:	bd80      	pop	{r7, pc}
	...

080016f4 <icm42688_bind>:
		.init  = icm_init,
		.read  = icm_read,
		.whoami= icm_whoami
};

void icm42688_bind(sensor_if_t *iface, icm42688_t *inst, I2C_HandleTypeDef *i2c, uint8_t addr7) {
 80016f4:	b480      	push	{r7}
 80016f6:	b085      	sub	sp, #20
 80016f8:	af00      	add	r7, sp, #0
 80016fa:	60f8      	str	r0, [r7, #12]
 80016fc:	60b9      	str	r1, [r7, #8]
 80016fe:	607a      	str	r2, [r7, #4]
 8001700:	70fb      	strb	r3, [r7, #3]
	inst->i2c  = i2c;
 8001702:	68bb      	ldr	r3, [r7, #8]
 8001704:	687a      	ldr	r2, [r7, #4]
 8001706:	601a      	str	r2, [r3, #0]
	inst->addr7 = addr7;
 8001708:	68bb      	ldr	r3, [r7, #8]
 800170a:	78fa      	ldrb	r2, [r7, #3]
 800170c:	711a      	strb	r2, [r3, #4]
	iface->vTable    = &ICM_VTBL;
 800170e:	68fb      	ldr	r3, [r7, #12]
 8001710:	4a05      	ldr	r2, [pc, #20]	@ (8001728 <icm42688_bind+0x34>)
 8001712:	601a      	str	r2, [r3, #0]
	iface->state = inst;
 8001714:	68fb      	ldr	r3, [r7, #12]
 8001716:	68ba      	ldr	r2, [r7, #8]
 8001718:	605a      	str	r2, [r3, #4]
}
 800171a:	bf00      	nop
 800171c:	3714      	adds	r7, #20
 800171e:	46bd      	mov	sp, r7
 8001720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001724:	4770      	bx	lr
 8001726:	bf00      	nop
 8001728:	0800b2dc 	.word	0x0800b2dc

0800172c <icm_power_mgmt0_config>:
static HAL_StatusTypeDef icm_power_mgmt0_config(icm42688_t *self,
		uint8_t gyro_mode,
		uint8_t accel_mode,
		uint8_t temp_disable,
		uint8_t idle)
{
 800172c:	b590      	push	{r4, r7, lr}
 800172e:	b089      	sub	sp, #36	@ 0x24
 8001730:	af04      	add	r7, sp, #16
 8001732:	6078      	str	r0, [r7, #4]
 8001734:	4608      	mov	r0, r1
 8001736:	4611      	mov	r1, r2
 8001738:	461a      	mov	r2, r3
 800173a:	4603      	mov	r3, r0
 800173c:	70fb      	strb	r3, [r7, #3]
 800173e:	460b      	mov	r3, r1
 8001740:	70bb      	strb	r3, [r7, #2]
 8001742:	4613      	mov	r3, r2
 8001744:	707b      	strb	r3, [r7, #1]
	uint8_t v;
	HAL_StatusTypeDef st = HAL_I2C_Mem_Read(self->i2c, (self->addr7 << 1),
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	6818      	ldr	r0, [r3, #0]
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	791b      	ldrb	r3, [r3, #4]
 800174e:	005b      	lsls	r3, r3, #1
 8001750:	b299      	uxth	r1, r3
 8001752:	23c8      	movs	r3, #200	@ 0xc8
 8001754:	9302      	str	r3, [sp, #8]
 8001756:	2301      	movs	r3, #1
 8001758:	9301      	str	r3, [sp, #4]
 800175a:	f107 030d 	add.w	r3, r7, #13
 800175e:	9300      	str	r3, [sp, #0]
 8001760:	2301      	movs	r3, #1
 8001762:	224e      	movs	r2, #78	@ 0x4e
 8001764:	f002 f91a 	bl	800399c <HAL_I2C_Mem_Read>
 8001768:	4603      	mov	r3, r0
 800176a:	73fb      	strb	r3, [r7, #15]
			ICM_POWER_MGMT0_REG, I2C_MEMADD_SIZE_8BIT,
			&v, 1, 200);
	if (st != HAL_OK) {
 800176c:	7bfb      	ldrb	r3, [r7, #15]
 800176e:	2b00      	cmp	r3, #0
 8001770:	d011      	beq.n	8001796 <icm_power_mgmt0_config+0x6a>
		self->last_hal_err = HAL_I2C_GetError(self->i2c);
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	4618      	mov	r0, r3
 8001778:	f002 fa2a 	bl	8003bd0 <HAL_I2C_GetError>
 800177c:	4602      	mov	r2, r0
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	609a      	str	r2, [r3, #8]
		self->last_err = (st == HAL_TIMEOUT) ? ICM_ERR_TIMEOUT : ICM_ERR_I2C;
 8001782:	7bfb      	ldrb	r3, [r7, #15]
 8001784:	2b03      	cmp	r3, #3
 8001786:	d101      	bne.n	800178c <icm_power_mgmt0_config+0x60>
 8001788:	2203      	movs	r2, #3
 800178a:	e000      	b.n	800178e <icm_power_mgmt0_config+0x62>
 800178c:	2202      	movs	r2, #2
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	715a      	strb	r2, [r3, #5]
		return st;
 8001792:	7bfb      	ldrb	r3, [r7, #15]
 8001794:	e064      	b.n	8001860 <icm_power_mgmt0_config+0x134>
	}

	// Compose only the fields we intend to change
	uint8_t set =
			((clip2(gyro_mode)  << ICM_POWER_MGMT0_GYRO_MODE_POS)  & ICM_POWER_MGMT0_GYRO_MODE_Msk) |
 8001796:	78fb      	ldrb	r3, [r7, #3]
 8001798:	4618      	mov	r0, r3
 800179a:	f000 fc77 	bl	800208c <clip2>
 800179e:	4603      	mov	r3, r0
 80017a0:	009b      	lsls	r3, r3, #2
 80017a2:	b2db      	uxtb	r3, r3
 80017a4:	f003 030c 	and.w	r3, r3, #12
 80017a8:	b2dc      	uxtb	r4, r3
			((clip2(accel_mode) << ICM_POWER_MGMT0_ACCEL_MODE_POS) & ICM_POWER_MGMT0_ACCEL_MODE_Msk) |
 80017aa:	78bb      	ldrb	r3, [r7, #2]
 80017ac:	4618      	mov	r0, r3
 80017ae:	f000 fc6d 	bl	800208c <clip2>
 80017b2:	4603      	mov	r3, r0
 80017b4:	f003 0303 	and.w	r3, r3, #3
 80017b8:	b2db      	uxtb	r3, r3
			((clip2(gyro_mode)  << ICM_POWER_MGMT0_GYRO_MODE_POS)  & ICM_POWER_MGMT0_GYRO_MODE_Msk) |
 80017ba:	4323      	orrs	r3, r4
 80017bc:	b2db      	uxtb	r3, r3
			((clip2(accel_mode) << ICM_POWER_MGMT0_ACCEL_MODE_POS) & ICM_POWER_MGMT0_ACCEL_MODE_Msk) |
 80017be:	787a      	ldrb	r2, [r7, #1]
 80017c0:	2a00      	cmp	r2, #0
 80017c2:	d001      	beq.n	80017c8 <icm_power_mgmt0_config+0x9c>
 80017c4:	2220      	movs	r2, #32
 80017c6:	e000      	b.n	80017ca <icm_power_mgmt0_config+0x9e>
 80017c8:	2200      	movs	r2, #0
 80017ca:	4313      	orrs	r3, r2
 80017cc:	b2db      	uxtb	r3, r3
			(temp_disable ? ICM_POWER_MGMT0_TEMP_DISABLE_Msk  : 0u) |
 80017ce:	f897 2020 	ldrb.w	r2, [r7, #32]
 80017d2:	2a00      	cmp	r2, #0
 80017d4:	d001      	beq.n	80017da <icm_power_mgmt0_config+0xae>
 80017d6:	2210      	movs	r2, #16
 80017d8:	e000      	b.n	80017dc <icm_power_mgmt0_config+0xb0>
 80017da:	2200      	movs	r2, #0
	uint8_t set =
 80017dc:	4313      	orrs	r3, r2
 80017de:	73bb      	strb	r3, [r7, #14]
			(idle         ? ICM_POWER_MGMT0_IDLE_Msk     : 0u);

	uint8_t new_v = (uint8_t)((v & ~ICM_POWER_MGMT0_WRITABLE_Msk) | (set & ICM_POWER_MGMT0_WRITABLE_Msk));
 80017e0:	7b7b      	ldrb	r3, [r7, #13]
 80017e2:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80017e6:	b2da      	uxtb	r2, r3
 80017e8:	7bbb      	ldrb	r3, [r7, #14]
 80017ea:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80017ee:	b2db      	uxtb	r3, r3
 80017f0:	4313      	orrs	r3, r2
 80017f2:	b2db      	uxtb	r3, r3
 80017f4:	733b      	strb	r3, [r7, #12]

	if (new_v == v) {        // no change → skip bus write
 80017f6:	7b3a      	ldrb	r2, [r7, #12]
 80017f8:	7b7b      	ldrb	r3, [r7, #13]
 80017fa:	429a      	cmp	r2, r3
 80017fc:	d104      	bne.n	8001808 <icm_power_mgmt0_config+0xdc>
		self->last_err = ICM_OK;
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	2200      	movs	r2, #0
 8001802:	715a      	strb	r2, [r3, #5]
		return HAL_OK;
 8001804:	2300      	movs	r3, #0
 8001806:	e02b      	b.n	8001860 <icm_power_mgmt0_config+0x134>
	}

	st = HAL_I2C_Mem_Write(self->i2c, (self->addr7 << 1),
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	6818      	ldr	r0, [r3, #0]
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	791b      	ldrb	r3, [r3, #4]
 8001810:	005b      	lsls	r3, r3, #1
 8001812:	b299      	uxth	r1, r3
 8001814:	23c8      	movs	r3, #200	@ 0xc8
 8001816:	9302      	str	r3, [sp, #8]
 8001818:	2301      	movs	r3, #1
 800181a:	9301      	str	r3, [sp, #4]
 800181c:	f107 030c 	add.w	r3, r7, #12
 8001820:	9300      	str	r3, [sp, #0]
 8001822:	2301      	movs	r3, #1
 8001824:	224e      	movs	r2, #78	@ 0x4e
 8001826:	f001 ffa5 	bl	8003774 <HAL_I2C_Mem_Write>
 800182a:	4603      	mov	r3, r0
 800182c:	73fb      	strb	r3, [r7, #15]
			ICM_POWER_MGMT0_REG, I2C_MEMADD_SIZE_8BIT,
			&new_v, 1, 200);
	if (st != HAL_OK) {
 800182e:	7bfb      	ldrb	r3, [r7, #15]
 8001830:	2b00      	cmp	r3, #0
 8001832:	d011      	beq.n	8001858 <icm_power_mgmt0_config+0x12c>
		self->last_hal_err = HAL_I2C_GetError(self->i2c);
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	4618      	mov	r0, r3
 800183a:	f002 f9c9 	bl	8003bd0 <HAL_I2C_GetError>
 800183e:	4602      	mov	r2, r0
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	609a      	str	r2, [r3, #8]
		self->last_err = (st == HAL_TIMEOUT) ? ICM_ERR_TIMEOUT : ICM_ERR_I2C;
 8001844:	7bfb      	ldrb	r3, [r7, #15]
 8001846:	2b03      	cmp	r3, #3
 8001848:	d101      	bne.n	800184e <icm_power_mgmt0_config+0x122>
 800184a:	2203      	movs	r2, #3
 800184c:	e000      	b.n	8001850 <icm_power_mgmt0_config+0x124>
 800184e:	2202      	movs	r2, #2
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	715a      	strb	r2, [r3, #5]
		return st;
 8001854:	7bfb      	ldrb	r3, [r7, #15]
 8001856:	e003      	b.n	8001860 <icm_power_mgmt0_config+0x134>
	}

	self->last_err = ICM_OK;
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	2200      	movs	r2, #0
 800185c:	715a      	strb	r2, [r3, #5]
	return HAL_OK;
 800185e:	2300      	movs	r3, #0
}
 8001860:	4618      	mov	r0, r3
 8001862:	3714      	adds	r7, #20
 8001864:	46bd      	mov	sp, r7
 8001866:	bd90      	pop	{r4, r7, pc}

08001868 <icm_gyro_config0>:

static HAL_StatusTypeDef icm_gyro_config0(icm42688_t *self, uint8_t gyro_fs_sel, uint8_t gyro_odr)
{
 8001868:	b590      	push	{r4, r7, lr}
 800186a:	b089      	sub	sp, #36	@ 0x24
 800186c:	af04      	add	r7, sp, #16
 800186e:	6078      	str	r0, [r7, #4]
 8001870:	460b      	mov	r3, r1
 8001872:	70fb      	strb	r3, [r7, #3]
 8001874:	4613      	mov	r3, r2
 8001876:	70bb      	strb	r3, [r7, #2]
	if (!self) return HAL_ERROR;
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	2b00      	cmp	r3, #0
 800187c:	d101      	bne.n	8001882 <icm_gyro_config0+0x1a>
 800187e:	2301      	movs	r3, #1
 8001880:	e10f      	b.n	8001aa2 <icm_gyro_config0+0x23a>

	uint8_t v;
	HAL_StatusTypeDef st = HAL_I2C_Mem_Read(self->i2c, (self->addr7 << 1),
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	6818      	ldr	r0, [r3, #0]
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	791b      	ldrb	r3, [r3, #4]
 800188a:	005b      	lsls	r3, r3, #1
 800188c:	b299      	uxth	r1, r3
 800188e:	23c8      	movs	r3, #200	@ 0xc8
 8001890:	9302      	str	r3, [sp, #8]
 8001892:	2301      	movs	r3, #1
 8001894:	9301      	str	r3, [sp, #4]
 8001896:	f107 030a 	add.w	r3, r7, #10
 800189a:	9300      	str	r3, [sp, #0]
 800189c:	2301      	movs	r3, #1
 800189e:	224f      	movs	r2, #79	@ 0x4f
 80018a0:	f002 f87c 	bl	800399c <HAL_I2C_Mem_Read>
 80018a4:	4603      	mov	r3, r0
 80018a6:	73fb      	strb	r3, [r7, #15]
			ICM_GYRO_CONFIG0_REG, I2C_MEMADD_SIZE_8BIT,
			&v, 1, 200);
	if (st != HAL_OK) {
 80018a8:	7bfb      	ldrb	r3, [r7, #15]
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	d011      	beq.n	80018d2 <icm_gyro_config0+0x6a>
		self->last_hal_err = HAL_I2C_GetError(self->i2c);
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	4618      	mov	r0, r3
 80018b4:	f002 f98c 	bl	8003bd0 <HAL_I2C_GetError>
 80018b8:	4602      	mov	r2, r0
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	609a      	str	r2, [r3, #8]
		self->last_err = (st == HAL_TIMEOUT) ? ICM_ERR_TIMEOUT : ICM_ERR_I2C;
 80018be:	7bfb      	ldrb	r3, [r7, #15]
 80018c0:	2b03      	cmp	r3, #3
 80018c2:	d101      	bne.n	80018c8 <icm_gyro_config0+0x60>
 80018c4:	2203      	movs	r2, #3
 80018c6:	e000      	b.n	80018ca <icm_gyro_config0+0x62>
 80018c8:	2202      	movs	r2, #2
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	715a      	strb	r2, [r3, #5]
		return st;
 80018ce:	7bfb      	ldrb	r3, [r7, #15]
 80018d0:	e0e7      	b.n	8001aa2 <icm_gyro_config0+0x23a>
	}

	uint8_t set =
			((clip4(gyro_odr)    << ICM_GYRO_CONFIG0_ODR_POS) & ICM_GYRO_CONFIG0_ODR_Msk) |
 80018d2:	78bb      	ldrb	r3, [r7, #2]
 80018d4:	4618      	mov	r0, r3
 80018d6:	f000 fbf7 	bl	80020c8 <clip4>
 80018da:	4603      	mov	r3, r0
 80018dc:	f003 030f 	and.w	r3, r3, #15
 80018e0:	b2dc      	uxtb	r4, r3
			((clip3(gyro_fs_sel) << ICM_GYRO_CONFIG0_FS_POS)  & ICM_GYRO_CONFIG0_FS_Msk);
 80018e2:	78fb      	ldrb	r3, [r7, #3]
 80018e4:	4618      	mov	r0, r3
 80018e6:	f000 fbe0 	bl	80020aa <clip3>
 80018ea:	4603      	mov	r3, r0
 80018ec:	015b      	lsls	r3, r3, #5
 80018ee:	b2db      	uxtb	r3, r3
	uint8_t set =
 80018f0:	4323      	orrs	r3, r4
 80018f2:	73bb      	strb	r3, [r7, #14]

	uint8_t new_v = (uint8_t)((v & ~ICM_GYRO_CONFIG0_WRITABLE_Msk) | set);
 80018f4:	7abb      	ldrb	r3, [r7, #10]
 80018f6:	f003 0310 	and.w	r3, r3, #16
 80018fa:	b2da      	uxtb	r2, r3
 80018fc:	7bbb      	ldrb	r3, [r7, #14]
 80018fe:	4313      	orrs	r3, r2
 8001900:	b2db      	uxtb	r3, r3
 8001902:	727b      	strb	r3, [r7, #9]

	if (new_v != v) {
 8001904:	7a7a      	ldrb	r2, [r7, #9]
 8001906:	7abb      	ldrb	r3, [r7, #10]
 8001908:	429a      	cmp	r2, r3
 800190a:	d027      	beq.n	800195c <icm_gyro_config0+0xf4>
		st = HAL_I2C_Mem_Write(self->i2c, (self->addr7 << 1),
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	6818      	ldr	r0, [r3, #0]
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	791b      	ldrb	r3, [r3, #4]
 8001914:	005b      	lsls	r3, r3, #1
 8001916:	b299      	uxth	r1, r3
 8001918:	23c8      	movs	r3, #200	@ 0xc8
 800191a:	9302      	str	r3, [sp, #8]
 800191c:	2301      	movs	r3, #1
 800191e:	9301      	str	r3, [sp, #4]
 8001920:	f107 0309 	add.w	r3, r7, #9
 8001924:	9300      	str	r3, [sp, #0]
 8001926:	2301      	movs	r3, #1
 8001928:	224f      	movs	r2, #79	@ 0x4f
 800192a:	f001 ff23 	bl	8003774 <HAL_I2C_Mem_Write>
 800192e:	4603      	mov	r3, r0
 8001930:	73fb      	strb	r3, [r7, #15]
				ICM_GYRO_CONFIG0_REG, I2C_MEMADD_SIZE_8BIT,
				&new_v, 1, 200);
		if (st != HAL_OK) {
 8001932:	7bfb      	ldrb	r3, [r7, #15]
 8001934:	2b00      	cmp	r3, #0
 8001936:	d011      	beq.n	800195c <icm_gyro_config0+0xf4>
			self->last_hal_err = HAL_I2C_GetError(self->i2c);
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	4618      	mov	r0, r3
 800193e:	f002 f947 	bl	8003bd0 <HAL_I2C_GetError>
 8001942:	4602      	mov	r2, r0
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	609a      	str	r2, [r3, #8]
			self->last_err = (st == HAL_TIMEOUT) ? ICM_ERR_TIMEOUT : ICM_ERR_I2C;
 8001948:	7bfb      	ldrb	r3, [r7, #15]
 800194a:	2b03      	cmp	r3, #3
 800194c:	d101      	bne.n	8001952 <icm_gyro_config0+0xea>
 800194e:	2203      	movs	r2, #3
 8001950:	e000      	b.n	8001954 <icm_gyro_config0+0xec>
 8001952:	2202      	movs	r2, #2
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	715a      	strb	r2, [r3, #5]
			return st;
 8001958:	7bfb      	ldrb	r3, [r7, #15]
 800195a:	e0a2      	b.n	8001aa2 <icm_gyro_config0+0x23a>
		}
	}

	// >>> ALWAYS derive effective settings from the value we now have in the register
	uint8_t eff = (new_v != v) ? new_v : v;
 800195c:	7a7b      	ldrb	r3, [r7, #9]
 800195e:	737b      	strb	r3, [r7, #13]
	uint8_t fs_code  = (eff & ICM_GYRO_CONFIG0_FS_Msk)  >> ICM_GYRO_CONFIG0_FS_POS;
 8001960:	7b7b      	ldrb	r3, [r7, #13]
 8001962:	095b      	lsrs	r3, r3, #5
 8001964:	733b      	strb	r3, [r7, #12]
	uint8_t odr_code = (eff & ICM_GYRO_CONFIG0_ODR_Msk) >> ICM_GYRO_CONFIG0_ODR_POS;
 8001966:	7b7b      	ldrb	r3, [r7, #13]
 8001968:	f003 030f 	and.w	r3, r3, #15
 800196c:	72fb      	strb	r3, [r7, #11]

	// FS -> LSB per dps  (keep switch for readability)
	switch (fs_code & 0x7u) {
 800196e:	7b3b      	ldrb	r3, [r7, #12]
 8001970:	f003 0307 	and.w	r3, r3, #7
 8001974:	2b07      	cmp	r3, #7
 8001976:	d833      	bhi.n	80019e0 <icm_gyro_config0+0x178>
 8001978:	a201      	add	r2, pc, #4	@ (adr r2, 8001980 <icm_gyro_config0+0x118>)
 800197a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800197e:	bf00      	nop
 8001980:	080019a1 	.word	0x080019a1
 8001984:	080019a9 	.word	0x080019a9
 8001988:	080019b1 	.word	0x080019b1
 800198c:	080019b9 	.word	0x080019b9
 8001990:	080019c1 	.word	0x080019c1
 8001994:	080019c9 	.word	0x080019c9
 8001998:	080019d1 	.word	0x080019d1
 800199c:	080019d9 	.word	0x080019d9
	case 0: self->gyro_lsb_per_dps = 16.384f;   break; // ±2000 dps
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	4a42      	ldr	r2, [pc, #264]	@ (8001aac <icm_gyro_config0+0x244>)
 80019a4:	63da      	str	r2, [r3, #60]	@ 0x3c
 80019a6:	e01b      	b.n	80019e0 <icm_gyro_config0+0x178>
	case 1: self->gyro_lsb_per_dps = 32.768f;   break; // ±1000
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	4a41      	ldr	r2, [pc, #260]	@ (8001ab0 <icm_gyro_config0+0x248>)
 80019ac:	63da      	str	r2, [r3, #60]	@ 0x3c
 80019ae:	e017      	b.n	80019e0 <icm_gyro_config0+0x178>
	case 2: self->gyro_lsb_per_dps = 65.536f;   break; // ±500
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	4a40      	ldr	r2, [pc, #256]	@ (8001ab4 <icm_gyro_config0+0x24c>)
 80019b4:	63da      	str	r2, [r3, #60]	@ 0x3c
 80019b6:	e013      	b.n	80019e0 <icm_gyro_config0+0x178>
	case 3: self->gyro_lsb_per_dps = 131.072f;  break; // ±250
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	4a3f      	ldr	r2, [pc, #252]	@ (8001ab8 <icm_gyro_config0+0x250>)
 80019bc:	63da      	str	r2, [r3, #60]	@ 0x3c
 80019be:	e00f      	b.n	80019e0 <icm_gyro_config0+0x178>
	case 4: self->gyro_lsb_per_dps = 262.144f;  break; // ±125
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	4a3e      	ldr	r2, [pc, #248]	@ (8001abc <icm_gyro_config0+0x254>)
 80019c4:	63da      	str	r2, [r3, #60]	@ 0x3c
 80019c6:	e00b      	b.n	80019e0 <icm_gyro_config0+0x178>
	case 5: self->gyro_lsb_per_dps = 524.288f;  break; // ±62.5
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	4a3d      	ldr	r2, [pc, #244]	@ (8001ac0 <icm_gyro_config0+0x258>)
 80019cc:	63da      	str	r2, [r3, #60]	@ 0x3c
 80019ce:	e007      	b.n	80019e0 <icm_gyro_config0+0x178>
	case 6: self->gyro_lsb_per_dps = 1048.576f; break; // ±31.25
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	4a3c      	ldr	r2, [pc, #240]	@ (8001ac4 <icm_gyro_config0+0x25c>)
 80019d4:	63da      	str	r2, [r3, #60]	@ 0x3c
 80019d6:	e003      	b.n	80019e0 <icm_gyro_config0+0x178>
	case 7: self->gyro_lsb_per_dps = 2097.152f; break; // ±15.625
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	4a3b      	ldr	r2, [pc, #236]	@ (8001ac8 <icm_gyro_config0+0x260>)
 80019dc:	63da      	str	r2, [r3, #60]	@ 0x3c
 80019de:	bf00      	nop
	}

	// ODR code -> Hz
	switch (odr_code & 0xFu) {
 80019e0:	7afb      	ldrb	r3, [r7, #11]
 80019e2:	f003 030f 	and.w	r3, r3, #15
 80019e6:	3b01      	subs	r3, #1
 80019e8:	2b0e      	cmp	r3, #14
 80019ea:	d851      	bhi.n	8001a90 <icm_gyro_config0+0x228>
 80019ec:	a201      	add	r2, pc, #4	@ (adr r2, 80019f4 <icm_gyro_config0+0x18c>)
 80019ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80019f2:	bf00      	nop
 80019f4:	08001a31 	.word	0x08001a31
 80019f8:	08001a39 	.word	0x08001a39
 80019fc:	08001a41 	.word	0x08001a41
 8001a00:	08001a49 	.word	0x08001a49
 8001a04:	08001a51 	.word	0x08001a51
 8001a08:	08001a59 	.word	0x08001a59
 8001a0c:	08001a61 	.word	0x08001a61
 8001a10:	08001a69 	.word	0x08001a69
 8001a14:	08001a71 	.word	0x08001a71
 8001a18:	08001a79 	.word	0x08001a79
 8001a1c:	08001a81 	.word	0x08001a81
 8001a20:	08001a91 	.word	0x08001a91
 8001a24:	08001a91 	.word	0x08001a91
 8001a28:	08001a91 	.word	0x08001a91
 8001a2c:	08001a89 	.word	0x08001a89
	case 1:  self->gyro_odr = 32000.0f; break;
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	4a26      	ldr	r2, [pc, #152]	@ (8001acc <icm_gyro_config0+0x264>)
 8001a34:	641a      	str	r2, [r3, #64]	@ 0x40
 8001a36:	e030      	b.n	8001a9a <icm_gyro_config0+0x232>
	case 2:  self->gyro_odr = 16000.0f; break;
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	4a25      	ldr	r2, [pc, #148]	@ (8001ad0 <icm_gyro_config0+0x268>)
 8001a3c:	641a      	str	r2, [r3, #64]	@ 0x40
 8001a3e:	e02c      	b.n	8001a9a <icm_gyro_config0+0x232>
	case 3:  self->gyro_odr = 8000.0f;  break;
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	4a24      	ldr	r2, [pc, #144]	@ (8001ad4 <icm_gyro_config0+0x26c>)
 8001a44:	641a      	str	r2, [r3, #64]	@ 0x40
 8001a46:	e028      	b.n	8001a9a <icm_gyro_config0+0x232>
	case 4:  self->gyro_odr = 4000.0f;  break;
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	4a23      	ldr	r2, [pc, #140]	@ (8001ad8 <icm_gyro_config0+0x270>)
 8001a4c:	641a      	str	r2, [r3, #64]	@ 0x40
 8001a4e:	e024      	b.n	8001a9a <icm_gyro_config0+0x232>
	case 5:  self->gyro_odr = 2000.0f;  break;
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	4a22      	ldr	r2, [pc, #136]	@ (8001adc <icm_gyro_config0+0x274>)
 8001a54:	641a      	str	r2, [r3, #64]	@ 0x40
 8001a56:	e020      	b.n	8001a9a <icm_gyro_config0+0x232>
	case 6:  self->gyro_odr = 1000.0f;  break; // reset default
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	4a21      	ldr	r2, [pc, #132]	@ (8001ae0 <icm_gyro_config0+0x278>)
 8001a5c:	641a      	str	r2, [r3, #64]	@ 0x40
 8001a5e:	e01c      	b.n	8001a9a <icm_gyro_config0+0x232>
	case 7:  self->gyro_odr = 200.0f;   break;
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	4a20      	ldr	r2, [pc, #128]	@ (8001ae4 <icm_gyro_config0+0x27c>)
 8001a64:	641a      	str	r2, [r3, #64]	@ 0x40
 8001a66:	e018      	b.n	8001a9a <icm_gyro_config0+0x232>
	case 8:  self->gyro_odr = 100.0f;   break;
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	4a1f      	ldr	r2, [pc, #124]	@ (8001ae8 <icm_gyro_config0+0x280>)
 8001a6c:	641a      	str	r2, [r3, #64]	@ 0x40
 8001a6e:	e014      	b.n	8001a9a <icm_gyro_config0+0x232>
	case 9:  self->gyro_odr = 50.0f;    break;
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	4a1e      	ldr	r2, [pc, #120]	@ (8001aec <icm_gyro_config0+0x284>)
 8001a74:	641a      	str	r2, [r3, #64]	@ 0x40
 8001a76:	e010      	b.n	8001a9a <icm_gyro_config0+0x232>
	case 10: self->gyro_odr = 25.0f;    break;
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	4a1d      	ldr	r2, [pc, #116]	@ (8001af0 <icm_gyro_config0+0x288>)
 8001a7c:	641a      	str	r2, [r3, #64]	@ 0x40
 8001a7e:	e00c      	b.n	8001a9a <icm_gyro_config0+0x232>
	case 11: self->gyro_odr = 12.5f;    break;
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	4a1c      	ldr	r2, [pc, #112]	@ (8001af4 <icm_gyro_config0+0x28c>)
 8001a84:	641a      	str	r2, [r3, #64]	@ 0x40
 8001a86:	e008      	b.n	8001a9a <icm_gyro_config0+0x232>
	case 15: self->gyro_odr = 500.0f;   break;
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	4a1b      	ldr	r2, [pc, #108]	@ (8001af8 <icm_gyro_config0+0x290>)
 8001a8c:	641a      	str	r2, [r3, #64]	@ 0x40
 8001a8e:	e004      	b.n	8001a9a <icm_gyro_config0+0x232>
	default: self->gyro_odr = 0.0f;     break; // reserved codes
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	f04f 0200 	mov.w	r2, #0
 8001a96:	641a      	str	r2, [r3, #64]	@ 0x40
 8001a98:	bf00      	nop
	}

	self->last_err = ICM_OK;
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	2200      	movs	r2, #0
 8001a9e:	715a      	strb	r2, [r3, #5]
	return HAL_OK;
 8001aa0:	2300      	movs	r3, #0
}
 8001aa2:	4618      	mov	r0, r3
 8001aa4:	3714      	adds	r7, #20
 8001aa6:	46bd      	mov	sp, r7
 8001aa8:	bd90      	pop	{r4, r7, pc}
 8001aaa:	bf00      	nop
 8001aac:	4183126f 	.word	0x4183126f
 8001ab0:	4203126f 	.word	0x4203126f
 8001ab4:	4283126f 	.word	0x4283126f
 8001ab8:	4303126f 	.word	0x4303126f
 8001abc:	4383126f 	.word	0x4383126f
 8001ac0:	4403126f 	.word	0x4403126f
 8001ac4:	4483126f 	.word	0x4483126f
 8001ac8:	4503126f 	.word	0x4503126f
 8001acc:	46fa0000 	.word	0x46fa0000
 8001ad0:	467a0000 	.word	0x467a0000
 8001ad4:	45fa0000 	.word	0x45fa0000
 8001ad8:	457a0000 	.word	0x457a0000
 8001adc:	44fa0000 	.word	0x44fa0000
 8001ae0:	447a0000 	.word	0x447a0000
 8001ae4:	43480000 	.word	0x43480000
 8001ae8:	42c80000 	.word	0x42c80000
 8001aec:	42480000 	.word	0x42480000
 8001af0:	41c80000 	.word	0x41c80000
 8001af4:	41480000 	.word	0x41480000
 8001af8:	43fa0000 	.word	0x43fa0000

08001afc <icm_accel_config0>:

static HAL_StatusTypeDef icm_accel_config0(icm42688_t *self, uint8_t accel_fs_sel, uint8_t accel_odr)
{
 8001afc:	b590      	push	{r4, r7, lr}
 8001afe:	b089      	sub	sp, #36	@ 0x24
 8001b00:	af04      	add	r7, sp, #16
 8001b02:	6078      	str	r0, [r7, #4]
 8001b04:	460b      	mov	r3, r1
 8001b06:	70fb      	strb	r3, [r7, #3]
 8001b08:	4613      	mov	r3, r2
 8001b0a:	70bb      	strb	r3, [r7, #2]
	if (!self) return HAL_ERROR;
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	d101      	bne.n	8001b16 <icm_accel_config0+0x1a>
 8001b12:	2301      	movs	r3, #1
 8001b14:	e107      	b.n	8001d26 <icm_accel_config0+0x22a>

	uint8_t v;
	HAL_StatusTypeDef st = HAL_I2C_Mem_Read(self->i2c, (self->addr7 << 1),
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	6818      	ldr	r0, [r3, #0]
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	791b      	ldrb	r3, [r3, #4]
 8001b1e:	005b      	lsls	r3, r3, #1
 8001b20:	b299      	uxth	r1, r3
 8001b22:	23c8      	movs	r3, #200	@ 0xc8
 8001b24:	9302      	str	r3, [sp, #8]
 8001b26:	2301      	movs	r3, #1
 8001b28:	9301      	str	r3, [sp, #4]
 8001b2a:	f107 030a 	add.w	r3, r7, #10
 8001b2e:	9300      	str	r3, [sp, #0]
 8001b30:	2301      	movs	r3, #1
 8001b32:	2250      	movs	r2, #80	@ 0x50
 8001b34:	f001 ff32 	bl	800399c <HAL_I2C_Mem_Read>
 8001b38:	4603      	mov	r3, r0
 8001b3a:	73fb      	strb	r3, [r7, #15]
			ICM_ACCEL_CONFIG0_REG, I2C_MEMADD_SIZE_8BIT,
			&v, 1, 200);
	if (st != HAL_OK) {
 8001b3c:	7bfb      	ldrb	r3, [r7, #15]
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d011      	beq.n	8001b66 <icm_accel_config0+0x6a>
		self->last_hal_err = HAL_I2C_GetError(self->i2c);
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	4618      	mov	r0, r3
 8001b48:	f002 f842 	bl	8003bd0 <HAL_I2C_GetError>
 8001b4c:	4602      	mov	r2, r0
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	609a      	str	r2, [r3, #8]
		self->last_err = (st == HAL_TIMEOUT) ? ICM_ERR_TIMEOUT : ICM_ERR_I2C;
 8001b52:	7bfb      	ldrb	r3, [r7, #15]
 8001b54:	2b03      	cmp	r3, #3
 8001b56:	d101      	bne.n	8001b5c <icm_accel_config0+0x60>
 8001b58:	2203      	movs	r2, #3
 8001b5a:	e000      	b.n	8001b5e <icm_accel_config0+0x62>
 8001b5c:	2202      	movs	r2, #2
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	715a      	strb	r2, [r3, #5]
		return st;
 8001b62:	7bfb      	ldrb	r3, [r7, #15]
 8001b64:	e0df      	b.n	8001d26 <icm_accel_config0+0x22a>
	}

	uint8_t set =
			((clip4(accel_odr)    << ICM_ACCEL_CONFIG0_ODR_POS) & ICM_ACCEL_CONFIG0_ODR_Msk) |
 8001b66:	78bb      	ldrb	r3, [r7, #2]
 8001b68:	4618      	mov	r0, r3
 8001b6a:	f000 faad 	bl	80020c8 <clip4>
 8001b6e:	4603      	mov	r3, r0
 8001b70:	f003 030f 	and.w	r3, r3, #15
 8001b74:	b2dc      	uxtb	r4, r3
			((clip3(accel_fs_sel) << ICM_ACCEL_CONFIG0_FS_POS)  & ICM_ACCEL_CONFIG0_FS_Msk);
 8001b76:	78fb      	ldrb	r3, [r7, #3]
 8001b78:	4618      	mov	r0, r3
 8001b7a:	f000 fa96 	bl	80020aa <clip3>
 8001b7e:	4603      	mov	r3, r0
 8001b80:	015b      	lsls	r3, r3, #5
 8001b82:	b2db      	uxtb	r3, r3
	uint8_t set =
 8001b84:	4323      	orrs	r3, r4
 8001b86:	73bb      	strb	r3, [r7, #14]

	uint8_t new_v = (uint8_t)((v & ~ICM_ACCEL_CONFIG0_WRITABLE_Msk) | set);
 8001b88:	7abb      	ldrb	r3, [r7, #10]
 8001b8a:	f003 0310 	and.w	r3, r3, #16
 8001b8e:	b2da      	uxtb	r2, r3
 8001b90:	7bbb      	ldrb	r3, [r7, #14]
 8001b92:	4313      	orrs	r3, r2
 8001b94:	b2db      	uxtb	r3, r3
 8001b96:	727b      	strb	r3, [r7, #9]

	if (new_v != v) {
 8001b98:	7a7a      	ldrb	r2, [r7, #9]
 8001b9a:	7abb      	ldrb	r3, [r7, #10]
 8001b9c:	429a      	cmp	r2, r3
 8001b9e:	d027      	beq.n	8001bf0 <icm_accel_config0+0xf4>
		st = HAL_I2C_Mem_Write(self->i2c, (self->addr7 << 1),
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	6818      	ldr	r0, [r3, #0]
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	791b      	ldrb	r3, [r3, #4]
 8001ba8:	005b      	lsls	r3, r3, #1
 8001baa:	b299      	uxth	r1, r3
 8001bac:	23c8      	movs	r3, #200	@ 0xc8
 8001bae:	9302      	str	r3, [sp, #8]
 8001bb0:	2301      	movs	r3, #1
 8001bb2:	9301      	str	r3, [sp, #4]
 8001bb4:	f107 0309 	add.w	r3, r7, #9
 8001bb8:	9300      	str	r3, [sp, #0]
 8001bba:	2301      	movs	r3, #1
 8001bbc:	2250      	movs	r2, #80	@ 0x50
 8001bbe:	f001 fdd9 	bl	8003774 <HAL_I2C_Mem_Write>
 8001bc2:	4603      	mov	r3, r0
 8001bc4:	73fb      	strb	r3, [r7, #15]
				ICM_ACCEL_CONFIG0_REG, I2C_MEMADD_SIZE_8BIT,
				&new_v, 1, 200);
		if (st != HAL_OK) {
 8001bc6:	7bfb      	ldrb	r3, [r7, #15]
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	d011      	beq.n	8001bf0 <icm_accel_config0+0xf4>
			self->last_hal_err = HAL_I2C_GetError(self->i2c);
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	4618      	mov	r0, r3
 8001bd2:	f001 fffd 	bl	8003bd0 <HAL_I2C_GetError>
 8001bd6:	4602      	mov	r2, r0
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	609a      	str	r2, [r3, #8]
			self->last_err = (st == HAL_TIMEOUT) ? ICM_ERR_TIMEOUT : ICM_ERR_I2C;
 8001bdc:	7bfb      	ldrb	r3, [r7, #15]
 8001bde:	2b03      	cmp	r3, #3
 8001be0:	d101      	bne.n	8001be6 <icm_accel_config0+0xea>
 8001be2:	2203      	movs	r2, #3
 8001be4:	e000      	b.n	8001be8 <icm_accel_config0+0xec>
 8001be6:	2202      	movs	r2, #2
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	715a      	strb	r2, [r3, #5]
			return st;
 8001bec:	7bfb      	ldrb	r3, [r7, #15]
 8001bee:	e09a      	b.n	8001d26 <icm_accel_config0+0x22a>
		}
	}

	// >>> ALWAYS derive effective settings
	uint8_t eff = (new_v != v) ? new_v : v;
 8001bf0:	7a7b      	ldrb	r3, [r7, #9]
 8001bf2:	737b      	strb	r3, [r7, #13]
	uint8_t fs_code  = (eff & ICM_ACCEL_CONFIG0_FS_Msk)  >> ICM_ACCEL_CONFIG0_FS_POS;
 8001bf4:	7b7b      	ldrb	r3, [r7, #13]
 8001bf6:	095b      	lsrs	r3, r3, #5
 8001bf8:	733b      	strb	r3, [r7, #12]
	uint8_t odr_code = (eff & ICM_ACCEL_CONFIG0_ODR_Msk) >> ICM_ACCEL_CONFIG0_ODR_POS;
 8001bfa:	7b7b      	ldrb	r3, [r7, #13]
 8001bfc:	f003 030f 	and.w	r3, r3, #15
 8001c00:	72fb      	strb	r3, [r7, #11]

	// FS -> LSB per g (assuming 00=±2g, 01=±4g, 10=±8g, 11=±16g)
	switch (fs_code & 0x3u) {
 8001c02:	7b3b      	ldrb	r3, [r7, #12]
 8001c04:	f003 0303 	and.w	r3, r3, #3
 8001c08:	2b03      	cmp	r3, #3
 8001c0a:	d81f      	bhi.n	8001c4c <icm_accel_config0+0x150>
 8001c0c:	a201      	add	r2, pc, #4	@ (adr r2, 8001c14 <icm_accel_config0+0x118>)
 8001c0e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001c12:	bf00      	nop
 8001c14:	08001c25 	.word	0x08001c25
 8001c18:	08001c2f 	.word	0x08001c2f
 8001c1c:	08001c39 	.word	0x08001c39
 8001c20:	08001c43 	.word	0x08001c43
	case 0: self->accel_lsb_per_g = 2048.0f;  break; // ±16g
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	f04f 428a 	mov.w	r2, #1157627904	@ 0x45000000
 8001c2a:	639a      	str	r2, [r3, #56]	@ 0x38
 8001c2c:	e00e      	b.n	8001c4c <icm_accel_config0+0x150>
	case 1: self->accel_lsb_per_g = 4096.0f;  break; // ±8g
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	f04f 428b 	mov.w	r2, #1166016512	@ 0x45800000
 8001c34:	639a      	str	r2, [r3, #56]	@ 0x38
 8001c36:	e009      	b.n	8001c4c <icm_accel_config0+0x150>
	case 2: self->accel_lsb_per_g = 8192.0f;  break; // ±4g
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	f04f 428c 	mov.w	r2, #1174405120	@ 0x46000000
 8001c3e:	639a      	str	r2, [r3, #56]	@ 0x38
 8001c40:	e004      	b.n	8001c4c <icm_accel_config0+0x150>
	case 3: self->accel_lsb_per_g = 16384.0f; break; // ±2g
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	f04f 428d 	mov.w	r2, #1182793728	@ 0x46800000
 8001c48:	639a      	str	r2, [r3, #56]	@ 0x38
 8001c4a:	bf00      	nop
	}

	// ODR code -> Hz
	switch (odr_code & 0xFu) {
 8001c4c:	7afb      	ldrb	r3, [r7, #11]
 8001c4e:	f003 030f 	and.w	r3, r3, #15
 8001c52:	3b01      	subs	r3, #1
 8001c54:	2b0e      	cmp	r3, #14
 8001c56:	d85d      	bhi.n	8001d14 <icm_accel_config0+0x218>
 8001c58:	a201      	add	r2, pc, #4	@ (adr r2, 8001c60 <icm_accel_config0+0x164>)
 8001c5a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001c5e:	bf00      	nop
 8001c60:	08001c9d 	.word	0x08001c9d
 8001c64:	08001ca5 	.word	0x08001ca5
 8001c68:	08001cad 	.word	0x08001cad
 8001c6c:	08001cb5 	.word	0x08001cb5
 8001c70:	08001cbd 	.word	0x08001cbd
 8001c74:	08001cc5 	.word	0x08001cc5
 8001c78:	08001ccd 	.word	0x08001ccd
 8001c7c:	08001cd5 	.word	0x08001cd5
 8001c80:	08001cdd 	.word	0x08001cdd
 8001c84:	08001ce5 	.word	0x08001ce5
 8001c88:	08001ced 	.word	0x08001ced
 8001c8c:	08001cf5 	.word	0x08001cf5
 8001c90:	08001cfd 	.word	0x08001cfd
 8001c94:	08001d05 	.word	0x08001d05
 8001c98:	08001d0d 	.word	0x08001d0d
	case 1:  self->accel_odr = 32000.0f; break;
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	4a24      	ldr	r2, [pc, #144]	@ (8001d30 <icm_accel_config0+0x234>)
 8001ca0:	645a      	str	r2, [r3, #68]	@ 0x44
 8001ca2:	e03c      	b.n	8001d1e <icm_accel_config0+0x222>
	case 2:  self->accel_odr = 16000.0f; break;
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	4a23      	ldr	r2, [pc, #140]	@ (8001d34 <icm_accel_config0+0x238>)
 8001ca8:	645a      	str	r2, [r3, #68]	@ 0x44
 8001caa:	e038      	b.n	8001d1e <icm_accel_config0+0x222>
	case 3:  self->accel_odr = 8000.0f;  break;
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	4a22      	ldr	r2, [pc, #136]	@ (8001d38 <icm_accel_config0+0x23c>)
 8001cb0:	645a      	str	r2, [r3, #68]	@ 0x44
 8001cb2:	e034      	b.n	8001d1e <icm_accel_config0+0x222>
	case 4:  self->accel_odr = 4000.0f;  break;
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	4a21      	ldr	r2, [pc, #132]	@ (8001d3c <icm_accel_config0+0x240>)
 8001cb8:	645a      	str	r2, [r3, #68]	@ 0x44
 8001cba:	e030      	b.n	8001d1e <icm_accel_config0+0x222>
	case 5:  self->accel_odr = 2000.0f;  break;
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	4a20      	ldr	r2, [pc, #128]	@ (8001d40 <icm_accel_config0+0x244>)
 8001cc0:	645a      	str	r2, [r3, #68]	@ 0x44
 8001cc2:	e02c      	b.n	8001d1e <icm_accel_config0+0x222>
	case 6:  self->accel_odr = 1000.0f;  break; // reset default
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	4a1f      	ldr	r2, [pc, #124]	@ (8001d44 <icm_accel_config0+0x248>)
 8001cc8:	645a      	str	r2, [r3, #68]	@ 0x44
 8001cca:	e028      	b.n	8001d1e <icm_accel_config0+0x222>
	case 7:  self->accel_odr = 200.0f;   break;
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	4a1e      	ldr	r2, [pc, #120]	@ (8001d48 <icm_accel_config0+0x24c>)
 8001cd0:	645a      	str	r2, [r3, #68]	@ 0x44
 8001cd2:	e024      	b.n	8001d1e <icm_accel_config0+0x222>
	case 8:  self->accel_odr = 100.0f;   break;
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	4a1d      	ldr	r2, [pc, #116]	@ (8001d4c <icm_accel_config0+0x250>)
 8001cd8:	645a      	str	r2, [r3, #68]	@ 0x44
 8001cda:	e020      	b.n	8001d1e <icm_accel_config0+0x222>
	case 9:  self->accel_odr = 50.0f;    break;
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	4a1c      	ldr	r2, [pc, #112]	@ (8001d50 <icm_accel_config0+0x254>)
 8001ce0:	645a      	str	r2, [r3, #68]	@ 0x44
 8001ce2:	e01c      	b.n	8001d1e <icm_accel_config0+0x222>
	case 10: self->accel_odr = 25.0f;    break;
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	4a1b      	ldr	r2, [pc, #108]	@ (8001d54 <icm_accel_config0+0x258>)
 8001ce8:	645a      	str	r2, [r3, #68]	@ 0x44
 8001cea:	e018      	b.n	8001d1e <icm_accel_config0+0x222>
	case 11: self->accel_odr = 12.5f;    break;
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	4a1a      	ldr	r2, [pc, #104]	@ (8001d58 <icm_accel_config0+0x25c>)
 8001cf0:	645a      	str	r2, [r3, #68]	@ 0x44
 8001cf2:	e014      	b.n	8001d1e <icm_accel_config0+0x222>
	case 12: self->accel_odr = 6.25f;    break;
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	4a19      	ldr	r2, [pc, #100]	@ (8001d5c <icm_accel_config0+0x260>)
 8001cf8:	645a      	str	r2, [r3, #68]	@ 0x44
 8001cfa:	e010      	b.n	8001d1e <icm_accel_config0+0x222>
	case 13: self->accel_odr = 3.125f;   break;
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	4a18      	ldr	r2, [pc, #96]	@ (8001d60 <icm_accel_config0+0x264>)
 8001d00:	645a      	str	r2, [r3, #68]	@ 0x44
 8001d02:	e00c      	b.n	8001d1e <icm_accel_config0+0x222>
	case 14: self->accel_odr = 1.5625f;  break;
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	4a17      	ldr	r2, [pc, #92]	@ (8001d64 <icm_accel_config0+0x268>)
 8001d08:	645a      	str	r2, [r3, #68]	@ 0x44
 8001d0a:	e008      	b.n	8001d1e <icm_accel_config0+0x222>
	case 15: self->accel_odr = 500.0f;   break;
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	4a16      	ldr	r2, [pc, #88]	@ (8001d68 <icm_accel_config0+0x26c>)
 8001d10:	645a      	str	r2, [r3, #68]	@ 0x44
 8001d12:	e004      	b.n	8001d1e <icm_accel_config0+0x222>
	default: self->accel_odr = 0.0f;     break;
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	f04f 0200 	mov.w	r2, #0
 8001d1a:	645a      	str	r2, [r3, #68]	@ 0x44
 8001d1c:	bf00      	nop
	}

	self->last_err = ICM_OK;
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	2200      	movs	r2, #0
 8001d22:	715a      	strb	r2, [r3, #5]
	return HAL_OK;
 8001d24:	2300      	movs	r3, #0
}
 8001d26:	4618      	mov	r0, r3
 8001d28:	3714      	adds	r7, #20
 8001d2a:	46bd      	mov	sp, r7
 8001d2c:	bd90      	pop	{r4, r7, pc}
 8001d2e:	bf00      	nop
 8001d30:	46fa0000 	.word	0x46fa0000
 8001d34:	467a0000 	.word	0x467a0000
 8001d38:	45fa0000 	.word	0x45fa0000
 8001d3c:	457a0000 	.word	0x457a0000
 8001d40:	44fa0000 	.word	0x44fa0000
 8001d44:	447a0000 	.word	0x447a0000
 8001d48:	43480000 	.word	0x43480000
 8001d4c:	42c80000 	.word	0x42c80000
 8001d50:	42480000 	.word	0x42480000
 8001d54:	41c80000 	.word	0x41c80000
 8001d58:	41480000 	.word	0x41480000
 8001d5c:	40c80000 	.word	0x40c80000
 8001d60:	40480000 	.word	0x40480000
 8001d64:	3fc80000 	.word	0x3fc80000
 8001d68:	43fa0000 	.word	0x43fa0000

08001d6c <icm_soft_reset>:

static HAL_StatusTypeDef icm_soft_reset(icm42688_t *s)
{
 8001d6c:	b580      	push	{r7, lr}
 8001d6e:	b088      	sub	sp, #32
 8001d70:	af04      	add	r7, sp, #16
 8001d72:	6078      	str	r0, [r7, #4]
	if (!s) return HAL_ERROR;
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	d101      	bne.n	8001d7e <icm_soft_reset+0x12>
 8001d7a:	2301      	movs	r3, #1
 8001d7c:	e060      	b.n	8001e40 <icm_soft_reset+0xd4>

	uint8_t cmd = ICM_SOFT_RESET_Msk;                 // write-one-to-reset
 8001d7e:	2301      	movs	r3, #1
 8001d80:	73bb      	strb	r3, [r7, #14]
	HAL_StatusTypeDef st = HAL_I2C_Mem_Write(s->i2c, (s->addr7 << 1),
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	6818      	ldr	r0, [r3, #0]
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	791b      	ldrb	r3, [r3, #4]
 8001d8a:	005b      	lsls	r3, r3, #1
 8001d8c:	b299      	uxth	r1, r3
 8001d8e:	23c8      	movs	r3, #200	@ 0xc8
 8001d90:	9302      	str	r3, [sp, #8]
 8001d92:	2301      	movs	r3, #1
 8001d94:	9301      	str	r3, [sp, #4]
 8001d96:	f107 030e 	add.w	r3, r7, #14
 8001d9a:	9300      	str	r3, [sp, #0]
 8001d9c:	2301      	movs	r3, #1
 8001d9e:	2211      	movs	r2, #17
 8001da0:	f001 fce8 	bl	8003774 <HAL_I2C_Mem_Write>
 8001da4:	4603      	mov	r3, r0
 8001da6:	73fb      	strb	r3, [r7, #15]
			ICM_SOFT_RESET_REG, I2C_MEMADD_SIZE_8BIT,
			&cmd, 1, 200);
	if (st != HAL_OK) {
 8001da8:	7bfb      	ldrb	r3, [r7, #15]
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d011      	beq.n	8001dd2 <icm_soft_reset+0x66>
		s->last_hal_err = HAL_I2C_GetError(s->i2c);
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	4618      	mov	r0, r3
 8001db4:	f001 ff0c 	bl	8003bd0 <HAL_I2C_GetError>
 8001db8:	4602      	mov	r2, r0
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	609a      	str	r2, [r3, #8]
		s->last_err = (st == HAL_TIMEOUT) ? ICM_ERR_TIMEOUT : ICM_ERR_I2C;
 8001dbe:	7bfb      	ldrb	r3, [r7, #15]
 8001dc0:	2b03      	cmp	r3, #3
 8001dc2:	d101      	bne.n	8001dc8 <icm_soft_reset+0x5c>
 8001dc4:	2203      	movs	r2, #3
 8001dc6:	e000      	b.n	8001dca <icm_soft_reset+0x5e>
 8001dc8:	2202      	movs	r2, #2
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	715a      	strb	r2, [r3, #5]
		return st;
 8001dce:	7bfb      	ldrb	r3, [r7, #15]
 8001dd0:	e036      	b.n	8001e40 <icm_soft_reset+0xd4>
	}

	// Give the device time to reboot and reload defaults.
	// Typical is a few ms; be conservative.
	HAL_Delay(10);
 8001dd2:	200a      	movs	r0, #10
 8001dd4:	f001 f8dc 	bl	8002f90 <HAL_Delay>

	// Optional: verify reset by reading a known reset-value register
	// (e.g., WHO_AM_I or checking PWR_MGMT0 returned to its reset state).
	uint8_t who = 0;
 8001dd8:	2300      	movs	r3, #0
 8001dda:	737b      	strb	r3, [r7, #13]
	st = HAL_I2C_Mem_Read(s->i2c, (s->addr7 << 1), ICM_WHO_AM_I_REG,
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	6818      	ldr	r0, [r3, #0]
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	791b      	ldrb	r3, [r3, #4]
 8001de4:	005b      	lsls	r3, r3, #1
 8001de6:	b299      	uxth	r1, r3
 8001de8:	23c8      	movs	r3, #200	@ 0xc8
 8001dea:	9302      	str	r3, [sp, #8]
 8001dec:	2301      	movs	r3, #1
 8001dee:	9301      	str	r3, [sp, #4]
 8001df0:	f107 030d 	add.w	r3, r7, #13
 8001df4:	9300      	str	r3, [sp, #0]
 8001df6:	2301      	movs	r3, #1
 8001df8:	2275      	movs	r2, #117	@ 0x75
 8001dfa:	f001 fdcf 	bl	800399c <HAL_I2C_Mem_Read>
 8001dfe:	4603      	mov	r3, r0
 8001e00:	73fb      	strb	r3, [r7, #15]
			I2C_MEMADD_SIZE_8BIT, &who, 1, 200);
	if (st != HAL_OK || who != ICM_WHO_AM_I_DEFAULT) {
 8001e02:	7bfb      	ldrb	r3, [r7, #15]
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	d102      	bne.n	8001e0e <icm_soft_reset+0xa2>
 8001e08:	7b7b      	ldrb	r3, [r7, #13]
 8001e0a:	2b47      	cmp	r3, #71	@ 0x47
 8001e0c:	d014      	beq.n	8001e38 <icm_soft_reset+0xcc>
		s->last_hal_err = HAL_I2C_GetError(s->i2c);
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	4618      	mov	r0, r3
 8001e14:	f001 fedc 	bl	8003bd0 <HAL_I2C_GetError>
 8001e18:	4602      	mov	r2, r0
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	609a      	str	r2, [r3, #8]
		s->last_err = ICM_ERR_WHOAMI_MISMATCH;
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	2204      	movs	r2, #4
 8001e22:	715a      	strb	r2, [r3, #5]
		s->last_whoami = who;
 8001e24:	7b7a      	ldrb	r2, [r7, #13]
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	731a      	strb	r2, [r3, #12]
		return (st != HAL_OK) ? st : HAL_ERROR;
 8001e2a:	7bfb      	ldrb	r3, [r7, #15]
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	d001      	beq.n	8001e34 <icm_soft_reset+0xc8>
 8001e30:	7bfb      	ldrb	r3, [r7, #15]
 8001e32:	e005      	b.n	8001e40 <icm_soft_reset+0xd4>
 8001e34:	2301      	movs	r3, #1
 8001e36:	e003      	b.n	8001e40 <icm_soft_reset+0xd4>
	}

	s->last_err = ICM_OK;
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	2200      	movs	r2, #0
 8001e3c:	715a      	strb	r2, [r3, #5]
	return HAL_OK;
 8001e3e:	2300      	movs	r3, #0
}
 8001e40:	4618      	mov	r0, r3
 8001e42:	3710      	adds	r7, #16
 8001e44:	46bd      	mov	sp, r7
 8001e46:	bd80      	pop	{r7, pc}

08001e48 <icm_read_all_raw>:
	self->gyro_dps[2] = self->gyro_raw[2] / scale;
	return HAL_OK;
}

// Read TEMP(2) + ACCEL(6) + GYRO(6) in one shot: 0x1D..0x2A (14 bytes)
static HAL_StatusTypeDef icm_read_all_raw(icm42688_t *self) {
 8001e48:	b580      	push	{r7, lr}
 8001e4a:	b088      	sub	sp, #32
 8001e4c:	af02      	add	r7, sp, #8
 8001e4e:	6078      	str	r0, [r7, #4]
	if (!self) return HAL_ERROR;
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d101      	bne.n	8001e5a <icm_read_all_raw+0x12>
 8001e56:	2301      	movs	r3, #1
 8001e58:	e06b      	b.n	8001f32 <icm_read_all_raw+0xea>

	uint8_t raw[14];

	HAL_StatusTypeDef st = rd(self->i2c, self->addr7, ICM_TEMP_MSB, raw, 14);
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	6818      	ldr	r0, [r3, #0]
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	7919      	ldrb	r1, [r3, #4]
 8001e62:	f107 0308 	add.w	r3, r7, #8
 8001e66:	220e      	movs	r2, #14
 8001e68:	9200      	str	r2, [sp, #0]
 8001e6a:	221d      	movs	r2, #29
 8001e6c:	f000 f8f0 	bl	8002050 <rd>
 8001e70:	4603      	mov	r3, r0
 8001e72:	75fb      	strb	r3, [r7, #23]
	if (st != HAL_OK) {
 8001e74:	7dfb      	ldrb	r3, [r7, #23]
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d011      	beq.n	8001e9e <icm_read_all_raw+0x56>
		self->last_hal_err = HAL_I2C_GetError(self->i2c);
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	4618      	mov	r0, r3
 8001e80:	f001 fea6 	bl	8003bd0 <HAL_I2C_GetError>
 8001e84:	4602      	mov	r2, r0
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	609a      	str	r2, [r3, #8]
		self->last_err = (st == HAL_TIMEOUT) ? ICM_ERR_TIMEOUT : ICM_ERR_I2C;
 8001e8a:	7dfb      	ldrb	r3, [r7, #23]
 8001e8c:	2b03      	cmp	r3, #3
 8001e8e:	d101      	bne.n	8001e94 <icm_read_all_raw+0x4c>
 8001e90:	2203      	movs	r2, #3
 8001e92:	e000      	b.n	8001e96 <icm_read_all_raw+0x4e>
 8001e94:	2202      	movs	r2, #2
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	715a      	strb	r2, [r3, #5]
		return st;
 8001e9a:	7dfb      	ldrb	r3, [r7, #23]
 8001e9c:	e049      	b.n	8001f32 <icm_read_all_raw+0xea>
	}

	// index map: 0..1 Temp, 2..3 Ax, 4..5 Ay, 6..7 Az, 8..9 Gx, 10..11 Gy, 12..13 Gz
	self->temp_raw     = (int16_t)((raw[0]  << 8) | raw[1]);
 8001e9e:	7a3b      	ldrb	r3, [r7, #8]
 8001ea0:	b21b      	sxth	r3, r3
 8001ea2:	021b      	lsls	r3, r3, #8
 8001ea4:	b21a      	sxth	r2, r3
 8001ea6:	7a7b      	ldrb	r3, [r7, #9]
 8001ea8:	b21b      	sxth	r3, r3
 8001eaa:	4313      	orrs	r3, r2
 8001eac:	b21a      	sxth	r2, r3
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	81da      	strh	r2, [r3, #14]
	self->accel_raw[0] = (int16_t)((raw[2]  << 8) | raw[3]);
 8001eb2:	7abb      	ldrb	r3, [r7, #10]
 8001eb4:	b21b      	sxth	r3, r3
 8001eb6:	021b      	lsls	r3, r3, #8
 8001eb8:	b21a      	sxth	r2, r3
 8001eba:	7afb      	ldrb	r3, [r7, #11]
 8001ebc:	b21b      	sxth	r3, r3
 8001ebe:	4313      	orrs	r3, r2
 8001ec0:	b21a      	sxth	r2, r3
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	821a      	strh	r2, [r3, #16]
	self->accel_raw[1] = (int16_t)((raw[4]  << 8) | raw[5]);
 8001ec6:	7b3b      	ldrb	r3, [r7, #12]
 8001ec8:	b21b      	sxth	r3, r3
 8001eca:	021b      	lsls	r3, r3, #8
 8001ecc:	b21a      	sxth	r2, r3
 8001ece:	7b7b      	ldrb	r3, [r7, #13]
 8001ed0:	b21b      	sxth	r3, r3
 8001ed2:	4313      	orrs	r3, r2
 8001ed4:	b21a      	sxth	r2, r3
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	825a      	strh	r2, [r3, #18]
	self->accel_raw[2] = (int16_t)((raw[6]  << 8) | raw[7]);
 8001eda:	7bbb      	ldrb	r3, [r7, #14]
 8001edc:	b21b      	sxth	r3, r3
 8001ede:	021b      	lsls	r3, r3, #8
 8001ee0:	b21a      	sxth	r2, r3
 8001ee2:	7bfb      	ldrb	r3, [r7, #15]
 8001ee4:	b21b      	sxth	r3, r3
 8001ee6:	4313      	orrs	r3, r2
 8001ee8:	b21a      	sxth	r2, r3
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	829a      	strh	r2, [r3, #20]
	self->gyro_raw[0]  = (int16_t)((raw[8]  << 8) | raw[9]);
 8001eee:	7c3b      	ldrb	r3, [r7, #16]
 8001ef0:	b21b      	sxth	r3, r3
 8001ef2:	021b      	lsls	r3, r3, #8
 8001ef4:	b21a      	sxth	r2, r3
 8001ef6:	7c7b      	ldrb	r3, [r7, #17]
 8001ef8:	b21b      	sxth	r3, r3
 8001efa:	4313      	orrs	r3, r2
 8001efc:	b21a      	sxth	r2, r3
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	82da      	strh	r2, [r3, #22]
	self->gyro_raw[1]  = (int16_t)((raw[10] << 8) | raw[11]);
 8001f02:	7cbb      	ldrb	r3, [r7, #18]
 8001f04:	b21b      	sxth	r3, r3
 8001f06:	021b      	lsls	r3, r3, #8
 8001f08:	b21a      	sxth	r2, r3
 8001f0a:	7cfb      	ldrb	r3, [r7, #19]
 8001f0c:	b21b      	sxth	r3, r3
 8001f0e:	4313      	orrs	r3, r2
 8001f10:	b21a      	sxth	r2, r3
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	831a      	strh	r2, [r3, #24]
	self->gyro_raw[2]  = (int16_t)((raw[12] << 8) | raw[13]);
 8001f16:	7d3b      	ldrb	r3, [r7, #20]
 8001f18:	b21b      	sxth	r3, r3
 8001f1a:	021b      	lsls	r3, r3, #8
 8001f1c:	b21a      	sxth	r2, r3
 8001f1e:	7d7b      	ldrb	r3, [r7, #21]
 8001f20:	b21b      	sxth	r3, r3
 8001f22:	4313      	orrs	r3, r2
 8001f24:	b21a      	sxth	r2, r3
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	835a      	strh	r2, [r3, #26]

	self->last_err = ICM_OK;
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	2200      	movs	r2, #0
 8001f2e:	715a      	strb	r2, [r3, #5]
	return HAL_OK;
 8001f30:	2300      	movs	r3, #0
}
 8001f32:	4618      	mov	r0, r3
 8001f34:	3718      	adds	r7, #24
 8001f36:	46bd      	mov	sp, r7
 8001f38:	bd80      	pop	{r7, pc}
	...

08001f3c <icm_read_all>:

// Convert everything: raw → °C, g, dps (uses configured scale factors)
static HAL_StatusTypeDef icm_read_all(icm42688_t *self) {
 8001f3c:	b580      	push	{r7, lr}
 8001f3e:	b086      	sub	sp, #24
 8001f40:	af00      	add	r7, sp, #0
 8001f42:	6078      	str	r0, [r7, #4]
	if (!self) return HAL_ERROR;
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d101      	bne.n	8001f4e <icm_read_all+0x12>
 8001f4a:	2301      	movs	r3, #1
 8001f4c:	e079      	b.n	8002042 <icm_read_all+0x106>

	HAL_StatusTypeDef st = icm_read_all_raw(self);
 8001f4e:	6878      	ldr	r0, [r7, #4]
 8001f50:	f7ff ff7a 	bl	8001e48 <icm_read_all_raw>
 8001f54:	4603      	mov	r3, r0
 8001f56:	75fb      	strb	r3, [r7, #23]
	if (st != HAL_OK) return st;
 8001f58:	7dfb      	ldrb	r3, [r7, #23]
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d001      	beq.n	8001f62 <icm_read_all+0x26>
 8001f5e:	7dfb      	ldrb	r3, [r7, #23]
 8001f60:	e06f      	b.n	8002042 <icm_read_all+0x106>

	// Temperature
	self->last_temp_c = (self->temp_raw / ICM_TEMP_SENS_LSB_PER_C) + ICM_TEMP_OFFSET_C;
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8001f68:	ee07 3a90 	vmov	s15, r3
 8001f6c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001f70:	eddf 6a36 	vldr	s13, [pc, #216]	@ 800204c <icm_read_all+0x110>
 8001f74:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001f78:	eeb3 7a09 	vmov.f32	s14, #57	@ 0x41c80000  25.0
 8001f7c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	edc3 7a07 	vstr	s15, [r3, #28]

	// Scales: guard against zero if config wasn’t called for some reason
	const float a_scale = self->accel_lsb_per_g;
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001f8a:	613b      	str	r3, [r7, #16]
	const float g_scale = self->gyro_lsb_per_dps;
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001f90:	60fb      	str	r3, [r7, #12]

	// Accel
	self->accel_g[0] = self->accel_raw[0] / a_scale;
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8001f98:	ee07 3a90 	vmov	s15, r3
 8001f9c:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001fa0:	ed97 7a04 	vldr	s14, [r7, #16]
 8001fa4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	edc3 7a08 	vstr	s15, [r3, #32]
	self->accel_g[1] = self->accel_raw[1] / a_scale;
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 8001fb4:	ee07 3a90 	vmov	s15, r3
 8001fb8:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001fbc:	ed97 7a04 	vldr	s14, [r7, #16]
 8001fc0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24
	self->accel_g[2] = self->accel_raw[2] / a_scale;
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8001fd0:	ee07 3a90 	vmov	s15, r3
 8001fd4:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001fd8:	ed97 7a04 	vldr	s14, [r7, #16]
 8001fdc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	edc3 7a0a 	vstr	s15, [r3, #40]	@ 0x28

	// Gyro
	self->gyro_dps[0] = self->gyro_raw[0] / g_scale;
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 8001fec:	ee07 3a90 	vmov	s15, r3
 8001ff0:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001ff4:	ed97 7a03 	vldr	s14, [r7, #12]
 8001ff8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	edc3 7a0b 	vstr	s15, [r3, #44]	@ 0x2c
	self->gyro_dps[1] = self->gyro_raw[1] / g_scale;
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	f9b3 3018 	ldrsh.w	r3, [r3, #24]
 8002008:	ee07 3a90 	vmov	s15, r3
 800200c:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8002010:	ed97 7a03 	vldr	s14, [r7, #12]
 8002014:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	edc3 7a0c 	vstr	s15, [r3, #48]	@ 0x30
	self->gyro_dps[2] = self->gyro_raw[2] / g_scale;
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	f9b3 301a 	ldrsh.w	r3, [r3, #26]
 8002024:	ee07 3a90 	vmov	s15, r3
 8002028:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800202c:	ed97 7a03 	vldr	s14, [r7, #12]
 8002030:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	edc3 7a0d 	vstr	s15, [r3, #52]	@ 0x34

	self->last_err = ICM_OK;
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	2200      	movs	r2, #0
 800203e:	715a      	strb	r2, [r3, #5]
	return HAL_OK;
 8002040:	2300      	movs	r3, #0
}
 8002042:	4618      	mov	r0, r3
 8002044:	3718      	adds	r7, #24
 8002046:	46bd      	mov	sp, r7
 8002048:	bd80      	pop	{r7, pc}
 800204a:	bf00      	nop
 800204c:	43047ae1 	.word	0x43047ae1

08002050 <rd>:
 * buf/n: output buffer & length.
 * 200: timeout in ms.
 * Returns HAL_OK/HAL_ERROR/HAL_BUSY/HAL_TIMEOUT.
 * Why shift? STM32 HAL HAL_I2C_* expects the address in “left-shifted 8-bit” form (R/W bit in bit0). Passing raw 7-bit without shifting will fail.
 */
static HAL_StatusTypeDef rd(I2C_HandleTypeDef *i2c, uint8_t a7, uint8_t reg, uint8_t *buf, uint16_t bufferSize) {
 8002050:	b580      	push	{r7, lr}
 8002052:	b088      	sub	sp, #32
 8002054:	af04      	add	r7, sp, #16
 8002056:	60f8      	str	r0, [r7, #12]
 8002058:	607b      	str	r3, [r7, #4]
 800205a:	460b      	mov	r3, r1
 800205c:	72fb      	strb	r3, [r7, #11]
 800205e:	4613      	mov	r3, r2
 8002060:	72bb      	strb	r3, [r7, #10]
	return HAL_I2C_Mem_Read(i2c, (a7 << 1), reg, I2C_MEMADD_SIZE_8BIT, buf, bufferSize, 200);
 8002062:	7afb      	ldrb	r3, [r7, #11]
 8002064:	b29b      	uxth	r3, r3
 8002066:	005b      	lsls	r3, r3, #1
 8002068:	b299      	uxth	r1, r3
 800206a:	7abb      	ldrb	r3, [r7, #10]
 800206c:	b29a      	uxth	r2, r3
 800206e:	23c8      	movs	r3, #200	@ 0xc8
 8002070:	9302      	str	r3, [sp, #8]
 8002072:	8b3b      	ldrh	r3, [r7, #24]
 8002074:	9301      	str	r3, [sp, #4]
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	9300      	str	r3, [sp, #0]
 800207a:	2301      	movs	r3, #1
 800207c:	68f8      	ldr	r0, [r7, #12]
 800207e:	f001 fc8d 	bl	800399c <HAL_I2C_Mem_Read>
 8002082:	4603      	mov	r3, r0
}
 8002084:	4618      	mov	r0, r3
 8002086:	3710      	adds	r7, #16
 8002088:	46bd      	mov	sp, r7
 800208a:	bd80      	pop	{r7, pc}

0800208c <clip2>:

static HAL_StatusTypeDef wr1(I2C_HandleTypeDef *i2c, uint8_t a7, uint8_t reg, uint8_t val) {
	return HAL_I2C_Mem_Write(i2c, (a7 << 1), reg, I2C_MEMADD_SIZE_8BIT, &val, 1, 200);
}

static inline uint8_t clip2(uint8_t x)	{ return (uint8_t)(x & 0x03u);	} // 2-bit
 800208c:	b480      	push	{r7}
 800208e:	b083      	sub	sp, #12
 8002090:	af00      	add	r7, sp, #0
 8002092:	4603      	mov	r3, r0
 8002094:	71fb      	strb	r3, [r7, #7]
 8002096:	79fb      	ldrb	r3, [r7, #7]
 8002098:	f003 0303 	and.w	r3, r3, #3
 800209c:	b2db      	uxtb	r3, r3
 800209e:	4618      	mov	r0, r3
 80020a0:	370c      	adds	r7, #12
 80020a2:	46bd      	mov	sp, r7
 80020a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a8:	4770      	bx	lr

080020aa <clip3>:
static inline uint8_t clip3(uint8_t x) 	{ return (uint8_t)(x & 0x07u); 	} // 3-bit
 80020aa:	b480      	push	{r7}
 80020ac:	b083      	sub	sp, #12
 80020ae:	af00      	add	r7, sp, #0
 80020b0:	4603      	mov	r3, r0
 80020b2:	71fb      	strb	r3, [r7, #7]
 80020b4:	79fb      	ldrb	r3, [r7, #7]
 80020b6:	f003 0307 	and.w	r3, r3, #7
 80020ba:	b2db      	uxtb	r3, r3
 80020bc:	4618      	mov	r0, r3
 80020be:	370c      	adds	r7, #12
 80020c0:	46bd      	mov	sp, r7
 80020c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c6:	4770      	bx	lr

080020c8 <clip4>:
static inline uint8_t clip4(uint8_t x) 	{ return (uint8_t)(x & 0x0Fu); 	} // 4-bit
 80020c8:	b480      	push	{r7}
 80020ca:	b083      	sub	sp, #12
 80020cc:	af00      	add	r7, sp, #0
 80020ce:	4603      	mov	r3, r0
 80020d0:	71fb      	strb	r3, [r7, #7]
 80020d2:	79fb      	ldrb	r3, [r7, #7]
 80020d4:	f003 030f 	and.w	r3, r3, #15
 80020d8:	b2db      	uxtb	r3, r3
 80020da:	4618      	mov	r0, r3
 80020dc:	370c      	adds	r7, #12
 80020de:	46bd      	mov	sp, r7
 80020e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e4:	4770      	bx	lr

080020e6 <getSelfStatePointer>:

static icm42688_t* getSelfStatePointer(sensor_if_t *self) {
 80020e6:	b480      	push	{r7}
 80020e8:	b083      	sub	sp, #12
 80020ea:	af00      	add	r7, sp, #0
 80020ec:	6078      	str	r0, [r7, #4]
	if (!self || !self->state) return NULL;
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	d003      	beq.n	80020fc <getSelfStatePointer+0x16>
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	685b      	ldr	r3, [r3, #4]
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d101      	bne.n	8002100 <getSelfStatePointer+0x1a>
 80020fc:	2300      	movs	r3, #0
 80020fe:	e001      	b.n	8002104 <getSelfStatePointer+0x1e>
	return (icm42688_t*)self->state;
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	685b      	ldr	r3, [r3, #4]
}
 8002104:	4618      	mov	r0, r3
 8002106:	370c      	adds	r7, #12
 8002108:	46bd      	mov	sp, r7
 800210a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800210e:	4770      	bx	lr

08002110 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8002110:	b580      	push	{r7, lr}
 8002112:	b082      	sub	sp, #8
 8002114:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN 1 */

	/* USER CODE END 1 */

	/* MPU Configuration--------------------------------------------------------*/
	MPU_Config();
 8002116:	f000 fb15 	bl	8002744 <MPU_Config>

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 800211a:	f000 fea7 	bl	8002e6c <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 800211e:	f000 f907 	bl	8002330 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8002122:	f000 fa87 	bl	8002634 <MX_GPIO_Init>
	MX_I2C1_Init();
 8002126:	f000 f96d 	bl	8002404 <MX_I2C1_Init>
	MX_USART3_UART_Init();
 800212a:	f000 f9eb 	bl	8002504 <MX_USART3_UART_Init>
	MX_I2C2_Init();
 800212e:	f000 f9a9 	bl	8002484 <MX_I2C2_Init>
	MX_USART6_UART_Init();
 8002132:	f000 fa33 	bl	800259c <MX_USART6_UART_Init>
	/* USER CODE BEGIN 2 */
	setvbuf(stdout, NULL, _IONBF, 0);
 8002136:	4b67      	ldr	r3, [pc, #412]	@ (80022d4 <main+0x1c4>)
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	6898      	ldr	r0, [r3, #8]
 800213c:	2300      	movs	r3, #0
 800213e:	2202      	movs	r2, #2
 8002140:	2100      	movs	r1, #0
 8002142:	f007 f855 	bl	80091f0 <setvbuf>
	printf("BOOT\r\n");
 8002146:	4864      	ldr	r0, [pc, #400]	@ (80022d8 <main+0x1c8>)
 8002148:	f007 f84a 	bl	80091e0 <puts>

	HAL_Delay(50);   // let sensors power up
 800214c:	2032      	movs	r0, #50	@ 0x32
 800214e:	f000 ff1f 	bl	8002f90 <HAL_Delay>
	// Optional quick sanity scan
	// I2C_Scan(&hi2c1);
	// I2C_Scan(&hi2c2);

	// Bind drivers to their buses/addresses (adjust to your wiring)
	dps310_bind(&if_dps, &dps, &hi2c2, DPS_I2C_ADDRESS);  // 0x77 by default, 0x76 if SDO low
 8002152:	2377      	movs	r3, #119	@ 0x77
 8002154:	4a61      	ldr	r2, [pc, #388]	@ (80022dc <main+0x1cc>)
 8002156:	4962      	ldr	r1, [pc, #392]	@ (80022e0 <main+0x1d0>)
 8002158:	4862      	ldr	r0, [pc, #392]	@ (80022e4 <main+0x1d4>)
 800215a:	f7fe fbd7 	bl	800090c <dps310_bind>
	icm42688_bind(&if_icm, &icm, &hi2c1, ICM_ADDR_7B);  // 0x68 or 0x69 depending on AD0
 800215e:	2368      	movs	r3, #104	@ 0x68
 8002160:	4a61      	ldr	r2, [pc, #388]	@ (80022e8 <main+0x1d8>)
 8002162:	4962      	ldr	r1, [pc, #392]	@ (80022ec <main+0x1dc>)
 8002164:	4862      	ldr	r0, [pc, #392]	@ (80022f0 <main+0x1e0>)
 8002166:	f7ff fac5 	bl	80016f4 <icm42688_bind>
	gps6m_bind(&if_gps, &gps, &huart6);
 800216a:	4a62      	ldr	r2, [pc, #392]	@ (80022f4 <main+0x1e4>)
 800216c:	4962      	ldr	r1, [pc, #392]	@ (80022f8 <main+0x1e8>)
 800216e:	4863      	ldr	r0, [pc, #396]	@ (80022fc <main+0x1ec>)
 8002170:	f7ff f9be 	bl	80014f0 <gps6m_bind>

	HAL_GPIO_WritePin(Red_LED_GPIO_Port, Red_LED_Pin, GPIO_PIN_SET);
 8002174:	2201      	movs	r2, #1
 8002176:	2102      	movs	r1, #2
 8002178:	4861      	ldr	r0, [pc, #388]	@ (8002300 <main+0x1f0>)
 800217a:	f001 fa45 	bl	8003608 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Yellow_LED_GPIO_Port, Yellow_LED_Pin, GPIO_PIN_SET);
 800217e:	2201      	movs	r2, #1
 8002180:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8002184:	485f      	ldr	r0, [pc, #380]	@ (8002304 <main+0x1f4>)
 8002186:	f001 fa3f 	bl	8003608 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Green_LED_GPIO_Port, Green_LED_Pin, GPIO_PIN_SET);
 800218a:	2201      	movs	r2, #1
 800218c:	2101      	movs	r1, #1
 800218e:	485d      	ldr	r0, [pc, #372]	@ (8002304 <main+0x1f4>)
 8002190:	f001 fa3a 	bl	8003608 <HAL_GPIO_WritePin>

	HAL_Delay(100);
 8002194:	2064      	movs	r0, #100	@ 0x64
 8002196:	f000 fefb 	bl	8002f90 <HAL_Delay>
	//
	//	HAL_GPIO_WritePin(Green_LED_GPIO_Port, Green_LED_Pin, GPIO_PIN_RESET);

	// Init devices (config, coeffs, etc. — your driver stubs can be expanded later)
	HAL_StatusTypeDef response;
	response = if_icm.vTable->init(&if_icm);
 800219a:	4b55      	ldr	r3, [pc, #340]	@ (80022f0 <main+0x1e0>)
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	685b      	ldr	r3, [r3, #4]
 80021a0:	4853      	ldr	r0, [pc, #332]	@ (80022f0 <main+0x1e0>)
 80021a2:	4798      	blx	r3
 80021a4:	4603      	mov	r3, r0
 80021a6:	71fb      	strb	r3, [r7, #7]
	if (response != HAL_OK) while(1);
 80021a8:	79fb      	ldrb	r3, [r7, #7]
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d001      	beq.n	80021b2 <main+0xa2>
 80021ae:	bf00      	nop
 80021b0:	e7fd      	b.n	80021ae <main+0x9e>

	response =if_dps.vTable->init(&if_dps);
 80021b2:	4b4c      	ldr	r3, [pc, #304]	@ (80022e4 <main+0x1d4>)
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	685b      	ldr	r3, [r3, #4]
 80021b8:	484a      	ldr	r0, [pc, #296]	@ (80022e4 <main+0x1d4>)
 80021ba:	4798      	blx	r3
 80021bc:	4603      	mov	r3, r0
 80021be:	71fb      	strb	r3, [r7, #7]
	if (response != HAL_OK) while(1);
 80021c0:	79fb      	ldrb	r3, [r7, #7]
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d001      	beq.n	80021ca <main+0xba>
 80021c6:	bf00      	nop
 80021c8:	e7fd      	b.n	80021c6 <main+0xb6>

	response =if_gps.vTable->init(&if_gps);
 80021ca:	4b4c      	ldr	r3, [pc, #304]	@ (80022fc <main+0x1ec>)
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	685b      	ldr	r3, [r3, #4]
 80021d0:	484a      	ldr	r0, [pc, #296]	@ (80022fc <main+0x1ec>)
 80021d2:	4798      	blx	r3
 80021d4:	4603      	mov	r3, r0
 80021d6:	71fb      	strb	r3, [r7, #7]
	if (response != HAL_OK) while(1);
 80021d8:	79fb      	ldrb	r3, [r7, #7]
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d001      	beq.n	80021e2 <main+0xd2>
 80021de:	bf00      	nop
 80021e0:	e7fd      	b.n	80021de <main+0xce>

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1)
	{
		HAL_Delay(1000);
 80021e2:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80021e6:	f000 fed3 	bl	8002f90 <HAL_Delay>
		if_dps.vTable->read(&if_dps);
 80021ea:	4b3e      	ldr	r3, [pc, #248]	@ (80022e4 <main+0x1d4>)
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	689b      	ldr	r3, [r3, #8]
 80021f0:	483c      	ldr	r0, [pc, #240]	@ (80022e4 <main+0x1d4>)
 80021f2:	4798      	blx	r3
		if_icm.vTable->read(&if_icm);
 80021f4:	4b3e      	ldr	r3, [pc, #248]	@ (80022f0 <main+0x1e0>)
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	689b      	ldr	r3, [r3, #8]
 80021fa:	483d      	ldr	r0, [pc, #244]	@ (80022f0 <main+0x1e0>)
 80021fc:	4798      	blx	r3
		if_gps.vTable->read(&if_gps);
 80021fe:	4b3f      	ldr	r3, [pc, #252]	@ (80022fc <main+0x1ec>)
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	689b      	ldr	r3, [r3, #8]
 8002204:	483d      	ldr	r0, [pc, #244]	@ (80022fc <main+0x1ec>)
 8002206:	4798      	blx	r3

		printf("ICM temp: %.2f C\r\n", icm.last_temp_c);
 8002208:	4b38      	ldr	r3, [pc, #224]	@ (80022ec <main+0x1dc>)
 800220a:	edd3 7a07 	vldr	s15, [r3, #28]
 800220e:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002212:	ec53 2b17 	vmov	r2, r3, d7
 8002216:	483c      	ldr	r0, [pc, #240]	@ (8002308 <main+0x1f8>)
 8002218:	f006 ff7a 	bl	8009110 <iprintf>
		printf("ICM X Accel (g): %.2f\r\n", (double)icm.accel_g[0]);
 800221c:	4b33      	ldr	r3, [pc, #204]	@ (80022ec <main+0x1dc>)
 800221e:	edd3 7a08 	vldr	s15, [r3, #32]
 8002222:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002226:	ec53 2b17 	vmov	r2, r3, d7
 800222a:	4838      	ldr	r0, [pc, #224]	@ (800230c <main+0x1fc>)
 800222c:	f006 ff70 	bl	8009110 <iprintf>
		printf("ICM Y Accel (g): %.2f\r\n", (double)icm.accel_g[1]);
 8002230:	4b2e      	ldr	r3, [pc, #184]	@ (80022ec <main+0x1dc>)
 8002232:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 8002236:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800223a:	ec53 2b17 	vmov	r2, r3, d7
 800223e:	4834      	ldr	r0, [pc, #208]	@ (8002310 <main+0x200>)
 8002240:	f006 ff66 	bl	8009110 <iprintf>
		printf("ICM Z Accel (g): %.2f\r\n", (double)icm.accel_g[2]);
 8002244:	4b29      	ldr	r3, [pc, #164]	@ (80022ec <main+0x1dc>)
 8002246:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 800224a:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800224e:	ec53 2b17 	vmov	r2, r3, d7
 8002252:	4830      	ldr	r0, [pc, #192]	@ (8002314 <main+0x204>)
 8002254:	f006 ff5c 	bl	8009110 <iprintf>
		printf("ICM X Rotation (dps): %.2f\r\n", (double)icm.gyro_dps[0]);
 8002258:	4b24      	ldr	r3, [pc, #144]	@ (80022ec <main+0x1dc>)
 800225a:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 800225e:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002262:	ec53 2b17 	vmov	r2, r3, d7
 8002266:	482c      	ldr	r0, [pc, #176]	@ (8002318 <main+0x208>)
 8002268:	f006 ff52 	bl	8009110 <iprintf>
		printf("ICM Y Rotation (dps): %.2f\r\n", (double)icm.gyro_dps[1]);
 800226c:	4b1f      	ldr	r3, [pc, #124]	@ (80022ec <main+0x1dc>)
 800226e:	edd3 7a0c 	vldr	s15, [r3, #48]	@ 0x30
 8002272:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002276:	ec53 2b17 	vmov	r2, r3, d7
 800227a:	4828      	ldr	r0, [pc, #160]	@ (800231c <main+0x20c>)
 800227c:	f006 ff48 	bl	8009110 <iprintf>
		printf("ICM Z Rotation (dps): %.2f\r\n", (double)icm.gyro_dps[2]);
 8002280:	4b1a      	ldr	r3, [pc, #104]	@ (80022ec <main+0x1dc>)
 8002282:	edd3 7a0d 	vldr	s15, [r3, #52]	@ 0x34
 8002286:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800228a:	ec53 2b17 	vmov	r2, r3, d7
 800228e:	4824      	ldr	r0, [pc, #144]	@ (8002320 <main+0x210>)
 8002290:	f006 ff3e 	bl	8009110 <iprintf>

		printf("DPS Pressure: %.2f\r\n", (double)dps.pressure);
 8002294:	4b12      	ldr	r3, [pc, #72]	@ (80022e0 <main+0x1d0>)
 8002296:	edd3 7a0e 	vldr	s15, [r3, #56]	@ 0x38
 800229a:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800229e:	ec53 2b17 	vmov	r2, r3, d7
 80022a2:	4820      	ldr	r0, [pc, #128]	@ (8002324 <main+0x214>)
 80022a4:	f006 ff34 	bl	8009110 <iprintf>
		printf("DPS Temperature: %.2f\r\n", (double)dps.temperature);
 80022a8:	4b0d      	ldr	r3, [pc, #52]	@ (80022e0 <main+0x1d0>)
 80022aa:	edd3 7a0f 	vldr	s15, [r3, #60]	@ 0x3c
 80022ae:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80022b2:	ec53 2b17 	vmov	r2, r3, d7
 80022b6:	481c      	ldr	r0, [pc, #112]	@ (8002328 <main+0x218>)
 80022b8:	f006 ff2a 	bl	8009110 <iprintf>
		printf("DPS Altitude: %.2f\r\n", (double)dps.altitude);
 80022bc:	4b08      	ldr	r3, [pc, #32]	@ (80022e0 <main+0x1d0>)
 80022be:	edd3 7a10 	vldr	s15, [r3, #64]	@ 0x40
 80022c2:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80022c6:	ec53 2b17 	vmov	r2, r3, d7
 80022ca:	4818      	ldr	r0, [pc, #96]	@ (800232c <main+0x21c>)
 80022cc:	f006 ff20 	bl	8009110 <iprintf>
		HAL_Delay(1000);
 80022d0:	e787      	b.n	80021e2 <main+0xd2>
 80022d2:	bf00      	nop
 80022d4:	2400001c 	.word	0x2400001c
 80022d8:	0800b190 	.word	0x0800b190
 80022dc:	24000248 	.word	0x24000248
 80022e0:	240003dc 	.word	0x240003dc
 80022e4:	240003c4 	.word	0x240003c4
 80022e8:	240001f4 	.word	0x240001f4
 80022ec:	24000420 	.word	0x24000420
 80022f0:	240003cc 	.word	0x240003cc
 80022f4:	24000330 	.word	0x24000330
 80022f8:	24000468 	.word	0x24000468
 80022fc:	240003d4 	.word	0x240003d4
 8002300:	58021000 	.word	0x58021000
 8002304:	58020400 	.word	0x58020400
 8002308:	0800b198 	.word	0x0800b198
 800230c:	0800b1ac 	.word	0x0800b1ac
 8002310:	0800b1c4 	.word	0x0800b1c4
 8002314:	0800b1dc 	.word	0x0800b1dc
 8002318:	0800b1f4 	.word	0x0800b1f4
 800231c:	0800b214 	.word	0x0800b214
 8002320:	0800b234 	.word	0x0800b234
 8002324:	0800b254 	.word	0x0800b254
 8002328:	0800b26c 	.word	0x0800b26c
 800232c:	0800b284 	.word	0x0800b284

08002330 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8002330:	b580      	push	{r7, lr}
 8002332:	b09c      	sub	sp, #112	@ 0x70
 8002334:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002336:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800233a:	224c      	movs	r2, #76	@ 0x4c
 800233c:	2100      	movs	r1, #0
 800233e:	4618      	mov	r0, r3
 8002340:	f007 f8e2 	bl	8009508 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002344:	1d3b      	adds	r3, r7, #4
 8002346:	2220      	movs	r2, #32
 8002348:	2100      	movs	r1, #0
 800234a:	4618      	mov	r0, r3
 800234c:	f007 f8dc 	bl	8009508 <memset>

	/** Supply configuration update enable
	 */
	HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8002350:	2002      	movs	r0, #2
 8002352:	f001 ffa3 	bl	800429c <HAL_PWREx_ConfigSupply>

	/** Configure the main internal regulator output voltage
	 */
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8002356:	2300      	movs	r3, #0
 8002358:	603b      	str	r3, [r7, #0]
 800235a:	4b28      	ldr	r3, [pc, #160]	@ (80023fc <SystemClock_Config+0xcc>)
 800235c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800235e:	4a27      	ldr	r2, [pc, #156]	@ (80023fc <SystemClock_Config+0xcc>)
 8002360:	f023 0301 	bic.w	r3, r3, #1
 8002364:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8002366:	4b25      	ldr	r3, [pc, #148]	@ (80023fc <SystemClock_Config+0xcc>)
 8002368:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800236a:	f003 0301 	and.w	r3, r3, #1
 800236e:	603b      	str	r3, [r7, #0]
 8002370:	4b23      	ldr	r3, [pc, #140]	@ (8002400 <SystemClock_Config+0xd0>)
 8002372:	699b      	ldr	r3, [r3, #24]
 8002374:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8002378:	4a21      	ldr	r2, [pc, #132]	@ (8002400 <SystemClock_Config+0xd0>)
 800237a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800237e:	6193      	str	r3, [r2, #24]
 8002380:	4b1f      	ldr	r3, [pc, #124]	@ (8002400 <SystemClock_Config+0xd0>)
 8002382:	699b      	ldr	r3, [r3, #24]
 8002384:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8002388:	603b      	str	r3, [r7, #0]
 800238a:	683b      	ldr	r3, [r7, #0]

	while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 800238c:	bf00      	nop
 800238e:	4b1c      	ldr	r3, [pc, #112]	@ (8002400 <SystemClock_Config+0xd0>)
 8002390:	699b      	ldr	r3, [r3, #24]
 8002392:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002396:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800239a:	d1f8      	bne.n	800238e <SystemClock_Config+0x5e>

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800239c:	2302      	movs	r3, #2
 800239e:	627b      	str	r3, [r7, #36]	@ 0x24
	RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 80023a0:	2301      	movs	r3, #1
 80023a2:	633b      	str	r3, [r7, #48]	@ 0x30
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80023a4:	2340      	movs	r3, #64	@ 0x40
 80023a6:	637b      	str	r3, [r7, #52]	@ 0x34
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80023a8:	2300      	movs	r3, #0
 80023aa:	64bb      	str	r3, [r7, #72]	@ 0x48
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80023ac:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80023b0:	4618      	mov	r0, r3
 80023b2:	f001 ffad 	bl	8004310 <HAL_RCC_OscConfig>
 80023b6:	4603      	mov	r3, r0
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d001      	beq.n	80023c0 <SystemClock_Config+0x90>
	{
		Error_Handler();
 80023bc:	f000 f9ee 	bl	800279c <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80023c0:	233f      	movs	r3, #63	@ 0x3f
 80023c2:	607b      	str	r3, [r7, #4]
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
			|RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80023c4:	2300      	movs	r3, #0
 80023c6:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80023c8:	2300      	movs	r3, #0
 80023ca:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 80023cc:	2300      	movs	r3, #0
 80023ce:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 80023d0:	2300      	movs	r3, #0
 80023d2:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 80023d4:	2300      	movs	r3, #0
 80023d6:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 80023d8:	2300      	movs	r3, #0
 80023da:	61fb      	str	r3, [r7, #28]
	RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 80023dc:	2300      	movs	r3, #0
 80023de:	623b      	str	r3, [r7, #32]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80023e0:	1d3b      	adds	r3, r7, #4
 80023e2:	2101      	movs	r1, #1
 80023e4:	4618      	mov	r0, r3
 80023e6:	f002 fbed 	bl	8004bc4 <HAL_RCC_ClockConfig>
 80023ea:	4603      	mov	r3, r0
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d001      	beq.n	80023f4 <SystemClock_Config+0xc4>
	{
		Error_Handler();
 80023f0:	f000 f9d4 	bl	800279c <Error_Handler>
	}
}
 80023f4:	bf00      	nop
 80023f6:	3770      	adds	r7, #112	@ 0x70
 80023f8:	46bd      	mov	sp, r7
 80023fa:	bd80      	pop	{r7, pc}
 80023fc:	58000400 	.word	0x58000400
 8002400:	58024800 	.word	0x58024800

08002404 <MX_I2C1_Init>:
 * @brief I2C1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C1_Init(void)
{
 8002404:	b580      	push	{r7, lr}
 8002406:	af00      	add	r7, sp, #0
	/* USER CODE END I2C1_Init 0 */

	/* USER CODE BEGIN I2C1_Init 1 */

	/* USER CODE END I2C1_Init 1 */
	hi2c1.Instance = I2C1;
 8002408:	4b1b      	ldr	r3, [pc, #108]	@ (8002478 <MX_I2C1_Init+0x74>)
 800240a:	4a1c      	ldr	r2, [pc, #112]	@ (800247c <MX_I2C1_Init+0x78>)
 800240c:	601a      	str	r2, [r3, #0]
	hi2c1.Init.Timing = 0x10707DBC;
 800240e:	4b1a      	ldr	r3, [pc, #104]	@ (8002478 <MX_I2C1_Init+0x74>)
 8002410:	4a1b      	ldr	r2, [pc, #108]	@ (8002480 <MX_I2C1_Init+0x7c>)
 8002412:	605a      	str	r2, [r3, #4]
	hi2c1.Init.OwnAddress1 = 0;
 8002414:	4b18      	ldr	r3, [pc, #96]	@ (8002478 <MX_I2C1_Init+0x74>)
 8002416:	2200      	movs	r2, #0
 8002418:	609a      	str	r2, [r3, #8]
	hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800241a:	4b17      	ldr	r3, [pc, #92]	@ (8002478 <MX_I2C1_Init+0x74>)
 800241c:	2201      	movs	r2, #1
 800241e:	60da      	str	r2, [r3, #12]
	hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002420:	4b15      	ldr	r3, [pc, #84]	@ (8002478 <MX_I2C1_Init+0x74>)
 8002422:	2200      	movs	r2, #0
 8002424:	611a      	str	r2, [r3, #16]
	hi2c1.Init.OwnAddress2 = 0;
 8002426:	4b14      	ldr	r3, [pc, #80]	@ (8002478 <MX_I2C1_Init+0x74>)
 8002428:	2200      	movs	r2, #0
 800242a:	615a      	str	r2, [r3, #20]
	hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800242c:	4b12      	ldr	r3, [pc, #72]	@ (8002478 <MX_I2C1_Init+0x74>)
 800242e:	2200      	movs	r2, #0
 8002430:	619a      	str	r2, [r3, #24]
	hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002432:	4b11      	ldr	r3, [pc, #68]	@ (8002478 <MX_I2C1_Init+0x74>)
 8002434:	2200      	movs	r2, #0
 8002436:	61da      	str	r2, [r3, #28]
	hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002438:	4b0f      	ldr	r3, [pc, #60]	@ (8002478 <MX_I2C1_Init+0x74>)
 800243a:	2200      	movs	r2, #0
 800243c:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800243e:	480e      	ldr	r0, [pc, #56]	@ (8002478 <MX_I2C1_Init+0x74>)
 8002440:	f001 f8fc 	bl	800363c <HAL_I2C_Init>
 8002444:	4603      	mov	r3, r0
 8002446:	2b00      	cmp	r3, #0
 8002448:	d001      	beq.n	800244e <MX_I2C1_Init+0x4a>
	{
		Error_Handler();
 800244a:	f000 f9a7 	bl	800279c <Error_Handler>
	}

	/** Configure Analogue filter
	 */
	if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800244e:	2100      	movs	r1, #0
 8002450:	4809      	ldr	r0, [pc, #36]	@ (8002478 <MX_I2C1_Init+0x74>)
 8002452:	f001 fe8b 	bl	800416c <HAL_I2CEx_ConfigAnalogFilter>
 8002456:	4603      	mov	r3, r0
 8002458:	2b00      	cmp	r3, #0
 800245a:	d001      	beq.n	8002460 <MX_I2C1_Init+0x5c>
	{
		Error_Handler();
 800245c:	f000 f99e 	bl	800279c <Error_Handler>
	}

	/** Configure Digital filter
	 */
	if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8002460:	2100      	movs	r1, #0
 8002462:	4805      	ldr	r0, [pc, #20]	@ (8002478 <MX_I2C1_Init+0x74>)
 8002464:	f001 fecd 	bl	8004202 <HAL_I2CEx_ConfigDigitalFilter>
 8002468:	4603      	mov	r3, r0
 800246a:	2b00      	cmp	r3, #0
 800246c:	d001      	beq.n	8002472 <MX_I2C1_Init+0x6e>
	{
		Error_Handler();
 800246e:	f000 f995 	bl	800279c <Error_Handler>
	}
	/* USER CODE BEGIN I2C1_Init 2 */

	/* USER CODE END I2C1_Init 2 */

}
 8002472:	bf00      	nop
 8002474:	bd80      	pop	{r7, pc}
 8002476:	bf00      	nop
 8002478:	240001f4 	.word	0x240001f4
 800247c:	40005400 	.word	0x40005400
 8002480:	10707dbc 	.word	0x10707dbc

08002484 <MX_I2C2_Init>:
 * @brief I2C2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C2_Init(void)
{
 8002484:	b580      	push	{r7, lr}
 8002486:	af00      	add	r7, sp, #0
	/* USER CODE END I2C2_Init 0 */

	/* USER CODE BEGIN I2C2_Init 1 */

	/* USER CODE END I2C2_Init 1 */
	hi2c2.Instance = I2C2;
 8002488:	4b1b      	ldr	r3, [pc, #108]	@ (80024f8 <MX_I2C2_Init+0x74>)
 800248a:	4a1c      	ldr	r2, [pc, #112]	@ (80024fc <MX_I2C2_Init+0x78>)
 800248c:	601a      	str	r2, [r3, #0]
	hi2c2.Init.Timing = 0x10707DBC;
 800248e:	4b1a      	ldr	r3, [pc, #104]	@ (80024f8 <MX_I2C2_Init+0x74>)
 8002490:	4a1b      	ldr	r2, [pc, #108]	@ (8002500 <MX_I2C2_Init+0x7c>)
 8002492:	605a      	str	r2, [r3, #4]
	hi2c2.Init.OwnAddress1 = 0;
 8002494:	4b18      	ldr	r3, [pc, #96]	@ (80024f8 <MX_I2C2_Init+0x74>)
 8002496:	2200      	movs	r2, #0
 8002498:	609a      	str	r2, [r3, #8]
	hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800249a:	4b17      	ldr	r3, [pc, #92]	@ (80024f8 <MX_I2C2_Init+0x74>)
 800249c:	2201      	movs	r2, #1
 800249e:	60da      	str	r2, [r3, #12]
	hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80024a0:	4b15      	ldr	r3, [pc, #84]	@ (80024f8 <MX_I2C2_Init+0x74>)
 80024a2:	2200      	movs	r2, #0
 80024a4:	611a      	str	r2, [r3, #16]
	hi2c2.Init.OwnAddress2 = 0;
 80024a6:	4b14      	ldr	r3, [pc, #80]	@ (80024f8 <MX_I2C2_Init+0x74>)
 80024a8:	2200      	movs	r2, #0
 80024aa:	615a      	str	r2, [r3, #20]
	hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80024ac:	4b12      	ldr	r3, [pc, #72]	@ (80024f8 <MX_I2C2_Init+0x74>)
 80024ae:	2200      	movs	r2, #0
 80024b0:	619a      	str	r2, [r3, #24]
	hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80024b2:	4b11      	ldr	r3, [pc, #68]	@ (80024f8 <MX_I2C2_Init+0x74>)
 80024b4:	2200      	movs	r2, #0
 80024b6:	61da      	str	r2, [r3, #28]
	hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80024b8:	4b0f      	ldr	r3, [pc, #60]	@ (80024f8 <MX_I2C2_Init+0x74>)
 80024ba:	2200      	movs	r2, #0
 80024bc:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80024be:	480e      	ldr	r0, [pc, #56]	@ (80024f8 <MX_I2C2_Init+0x74>)
 80024c0:	f001 f8bc 	bl	800363c <HAL_I2C_Init>
 80024c4:	4603      	mov	r3, r0
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d001      	beq.n	80024ce <MX_I2C2_Init+0x4a>
	{
		Error_Handler();
 80024ca:	f000 f967 	bl	800279c <Error_Handler>
	}

	/** Configure Analogue filter
	 */
	if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80024ce:	2100      	movs	r1, #0
 80024d0:	4809      	ldr	r0, [pc, #36]	@ (80024f8 <MX_I2C2_Init+0x74>)
 80024d2:	f001 fe4b 	bl	800416c <HAL_I2CEx_ConfigAnalogFilter>
 80024d6:	4603      	mov	r3, r0
 80024d8:	2b00      	cmp	r3, #0
 80024da:	d001      	beq.n	80024e0 <MX_I2C2_Init+0x5c>
	{
		Error_Handler();
 80024dc:	f000 f95e 	bl	800279c <Error_Handler>
	}

	/** Configure Digital filter
	 */
	if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 80024e0:	2100      	movs	r1, #0
 80024e2:	4805      	ldr	r0, [pc, #20]	@ (80024f8 <MX_I2C2_Init+0x74>)
 80024e4:	f001 fe8d 	bl	8004202 <HAL_I2CEx_ConfigDigitalFilter>
 80024e8:	4603      	mov	r3, r0
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d001      	beq.n	80024f2 <MX_I2C2_Init+0x6e>
	{
		Error_Handler();
 80024ee:	f000 f955 	bl	800279c <Error_Handler>
	}
	/* USER CODE BEGIN I2C2_Init 2 */

	/* USER CODE END I2C2_Init 2 */

}
 80024f2:	bf00      	nop
 80024f4:	bd80      	pop	{r7, pc}
 80024f6:	bf00      	nop
 80024f8:	24000248 	.word	0x24000248
 80024fc:	40005800 	.word	0x40005800
 8002500:	10707dbc 	.word	0x10707dbc

08002504 <MX_USART3_UART_Init>:
 * @brief USART3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART3_UART_Init(void)
{
 8002504:	b580      	push	{r7, lr}
 8002506:	af00      	add	r7, sp, #0
	/* USER CODE END USART3_Init 0 */

	/* USER CODE BEGIN USART3_Init 1 */

	/* USER CODE END USART3_Init 1 */
	huart3.Instance = USART3;
 8002508:	4b22      	ldr	r3, [pc, #136]	@ (8002594 <MX_USART3_UART_Init+0x90>)
 800250a:	4a23      	ldr	r2, [pc, #140]	@ (8002598 <MX_USART3_UART_Init+0x94>)
 800250c:	601a      	str	r2, [r3, #0]
	huart3.Init.BaudRate = 115200;
 800250e:	4b21      	ldr	r3, [pc, #132]	@ (8002594 <MX_USART3_UART_Init+0x90>)
 8002510:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002514:	605a      	str	r2, [r3, #4]
	huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8002516:	4b1f      	ldr	r3, [pc, #124]	@ (8002594 <MX_USART3_UART_Init+0x90>)
 8002518:	2200      	movs	r2, #0
 800251a:	609a      	str	r2, [r3, #8]
	huart3.Init.StopBits = UART_STOPBITS_1;
 800251c:	4b1d      	ldr	r3, [pc, #116]	@ (8002594 <MX_USART3_UART_Init+0x90>)
 800251e:	2200      	movs	r2, #0
 8002520:	60da      	str	r2, [r3, #12]
	huart3.Init.Parity = UART_PARITY_NONE;
 8002522:	4b1c      	ldr	r3, [pc, #112]	@ (8002594 <MX_USART3_UART_Init+0x90>)
 8002524:	2200      	movs	r2, #0
 8002526:	611a      	str	r2, [r3, #16]
	huart3.Init.Mode = UART_MODE_TX_RX;
 8002528:	4b1a      	ldr	r3, [pc, #104]	@ (8002594 <MX_USART3_UART_Init+0x90>)
 800252a:	220c      	movs	r2, #12
 800252c:	615a      	str	r2, [r3, #20]
	huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800252e:	4b19      	ldr	r3, [pc, #100]	@ (8002594 <MX_USART3_UART_Init+0x90>)
 8002530:	2200      	movs	r2, #0
 8002532:	619a      	str	r2, [r3, #24]
	huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8002534:	4b17      	ldr	r3, [pc, #92]	@ (8002594 <MX_USART3_UART_Init+0x90>)
 8002536:	2200      	movs	r2, #0
 8002538:	61da      	str	r2, [r3, #28]
	huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800253a:	4b16      	ldr	r3, [pc, #88]	@ (8002594 <MX_USART3_UART_Init+0x90>)
 800253c:	2200      	movs	r2, #0
 800253e:	621a      	str	r2, [r3, #32]
	huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002540:	4b14      	ldr	r3, [pc, #80]	@ (8002594 <MX_USART3_UART_Init+0x90>)
 8002542:	2200      	movs	r2, #0
 8002544:	625a      	str	r2, [r3, #36]	@ 0x24
	huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002546:	4b13      	ldr	r3, [pc, #76]	@ (8002594 <MX_USART3_UART_Init+0x90>)
 8002548:	2200      	movs	r2, #0
 800254a:	629a      	str	r2, [r3, #40]	@ 0x28
	if (HAL_UART_Init(&huart3) != HAL_OK)
 800254c:	4811      	ldr	r0, [pc, #68]	@ (8002594 <MX_USART3_UART_Init+0x90>)
 800254e:	f004 fcf1 	bl	8006f34 <HAL_UART_Init>
 8002552:	4603      	mov	r3, r0
 8002554:	2b00      	cmp	r3, #0
 8002556:	d001      	beq.n	800255c <MX_USART3_UART_Init+0x58>
	{
		Error_Handler();
 8002558:	f000 f920 	bl	800279c <Error_Handler>
	}
	if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800255c:	2100      	movs	r1, #0
 800255e:	480d      	ldr	r0, [pc, #52]	@ (8002594 <MX_USART3_UART_Init+0x90>)
 8002560:	f005 fe4f 	bl	8008202 <HAL_UARTEx_SetTxFifoThreshold>
 8002564:	4603      	mov	r3, r0
 8002566:	2b00      	cmp	r3, #0
 8002568:	d001      	beq.n	800256e <MX_USART3_UART_Init+0x6a>
	{
		Error_Handler();
 800256a:	f000 f917 	bl	800279c <Error_Handler>
	}
	if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800256e:	2100      	movs	r1, #0
 8002570:	4808      	ldr	r0, [pc, #32]	@ (8002594 <MX_USART3_UART_Init+0x90>)
 8002572:	f005 fe84 	bl	800827e <HAL_UARTEx_SetRxFifoThreshold>
 8002576:	4603      	mov	r3, r0
 8002578:	2b00      	cmp	r3, #0
 800257a:	d001      	beq.n	8002580 <MX_USART3_UART_Init+0x7c>
	{
		Error_Handler();
 800257c:	f000 f90e 	bl	800279c <Error_Handler>
	}
	if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8002580:	4804      	ldr	r0, [pc, #16]	@ (8002594 <MX_USART3_UART_Init+0x90>)
 8002582:	f005 fe05 	bl	8008190 <HAL_UARTEx_DisableFifoMode>
 8002586:	4603      	mov	r3, r0
 8002588:	2b00      	cmp	r3, #0
 800258a:	d001      	beq.n	8002590 <MX_USART3_UART_Init+0x8c>
	{
		Error_Handler();
 800258c:	f000 f906 	bl	800279c <Error_Handler>
	}
	/* USER CODE BEGIN USART3_Init 2 */

	/* USER CODE END USART3_Init 2 */

}
 8002590:	bf00      	nop
 8002592:	bd80      	pop	{r7, pc}
 8002594:	2400029c 	.word	0x2400029c
 8002598:	40004800 	.word	0x40004800

0800259c <MX_USART6_UART_Init>:
 * @brief USART6 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART6_UART_Init(void)
{
 800259c:	b580      	push	{r7, lr}
 800259e:	af00      	add	r7, sp, #0
	/* USER CODE END USART6_Init 0 */

	/* USER CODE BEGIN USART6_Init 1 */

	/* USER CODE END USART6_Init 1 */
	huart6.Instance = USART6;
 80025a0:	4b22      	ldr	r3, [pc, #136]	@ (800262c <MX_USART6_UART_Init+0x90>)
 80025a2:	4a23      	ldr	r2, [pc, #140]	@ (8002630 <MX_USART6_UART_Init+0x94>)
 80025a4:	601a      	str	r2, [r3, #0]
	huart6.Init.BaudRate = 9600;
 80025a6:	4b21      	ldr	r3, [pc, #132]	@ (800262c <MX_USART6_UART_Init+0x90>)
 80025a8:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 80025ac:	605a      	str	r2, [r3, #4]
	huart6.Init.WordLength = UART_WORDLENGTH_8B;
 80025ae:	4b1f      	ldr	r3, [pc, #124]	@ (800262c <MX_USART6_UART_Init+0x90>)
 80025b0:	2200      	movs	r2, #0
 80025b2:	609a      	str	r2, [r3, #8]
	huart6.Init.StopBits = UART_STOPBITS_1;
 80025b4:	4b1d      	ldr	r3, [pc, #116]	@ (800262c <MX_USART6_UART_Init+0x90>)
 80025b6:	2200      	movs	r2, #0
 80025b8:	60da      	str	r2, [r3, #12]
	huart6.Init.Parity = UART_PARITY_NONE;
 80025ba:	4b1c      	ldr	r3, [pc, #112]	@ (800262c <MX_USART6_UART_Init+0x90>)
 80025bc:	2200      	movs	r2, #0
 80025be:	611a      	str	r2, [r3, #16]
	huart6.Init.Mode = UART_MODE_TX_RX;
 80025c0:	4b1a      	ldr	r3, [pc, #104]	@ (800262c <MX_USART6_UART_Init+0x90>)
 80025c2:	220c      	movs	r2, #12
 80025c4:	615a      	str	r2, [r3, #20]
	huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80025c6:	4b19      	ldr	r3, [pc, #100]	@ (800262c <MX_USART6_UART_Init+0x90>)
 80025c8:	2200      	movs	r2, #0
 80025ca:	619a      	str	r2, [r3, #24]
	huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 80025cc:	4b17      	ldr	r3, [pc, #92]	@ (800262c <MX_USART6_UART_Init+0x90>)
 80025ce:	2200      	movs	r2, #0
 80025d0:	61da      	str	r2, [r3, #28]
	huart6.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80025d2:	4b16      	ldr	r3, [pc, #88]	@ (800262c <MX_USART6_UART_Init+0x90>)
 80025d4:	2200      	movs	r2, #0
 80025d6:	621a      	str	r2, [r3, #32]
	huart6.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80025d8:	4b14      	ldr	r3, [pc, #80]	@ (800262c <MX_USART6_UART_Init+0x90>)
 80025da:	2200      	movs	r2, #0
 80025dc:	625a      	str	r2, [r3, #36]	@ 0x24
	huart6.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80025de:	4b13      	ldr	r3, [pc, #76]	@ (800262c <MX_USART6_UART_Init+0x90>)
 80025e0:	2200      	movs	r2, #0
 80025e2:	629a      	str	r2, [r3, #40]	@ 0x28
	if (HAL_UART_Init(&huart6) != HAL_OK)
 80025e4:	4811      	ldr	r0, [pc, #68]	@ (800262c <MX_USART6_UART_Init+0x90>)
 80025e6:	f004 fca5 	bl	8006f34 <HAL_UART_Init>
 80025ea:	4603      	mov	r3, r0
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d001      	beq.n	80025f4 <MX_USART6_UART_Init+0x58>
	{
		Error_Handler();
 80025f0:	f000 f8d4 	bl	800279c <Error_Handler>
	}
	if (HAL_UARTEx_SetTxFifoThreshold(&huart6, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80025f4:	2100      	movs	r1, #0
 80025f6:	480d      	ldr	r0, [pc, #52]	@ (800262c <MX_USART6_UART_Init+0x90>)
 80025f8:	f005 fe03 	bl	8008202 <HAL_UARTEx_SetTxFifoThreshold>
 80025fc:	4603      	mov	r3, r0
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d001      	beq.n	8002606 <MX_USART6_UART_Init+0x6a>
	{
		Error_Handler();
 8002602:	f000 f8cb 	bl	800279c <Error_Handler>
	}
	if (HAL_UARTEx_SetRxFifoThreshold(&huart6, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002606:	2100      	movs	r1, #0
 8002608:	4808      	ldr	r0, [pc, #32]	@ (800262c <MX_USART6_UART_Init+0x90>)
 800260a:	f005 fe38 	bl	800827e <HAL_UARTEx_SetRxFifoThreshold>
 800260e:	4603      	mov	r3, r0
 8002610:	2b00      	cmp	r3, #0
 8002612:	d001      	beq.n	8002618 <MX_USART6_UART_Init+0x7c>
	{
		Error_Handler();
 8002614:	f000 f8c2 	bl	800279c <Error_Handler>
	}
	if (HAL_UARTEx_DisableFifoMode(&huart6) != HAL_OK)
 8002618:	4804      	ldr	r0, [pc, #16]	@ (800262c <MX_USART6_UART_Init+0x90>)
 800261a:	f005 fdb9 	bl	8008190 <HAL_UARTEx_DisableFifoMode>
 800261e:	4603      	mov	r3, r0
 8002620:	2b00      	cmp	r3, #0
 8002622:	d001      	beq.n	8002628 <MX_USART6_UART_Init+0x8c>
	{
		Error_Handler();
 8002624:	f000 f8ba 	bl	800279c <Error_Handler>
	}
	/* USER CODE BEGIN USART6_Init 2 */

	/* USER CODE END USART6_Init 2 */

}
 8002628:	bf00      	nop
 800262a:	bd80      	pop	{r7, pc}
 800262c:	24000330 	.word	0x24000330
 8002630:	40011400 	.word	0x40011400

08002634 <MX_GPIO_Init>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 8002634:	b580      	push	{r7, lr}
 8002636:	b08a      	sub	sp, #40	@ 0x28
 8002638:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 800263a:	f107 0314 	add.w	r3, r7, #20
 800263e:	2200      	movs	r2, #0
 8002640:	601a      	str	r2, [r3, #0]
 8002642:	605a      	str	r2, [r3, #4]
 8002644:	609a      	str	r2, [r3, #8]
 8002646:	60da      	str	r2, [r3, #12]
 8002648:	611a      	str	r2, [r3, #16]
	/* USER CODE BEGIN MX_GPIO_Init_1 */

	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOF_CLK_ENABLE();
 800264a:	4b3b      	ldr	r3, [pc, #236]	@ (8002738 <MX_GPIO_Init+0x104>)
 800264c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002650:	4a39      	ldr	r2, [pc, #228]	@ (8002738 <MX_GPIO_Init+0x104>)
 8002652:	f043 0320 	orr.w	r3, r3, #32
 8002656:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800265a:	4b37      	ldr	r3, [pc, #220]	@ (8002738 <MX_GPIO_Init+0x104>)
 800265c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002660:	f003 0320 	and.w	r3, r3, #32
 8002664:	613b      	str	r3, [r7, #16]
 8002666:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8002668:	4b33      	ldr	r3, [pc, #204]	@ (8002738 <MX_GPIO_Init+0x104>)
 800266a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800266e:	4a32      	ldr	r2, [pc, #200]	@ (8002738 <MX_GPIO_Init+0x104>)
 8002670:	f043 0302 	orr.w	r3, r3, #2
 8002674:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002678:	4b2f      	ldr	r3, [pc, #188]	@ (8002738 <MX_GPIO_Init+0x104>)
 800267a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800267e:	f003 0302 	and.w	r3, r3, #2
 8002682:	60fb      	str	r3, [r7, #12]
 8002684:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 8002686:	4b2c      	ldr	r3, [pc, #176]	@ (8002738 <MX_GPIO_Init+0x104>)
 8002688:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800268c:	4a2a      	ldr	r2, [pc, #168]	@ (8002738 <MX_GPIO_Init+0x104>)
 800268e:	f043 0308 	orr.w	r3, r3, #8
 8002692:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002696:	4b28      	ldr	r3, [pc, #160]	@ (8002738 <MX_GPIO_Init+0x104>)
 8002698:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800269c:	f003 0308 	and.w	r3, r3, #8
 80026a0:	60bb      	str	r3, [r7, #8]
 80026a2:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOC_CLK_ENABLE();
 80026a4:	4b24      	ldr	r3, [pc, #144]	@ (8002738 <MX_GPIO_Init+0x104>)
 80026a6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80026aa:	4a23      	ldr	r2, [pc, #140]	@ (8002738 <MX_GPIO_Init+0x104>)
 80026ac:	f043 0304 	orr.w	r3, r3, #4
 80026b0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80026b4:	4b20      	ldr	r3, [pc, #128]	@ (8002738 <MX_GPIO_Init+0x104>)
 80026b6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80026ba:	f003 0304 	and.w	r3, r3, #4
 80026be:	607b      	str	r3, [r7, #4]
 80026c0:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOE_CLK_ENABLE();
 80026c2:	4b1d      	ldr	r3, [pc, #116]	@ (8002738 <MX_GPIO_Init+0x104>)
 80026c4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80026c8:	4a1b      	ldr	r2, [pc, #108]	@ (8002738 <MX_GPIO_Init+0x104>)
 80026ca:	f043 0310 	orr.w	r3, r3, #16
 80026ce:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80026d2:	4b19      	ldr	r3, [pc, #100]	@ (8002738 <MX_GPIO_Init+0x104>)
 80026d4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80026d8:	f003 0310 	and.w	r3, r3, #16
 80026dc:	603b      	str	r3, [r7, #0]
 80026de:	683b      	ldr	r3, [r7, #0]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB, Green_LED_Pin|Yellow_LED_Pin, GPIO_PIN_RESET);
 80026e0:	2200      	movs	r2, #0
 80026e2:	f244 0101 	movw	r1, #16385	@ 0x4001
 80026e6:	4815      	ldr	r0, [pc, #84]	@ (800273c <MX_GPIO_Init+0x108>)
 80026e8:	f000 ff8e 	bl	8003608 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(Red_LED_GPIO_Port, Red_LED_Pin, GPIO_PIN_RESET);
 80026ec:	2200      	movs	r2, #0
 80026ee:	2102      	movs	r1, #2
 80026f0:	4813      	ldr	r0, [pc, #76]	@ (8002740 <MX_GPIO_Init+0x10c>)
 80026f2:	f000 ff89 	bl	8003608 <HAL_GPIO_WritePin>

	/*Configure GPIO pins : Green_LED_Pin Yellow_LED_Pin */
	GPIO_InitStruct.Pin = Green_LED_Pin|Yellow_LED_Pin;
 80026f6:	f244 0301 	movw	r3, #16385	@ 0x4001
 80026fa:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80026fc:	2301      	movs	r3, #1
 80026fe:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002700:	2300      	movs	r3, #0
 8002702:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002704:	2300      	movs	r3, #0
 8002706:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002708:	f107 0314 	add.w	r3, r7, #20
 800270c:	4619      	mov	r1, r3
 800270e:	480b      	ldr	r0, [pc, #44]	@ (800273c <MX_GPIO_Init+0x108>)
 8002710:	f000 fdca 	bl	80032a8 <HAL_GPIO_Init>

	/*Configure GPIO pin : Red_LED_Pin */
	GPIO_InitStruct.Pin = Red_LED_Pin;
 8002714:	2302      	movs	r3, #2
 8002716:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002718:	2301      	movs	r3, #1
 800271a:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800271c:	2300      	movs	r3, #0
 800271e:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002720:	2300      	movs	r3, #0
 8002722:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(Red_LED_GPIO_Port, &GPIO_InitStruct);
 8002724:	f107 0314 	add.w	r3, r7, #20
 8002728:	4619      	mov	r1, r3
 800272a:	4805      	ldr	r0, [pc, #20]	@ (8002740 <MX_GPIO_Init+0x10c>)
 800272c:	f000 fdbc 	bl	80032a8 <HAL_GPIO_Init>

	/* USER CODE BEGIN MX_GPIO_Init_2 */

	/* USER CODE END MX_GPIO_Init_2 */
}
 8002730:	bf00      	nop
 8002732:	3728      	adds	r7, #40	@ 0x28
 8002734:	46bd      	mov	sp, r7
 8002736:	bd80      	pop	{r7, pc}
 8002738:	58024400 	.word	0x58024400
 800273c:	58020400 	.word	0x58020400
 8002740:	58021000 	.word	0x58021000

08002744 <MPU_Config>:
/* USER CODE END 4 */

/* MPU Configuration */

void MPU_Config(void)
{
 8002744:	b580      	push	{r7, lr}
 8002746:	b084      	sub	sp, #16
 8002748:	af00      	add	r7, sp, #0
	MPU_Region_InitTypeDef MPU_InitStruct = {0};
 800274a:	463b      	mov	r3, r7
 800274c:	2200      	movs	r2, #0
 800274e:	601a      	str	r2, [r3, #0]
 8002750:	605a      	str	r2, [r3, #4]
 8002752:	609a      	str	r2, [r3, #8]
 8002754:	60da      	str	r2, [r3, #12]

	/* Disables the MPU */
	HAL_MPU_Disable();
 8002756:	f000 fd2f 	bl	80031b8 <HAL_MPU_Disable>

	/** Initializes and configures the Region and the memory to be protected
	 */
	MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 800275a:	2301      	movs	r3, #1
 800275c:	703b      	strb	r3, [r7, #0]
	MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 800275e:	2300      	movs	r3, #0
 8002760:	707b      	strb	r3, [r7, #1]
	MPU_InitStruct.BaseAddress = 0x0;
 8002762:	2300      	movs	r3, #0
 8002764:	607b      	str	r3, [r7, #4]
	MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 8002766:	231f      	movs	r3, #31
 8002768:	723b      	strb	r3, [r7, #8]
	MPU_InitStruct.SubRegionDisable = 0x87;
 800276a:	2387      	movs	r3, #135	@ 0x87
 800276c:	727b      	strb	r3, [r7, #9]
	MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 800276e:	2300      	movs	r3, #0
 8002770:	72bb      	strb	r3, [r7, #10]
	MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 8002772:	2300      	movs	r3, #0
 8002774:	72fb      	strb	r3, [r7, #11]
	MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 8002776:	2301      	movs	r3, #1
 8002778:	733b      	strb	r3, [r7, #12]
	MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 800277a:	2301      	movs	r3, #1
 800277c:	737b      	strb	r3, [r7, #13]
	MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 800277e:	2300      	movs	r3, #0
 8002780:	73bb      	strb	r3, [r7, #14]
	MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 8002782:	2300      	movs	r3, #0
 8002784:	73fb      	strb	r3, [r7, #15]

	HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8002786:	463b      	mov	r3, r7
 8002788:	4618      	mov	r0, r3
 800278a:	f000 fd4d 	bl	8003228 <HAL_MPU_ConfigRegion>
	/* Enables the MPU */
	HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 800278e:	2004      	movs	r0, #4
 8002790:	f000 fd2a 	bl	80031e8 <HAL_MPU_Enable>

}
 8002794:	bf00      	nop
 8002796:	3710      	adds	r7, #16
 8002798:	46bd      	mov	sp, r7
 800279a:	bd80      	pop	{r7, pc}

0800279c <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 800279c:	b480      	push	{r7}
 800279e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80027a0:	b672      	cpsid	i
}
 80027a2:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 80027a4:	bf00      	nop
 80027a6:	e7fd      	b.n	80027a4 <Error_Handler+0x8>

080027a8 <_write>:

extern UART_HandleTypeDef huart3;  // <-- change to your actual UART handle (huart1/3/…)

/* Redirect printf to UART */
// printf -> UART3 (so you can use printf anywhere)
int _write(int file, char *ptr, int len) {
 80027a8:	b580      	push	{r7, lr}
 80027aa:	b084      	sub	sp, #16
 80027ac:	af00      	add	r7, sp, #0
 80027ae:	60f8      	str	r0, [r7, #12]
 80027b0:	60b9      	str	r1, [r7, #8]
 80027b2:	607a      	str	r2, [r7, #4]
	HAL_UART_Transmit(&huart3, (uint8_t*)ptr, (uint16_t)len, HAL_MAX_DELAY);
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	b29a      	uxth	r2, r3
 80027b8:	f04f 33ff 	mov.w	r3, #4294967295
 80027bc:	68b9      	ldr	r1, [r7, #8]
 80027be:	4804      	ldr	r0, [pc, #16]	@ (80027d0 <_write+0x28>)
 80027c0:	f004 fc08 	bl	8006fd4 <HAL_UART_Transmit>
	return len;
 80027c4:	687b      	ldr	r3, [r7, #4]
}
 80027c6:	4618      	mov	r0, r3
 80027c8:	3710      	adds	r7, #16
 80027ca:	46bd      	mov	sp, r7
 80027cc:	bd80      	pop	{r7, pc}
 80027ce:	bf00      	nop
 80027d0:	2400029c 	.word	0x2400029c

080027d4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80027d4:	b480      	push	{r7}
 80027d6:	b083      	sub	sp, #12
 80027d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80027da:	4b0a      	ldr	r3, [pc, #40]	@ (8002804 <HAL_MspInit+0x30>)
 80027dc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80027e0:	4a08      	ldr	r2, [pc, #32]	@ (8002804 <HAL_MspInit+0x30>)
 80027e2:	f043 0302 	orr.w	r3, r3, #2
 80027e6:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 80027ea:	4b06      	ldr	r3, [pc, #24]	@ (8002804 <HAL_MspInit+0x30>)
 80027ec:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80027f0:	f003 0302 	and.w	r3, r3, #2
 80027f4:	607b      	str	r3, [r7, #4]
 80027f6:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80027f8:	bf00      	nop
 80027fa:	370c      	adds	r7, #12
 80027fc:	46bd      	mov	sp, r7
 80027fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002802:	4770      	bx	lr
 8002804:	58024400 	.word	0x58024400

08002808 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002808:	b580      	push	{r7, lr}
 800280a:	b0bc      	sub	sp, #240	@ 0xf0
 800280c:	af00      	add	r7, sp, #0
 800280e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002810:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8002814:	2200      	movs	r2, #0
 8002816:	601a      	str	r2, [r3, #0]
 8002818:	605a      	str	r2, [r3, #4]
 800281a:	609a      	str	r2, [r3, #8]
 800281c:	60da      	str	r2, [r3, #12]
 800281e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002820:	f107 0318 	add.w	r3, r7, #24
 8002824:	22c0      	movs	r2, #192	@ 0xc0
 8002826:	2100      	movs	r1, #0
 8002828:	4618      	mov	r0, r3
 800282a:	f006 fe6d 	bl	8009508 <memset>
  if(hi2c->Instance==I2C1)
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	4a4d      	ldr	r2, [pc, #308]	@ (8002968 <HAL_I2C_MspInit+0x160>)
 8002834:	4293      	cmp	r3, r2
 8002836:	d147      	bne.n	80028c8 <HAL_I2C_MspInit+0xc0>

    /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8002838:	f04f 0208 	mov.w	r2, #8
 800283c:	f04f 0300 	mov.w	r3, #0
 8002840:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 8002844:	2300      	movs	r3, #0
 8002846:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800284a:	f107 0318 	add.w	r3, r7, #24
 800284e:	4618      	mov	r0, r3
 8002850:	f002 fd44 	bl	80052dc <HAL_RCCEx_PeriphCLKConfig>
 8002854:	4603      	mov	r3, r0
 8002856:	2b00      	cmp	r3, #0
 8002858:	d001      	beq.n	800285e <HAL_I2C_MspInit+0x56>
    {
      Error_Handler();
 800285a:	f7ff ff9f 	bl	800279c <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800285e:	4b43      	ldr	r3, [pc, #268]	@ (800296c <HAL_I2C_MspInit+0x164>)
 8002860:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002864:	4a41      	ldr	r2, [pc, #260]	@ (800296c <HAL_I2C_MspInit+0x164>)
 8002866:	f043 0302 	orr.w	r3, r3, #2
 800286a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800286e:	4b3f      	ldr	r3, [pc, #252]	@ (800296c <HAL_I2C_MspInit+0x164>)
 8002870:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002874:	f003 0302 	and.w	r3, r3, #2
 8002878:	617b      	str	r3, [r7, #20]
 800287a:	697b      	ldr	r3, [r7, #20]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = i2c1_scl_Pin|i2c1_sclB9_Pin;
 800287c:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8002880:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002884:	2312      	movs	r3, #18
 8002886:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800288a:	2300      	movs	r3, #0
 800288c:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002890:	2300      	movs	r3, #0
 8002892:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002896:	2304      	movs	r3, #4
 8002898:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800289c:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 80028a0:	4619      	mov	r1, r3
 80028a2:	4833      	ldr	r0, [pc, #204]	@ (8002970 <HAL_I2C_MspInit+0x168>)
 80028a4:	f000 fd00 	bl	80032a8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80028a8:	4b30      	ldr	r3, [pc, #192]	@ (800296c <HAL_I2C_MspInit+0x164>)
 80028aa:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80028ae:	4a2f      	ldr	r2, [pc, #188]	@ (800296c <HAL_I2C_MspInit+0x164>)
 80028b0:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80028b4:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80028b8:	4b2c      	ldr	r3, [pc, #176]	@ (800296c <HAL_I2C_MspInit+0x164>)
 80028ba:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80028be:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80028c2:	613b      	str	r3, [r7, #16]
 80028c4:	693b      	ldr	r3, [r7, #16]
    /* USER CODE BEGIN I2C2_MspInit 1 */

    /* USER CODE END I2C2_MspInit 1 */
  }

}
 80028c6:	e04a      	b.n	800295e <HAL_I2C_MspInit+0x156>
  else if(hi2c->Instance==I2C2)
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	4a29      	ldr	r2, [pc, #164]	@ (8002974 <HAL_I2C_MspInit+0x16c>)
 80028ce:	4293      	cmp	r3, r2
 80028d0:	d145      	bne.n	800295e <HAL_I2C_MspInit+0x156>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 80028d2:	f04f 0208 	mov.w	r2, #8
 80028d6:	f04f 0300 	mov.w	r3, #0
 80028da:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 80028de:	2300      	movs	r3, #0
 80028e0:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80028e4:	f107 0318 	add.w	r3, r7, #24
 80028e8:	4618      	mov	r0, r3
 80028ea:	f002 fcf7 	bl	80052dc <HAL_RCCEx_PeriphCLKConfig>
 80028ee:	4603      	mov	r3, r0
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	d001      	beq.n	80028f8 <HAL_I2C_MspInit+0xf0>
      Error_Handler();
 80028f4:	f7ff ff52 	bl	800279c <Error_Handler>
    __HAL_RCC_GPIOF_CLK_ENABLE();
 80028f8:	4b1c      	ldr	r3, [pc, #112]	@ (800296c <HAL_I2C_MspInit+0x164>)
 80028fa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80028fe:	4a1b      	ldr	r2, [pc, #108]	@ (800296c <HAL_I2C_MspInit+0x164>)
 8002900:	f043 0320 	orr.w	r3, r3, #32
 8002904:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002908:	4b18      	ldr	r3, [pc, #96]	@ (800296c <HAL_I2C_MspInit+0x164>)
 800290a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800290e:	f003 0320 	and.w	r3, r3, #32
 8002912:	60fb      	str	r3, [r7, #12]
 8002914:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = i2c2_sda_Pin|i2c2_scl_Pin;
 8002916:	2303      	movs	r3, #3
 8002918:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800291c:	2312      	movs	r3, #18
 800291e:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002922:	2300      	movs	r3, #0
 8002924:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002928:	2300      	movs	r3, #0
 800292a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 800292e:	2304      	movs	r3, #4
 8002930:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002934:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8002938:	4619      	mov	r1, r3
 800293a:	480f      	ldr	r0, [pc, #60]	@ (8002978 <HAL_I2C_MspInit+0x170>)
 800293c:	f000 fcb4 	bl	80032a8 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8002940:	4b0a      	ldr	r3, [pc, #40]	@ (800296c <HAL_I2C_MspInit+0x164>)
 8002942:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002946:	4a09      	ldr	r2, [pc, #36]	@ (800296c <HAL_I2C_MspInit+0x164>)
 8002948:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800294c:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8002950:	4b06      	ldr	r3, [pc, #24]	@ (800296c <HAL_I2C_MspInit+0x164>)
 8002952:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002956:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800295a:	60bb      	str	r3, [r7, #8]
 800295c:	68bb      	ldr	r3, [r7, #8]
}
 800295e:	bf00      	nop
 8002960:	37f0      	adds	r7, #240	@ 0xf0
 8002962:	46bd      	mov	sp, r7
 8002964:	bd80      	pop	{r7, pc}
 8002966:	bf00      	nop
 8002968:	40005400 	.word	0x40005400
 800296c:	58024400 	.word	0x58024400
 8002970:	58020400 	.word	0x58020400
 8002974:	40005800 	.word	0x40005800
 8002978:	58021400 	.word	0x58021400

0800297c <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800297c:	b580      	push	{r7, lr}
 800297e:	b0bc      	sub	sp, #240	@ 0xf0
 8002980:	af00      	add	r7, sp, #0
 8002982:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002984:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8002988:	2200      	movs	r2, #0
 800298a:	601a      	str	r2, [r3, #0]
 800298c:	605a      	str	r2, [r3, #4]
 800298e:	609a      	str	r2, [r3, #8]
 8002990:	60da      	str	r2, [r3, #12]
 8002992:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002994:	f107 0318 	add.w	r3, r7, #24
 8002998:	22c0      	movs	r2, #192	@ 0xc0
 800299a:	2100      	movs	r1, #0
 800299c:	4618      	mov	r0, r3
 800299e:	f006 fdb3 	bl	8009508 <memset>
  if(huart->Instance==USART3)
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	4a4d      	ldr	r2, [pc, #308]	@ (8002adc <HAL_UART_MspInit+0x160>)
 80029a8:	4293      	cmp	r3, r2
 80029aa:	d147      	bne.n	8002a3c <HAL_UART_MspInit+0xc0>

    /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80029ac:	f04f 0202 	mov.w	r2, #2
 80029b0:	f04f 0300 	mov.w	r3, #0
 80029b4:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 80029b8:	2300      	movs	r3, #0
 80029ba:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80029be:	f107 0318 	add.w	r3, r7, #24
 80029c2:	4618      	mov	r0, r3
 80029c4:	f002 fc8a 	bl	80052dc <HAL_RCCEx_PeriphCLKConfig>
 80029c8:	4603      	mov	r3, r0
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d001      	beq.n	80029d2 <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 80029ce:	f7ff fee5 	bl	800279c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80029d2:	4b43      	ldr	r3, [pc, #268]	@ (8002ae0 <HAL_UART_MspInit+0x164>)
 80029d4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80029d8:	4a41      	ldr	r2, [pc, #260]	@ (8002ae0 <HAL_UART_MspInit+0x164>)
 80029da:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80029de:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80029e2:	4b3f      	ldr	r3, [pc, #252]	@ (8002ae0 <HAL_UART_MspInit+0x164>)
 80029e4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80029e8:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80029ec:	617b      	str	r3, [r7, #20]
 80029ee:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80029f0:	4b3b      	ldr	r3, [pc, #236]	@ (8002ae0 <HAL_UART_MspInit+0x164>)
 80029f2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80029f6:	4a3a      	ldr	r2, [pc, #232]	@ (8002ae0 <HAL_UART_MspInit+0x164>)
 80029f8:	f043 0308 	orr.w	r3, r3, #8
 80029fc:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002a00:	4b37      	ldr	r3, [pc, #220]	@ (8002ae0 <HAL_UART_MspInit+0x164>)
 8002a02:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002a06:	f003 0308 	and.w	r3, r3, #8
 8002a0a:	613b      	str	r3, [r7, #16]
 8002a0c:	693b      	ldr	r3, [r7, #16]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002a0e:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8002a12:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a16:	2302      	movs	r3, #2
 8002a18:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a1c:	2300      	movs	r3, #0
 8002a1e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a22:	2300      	movs	r3, #0
 8002a24:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002a28:	2307      	movs	r3, #7
 8002a2a:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002a2e:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8002a32:	4619      	mov	r1, r3
 8002a34:	482b      	ldr	r0, [pc, #172]	@ (8002ae4 <HAL_UART_MspInit+0x168>)
 8002a36:	f000 fc37 	bl	80032a8 <HAL_GPIO_Init>
    /* USER CODE BEGIN USART6_MspInit 1 */

    /* USER CODE END USART6_MspInit 1 */
  }

}
 8002a3a:	e04a      	b.n	8002ad2 <HAL_UART_MspInit+0x156>
  else if(huart->Instance==USART6)
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	4a29      	ldr	r2, [pc, #164]	@ (8002ae8 <HAL_UART_MspInit+0x16c>)
 8002a42:	4293      	cmp	r3, r2
 8002a44:	d145      	bne.n	8002ad2 <HAL_UART_MspInit+0x156>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART6;
 8002a46:	f04f 0201 	mov.w	r2, #1
 8002a4a:	f04f 0300 	mov.w	r3, #0
 8002a4e:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16CLKSOURCE_D2PCLK2;
 8002a52:	2300      	movs	r3, #0
 8002a54:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002a58:	f107 0318 	add.w	r3, r7, #24
 8002a5c:	4618      	mov	r0, r3
 8002a5e:	f002 fc3d 	bl	80052dc <HAL_RCCEx_PeriphCLKConfig>
 8002a62:	4603      	mov	r3, r0
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	d001      	beq.n	8002a6c <HAL_UART_MspInit+0xf0>
      Error_Handler();
 8002a68:	f7ff fe98 	bl	800279c <Error_Handler>
    __HAL_RCC_USART6_CLK_ENABLE();
 8002a6c:	4b1c      	ldr	r3, [pc, #112]	@ (8002ae0 <HAL_UART_MspInit+0x164>)
 8002a6e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002a72:	4a1b      	ldr	r2, [pc, #108]	@ (8002ae0 <HAL_UART_MspInit+0x164>)
 8002a74:	f043 0320 	orr.w	r3, r3, #32
 8002a78:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8002a7c:	4b18      	ldr	r3, [pc, #96]	@ (8002ae0 <HAL_UART_MspInit+0x164>)
 8002a7e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002a82:	f003 0320 	and.w	r3, r3, #32
 8002a86:	60fb      	str	r3, [r7, #12]
 8002a88:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002a8a:	4b15      	ldr	r3, [pc, #84]	@ (8002ae0 <HAL_UART_MspInit+0x164>)
 8002a8c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002a90:	4a13      	ldr	r2, [pc, #76]	@ (8002ae0 <HAL_UART_MspInit+0x164>)
 8002a92:	f043 0304 	orr.w	r3, r3, #4
 8002a96:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002a9a:	4b11      	ldr	r3, [pc, #68]	@ (8002ae0 <HAL_UART_MspInit+0x164>)
 8002a9c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002aa0:	f003 0304 	and.w	r3, r3, #4
 8002aa4:	60bb      	str	r3, [r7, #8]
 8002aa6:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002aa8:	23c0      	movs	r3, #192	@ 0xc0
 8002aaa:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002aae:	2302      	movs	r3, #2
 8002ab0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ab4:	2300      	movs	r3, #0
 8002ab6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002aba:	2300      	movs	r3, #0
 8002abc:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART6;
 8002ac0:	2307      	movs	r3, #7
 8002ac2:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002ac6:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8002aca:	4619      	mov	r1, r3
 8002acc:	4807      	ldr	r0, [pc, #28]	@ (8002aec <HAL_UART_MspInit+0x170>)
 8002ace:	f000 fbeb 	bl	80032a8 <HAL_GPIO_Init>
}
 8002ad2:	bf00      	nop
 8002ad4:	37f0      	adds	r7, #240	@ 0xf0
 8002ad6:	46bd      	mov	sp, r7
 8002ad8:	bd80      	pop	{r7, pc}
 8002ada:	bf00      	nop
 8002adc:	40004800 	.word	0x40004800
 8002ae0:	58024400 	.word	0x58024400
 8002ae4:	58020c00 	.word	0x58020c00
 8002ae8:	40011400 	.word	0x40011400
 8002aec:	58020800 	.word	0x58020800

08002af0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002af0:	b480      	push	{r7}
 8002af2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002af4:	bf00      	nop
 8002af6:	e7fd      	b.n	8002af4 <NMI_Handler+0x4>

08002af8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002af8:	b480      	push	{r7}
 8002afa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002afc:	bf00      	nop
 8002afe:	e7fd      	b.n	8002afc <HardFault_Handler+0x4>

08002b00 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002b00:	b480      	push	{r7}
 8002b02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002b04:	bf00      	nop
 8002b06:	e7fd      	b.n	8002b04 <MemManage_Handler+0x4>

08002b08 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002b08:	b480      	push	{r7}
 8002b0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002b0c:	bf00      	nop
 8002b0e:	e7fd      	b.n	8002b0c <BusFault_Handler+0x4>

08002b10 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002b10:	b480      	push	{r7}
 8002b12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002b14:	bf00      	nop
 8002b16:	e7fd      	b.n	8002b14 <UsageFault_Handler+0x4>

08002b18 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002b18:	b480      	push	{r7}
 8002b1a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002b1c:	bf00      	nop
 8002b1e:	46bd      	mov	sp, r7
 8002b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b24:	4770      	bx	lr

08002b26 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002b26:	b480      	push	{r7}
 8002b28:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002b2a:	bf00      	nop
 8002b2c:	46bd      	mov	sp, r7
 8002b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b32:	4770      	bx	lr

08002b34 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002b34:	b480      	push	{r7}
 8002b36:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002b38:	bf00      	nop
 8002b3a:	46bd      	mov	sp, r7
 8002b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b40:	4770      	bx	lr

08002b42 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002b42:	b580      	push	{r7, lr}
 8002b44:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002b46:	f000 fa03 	bl	8002f50 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002b4a:	bf00      	nop
 8002b4c:	bd80      	pop	{r7, pc}

08002b4e <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002b4e:	b480      	push	{r7}
 8002b50:	af00      	add	r7, sp, #0
  return 1;
 8002b52:	2301      	movs	r3, #1
}
 8002b54:	4618      	mov	r0, r3
 8002b56:	46bd      	mov	sp, r7
 8002b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b5c:	4770      	bx	lr

08002b5e <_kill>:

int _kill(int pid, int sig)
{
 8002b5e:	b580      	push	{r7, lr}
 8002b60:	b082      	sub	sp, #8
 8002b62:	af00      	add	r7, sp, #0
 8002b64:	6078      	str	r0, [r7, #4]
 8002b66:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002b68:	f006 fd20 	bl	80095ac <__errno>
 8002b6c:	4603      	mov	r3, r0
 8002b6e:	2216      	movs	r2, #22
 8002b70:	601a      	str	r2, [r3, #0]
  return -1;
 8002b72:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002b76:	4618      	mov	r0, r3
 8002b78:	3708      	adds	r7, #8
 8002b7a:	46bd      	mov	sp, r7
 8002b7c:	bd80      	pop	{r7, pc}

08002b7e <_exit>:

void _exit (int status)
{
 8002b7e:	b580      	push	{r7, lr}
 8002b80:	b082      	sub	sp, #8
 8002b82:	af00      	add	r7, sp, #0
 8002b84:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002b86:	f04f 31ff 	mov.w	r1, #4294967295
 8002b8a:	6878      	ldr	r0, [r7, #4]
 8002b8c:	f7ff ffe7 	bl	8002b5e <_kill>
  while (1) {}    /* Make sure we hang here */
 8002b90:	bf00      	nop
 8002b92:	e7fd      	b.n	8002b90 <_exit+0x12>

08002b94 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002b94:	b580      	push	{r7, lr}
 8002b96:	b086      	sub	sp, #24
 8002b98:	af00      	add	r7, sp, #0
 8002b9a:	60f8      	str	r0, [r7, #12]
 8002b9c:	60b9      	str	r1, [r7, #8]
 8002b9e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002ba0:	2300      	movs	r3, #0
 8002ba2:	617b      	str	r3, [r7, #20]
 8002ba4:	e00a      	b.n	8002bbc <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002ba6:	f3af 8000 	nop.w
 8002baa:	4601      	mov	r1, r0
 8002bac:	68bb      	ldr	r3, [r7, #8]
 8002bae:	1c5a      	adds	r2, r3, #1
 8002bb0:	60ba      	str	r2, [r7, #8]
 8002bb2:	b2ca      	uxtb	r2, r1
 8002bb4:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002bb6:	697b      	ldr	r3, [r7, #20]
 8002bb8:	3301      	adds	r3, #1
 8002bba:	617b      	str	r3, [r7, #20]
 8002bbc:	697a      	ldr	r2, [r7, #20]
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	429a      	cmp	r2, r3
 8002bc2:	dbf0      	blt.n	8002ba6 <_read+0x12>
  }

  return len;
 8002bc4:	687b      	ldr	r3, [r7, #4]
}
 8002bc6:	4618      	mov	r0, r3
 8002bc8:	3718      	adds	r7, #24
 8002bca:	46bd      	mov	sp, r7
 8002bcc:	bd80      	pop	{r7, pc}

08002bce <_close>:
  }
  return len;
}

int _close(int file)
{
 8002bce:	b480      	push	{r7}
 8002bd0:	b083      	sub	sp, #12
 8002bd2:	af00      	add	r7, sp, #0
 8002bd4:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002bd6:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002bda:	4618      	mov	r0, r3
 8002bdc:	370c      	adds	r7, #12
 8002bde:	46bd      	mov	sp, r7
 8002be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002be4:	4770      	bx	lr

08002be6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002be6:	b480      	push	{r7}
 8002be8:	b083      	sub	sp, #12
 8002bea:	af00      	add	r7, sp, #0
 8002bec:	6078      	str	r0, [r7, #4]
 8002bee:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002bf0:	683b      	ldr	r3, [r7, #0]
 8002bf2:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002bf6:	605a      	str	r2, [r3, #4]
  return 0;
 8002bf8:	2300      	movs	r3, #0
}
 8002bfa:	4618      	mov	r0, r3
 8002bfc:	370c      	adds	r7, #12
 8002bfe:	46bd      	mov	sp, r7
 8002c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c04:	4770      	bx	lr

08002c06 <_isatty>:

int _isatty(int file)
{
 8002c06:	b480      	push	{r7}
 8002c08:	b083      	sub	sp, #12
 8002c0a:	af00      	add	r7, sp, #0
 8002c0c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002c0e:	2301      	movs	r3, #1
}
 8002c10:	4618      	mov	r0, r3
 8002c12:	370c      	adds	r7, #12
 8002c14:	46bd      	mov	sp, r7
 8002c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c1a:	4770      	bx	lr

08002c1c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002c1c:	b480      	push	{r7}
 8002c1e:	b085      	sub	sp, #20
 8002c20:	af00      	add	r7, sp, #0
 8002c22:	60f8      	str	r0, [r7, #12]
 8002c24:	60b9      	str	r1, [r7, #8]
 8002c26:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002c28:	2300      	movs	r3, #0
}
 8002c2a:	4618      	mov	r0, r3
 8002c2c:	3714      	adds	r7, #20
 8002c2e:	46bd      	mov	sp, r7
 8002c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c34:	4770      	bx	lr
	...

08002c38 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002c38:	b580      	push	{r7, lr}
 8002c3a:	b086      	sub	sp, #24
 8002c3c:	af00      	add	r7, sp, #0
 8002c3e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002c40:	4a14      	ldr	r2, [pc, #80]	@ (8002c94 <_sbrk+0x5c>)
 8002c42:	4b15      	ldr	r3, [pc, #84]	@ (8002c98 <_sbrk+0x60>)
 8002c44:	1ad3      	subs	r3, r2, r3
 8002c46:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002c48:	697b      	ldr	r3, [r7, #20]
 8002c4a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002c4c:	4b13      	ldr	r3, [pc, #76]	@ (8002c9c <_sbrk+0x64>)
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	d102      	bne.n	8002c5a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002c54:	4b11      	ldr	r3, [pc, #68]	@ (8002c9c <_sbrk+0x64>)
 8002c56:	4a12      	ldr	r2, [pc, #72]	@ (8002ca0 <_sbrk+0x68>)
 8002c58:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002c5a:	4b10      	ldr	r3, [pc, #64]	@ (8002c9c <_sbrk+0x64>)
 8002c5c:	681a      	ldr	r2, [r3, #0]
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	4413      	add	r3, r2
 8002c62:	693a      	ldr	r2, [r7, #16]
 8002c64:	429a      	cmp	r2, r3
 8002c66:	d207      	bcs.n	8002c78 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002c68:	f006 fca0 	bl	80095ac <__errno>
 8002c6c:	4603      	mov	r3, r0
 8002c6e:	220c      	movs	r2, #12
 8002c70:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002c72:	f04f 33ff 	mov.w	r3, #4294967295
 8002c76:	e009      	b.n	8002c8c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002c78:	4b08      	ldr	r3, [pc, #32]	@ (8002c9c <_sbrk+0x64>)
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002c7e:	4b07      	ldr	r3, [pc, #28]	@ (8002c9c <_sbrk+0x64>)
 8002c80:	681a      	ldr	r2, [r3, #0]
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	4413      	add	r3, r2
 8002c86:	4a05      	ldr	r2, [pc, #20]	@ (8002c9c <_sbrk+0x64>)
 8002c88:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002c8a:	68fb      	ldr	r3, [r7, #12]
}
 8002c8c:	4618      	mov	r0, r3
 8002c8e:	3718      	adds	r7, #24
 8002c90:	46bd      	mov	sp, r7
 8002c92:	bd80      	pop	{r7, pc}
 8002c94:	24080000 	.word	0x24080000
 8002c98:	00000400 	.word	0x00000400
 8002c9c:	2400046c 	.word	0x2400046c
 8002ca0:	240005c0 	.word	0x240005c0

08002ca4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002ca4:	b480      	push	{r7}
 8002ca6:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8002ca8:	4b43      	ldr	r3, [pc, #268]	@ (8002db8 <SystemInit+0x114>)
 8002caa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002cae:	4a42      	ldr	r2, [pc, #264]	@ (8002db8 <SystemInit+0x114>)
 8002cb0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002cb4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8002cb8:	4b40      	ldr	r3, [pc, #256]	@ (8002dbc <SystemInit+0x118>)
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	f003 030f 	and.w	r3, r3, #15
 8002cc0:	2b06      	cmp	r3, #6
 8002cc2:	d807      	bhi.n	8002cd4 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8002cc4:	4b3d      	ldr	r3, [pc, #244]	@ (8002dbc <SystemInit+0x118>)
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	f023 030f 	bic.w	r3, r3, #15
 8002ccc:	4a3b      	ldr	r2, [pc, #236]	@ (8002dbc <SystemInit+0x118>)
 8002cce:	f043 0307 	orr.w	r3, r3, #7
 8002cd2:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8002cd4:	4b3a      	ldr	r3, [pc, #232]	@ (8002dc0 <SystemInit+0x11c>)
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	4a39      	ldr	r2, [pc, #228]	@ (8002dc0 <SystemInit+0x11c>)
 8002cda:	f043 0301 	orr.w	r3, r3, #1
 8002cde:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8002ce0:	4b37      	ldr	r3, [pc, #220]	@ (8002dc0 <SystemInit+0x11c>)
 8002ce2:	2200      	movs	r2, #0
 8002ce4:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8002ce6:	4b36      	ldr	r3, [pc, #216]	@ (8002dc0 <SystemInit+0x11c>)
 8002ce8:	681a      	ldr	r2, [r3, #0]
 8002cea:	4935      	ldr	r1, [pc, #212]	@ (8002dc0 <SystemInit+0x11c>)
 8002cec:	4b35      	ldr	r3, [pc, #212]	@ (8002dc4 <SystemInit+0x120>)
 8002cee:	4013      	ands	r3, r2
 8002cf0:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8002cf2:	4b32      	ldr	r3, [pc, #200]	@ (8002dbc <SystemInit+0x118>)
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	f003 0308 	and.w	r3, r3, #8
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d007      	beq.n	8002d0e <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8002cfe:	4b2f      	ldr	r3, [pc, #188]	@ (8002dbc <SystemInit+0x118>)
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	f023 030f 	bic.w	r3, r3, #15
 8002d06:	4a2d      	ldr	r2, [pc, #180]	@ (8002dbc <SystemInit+0x118>)
 8002d08:	f043 0307 	orr.w	r3, r3, #7
 8002d0c:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8002d0e:	4b2c      	ldr	r3, [pc, #176]	@ (8002dc0 <SystemInit+0x11c>)
 8002d10:	2200      	movs	r2, #0
 8002d12:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8002d14:	4b2a      	ldr	r3, [pc, #168]	@ (8002dc0 <SystemInit+0x11c>)
 8002d16:	2200      	movs	r2, #0
 8002d18:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8002d1a:	4b29      	ldr	r3, [pc, #164]	@ (8002dc0 <SystemInit+0x11c>)
 8002d1c:	2200      	movs	r2, #0
 8002d1e:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8002d20:	4b27      	ldr	r3, [pc, #156]	@ (8002dc0 <SystemInit+0x11c>)
 8002d22:	4a29      	ldr	r2, [pc, #164]	@ (8002dc8 <SystemInit+0x124>)
 8002d24:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8002d26:	4b26      	ldr	r3, [pc, #152]	@ (8002dc0 <SystemInit+0x11c>)
 8002d28:	4a28      	ldr	r2, [pc, #160]	@ (8002dcc <SystemInit+0x128>)
 8002d2a:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8002d2c:	4b24      	ldr	r3, [pc, #144]	@ (8002dc0 <SystemInit+0x11c>)
 8002d2e:	4a28      	ldr	r2, [pc, #160]	@ (8002dd0 <SystemInit+0x12c>)
 8002d30:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8002d32:	4b23      	ldr	r3, [pc, #140]	@ (8002dc0 <SystemInit+0x11c>)
 8002d34:	2200      	movs	r2, #0
 8002d36:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8002d38:	4b21      	ldr	r3, [pc, #132]	@ (8002dc0 <SystemInit+0x11c>)
 8002d3a:	4a25      	ldr	r2, [pc, #148]	@ (8002dd0 <SystemInit+0x12c>)
 8002d3c:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8002d3e:	4b20      	ldr	r3, [pc, #128]	@ (8002dc0 <SystemInit+0x11c>)
 8002d40:	2200      	movs	r2, #0
 8002d42:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8002d44:	4b1e      	ldr	r3, [pc, #120]	@ (8002dc0 <SystemInit+0x11c>)
 8002d46:	4a22      	ldr	r2, [pc, #136]	@ (8002dd0 <SystemInit+0x12c>)
 8002d48:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8002d4a:	4b1d      	ldr	r3, [pc, #116]	@ (8002dc0 <SystemInit+0x11c>)
 8002d4c:	2200      	movs	r2, #0
 8002d4e:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8002d50:	4b1b      	ldr	r3, [pc, #108]	@ (8002dc0 <SystemInit+0x11c>)
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	4a1a      	ldr	r2, [pc, #104]	@ (8002dc0 <SystemInit+0x11c>)
 8002d56:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002d5a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8002d5c:	4b18      	ldr	r3, [pc, #96]	@ (8002dc0 <SystemInit+0x11c>)
 8002d5e:	2200      	movs	r2, #0
 8002d60:	661a      	str	r2, [r3, #96]	@ 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8002d62:	4b1c      	ldr	r3, [pc, #112]	@ (8002dd4 <SystemInit+0x130>)
 8002d64:	681a      	ldr	r2, [r3, #0]
 8002d66:	4b1c      	ldr	r3, [pc, #112]	@ (8002dd8 <SystemInit+0x134>)
 8002d68:	4013      	ands	r3, r2
 8002d6a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002d6e:	d202      	bcs.n	8002d76 <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8002d70:	4b1a      	ldr	r3, [pc, #104]	@ (8002ddc <SystemInit+0x138>)
 8002d72:	2201      	movs	r2, #1
 8002d74:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D2 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#else
  if(READ_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN) == 0U)
 8002d76:	4b12      	ldr	r3, [pc, #72]	@ (8002dc0 <SystemInit+0x11c>)
 8002d78:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8002d7c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d113      	bne.n	8002dac <SystemInit+0x108>
  {
    /* Enable the FMC interface clock */
    SET_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 8002d84:	4b0e      	ldr	r3, [pc, #56]	@ (8002dc0 <SystemInit+0x11c>)
 8002d86:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8002d8a:	4a0d      	ldr	r2, [pc, #52]	@ (8002dc0 <SystemInit+0x11c>)
 8002d8c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8002d90:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
    /*
     * Disable the FMC bank1 (enabled after reset).
     * This, prevents CPU speculation access on this bank which blocks the use of FMC during
     * 24us. During this time the others FMC master (such as LTDC) cannot use it!
     */
    FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8002d94:	4b12      	ldr	r3, [pc, #72]	@ (8002de0 <SystemInit+0x13c>)
 8002d96:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8002d9a:	601a      	str	r2, [r3, #0]

    /* Disable the FMC interface clock */
    CLEAR_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 8002d9c:	4b08      	ldr	r3, [pc, #32]	@ (8002dc0 <SystemInit+0x11c>)
 8002d9e:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8002da2:	4a07      	ldr	r2, [pc, #28]	@ (8002dc0 <SystemInit+0x11c>)
 8002da4:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8002da8:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8002dac:	bf00      	nop
 8002dae:	46bd      	mov	sp, r7
 8002db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002db4:	4770      	bx	lr
 8002db6:	bf00      	nop
 8002db8:	e000ed00 	.word	0xe000ed00
 8002dbc:	52002000 	.word	0x52002000
 8002dc0:	58024400 	.word	0x58024400
 8002dc4:	eaf6ed7f 	.word	0xeaf6ed7f
 8002dc8:	02020200 	.word	0x02020200
 8002dcc:	01ff0000 	.word	0x01ff0000
 8002dd0:	01010280 	.word	0x01010280
 8002dd4:	5c001000 	.word	0x5c001000
 8002dd8:	ffff0000 	.word	0xffff0000
 8002ddc:	51008108 	.word	0x51008108
 8002de0:	52004000 	.word	0x52004000

08002de4 <ExitRun0Mode>:
  *
  * @param  None
  * @retval None
  */
void ExitRun0Mode(void)
{
 8002de4:	b480      	push	{r7}
 8002de6:	af00      	add	r7, sp, #0
  #if defined(SMPS)
    /* Exit Run* mode by disabling SMPS and enabling LDO */
    PWR->CR3 = (PWR->CR3 & ~PWR_CR3_SMPSEN) | PWR_CR3_LDOEN;
  #else
    /* Enable LDO mode */
    PWR->CR3 |= PWR_CR3_LDOEN;
 8002de8:	4b09      	ldr	r3, [pc, #36]	@ (8002e10 <ExitRun0Mode+0x2c>)
 8002dea:	68db      	ldr	r3, [r3, #12]
 8002dec:	4a08      	ldr	r2, [pc, #32]	@ (8002e10 <ExitRun0Mode+0x2c>)
 8002dee:	f043 0302 	orr.w	r3, r3, #2
 8002df2:	60d3      	str	r3, [r2, #12]
  #endif /* SMPS */
  /* Wait till voltage level flag is set */
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
 8002df4:	bf00      	nop
 8002df6:	4b06      	ldr	r3, [pc, #24]	@ (8002e10 <ExitRun0Mode+0x2c>)
 8002df8:	685b      	ldr	r3, [r3, #4]
 8002dfa:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d0f9      	beq.n	8002df6 <ExitRun0Mode+0x12>
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
  {}
#else
  /* No system power supply configuration is selected at exit Run* mode */
#endif /* USE_PWR_LDO_SUPPLY */
}
 8002e02:	bf00      	nop
 8002e04:	bf00      	nop
 8002e06:	46bd      	mov	sp, r7
 8002e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e0c:	4770      	bx	lr
 8002e0e:	bf00      	nop
 8002e10:	58024800 	.word	0x58024800

08002e14 <Reset_Handler>:
*/

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
	Reset_Handler:  ldr   sp, =_estack      /* set stack pointer */
 8002e14:	f8df d038 	ldr.w	sp, [pc, #56]	@ 8002e50 <LoopFillZerobss+0xe>

/* Call the ExitRun0Mode function to configure the power supply */
  bl  ExitRun0Mode
 8002e18:	f7ff ffe4 	bl	8002de4 <ExitRun0Mode>
/* Call the clock system initialization function.*/
  bl  SystemInit
 8002e1c:	f7ff ff42 	bl	8002ca4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002e20:	480c      	ldr	r0, [pc, #48]	@ (8002e54 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002e22:	490d      	ldr	r1, [pc, #52]	@ (8002e58 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002e24:	4a0d      	ldr	r2, [pc, #52]	@ (8002e5c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002e26:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002e28:	e002      	b.n	8002e30 <LoopCopyDataInit>

08002e2a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002e2a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002e2c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002e2e:	3304      	adds	r3, #4

08002e30 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002e30:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002e32:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002e34:	d3f9      	bcc.n	8002e2a <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002e36:	4a0a      	ldr	r2, [pc, #40]	@ (8002e60 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002e38:	4c0a      	ldr	r4, [pc, #40]	@ (8002e64 <LoopFillZerobss+0x22>)
  movs r3, #0
 8002e3a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002e3c:	e001      	b.n	8002e42 <LoopFillZerobss>

08002e3e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002e3e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002e40:	3204      	adds	r2, #4

08002e42 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002e42:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002e44:	d3fb      	bcc.n	8002e3e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002e46:	f006 fbb7 	bl	80095b8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002e4a:	f7ff f961 	bl	8002110 <main>
  bx  lr
 8002e4e:	4770      	bx	lr
	Reset_Handler:  ldr   sp, =_estack      /* set stack pointer */
 8002e50:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8002e54:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8002e58:	240001d8 	.word	0x240001d8
  ldr r2, =_sidata
 8002e5c:	0800b91c 	.word	0x0800b91c
  ldr r2, =_sbss
 8002e60:	240001d8 	.word	0x240001d8
  ldr r4, =_ebss
 8002e64:	240005c0 	.word	0x240005c0

08002e68 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002e68:	e7fe      	b.n	8002e68 <ADC3_IRQHandler>
	...

08002e6c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002e6c:	b580      	push	{r7, lr}
 8002e6e:	b082      	sub	sp, #8
 8002e70:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002e72:	2003      	movs	r0, #3
 8002e74:	f000 f96e 	bl	8003154 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8002e78:	f002 f85a 	bl	8004f30 <HAL_RCC_GetSysClockFreq>
 8002e7c:	4602      	mov	r2, r0
 8002e7e:	4b15      	ldr	r3, [pc, #84]	@ (8002ed4 <HAL_Init+0x68>)
 8002e80:	699b      	ldr	r3, [r3, #24]
 8002e82:	0a1b      	lsrs	r3, r3, #8
 8002e84:	f003 030f 	and.w	r3, r3, #15
 8002e88:	4913      	ldr	r1, [pc, #76]	@ (8002ed8 <HAL_Init+0x6c>)
 8002e8a:	5ccb      	ldrb	r3, [r1, r3]
 8002e8c:	f003 031f 	and.w	r3, r3, #31
 8002e90:	fa22 f303 	lsr.w	r3, r2, r3
 8002e94:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002e96:	4b0f      	ldr	r3, [pc, #60]	@ (8002ed4 <HAL_Init+0x68>)
 8002e98:	699b      	ldr	r3, [r3, #24]
 8002e9a:	f003 030f 	and.w	r3, r3, #15
 8002e9e:	4a0e      	ldr	r2, [pc, #56]	@ (8002ed8 <HAL_Init+0x6c>)
 8002ea0:	5cd3      	ldrb	r3, [r2, r3]
 8002ea2:	f003 031f 	and.w	r3, r3, #31
 8002ea6:	687a      	ldr	r2, [r7, #4]
 8002ea8:	fa22 f303 	lsr.w	r3, r2, r3
 8002eac:	4a0b      	ldr	r2, [pc, #44]	@ (8002edc <HAL_Init+0x70>)
 8002eae:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002eb0:	4a0b      	ldr	r2, [pc, #44]	@ (8002ee0 <HAL_Init+0x74>)
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002eb6:	200f      	movs	r0, #15
 8002eb8:	f000 f814 	bl	8002ee4 <HAL_InitTick>
 8002ebc:	4603      	mov	r3, r0
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d001      	beq.n	8002ec6 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8002ec2:	2301      	movs	r3, #1
 8002ec4:	e002      	b.n	8002ecc <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8002ec6:	f7ff fc85 	bl	80027d4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002eca:	2300      	movs	r3, #0
}
 8002ecc:	4618      	mov	r0, r3
 8002ece:	3708      	adds	r7, #8
 8002ed0:	46bd      	mov	sp, r7
 8002ed2:	bd80      	pop	{r7, pc}
 8002ed4:	58024400 	.word	0x58024400
 8002ed8:	0800b2ec 	.word	0x0800b2ec
 8002edc:	24000004 	.word	0x24000004
 8002ee0:	24000000 	.word	0x24000000

08002ee4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002ee4:	b580      	push	{r7, lr}
 8002ee6:	b082      	sub	sp, #8
 8002ee8:	af00      	add	r7, sp, #0
 8002eea:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8002eec:	4b15      	ldr	r3, [pc, #84]	@ (8002f44 <HAL_InitTick+0x60>)
 8002eee:	781b      	ldrb	r3, [r3, #0]
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	d101      	bne.n	8002ef8 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8002ef4:	2301      	movs	r3, #1
 8002ef6:	e021      	b.n	8002f3c <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8002ef8:	4b13      	ldr	r3, [pc, #76]	@ (8002f48 <HAL_InitTick+0x64>)
 8002efa:	681a      	ldr	r2, [r3, #0]
 8002efc:	4b11      	ldr	r3, [pc, #68]	@ (8002f44 <HAL_InitTick+0x60>)
 8002efe:	781b      	ldrb	r3, [r3, #0]
 8002f00:	4619      	mov	r1, r3
 8002f02:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002f06:	fbb3 f3f1 	udiv	r3, r3, r1
 8002f0a:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f0e:	4618      	mov	r0, r3
 8002f10:	f000 f945 	bl	800319e <HAL_SYSTICK_Config>
 8002f14:	4603      	mov	r3, r0
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d001      	beq.n	8002f1e <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8002f1a:	2301      	movs	r3, #1
 8002f1c:	e00e      	b.n	8002f3c <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	2b0f      	cmp	r3, #15
 8002f22:	d80a      	bhi.n	8002f3a <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002f24:	2200      	movs	r2, #0
 8002f26:	6879      	ldr	r1, [r7, #4]
 8002f28:	f04f 30ff 	mov.w	r0, #4294967295
 8002f2c:	f000 f91d 	bl	800316a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002f30:	4a06      	ldr	r2, [pc, #24]	@ (8002f4c <HAL_InitTick+0x68>)
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002f36:	2300      	movs	r3, #0
 8002f38:	e000      	b.n	8002f3c <HAL_InitTick+0x58>
    return HAL_ERROR;
 8002f3a:	2301      	movs	r3, #1
}
 8002f3c:	4618      	mov	r0, r3
 8002f3e:	3708      	adds	r7, #8
 8002f40:	46bd      	mov	sp, r7
 8002f42:	bd80      	pop	{r7, pc}
 8002f44:	2400000c 	.word	0x2400000c
 8002f48:	24000000 	.word	0x24000000
 8002f4c:	24000008 	.word	0x24000008

08002f50 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002f50:	b480      	push	{r7}
 8002f52:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002f54:	4b06      	ldr	r3, [pc, #24]	@ (8002f70 <HAL_IncTick+0x20>)
 8002f56:	781b      	ldrb	r3, [r3, #0]
 8002f58:	461a      	mov	r2, r3
 8002f5a:	4b06      	ldr	r3, [pc, #24]	@ (8002f74 <HAL_IncTick+0x24>)
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	4413      	add	r3, r2
 8002f60:	4a04      	ldr	r2, [pc, #16]	@ (8002f74 <HAL_IncTick+0x24>)
 8002f62:	6013      	str	r3, [r2, #0]
}
 8002f64:	bf00      	nop
 8002f66:	46bd      	mov	sp, r7
 8002f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f6c:	4770      	bx	lr
 8002f6e:	bf00      	nop
 8002f70:	2400000c 	.word	0x2400000c
 8002f74:	24000470 	.word	0x24000470

08002f78 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002f78:	b480      	push	{r7}
 8002f7a:	af00      	add	r7, sp, #0
  return uwTick;
 8002f7c:	4b03      	ldr	r3, [pc, #12]	@ (8002f8c <HAL_GetTick+0x14>)
 8002f7e:	681b      	ldr	r3, [r3, #0]
}
 8002f80:	4618      	mov	r0, r3
 8002f82:	46bd      	mov	sp, r7
 8002f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f88:	4770      	bx	lr
 8002f8a:	bf00      	nop
 8002f8c:	24000470 	.word	0x24000470

08002f90 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002f90:	b580      	push	{r7, lr}
 8002f92:	b084      	sub	sp, #16
 8002f94:	af00      	add	r7, sp, #0
 8002f96:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002f98:	f7ff ffee 	bl	8002f78 <HAL_GetTick>
 8002f9c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002fa8:	d005      	beq.n	8002fb6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002faa:	4b0a      	ldr	r3, [pc, #40]	@ (8002fd4 <HAL_Delay+0x44>)
 8002fac:	781b      	ldrb	r3, [r3, #0]
 8002fae:	461a      	mov	r2, r3
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	4413      	add	r3, r2
 8002fb4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002fb6:	bf00      	nop
 8002fb8:	f7ff ffde 	bl	8002f78 <HAL_GetTick>
 8002fbc:	4602      	mov	r2, r0
 8002fbe:	68bb      	ldr	r3, [r7, #8]
 8002fc0:	1ad3      	subs	r3, r2, r3
 8002fc2:	68fa      	ldr	r2, [r7, #12]
 8002fc4:	429a      	cmp	r2, r3
 8002fc6:	d8f7      	bhi.n	8002fb8 <HAL_Delay+0x28>
  {
  }
}
 8002fc8:	bf00      	nop
 8002fca:	bf00      	nop
 8002fcc:	3710      	adds	r7, #16
 8002fce:	46bd      	mov	sp, r7
 8002fd0:	bd80      	pop	{r7, pc}
 8002fd2:	bf00      	nop
 8002fd4:	2400000c 	.word	0x2400000c

08002fd8 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8002fd8:	b480      	push	{r7}
 8002fda:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8002fdc:	4b03      	ldr	r3, [pc, #12]	@ (8002fec <HAL_GetREVID+0x14>)
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	0c1b      	lsrs	r3, r3, #16
}
 8002fe2:	4618      	mov	r0, r3
 8002fe4:	46bd      	mov	sp, r7
 8002fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fea:	4770      	bx	lr
 8002fec:	5c001000 	.word	0x5c001000

08002ff0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002ff0:	b480      	push	{r7}
 8002ff2:	b085      	sub	sp, #20
 8002ff4:	af00      	add	r7, sp, #0
 8002ff6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	f003 0307 	and.w	r3, r3, #7
 8002ffe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003000:	4b0b      	ldr	r3, [pc, #44]	@ (8003030 <__NVIC_SetPriorityGrouping+0x40>)
 8003002:	68db      	ldr	r3, [r3, #12]
 8003004:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003006:	68ba      	ldr	r2, [r7, #8]
 8003008:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800300c:	4013      	ands	r3, r2
 800300e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003014:	68bb      	ldr	r3, [r7, #8]
 8003016:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8003018:	4b06      	ldr	r3, [pc, #24]	@ (8003034 <__NVIC_SetPriorityGrouping+0x44>)
 800301a:	4313      	orrs	r3, r2
 800301c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800301e:	4a04      	ldr	r2, [pc, #16]	@ (8003030 <__NVIC_SetPriorityGrouping+0x40>)
 8003020:	68bb      	ldr	r3, [r7, #8]
 8003022:	60d3      	str	r3, [r2, #12]
}
 8003024:	bf00      	nop
 8003026:	3714      	adds	r7, #20
 8003028:	46bd      	mov	sp, r7
 800302a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800302e:	4770      	bx	lr
 8003030:	e000ed00 	.word	0xe000ed00
 8003034:	05fa0000 	.word	0x05fa0000

08003038 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003038:	b480      	push	{r7}
 800303a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800303c:	4b04      	ldr	r3, [pc, #16]	@ (8003050 <__NVIC_GetPriorityGrouping+0x18>)
 800303e:	68db      	ldr	r3, [r3, #12]
 8003040:	0a1b      	lsrs	r3, r3, #8
 8003042:	f003 0307 	and.w	r3, r3, #7
}
 8003046:	4618      	mov	r0, r3
 8003048:	46bd      	mov	sp, r7
 800304a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800304e:	4770      	bx	lr
 8003050:	e000ed00 	.word	0xe000ed00

08003054 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003054:	b480      	push	{r7}
 8003056:	b083      	sub	sp, #12
 8003058:	af00      	add	r7, sp, #0
 800305a:	4603      	mov	r3, r0
 800305c:	6039      	str	r1, [r7, #0]
 800305e:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8003060:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003064:	2b00      	cmp	r3, #0
 8003066:	db0a      	blt.n	800307e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003068:	683b      	ldr	r3, [r7, #0]
 800306a:	b2da      	uxtb	r2, r3
 800306c:	490c      	ldr	r1, [pc, #48]	@ (80030a0 <__NVIC_SetPriority+0x4c>)
 800306e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003072:	0112      	lsls	r2, r2, #4
 8003074:	b2d2      	uxtb	r2, r2
 8003076:	440b      	add	r3, r1
 8003078:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800307c:	e00a      	b.n	8003094 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800307e:	683b      	ldr	r3, [r7, #0]
 8003080:	b2da      	uxtb	r2, r3
 8003082:	4908      	ldr	r1, [pc, #32]	@ (80030a4 <__NVIC_SetPriority+0x50>)
 8003084:	88fb      	ldrh	r3, [r7, #6]
 8003086:	f003 030f 	and.w	r3, r3, #15
 800308a:	3b04      	subs	r3, #4
 800308c:	0112      	lsls	r2, r2, #4
 800308e:	b2d2      	uxtb	r2, r2
 8003090:	440b      	add	r3, r1
 8003092:	761a      	strb	r2, [r3, #24]
}
 8003094:	bf00      	nop
 8003096:	370c      	adds	r7, #12
 8003098:	46bd      	mov	sp, r7
 800309a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800309e:	4770      	bx	lr
 80030a0:	e000e100 	.word	0xe000e100
 80030a4:	e000ed00 	.word	0xe000ed00

080030a8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80030a8:	b480      	push	{r7}
 80030aa:	b089      	sub	sp, #36	@ 0x24
 80030ac:	af00      	add	r7, sp, #0
 80030ae:	60f8      	str	r0, [r7, #12]
 80030b0:	60b9      	str	r1, [r7, #8]
 80030b2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	f003 0307 	and.w	r3, r3, #7
 80030ba:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80030bc:	69fb      	ldr	r3, [r7, #28]
 80030be:	f1c3 0307 	rsb	r3, r3, #7
 80030c2:	2b04      	cmp	r3, #4
 80030c4:	bf28      	it	cs
 80030c6:	2304      	movcs	r3, #4
 80030c8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80030ca:	69fb      	ldr	r3, [r7, #28]
 80030cc:	3304      	adds	r3, #4
 80030ce:	2b06      	cmp	r3, #6
 80030d0:	d902      	bls.n	80030d8 <NVIC_EncodePriority+0x30>
 80030d2:	69fb      	ldr	r3, [r7, #28]
 80030d4:	3b03      	subs	r3, #3
 80030d6:	e000      	b.n	80030da <NVIC_EncodePriority+0x32>
 80030d8:	2300      	movs	r3, #0
 80030da:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80030dc:	f04f 32ff 	mov.w	r2, #4294967295
 80030e0:	69bb      	ldr	r3, [r7, #24]
 80030e2:	fa02 f303 	lsl.w	r3, r2, r3
 80030e6:	43da      	mvns	r2, r3
 80030e8:	68bb      	ldr	r3, [r7, #8]
 80030ea:	401a      	ands	r2, r3
 80030ec:	697b      	ldr	r3, [r7, #20]
 80030ee:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80030f0:	f04f 31ff 	mov.w	r1, #4294967295
 80030f4:	697b      	ldr	r3, [r7, #20]
 80030f6:	fa01 f303 	lsl.w	r3, r1, r3
 80030fa:	43d9      	mvns	r1, r3
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003100:	4313      	orrs	r3, r2
         );
}
 8003102:	4618      	mov	r0, r3
 8003104:	3724      	adds	r7, #36	@ 0x24
 8003106:	46bd      	mov	sp, r7
 8003108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800310c:	4770      	bx	lr
	...

08003110 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003110:	b580      	push	{r7, lr}
 8003112:	b082      	sub	sp, #8
 8003114:	af00      	add	r7, sp, #0
 8003116:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	3b01      	subs	r3, #1
 800311c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003120:	d301      	bcc.n	8003126 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003122:	2301      	movs	r3, #1
 8003124:	e00f      	b.n	8003146 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003126:	4a0a      	ldr	r2, [pc, #40]	@ (8003150 <SysTick_Config+0x40>)
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	3b01      	subs	r3, #1
 800312c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800312e:	210f      	movs	r1, #15
 8003130:	f04f 30ff 	mov.w	r0, #4294967295
 8003134:	f7ff ff8e 	bl	8003054 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003138:	4b05      	ldr	r3, [pc, #20]	@ (8003150 <SysTick_Config+0x40>)
 800313a:	2200      	movs	r2, #0
 800313c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800313e:	4b04      	ldr	r3, [pc, #16]	@ (8003150 <SysTick_Config+0x40>)
 8003140:	2207      	movs	r2, #7
 8003142:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003144:	2300      	movs	r3, #0
}
 8003146:	4618      	mov	r0, r3
 8003148:	3708      	adds	r7, #8
 800314a:	46bd      	mov	sp, r7
 800314c:	bd80      	pop	{r7, pc}
 800314e:	bf00      	nop
 8003150:	e000e010 	.word	0xe000e010

08003154 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003154:	b580      	push	{r7, lr}
 8003156:	b082      	sub	sp, #8
 8003158:	af00      	add	r7, sp, #0
 800315a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800315c:	6878      	ldr	r0, [r7, #4]
 800315e:	f7ff ff47 	bl	8002ff0 <__NVIC_SetPriorityGrouping>
}
 8003162:	bf00      	nop
 8003164:	3708      	adds	r7, #8
 8003166:	46bd      	mov	sp, r7
 8003168:	bd80      	pop	{r7, pc}

0800316a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800316a:	b580      	push	{r7, lr}
 800316c:	b086      	sub	sp, #24
 800316e:	af00      	add	r7, sp, #0
 8003170:	4603      	mov	r3, r0
 8003172:	60b9      	str	r1, [r7, #8]
 8003174:	607a      	str	r2, [r7, #4]
 8003176:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003178:	f7ff ff5e 	bl	8003038 <__NVIC_GetPriorityGrouping>
 800317c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800317e:	687a      	ldr	r2, [r7, #4]
 8003180:	68b9      	ldr	r1, [r7, #8]
 8003182:	6978      	ldr	r0, [r7, #20]
 8003184:	f7ff ff90 	bl	80030a8 <NVIC_EncodePriority>
 8003188:	4602      	mov	r2, r0
 800318a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800318e:	4611      	mov	r1, r2
 8003190:	4618      	mov	r0, r3
 8003192:	f7ff ff5f 	bl	8003054 <__NVIC_SetPriority>
}
 8003196:	bf00      	nop
 8003198:	3718      	adds	r7, #24
 800319a:	46bd      	mov	sp, r7
 800319c:	bd80      	pop	{r7, pc}

0800319e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800319e:	b580      	push	{r7, lr}
 80031a0:	b082      	sub	sp, #8
 80031a2:	af00      	add	r7, sp, #0
 80031a4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80031a6:	6878      	ldr	r0, [r7, #4]
 80031a8:	f7ff ffb2 	bl	8003110 <SysTick_Config>
 80031ac:	4603      	mov	r3, r0
}
 80031ae:	4618      	mov	r0, r3
 80031b0:	3708      	adds	r7, #8
 80031b2:	46bd      	mov	sp, r7
 80031b4:	bd80      	pop	{r7, pc}
	...

080031b8 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 80031b8:	b480      	push	{r7}
 80031ba:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 80031bc:	f3bf 8f5f 	dmb	sy
}
 80031c0:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 80031c2:	4b07      	ldr	r3, [pc, #28]	@ (80031e0 <HAL_MPU_Disable+0x28>)
 80031c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031c6:	4a06      	ldr	r2, [pc, #24]	@ (80031e0 <HAL_MPU_Disable+0x28>)
 80031c8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80031cc:	6253      	str	r3, [r2, #36]	@ 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 80031ce:	4b05      	ldr	r3, [pc, #20]	@ (80031e4 <HAL_MPU_Disable+0x2c>)
 80031d0:	2200      	movs	r2, #0
 80031d2:	605a      	str	r2, [r3, #4]
}
 80031d4:	bf00      	nop
 80031d6:	46bd      	mov	sp, r7
 80031d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031dc:	4770      	bx	lr
 80031de:	bf00      	nop
 80031e0:	e000ed00 	.word	0xe000ed00
 80031e4:	e000ed90 	.word	0xe000ed90

080031e8 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 80031e8:	b480      	push	{r7}
 80031ea:	b083      	sub	sp, #12
 80031ec:	af00      	add	r7, sp, #0
 80031ee:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 80031f0:	4a0b      	ldr	r2, [pc, #44]	@ (8003220 <HAL_MPU_Enable+0x38>)
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	f043 0301 	orr.w	r3, r3, #1
 80031f8:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 80031fa:	4b0a      	ldr	r3, [pc, #40]	@ (8003224 <HAL_MPU_Enable+0x3c>)
 80031fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031fe:	4a09      	ldr	r2, [pc, #36]	@ (8003224 <HAL_MPU_Enable+0x3c>)
 8003200:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003204:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8003206:	f3bf 8f4f 	dsb	sy
}
 800320a:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800320c:	f3bf 8f6f 	isb	sy
}
 8003210:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8003212:	bf00      	nop
 8003214:	370c      	adds	r7, #12
 8003216:	46bd      	mov	sp, r7
 8003218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800321c:	4770      	bx	lr
 800321e:	bf00      	nop
 8003220:	e000ed90 	.word	0xe000ed90
 8003224:	e000ed00 	.word	0xe000ed00

08003228 <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(const MPU_Region_InitTypeDef *MPU_Init)
{
 8003228:	b480      	push	{r7}
 800322a:	b083      	sub	sp, #12
 800322c:	af00      	add	r7, sp, #0
 800322e:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	785a      	ldrb	r2, [r3, #1]
 8003234:	4b1b      	ldr	r3, [pc, #108]	@ (80032a4 <HAL_MPU_ConfigRegion+0x7c>)
 8003236:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 8003238:	4b1a      	ldr	r3, [pc, #104]	@ (80032a4 <HAL_MPU_ConfigRegion+0x7c>)
 800323a:	691b      	ldr	r3, [r3, #16]
 800323c:	4a19      	ldr	r2, [pc, #100]	@ (80032a4 <HAL_MPU_ConfigRegion+0x7c>)
 800323e:	f023 0301 	bic.w	r3, r3, #1
 8003242:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 8003244:	4a17      	ldr	r2, [pc, #92]	@ (80032a4 <HAL_MPU_ConfigRegion+0x7c>)
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	685b      	ldr	r3, [r3, #4]
 800324a:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	7b1b      	ldrb	r3, [r3, #12]
 8003250:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	7adb      	ldrb	r3, [r3, #11]
 8003256:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8003258:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	7a9b      	ldrb	r3, [r3, #10]
 800325e:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8003260:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	7b5b      	ldrb	r3, [r3, #13]
 8003266:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8003268:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	7b9b      	ldrb	r3, [r3, #14]
 800326e:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8003270:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	7bdb      	ldrb	r3, [r3, #15]
 8003276:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8003278:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	7a5b      	ldrb	r3, [r3, #9]
 800327e:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8003280:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	7a1b      	ldrb	r3, [r3, #8]
 8003286:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8003288:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 800328a:	687a      	ldr	r2, [r7, #4]
 800328c:	7812      	ldrb	r2, [r2, #0]
 800328e:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8003290:	4a04      	ldr	r2, [pc, #16]	@ (80032a4 <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8003292:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8003294:	6113      	str	r3, [r2, #16]
}
 8003296:	bf00      	nop
 8003298:	370c      	adds	r7, #12
 800329a:	46bd      	mov	sp, r7
 800329c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032a0:	4770      	bx	lr
 80032a2:	bf00      	nop
 80032a4:	e000ed90 	.word	0xe000ed90

080032a8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *GPIO_Init)
{
 80032a8:	b480      	push	{r7}
 80032aa:	b089      	sub	sp, #36	@ 0x24
 80032ac:	af00      	add	r7, sp, #0
 80032ae:	6078      	str	r0, [r7, #4]
 80032b0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80032b2:	2300      	movs	r3, #0
 80032b4:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80032b6:	4b89      	ldr	r3, [pc, #548]	@ (80034dc <HAL_GPIO_Init+0x234>)
 80032b8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80032ba:	e194      	b.n	80035e6 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80032bc:	683b      	ldr	r3, [r7, #0]
 80032be:	681a      	ldr	r2, [r3, #0]
 80032c0:	2101      	movs	r1, #1
 80032c2:	69fb      	ldr	r3, [r7, #28]
 80032c4:	fa01 f303 	lsl.w	r3, r1, r3
 80032c8:	4013      	ands	r3, r2
 80032ca:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 80032cc:	693b      	ldr	r3, [r7, #16]
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	f000 8186 	beq.w	80035e0 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80032d4:	683b      	ldr	r3, [r7, #0]
 80032d6:	685b      	ldr	r3, [r3, #4]
 80032d8:	f003 0303 	and.w	r3, r3, #3
 80032dc:	2b01      	cmp	r3, #1
 80032de:	d005      	beq.n	80032ec <HAL_GPIO_Init+0x44>
 80032e0:	683b      	ldr	r3, [r7, #0]
 80032e2:	685b      	ldr	r3, [r3, #4]
 80032e4:	f003 0303 	and.w	r3, r3, #3
 80032e8:	2b02      	cmp	r3, #2
 80032ea:	d130      	bne.n	800334e <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	689b      	ldr	r3, [r3, #8]
 80032f0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80032f2:	69fb      	ldr	r3, [r7, #28]
 80032f4:	005b      	lsls	r3, r3, #1
 80032f6:	2203      	movs	r2, #3
 80032f8:	fa02 f303 	lsl.w	r3, r2, r3
 80032fc:	43db      	mvns	r3, r3
 80032fe:	69ba      	ldr	r2, [r7, #24]
 8003300:	4013      	ands	r3, r2
 8003302:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003304:	683b      	ldr	r3, [r7, #0]
 8003306:	68da      	ldr	r2, [r3, #12]
 8003308:	69fb      	ldr	r3, [r7, #28]
 800330a:	005b      	lsls	r3, r3, #1
 800330c:	fa02 f303 	lsl.w	r3, r2, r3
 8003310:	69ba      	ldr	r2, [r7, #24]
 8003312:	4313      	orrs	r3, r2
 8003314:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	69ba      	ldr	r2, [r7, #24]
 800331a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	685b      	ldr	r3, [r3, #4]
 8003320:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003322:	2201      	movs	r2, #1
 8003324:	69fb      	ldr	r3, [r7, #28]
 8003326:	fa02 f303 	lsl.w	r3, r2, r3
 800332a:	43db      	mvns	r3, r3
 800332c:	69ba      	ldr	r2, [r7, #24]
 800332e:	4013      	ands	r3, r2
 8003330:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003332:	683b      	ldr	r3, [r7, #0]
 8003334:	685b      	ldr	r3, [r3, #4]
 8003336:	091b      	lsrs	r3, r3, #4
 8003338:	f003 0201 	and.w	r2, r3, #1
 800333c:	69fb      	ldr	r3, [r7, #28]
 800333e:	fa02 f303 	lsl.w	r3, r2, r3
 8003342:	69ba      	ldr	r2, [r7, #24]
 8003344:	4313      	orrs	r3, r2
 8003346:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	69ba      	ldr	r2, [r7, #24]
 800334c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800334e:	683b      	ldr	r3, [r7, #0]
 8003350:	685b      	ldr	r3, [r3, #4]
 8003352:	f003 0303 	and.w	r3, r3, #3
 8003356:	2b03      	cmp	r3, #3
 8003358:	d017      	beq.n	800338a <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	68db      	ldr	r3, [r3, #12]
 800335e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003360:	69fb      	ldr	r3, [r7, #28]
 8003362:	005b      	lsls	r3, r3, #1
 8003364:	2203      	movs	r2, #3
 8003366:	fa02 f303 	lsl.w	r3, r2, r3
 800336a:	43db      	mvns	r3, r3
 800336c:	69ba      	ldr	r2, [r7, #24]
 800336e:	4013      	ands	r3, r2
 8003370:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003372:	683b      	ldr	r3, [r7, #0]
 8003374:	689a      	ldr	r2, [r3, #8]
 8003376:	69fb      	ldr	r3, [r7, #28]
 8003378:	005b      	lsls	r3, r3, #1
 800337a:	fa02 f303 	lsl.w	r3, r2, r3
 800337e:	69ba      	ldr	r2, [r7, #24]
 8003380:	4313      	orrs	r3, r2
 8003382:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	69ba      	ldr	r2, [r7, #24]
 8003388:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800338a:	683b      	ldr	r3, [r7, #0]
 800338c:	685b      	ldr	r3, [r3, #4]
 800338e:	f003 0303 	and.w	r3, r3, #3
 8003392:	2b02      	cmp	r3, #2
 8003394:	d123      	bne.n	80033de <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003396:	69fb      	ldr	r3, [r7, #28]
 8003398:	08da      	lsrs	r2, r3, #3
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	3208      	adds	r2, #8
 800339e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80033a2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80033a4:	69fb      	ldr	r3, [r7, #28]
 80033a6:	f003 0307 	and.w	r3, r3, #7
 80033aa:	009b      	lsls	r3, r3, #2
 80033ac:	220f      	movs	r2, #15
 80033ae:	fa02 f303 	lsl.w	r3, r2, r3
 80033b2:	43db      	mvns	r3, r3
 80033b4:	69ba      	ldr	r2, [r7, #24]
 80033b6:	4013      	ands	r3, r2
 80033b8:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80033ba:	683b      	ldr	r3, [r7, #0]
 80033bc:	691a      	ldr	r2, [r3, #16]
 80033be:	69fb      	ldr	r3, [r7, #28]
 80033c0:	f003 0307 	and.w	r3, r3, #7
 80033c4:	009b      	lsls	r3, r3, #2
 80033c6:	fa02 f303 	lsl.w	r3, r2, r3
 80033ca:	69ba      	ldr	r2, [r7, #24]
 80033cc:	4313      	orrs	r3, r2
 80033ce:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80033d0:	69fb      	ldr	r3, [r7, #28]
 80033d2:	08da      	lsrs	r2, r3, #3
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	3208      	adds	r2, #8
 80033d8:	69b9      	ldr	r1, [r7, #24]
 80033da:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80033e4:	69fb      	ldr	r3, [r7, #28]
 80033e6:	005b      	lsls	r3, r3, #1
 80033e8:	2203      	movs	r2, #3
 80033ea:	fa02 f303 	lsl.w	r3, r2, r3
 80033ee:	43db      	mvns	r3, r3
 80033f0:	69ba      	ldr	r2, [r7, #24]
 80033f2:	4013      	ands	r3, r2
 80033f4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80033f6:	683b      	ldr	r3, [r7, #0]
 80033f8:	685b      	ldr	r3, [r3, #4]
 80033fa:	f003 0203 	and.w	r2, r3, #3
 80033fe:	69fb      	ldr	r3, [r7, #28]
 8003400:	005b      	lsls	r3, r3, #1
 8003402:	fa02 f303 	lsl.w	r3, r2, r3
 8003406:	69ba      	ldr	r2, [r7, #24]
 8003408:	4313      	orrs	r3, r2
 800340a:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	69ba      	ldr	r2, [r7, #24]
 8003410:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003412:	683b      	ldr	r3, [r7, #0]
 8003414:	685b      	ldr	r3, [r3, #4]
 8003416:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800341a:	2b00      	cmp	r3, #0
 800341c:	f000 80e0 	beq.w	80035e0 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003420:	4b2f      	ldr	r3, [pc, #188]	@ (80034e0 <HAL_GPIO_Init+0x238>)
 8003422:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8003426:	4a2e      	ldr	r2, [pc, #184]	@ (80034e0 <HAL_GPIO_Init+0x238>)
 8003428:	f043 0302 	orr.w	r3, r3, #2
 800342c:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8003430:	4b2b      	ldr	r3, [pc, #172]	@ (80034e0 <HAL_GPIO_Init+0x238>)
 8003432:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8003436:	f003 0302 	and.w	r3, r3, #2
 800343a:	60fb      	str	r3, [r7, #12]
 800343c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800343e:	4a29      	ldr	r2, [pc, #164]	@ (80034e4 <HAL_GPIO_Init+0x23c>)
 8003440:	69fb      	ldr	r3, [r7, #28]
 8003442:	089b      	lsrs	r3, r3, #2
 8003444:	3302      	adds	r3, #2
 8003446:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800344a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800344c:	69fb      	ldr	r3, [r7, #28]
 800344e:	f003 0303 	and.w	r3, r3, #3
 8003452:	009b      	lsls	r3, r3, #2
 8003454:	220f      	movs	r2, #15
 8003456:	fa02 f303 	lsl.w	r3, r2, r3
 800345a:	43db      	mvns	r3, r3
 800345c:	69ba      	ldr	r2, [r7, #24]
 800345e:	4013      	ands	r3, r2
 8003460:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	4a20      	ldr	r2, [pc, #128]	@ (80034e8 <HAL_GPIO_Init+0x240>)
 8003466:	4293      	cmp	r3, r2
 8003468:	d052      	beq.n	8003510 <HAL_GPIO_Init+0x268>
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	4a1f      	ldr	r2, [pc, #124]	@ (80034ec <HAL_GPIO_Init+0x244>)
 800346e:	4293      	cmp	r3, r2
 8003470:	d031      	beq.n	80034d6 <HAL_GPIO_Init+0x22e>
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	4a1e      	ldr	r2, [pc, #120]	@ (80034f0 <HAL_GPIO_Init+0x248>)
 8003476:	4293      	cmp	r3, r2
 8003478:	d02b      	beq.n	80034d2 <HAL_GPIO_Init+0x22a>
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	4a1d      	ldr	r2, [pc, #116]	@ (80034f4 <HAL_GPIO_Init+0x24c>)
 800347e:	4293      	cmp	r3, r2
 8003480:	d025      	beq.n	80034ce <HAL_GPIO_Init+0x226>
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	4a1c      	ldr	r2, [pc, #112]	@ (80034f8 <HAL_GPIO_Init+0x250>)
 8003486:	4293      	cmp	r3, r2
 8003488:	d01f      	beq.n	80034ca <HAL_GPIO_Init+0x222>
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	4a1b      	ldr	r2, [pc, #108]	@ (80034fc <HAL_GPIO_Init+0x254>)
 800348e:	4293      	cmp	r3, r2
 8003490:	d019      	beq.n	80034c6 <HAL_GPIO_Init+0x21e>
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	4a1a      	ldr	r2, [pc, #104]	@ (8003500 <HAL_GPIO_Init+0x258>)
 8003496:	4293      	cmp	r3, r2
 8003498:	d013      	beq.n	80034c2 <HAL_GPIO_Init+0x21a>
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	4a19      	ldr	r2, [pc, #100]	@ (8003504 <HAL_GPIO_Init+0x25c>)
 800349e:	4293      	cmp	r3, r2
 80034a0:	d00d      	beq.n	80034be <HAL_GPIO_Init+0x216>
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	4a18      	ldr	r2, [pc, #96]	@ (8003508 <HAL_GPIO_Init+0x260>)
 80034a6:	4293      	cmp	r3, r2
 80034a8:	d007      	beq.n	80034ba <HAL_GPIO_Init+0x212>
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	4a17      	ldr	r2, [pc, #92]	@ (800350c <HAL_GPIO_Init+0x264>)
 80034ae:	4293      	cmp	r3, r2
 80034b0:	d101      	bne.n	80034b6 <HAL_GPIO_Init+0x20e>
 80034b2:	2309      	movs	r3, #9
 80034b4:	e02d      	b.n	8003512 <HAL_GPIO_Init+0x26a>
 80034b6:	230a      	movs	r3, #10
 80034b8:	e02b      	b.n	8003512 <HAL_GPIO_Init+0x26a>
 80034ba:	2308      	movs	r3, #8
 80034bc:	e029      	b.n	8003512 <HAL_GPIO_Init+0x26a>
 80034be:	2307      	movs	r3, #7
 80034c0:	e027      	b.n	8003512 <HAL_GPIO_Init+0x26a>
 80034c2:	2306      	movs	r3, #6
 80034c4:	e025      	b.n	8003512 <HAL_GPIO_Init+0x26a>
 80034c6:	2305      	movs	r3, #5
 80034c8:	e023      	b.n	8003512 <HAL_GPIO_Init+0x26a>
 80034ca:	2304      	movs	r3, #4
 80034cc:	e021      	b.n	8003512 <HAL_GPIO_Init+0x26a>
 80034ce:	2303      	movs	r3, #3
 80034d0:	e01f      	b.n	8003512 <HAL_GPIO_Init+0x26a>
 80034d2:	2302      	movs	r3, #2
 80034d4:	e01d      	b.n	8003512 <HAL_GPIO_Init+0x26a>
 80034d6:	2301      	movs	r3, #1
 80034d8:	e01b      	b.n	8003512 <HAL_GPIO_Init+0x26a>
 80034da:	bf00      	nop
 80034dc:	58000080 	.word	0x58000080
 80034e0:	58024400 	.word	0x58024400
 80034e4:	58000400 	.word	0x58000400
 80034e8:	58020000 	.word	0x58020000
 80034ec:	58020400 	.word	0x58020400
 80034f0:	58020800 	.word	0x58020800
 80034f4:	58020c00 	.word	0x58020c00
 80034f8:	58021000 	.word	0x58021000
 80034fc:	58021400 	.word	0x58021400
 8003500:	58021800 	.word	0x58021800
 8003504:	58021c00 	.word	0x58021c00
 8003508:	58022000 	.word	0x58022000
 800350c:	58022400 	.word	0x58022400
 8003510:	2300      	movs	r3, #0
 8003512:	69fa      	ldr	r2, [r7, #28]
 8003514:	f002 0203 	and.w	r2, r2, #3
 8003518:	0092      	lsls	r2, r2, #2
 800351a:	4093      	lsls	r3, r2
 800351c:	69ba      	ldr	r2, [r7, #24]
 800351e:	4313      	orrs	r3, r2
 8003520:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003522:	4938      	ldr	r1, [pc, #224]	@ (8003604 <HAL_GPIO_Init+0x35c>)
 8003524:	69fb      	ldr	r3, [r7, #28]
 8003526:	089b      	lsrs	r3, r3, #2
 8003528:	3302      	adds	r3, #2
 800352a:	69ba      	ldr	r2, [r7, #24]
 800352c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003530:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003538:	693b      	ldr	r3, [r7, #16]
 800353a:	43db      	mvns	r3, r3
 800353c:	69ba      	ldr	r2, [r7, #24]
 800353e:	4013      	ands	r3, r2
 8003540:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003542:	683b      	ldr	r3, [r7, #0]
 8003544:	685b      	ldr	r3, [r3, #4]
 8003546:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800354a:	2b00      	cmp	r3, #0
 800354c:	d003      	beq.n	8003556 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 800354e:	69ba      	ldr	r2, [r7, #24]
 8003550:	693b      	ldr	r3, [r7, #16]
 8003552:	4313      	orrs	r3, r2
 8003554:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8003556:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800355a:	69bb      	ldr	r3, [r7, #24]
 800355c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800355e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003562:	685b      	ldr	r3, [r3, #4]
 8003564:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003566:	693b      	ldr	r3, [r7, #16]
 8003568:	43db      	mvns	r3, r3
 800356a:	69ba      	ldr	r2, [r7, #24]
 800356c:	4013      	ands	r3, r2
 800356e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003570:	683b      	ldr	r3, [r7, #0]
 8003572:	685b      	ldr	r3, [r3, #4]
 8003574:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003578:	2b00      	cmp	r3, #0
 800357a:	d003      	beq.n	8003584 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 800357c:	69ba      	ldr	r2, [r7, #24]
 800357e:	693b      	ldr	r3, [r7, #16]
 8003580:	4313      	orrs	r3, r2
 8003582:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8003584:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003588:	69bb      	ldr	r3, [r7, #24]
 800358a:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 800358c:	697b      	ldr	r3, [r7, #20]
 800358e:	685b      	ldr	r3, [r3, #4]
 8003590:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003592:	693b      	ldr	r3, [r7, #16]
 8003594:	43db      	mvns	r3, r3
 8003596:	69ba      	ldr	r2, [r7, #24]
 8003598:	4013      	ands	r3, r2
 800359a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800359c:	683b      	ldr	r3, [r7, #0]
 800359e:	685b      	ldr	r3, [r3, #4]
 80035a0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	d003      	beq.n	80035b0 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 80035a8:	69ba      	ldr	r2, [r7, #24]
 80035aa:	693b      	ldr	r3, [r7, #16]
 80035ac:	4313      	orrs	r3, r2
 80035ae:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80035b0:	697b      	ldr	r3, [r7, #20]
 80035b2:	69ba      	ldr	r2, [r7, #24]
 80035b4:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80035b6:	697b      	ldr	r3, [r7, #20]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80035bc:	693b      	ldr	r3, [r7, #16]
 80035be:	43db      	mvns	r3, r3
 80035c0:	69ba      	ldr	r2, [r7, #24]
 80035c2:	4013      	ands	r3, r2
 80035c4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80035c6:	683b      	ldr	r3, [r7, #0]
 80035c8:	685b      	ldr	r3, [r3, #4]
 80035ca:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d003      	beq.n	80035da <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 80035d2:	69ba      	ldr	r2, [r7, #24]
 80035d4:	693b      	ldr	r3, [r7, #16]
 80035d6:	4313      	orrs	r3, r2
 80035d8:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80035da:	697b      	ldr	r3, [r7, #20]
 80035dc:	69ba      	ldr	r2, [r7, #24]
 80035de:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80035e0:	69fb      	ldr	r3, [r7, #28]
 80035e2:	3301      	adds	r3, #1
 80035e4:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80035e6:	683b      	ldr	r3, [r7, #0]
 80035e8:	681a      	ldr	r2, [r3, #0]
 80035ea:	69fb      	ldr	r3, [r7, #28]
 80035ec:	fa22 f303 	lsr.w	r3, r2, r3
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	f47f ae63 	bne.w	80032bc <HAL_GPIO_Init+0x14>
  }
}
 80035f6:	bf00      	nop
 80035f8:	bf00      	nop
 80035fa:	3724      	adds	r7, #36	@ 0x24
 80035fc:	46bd      	mov	sp, r7
 80035fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003602:	4770      	bx	lr
 8003604:	58000400 	.word	0x58000400

08003608 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003608:	b480      	push	{r7}
 800360a:	b083      	sub	sp, #12
 800360c:	af00      	add	r7, sp, #0
 800360e:	6078      	str	r0, [r7, #4]
 8003610:	460b      	mov	r3, r1
 8003612:	807b      	strh	r3, [r7, #2]
 8003614:	4613      	mov	r3, r2
 8003616:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003618:	787b      	ldrb	r3, [r7, #1]
 800361a:	2b00      	cmp	r3, #0
 800361c:	d003      	beq.n	8003626 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800361e:	887a      	ldrh	r2, [r7, #2]
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8003624:	e003      	b.n	800362e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8003626:	887b      	ldrh	r3, [r7, #2]
 8003628:	041a      	lsls	r2, r3, #16
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	619a      	str	r2, [r3, #24]
}
 800362e:	bf00      	nop
 8003630:	370c      	adds	r7, #12
 8003632:	46bd      	mov	sp, r7
 8003634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003638:	4770      	bx	lr
	...

0800363c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800363c:	b580      	push	{r7, lr}
 800363e:	b082      	sub	sp, #8
 8003640:	af00      	add	r7, sp, #0
 8003642:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	2b00      	cmp	r3, #0
 8003648:	d101      	bne.n	800364e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800364a:	2301      	movs	r3, #1
 800364c:	e08b      	b.n	8003766 <HAL_I2C_Init+0x12a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003654:	b2db      	uxtb	r3, r3
 8003656:	2b00      	cmp	r3, #0
 8003658:	d106      	bne.n	8003668 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	2200      	movs	r2, #0
 800365e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8003662:	6878      	ldr	r0, [r7, #4]
 8003664:	f7ff f8d0 	bl	8002808 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	2224      	movs	r2, #36	@ 0x24
 800366c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	681a      	ldr	r2, [r3, #0]
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	f022 0201 	bic.w	r2, r2, #1
 800367e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	685a      	ldr	r2, [r3, #4]
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800368c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	689a      	ldr	r2, [r3, #8]
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800369c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	68db      	ldr	r3, [r3, #12]
 80036a2:	2b01      	cmp	r3, #1
 80036a4:	d107      	bne.n	80036b6 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	689a      	ldr	r2, [r3, #8]
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80036b2:	609a      	str	r2, [r3, #8]
 80036b4:	e006      	b.n	80036c4 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	689a      	ldr	r2, [r3, #8]
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 80036c2:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	68db      	ldr	r3, [r3, #12]
 80036c8:	2b02      	cmp	r3, #2
 80036ca:	d108      	bne.n	80036de <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	685a      	ldr	r2, [r3, #4]
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80036da:	605a      	str	r2, [r3, #4]
 80036dc:	e007      	b.n	80036ee <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	685a      	ldr	r2, [r3, #4]
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80036ec:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	6859      	ldr	r1, [r3, #4]
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681a      	ldr	r2, [r3, #0]
 80036f8:	4b1d      	ldr	r3, [pc, #116]	@ (8003770 <HAL_I2C_Init+0x134>)
 80036fa:	430b      	orrs	r3, r1
 80036fc:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	68da      	ldr	r2, [r3, #12]
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800370c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	691a      	ldr	r2, [r3, #16]
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	695b      	ldr	r3, [r3, #20]
 8003716:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	699b      	ldr	r3, [r3, #24]
 800371e:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	430a      	orrs	r2, r1
 8003726:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	69d9      	ldr	r1, [r3, #28]
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	6a1a      	ldr	r2, [r3, #32]
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	430a      	orrs	r2, r1
 8003736:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	681a      	ldr	r2, [r3, #0]
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	f042 0201 	orr.w	r2, r2, #1
 8003746:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	2200      	movs	r2, #0
 800374c:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	2220      	movs	r2, #32
 8003752:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	2200      	movs	r2, #0
 800375a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	2200      	movs	r2, #0
 8003760:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8003764:	2300      	movs	r3, #0
}
 8003766:	4618      	mov	r0, r3
 8003768:	3708      	adds	r7, #8
 800376a:	46bd      	mov	sp, r7
 800376c:	bd80      	pop	{r7, pc}
 800376e:	bf00      	nop
 8003770:	02008000 	.word	0x02008000

08003774 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003774:	b580      	push	{r7, lr}
 8003776:	b088      	sub	sp, #32
 8003778:	af02      	add	r7, sp, #8
 800377a:	60f8      	str	r0, [r7, #12]
 800377c:	4608      	mov	r0, r1
 800377e:	4611      	mov	r1, r2
 8003780:	461a      	mov	r2, r3
 8003782:	4603      	mov	r3, r0
 8003784:	817b      	strh	r3, [r7, #10]
 8003786:	460b      	mov	r3, r1
 8003788:	813b      	strh	r3, [r7, #8]
 800378a:	4613      	mov	r3, r2
 800378c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003794:	b2db      	uxtb	r3, r3
 8003796:	2b20      	cmp	r3, #32
 8003798:	f040 80f9 	bne.w	800398e <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 800379c:	6a3b      	ldr	r3, [r7, #32]
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d002      	beq.n	80037a8 <HAL_I2C_Mem_Write+0x34>
 80037a2:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	d105      	bne.n	80037b4 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80037ae:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 80037b0:	2301      	movs	r3, #1
 80037b2:	e0ed      	b.n	8003990 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80037ba:	2b01      	cmp	r3, #1
 80037bc:	d101      	bne.n	80037c2 <HAL_I2C_Mem_Write+0x4e>
 80037be:	2302      	movs	r3, #2
 80037c0:	e0e6      	b.n	8003990 <HAL_I2C_Mem_Write+0x21c>
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	2201      	movs	r2, #1
 80037c6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80037ca:	f7ff fbd5 	bl	8002f78 <HAL_GetTick>
 80037ce:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80037d0:	697b      	ldr	r3, [r7, #20]
 80037d2:	9300      	str	r3, [sp, #0]
 80037d4:	2319      	movs	r3, #25
 80037d6:	2201      	movs	r2, #1
 80037d8:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80037dc:	68f8      	ldr	r0, [r7, #12]
 80037de:	f000 facf 	bl	8003d80 <I2C_WaitOnFlagUntilTimeout>
 80037e2:	4603      	mov	r3, r0
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	d001      	beq.n	80037ec <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 80037e8:	2301      	movs	r3, #1
 80037ea:	e0d1      	b.n	8003990 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	2221      	movs	r2, #33	@ 0x21
 80037f0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	2240      	movs	r2, #64	@ 0x40
 80037f8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	2200      	movs	r2, #0
 8003800:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	6a3a      	ldr	r2, [r7, #32]
 8003806:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800380c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	2200      	movs	r2, #0
 8003812:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003814:	88f8      	ldrh	r0, [r7, #6]
 8003816:	893a      	ldrh	r2, [r7, #8]
 8003818:	8979      	ldrh	r1, [r7, #10]
 800381a:	697b      	ldr	r3, [r7, #20]
 800381c:	9301      	str	r3, [sp, #4]
 800381e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003820:	9300      	str	r3, [sp, #0]
 8003822:	4603      	mov	r3, r0
 8003824:	68f8      	ldr	r0, [r7, #12]
 8003826:	f000 f9df 	bl	8003be8 <I2C_RequestMemoryWrite>
 800382a:	4603      	mov	r3, r0
 800382c:	2b00      	cmp	r3, #0
 800382e:	d005      	beq.n	800383c <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	2200      	movs	r2, #0
 8003834:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8003838:	2301      	movs	r3, #1
 800383a:	e0a9      	b.n	8003990 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003840:	b29b      	uxth	r3, r3
 8003842:	2bff      	cmp	r3, #255	@ 0xff
 8003844:	d90e      	bls.n	8003864 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	22ff      	movs	r2, #255	@ 0xff
 800384a:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003850:	b2da      	uxtb	r2, r3
 8003852:	8979      	ldrh	r1, [r7, #10]
 8003854:	2300      	movs	r3, #0
 8003856:	9300      	str	r3, [sp, #0]
 8003858:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800385c:	68f8      	ldr	r0, [r7, #12]
 800385e:	f000 fc53 	bl	8004108 <I2C_TransferConfig>
 8003862:	e00f      	b.n	8003884 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003868:	b29a      	uxth	r2, r3
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003872:	b2da      	uxtb	r2, r3
 8003874:	8979      	ldrh	r1, [r7, #10]
 8003876:	2300      	movs	r3, #0
 8003878:	9300      	str	r3, [sp, #0]
 800387a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800387e:	68f8      	ldr	r0, [r7, #12]
 8003880:	f000 fc42 	bl	8004108 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003884:	697a      	ldr	r2, [r7, #20]
 8003886:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003888:	68f8      	ldr	r0, [r7, #12]
 800388a:	f000 fad2 	bl	8003e32 <I2C_WaitOnTXISFlagUntilTimeout>
 800388e:	4603      	mov	r3, r0
 8003890:	2b00      	cmp	r3, #0
 8003892:	d001      	beq.n	8003898 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8003894:	2301      	movs	r3, #1
 8003896:	e07b      	b.n	8003990 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800389c:	781a      	ldrb	r2, [r3, #0]
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80038a8:	1c5a      	adds	r2, r3, #1
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80038b2:	b29b      	uxth	r3, r3
 80038b4:	3b01      	subs	r3, #1
 80038b6:	b29a      	uxth	r2, r3
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80038c0:	3b01      	subs	r3, #1
 80038c2:	b29a      	uxth	r2, r3
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80038cc:	b29b      	uxth	r3, r3
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d034      	beq.n	800393c <HAL_I2C_Mem_Write+0x1c8>
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d130      	bne.n	800393c <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80038da:	697b      	ldr	r3, [r7, #20]
 80038dc:	9300      	str	r3, [sp, #0]
 80038de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80038e0:	2200      	movs	r2, #0
 80038e2:	2180      	movs	r1, #128	@ 0x80
 80038e4:	68f8      	ldr	r0, [r7, #12]
 80038e6:	f000 fa4b 	bl	8003d80 <I2C_WaitOnFlagUntilTimeout>
 80038ea:	4603      	mov	r3, r0
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	d001      	beq.n	80038f4 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 80038f0:	2301      	movs	r3, #1
 80038f2:	e04d      	b.n	8003990 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80038f8:	b29b      	uxth	r3, r3
 80038fa:	2bff      	cmp	r3, #255	@ 0xff
 80038fc:	d90e      	bls.n	800391c <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	22ff      	movs	r2, #255	@ 0xff
 8003902:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003908:	b2da      	uxtb	r2, r3
 800390a:	8979      	ldrh	r1, [r7, #10]
 800390c:	2300      	movs	r3, #0
 800390e:	9300      	str	r3, [sp, #0]
 8003910:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8003914:	68f8      	ldr	r0, [r7, #12]
 8003916:	f000 fbf7 	bl	8004108 <I2C_TransferConfig>
 800391a:	e00f      	b.n	800393c <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003920:	b29a      	uxth	r2, r3
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800392a:	b2da      	uxtb	r2, r3
 800392c:	8979      	ldrh	r1, [r7, #10]
 800392e:	2300      	movs	r3, #0
 8003930:	9300      	str	r3, [sp, #0]
 8003932:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003936:	68f8      	ldr	r0, [r7, #12]
 8003938:	f000 fbe6 	bl	8004108 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003940:	b29b      	uxth	r3, r3
 8003942:	2b00      	cmp	r3, #0
 8003944:	d19e      	bne.n	8003884 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003946:	697a      	ldr	r2, [r7, #20]
 8003948:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800394a:	68f8      	ldr	r0, [r7, #12]
 800394c:	f000 fab8 	bl	8003ec0 <I2C_WaitOnSTOPFlagUntilTimeout>
 8003950:	4603      	mov	r3, r0
 8003952:	2b00      	cmp	r3, #0
 8003954:	d001      	beq.n	800395a <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8003956:	2301      	movs	r3, #1
 8003958:	e01a      	b.n	8003990 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	2220      	movs	r2, #32
 8003960:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	6859      	ldr	r1, [r3, #4]
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	681a      	ldr	r2, [r3, #0]
 800396c:	4b0a      	ldr	r3, [pc, #40]	@ (8003998 <HAL_I2C_Mem_Write+0x224>)
 800396e:	400b      	ands	r3, r1
 8003970:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	2220      	movs	r2, #32
 8003976:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	2200      	movs	r2, #0
 800397e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	2200      	movs	r2, #0
 8003986:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800398a:	2300      	movs	r3, #0
 800398c:	e000      	b.n	8003990 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 800398e:	2302      	movs	r3, #2
  }
}
 8003990:	4618      	mov	r0, r3
 8003992:	3718      	adds	r7, #24
 8003994:	46bd      	mov	sp, r7
 8003996:	bd80      	pop	{r7, pc}
 8003998:	fe00e800 	.word	0xfe00e800

0800399c <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800399c:	b580      	push	{r7, lr}
 800399e:	b088      	sub	sp, #32
 80039a0:	af02      	add	r7, sp, #8
 80039a2:	60f8      	str	r0, [r7, #12]
 80039a4:	4608      	mov	r0, r1
 80039a6:	4611      	mov	r1, r2
 80039a8:	461a      	mov	r2, r3
 80039aa:	4603      	mov	r3, r0
 80039ac:	817b      	strh	r3, [r7, #10]
 80039ae:	460b      	mov	r3, r1
 80039b0:	813b      	strh	r3, [r7, #8]
 80039b2:	4613      	mov	r3, r2
 80039b4:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80039bc:	b2db      	uxtb	r3, r3
 80039be:	2b20      	cmp	r3, #32
 80039c0:	f040 80fd 	bne.w	8003bbe <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 80039c4:	6a3b      	ldr	r3, [r7, #32]
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d002      	beq.n	80039d0 <HAL_I2C_Mem_Read+0x34>
 80039ca:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	d105      	bne.n	80039dc <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80039d6:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 80039d8:	2301      	movs	r3, #1
 80039da:	e0f1      	b.n	8003bc0 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80039e2:	2b01      	cmp	r3, #1
 80039e4:	d101      	bne.n	80039ea <HAL_I2C_Mem_Read+0x4e>
 80039e6:	2302      	movs	r3, #2
 80039e8:	e0ea      	b.n	8003bc0 <HAL_I2C_Mem_Read+0x224>
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	2201      	movs	r2, #1
 80039ee:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80039f2:	f7ff fac1 	bl	8002f78 <HAL_GetTick>
 80039f6:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80039f8:	697b      	ldr	r3, [r7, #20]
 80039fa:	9300      	str	r3, [sp, #0]
 80039fc:	2319      	movs	r3, #25
 80039fe:	2201      	movs	r2, #1
 8003a00:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8003a04:	68f8      	ldr	r0, [r7, #12]
 8003a06:	f000 f9bb 	bl	8003d80 <I2C_WaitOnFlagUntilTimeout>
 8003a0a:	4603      	mov	r3, r0
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	d001      	beq.n	8003a14 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8003a10:	2301      	movs	r3, #1
 8003a12:	e0d5      	b.n	8003bc0 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	2222      	movs	r2, #34	@ 0x22
 8003a18:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	2240      	movs	r2, #64	@ 0x40
 8003a20:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	2200      	movs	r2, #0
 8003a28:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	6a3a      	ldr	r2, [r7, #32]
 8003a2e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8003a34:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	2200      	movs	r2, #0
 8003a3a:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003a3c:	88f8      	ldrh	r0, [r7, #6]
 8003a3e:	893a      	ldrh	r2, [r7, #8]
 8003a40:	8979      	ldrh	r1, [r7, #10]
 8003a42:	697b      	ldr	r3, [r7, #20]
 8003a44:	9301      	str	r3, [sp, #4]
 8003a46:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003a48:	9300      	str	r3, [sp, #0]
 8003a4a:	4603      	mov	r3, r0
 8003a4c:	68f8      	ldr	r0, [r7, #12]
 8003a4e:	f000 f91f 	bl	8003c90 <I2C_RequestMemoryRead>
 8003a52:	4603      	mov	r3, r0
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	d005      	beq.n	8003a64 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	2200      	movs	r2, #0
 8003a5c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8003a60:	2301      	movs	r3, #1
 8003a62:	e0ad      	b.n	8003bc0 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003a68:	b29b      	uxth	r3, r3
 8003a6a:	2bff      	cmp	r3, #255	@ 0xff
 8003a6c:	d90e      	bls.n	8003a8c <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	22ff      	movs	r2, #255	@ 0xff
 8003a72:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003a78:	b2da      	uxtb	r2, r3
 8003a7a:	8979      	ldrh	r1, [r7, #10]
 8003a7c:	4b52      	ldr	r3, [pc, #328]	@ (8003bc8 <HAL_I2C_Mem_Read+0x22c>)
 8003a7e:	9300      	str	r3, [sp, #0]
 8003a80:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8003a84:	68f8      	ldr	r0, [r7, #12]
 8003a86:	f000 fb3f 	bl	8004108 <I2C_TransferConfig>
 8003a8a:	e00f      	b.n	8003aac <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003a90:	b29a      	uxth	r2, r3
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003a9a:	b2da      	uxtb	r2, r3
 8003a9c:	8979      	ldrh	r1, [r7, #10]
 8003a9e:	4b4a      	ldr	r3, [pc, #296]	@ (8003bc8 <HAL_I2C_Mem_Read+0x22c>)
 8003aa0:	9300      	str	r3, [sp, #0]
 8003aa2:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003aa6:	68f8      	ldr	r0, [r7, #12]
 8003aa8:	f000 fb2e 	bl	8004108 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8003aac:	697b      	ldr	r3, [r7, #20]
 8003aae:	9300      	str	r3, [sp, #0]
 8003ab0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003ab2:	2200      	movs	r2, #0
 8003ab4:	2104      	movs	r1, #4
 8003ab6:	68f8      	ldr	r0, [r7, #12]
 8003ab8:	f000 f962 	bl	8003d80 <I2C_WaitOnFlagUntilTimeout>
 8003abc:	4603      	mov	r3, r0
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d001      	beq.n	8003ac6 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8003ac2:	2301      	movs	r3, #1
 8003ac4:	e07c      	b.n	8003bc0 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ad0:	b2d2      	uxtb	r2, r2
 8003ad2:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ad8:	1c5a      	adds	r2, r3, #1
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003ae2:	3b01      	subs	r3, #1
 8003ae4:	b29a      	uxth	r2, r3
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003aee:	b29b      	uxth	r3, r3
 8003af0:	3b01      	subs	r3, #1
 8003af2:	b29a      	uxth	r2, r3
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003afc:	b29b      	uxth	r3, r3
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d034      	beq.n	8003b6c <HAL_I2C_Mem_Read+0x1d0>
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d130      	bne.n	8003b6c <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003b0a:	697b      	ldr	r3, [r7, #20]
 8003b0c:	9300      	str	r3, [sp, #0]
 8003b0e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003b10:	2200      	movs	r2, #0
 8003b12:	2180      	movs	r1, #128	@ 0x80
 8003b14:	68f8      	ldr	r0, [r7, #12]
 8003b16:	f000 f933 	bl	8003d80 <I2C_WaitOnFlagUntilTimeout>
 8003b1a:	4603      	mov	r3, r0
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	d001      	beq.n	8003b24 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8003b20:	2301      	movs	r3, #1
 8003b22:	e04d      	b.n	8003bc0 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003b28:	b29b      	uxth	r3, r3
 8003b2a:	2bff      	cmp	r3, #255	@ 0xff
 8003b2c:	d90e      	bls.n	8003b4c <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	22ff      	movs	r2, #255	@ 0xff
 8003b32:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003b38:	b2da      	uxtb	r2, r3
 8003b3a:	8979      	ldrh	r1, [r7, #10]
 8003b3c:	2300      	movs	r3, #0
 8003b3e:	9300      	str	r3, [sp, #0]
 8003b40:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8003b44:	68f8      	ldr	r0, [r7, #12]
 8003b46:	f000 fadf 	bl	8004108 <I2C_TransferConfig>
 8003b4a:	e00f      	b.n	8003b6c <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003b50:	b29a      	uxth	r2, r3
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003b5a:	b2da      	uxtb	r2, r3
 8003b5c:	8979      	ldrh	r1, [r7, #10]
 8003b5e:	2300      	movs	r3, #0
 8003b60:	9300      	str	r3, [sp, #0]
 8003b62:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003b66:	68f8      	ldr	r0, [r7, #12]
 8003b68:	f000 face 	bl	8004108 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003b70:	b29b      	uxth	r3, r3
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d19a      	bne.n	8003aac <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003b76:	697a      	ldr	r2, [r7, #20]
 8003b78:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003b7a:	68f8      	ldr	r0, [r7, #12]
 8003b7c:	f000 f9a0 	bl	8003ec0 <I2C_WaitOnSTOPFlagUntilTimeout>
 8003b80:	4603      	mov	r3, r0
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d001      	beq.n	8003b8a <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8003b86:	2301      	movs	r3, #1
 8003b88:	e01a      	b.n	8003bc0 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	2220      	movs	r2, #32
 8003b90:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	6859      	ldr	r1, [r3, #4]
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	681a      	ldr	r2, [r3, #0]
 8003b9c:	4b0b      	ldr	r3, [pc, #44]	@ (8003bcc <HAL_I2C_Mem_Read+0x230>)
 8003b9e:	400b      	ands	r3, r1
 8003ba0:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	2220      	movs	r2, #32
 8003ba6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	2200      	movs	r2, #0
 8003bae:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	2200      	movs	r2, #0
 8003bb6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8003bba:	2300      	movs	r3, #0
 8003bbc:	e000      	b.n	8003bc0 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8003bbe:	2302      	movs	r3, #2
  }
}
 8003bc0:	4618      	mov	r0, r3
 8003bc2:	3718      	adds	r7, #24
 8003bc4:	46bd      	mov	sp, r7
 8003bc6:	bd80      	pop	{r7, pc}
 8003bc8:	80002400 	.word	0x80002400
 8003bcc:	fe00e800 	.word	0xfe00e800

08003bd0 <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
  * @retval I2C Error Code
  */
uint32_t HAL_I2C_GetError(const I2C_HandleTypeDef *hi2c)
{
 8003bd0:	b480      	push	{r7}
 8003bd2:	b083      	sub	sp, #12
 8003bd4:	af00      	add	r7, sp, #0
 8003bd6:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
}
 8003bdc:	4618      	mov	r0, r3
 8003bde:	370c      	adds	r7, #12
 8003be0:	46bd      	mov	sp, r7
 8003be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003be6:	4770      	bx	lr

08003be8 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8003be8:	b580      	push	{r7, lr}
 8003bea:	b086      	sub	sp, #24
 8003bec:	af02      	add	r7, sp, #8
 8003bee:	60f8      	str	r0, [r7, #12]
 8003bf0:	4608      	mov	r0, r1
 8003bf2:	4611      	mov	r1, r2
 8003bf4:	461a      	mov	r2, r3
 8003bf6:	4603      	mov	r3, r0
 8003bf8:	817b      	strh	r3, [r7, #10]
 8003bfa:	460b      	mov	r3, r1
 8003bfc:	813b      	strh	r3, [r7, #8]
 8003bfe:	4613      	mov	r3, r2
 8003c00:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8003c02:	88fb      	ldrh	r3, [r7, #6]
 8003c04:	b2da      	uxtb	r2, r3
 8003c06:	8979      	ldrh	r1, [r7, #10]
 8003c08:	4b20      	ldr	r3, [pc, #128]	@ (8003c8c <I2C_RequestMemoryWrite+0xa4>)
 8003c0a:	9300      	str	r3, [sp, #0]
 8003c0c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8003c10:	68f8      	ldr	r0, [r7, #12]
 8003c12:	f000 fa79 	bl	8004108 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003c16:	69fa      	ldr	r2, [r7, #28]
 8003c18:	69b9      	ldr	r1, [r7, #24]
 8003c1a:	68f8      	ldr	r0, [r7, #12]
 8003c1c:	f000 f909 	bl	8003e32 <I2C_WaitOnTXISFlagUntilTimeout>
 8003c20:	4603      	mov	r3, r0
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d001      	beq.n	8003c2a <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8003c26:	2301      	movs	r3, #1
 8003c28:	e02c      	b.n	8003c84 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003c2a:	88fb      	ldrh	r3, [r7, #6]
 8003c2c:	2b01      	cmp	r3, #1
 8003c2e:	d105      	bne.n	8003c3c <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003c30:	893b      	ldrh	r3, [r7, #8]
 8003c32:	b2da      	uxtb	r2, r3
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	629a      	str	r2, [r3, #40]	@ 0x28
 8003c3a:	e015      	b.n	8003c68 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8003c3c:	893b      	ldrh	r3, [r7, #8]
 8003c3e:	0a1b      	lsrs	r3, r3, #8
 8003c40:	b29b      	uxth	r3, r3
 8003c42:	b2da      	uxtb	r2, r3
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003c4a:	69fa      	ldr	r2, [r7, #28]
 8003c4c:	69b9      	ldr	r1, [r7, #24]
 8003c4e:	68f8      	ldr	r0, [r7, #12]
 8003c50:	f000 f8ef 	bl	8003e32 <I2C_WaitOnTXISFlagUntilTimeout>
 8003c54:	4603      	mov	r3, r0
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d001      	beq.n	8003c5e <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8003c5a:	2301      	movs	r3, #1
 8003c5c:	e012      	b.n	8003c84 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003c5e:	893b      	ldrh	r3, [r7, #8]
 8003c60:	b2da      	uxtb	r2, r3
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8003c68:	69fb      	ldr	r3, [r7, #28]
 8003c6a:	9300      	str	r3, [sp, #0]
 8003c6c:	69bb      	ldr	r3, [r7, #24]
 8003c6e:	2200      	movs	r2, #0
 8003c70:	2180      	movs	r1, #128	@ 0x80
 8003c72:	68f8      	ldr	r0, [r7, #12]
 8003c74:	f000 f884 	bl	8003d80 <I2C_WaitOnFlagUntilTimeout>
 8003c78:	4603      	mov	r3, r0
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	d001      	beq.n	8003c82 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8003c7e:	2301      	movs	r3, #1
 8003c80:	e000      	b.n	8003c84 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8003c82:	2300      	movs	r3, #0
}
 8003c84:	4618      	mov	r0, r3
 8003c86:	3710      	adds	r7, #16
 8003c88:	46bd      	mov	sp, r7
 8003c8a:	bd80      	pop	{r7, pc}
 8003c8c:	80002000 	.word	0x80002000

08003c90 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8003c90:	b580      	push	{r7, lr}
 8003c92:	b086      	sub	sp, #24
 8003c94:	af02      	add	r7, sp, #8
 8003c96:	60f8      	str	r0, [r7, #12]
 8003c98:	4608      	mov	r0, r1
 8003c9a:	4611      	mov	r1, r2
 8003c9c:	461a      	mov	r2, r3
 8003c9e:	4603      	mov	r3, r0
 8003ca0:	817b      	strh	r3, [r7, #10]
 8003ca2:	460b      	mov	r3, r1
 8003ca4:	813b      	strh	r3, [r7, #8]
 8003ca6:	4613      	mov	r3, r2
 8003ca8:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8003caa:	88fb      	ldrh	r3, [r7, #6]
 8003cac:	b2da      	uxtb	r2, r3
 8003cae:	8979      	ldrh	r1, [r7, #10]
 8003cb0:	4b20      	ldr	r3, [pc, #128]	@ (8003d34 <I2C_RequestMemoryRead+0xa4>)
 8003cb2:	9300      	str	r3, [sp, #0]
 8003cb4:	2300      	movs	r3, #0
 8003cb6:	68f8      	ldr	r0, [r7, #12]
 8003cb8:	f000 fa26 	bl	8004108 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003cbc:	69fa      	ldr	r2, [r7, #28]
 8003cbe:	69b9      	ldr	r1, [r7, #24]
 8003cc0:	68f8      	ldr	r0, [r7, #12]
 8003cc2:	f000 f8b6 	bl	8003e32 <I2C_WaitOnTXISFlagUntilTimeout>
 8003cc6:	4603      	mov	r3, r0
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	d001      	beq.n	8003cd0 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8003ccc:	2301      	movs	r3, #1
 8003cce:	e02c      	b.n	8003d2a <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003cd0:	88fb      	ldrh	r3, [r7, #6]
 8003cd2:	2b01      	cmp	r3, #1
 8003cd4:	d105      	bne.n	8003ce2 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003cd6:	893b      	ldrh	r3, [r7, #8]
 8003cd8:	b2da      	uxtb	r2, r3
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	629a      	str	r2, [r3, #40]	@ 0x28
 8003ce0:	e015      	b.n	8003d0e <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8003ce2:	893b      	ldrh	r3, [r7, #8]
 8003ce4:	0a1b      	lsrs	r3, r3, #8
 8003ce6:	b29b      	uxth	r3, r3
 8003ce8:	b2da      	uxtb	r2, r3
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003cf0:	69fa      	ldr	r2, [r7, #28]
 8003cf2:	69b9      	ldr	r1, [r7, #24]
 8003cf4:	68f8      	ldr	r0, [r7, #12]
 8003cf6:	f000 f89c 	bl	8003e32 <I2C_WaitOnTXISFlagUntilTimeout>
 8003cfa:	4603      	mov	r3, r0
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	d001      	beq.n	8003d04 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8003d00:	2301      	movs	r3, #1
 8003d02:	e012      	b.n	8003d2a <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003d04:	893b      	ldrh	r3, [r7, #8]
 8003d06:	b2da      	uxtb	r2, r3
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8003d0e:	69fb      	ldr	r3, [r7, #28]
 8003d10:	9300      	str	r3, [sp, #0]
 8003d12:	69bb      	ldr	r3, [r7, #24]
 8003d14:	2200      	movs	r2, #0
 8003d16:	2140      	movs	r1, #64	@ 0x40
 8003d18:	68f8      	ldr	r0, [r7, #12]
 8003d1a:	f000 f831 	bl	8003d80 <I2C_WaitOnFlagUntilTimeout>
 8003d1e:	4603      	mov	r3, r0
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	d001      	beq.n	8003d28 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8003d24:	2301      	movs	r3, #1
 8003d26:	e000      	b.n	8003d2a <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8003d28:	2300      	movs	r3, #0
}
 8003d2a:	4618      	mov	r0, r3
 8003d2c:	3710      	adds	r7, #16
 8003d2e:	46bd      	mov	sp, r7
 8003d30:	bd80      	pop	{r7, pc}
 8003d32:	bf00      	nop
 8003d34:	80002000 	.word	0x80002000

08003d38 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8003d38:	b480      	push	{r7}
 8003d3a:	b083      	sub	sp, #12
 8003d3c:	af00      	add	r7, sp, #0
 8003d3e:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	699b      	ldr	r3, [r3, #24]
 8003d46:	f003 0302 	and.w	r3, r3, #2
 8003d4a:	2b02      	cmp	r3, #2
 8003d4c:	d103      	bne.n	8003d56 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	2200      	movs	r2, #0
 8003d54:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	699b      	ldr	r3, [r3, #24]
 8003d5c:	f003 0301 	and.w	r3, r3, #1
 8003d60:	2b01      	cmp	r3, #1
 8003d62:	d007      	beq.n	8003d74 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	699a      	ldr	r2, [r3, #24]
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	f042 0201 	orr.w	r2, r2, #1
 8003d72:	619a      	str	r2, [r3, #24]
  }
}
 8003d74:	bf00      	nop
 8003d76:	370c      	adds	r7, #12
 8003d78:	46bd      	mov	sp, r7
 8003d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d7e:	4770      	bx	lr

08003d80 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8003d80:	b580      	push	{r7, lr}
 8003d82:	b084      	sub	sp, #16
 8003d84:	af00      	add	r7, sp, #0
 8003d86:	60f8      	str	r0, [r7, #12]
 8003d88:	60b9      	str	r1, [r7, #8]
 8003d8a:	603b      	str	r3, [r7, #0]
 8003d8c:	4613      	mov	r3, r2
 8003d8e:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003d90:	e03b      	b.n	8003e0a <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003d92:	69ba      	ldr	r2, [r7, #24]
 8003d94:	6839      	ldr	r1, [r7, #0]
 8003d96:	68f8      	ldr	r0, [r7, #12]
 8003d98:	f000 f8d6 	bl	8003f48 <I2C_IsErrorOccurred>
 8003d9c:	4603      	mov	r3, r0
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d001      	beq.n	8003da6 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8003da2:	2301      	movs	r3, #1
 8003da4:	e041      	b.n	8003e2a <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003da6:	683b      	ldr	r3, [r7, #0]
 8003da8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003dac:	d02d      	beq.n	8003e0a <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003dae:	f7ff f8e3 	bl	8002f78 <HAL_GetTick>
 8003db2:	4602      	mov	r2, r0
 8003db4:	69bb      	ldr	r3, [r7, #24]
 8003db6:	1ad3      	subs	r3, r2, r3
 8003db8:	683a      	ldr	r2, [r7, #0]
 8003dba:	429a      	cmp	r2, r3
 8003dbc:	d302      	bcc.n	8003dc4 <I2C_WaitOnFlagUntilTimeout+0x44>
 8003dbe:	683b      	ldr	r3, [r7, #0]
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	d122      	bne.n	8003e0a <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	699a      	ldr	r2, [r3, #24]
 8003dca:	68bb      	ldr	r3, [r7, #8]
 8003dcc:	4013      	ands	r3, r2
 8003dce:	68ba      	ldr	r2, [r7, #8]
 8003dd0:	429a      	cmp	r2, r3
 8003dd2:	bf0c      	ite	eq
 8003dd4:	2301      	moveq	r3, #1
 8003dd6:	2300      	movne	r3, #0
 8003dd8:	b2db      	uxtb	r3, r3
 8003dda:	461a      	mov	r2, r3
 8003ddc:	79fb      	ldrb	r3, [r7, #7]
 8003dde:	429a      	cmp	r2, r3
 8003de0:	d113      	bne.n	8003e0a <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003de6:	f043 0220 	orr.w	r2, r3, #32
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	2220      	movs	r2, #32
 8003df2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	2200      	movs	r2, #0
 8003dfa:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	2200      	movs	r2, #0
 8003e02:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 8003e06:	2301      	movs	r3, #1
 8003e08:	e00f      	b.n	8003e2a <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	699a      	ldr	r2, [r3, #24]
 8003e10:	68bb      	ldr	r3, [r7, #8]
 8003e12:	4013      	ands	r3, r2
 8003e14:	68ba      	ldr	r2, [r7, #8]
 8003e16:	429a      	cmp	r2, r3
 8003e18:	bf0c      	ite	eq
 8003e1a:	2301      	moveq	r3, #1
 8003e1c:	2300      	movne	r3, #0
 8003e1e:	b2db      	uxtb	r3, r3
 8003e20:	461a      	mov	r2, r3
 8003e22:	79fb      	ldrb	r3, [r7, #7]
 8003e24:	429a      	cmp	r2, r3
 8003e26:	d0b4      	beq.n	8003d92 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003e28:	2300      	movs	r3, #0
}
 8003e2a:	4618      	mov	r0, r3
 8003e2c:	3710      	adds	r7, #16
 8003e2e:	46bd      	mov	sp, r7
 8003e30:	bd80      	pop	{r7, pc}

08003e32 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003e32:	b580      	push	{r7, lr}
 8003e34:	b084      	sub	sp, #16
 8003e36:	af00      	add	r7, sp, #0
 8003e38:	60f8      	str	r0, [r7, #12]
 8003e3a:	60b9      	str	r1, [r7, #8]
 8003e3c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003e3e:	e033      	b.n	8003ea8 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003e40:	687a      	ldr	r2, [r7, #4]
 8003e42:	68b9      	ldr	r1, [r7, #8]
 8003e44:	68f8      	ldr	r0, [r7, #12]
 8003e46:	f000 f87f 	bl	8003f48 <I2C_IsErrorOccurred>
 8003e4a:	4603      	mov	r3, r0
 8003e4c:	2b00      	cmp	r3, #0
 8003e4e:	d001      	beq.n	8003e54 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003e50:	2301      	movs	r3, #1
 8003e52:	e031      	b.n	8003eb8 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003e54:	68bb      	ldr	r3, [r7, #8]
 8003e56:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e5a:	d025      	beq.n	8003ea8 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003e5c:	f7ff f88c 	bl	8002f78 <HAL_GetTick>
 8003e60:	4602      	mov	r2, r0
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	1ad3      	subs	r3, r2, r3
 8003e66:	68ba      	ldr	r2, [r7, #8]
 8003e68:	429a      	cmp	r2, r3
 8003e6a:	d302      	bcc.n	8003e72 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8003e6c:	68bb      	ldr	r3, [r7, #8]
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d11a      	bne.n	8003ea8 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	699b      	ldr	r3, [r3, #24]
 8003e78:	f003 0302 	and.w	r3, r3, #2
 8003e7c:	2b02      	cmp	r3, #2
 8003e7e:	d013      	beq.n	8003ea8 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003e84:	f043 0220 	orr.w	r2, r3, #32
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	2220      	movs	r2, #32
 8003e90:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	2200      	movs	r2, #0
 8003e98:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	2200      	movs	r2, #0
 8003ea0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8003ea4:	2301      	movs	r3, #1
 8003ea6:	e007      	b.n	8003eb8 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	699b      	ldr	r3, [r3, #24]
 8003eae:	f003 0302 	and.w	r3, r3, #2
 8003eb2:	2b02      	cmp	r3, #2
 8003eb4:	d1c4      	bne.n	8003e40 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003eb6:	2300      	movs	r3, #0
}
 8003eb8:	4618      	mov	r0, r3
 8003eba:	3710      	adds	r7, #16
 8003ebc:	46bd      	mov	sp, r7
 8003ebe:	bd80      	pop	{r7, pc}

08003ec0 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003ec0:	b580      	push	{r7, lr}
 8003ec2:	b084      	sub	sp, #16
 8003ec4:	af00      	add	r7, sp, #0
 8003ec6:	60f8      	str	r0, [r7, #12]
 8003ec8:	60b9      	str	r1, [r7, #8]
 8003eca:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003ecc:	e02f      	b.n	8003f2e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003ece:	687a      	ldr	r2, [r7, #4]
 8003ed0:	68b9      	ldr	r1, [r7, #8]
 8003ed2:	68f8      	ldr	r0, [r7, #12]
 8003ed4:	f000 f838 	bl	8003f48 <I2C_IsErrorOccurred>
 8003ed8:	4603      	mov	r3, r0
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	d001      	beq.n	8003ee2 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003ede:	2301      	movs	r3, #1
 8003ee0:	e02d      	b.n	8003f3e <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003ee2:	f7ff f849 	bl	8002f78 <HAL_GetTick>
 8003ee6:	4602      	mov	r2, r0
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	1ad3      	subs	r3, r2, r3
 8003eec:	68ba      	ldr	r2, [r7, #8]
 8003eee:	429a      	cmp	r2, r3
 8003ef0:	d302      	bcc.n	8003ef8 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8003ef2:	68bb      	ldr	r3, [r7, #8]
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	d11a      	bne.n	8003f2e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	699b      	ldr	r3, [r3, #24]
 8003efe:	f003 0320 	and.w	r3, r3, #32
 8003f02:	2b20      	cmp	r3, #32
 8003f04:	d013      	beq.n	8003f2e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003f0a:	f043 0220 	orr.w	r2, r3, #32
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	2220      	movs	r2, #32
 8003f16:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	2200      	movs	r2, #0
 8003f1e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	2200      	movs	r2, #0
 8003f26:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8003f2a:	2301      	movs	r3, #1
 8003f2c:	e007      	b.n	8003f3e <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	699b      	ldr	r3, [r3, #24]
 8003f34:	f003 0320 	and.w	r3, r3, #32
 8003f38:	2b20      	cmp	r3, #32
 8003f3a:	d1c8      	bne.n	8003ece <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003f3c:	2300      	movs	r3, #0
}
 8003f3e:	4618      	mov	r0, r3
 8003f40:	3710      	adds	r7, #16
 8003f42:	46bd      	mov	sp, r7
 8003f44:	bd80      	pop	{r7, pc}
	...

08003f48 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003f48:	b580      	push	{r7, lr}
 8003f4a:	b08a      	sub	sp, #40	@ 0x28
 8003f4c:	af00      	add	r7, sp, #0
 8003f4e:	60f8      	str	r0, [r7, #12]
 8003f50:	60b9      	str	r1, [r7, #8]
 8003f52:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003f54:	2300      	movs	r3, #0
 8003f56:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	699b      	ldr	r3, [r3, #24]
 8003f60:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8003f62:	2300      	movs	r3, #0
 8003f64:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8003f6a:	69bb      	ldr	r3, [r7, #24]
 8003f6c:	f003 0310 	and.w	r3, r3, #16
 8003f70:	2b00      	cmp	r3, #0
 8003f72:	d068      	beq.n	8004046 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	2210      	movs	r2, #16
 8003f7a:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003f7c:	e049      	b.n	8004012 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8003f7e:	68bb      	ldr	r3, [r7, #8]
 8003f80:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f84:	d045      	beq.n	8004012 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003f86:	f7fe fff7 	bl	8002f78 <HAL_GetTick>
 8003f8a:	4602      	mov	r2, r0
 8003f8c:	69fb      	ldr	r3, [r7, #28]
 8003f8e:	1ad3      	subs	r3, r2, r3
 8003f90:	68ba      	ldr	r2, [r7, #8]
 8003f92:	429a      	cmp	r2, r3
 8003f94:	d302      	bcc.n	8003f9c <I2C_IsErrorOccurred+0x54>
 8003f96:	68bb      	ldr	r3, [r7, #8]
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	d13a      	bne.n	8004012 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	685b      	ldr	r3, [r3, #4]
 8003fa2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003fa6:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003fae:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	699b      	ldr	r3, [r3, #24]
 8003fb6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003fba:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003fbe:	d121      	bne.n	8004004 <I2C_IsErrorOccurred+0xbc>
 8003fc0:	697b      	ldr	r3, [r7, #20]
 8003fc2:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003fc6:	d01d      	beq.n	8004004 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8003fc8:	7cfb      	ldrb	r3, [r7, #19]
 8003fca:	2b20      	cmp	r3, #32
 8003fcc:	d01a      	beq.n	8004004 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	685a      	ldr	r2, [r3, #4]
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003fdc:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8003fde:	f7fe ffcb 	bl	8002f78 <HAL_GetTick>
 8003fe2:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003fe4:	e00e      	b.n	8004004 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8003fe6:	f7fe ffc7 	bl	8002f78 <HAL_GetTick>
 8003fea:	4602      	mov	r2, r0
 8003fec:	69fb      	ldr	r3, [r7, #28]
 8003fee:	1ad3      	subs	r3, r2, r3
 8003ff0:	2b19      	cmp	r3, #25
 8003ff2:	d907      	bls.n	8004004 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8003ff4:	6a3b      	ldr	r3, [r7, #32]
 8003ff6:	f043 0320 	orr.w	r3, r3, #32
 8003ffa:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8003ffc:	2301      	movs	r3, #1
 8003ffe:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 8004002:	e006      	b.n	8004012 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	699b      	ldr	r3, [r3, #24]
 800400a:	f003 0320 	and.w	r3, r3, #32
 800400e:	2b20      	cmp	r3, #32
 8004010:	d1e9      	bne.n	8003fe6 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	699b      	ldr	r3, [r3, #24]
 8004018:	f003 0320 	and.w	r3, r3, #32
 800401c:	2b20      	cmp	r3, #32
 800401e:	d003      	beq.n	8004028 <I2C_IsErrorOccurred+0xe0>
 8004020:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8004024:	2b00      	cmp	r3, #0
 8004026:	d0aa      	beq.n	8003f7e <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8004028:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800402c:	2b00      	cmp	r3, #0
 800402e:	d103      	bne.n	8004038 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	2220      	movs	r2, #32
 8004036:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8004038:	6a3b      	ldr	r3, [r7, #32]
 800403a:	f043 0304 	orr.w	r3, r3, #4
 800403e:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8004040:	2301      	movs	r3, #1
 8004042:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	699b      	ldr	r3, [r3, #24]
 800404c:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800404e:	69bb      	ldr	r3, [r7, #24]
 8004050:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004054:	2b00      	cmp	r3, #0
 8004056:	d00b      	beq.n	8004070 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8004058:	6a3b      	ldr	r3, [r7, #32]
 800405a:	f043 0301 	orr.w	r3, r3, #1
 800405e:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8004068:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800406a:	2301      	movs	r3, #1
 800406c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8004070:	69bb      	ldr	r3, [r7, #24]
 8004072:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004076:	2b00      	cmp	r3, #0
 8004078:	d00b      	beq.n	8004092 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 800407a:	6a3b      	ldr	r3, [r7, #32]
 800407c:	f043 0308 	orr.w	r3, r3, #8
 8004080:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800408a:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800408c:	2301      	movs	r3, #1
 800408e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8004092:	69bb      	ldr	r3, [r7, #24]
 8004094:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004098:	2b00      	cmp	r3, #0
 800409a:	d00b      	beq.n	80040b4 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 800409c:	6a3b      	ldr	r3, [r7, #32]
 800409e:	f043 0302 	orr.w	r3, r3, #2
 80040a2:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80040ac:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80040ae:	2301      	movs	r3, #1
 80040b0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 80040b4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	d01c      	beq.n	80040f6 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80040bc:	68f8      	ldr	r0, [r7, #12]
 80040be:	f7ff fe3b 	bl	8003d38 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	6859      	ldr	r1, [r3, #4]
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	681a      	ldr	r2, [r3, #0]
 80040cc:	4b0d      	ldr	r3, [pc, #52]	@ (8004104 <I2C_IsErrorOccurred+0x1bc>)
 80040ce:	400b      	ands	r3, r1
 80040d0:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80040d6:	6a3b      	ldr	r3, [r7, #32]
 80040d8:	431a      	orrs	r2, r3
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	2220      	movs	r2, #32
 80040e2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	2200      	movs	r2, #0
 80040ea:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	2200      	movs	r2, #0
 80040f2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 80040f6:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 80040fa:	4618      	mov	r0, r3
 80040fc:	3728      	adds	r7, #40	@ 0x28
 80040fe:	46bd      	mov	sp, r7
 8004100:	bd80      	pop	{r7, pc}
 8004102:	bf00      	nop
 8004104:	fe00e800 	.word	0xfe00e800

08004108 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8004108:	b480      	push	{r7}
 800410a:	b087      	sub	sp, #28
 800410c:	af00      	add	r7, sp, #0
 800410e:	60f8      	str	r0, [r7, #12]
 8004110:	607b      	str	r3, [r7, #4]
 8004112:	460b      	mov	r3, r1
 8004114:	817b      	strh	r3, [r7, #10]
 8004116:	4613      	mov	r3, r2
 8004118:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800411a:	897b      	ldrh	r3, [r7, #10]
 800411c:	f3c3 0209 	ubfx	r2, r3, #0, #10
                    (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8004120:	7a7b      	ldrb	r3, [r7, #9]
 8004122:	041b      	lsls	r3, r3, #16
 8004124:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004128:	431a      	orrs	r2, r3
                    (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	431a      	orrs	r2, r3
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800412e:	6a3b      	ldr	r3, [r7, #32]
 8004130:	4313      	orrs	r3, r2
 8004132:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8004136:	617b      	str	r3, [r7, #20]
                    (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	685a      	ldr	r2, [r3, #4]
 800413e:	6a3b      	ldr	r3, [r7, #32]
 8004140:	0d5b      	lsrs	r3, r3, #21
 8004142:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8004146:	4b08      	ldr	r3, [pc, #32]	@ (8004168 <I2C_TransferConfig+0x60>)
 8004148:	430b      	orrs	r3, r1
 800414a:	43db      	mvns	r3, r3
 800414c:	ea02 0103 	and.w	r1, r2, r3
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	697a      	ldr	r2, [r7, #20]
 8004156:	430a      	orrs	r2, r1
 8004158:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800415a:	bf00      	nop
 800415c:	371c      	adds	r7, #28
 800415e:	46bd      	mov	sp, r7
 8004160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004164:	4770      	bx	lr
 8004166:	bf00      	nop
 8004168:	03ff63ff 	.word	0x03ff63ff

0800416c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800416c:	b480      	push	{r7}
 800416e:	b083      	sub	sp, #12
 8004170:	af00      	add	r7, sp, #0
 8004172:	6078      	str	r0, [r7, #4]
 8004174:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800417c:	b2db      	uxtb	r3, r3
 800417e:	2b20      	cmp	r3, #32
 8004180:	d138      	bne.n	80041f4 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004188:	2b01      	cmp	r3, #1
 800418a:	d101      	bne.n	8004190 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800418c:	2302      	movs	r3, #2
 800418e:	e032      	b.n	80041f6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	2201      	movs	r2, #1
 8004194:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	2224      	movs	r2, #36	@ 0x24
 800419c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	681a      	ldr	r2, [r3, #0]
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	f022 0201 	bic.w	r2, r2, #1
 80041ae:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	681a      	ldr	r2, [r3, #0]
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80041be:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	6819      	ldr	r1, [r3, #0]
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	683a      	ldr	r2, [r7, #0]
 80041cc:	430a      	orrs	r2, r1
 80041ce:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	681a      	ldr	r2, [r3, #0]
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	f042 0201 	orr.w	r2, r2, #1
 80041de:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	2220      	movs	r2, #32
 80041e4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	2200      	movs	r2, #0
 80041ec:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80041f0:	2300      	movs	r3, #0
 80041f2:	e000      	b.n	80041f6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80041f4:	2302      	movs	r3, #2
  }
}
 80041f6:	4618      	mov	r0, r3
 80041f8:	370c      	adds	r7, #12
 80041fa:	46bd      	mov	sp, r7
 80041fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004200:	4770      	bx	lr

08004202 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8004202:	b480      	push	{r7}
 8004204:	b085      	sub	sp, #20
 8004206:	af00      	add	r7, sp, #0
 8004208:	6078      	str	r0, [r7, #4]
 800420a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004212:	b2db      	uxtb	r3, r3
 8004214:	2b20      	cmp	r3, #32
 8004216:	d139      	bne.n	800428c <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800421e:	2b01      	cmp	r3, #1
 8004220:	d101      	bne.n	8004226 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8004222:	2302      	movs	r3, #2
 8004224:	e033      	b.n	800428e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	2201      	movs	r2, #1
 800422a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	2224      	movs	r2, #36	@ 0x24
 8004232:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	681a      	ldr	r2, [r3, #0]
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	f022 0201 	bic.w	r2, r2, #1
 8004244:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8004254:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8004256:	683b      	ldr	r3, [r7, #0]
 8004258:	021b      	lsls	r3, r3, #8
 800425a:	68fa      	ldr	r2, [r7, #12]
 800425c:	4313      	orrs	r3, r2
 800425e:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	68fa      	ldr	r2, [r7, #12]
 8004266:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	681a      	ldr	r2, [r3, #0]
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	f042 0201 	orr.w	r2, r2, #1
 8004276:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	2220      	movs	r2, #32
 800427c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	2200      	movs	r2, #0
 8004284:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8004288:	2300      	movs	r3, #0
 800428a:	e000      	b.n	800428e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800428c:	2302      	movs	r3, #2
  }
}
 800428e:	4618      	mov	r0, r3
 8004290:	3714      	adds	r7, #20
 8004292:	46bd      	mov	sp, r7
 8004294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004298:	4770      	bx	lr
	...

0800429c <HAL_PWREx_ConfigSupply>:
  *         process during startup.
  *         For more details, please refer to the power control chapter in the reference manual
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 800429c:	b580      	push	{r7, lr}
 800429e:	b084      	sub	sp, #16
 80042a0:	af00      	add	r7, sp, #0
 80042a2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 80042a4:	4b19      	ldr	r3, [pc, #100]	@ (800430c <HAL_PWREx_ConfigSupply+0x70>)
 80042a6:	68db      	ldr	r3, [r3, #12]
 80042a8:	f003 0304 	and.w	r3, r3, #4
 80042ac:	2b04      	cmp	r3, #4
 80042ae:	d00a      	beq.n	80042c6 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80042b0:	4b16      	ldr	r3, [pc, #88]	@ (800430c <HAL_PWREx_ConfigSupply+0x70>)
 80042b2:	68db      	ldr	r3, [r3, #12]
 80042b4:	f003 0307 	and.w	r3, r3, #7
 80042b8:	687a      	ldr	r2, [r7, #4]
 80042ba:	429a      	cmp	r2, r3
 80042bc:	d001      	beq.n	80042c2 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80042be:	2301      	movs	r3, #1
 80042c0:	e01f      	b.n	8004302 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80042c2:	2300      	movs	r3, #0
 80042c4:	e01d      	b.n	8004302 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80042c6:	4b11      	ldr	r3, [pc, #68]	@ (800430c <HAL_PWREx_ConfigSupply+0x70>)
 80042c8:	68db      	ldr	r3, [r3, #12]
 80042ca:	f023 0207 	bic.w	r2, r3, #7
 80042ce:	490f      	ldr	r1, [pc, #60]	@ (800430c <HAL_PWREx_ConfigSupply+0x70>)
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	4313      	orrs	r3, r2
 80042d4:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 80042d6:	f7fe fe4f 	bl	8002f78 <HAL_GetTick>
 80042da:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80042dc:	e009      	b.n	80042f2 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80042de:	f7fe fe4b 	bl	8002f78 <HAL_GetTick>
 80042e2:	4602      	mov	r2, r0
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	1ad3      	subs	r3, r2, r3
 80042e8:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80042ec:	d901      	bls.n	80042f2 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 80042ee:	2301      	movs	r3, #1
 80042f0:	e007      	b.n	8004302 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80042f2:	4b06      	ldr	r3, [pc, #24]	@ (800430c <HAL_PWREx_ConfigSupply+0x70>)
 80042f4:	685b      	ldr	r3, [r3, #4]
 80042f6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80042fa:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80042fe:	d1ee      	bne.n	80042de <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8004300:	2300      	movs	r3, #0
}
 8004302:	4618      	mov	r0, r3
 8004304:	3710      	adds	r7, #16
 8004306:	46bd      	mov	sp, r7
 8004308:	bd80      	pop	{r7, pc}
 800430a:	bf00      	nop
 800430c:	58024800 	.word	0x58024800

08004310 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004310:	b580      	push	{r7, lr}
 8004312:	b08c      	sub	sp, #48	@ 0x30
 8004314:	af00      	add	r7, sp, #0
 8004316:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	2b00      	cmp	r3, #0
 800431c:	d102      	bne.n	8004324 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800431e:	2301      	movs	r3, #1
 8004320:	f000 bc48 	b.w	8004bb4 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	f003 0301 	and.w	r3, r3, #1
 800432c:	2b00      	cmp	r3, #0
 800432e:	f000 8088 	beq.w	8004442 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004332:	4b99      	ldr	r3, [pc, #612]	@ (8004598 <HAL_RCC_OscConfig+0x288>)
 8004334:	691b      	ldr	r3, [r3, #16]
 8004336:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800433a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800433c:	4b96      	ldr	r3, [pc, #600]	@ (8004598 <HAL_RCC_OscConfig+0x288>)
 800433e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004340:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8004342:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004344:	2b10      	cmp	r3, #16
 8004346:	d007      	beq.n	8004358 <HAL_RCC_OscConfig+0x48>
 8004348:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800434a:	2b18      	cmp	r3, #24
 800434c:	d111      	bne.n	8004372 <HAL_RCC_OscConfig+0x62>
 800434e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004350:	f003 0303 	and.w	r3, r3, #3
 8004354:	2b02      	cmp	r3, #2
 8004356:	d10c      	bne.n	8004372 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004358:	4b8f      	ldr	r3, [pc, #572]	@ (8004598 <HAL_RCC_OscConfig+0x288>)
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004360:	2b00      	cmp	r3, #0
 8004362:	d06d      	beq.n	8004440 <HAL_RCC_OscConfig+0x130>
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	685b      	ldr	r3, [r3, #4]
 8004368:	2b00      	cmp	r3, #0
 800436a:	d169      	bne.n	8004440 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800436c:	2301      	movs	r3, #1
 800436e:	f000 bc21 	b.w	8004bb4 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	685b      	ldr	r3, [r3, #4]
 8004376:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800437a:	d106      	bne.n	800438a <HAL_RCC_OscConfig+0x7a>
 800437c:	4b86      	ldr	r3, [pc, #536]	@ (8004598 <HAL_RCC_OscConfig+0x288>)
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	4a85      	ldr	r2, [pc, #532]	@ (8004598 <HAL_RCC_OscConfig+0x288>)
 8004382:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004386:	6013      	str	r3, [r2, #0]
 8004388:	e02e      	b.n	80043e8 <HAL_RCC_OscConfig+0xd8>
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	685b      	ldr	r3, [r3, #4]
 800438e:	2b00      	cmp	r3, #0
 8004390:	d10c      	bne.n	80043ac <HAL_RCC_OscConfig+0x9c>
 8004392:	4b81      	ldr	r3, [pc, #516]	@ (8004598 <HAL_RCC_OscConfig+0x288>)
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	4a80      	ldr	r2, [pc, #512]	@ (8004598 <HAL_RCC_OscConfig+0x288>)
 8004398:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800439c:	6013      	str	r3, [r2, #0]
 800439e:	4b7e      	ldr	r3, [pc, #504]	@ (8004598 <HAL_RCC_OscConfig+0x288>)
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	4a7d      	ldr	r2, [pc, #500]	@ (8004598 <HAL_RCC_OscConfig+0x288>)
 80043a4:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80043a8:	6013      	str	r3, [r2, #0]
 80043aa:	e01d      	b.n	80043e8 <HAL_RCC_OscConfig+0xd8>
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	685b      	ldr	r3, [r3, #4]
 80043b0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80043b4:	d10c      	bne.n	80043d0 <HAL_RCC_OscConfig+0xc0>
 80043b6:	4b78      	ldr	r3, [pc, #480]	@ (8004598 <HAL_RCC_OscConfig+0x288>)
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	4a77      	ldr	r2, [pc, #476]	@ (8004598 <HAL_RCC_OscConfig+0x288>)
 80043bc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80043c0:	6013      	str	r3, [r2, #0]
 80043c2:	4b75      	ldr	r3, [pc, #468]	@ (8004598 <HAL_RCC_OscConfig+0x288>)
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	4a74      	ldr	r2, [pc, #464]	@ (8004598 <HAL_RCC_OscConfig+0x288>)
 80043c8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80043cc:	6013      	str	r3, [r2, #0]
 80043ce:	e00b      	b.n	80043e8 <HAL_RCC_OscConfig+0xd8>
 80043d0:	4b71      	ldr	r3, [pc, #452]	@ (8004598 <HAL_RCC_OscConfig+0x288>)
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	4a70      	ldr	r2, [pc, #448]	@ (8004598 <HAL_RCC_OscConfig+0x288>)
 80043d6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80043da:	6013      	str	r3, [r2, #0]
 80043dc:	4b6e      	ldr	r3, [pc, #440]	@ (8004598 <HAL_RCC_OscConfig+0x288>)
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	4a6d      	ldr	r2, [pc, #436]	@ (8004598 <HAL_RCC_OscConfig+0x288>)
 80043e2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80043e6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	685b      	ldr	r3, [r3, #4]
 80043ec:	2b00      	cmp	r3, #0
 80043ee:	d013      	beq.n	8004418 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80043f0:	f7fe fdc2 	bl	8002f78 <HAL_GetTick>
 80043f4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80043f6:	e008      	b.n	800440a <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80043f8:	f7fe fdbe 	bl	8002f78 <HAL_GetTick>
 80043fc:	4602      	mov	r2, r0
 80043fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004400:	1ad3      	subs	r3, r2, r3
 8004402:	2b64      	cmp	r3, #100	@ 0x64
 8004404:	d901      	bls.n	800440a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004406:	2303      	movs	r3, #3
 8004408:	e3d4      	b.n	8004bb4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800440a:	4b63      	ldr	r3, [pc, #396]	@ (8004598 <HAL_RCC_OscConfig+0x288>)
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004412:	2b00      	cmp	r3, #0
 8004414:	d0f0      	beq.n	80043f8 <HAL_RCC_OscConfig+0xe8>
 8004416:	e014      	b.n	8004442 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004418:	f7fe fdae 	bl	8002f78 <HAL_GetTick>
 800441c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800441e:	e008      	b.n	8004432 <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004420:	f7fe fdaa 	bl	8002f78 <HAL_GetTick>
 8004424:	4602      	mov	r2, r0
 8004426:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004428:	1ad3      	subs	r3, r2, r3
 800442a:	2b64      	cmp	r3, #100	@ 0x64
 800442c:	d901      	bls.n	8004432 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800442e:	2303      	movs	r3, #3
 8004430:	e3c0      	b.n	8004bb4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8004432:	4b59      	ldr	r3, [pc, #356]	@ (8004598 <HAL_RCC_OscConfig+0x288>)
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800443a:	2b00      	cmp	r3, #0
 800443c:	d1f0      	bne.n	8004420 <HAL_RCC_OscConfig+0x110>
 800443e:	e000      	b.n	8004442 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004440:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	f003 0302 	and.w	r3, r3, #2
 800444a:	2b00      	cmp	r3, #0
 800444c:	f000 80ca 	beq.w	80045e4 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004450:	4b51      	ldr	r3, [pc, #324]	@ (8004598 <HAL_RCC_OscConfig+0x288>)
 8004452:	691b      	ldr	r3, [r3, #16]
 8004454:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004458:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800445a:	4b4f      	ldr	r3, [pc, #316]	@ (8004598 <HAL_RCC_OscConfig+0x288>)
 800445c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800445e:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8004460:	6a3b      	ldr	r3, [r7, #32]
 8004462:	2b00      	cmp	r3, #0
 8004464:	d007      	beq.n	8004476 <HAL_RCC_OscConfig+0x166>
 8004466:	6a3b      	ldr	r3, [r7, #32]
 8004468:	2b18      	cmp	r3, #24
 800446a:	d156      	bne.n	800451a <HAL_RCC_OscConfig+0x20a>
 800446c:	69fb      	ldr	r3, [r7, #28]
 800446e:	f003 0303 	and.w	r3, r3, #3
 8004472:	2b00      	cmp	r3, #0
 8004474:	d151      	bne.n	800451a <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004476:	4b48      	ldr	r3, [pc, #288]	@ (8004598 <HAL_RCC_OscConfig+0x288>)
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	f003 0304 	and.w	r3, r3, #4
 800447e:	2b00      	cmp	r3, #0
 8004480:	d005      	beq.n	800448e <HAL_RCC_OscConfig+0x17e>
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	68db      	ldr	r3, [r3, #12]
 8004486:	2b00      	cmp	r3, #0
 8004488:	d101      	bne.n	800448e <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 800448a:	2301      	movs	r3, #1
 800448c:	e392      	b.n	8004bb4 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800448e:	4b42      	ldr	r3, [pc, #264]	@ (8004598 <HAL_RCC_OscConfig+0x288>)
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	f023 0219 	bic.w	r2, r3, #25
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	68db      	ldr	r3, [r3, #12]
 800449a:	493f      	ldr	r1, [pc, #252]	@ (8004598 <HAL_RCC_OscConfig+0x288>)
 800449c:	4313      	orrs	r3, r2
 800449e:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80044a0:	f7fe fd6a 	bl	8002f78 <HAL_GetTick>
 80044a4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80044a6:	e008      	b.n	80044ba <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80044a8:	f7fe fd66 	bl	8002f78 <HAL_GetTick>
 80044ac:	4602      	mov	r2, r0
 80044ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80044b0:	1ad3      	subs	r3, r2, r3
 80044b2:	2b02      	cmp	r3, #2
 80044b4:	d901      	bls.n	80044ba <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80044b6:	2303      	movs	r3, #3
 80044b8:	e37c      	b.n	8004bb4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80044ba:	4b37      	ldr	r3, [pc, #220]	@ (8004598 <HAL_RCC_OscConfig+0x288>)
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	f003 0304 	and.w	r3, r3, #4
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	d0f0      	beq.n	80044a8 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80044c6:	f7fe fd87 	bl	8002fd8 <HAL_GetREVID>
 80044ca:	4603      	mov	r3, r0
 80044cc:	f241 0203 	movw	r2, #4099	@ 0x1003
 80044d0:	4293      	cmp	r3, r2
 80044d2:	d817      	bhi.n	8004504 <HAL_RCC_OscConfig+0x1f4>
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	691b      	ldr	r3, [r3, #16]
 80044d8:	2b40      	cmp	r3, #64	@ 0x40
 80044da:	d108      	bne.n	80044ee <HAL_RCC_OscConfig+0x1de>
 80044dc:	4b2e      	ldr	r3, [pc, #184]	@ (8004598 <HAL_RCC_OscConfig+0x288>)
 80044de:	685b      	ldr	r3, [r3, #4]
 80044e0:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 80044e4:	4a2c      	ldr	r2, [pc, #176]	@ (8004598 <HAL_RCC_OscConfig+0x288>)
 80044e6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80044ea:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80044ec:	e07a      	b.n	80045e4 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80044ee:	4b2a      	ldr	r3, [pc, #168]	@ (8004598 <HAL_RCC_OscConfig+0x288>)
 80044f0:	685b      	ldr	r3, [r3, #4]
 80044f2:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	691b      	ldr	r3, [r3, #16]
 80044fa:	031b      	lsls	r3, r3, #12
 80044fc:	4926      	ldr	r1, [pc, #152]	@ (8004598 <HAL_RCC_OscConfig+0x288>)
 80044fe:	4313      	orrs	r3, r2
 8004500:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004502:	e06f      	b.n	80045e4 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004504:	4b24      	ldr	r3, [pc, #144]	@ (8004598 <HAL_RCC_OscConfig+0x288>)
 8004506:	685b      	ldr	r3, [r3, #4]
 8004508:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	691b      	ldr	r3, [r3, #16]
 8004510:	061b      	lsls	r3, r3, #24
 8004512:	4921      	ldr	r1, [pc, #132]	@ (8004598 <HAL_RCC_OscConfig+0x288>)
 8004514:	4313      	orrs	r3, r2
 8004516:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004518:	e064      	b.n	80045e4 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	68db      	ldr	r3, [r3, #12]
 800451e:	2b00      	cmp	r3, #0
 8004520:	d047      	beq.n	80045b2 <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8004522:	4b1d      	ldr	r3, [pc, #116]	@ (8004598 <HAL_RCC_OscConfig+0x288>)
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	f023 0219 	bic.w	r2, r3, #25
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	68db      	ldr	r3, [r3, #12]
 800452e:	491a      	ldr	r1, [pc, #104]	@ (8004598 <HAL_RCC_OscConfig+0x288>)
 8004530:	4313      	orrs	r3, r2
 8004532:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004534:	f7fe fd20 	bl	8002f78 <HAL_GetTick>
 8004538:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800453a:	e008      	b.n	800454e <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800453c:	f7fe fd1c 	bl	8002f78 <HAL_GetTick>
 8004540:	4602      	mov	r2, r0
 8004542:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004544:	1ad3      	subs	r3, r2, r3
 8004546:	2b02      	cmp	r3, #2
 8004548:	d901      	bls.n	800454e <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 800454a:	2303      	movs	r3, #3
 800454c:	e332      	b.n	8004bb4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800454e:	4b12      	ldr	r3, [pc, #72]	@ (8004598 <HAL_RCC_OscConfig+0x288>)
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	f003 0304 	and.w	r3, r3, #4
 8004556:	2b00      	cmp	r3, #0
 8004558:	d0f0      	beq.n	800453c <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800455a:	f7fe fd3d 	bl	8002fd8 <HAL_GetREVID>
 800455e:	4603      	mov	r3, r0
 8004560:	f241 0203 	movw	r2, #4099	@ 0x1003
 8004564:	4293      	cmp	r3, r2
 8004566:	d819      	bhi.n	800459c <HAL_RCC_OscConfig+0x28c>
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	691b      	ldr	r3, [r3, #16]
 800456c:	2b40      	cmp	r3, #64	@ 0x40
 800456e:	d108      	bne.n	8004582 <HAL_RCC_OscConfig+0x272>
 8004570:	4b09      	ldr	r3, [pc, #36]	@ (8004598 <HAL_RCC_OscConfig+0x288>)
 8004572:	685b      	ldr	r3, [r3, #4]
 8004574:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8004578:	4a07      	ldr	r2, [pc, #28]	@ (8004598 <HAL_RCC_OscConfig+0x288>)
 800457a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800457e:	6053      	str	r3, [r2, #4]
 8004580:	e030      	b.n	80045e4 <HAL_RCC_OscConfig+0x2d4>
 8004582:	4b05      	ldr	r3, [pc, #20]	@ (8004598 <HAL_RCC_OscConfig+0x288>)
 8004584:	685b      	ldr	r3, [r3, #4]
 8004586:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	691b      	ldr	r3, [r3, #16]
 800458e:	031b      	lsls	r3, r3, #12
 8004590:	4901      	ldr	r1, [pc, #4]	@ (8004598 <HAL_RCC_OscConfig+0x288>)
 8004592:	4313      	orrs	r3, r2
 8004594:	604b      	str	r3, [r1, #4]
 8004596:	e025      	b.n	80045e4 <HAL_RCC_OscConfig+0x2d4>
 8004598:	58024400 	.word	0x58024400
 800459c:	4b9a      	ldr	r3, [pc, #616]	@ (8004808 <HAL_RCC_OscConfig+0x4f8>)
 800459e:	685b      	ldr	r3, [r3, #4]
 80045a0:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	691b      	ldr	r3, [r3, #16]
 80045a8:	061b      	lsls	r3, r3, #24
 80045aa:	4997      	ldr	r1, [pc, #604]	@ (8004808 <HAL_RCC_OscConfig+0x4f8>)
 80045ac:	4313      	orrs	r3, r2
 80045ae:	604b      	str	r3, [r1, #4]
 80045b0:	e018      	b.n	80045e4 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80045b2:	4b95      	ldr	r3, [pc, #596]	@ (8004808 <HAL_RCC_OscConfig+0x4f8>)
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	4a94      	ldr	r2, [pc, #592]	@ (8004808 <HAL_RCC_OscConfig+0x4f8>)
 80045b8:	f023 0301 	bic.w	r3, r3, #1
 80045bc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80045be:	f7fe fcdb 	bl	8002f78 <HAL_GetTick>
 80045c2:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80045c4:	e008      	b.n	80045d8 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80045c6:	f7fe fcd7 	bl	8002f78 <HAL_GetTick>
 80045ca:	4602      	mov	r2, r0
 80045cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80045ce:	1ad3      	subs	r3, r2, r3
 80045d0:	2b02      	cmp	r3, #2
 80045d2:	d901      	bls.n	80045d8 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 80045d4:	2303      	movs	r3, #3
 80045d6:	e2ed      	b.n	8004bb4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80045d8:	4b8b      	ldr	r3, [pc, #556]	@ (8004808 <HAL_RCC_OscConfig+0x4f8>)
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	f003 0304 	and.w	r3, r3, #4
 80045e0:	2b00      	cmp	r3, #0
 80045e2:	d1f0      	bne.n	80045c6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	f003 0310 	and.w	r3, r3, #16
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	f000 80a9 	beq.w	8004744 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80045f2:	4b85      	ldr	r3, [pc, #532]	@ (8004808 <HAL_RCC_OscConfig+0x4f8>)
 80045f4:	691b      	ldr	r3, [r3, #16]
 80045f6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80045fa:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80045fc:	4b82      	ldr	r3, [pc, #520]	@ (8004808 <HAL_RCC_OscConfig+0x4f8>)
 80045fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004600:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8004602:	69bb      	ldr	r3, [r7, #24]
 8004604:	2b08      	cmp	r3, #8
 8004606:	d007      	beq.n	8004618 <HAL_RCC_OscConfig+0x308>
 8004608:	69bb      	ldr	r3, [r7, #24]
 800460a:	2b18      	cmp	r3, #24
 800460c:	d13a      	bne.n	8004684 <HAL_RCC_OscConfig+0x374>
 800460e:	697b      	ldr	r3, [r7, #20]
 8004610:	f003 0303 	and.w	r3, r3, #3
 8004614:	2b01      	cmp	r3, #1
 8004616:	d135      	bne.n	8004684 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004618:	4b7b      	ldr	r3, [pc, #492]	@ (8004808 <HAL_RCC_OscConfig+0x4f8>)
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004620:	2b00      	cmp	r3, #0
 8004622:	d005      	beq.n	8004630 <HAL_RCC_OscConfig+0x320>
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	69db      	ldr	r3, [r3, #28]
 8004628:	2b80      	cmp	r3, #128	@ 0x80
 800462a:	d001      	beq.n	8004630 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 800462c:	2301      	movs	r3, #1
 800462e:	e2c1      	b.n	8004bb4 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004630:	f7fe fcd2 	bl	8002fd8 <HAL_GetREVID>
 8004634:	4603      	mov	r3, r0
 8004636:	f241 0203 	movw	r2, #4099	@ 0x1003
 800463a:	4293      	cmp	r3, r2
 800463c:	d817      	bhi.n	800466e <HAL_RCC_OscConfig+0x35e>
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	6a1b      	ldr	r3, [r3, #32]
 8004642:	2b20      	cmp	r3, #32
 8004644:	d108      	bne.n	8004658 <HAL_RCC_OscConfig+0x348>
 8004646:	4b70      	ldr	r3, [pc, #448]	@ (8004808 <HAL_RCC_OscConfig+0x4f8>)
 8004648:	685b      	ldr	r3, [r3, #4]
 800464a:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 800464e:	4a6e      	ldr	r2, [pc, #440]	@ (8004808 <HAL_RCC_OscConfig+0x4f8>)
 8004650:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8004654:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004656:	e075      	b.n	8004744 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004658:	4b6b      	ldr	r3, [pc, #428]	@ (8004808 <HAL_RCC_OscConfig+0x4f8>)
 800465a:	685b      	ldr	r3, [r3, #4]
 800465c:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	6a1b      	ldr	r3, [r3, #32]
 8004664:	069b      	lsls	r3, r3, #26
 8004666:	4968      	ldr	r1, [pc, #416]	@ (8004808 <HAL_RCC_OscConfig+0x4f8>)
 8004668:	4313      	orrs	r3, r2
 800466a:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800466c:	e06a      	b.n	8004744 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800466e:	4b66      	ldr	r3, [pc, #408]	@ (8004808 <HAL_RCC_OscConfig+0x4f8>)
 8004670:	68db      	ldr	r3, [r3, #12]
 8004672:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	6a1b      	ldr	r3, [r3, #32]
 800467a:	061b      	lsls	r3, r3, #24
 800467c:	4962      	ldr	r1, [pc, #392]	@ (8004808 <HAL_RCC_OscConfig+0x4f8>)
 800467e:	4313      	orrs	r3, r2
 8004680:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004682:	e05f      	b.n	8004744 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	69db      	ldr	r3, [r3, #28]
 8004688:	2b00      	cmp	r3, #0
 800468a:	d042      	beq.n	8004712 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 800468c:	4b5e      	ldr	r3, [pc, #376]	@ (8004808 <HAL_RCC_OscConfig+0x4f8>)
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	4a5d      	ldr	r2, [pc, #372]	@ (8004808 <HAL_RCC_OscConfig+0x4f8>)
 8004692:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004696:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004698:	f7fe fc6e 	bl	8002f78 <HAL_GetTick>
 800469c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800469e:	e008      	b.n	80046b2 <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80046a0:	f7fe fc6a 	bl	8002f78 <HAL_GetTick>
 80046a4:	4602      	mov	r2, r0
 80046a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80046a8:	1ad3      	subs	r3, r2, r3
 80046aa:	2b02      	cmp	r3, #2
 80046ac:	d901      	bls.n	80046b2 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 80046ae:	2303      	movs	r3, #3
 80046b0:	e280      	b.n	8004bb4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80046b2:	4b55      	ldr	r3, [pc, #340]	@ (8004808 <HAL_RCC_OscConfig+0x4f8>)
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	d0f0      	beq.n	80046a0 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80046be:	f7fe fc8b 	bl	8002fd8 <HAL_GetREVID>
 80046c2:	4603      	mov	r3, r0
 80046c4:	f241 0203 	movw	r2, #4099	@ 0x1003
 80046c8:	4293      	cmp	r3, r2
 80046ca:	d817      	bhi.n	80046fc <HAL_RCC_OscConfig+0x3ec>
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	6a1b      	ldr	r3, [r3, #32]
 80046d0:	2b20      	cmp	r3, #32
 80046d2:	d108      	bne.n	80046e6 <HAL_RCC_OscConfig+0x3d6>
 80046d4:	4b4c      	ldr	r3, [pc, #304]	@ (8004808 <HAL_RCC_OscConfig+0x4f8>)
 80046d6:	685b      	ldr	r3, [r3, #4]
 80046d8:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 80046dc:	4a4a      	ldr	r2, [pc, #296]	@ (8004808 <HAL_RCC_OscConfig+0x4f8>)
 80046de:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80046e2:	6053      	str	r3, [r2, #4]
 80046e4:	e02e      	b.n	8004744 <HAL_RCC_OscConfig+0x434>
 80046e6:	4b48      	ldr	r3, [pc, #288]	@ (8004808 <HAL_RCC_OscConfig+0x4f8>)
 80046e8:	685b      	ldr	r3, [r3, #4]
 80046ea:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	6a1b      	ldr	r3, [r3, #32]
 80046f2:	069b      	lsls	r3, r3, #26
 80046f4:	4944      	ldr	r1, [pc, #272]	@ (8004808 <HAL_RCC_OscConfig+0x4f8>)
 80046f6:	4313      	orrs	r3, r2
 80046f8:	604b      	str	r3, [r1, #4]
 80046fa:	e023      	b.n	8004744 <HAL_RCC_OscConfig+0x434>
 80046fc:	4b42      	ldr	r3, [pc, #264]	@ (8004808 <HAL_RCC_OscConfig+0x4f8>)
 80046fe:	68db      	ldr	r3, [r3, #12]
 8004700:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	6a1b      	ldr	r3, [r3, #32]
 8004708:	061b      	lsls	r3, r3, #24
 800470a:	493f      	ldr	r1, [pc, #252]	@ (8004808 <HAL_RCC_OscConfig+0x4f8>)
 800470c:	4313      	orrs	r3, r2
 800470e:	60cb      	str	r3, [r1, #12]
 8004710:	e018      	b.n	8004744 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8004712:	4b3d      	ldr	r3, [pc, #244]	@ (8004808 <HAL_RCC_OscConfig+0x4f8>)
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	4a3c      	ldr	r2, [pc, #240]	@ (8004808 <HAL_RCC_OscConfig+0x4f8>)
 8004718:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800471c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800471e:	f7fe fc2b 	bl	8002f78 <HAL_GetTick>
 8004722:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8004724:	e008      	b.n	8004738 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8004726:	f7fe fc27 	bl	8002f78 <HAL_GetTick>
 800472a:	4602      	mov	r2, r0
 800472c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800472e:	1ad3      	subs	r3, r2, r3
 8004730:	2b02      	cmp	r3, #2
 8004732:	d901      	bls.n	8004738 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004734:	2303      	movs	r3, #3
 8004736:	e23d      	b.n	8004bb4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8004738:	4b33      	ldr	r3, [pc, #204]	@ (8004808 <HAL_RCC_OscConfig+0x4f8>)
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004740:	2b00      	cmp	r3, #0
 8004742:	d1f0      	bne.n	8004726 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	f003 0308 	and.w	r3, r3, #8
 800474c:	2b00      	cmp	r3, #0
 800474e:	d036      	beq.n	80047be <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	695b      	ldr	r3, [r3, #20]
 8004754:	2b00      	cmp	r3, #0
 8004756:	d019      	beq.n	800478c <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004758:	4b2b      	ldr	r3, [pc, #172]	@ (8004808 <HAL_RCC_OscConfig+0x4f8>)
 800475a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800475c:	4a2a      	ldr	r2, [pc, #168]	@ (8004808 <HAL_RCC_OscConfig+0x4f8>)
 800475e:	f043 0301 	orr.w	r3, r3, #1
 8004762:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004764:	f7fe fc08 	bl	8002f78 <HAL_GetTick>
 8004768:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800476a:	e008      	b.n	800477e <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800476c:	f7fe fc04 	bl	8002f78 <HAL_GetTick>
 8004770:	4602      	mov	r2, r0
 8004772:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004774:	1ad3      	subs	r3, r2, r3
 8004776:	2b02      	cmp	r3, #2
 8004778:	d901      	bls.n	800477e <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 800477a:	2303      	movs	r3, #3
 800477c:	e21a      	b.n	8004bb4 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800477e:	4b22      	ldr	r3, [pc, #136]	@ (8004808 <HAL_RCC_OscConfig+0x4f8>)
 8004780:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004782:	f003 0302 	and.w	r3, r3, #2
 8004786:	2b00      	cmp	r3, #0
 8004788:	d0f0      	beq.n	800476c <HAL_RCC_OscConfig+0x45c>
 800478a:	e018      	b.n	80047be <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800478c:	4b1e      	ldr	r3, [pc, #120]	@ (8004808 <HAL_RCC_OscConfig+0x4f8>)
 800478e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004790:	4a1d      	ldr	r2, [pc, #116]	@ (8004808 <HAL_RCC_OscConfig+0x4f8>)
 8004792:	f023 0301 	bic.w	r3, r3, #1
 8004796:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004798:	f7fe fbee 	bl	8002f78 <HAL_GetTick>
 800479c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800479e:	e008      	b.n	80047b2 <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80047a0:	f7fe fbea 	bl	8002f78 <HAL_GetTick>
 80047a4:	4602      	mov	r2, r0
 80047a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80047a8:	1ad3      	subs	r3, r2, r3
 80047aa:	2b02      	cmp	r3, #2
 80047ac:	d901      	bls.n	80047b2 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 80047ae:	2303      	movs	r3, #3
 80047b0:	e200      	b.n	8004bb4 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80047b2:	4b15      	ldr	r3, [pc, #84]	@ (8004808 <HAL_RCC_OscConfig+0x4f8>)
 80047b4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80047b6:	f003 0302 	and.w	r3, r3, #2
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	d1f0      	bne.n	80047a0 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	f003 0320 	and.w	r3, r3, #32
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	d039      	beq.n	800483e <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	699b      	ldr	r3, [r3, #24]
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	d01c      	beq.n	800480c <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80047d2:	4b0d      	ldr	r3, [pc, #52]	@ (8004808 <HAL_RCC_OscConfig+0x4f8>)
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	4a0c      	ldr	r2, [pc, #48]	@ (8004808 <HAL_RCC_OscConfig+0x4f8>)
 80047d8:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80047dc:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80047de:	f7fe fbcb 	bl	8002f78 <HAL_GetTick>
 80047e2:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80047e4:	e008      	b.n	80047f8 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80047e6:	f7fe fbc7 	bl	8002f78 <HAL_GetTick>
 80047ea:	4602      	mov	r2, r0
 80047ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80047ee:	1ad3      	subs	r3, r2, r3
 80047f0:	2b02      	cmp	r3, #2
 80047f2:	d901      	bls.n	80047f8 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 80047f4:	2303      	movs	r3, #3
 80047f6:	e1dd      	b.n	8004bb4 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80047f8:	4b03      	ldr	r3, [pc, #12]	@ (8004808 <HAL_RCC_OscConfig+0x4f8>)
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004800:	2b00      	cmp	r3, #0
 8004802:	d0f0      	beq.n	80047e6 <HAL_RCC_OscConfig+0x4d6>
 8004804:	e01b      	b.n	800483e <HAL_RCC_OscConfig+0x52e>
 8004806:	bf00      	nop
 8004808:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800480c:	4b9b      	ldr	r3, [pc, #620]	@ (8004a7c <HAL_RCC_OscConfig+0x76c>)
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	4a9a      	ldr	r2, [pc, #616]	@ (8004a7c <HAL_RCC_OscConfig+0x76c>)
 8004812:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004816:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8004818:	f7fe fbae 	bl	8002f78 <HAL_GetTick>
 800481c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800481e:	e008      	b.n	8004832 <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004820:	f7fe fbaa 	bl	8002f78 <HAL_GetTick>
 8004824:	4602      	mov	r2, r0
 8004826:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004828:	1ad3      	subs	r3, r2, r3
 800482a:	2b02      	cmp	r3, #2
 800482c:	d901      	bls.n	8004832 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 800482e:	2303      	movs	r3, #3
 8004830:	e1c0      	b.n	8004bb4 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8004832:	4b92      	ldr	r3, [pc, #584]	@ (8004a7c <HAL_RCC_OscConfig+0x76c>)
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800483a:	2b00      	cmp	r3, #0
 800483c:	d1f0      	bne.n	8004820 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	f003 0304 	and.w	r3, r3, #4
 8004846:	2b00      	cmp	r3, #0
 8004848:	f000 8081 	beq.w	800494e <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800484c:	4b8c      	ldr	r3, [pc, #560]	@ (8004a80 <HAL_RCC_OscConfig+0x770>)
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	4a8b      	ldr	r2, [pc, #556]	@ (8004a80 <HAL_RCC_OscConfig+0x770>)
 8004852:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004856:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004858:	f7fe fb8e 	bl	8002f78 <HAL_GetTick>
 800485c:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800485e:	e008      	b.n	8004872 <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004860:	f7fe fb8a 	bl	8002f78 <HAL_GetTick>
 8004864:	4602      	mov	r2, r0
 8004866:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004868:	1ad3      	subs	r3, r2, r3
 800486a:	2b64      	cmp	r3, #100	@ 0x64
 800486c:	d901      	bls.n	8004872 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 800486e:	2303      	movs	r3, #3
 8004870:	e1a0      	b.n	8004bb4 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004872:	4b83      	ldr	r3, [pc, #524]	@ (8004a80 <HAL_RCC_OscConfig+0x770>)
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800487a:	2b00      	cmp	r3, #0
 800487c:	d0f0      	beq.n	8004860 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	689b      	ldr	r3, [r3, #8]
 8004882:	2b01      	cmp	r3, #1
 8004884:	d106      	bne.n	8004894 <HAL_RCC_OscConfig+0x584>
 8004886:	4b7d      	ldr	r3, [pc, #500]	@ (8004a7c <HAL_RCC_OscConfig+0x76c>)
 8004888:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800488a:	4a7c      	ldr	r2, [pc, #496]	@ (8004a7c <HAL_RCC_OscConfig+0x76c>)
 800488c:	f043 0301 	orr.w	r3, r3, #1
 8004890:	6713      	str	r3, [r2, #112]	@ 0x70
 8004892:	e02d      	b.n	80048f0 <HAL_RCC_OscConfig+0x5e0>
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	689b      	ldr	r3, [r3, #8]
 8004898:	2b00      	cmp	r3, #0
 800489a:	d10c      	bne.n	80048b6 <HAL_RCC_OscConfig+0x5a6>
 800489c:	4b77      	ldr	r3, [pc, #476]	@ (8004a7c <HAL_RCC_OscConfig+0x76c>)
 800489e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80048a0:	4a76      	ldr	r2, [pc, #472]	@ (8004a7c <HAL_RCC_OscConfig+0x76c>)
 80048a2:	f023 0301 	bic.w	r3, r3, #1
 80048a6:	6713      	str	r3, [r2, #112]	@ 0x70
 80048a8:	4b74      	ldr	r3, [pc, #464]	@ (8004a7c <HAL_RCC_OscConfig+0x76c>)
 80048aa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80048ac:	4a73      	ldr	r2, [pc, #460]	@ (8004a7c <HAL_RCC_OscConfig+0x76c>)
 80048ae:	f023 0304 	bic.w	r3, r3, #4
 80048b2:	6713      	str	r3, [r2, #112]	@ 0x70
 80048b4:	e01c      	b.n	80048f0 <HAL_RCC_OscConfig+0x5e0>
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	689b      	ldr	r3, [r3, #8]
 80048ba:	2b05      	cmp	r3, #5
 80048bc:	d10c      	bne.n	80048d8 <HAL_RCC_OscConfig+0x5c8>
 80048be:	4b6f      	ldr	r3, [pc, #444]	@ (8004a7c <HAL_RCC_OscConfig+0x76c>)
 80048c0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80048c2:	4a6e      	ldr	r2, [pc, #440]	@ (8004a7c <HAL_RCC_OscConfig+0x76c>)
 80048c4:	f043 0304 	orr.w	r3, r3, #4
 80048c8:	6713      	str	r3, [r2, #112]	@ 0x70
 80048ca:	4b6c      	ldr	r3, [pc, #432]	@ (8004a7c <HAL_RCC_OscConfig+0x76c>)
 80048cc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80048ce:	4a6b      	ldr	r2, [pc, #428]	@ (8004a7c <HAL_RCC_OscConfig+0x76c>)
 80048d0:	f043 0301 	orr.w	r3, r3, #1
 80048d4:	6713      	str	r3, [r2, #112]	@ 0x70
 80048d6:	e00b      	b.n	80048f0 <HAL_RCC_OscConfig+0x5e0>
 80048d8:	4b68      	ldr	r3, [pc, #416]	@ (8004a7c <HAL_RCC_OscConfig+0x76c>)
 80048da:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80048dc:	4a67      	ldr	r2, [pc, #412]	@ (8004a7c <HAL_RCC_OscConfig+0x76c>)
 80048de:	f023 0301 	bic.w	r3, r3, #1
 80048e2:	6713      	str	r3, [r2, #112]	@ 0x70
 80048e4:	4b65      	ldr	r3, [pc, #404]	@ (8004a7c <HAL_RCC_OscConfig+0x76c>)
 80048e6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80048e8:	4a64      	ldr	r2, [pc, #400]	@ (8004a7c <HAL_RCC_OscConfig+0x76c>)
 80048ea:	f023 0304 	bic.w	r3, r3, #4
 80048ee:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	689b      	ldr	r3, [r3, #8]
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	d015      	beq.n	8004924 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80048f8:	f7fe fb3e 	bl	8002f78 <HAL_GetTick>
 80048fc:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80048fe:	e00a      	b.n	8004916 <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004900:	f7fe fb3a 	bl	8002f78 <HAL_GetTick>
 8004904:	4602      	mov	r2, r0
 8004906:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004908:	1ad3      	subs	r3, r2, r3
 800490a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800490e:	4293      	cmp	r3, r2
 8004910:	d901      	bls.n	8004916 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8004912:	2303      	movs	r3, #3
 8004914:	e14e      	b.n	8004bb4 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004916:	4b59      	ldr	r3, [pc, #356]	@ (8004a7c <HAL_RCC_OscConfig+0x76c>)
 8004918:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800491a:	f003 0302 	and.w	r3, r3, #2
 800491e:	2b00      	cmp	r3, #0
 8004920:	d0ee      	beq.n	8004900 <HAL_RCC_OscConfig+0x5f0>
 8004922:	e014      	b.n	800494e <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004924:	f7fe fb28 	bl	8002f78 <HAL_GetTick>
 8004928:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800492a:	e00a      	b.n	8004942 <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800492c:	f7fe fb24 	bl	8002f78 <HAL_GetTick>
 8004930:	4602      	mov	r2, r0
 8004932:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004934:	1ad3      	subs	r3, r2, r3
 8004936:	f241 3288 	movw	r2, #5000	@ 0x1388
 800493a:	4293      	cmp	r3, r2
 800493c:	d901      	bls.n	8004942 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 800493e:	2303      	movs	r3, #3
 8004940:	e138      	b.n	8004bb4 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8004942:	4b4e      	ldr	r3, [pc, #312]	@ (8004a7c <HAL_RCC_OscConfig+0x76c>)
 8004944:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004946:	f003 0302 	and.w	r3, r3, #2
 800494a:	2b00      	cmp	r3, #0
 800494c:	d1ee      	bne.n	800492c <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004952:	2b00      	cmp	r3, #0
 8004954:	f000 812d 	beq.w	8004bb2 <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8004958:	4b48      	ldr	r3, [pc, #288]	@ (8004a7c <HAL_RCC_OscConfig+0x76c>)
 800495a:	691b      	ldr	r3, [r3, #16]
 800495c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004960:	2b18      	cmp	r3, #24
 8004962:	f000 80bd 	beq.w	8004ae0 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800496a:	2b02      	cmp	r3, #2
 800496c:	f040 809e 	bne.w	8004aac <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004970:	4b42      	ldr	r3, [pc, #264]	@ (8004a7c <HAL_RCC_OscConfig+0x76c>)
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	4a41      	ldr	r2, [pc, #260]	@ (8004a7c <HAL_RCC_OscConfig+0x76c>)
 8004976:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800497a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800497c:	f7fe fafc 	bl	8002f78 <HAL_GetTick>
 8004980:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004982:	e008      	b.n	8004996 <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004984:	f7fe faf8 	bl	8002f78 <HAL_GetTick>
 8004988:	4602      	mov	r2, r0
 800498a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800498c:	1ad3      	subs	r3, r2, r3
 800498e:	2b02      	cmp	r3, #2
 8004990:	d901      	bls.n	8004996 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8004992:	2303      	movs	r3, #3
 8004994:	e10e      	b.n	8004bb4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004996:	4b39      	ldr	r3, [pc, #228]	@ (8004a7c <HAL_RCC_OscConfig+0x76c>)
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800499e:	2b00      	cmp	r3, #0
 80049a0:	d1f0      	bne.n	8004984 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80049a2:	4b36      	ldr	r3, [pc, #216]	@ (8004a7c <HAL_RCC_OscConfig+0x76c>)
 80049a4:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80049a6:	4b37      	ldr	r3, [pc, #220]	@ (8004a84 <HAL_RCC_OscConfig+0x774>)
 80049a8:	4013      	ands	r3, r2
 80049aa:	687a      	ldr	r2, [r7, #4]
 80049ac:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 80049ae:	687a      	ldr	r2, [r7, #4]
 80049b0:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80049b2:	0112      	lsls	r2, r2, #4
 80049b4:	430a      	orrs	r2, r1
 80049b6:	4931      	ldr	r1, [pc, #196]	@ (8004a7c <HAL_RCC_OscConfig+0x76c>)
 80049b8:	4313      	orrs	r3, r2
 80049ba:	628b      	str	r3, [r1, #40]	@ 0x28
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80049c0:	3b01      	subs	r3, #1
 80049c2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80049ca:	3b01      	subs	r3, #1
 80049cc:	025b      	lsls	r3, r3, #9
 80049ce:	b29b      	uxth	r3, r3
 80049d0:	431a      	orrs	r2, r3
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80049d6:	3b01      	subs	r3, #1
 80049d8:	041b      	lsls	r3, r3, #16
 80049da:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80049de:	431a      	orrs	r2, r3
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80049e4:	3b01      	subs	r3, #1
 80049e6:	061b      	lsls	r3, r3, #24
 80049e8:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 80049ec:	4923      	ldr	r1, [pc, #140]	@ (8004a7c <HAL_RCC_OscConfig+0x76c>)
 80049ee:	4313      	orrs	r3, r2
 80049f0:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 80049f2:	4b22      	ldr	r3, [pc, #136]	@ (8004a7c <HAL_RCC_OscConfig+0x76c>)
 80049f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80049f6:	4a21      	ldr	r2, [pc, #132]	@ (8004a7c <HAL_RCC_OscConfig+0x76c>)
 80049f8:	f023 0301 	bic.w	r3, r3, #1
 80049fc:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80049fe:	4b1f      	ldr	r3, [pc, #124]	@ (8004a7c <HAL_RCC_OscConfig+0x76c>)
 8004a00:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004a02:	4b21      	ldr	r3, [pc, #132]	@ (8004a88 <HAL_RCC_OscConfig+0x778>)
 8004a04:	4013      	ands	r3, r2
 8004a06:	687a      	ldr	r2, [r7, #4]
 8004a08:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8004a0a:	00d2      	lsls	r2, r2, #3
 8004a0c:	491b      	ldr	r1, [pc, #108]	@ (8004a7c <HAL_RCC_OscConfig+0x76c>)
 8004a0e:	4313      	orrs	r3, r2
 8004a10:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8004a12:	4b1a      	ldr	r3, [pc, #104]	@ (8004a7c <HAL_RCC_OscConfig+0x76c>)
 8004a14:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004a16:	f023 020c 	bic.w	r2, r3, #12
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a1e:	4917      	ldr	r1, [pc, #92]	@ (8004a7c <HAL_RCC_OscConfig+0x76c>)
 8004a20:	4313      	orrs	r3, r2
 8004a22:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8004a24:	4b15      	ldr	r3, [pc, #84]	@ (8004a7c <HAL_RCC_OscConfig+0x76c>)
 8004a26:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004a28:	f023 0202 	bic.w	r2, r3, #2
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004a30:	4912      	ldr	r1, [pc, #72]	@ (8004a7c <HAL_RCC_OscConfig+0x76c>)
 8004a32:	4313      	orrs	r3, r2
 8004a34:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8004a36:	4b11      	ldr	r3, [pc, #68]	@ (8004a7c <HAL_RCC_OscConfig+0x76c>)
 8004a38:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004a3a:	4a10      	ldr	r2, [pc, #64]	@ (8004a7c <HAL_RCC_OscConfig+0x76c>)
 8004a3c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004a40:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004a42:	4b0e      	ldr	r3, [pc, #56]	@ (8004a7c <HAL_RCC_OscConfig+0x76c>)
 8004a44:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004a46:	4a0d      	ldr	r2, [pc, #52]	@ (8004a7c <HAL_RCC_OscConfig+0x76c>)
 8004a48:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004a4c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8004a4e:	4b0b      	ldr	r3, [pc, #44]	@ (8004a7c <HAL_RCC_OscConfig+0x76c>)
 8004a50:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004a52:	4a0a      	ldr	r2, [pc, #40]	@ (8004a7c <HAL_RCC_OscConfig+0x76c>)
 8004a54:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004a58:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8004a5a:	4b08      	ldr	r3, [pc, #32]	@ (8004a7c <HAL_RCC_OscConfig+0x76c>)
 8004a5c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004a5e:	4a07      	ldr	r2, [pc, #28]	@ (8004a7c <HAL_RCC_OscConfig+0x76c>)
 8004a60:	f043 0301 	orr.w	r3, r3, #1
 8004a64:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004a66:	4b05      	ldr	r3, [pc, #20]	@ (8004a7c <HAL_RCC_OscConfig+0x76c>)
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	4a04      	ldr	r2, [pc, #16]	@ (8004a7c <HAL_RCC_OscConfig+0x76c>)
 8004a6c:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004a70:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a72:	f7fe fa81 	bl	8002f78 <HAL_GetTick>
 8004a76:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004a78:	e011      	b.n	8004a9e <HAL_RCC_OscConfig+0x78e>
 8004a7a:	bf00      	nop
 8004a7c:	58024400 	.word	0x58024400
 8004a80:	58024800 	.word	0x58024800
 8004a84:	fffffc0c 	.word	0xfffffc0c
 8004a88:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004a8c:	f7fe fa74 	bl	8002f78 <HAL_GetTick>
 8004a90:	4602      	mov	r2, r0
 8004a92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a94:	1ad3      	subs	r3, r2, r3
 8004a96:	2b02      	cmp	r3, #2
 8004a98:	d901      	bls.n	8004a9e <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8004a9a:	2303      	movs	r3, #3
 8004a9c:	e08a      	b.n	8004bb4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004a9e:	4b47      	ldr	r3, [pc, #284]	@ (8004bbc <HAL_RCC_OscConfig+0x8ac>)
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	d0f0      	beq.n	8004a8c <HAL_RCC_OscConfig+0x77c>
 8004aaa:	e082      	b.n	8004bb2 <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004aac:	4b43      	ldr	r3, [pc, #268]	@ (8004bbc <HAL_RCC_OscConfig+0x8ac>)
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	4a42      	ldr	r2, [pc, #264]	@ (8004bbc <HAL_RCC_OscConfig+0x8ac>)
 8004ab2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004ab6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ab8:	f7fe fa5e 	bl	8002f78 <HAL_GetTick>
 8004abc:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004abe:	e008      	b.n	8004ad2 <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004ac0:	f7fe fa5a 	bl	8002f78 <HAL_GetTick>
 8004ac4:	4602      	mov	r2, r0
 8004ac6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ac8:	1ad3      	subs	r3, r2, r3
 8004aca:	2b02      	cmp	r3, #2
 8004acc:	d901      	bls.n	8004ad2 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8004ace:	2303      	movs	r3, #3
 8004ad0:	e070      	b.n	8004bb4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004ad2:	4b3a      	ldr	r3, [pc, #232]	@ (8004bbc <HAL_RCC_OscConfig+0x8ac>)
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	d1f0      	bne.n	8004ac0 <HAL_RCC_OscConfig+0x7b0>
 8004ade:	e068      	b.n	8004bb2 <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8004ae0:	4b36      	ldr	r3, [pc, #216]	@ (8004bbc <HAL_RCC_OscConfig+0x8ac>)
 8004ae2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004ae4:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8004ae6:	4b35      	ldr	r3, [pc, #212]	@ (8004bbc <HAL_RCC_OscConfig+0x8ac>)
 8004ae8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004aea:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004af0:	2b01      	cmp	r3, #1
 8004af2:	d031      	beq.n	8004b58 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004af4:	693b      	ldr	r3, [r7, #16]
 8004af6:	f003 0203 	and.w	r2, r3, #3
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004afe:	429a      	cmp	r2, r3
 8004b00:	d12a      	bne.n	8004b58 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8004b02:	693b      	ldr	r3, [r7, #16]
 8004b04:	091b      	lsrs	r3, r3, #4
 8004b06:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004b0e:	429a      	cmp	r2, r3
 8004b10:	d122      	bne.n	8004b58 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8004b12:	68fb      	ldr	r3, [r7, #12]
 8004b14:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004b1c:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8004b1e:	429a      	cmp	r2, r3
 8004b20:	d11a      	bne.n	8004b58 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8004b22:	68fb      	ldr	r3, [r7, #12]
 8004b24:	0a5b      	lsrs	r3, r3, #9
 8004b26:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004b2e:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8004b30:	429a      	cmp	r2, r3
 8004b32:	d111      	bne.n	8004b58 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8004b34:	68fb      	ldr	r3, [r7, #12]
 8004b36:	0c1b      	lsrs	r3, r3, #16
 8004b38:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004b40:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8004b42:	429a      	cmp	r2, r3
 8004b44:	d108      	bne.n	8004b58 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8004b46:	68fb      	ldr	r3, [r7, #12]
 8004b48:	0e1b      	lsrs	r3, r3, #24
 8004b4a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004b52:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8004b54:	429a      	cmp	r2, r3
 8004b56:	d001      	beq.n	8004b5c <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8004b58:	2301      	movs	r3, #1
 8004b5a:	e02b      	b.n	8004bb4 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8004b5c:	4b17      	ldr	r3, [pc, #92]	@ (8004bbc <HAL_RCC_OscConfig+0x8ac>)
 8004b5e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004b60:	08db      	lsrs	r3, r3, #3
 8004b62:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004b66:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004b6c:	693a      	ldr	r2, [r7, #16]
 8004b6e:	429a      	cmp	r2, r3
 8004b70:	d01f      	beq.n	8004bb2 <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8004b72:	4b12      	ldr	r3, [pc, #72]	@ (8004bbc <HAL_RCC_OscConfig+0x8ac>)
 8004b74:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004b76:	4a11      	ldr	r2, [pc, #68]	@ (8004bbc <HAL_RCC_OscConfig+0x8ac>)
 8004b78:	f023 0301 	bic.w	r3, r3, #1
 8004b7c:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004b7e:	f7fe f9fb 	bl	8002f78 <HAL_GetTick>
 8004b82:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8004b84:	bf00      	nop
 8004b86:	f7fe f9f7 	bl	8002f78 <HAL_GetTick>
 8004b8a:	4602      	mov	r2, r0
 8004b8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b8e:	4293      	cmp	r3, r2
 8004b90:	d0f9      	beq.n	8004b86 <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8004b92:	4b0a      	ldr	r3, [pc, #40]	@ (8004bbc <HAL_RCC_OscConfig+0x8ac>)
 8004b94:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004b96:	4b0a      	ldr	r3, [pc, #40]	@ (8004bc0 <HAL_RCC_OscConfig+0x8b0>)
 8004b98:	4013      	ands	r3, r2
 8004b9a:	687a      	ldr	r2, [r7, #4]
 8004b9c:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8004b9e:	00d2      	lsls	r2, r2, #3
 8004ba0:	4906      	ldr	r1, [pc, #24]	@ (8004bbc <HAL_RCC_OscConfig+0x8ac>)
 8004ba2:	4313      	orrs	r3, r2
 8004ba4:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8004ba6:	4b05      	ldr	r3, [pc, #20]	@ (8004bbc <HAL_RCC_OscConfig+0x8ac>)
 8004ba8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004baa:	4a04      	ldr	r2, [pc, #16]	@ (8004bbc <HAL_RCC_OscConfig+0x8ac>)
 8004bac:	f043 0301 	orr.w	r3, r3, #1
 8004bb0:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8004bb2:	2300      	movs	r3, #0
}
 8004bb4:	4618      	mov	r0, r3
 8004bb6:	3730      	adds	r7, #48	@ 0x30
 8004bb8:	46bd      	mov	sp, r7
 8004bba:	bd80      	pop	{r7, pc}
 8004bbc:	58024400 	.word	0x58024400
 8004bc0:	ffff0007 	.word	0xffff0007

08004bc4 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004bc4:	b580      	push	{r7, lr}
 8004bc6:	b086      	sub	sp, #24
 8004bc8:	af00      	add	r7, sp, #0
 8004bca:	6078      	str	r0, [r7, #4]
 8004bcc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	2b00      	cmp	r3, #0
 8004bd2:	d101      	bne.n	8004bd8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004bd4:	2301      	movs	r3, #1
 8004bd6:	e19c      	b.n	8004f12 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004bd8:	4b8a      	ldr	r3, [pc, #552]	@ (8004e04 <HAL_RCC_ClockConfig+0x240>)
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	f003 030f 	and.w	r3, r3, #15
 8004be0:	683a      	ldr	r2, [r7, #0]
 8004be2:	429a      	cmp	r2, r3
 8004be4:	d910      	bls.n	8004c08 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004be6:	4b87      	ldr	r3, [pc, #540]	@ (8004e04 <HAL_RCC_ClockConfig+0x240>)
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	f023 020f 	bic.w	r2, r3, #15
 8004bee:	4985      	ldr	r1, [pc, #532]	@ (8004e04 <HAL_RCC_ClockConfig+0x240>)
 8004bf0:	683b      	ldr	r3, [r7, #0]
 8004bf2:	4313      	orrs	r3, r2
 8004bf4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004bf6:	4b83      	ldr	r3, [pc, #524]	@ (8004e04 <HAL_RCC_ClockConfig+0x240>)
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	f003 030f 	and.w	r3, r3, #15
 8004bfe:	683a      	ldr	r2, [r7, #0]
 8004c00:	429a      	cmp	r2, r3
 8004c02:	d001      	beq.n	8004c08 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8004c04:	2301      	movs	r3, #1
 8004c06:	e184      	b.n	8004f12 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	f003 0304 	and.w	r3, r3, #4
 8004c10:	2b00      	cmp	r3, #0
 8004c12:	d010      	beq.n	8004c36 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	691a      	ldr	r2, [r3, #16]
 8004c18:	4b7b      	ldr	r3, [pc, #492]	@ (8004e08 <HAL_RCC_ClockConfig+0x244>)
 8004c1a:	699b      	ldr	r3, [r3, #24]
 8004c1c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004c20:	429a      	cmp	r2, r3
 8004c22:	d908      	bls.n	8004c36 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8004c24:	4b78      	ldr	r3, [pc, #480]	@ (8004e08 <HAL_RCC_ClockConfig+0x244>)
 8004c26:	699b      	ldr	r3, [r3, #24]
 8004c28:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	691b      	ldr	r3, [r3, #16]
 8004c30:	4975      	ldr	r1, [pc, #468]	@ (8004e08 <HAL_RCC_ClockConfig+0x244>)
 8004c32:	4313      	orrs	r3, r2
 8004c34:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	f003 0308 	and.w	r3, r3, #8
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	d010      	beq.n	8004c64 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	695a      	ldr	r2, [r3, #20]
 8004c46:	4b70      	ldr	r3, [pc, #448]	@ (8004e08 <HAL_RCC_ClockConfig+0x244>)
 8004c48:	69db      	ldr	r3, [r3, #28]
 8004c4a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004c4e:	429a      	cmp	r2, r3
 8004c50:	d908      	bls.n	8004c64 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8004c52:	4b6d      	ldr	r3, [pc, #436]	@ (8004e08 <HAL_RCC_ClockConfig+0x244>)
 8004c54:	69db      	ldr	r3, [r3, #28]
 8004c56:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	695b      	ldr	r3, [r3, #20]
 8004c5e:	496a      	ldr	r1, [pc, #424]	@ (8004e08 <HAL_RCC_ClockConfig+0x244>)
 8004c60:	4313      	orrs	r3, r2
 8004c62:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	f003 0310 	and.w	r3, r3, #16
 8004c6c:	2b00      	cmp	r3, #0
 8004c6e:	d010      	beq.n	8004c92 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	699a      	ldr	r2, [r3, #24]
 8004c74:	4b64      	ldr	r3, [pc, #400]	@ (8004e08 <HAL_RCC_ClockConfig+0x244>)
 8004c76:	69db      	ldr	r3, [r3, #28]
 8004c78:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8004c7c:	429a      	cmp	r2, r3
 8004c7e:	d908      	bls.n	8004c92 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8004c80:	4b61      	ldr	r3, [pc, #388]	@ (8004e08 <HAL_RCC_ClockConfig+0x244>)
 8004c82:	69db      	ldr	r3, [r3, #28]
 8004c84:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	699b      	ldr	r3, [r3, #24]
 8004c8c:	495e      	ldr	r1, [pc, #376]	@ (8004e08 <HAL_RCC_ClockConfig+0x244>)
 8004c8e:	4313      	orrs	r3, r2
 8004c90:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	f003 0320 	and.w	r3, r3, #32
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	d010      	beq.n	8004cc0 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	69da      	ldr	r2, [r3, #28]
 8004ca2:	4b59      	ldr	r3, [pc, #356]	@ (8004e08 <HAL_RCC_ClockConfig+0x244>)
 8004ca4:	6a1b      	ldr	r3, [r3, #32]
 8004ca6:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004caa:	429a      	cmp	r2, r3
 8004cac:	d908      	bls.n	8004cc0 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8004cae:	4b56      	ldr	r3, [pc, #344]	@ (8004e08 <HAL_RCC_ClockConfig+0x244>)
 8004cb0:	6a1b      	ldr	r3, [r3, #32]
 8004cb2:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	69db      	ldr	r3, [r3, #28]
 8004cba:	4953      	ldr	r1, [pc, #332]	@ (8004e08 <HAL_RCC_ClockConfig+0x244>)
 8004cbc:	4313      	orrs	r3, r2
 8004cbe:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	f003 0302 	and.w	r3, r3, #2
 8004cc8:	2b00      	cmp	r3, #0
 8004cca:	d010      	beq.n	8004cee <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	68da      	ldr	r2, [r3, #12]
 8004cd0:	4b4d      	ldr	r3, [pc, #308]	@ (8004e08 <HAL_RCC_ClockConfig+0x244>)
 8004cd2:	699b      	ldr	r3, [r3, #24]
 8004cd4:	f003 030f 	and.w	r3, r3, #15
 8004cd8:	429a      	cmp	r2, r3
 8004cda:	d908      	bls.n	8004cee <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004cdc:	4b4a      	ldr	r3, [pc, #296]	@ (8004e08 <HAL_RCC_ClockConfig+0x244>)
 8004cde:	699b      	ldr	r3, [r3, #24]
 8004ce0:	f023 020f 	bic.w	r2, r3, #15
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	68db      	ldr	r3, [r3, #12]
 8004ce8:	4947      	ldr	r1, [pc, #284]	@ (8004e08 <HAL_RCC_ClockConfig+0x244>)
 8004cea:	4313      	orrs	r3, r2
 8004cec:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	f003 0301 	and.w	r3, r3, #1
 8004cf6:	2b00      	cmp	r3, #0
 8004cf8:	d055      	beq.n	8004da6 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8004cfa:	4b43      	ldr	r3, [pc, #268]	@ (8004e08 <HAL_RCC_ClockConfig+0x244>)
 8004cfc:	699b      	ldr	r3, [r3, #24]
 8004cfe:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	689b      	ldr	r3, [r3, #8]
 8004d06:	4940      	ldr	r1, [pc, #256]	@ (8004e08 <HAL_RCC_ClockConfig+0x244>)
 8004d08:	4313      	orrs	r3, r2
 8004d0a:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	685b      	ldr	r3, [r3, #4]
 8004d10:	2b02      	cmp	r3, #2
 8004d12:	d107      	bne.n	8004d24 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004d14:	4b3c      	ldr	r3, [pc, #240]	@ (8004e08 <HAL_RCC_ClockConfig+0x244>)
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004d1c:	2b00      	cmp	r3, #0
 8004d1e:	d121      	bne.n	8004d64 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8004d20:	2301      	movs	r3, #1
 8004d22:	e0f6      	b.n	8004f12 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	685b      	ldr	r3, [r3, #4]
 8004d28:	2b03      	cmp	r3, #3
 8004d2a:	d107      	bne.n	8004d3c <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004d2c:	4b36      	ldr	r3, [pc, #216]	@ (8004e08 <HAL_RCC_ClockConfig+0x244>)
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004d34:	2b00      	cmp	r3, #0
 8004d36:	d115      	bne.n	8004d64 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8004d38:	2301      	movs	r3, #1
 8004d3a:	e0ea      	b.n	8004f12 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	685b      	ldr	r3, [r3, #4]
 8004d40:	2b01      	cmp	r3, #1
 8004d42:	d107      	bne.n	8004d54 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004d44:	4b30      	ldr	r3, [pc, #192]	@ (8004e08 <HAL_RCC_ClockConfig+0x244>)
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004d4c:	2b00      	cmp	r3, #0
 8004d4e:	d109      	bne.n	8004d64 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8004d50:	2301      	movs	r3, #1
 8004d52:	e0de      	b.n	8004f12 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004d54:	4b2c      	ldr	r3, [pc, #176]	@ (8004e08 <HAL_RCC_ClockConfig+0x244>)
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	f003 0304 	and.w	r3, r3, #4
 8004d5c:	2b00      	cmp	r3, #0
 8004d5e:	d101      	bne.n	8004d64 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8004d60:	2301      	movs	r3, #1
 8004d62:	e0d6      	b.n	8004f12 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004d64:	4b28      	ldr	r3, [pc, #160]	@ (8004e08 <HAL_RCC_ClockConfig+0x244>)
 8004d66:	691b      	ldr	r3, [r3, #16]
 8004d68:	f023 0207 	bic.w	r2, r3, #7
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	685b      	ldr	r3, [r3, #4]
 8004d70:	4925      	ldr	r1, [pc, #148]	@ (8004e08 <HAL_RCC_ClockConfig+0x244>)
 8004d72:	4313      	orrs	r3, r2
 8004d74:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004d76:	f7fe f8ff 	bl	8002f78 <HAL_GetTick>
 8004d7a:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004d7c:	e00a      	b.n	8004d94 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004d7e:	f7fe f8fb 	bl	8002f78 <HAL_GetTick>
 8004d82:	4602      	mov	r2, r0
 8004d84:	697b      	ldr	r3, [r7, #20]
 8004d86:	1ad3      	subs	r3, r2, r3
 8004d88:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004d8c:	4293      	cmp	r3, r2
 8004d8e:	d901      	bls.n	8004d94 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8004d90:	2303      	movs	r3, #3
 8004d92:	e0be      	b.n	8004f12 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004d94:	4b1c      	ldr	r3, [pc, #112]	@ (8004e08 <HAL_RCC_ClockConfig+0x244>)
 8004d96:	691b      	ldr	r3, [r3, #16]
 8004d98:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	685b      	ldr	r3, [r3, #4]
 8004da0:	00db      	lsls	r3, r3, #3
 8004da2:	429a      	cmp	r2, r3
 8004da4:	d1eb      	bne.n	8004d7e <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	f003 0302 	and.w	r3, r3, #2
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	d010      	beq.n	8004dd4 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	68da      	ldr	r2, [r3, #12]
 8004db6:	4b14      	ldr	r3, [pc, #80]	@ (8004e08 <HAL_RCC_ClockConfig+0x244>)
 8004db8:	699b      	ldr	r3, [r3, #24]
 8004dba:	f003 030f 	and.w	r3, r3, #15
 8004dbe:	429a      	cmp	r2, r3
 8004dc0:	d208      	bcs.n	8004dd4 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004dc2:	4b11      	ldr	r3, [pc, #68]	@ (8004e08 <HAL_RCC_ClockConfig+0x244>)
 8004dc4:	699b      	ldr	r3, [r3, #24]
 8004dc6:	f023 020f 	bic.w	r2, r3, #15
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	68db      	ldr	r3, [r3, #12]
 8004dce:	490e      	ldr	r1, [pc, #56]	@ (8004e08 <HAL_RCC_ClockConfig+0x244>)
 8004dd0:	4313      	orrs	r3, r2
 8004dd2:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004dd4:	4b0b      	ldr	r3, [pc, #44]	@ (8004e04 <HAL_RCC_ClockConfig+0x240>)
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	f003 030f 	and.w	r3, r3, #15
 8004ddc:	683a      	ldr	r2, [r7, #0]
 8004dde:	429a      	cmp	r2, r3
 8004de0:	d214      	bcs.n	8004e0c <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004de2:	4b08      	ldr	r3, [pc, #32]	@ (8004e04 <HAL_RCC_ClockConfig+0x240>)
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	f023 020f 	bic.w	r2, r3, #15
 8004dea:	4906      	ldr	r1, [pc, #24]	@ (8004e04 <HAL_RCC_ClockConfig+0x240>)
 8004dec:	683b      	ldr	r3, [r7, #0]
 8004dee:	4313      	orrs	r3, r2
 8004df0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004df2:	4b04      	ldr	r3, [pc, #16]	@ (8004e04 <HAL_RCC_ClockConfig+0x240>)
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	f003 030f 	and.w	r3, r3, #15
 8004dfa:	683a      	ldr	r2, [r7, #0]
 8004dfc:	429a      	cmp	r2, r3
 8004dfe:	d005      	beq.n	8004e0c <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8004e00:	2301      	movs	r3, #1
 8004e02:	e086      	b.n	8004f12 <HAL_RCC_ClockConfig+0x34e>
 8004e04:	52002000 	.word	0x52002000
 8004e08:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	f003 0304 	and.w	r3, r3, #4
 8004e14:	2b00      	cmp	r3, #0
 8004e16:	d010      	beq.n	8004e3a <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	691a      	ldr	r2, [r3, #16]
 8004e1c:	4b3f      	ldr	r3, [pc, #252]	@ (8004f1c <HAL_RCC_ClockConfig+0x358>)
 8004e1e:	699b      	ldr	r3, [r3, #24]
 8004e20:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004e24:	429a      	cmp	r2, r3
 8004e26:	d208      	bcs.n	8004e3a <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8004e28:	4b3c      	ldr	r3, [pc, #240]	@ (8004f1c <HAL_RCC_ClockConfig+0x358>)
 8004e2a:	699b      	ldr	r3, [r3, #24]
 8004e2c:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	691b      	ldr	r3, [r3, #16]
 8004e34:	4939      	ldr	r1, [pc, #228]	@ (8004f1c <HAL_RCC_ClockConfig+0x358>)
 8004e36:	4313      	orrs	r3, r2
 8004e38:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	f003 0308 	and.w	r3, r3, #8
 8004e42:	2b00      	cmp	r3, #0
 8004e44:	d010      	beq.n	8004e68 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	695a      	ldr	r2, [r3, #20]
 8004e4a:	4b34      	ldr	r3, [pc, #208]	@ (8004f1c <HAL_RCC_ClockConfig+0x358>)
 8004e4c:	69db      	ldr	r3, [r3, #28]
 8004e4e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004e52:	429a      	cmp	r2, r3
 8004e54:	d208      	bcs.n	8004e68 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8004e56:	4b31      	ldr	r3, [pc, #196]	@ (8004f1c <HAL_RCC_ClockConfig+0x358>)
 8004e58:	69db      	ldr	r3, [r3, #28]
 8004e5a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	695b      	ldr	r3, [r3, #20]
 8004e62:	492e      	ldr	r1, [pc, #184]	@ (8004f1c <HAL_RCC_ClockConfig+0x358>)
 8004e64:	4313      	orrs	r3, r2
 8004e66:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	f003 0310 	and.w	r3, r3, #16
 8004e70:	2b00      	cmp	r3, #0
 8004e72:	d010      	beq.n	8004e96 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	699a      	ldr	r2, [r3, #24]
 8004e78:	4b28      	ldr	r3, [pc, #160]	@ (8004f1c <HAL_RCC_ClockConfig+0x358>)
 8004e7a:	69db      	ldr	r3, [r3, #28]
 8004e7c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8004e80:	429a      	cmp	r2, r3
 8004e82:	d208      	bcs.n	8004e96 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8004e84:	4b25      	ldr	r3, [pc, #148]	@ (8004f1c <HAL_RCC_ClockConfig+0x358>)
 8004e86:	69db      	ldr	r3, [r3, #28]
 8004e88:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	699b      	ldr	r3, [r3, #24]
 8004e90:	4922      	ldr	r1, [pc, #136]	@ (8004f1c <HAL_RCC_ClockConfig+0x358>)
 8004e92:	4313      	orrs	r3, r2
 8004e94:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	f003 0320 	and.w	r3, r3, #32
 8004e9e:	2b00      	cmp	r3, #0
 8004ea0:	d010      	beq.n	8004ec4 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	69da      	ldr	r2, [r3, #28]
 8004ea6:	4b1d      	ldr	r3, [pc, #116]	@ (8004f1c <HAL_RCC_ClockConfig+0x358>)
 8004ea8:	6a1b      	ldr	r3, [r3, #32]
 8004eaa:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004eae:	429a      	cmp	r2, r3
 8004eb0:	d208      	bcs.n	8004ec4 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8004eb2:	4b1a      	ldr	r3, [pc, #104]	@ (8004f1c <HAL_RCC_ClockConfig+0x358>)
 8004eb4:	6a1b      	ldr	r3, [r3, #32]
 8004eb6:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	69db      	ldr	r3, [r3, #28]
 8004ebe:	4917      	ldr	r1, [pc, #92]	@ (8004f1c <HAL_RCC_ClockConfig+0x358>)
 8004ec0:	4313      	orrs	r3, r2
 8004ec2:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8004ec4:	f000 f834 	bl	8004f30 <HAL_RCC_GetSysClockFreq>
 8004ec8:	4602      	mov	r2, r0
 8004eca:	4b14      	ldr	r3, [pc, #80]	@ (8004f1c <HAL_RCC_ClockConfig+0x358>)
 8004ecc:	699b      	ldr	r3, [r3, #24]
 8004ece:	0a1b      	lsrs	r3, r3, #8
 8004ed0:	f003 030f 	and.w	r3, r3, #15
 8004ed4:	4912      	ldr	r1, [pc, #72]	@ (8004f20 <HAL_RCC_ClockConfig+0x35c>)
 8004ed6:	5ccb      	ldrb	r3, [r1, r3]
 8004ed8:	f003 031f 	and.w	r3, r3, #31
 8004edc:	fa22 f303 	lsr.w	r3, r2, r3
 8004ee0:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8004ee2:	4b0e      	ldr	r3, [pc, #56]	@ (8004f1c <HAL_RCC_ClockConfig+0x358>)
 8004ee4:	699b      	ldr	r3, [r3, #24]
 8004ee6:	f003 030f 	and.w	r3, r3, #15
 8004eea:	4a0d      	ldr	r2, [pc, #52]	@ (8004f20 <HAL_RCC_ClockConfig+0x35c>)
 8004eec:	5cd3      	ldrb	r3, [r2, r3]
 8004eee:	f003 031f 	and.w	r3, r3, #31
 8004ef2:	693a      	ldr	r2, [r7, #16]
 8004ef4:	fa22 f303 	lsr.w	r3, r2, r3
 8004ef8:	4a0a      	ldr	r2, [pc, #40]	@ (8004f24 <HAL_RCC_ClockConfig+0x360>)
 8004efa:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8004efc:	4a0a      	ldr	r2, [pc, #40]	@ (8004f28 <HAL_RCC_ClockConfig+0x364>)
 8004efe:	693b      	ldr	r3, [r7, #16]
 8004f00:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8004f02:	4b0a      	ldr	r3, [pc, #40]	@ (8004f2c <HAL_RCC_ClockConfig+0x368>)
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	4618      	mov	r0, r3
 8004f08:	f7fd ffec 	bl	8002ee4 <HAL_InitTick>
 8004f0c:	4603      	mov	r3, r0
 8004f0e:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8004f10:	7bfb      	ldrb	r3, [r7, #15]
}
 8004f12:	4618      	mov	r0, r3
 8004f14:	3718      	adds	r7, #24
 8004f16:	46bd      	mov	sp, r7
 8004f18:	bd80      	pop	{r7, pc}
 8004f1a:	bf00      	nop
 8004f1c:	58024400 	.word	0x58024400
 8004f20:	0800b2ec 	.word	0x0800b2ec
 8004f24:	24000004 	.word	0x24000004
 8004f28:	24000000 	.word	0x24000000
 8004f2c:	24000008 	.word	0x24000008

08004f30 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004f30:	b480      	push	{r7}
 8004f32:	b089      	sub	sp, #36	@ 0x24
 8004f34:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004f36:	4bb3      	ldr	r3, [pc, #716]	@ (8005204 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004f38:	691b      	ldr	r3, [r3, #16]
 8004f3a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004f3e:	2b18      	cmp	r3, #24
 8004f40:	f200 8155 	bhi.w	80051ee <HAL_RCC_GetSysClockFreq+0x2be>
 8004f44:	a201      	add	r2, pc, #4	@ (adr r2, 8004f4c <HAL_RCC_GetSysClockFreq+0x1c>)
 8004f46:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f4a:	bf00      	nop
 8004f4c:	08004fb1 	.word	0x08004fb1
 8004f50:	080051ef 	.word	0x080051ef
 8004f54:	080051ef 	.word	0x080051ef
 8004f58:	080051ef 	.word	0x080051ef
 8004f5c:	080051ef 	.word	0x080051ef
 8004f60:	080051ef 	.word	0x080051ef
 8004f64:	080051ef 	.word	0x080051ef
 8004f68:	080051ef 	.word	0x080051ef
 8004f6c:	08004fd7 	.word	0x08004fd7
 8004f70:	080051ef 	.word	0x080051ef
 8004f74:	080051ef 	.word	0x080051ef
 8004f78:	080051ef 	.word	0x080051ef
 8004f7c:	080051ef 	.word	0x080051ef
 8004f80:	080051ef 	.word	0x080051ef
 8004f84:	080051ef 	.word	0x080051ef
 8004f88:	080051ef 	.word	0x080051ef
 8004f8c:	08004fdd 	.word	0x08004fdd
 8004f90:	080051ef 	.word	0x080051ef
 8004f94:	080051ef 	.word	0x080051ef
 8004f98:	080051ef 	.word	0x080051ef
 8004f9c:	080051ef 	.word	0x080051ef
 8004fa0:	080051ef 	.word	0x080051ef
 8004fa4:	080051ef 	.word	0x080051ef
 8004fa8:	080051ef 	.word	0x080051ef
 8004fac:	08004fe3 	.word	0x08004fe3
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004fb0:	4b94      	ldr	r3, [pc, #592]	@ (8005204 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	f003 0320 	and.w	r3, r3, #32
 8004fb8:	2b00      	cmp	r3, #0
 8004fba:	d009      	beq.n	8004fd0 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004fbc:	4b91      	ldr	r3, [pc, #580]	@ (8005204 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	08db      	lsrs	r3, r3, #3
 8004fc2:	f003 0303 	and.w	r3, r3, #3
 8004fc6:	4a90      	ldr	r2, [pc, #576]	@ (8005208 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8004fc8:	fa22 f303 	lsr.w	r3, r2, r3
 8004fcc:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8004fce:	e111      	b.n	80051f4 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8004fd0:	4b8d      	ldr	r3, [pc, #564]	@ (8005208 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8004fd2:	61bb      	str	r3, [r7, #24]
      break;
 8004fd4:	e10e      	b.n	80051f4 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8004fd6:	4b8d      	ldr	r3, [pc, #564]	@ (800520c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8004fd8:	61bb      	str	r3, [r7, #24]
      break;
 8004fda:	e10b      	b.n	80051f4 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8004fdc:	4b8c      	ldr	r3, [pc, #560]	@ (8005210 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8004fde:	61bb      	str	r3, [r7, #24]
      break;
 8004fe0:	e108      	b.n	80051f4 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004fe2:	4b88      	ldr	r3, [pc, #544]	@ (8005204 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004fe4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004fe6:	f003 0303 	and.w	r3, r3, #3
 8004fea:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8004fec:	4b85      	ldr	r3, [pc, #532]	@ (8005204 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004fee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004ff0:	091b      	lsrs	r3, r3, #4
 8004ff2:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004ff6:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8004ff8:	4b82      	ldr	r3, [pc, #520]	@ (8005204 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004ffa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004ffc:	f003 0301 	and.w	r3, r3, #1
 8005000:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8005002:	4b80      	ldr	r3, [pc, #512]	@ (8005204 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005004:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005006:	08db      	lsrs	r3, r3, #3
 8005008:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800500c:	68fa      	ldr	r2, [r7, #12]
 800500e:	fb02 f303 	mul.w	r3, r2, r3
 8005012:	ee07 3a90 	vmov	s15, r3
 8005016:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800501a:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 800501e:	693b      	ldr	r3, [r7, #16]
 8005020:	2b00      	cmp	r3, #0
 8005022:	f000 80e1 	beq.w	80051e8 <HAL_RCC_GetSysClockFreq+0x2b8>
      {
        switch (pllsource)
 8005026:	697b      	ldr	r3, [r7, #20]
 8005028:	2b02      	cmp	r3, #2
 800502a:	f000 8083 	beq.w	8005134 <HAL_RCC_GetSysClockFreq+0x204>
 800502e:	697b      	ldr	r3, [r7, #20]
 8005030:	2b02      	cmp	r3, #2
 8005032:	f200 80a1 	bhi.w	8005178 <HAL_RCC_GetSysClockFreq+0x248>
 8005036:	697b      	ldr	r3, [r7, #20]
 8005038:	2b00      	cmp	r3, #0
 800503a:	d003      	beq.n	8005044 <HAL_RCC_GetSysClockFreq+0x114>
 800503c:	697b      	ldr	r3, [r7, #20]
 800503e:	2b01      	cmp	r3, #1
 8005040:	d056      	beq.n	80050f0 <HAL_RCC_GetSysClockFreq+0x1c0>
 8005042:	e099      	b.n	8005178 <HAL_RCC_GetSysClockFreq+0x248>
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005044:	4b6f      	ldr	r3, [pc, #444]	@ (8005204 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	f003 0320 	and.w	r3, r3, #32
 800504c:	2b00      	cmp	r3, #0
 800504e:	d02d      	beq.n	80050ac <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005050:	4b6c      	ldr	r3, [pc, #432]	@ (8005204 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	08db      	lsrs	r3, r3, #3
 8005056:	f003 0303 	and.w	r3, r3, #3
 800505a:	4a6b      	ldr	r2, [pc, #428]	@ (8005208 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800505c:	fa22 f303 	lsr.w	r3, r2, r3
 8005060:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	ee07 3a90 	vmov	s15, r3
 8005068:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800506c:	693b      	ldr	r3, [r7, #16]
 800506e:	ee07 3a90 	vmov	s15, r3
 8005072:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005076:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800507a:	4b62      	ldr	r3, [pc, #392]	@ (8005204 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800507c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800507e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005082:	ee07 3a90 	vmov	s15, r3
 8005086:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800508a:	ed97 6a02 	vldr	s12, [r7, #8]
 800508e:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8005214 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005092:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005096:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800509a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800509e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80050a2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80050a6:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 80050aa:	e087      	b.n	80051bc <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80050ac:	693b      	ldr	r3, [r7, #16]
 80050ae:	ee07 3a90 	vmov	s15, r3
 80050b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80050b6:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8005218 <HAL_RCC_GetSysClockFreq+0x2e8>
 80050ba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80050be:	4b51      	ldr	r3, [pc, #324]	@ (8005204 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80050c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80050c2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80050c6:	ee07 3a90 	vmov	s15, r3
 80050ca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80050ce:	ed97 6a02 	vldr	s12, [r7, #8]
 80050d2:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8005214 <HAL_RCC_GetSysClockFreq+0x2e4>
 80050d6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80050da:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80050de:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80050e2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80050e6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80050ea:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80050ee:	e065      	b.n	80051bc <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80050f0:	693b      	ldr	r3, [r7, #16]
 80050f2:	ee07 3a90 	vmov	s15, r3
 80050f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80050fa:	eddf 6a48 	vldr	s13, [pc, #288]	@ 800521c <HAL_RCC_GetSysClockFreq+0x2ec>
 80050fe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005102:	4b40      	ldr	r3, [pc, #256]	@ (8005204 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005104:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005106:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800510a:	ee07 3a90 	vmov	s15, r3
 800510e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005112:	ed97 6a02 	vldr	s12, [r7, #8]
 8005116:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8005214 <HAL_RCC_GetSysClockFreq+0x2e4>
 800511a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800511e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005122:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005126:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800512a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800512e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8005132:	e043      	b.n	80051bc <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005134:	693b      	ldr	r3, [r7, #16]
 8005136:	ee07 3a90 	vmov	s15, r3
 800513a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800513e:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8005220 <HAL_RCC_GetSysClockFreq+0x2f0>
 8005142:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005146:	4b2f      	ldr	r3, [pc, #188]	@ (8005204 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005148:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800514a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800514e:	ee07 3a90 	vmov	s15, r3
 8005152:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005156:	ed97 6a02 	vldr	s12, [r7, #8]
 800515a:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8005214 <HAL_RCC_GetSysClockFreq+0x2e4>
 800515e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005162:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005166:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800516a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800516e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005172:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8005176:	e021      	b.n	80051bc <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005178:	693b      	ldr	r3, [r7, #16]
 800517a:	ee07 3a90 	vmov	s15, r3
 800517e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005182:	eddf 6a26 	vldr	s13, [pc, #152]	@ 800521c <HAL_RCC_GetSysClockFreq+0x2ec>
 8005186:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800518a:	4b1e      	ldr	r3, [pc, #120]	@ (8005204 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800518c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800518e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005192:	ee07 3a90 	vmov	s15, r3
 8005196:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800519a:	ed97 6a02 	vldr	s12, [r7, #8]
 800519e:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8005214 <HAL_RCC_GetSysClockFreq+0x2e4>
 80051a2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80051a6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80051aa:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80051ae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80051b2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80051b6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80051ba:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 80051bc:	4b11      	ldr	r3, [pc, #68]	@ (8005204 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80051be:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80051c0:	0a5b      	lsrs	r3, r3, #9
 80051c2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80051c6:	3301      	adds	r3, #1
 80051c8:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 80051ca:	683b      	ldr	r3, [r7, #0]
 80051cc:	ee07 3a90 	vmov	s15, r3
 80051d0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80051d4:	edd7 6a07 	vldr	s13, [r7, #28]
 80051d8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80051dc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80051e0:	ee17 3a90 	vmov	r3, s15
 80051e4:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 80051e6:	e005      	b.n	80051f4 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 80051e8:	2300      	movs	r3, #0
 80051ea:	61bb      	str	r3, [r7, #24]
      break;
 80051ec:	e002      	b.n	80051f4 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 80051ee:	4b07      	ldr	r3, [pc, #28]	@ (800520c <HAL_RCC_GetSysClockFreq+0x2dc>)
 80051f0:	61bb      	str	r3, [r7, #24]
      break;
 80051f2:	bf00      	nop
  }

  return sysclockfreq;
 80051f4:	69bb      	ldr	r3, [r7, #24]
}
 80051f6:	4618      	mov	r0, r3
 80051f8:	3724      	adds	r7, #36	@ 0x24
 80051fa:	46bd      	mov	sp, r7
 80051fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005200:	4770      	bx	lr
 8005202:	bf00      	nop
 8005204:	58024400 	.word	0x58024400
 8005208:	03d09000 	.word	0x03d09000
 800520c:	003d0900 	.word	0x003d0900
 8005210:	017d7840 	.word	0x017d7840
 8005214:	46000000 	.word	0x46000000
 8005218:	4c742400 	.word	0x4c742400
 800521c:	4a742400 	.word	0x4a742400
 8005220:	4bbebc20 	.word	0x4bbebc20

08005224 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005224:	b580      	push	{r7, lr}
 8005226:	b082      	sub	sp, #8
 8005228:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800522a:	f7ff fe81 	bl	8004f30 <HAL_RCC_GetSysClockFreq>
 800522e:	4602      	mov	r2, r0
 8005230:	4b10      	ldr	r3, [pc, #64]	@ (8005274 <HAL_RCC_GetHCLKFreq+0x50>)
 8005232:	699b      	ldr	r3, [r3, #24]
 8005234:	0a1b      	lsrs	r3, r3, #8
 8005236:	f003 030f 	and.w	r3, r3, #15
 800523a:	490f      	ldr	r1, [pc, #60]	@ (8005278 <HAL_RCC_GetHCLKFreq+0x54>)
 800523c:	5ccb      	ldrb	r3, [r1, r3]
 800523e:	f003 031f 	and.w	r3, r3, #31
 8005242:	fa22 f303 	lsr.w	r3, r2, r3
 8005246:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8005248:	4b0a      	ldr	r3, [pc, #40]	@ (8005274 <HAL_RCC_GetHCLKFreq+0x50>)
 800524a:	699b      	ldr	r3, [r3, #24]
 800524c:	f003 030f 	and.w	r3, r3, #15
 8005250:	4a09      	ldr	r2, [pc, #36]	@ (8005278 <HAL_RCC_GetHCLKFreq+0x54>)
 8005252:	5cd3      	ldrb	r3, [r2, r3]
 8005254:	f003 031f 	and.w	r3, r3, #31
 8005258:	687a      	ldr	r2, [r7, #4]
 800525a:	fa22 f303 	lsr.w	r3, r2, r3
 800525e:	4a07      	ldr	r2, [pc, #28]	@ (800527c <HAL_RCC_GetHCLKFreq+0x58>)
 8005260:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8005262:	4a07      	ldr	r2, [pc, #28]	@ (8005280 <HAL_RCC_GetHCLKFreq+0x5c>)
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8005268:	4b04      	ldr	r3, [pc, #16]	@ (800527c <HAL_RCC_GetHCLKFreq+0x58>)
 800526a:	681b      	ldr	r3, [r3, #0]
}
 800526c:	4618      	mov	r0, r3
 800526e:	3708      	adds	r7, #8
 8005270:	46bd      	mov	sp, r7
 8005272:	bd80      	pop	{r7, pc}
 8005274:	58024400 	.word	0x58024400
 8005278:	0800b2ec 	.word	0x0800b2ec
 800527c:	24000004 	.word	0x24000004
 8005280:	24000000 	.word	0x24000000

08005284 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005284:	b580      	push	{r7, lr}
 8005286:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8005288:	f7ff ffcc 	bl	8005224 <HAL_RCC_GetHCLKFreq>
 800528c:	4602      	mov	r2, r0
 800528e:	4b06      	ldr	r3, [pc, #24]	@ (80052a8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005290:	69db      	ldr	r3, [r3, #28]
 8005292:	091b      	lsrs	r3, r3, #4
 8005294:	f003 0307 	and.w	r3, r3, #7
 8005298:	4904      	ldr	r1, [pc, #16]	@ (80052ac <HAL_RCC_GetPCLK1Freq+0x28>)
 800529a:	5ccb      	ldrb	r3, [r1, r3]
 800529c:	f003 031f 	and.w	r3, r3, #31
 80052a0:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 80052a4:	4618      	mov	r0, r3
 80052a6:	bd80      	pop	{r7, pc}
 80052a8:	58024400 	.word	0x58024400
 80052ac:	0800b2ec 	.word	0x0800b2ec

080052b0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80052b0:	b580      	push	{r7, lr}
 80052b2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 80052b4:	f7ff ffb6 	bl	8005224 <HAL_RCC_GetHCLKFreq>
 80052b8:	4602      	mov	r2, r0
 80052ba:	4b06      	ldr	r3, [pc, #24]	@ (80052d4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80052bc:	69db      	ldr	r3, [r3, #28]
 80052be:	0a1b      	lsrs	r3, r3, #8
 80052c0:	f003 0307 	and.w	r3, r3, #7
 80052c4:	4904      	ldr	r1, [pc, #16]	@ (80052d8 <HAL_RCC_GetPCLK2Freq+0x28>)
 80052c6:	5ccb      	ldrb	r3, [r1, r3]
 80052c8:	f003 031f 	and.w	r3, r3, #31
 80052cc:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 80052d0:	4618      	mov	r0, r3
 80052d2:	bd80      	pop	{r7, pc}
 80052d4:	58024400 	.word	0x58024400
 80052d8:	0800b2ec 	.word	0x0800b2ec

080052dc <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80052dc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80052e0:	b0ca      	sub	sp, #296	@ 0x128
 80052e2:	af00      	add	r7, sp, #0
 80052e4:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80052e8:	2300      	movs	r3, #0
 80052ea:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80052ee:	2300      	movs	r3, #0
 80052f0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80052f4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80052f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80052fc:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 8005300:	2500      	movs	r5, #0
 8005302:	ea54 0305 	orrs.w	r3, r4, r5
 8005306:	d049      	beq.n	800539c <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8005308:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800530c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800530e:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8005312:	d02f      	beq.n	8005374 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8005314:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8005318:	d828      	bhi.n	800536c <HAL_RCCEx_PeriphCLKConfig+0x90>
 800531a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800531e:	d01a      	beq.n	8005356 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8005320:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005324:	d822      	bhi.n	800536c <HAL_RCCEx_PeriphCLKConfig+0x90>
 8005326:	2b00      	cmp	r3, #0
 8005328:	d003      	beq.n	8005332 <HAL_RCCEx_PeriphCLKConfig+0x56>
 800532a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800532e:	d007      	beq.n	8005340 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8005330:	e01c      	b.n	800536c <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005332:	4bb8      	ldr	r3, [pc, #736]	@ (8005614 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005334:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005336:	4ab7      	ldr	r2, [pc, #732]	@ (8005614 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005338:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800533c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800533e:	e01a      	b.n	8005376 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8005340:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005344:	3308      	adds	r3, #8
 8005346:	2102      	movs	r1, #2
 8005348:	4618      	mov	r0, r3
 800534a:	f001 fc8f 	bl	8006c6c <RCCEx_PLL2_Config>
 800534e:	4603      	mov	r3, r0
 8005350:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8005354:	e00f      	b.n	8005376 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005356:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800535a:	3328      	adds	r3, #40	@ 0x28
 800535c:	2102      	movs	r1, #2
 800535e:	4618      	mov	r0, r3
 8005360:	f001 fd36 	bl	8006dd0 <RCCEx_PLL3_Config>
 8005364:	4603      	mov	r3, r0
 8005366:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800536a:	e004      	b.n	8005376 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800536c:	2301      	movs	r3, #1
 800536e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005372:	e000      	b.n	8005376 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8005374:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005376:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800537a:	2b00      	cmp	r3, #0
 800537c:	d10a      	bne.n	8005394 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800537e:	4ba5      	ldr	r3, [pc, #660]	@ (8005614 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005380:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005382:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8005386:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800538a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800538c:	4aa1      	ldr	r2, [pc, #644]	@ (8005614 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800538e:	430b      	orrs	r3, r1
 8005390:	6513      	str	r3, [r2, #80]	@ 0x50
 8005392:	e003      	b.n	800539c <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005394:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005398:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800539c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80053a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80053a4:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 80053a8:	f04f 0900 	mov.w	r9, #0
 80053ac:	ea58 0309 	orrs.w	r3, r8, r9
 80053b0:	d047      	beq.n	8005442 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 80053b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80053b6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80053b8:	2b04      	cmp	r3, #4
 80053ba:	d82a      	bhi.n	8005412 <HAL_RCCEx_PeriphCLKConfig+0x136>
 80053bc:	a201      	add	r2, pc, #4	@ (adr r2, 80053c4 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 80053be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80053c2:	bf00      	nop
 80053c4:	080053d9 	.word	0x080053d9
 80053c8:	080053e7 	.word	0x080053e7
 80053cc:	080053fd 	.word	0x080053fd
 80053d0:	0800541b 	.word	0x0800541b
 80053d4:	0800541b 	.word	0x0800541b
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80053d8:	4b8e      	ldr	r3, [pc, #568]	@ (8005614 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80053da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80053dc:	4a8d      	ldr	r2, [pc, #564]	@ (8005614 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80053de:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80053e2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80053e4:	e01a      	b.n	800541c <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80053e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80053ea:	3308      	adds	r3, #8
 80053ec:	2100      	movs	r1, #0
 80053ee:	4618      	mov	r0, r3
 80053f0:	f001 fc3c 	bl	8006c6c <RCCEx_PLL2_Config>
 80053f4:	4603      	mov	r3, r0
 80053f6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80053fa:	e00f      	b.n	800541c <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80053fc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005400:	3328      	adds	r3, #40	@ 0x28
 8005402:	2100      	movs	r1, #0
 8005404:	4618      	mov	r0, r3
 8005406:	f001 fce3 	bl	8006dd0 <RCCEx_PLL3_Config>
 800540a:	4603      	mov	r3, r0
 800540c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005410:	e004      	b.n	800541c <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005412:	2301      	movs	r3, #1
 8005414:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005418:	e000      	b.n	800541c <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 800541a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800541c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005420:	2b00      	cmp	r3, #0
 8005422:	d10a      	bne.n	800543a <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005424:	4b7b      	ldr	r3, [pc, #492]	@ (8005614 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005426:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005428:	f023 0107 	bic.w	r1, r3, #7
 800542c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005430:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005432:	4a78      	ldr	r2, [pc, #480]	@ (8005614 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005434:	430b      	orrs	r3, r1
 8005436:	6513      	str	r3, [r2, #80]	@ 0x50
 8005438:	e003      	b.n	8005442 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800543a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800543e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8005442:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005446:	e9d3 2300 	ldrd	r2, r3, [r3]
 800544a:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 800544e:	f04f 0b00 	mov.w	fp, #0
 8005452:	ea5a 030b 	orrs.w	r3, sl, fp
 8005456:	d04c      	beq.n	80054f2 <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 8005458:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800545c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800545e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005462:	d030      	beq.n	80054c6 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 8005464:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005468:	d829      	bhi.n	80054be <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800546a:	2bc0      	cmp	r3, #192	@ 0xc0
 800546c:	d02d      	beq.n	80054ca <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 800546e:	2bc0      	cmp	r3, #192	@ 0xc0
 8005470:	d825      	bhi.n	80054be <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8005472:	2b80      	cmp	r3, #128	@ 0x80
 8005474:	d018      	beq.n	80054a8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8005476:	2b80      	cmp	r3, #128	@ 0x80
 8005478:	d821      	bhi.n	80054be <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800547a:	2b00      	cmp	r3, #0
 800547c:	d002      	beq.n	8005484 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 800547e:	2b40      	cmp	r3, #64	@ 0x40
 8005480:	d007      	beq.n	8005492 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 8005482:	e01c      	b.n	80054be <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005484:	4b63      	ldr	r3, [pc, #396]	@ (8005614 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005486:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005488:	4a62      	ldr	r2, [pc, #392]	@ (8005614 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800548a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800548e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8005490:	e01c      	b.n	80054cc <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005492:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005496:	3308      	adds	r3, #8
 8005498:	2100      	movs	r1, #0
 800549a:	4618      	mov	r0, r3
 800549c:	f001 fbe6 	bl	8006c6c <RCCEx_PLL2_Config>
 80054a0:	4603      	mov	r3, r0
 80054a2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 80054a6:	e011      	b.n	80054cc <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80054a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80054ac:	3328      	adds	r3, #40	@ 0x28
 80054ae:	2100      	movs	r1, #0
 80054b0:	4618      	mov	r0, r3
 80054b2:	f001 fc8d 	bl	8006dd0 <RCCEx_PLL3_Config>
 80054b6:	4603      	mov	r3, r0
 80054b8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 80054bc:	e006      	b.n	80054cc <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80054be:	2301      	movs	r3, #1
 80054c0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80054c4:	e002      	b.n	80054cc <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 80054c6:	bf00      	nop
 80054c8:	e000      	b.n	80054cc <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 80054ca:	bf00      	nop
    }

    if (ret == HAL_OK)
 80054cc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80054d0:	2b00      	cmp	r3, #0
 80054d2:	d10a      	bne.n	80054ea <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 80054d4:	4b4f      	ldr	r3, [pc, #316]	@ (8005614 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80054d6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80054d8:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 80054dc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80054e0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80054e2:	4a4c      	ldr	r2, [pc, #304]	@ (8005614 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80054e4:	430b      	orrs	r3, r1
 80054e6:	6513      	str	r3, [r2, #80]	@ 0x50
 80054e8:	e003      	b.n	80054f2 <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80054ea:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80054ee:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 80054f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80054f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80054fa:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 80054fe:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 8005502:	2300      	movs	r3, #0
 8005504:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 8005508:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 800550c:	460b      	mov	r3, r1
 800550e:	4313      	orrs	r3, r2
 8005510:	d053      	beq.n	80055ba <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8005512:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005516:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800551a:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800551e:	d035      	beq.n	800558c <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8005520:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8005524:	d82e      	bhi.n	8005584 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8005526:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800552a:	d031      	beq.n	8005590 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 800552c:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8005530:	d828      	bhi.n	8005584 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8005532:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005536:	d01a      	beq.n	800556e <HAL_RCCEx_PeriphCLKConfig+0x292>
 8005538:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800553c:	d822      	bhi.n	8005584 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800553e:	2b00      	cmp	r3, #0
 8005540:	d003      	beq.n	800554a <HAL_RCCEx_PeriphCLKConfig+0x26e>
 8005542:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005546:	d007      	beq.n	8005558 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8005548:	e01c      	b.n	8005584 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800554a:	4b32      	ldr	r3, [pc, #200]	@ (8005614 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800554c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800554e:	4a31      	ldr	r2, [pc, #196]	@ (8005614 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005550:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005554:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005556:	e01c      	b.n	8005592 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005558:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800555c:	3308      	adds	r3, #8
 800555e:	2100      	movs	r1, #0
 8005560:	4618      	mov	r0, r3
 8005562:	f001 fb83 	bl	8006c6c <RCCEx_PLL2_Config>
 8005566:	4603      	mov	r3, r0
 8005568:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800556c:	e011      	b.n	8005592 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800556e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005572:	3328      	adds	r3, #40	@ 0x28
 8005574:	2100      	movs	r1, #0
 8005576:	4618      	mov	r0, r3
 8005578:	f001 fc2a 	bl	8006dd0 <RCCEx_PLL3_Config>
 800557c:	4603      	mov	r3, r0
 800557e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005582:	e006      	b.n	8005592 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8005584:	2301      	movs	r3, #1
 8005586:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800558a:	e002      	b.n	8005592 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 800558c:	bf00      	nop
 800558e:	e000      	b.n	8005592 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8005590:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005592:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005596:	2b00      	cmp	r3, #0
 8005598:	d10b      	bne.n	80055b2 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 800559a:	4b1e      	ldr	r3, [pc, #120]	@ (8005614 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800559c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800559e:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 80055a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80055a6:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80055aa:	4a1a      	ldr	r2, [pc, #104]	@ (8005614 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80055ac:	430b      	orrs	r3, r1
 80055ae:	6593      	str	r3, [r2, #88]	@ 0x58
 80055b0:	e003      	b.n	80055ba <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80055b2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80055b6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 80055ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80055be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055c2:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 80055c6:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 80055ca:	2300      	movs	r3, #0
 80055cc:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 80055d0:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 80055d4:	460b      	mov	r3, r1
 80055d6:	4313      	orrs	r3, r2
 80055d8:	d056      	beq.n	8005688 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 80055da:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80055de:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 80055e2:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80055e6:	d038      	beq.n	800565a <HAL_RCCEx_PeriphCLKConfig+0x37e>
 80055e8:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80055ec:	d831      	bhi.n	8005652 <HAL_RCCEx_PeriphCLKConfig+0x376>
 80055ee:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80055f2:	d034      	beq.n	800565e <HAL_RCCEx_PeriphCLKConfig+0x382>
 80055f4:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80055f8:	d82b      	bhi.n	8005652 <HAL_RCCEx_PeriphCLKConfig+0x376>
 80055fa:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80055fe:	d01d      	beq.n	800563c <HAL_RCCEx_PeriphCLKConfig+0x360>
 8005600:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005604:	d825      	bhi.n	8005652 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8005606:	2b00      	cmp	r3, #0
 8005608:	d006      	beq.n	8005618 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 800560a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800560e:	d00a      	beq.n	8005626 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8005610:	e01f      	b.n	8005652 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8005612:	bf00      	nop
 8005614:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005618:	4ba2      	ldr	r3, [pc, #648]	@ (80058a4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800561a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800561c:	4aa1      	ldr	r2, [pc, #644]	@ (80058a4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800561e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005622:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005624:	e01c      	b.n	8005660 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005626:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800562a:	3308      	adds	r3, #8
 800562c:	2100      	movs	r1, #0
 800562e:	4618      	mov	r0, r3
 8005630:	f001 fb1c 	bl	8006c6c <RCCEx_PLL2_Config>
 8005634:	4603      	mov	r3, r0
 8005636:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800563a:	e011      	b.n	8005660 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800563c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005640:	3328      	adds	r3, #40	@ 0x28
 8005642:	2100      	movs	r1, #0
 8005644:	4618      	mov	r0, r3
 8005646:	f001 fbc3 	bl	8006dd0 <RCCEx_PLL3_Config>
 800564a:	4603      	mov	r3, r0
 800564c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005650:	e006      	b.n	8005660 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8005652:	2301      	movs	r3, #1
 8005654:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005658:	e002      	b.n	8005660 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 800565a:	bf00      	nop
 800565c:	e000      	b.n	8005660 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 800565e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005660:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005664:	2b00      	cmp	r3, #0
 8005666:	d10b      	bne.n	8005680 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8005668:	4b8e      	ldr	r3, [pc, #568]	@ (80058a4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800566a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800566c:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8005670:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005674:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8005678:	4a8a      	ldr	r2, [pc, #552]	@ (80058a4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800567a:	430b      	orrs	r3, r1
 800567c:	6593      	str	r3, [r2, #88]	@ 0x58
 800567e:	e003      	b.n	8005688 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005680:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005684:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8005688:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800568c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005690:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8005694:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8005698:	2300      	movs	r3, #0
 800569a:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 800569e:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 80056a2:	460b      	mov	r3, r1
 80056a4:	4313      	orrs	r3, r2
 80056a6:	d03a      	beq.n	800571e <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 80056a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80056ac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80056ae:	2b30      	cmp	r3, #48	@ 0x30
 80056b0:	d01f      	beq.n	80056f2 <HAL_RCCEx_PeriphCLKConfig+0x416>
 80056b2:	2b30      	cmp	r3, #48	@ 0x30
 80056b4:	d819      	bhi.n	80056ea <HAL_RCCEx_PeriphCLKConfig+0x40e>
 80056b6:	2b20      	cmp	r3, #32
 80056b8:	d00c      	beq.n	80056d4 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 80056ba:	2b20      	cmp	r3, #32
 80056bc:	d815      	bhi.n	80056ea <HAL_RCCEx_PeriphCLKConfig+0x40e>
 80056be:	2b00      	cmp	r3, #0
 80056c0:	d019      	beq.n	80056f6 <HAL_RCCEx_PeriphCLKConfig+0x41a>
 80056c2:	2b10      	cmp	r3, #16
 80056c4:	d111      	bne.n	80056ea <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80056c6:	4b77      	ldr	r3, [pc, #476]	@ (80058a4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80056c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80056ca:	4a76      	ldr	r2, [pc, #472]	@ (80058a4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80056cc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80056d0:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 80056d2:	e011      	b.n	80056f8 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80056d4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80056d8:	3308      	adds	r3, #8
 80056da:	2102      	movs	r1, #2
 80056dc:	4618      	mov	r0, r3
 80056de:	f001 fac5 	bl	8006c6c <RCCEx_PLL2_Config>
 80056e2:	4603      	mov	r3, r0
 80056e4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 80056e8:	e006      	b.n	80056f8 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 80056ea:	2301      	movs	r3, #1
 80056ec:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80056f0:	e002      	b.n	80056f8 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 80056f2:	bf00      	nop
 80056f4:	e000      	b.n	80056f8 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 80056f6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80056f8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80056fc:	2b00      	cmp	r3, #0
 80056fe:	d10a      	bne.n	8005716 <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8005700:	4b68      	ldr	r3, [pc, #416]	@ (80058a4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005702:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005704:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8005708:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800570c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800570e:	4a65      	ldr	r2, [pc, #404]	@ (80058a4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005710:	430b      	orrs	r3, r1
 8005712:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8005714:	e003      	b.n	800571e <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005716:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800571a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800571e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005722:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005726:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 800572a:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 800572e:	2300      	movs	r3, #0
 8005730:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8005734:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8005738:	460b      	mov	r3, r1
 800573a:	4313      	orrs	r3, r2
 800573c:	d051      	beq.n	80057e2 <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 800573e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005742:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005744:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005748:	d035      	beq.n	80057b6 <HAL_RCCEx_PeriphCLKConfig+0x4da>
 800574a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800574e:	d82e      	bhi.n	80057ae <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8005750:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8005754:	d031      	beq.n	80057ba <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8005756:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800575a:	d828      	bhi.n	80057ae <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 800575c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005760:	d01a      	beq.n	8005798 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 8005762:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005766:	d822      	bhi.n	80057ae <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8005768:	2b00      	cmp	r3, #0
 800576a:	d003      	beq.n	8005774 <HAL_RCCEx_PeriphCLKConfig+0x498>
 800576c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005770:	d007      	beq.n	8005782 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 8005772:	e01c      	b.n	80057ae <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005774:	4b4b      	ldr	r3, [pc, #300]	@ (80058a4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005776:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005778:	4a4a      	ldr	r2, [pc, #296]	@ (80058a4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800577a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800577e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8005780:	e01c      	b.n	80057bc <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005782:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005786:	3308      	adds	r3, #8
 8005788:	2100      	movs	r1, #0
 800578a:	4618      	mov	r0, r3
 800578c:	f001 fa6e 	bl	8006c6c <RCCEx_PLL2_Config>
 8005790:	4603      	mov	r3, r0
 8005792:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8005796:	e011      	b.n	80057bc <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005798:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800579c:	3328      	adds	r3, #40	@ 0x28
 800579e:	2100      	movs	r1, #0
 80057a0:	4618      	mov	r0, r3
 80057a2:	f001 fb15 	bl	8006dd0 <RCCEx_PLL3_Config>
 80057a6:	4603      	mov	r3, r0
 80057a8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80057ac:	e006      	b.n	80057bc <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80057ae:	2301      	movs	r3, #1
 80057b0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80057b4:	e002      	b.n	80057bc <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 80057b6:	bf00      	nop
 80057b8:	e000      	b.n	80057bc <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 80057ba:	bf00      	nop
    }

    if (ret == HAL_OK)
 80057bc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80057c0:	2b00      	cmp	r3, #0
 80057c2:	d10a      	bne.n	80057da <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 80057c4:	4b37      	ldr	r3, [pc, #220]	@ (80058a4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80057c6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80057c8:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 80057cc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80057d0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80057d2:	4a34      	ldr	r2, [pc, #208]	@ (80058a4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80057d4:	430b      	orrs	r3, r1
 80057d6:	6513      	str	r3, [r2, #80]	@ 0x50
 80057d8:	e003      	b.n	80057e2 <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80057da:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80057de:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 80057e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80057e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80057ea:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 80057ee:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80057f2:	2300      	movs	r3, #0
 80057f4:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 80057f8:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 80057fc:	460b      	mov	r3, r1
 80057fe:	4313      	orrs	r3, r2
 8005800:	d056      	beq.n	80058b0 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8005802:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005806:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005808:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800580c:	d033      	beq.n	8005876 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 800580e:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005812:	d82c      	bhi.n	800586e <HAL_RCCEx_PeriphCLKConfig+0x592>
 8005814:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8005818:	d02f      	beq.n	800587a <HAL_RCCEx_PeriphCLKConfig+0x59e>
 800581a:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800581e:	d826      	bhi.n	800586e <HAL_RCCEx_PeriphCLKConfig+0x592>
 8005820:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8005824:	d02b      	beq.n	800587e <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 8005826:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800582a:	d820      	bhi.n	800586e <HAL_RCCEx_PeriphCLKConfig+0x592>
 800582c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005830:	d012      	beq.n	8005858 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 8005832:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005836:	d81a      	bhi.n	800586e <HAL_RCCEx_PeriphCLKConfig+0x592>
 8005838:	2b00      	cmp	r3, #0
 800583a:	d022      	beq.n	8005882 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 800583c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005840:	d115      	bne.n	800586e <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005842:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005846:	3308      	adds	r3, #8
 8005848:	2101      	movs	r1, #1
 800584a:	4618      	mov	r0, r3
 800584c:	f001 fa0e 	bl	8006c6c <RCCEx_PLL2_Config>
 8005850:	4603      	mov	r3, r0
 8005852:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8005856:	e015      	b.n	8005884 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005858:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800585c:	3328      	adds	r3, #40	@ 0x28
 800585e:	2101      	movs	r1, #1
 8005860:	4618      	mov	r0, r3
 8005862:	f001 fab5 	bl	8006dd0 <RCCEx_PLL3_Config>
 8005866:	4603      	mov	r3, r0
 8005868:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800586c:	e00a      	b.n	8005884 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800586e:	2301      	movs	r3, #1
 8005870:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005874:	e006      	b.n	8005884 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8005876:	bf00      	nop
 8005878:	e004      	b.n	8005884 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800587a:	bf00      	nop
 800587c:	e002      	b.n	8005884 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800587e:	bf00      	nop
 8005880:	e000      	b.n	8005884 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8005882:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005884:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005888:	2b00      	cmp	r3, #0
 800588a:	d10d      	bne.n	80058a8 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800588c:	4b05      	ldr	r3, [pc, #20]	@ (80058a4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800588e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005890:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8005894:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005898:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800589a:	4a02      	ldr	r2, [pc, #8]	@ (80058a4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800589c:	430b      	orrs	r3, r1
 800589e:	6513      	str	r3, [r2, #80]	@ 0x50
 80058a0:	e006      	b.n	80058b0 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 80058a2:	bf00      	nop
 80058a4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80058a8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80058ac:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 80058b0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80058b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80058b8:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 80058bc:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80058c0:	2300      	movs	r3, #0
 80058c2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80058c6:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 80058ca:	460b      	mov	r3, r1
 80058cc:	4313      	orrs	r3, r2
 80058ce:	d055      	beq.n	800597c <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 80058d0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80058d4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80058d8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80058dc:	d033      	beq.n	8005946 <HAL_RCCEx_PeriphCLKConfig+0x66a>
 80058de:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80058e2:	d82c      	bhi.n	800593e <HAL_RCCEx_PeriphCLKConfig+0x662>
 80058e4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80058e8:	d02f      	beq.n	800594a <HAL_RCCEx_PeriphCLKConfig+0x66e>
 80058ea:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80058ee:	d826      	bhi.n	800593e <HAL_RCCEx_PeriphCLKConfig+0x662>
 80058f0:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80058f4:	d02b      	beq.n	800594e <HAL_RCCEx_PeriphCLKConfig+0x672>
 80058f6:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80058fa:	d820      	bhi.n	800593e <HAL_RCCEx_PeriphCLKConfig+0x662>
 80058fc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005900:	d012      	beq.n	8005928 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 8005902:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005906:	d81a      	bhi.n	800593e <HAL_RCCEx_PeriphCLKConfig+0x662>
 8005908:	2b00      	cmp	r3, #0
 800590a:	d022      	beq.n	8005952 <HAL_RCCEx_PeriphCLKConfig+0x676>
 800590c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005910:	d115      	bne.n	800593e <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005912:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005916:	3308      	adds	r3, #8
 8005918:	2101      	movs	r1, #1
 800591a:	4618      	mov	r0, r3
 800591c:	f001 f9a6 	bl	8006c6c <RCCEx_PLL2_Config>
 8005920:	4603      	mov	r3, r0
 8005922:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8005926:	e015      	b.n	8005954 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005928:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800592c:	3328      	adds	r3, #40	@ 0x28
 800592e:	2101      	movs	r1, #1
 8005930:	4618      	mov	r0, r3
 8005932:	f001 fa4d 	bl	8006dd0 <RCCEx_PLL3_Config>
 8005936:	4603      	mov	r3, r0
 8005938:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800593c:	e00a      	b.n	8005954 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 800593e:	2301      	movs	r3, #1
 8005940:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005944:	e006      	b.n	8005954 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8005946:	bf00      	nop
 8005948:	e004      	b.n	8005954 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800594a:	bf00      	nop
 800594c:	e002      	b.n	8005954 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800594e:	bf00      	nop
 8005950:	e000      	b.n	8005954 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8005952:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005954:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005958:	2b00      	cmp	r3, #0
 800595a:	d10b      	bne.n	8005974 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800595c:	4ba3      	ldr	r3, [pc, #652]	@ (8005bec <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800595e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005960:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8005964:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005968:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800596c:	4a9f      	ldr	r2, [pc, #636]	@ (8005bec <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800596e:	430b      	orrs	r3, r1
 8005970:	6593      	str	r3, [r2, #88]	@ 0x58
 8005972:	e003      	b.n	800597c <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005974:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005978:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800597c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005980:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005984:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8005988:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800598c:	2300      	movs	r3, #0
 800598e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8005992:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8005996:	460b      	mov	r3, r1
 8005998:	4313      	orrs	r3, r2
 800599a:	d037      	beq.n	8005a0c <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 800599c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80059a0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80059a2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80059a6:	d00e      	beq.n	80059c6 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 80059a8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80059ac:	d816      	bhi.n	80059dc <HAL_RCCEx_PeriphCLKConfig+0x700>
 80059ae:	2b00      	cmp	r3, #0
 80059b0:	d018      	beq.n	80059e4 <HAL_RCCEx_PeriphCLKConfig+0x708>
 80059b2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80059b6:	d111      	bne.n	80059dc <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80059b8:	4b8c      	ldr	r3, [pc, #560]	@ (8005bec <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80059ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80059bc:	4a8b      	ldr	r2, [pc, #556]	@ (8005bec <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80059be:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80059c2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 80059c4:	e00f      	b.n	80059e6 <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80059c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80059ca:	3308      	adds	r3, #8
 80059cc:	2101      	movs	r1, #1
 80059ce:	4618      	mov	r0, r3
 80059d0:	f001 f94c 	bl	8006c6c <RCCEx_PLL2_Config>
 80059d4:	4603      	mov	r3, r0
 80059d6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 80059da:	e004      	b.n	80059e6 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80059dc:	2301      	movs	r3, #1
 80059de:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80059e2:	e000      	b.n	80059e6 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 80059e4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80059e6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80059ea:	2b00      	cmp	r3, #0
 80059ec:	d10a      	bne.n	8005a04 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80059ee:	4b7f      	ldr	r3, [pc, #508]	@ (8005bec <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80059f0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80059f2:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 80059f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80059fa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80059fc:	4a7b      	ldr	r2, [pc, #492]	@ (8005bec <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80059fe:	430b      	orrs	r3, r1
 8005a00:	6513      	str	r3, [r2, #80]	@ 0x50
 8005a02:	e003      	b.n	8005a0c <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005a04:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005a08:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8005a0c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005a10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a14:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8005a18:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005a1c:	2300      	movs	r3, #0
 8005a1e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8005a22:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 8005a26:	460b      	mov	r3, r1
 8005a28:	4313      	orrs	r3, r2
 8005a2a:	d039      	beq.n	8005aa0 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8005a2c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005a30:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005a32:	2b03      	cmp	r3, #3
 8005a34:	d81c      	bhi.n	8005a70 <HAL_RCCEx_PeriphCLKConfig+0x794>
 8005a36:	a201      	add	r2, pc, #4	@ (adr r2, 8005a3c <HAL_RCCEx_PeriphCLKConfig+0x760>)
 8005a38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a3c:	08005a79 	.word	0x08005a79
 8005a40:	08005a4d 	.word	0x08005a4d
 8005a44:	08005a5b 	.word	0x08005a5b
 8005a48:	08005a79 	.word	0x08005a79
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005a4c:	4b67      	ldr	r3, [pc, #412]	@ (8005bec <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005a4e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005a50:	4a66      	ldr	r2, [pc, #408]	@ (8005bec <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005a52:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005a56:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8005a58:	e00f      	b.n	8005a7a <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8005a5a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005a5e:	3308      	adds	r3, #8
 8005a60:	2102      	movs	r1, #2
 8005a62:	4618      	mov	r0, r3
 8005a64:	f001 f902 	bl	8006c6c <RCCEx_PLL2_Config>
 8005a68:	4603      	mov	r3, r0
 8005a6a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 8005a6e:	e004      	b.n	8005a7a <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8005a70:	2301      	movs	r3, #1
 8005a72:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005a76:	e000      	b.n	8005a7a <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 8005a78:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005a7a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005a7e:	2b00      	cmp	r3, #0
 8005a80:	d10a      	bne.n	8005a98 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8005a82:	4b5a      	ldr	r3, [pc, #360]	@ (8005bec <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005a84:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005a86:	f023 0103 	bic.w	r1, r3, #3
 8005a8a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005a8e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005a90:	4a56      	ldr	r2, [pc, #344]	@ (8005bec <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005a92:	430b      	orrs	r3, r1
 8005a94:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8005a96:	e003      	b.n	8005aa0 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005a98:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005a9c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005aa0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005aa4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005aa8:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8005aac:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8005ab0:	2300      	movs	r3, #0
 8005ab2:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8005ab6:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8005aba:	460b      	mov	r3, r1
 8005abc:	4313      	orrs	r3, r2
 8005abe:	f000 809f 	beq.w	8005c00 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005ac2:	4b4b      	ldr	r3, [pc, #300]	@ (8005bf0 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	4a4a      	ldr	r2, [pc, #296]	@ (8005bf0 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8005ac8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005acc:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005ace:	f7fd fa53 	bl	8002f78 <HAL_GetTick>
 8005ad2:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005ad6:	e00b      	b.n	8005af0 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005ad8:	f7fd fa4e 	bl	8002f78 <HAL_GetTick>
 8005adc:	4602      	mov	r2, r0
 8005ade:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8005ae2:	1ad3      	subs	r3, r2, r3
 8005ae4:	2b64      	cmp	r3, #100	@ 0x64
 8005ae6:	d903      	bls.n	8005af0 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 8005ae8:	2303      	movs	r3, #3
 8005aea:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005aee:	e005      	b.n	8005afc <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005af0:	4b3f      	ldr	r3, [pc, #252]	@ (8005bf0 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005af8:	2b00      	cmp	r3, #0
 8005afa:	d0ed      	beq.n	8005ad8 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 8005afc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005b00:	2b00      	cmp	r3, #0
 8005b02:	d179      	bne.n	8005bf8 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8005b04:	4b39      	ldr	r3, [pc, #228]	@ (8005bec <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005b06:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8005b08:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005b0c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8005b10:	4053      	eors	r3, r2
 8005b12:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005b16:	2b00      	cmp	r3, #0
 8005b18:	d015      	beq.n	8005b46 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005b1a:	4b34      	ldr	r3, [pc, #208]	@ (8005bec <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005b1c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005b1e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005b22:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005b26:	4b31      	ldr	r3, [pc, #196]	@ (8005bec <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005b28:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005b2a:	4a30      	ldr	r2, [pc, #192]	@ (8005bec <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005b2c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005b30:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005b32:	4b2e      	ldr	r3, [pc, #184]	@ (8005bec <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005b34:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005b36:	4a2d      	ldr	r2, [pc, #180]	@ (8005bec <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005b38:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005b3c:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8005b3e:	4a2b      	ldr	r2, [pc, #172]	@ (8005bec <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005b40:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005b44:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8005b46:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005b4a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8005b4e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005b52:	d118      	bne.n	8005b86 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005b54:	f7fd fa10 	bl	8002f78 <HAL_GetTick>
 8005b58:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005b5c:	e00d      	b.n	8005b7a <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005b5e:	f7fd fa0b 	bl	8002f78 <HAL_GetTick>
 8005b62:	4602      	mov	r2, r0
 8005b64:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8005b68:	1ad2      	subs	r2, r2, r3
 8005b6a:	f241 3388 	movw	r3, #5000	@ 0x1388
 8005b6e:	429a      	cmp	r2, r3
 8005b70:	d903      	bls.n	8005b7a <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 8005b72:	2303      	movs	r3, #3
 8005b74:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
            break;
 8005b78:	e005      	b.n	8005b86 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005b7a:	4b1c      	ldr	r3, [pc, #112]	@ (8005bec <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005b7c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005b7e:	f003 0302 	and.w	r3, r3, #2
 8005b82:	2b00      	cmp	r3, #0
 8005b84:	d0eb      	beq.n	8005b5e <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 8005b86:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005b8a:	2b00      	cmp	r3, #0
 8005b8c:	d129      	bne.n	8005be2 <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005b8e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005b92:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8005b96:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005b9a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005b9e:	d10e      	bne.n	8005bbe <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 8005ba0:	4b12      	ldr	r3, [pc, #72]	@ (8005bec <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005ba2:	691b      	ldr	r3, [r3, #16]
 8005ba4:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8005ba8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005bac:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8005bb0:	091a      	lsrs	r2, r3, #4
 8005bb2:	4b10      	ldr	r3, [pc, #64]	@ (8005bf4 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 8005bb4:	4013      	ands	r3, r2
 8005bb6:	4a0d      	ldr	r2, [pc, #52]	@ (8005bec <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005bb8:	430b      	orrs	r3, r1
 8005bba:	6113      	str	r3, [r2, #16]
 8005bbc:	e005      	b.n	8005bca <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 8005bbe:	4b0b      	ldr	r3, [pc, #44]	@ (8005bec <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005bc0:	691b      	ldr	r3, [r3, #16]
 8005bc2:	4a0a      	ldr	r2, [pc, #40]	@ (8005bec <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005bc4:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8005bc8:	6113      	str	r3, [r2, #16]
 8005bca:	4b08      	ldr	r3, [pc, #32]	@ (8005bec <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005bcc:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 8005bce:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005bd2:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8005bd6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005bda:	4a04      	ldr	r2, [pc, #16]	@ (8005bec <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005bdc:	430b      	orrs	r3, r1
 8005bde:	6713      	str	r3, [r2, #112]	@ 0x70
 8005be0:	e00e      	b.n	8005c00 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005be2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005be6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 8005bea:	e009      	b.n	8005c00 <HAL_RCCEx_PeriphCLKConfig+0x924>
 8005bec:	58024400 	.word	0x58024400
 8005bf0:	58024800 	.word	0x58024800
 8005bf4:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005bf8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005bfc:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8005c00:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005c04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c08:	f002 0301 	and.w	r3, r2, #1
 8005c0c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005c10:	2300      	movs	r3, #0
 8005c12:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8005c16:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8005c1a:	460b      	mov	r3, r1
 8005c1c:	4313      	orrs	r3, r2
 8005c1e:	f000 8089 	beq.w	8005d34 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8005c22:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005c26:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005c28:	2b28      	cmp	r3, #40	@ 0x28
 8005c2a:	d86b      	bhi.n	8005d04 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 8005c2c:	a201      	add	r2, pc, #4	@ (adr r2, 8005c34 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8005c2e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c32:	bf00      	nop
 8005c34:	08005d0d 	.word	0x08005d0d
 8005c38:	08005d05 	.word	0x08005d05
 8005c3c:	08005d05 	.word	0x08005d05
 8005c40:	08005d05 	.word	0x08005d05
 8005c44:	08005d05 	.word	0x08005d05
 8005c48:	08005d05 	.word	0x08005d05
 8005c4c:	08005d05 	.word	0x08005d05
 8005c50:	08005d05 	.word	0x08005d05
 8005c54:	08005cd9 	.word	0x08005cd9
 8005c58:	08005d05 	.word	0x08005d05
 8005c5c:	08005d05 	.word	0x08005d05
 8005c60:	08005d05 	.word	0x08005d05
 8005c64:	08005d05 	.word	0x08005d05
 8005c68:	08005d05 	.word	0x08005d05
 8005c6c:	08005d05 	.word	0x08005d05
 8005c70:	08005d05 	.word	0x08005d05
 8005c74:	08005cef 	.word	0x08005cef
 8005c78:	08005d05 	.word	0x08005d05
 8005c7c:	08005d05 	.word	0x08005d05
 8005c80:	08005d05 	.word	0x08005d05
 8005c84:	08005d05 	.word	0x08005d05
 8005c88:	08005d05 	.word	0x08005d05
 8005c8c:	08005d05 	.word	0x08005d05
 8005c90:	08005d05 	.word	0x08005d05
 8005c94:	08005d0d 	.word	0x08005d0d
 8005c98:	08005d05 	.word	0x08005d05
 8005c9c:	08005d05 	.word	0x08005d05
 8005ca0:	08005d05 	.word	0x08005d05
 8005ca4:	08005d05 	.word	0x08005d05
 8005ca8:	08005d05 	.word	0x08005d05
 8005cac:	08005d05 	.word	0x08005d05
 8005cb0:	08005d05 	.word	0x08005d05
 8005cb4:	08005d0d 	.word	0x08005d0d
 8005cb8:	08005d05 	.word	0x08005d05
 8005cbc:	08005d05 	.word	0x08005d05
 8005cc0:	08005d05 	.word	0x08005d05
 8005cc4:	08005d05 	.word	0x08005d05
 8005cc8:	08005d05 	.word	0x08005d05
 8005ccc:	08005d05 	.word	0x08005d05
 8005cd0:	08005d05 	.word	0x08005d05
 8005cd4:	08005d0d 	.word	0x08005d0d
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005cd8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005cdc:	3308      	adds	r3, #8
 8005cde:	2101      	movs	r1, #1
 8005ce0:	4618      	mov	r0, r3
 8005ce2:	f000 ffc3 	bl	8006c6c <RCCEx_PLL2_Config>
 8005ce6:	4603      	mov	r3, r0
 8005ce8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8005cec:	e00f      	b.n	8005d0e <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005cee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005cf2:	3328      	adds	r3, #40	@ 0x28
 8005cf4:	2101      	movs	r1, #1
 8005cf6:	4618      	mov	r0, r3
 8005cf8:	f001 f86a 	bl	8006dd0 <RCCEx_PLL3_Config>
 8005cfc:	4603      	mov	r3, r0
 8005cfe:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8005d02:	e004      	b.n	8005d0e <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005d04:	2301      	movs	r3, #1
 8005d06:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005d0a:	e000      	b.n	8005d0e <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 8005d0c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005d0e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005d12:	2b00      	cmp	r3, #0
 8005d14:	d10a      	bne.n	8005d2c <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8005d16:	4bbf      	ldr	r3, [pc, #764]	@ (8006014 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005d18:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005d1a:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8005d1e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005d22:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005d24:	4abb      	ldr	r2, [pc, #748]	@ (8006014 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005d26:	430b      	orrs	r3, r1
 8005d28:	6553      	str	r3, [r2, #84]	@ 0x54
 8005d2a:	e003      	b.n	8005d34 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005d2c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005d30:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8005d34:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005d38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d3c:	f002 0302 	and.w	r3, r2, #2
 8005d40:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005d44:	2300      	movs	r3, #0
 8005d46:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8005d4a:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8005d4e:	460b      	mov	r3, r1
 8005d50:	4313      	orrs	r3, r2
 8005d52:	d041      	beq.n	8005dd8 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8005d54:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005d58:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005d5a:	2b05      	cmp	r3, #5
 8005d5c:	d824      	bhi.n	8005da8 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 8005d5e:	a201      	add	r2, pc, #4	@ (adr r2, 8005d64 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 8005d60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d64:	08005db1 	.word	0x08005db1
 8005d68:	08005d7d 	.word	0x08005d7d
 8005d6c:	08005d93 	.word	0x08005d93
 8005d70:	08005db1 	.word	0x08005db1
 8005d74:	08005db1 	.word	0x08005db1
 8005d78:	08005db1 	.word	0x08005db1
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005d7c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005d80:	3308      	adds	r3, #8
 8005d82:	2101      	movs	r1, #1
 8005d84:	4618      	mov	r0, r3
 8005d86:	f000 ff71 	bl	8006c6c <RCCEx_PLL2_Config>
 8005d8a:	4603      	mov	r3, r0
 8005d8c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8005d90:	e00f      	b.n	8005db2 <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005d92:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005d96:	3328      	adds	r3, #40	@ 0x28
 8005d98:	2101      	movs	r1, #1
 8005d9a:	4618      	mov	r0, r3
 8005d9c:	f001 f818 	bl	8006dd0 <RCCEx_PLL3_Config>
 8005da0:	4603      	mov	r3, r0
 8005da2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8005da6:	e004      	b.n	8005db2 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005da8:	2301      	movs	r3, #1
 8005daa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005dae:	e000      	b.n	8005db2 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 8005db0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005db2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005db6:	2b00      	cmp	r3, #0
 8005db8:	d10a      	bne.n	8005dd0 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8005dba:	4b96      	ldr	r3, [pc, #600]	@ (8006014 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005dbc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005dbe:	f023 0107 	bic.w	r1, r3, #7
 8005dc2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005dc6:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005dc8:	4a92      	ldr	r2, [pc, #584]	@ (8006014 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005dca:	430b      	orrs	r3, r1
 8005dcc:	6553      	str	r3, [r2, #84]	@ 0x54
 8005dce:	e003      	b.n	8005dd8 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005dd0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005dd4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005dd8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005ddc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005de0:	f002 0304 	and.w	r3, r2, #4
 8005de4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005de8:	2300      	movs	r3, #0
 8005dea:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005dee:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8005df2:	460b      	mov	r3, r1
 8005df4:	4313      	orrs	r3, r2
 8005df6:	d044      	beq.n	8005e82 <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8005df8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005dfc:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005e00:	2b05      	cmp	r3, #5
 8005e02:	d825      	bhi.n	8005e50 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 8005e04:	a201      	add	r2, pc, #4	@ (adr r2, 8005e0c <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 8005e06:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e0a:	bf00      	nop
 8005e0c:	08005e59 	.word	0x08005e59
 8005e10:	08005e25 	.word	0x08005e25
 8005e14:	08005e3b 	.word	0x08005e3b
 8005e18:	08005e59 	.word	0x08005e59
 8005e1c:	08005e59 	.word	0x08005e59
 8005e20:	08005e59 	.word	0x08005e59
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005e24:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005e28:	3308      	adds	r3, #8
 8005e2a:	2101      	movs	r1, #1
 8005e2c:	4618      	mov	r0, r3
 8005e2e:	f000 ff1d 	bl	8006c6c <RCCEx_PLL2_Config>
 8005e32:	4603      	mov	r3, r0
 8005e34:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8005e38:	e00f      	b.n	8005e5a <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005e3a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005e3e:	3328      	adds	r3, #40	@ 0x28
 8005e40:	2101      	movs	r1, #1
 8005e42:	4618      	mov	r0, r3
 8005e44:	f000 ffc4 	bl	8006dd0 <RCCEx_PLL3_Config>
 8005e48:	4603      	mov	r3, r0
 8005e4a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8005e4e:	e004      	b.n	8005e5a <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005e50:	2301      	movs	r3, #1
 8005e52:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005e56:	e000      	b.n	8005e5a <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 8005e58:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005e5a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005e5e:	2b00      	cmp	r3, #0
 8005e60:	d10b      	bne.n	8005e7a <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005e62:	4b6c      	ldr	r3, [pc, #432]	@ (8006014 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005e64:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005e66:	f023 0107 	bic.w	r1, r3, #7
 8005e6a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005e6e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005e72:	4a68      	ldr	r2, [pc, #416]	@ (8006014 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005e74:	430b      	orrs	r3, r1
 8005e76:	6593      	str	r3, [r2, #88]	@ 0x58
 8005e78:	e003      	b.n	8005e82 <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005e7a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005e7e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8005e82:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005e86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e8a:	f002 0320 	and.w	r3, r2, #32
 8005e8e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8005e92:	2300      	movs	r3, #0
 8005e94:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8005e98:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8005e9c:	460b      	mov	r3, r1
 8005e9e:	4313      	orrs	r3, r2
 8005ea0:	d055      	beq.n	8005f4e <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8005ea2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005ea6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005eaa:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005eae:	d033      	beq.n	8005f18 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 8005eb0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005eb4:	d82c      	bhi.n	8005f10 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8005eb6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005eba:	d02f      	beq.n	8005f1c <HAL_RCCEx_PeriphCLKConfig+0xc40>
 8005ebc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005ec0:	d826      	bhi.n	8005f10 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8005ec2:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8005ec6:	d02b      	beq.n	8005f20 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 8005ec8:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8005ecc:	d820      	bhi.n	8005f10 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8005ece:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005ed2:	d012      	beq.n	8005efa <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 8005ed4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005ed8:	d81a      	bhi.n	8005f10 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8005eda:	2b00      	cmp	r3, #0
 8005edc:	d022      	beq.n	8005f24 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 8005ede:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005ee2:	d115      	bne.n	8005f10 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005ee4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005ee8:	3308      	adds	r3, #8
 8005eea:	2100      	movs	r1, #0
 8005eec:	4618      	mov	r0, r3
 8005eee:	f000 febd 	bl	8006c6c <RCCEx_PLL2_Config>
 8005ef2:	4603      	mov	r3, r0
 8005ef4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8005ef8:	e015      	b.n	8005f26 <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005efa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005efe:	3328      	adds	r3, #40	@ 0x28
 8005f00:	2102      	movs	r1, #2
 8005f02:	4618      	mov	r0, r3
 8005f04:	f000 ff64 	bl	8006dd0 <RCCEx_PLL3_Config>
 8005f08:	4603      	mov	r3, r0
 8005f0a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8005f0e:	e00a      	b.n	8005f26 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005f10:	2301      	movs	r3, #1
 8005f12:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005f16:	e006      	b.n	8005f26 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8005f18:	bf00      	nop
 8005f1a:	e004      	b.n	8005f26 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8005f1c:	bf00      	nop
 8005f1e:	e002      	b.n	8005f26 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8005f20:	bf00      	nop
 8005f22:	e000      	b.n	8005f26 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8005f24:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005f26:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005f2a:	2b00      	cmp	r3, #0
 8005f2c:	d10b      	bne.n	8005f46 <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005f2e:	4b39      	ldr	r3, [pc, #228]	@ (8006014 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005f30:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005f32:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8005f36:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005f3a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005f3e:	4a35      	ldr	r2, [pc, #212]	@ (8006014 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005f40:	430b      	orrs	r3, r1
 8005f42:	6553      	str	r3, [r2, #84]	@ 0x54
 8005f44:	e003      	b.n	8005f4e <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005f46:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005f4a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8005f4e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005f52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f56:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 8005f5a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8005f5e:	2300      	movs	r3, #0
 8005f60:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8005f64:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8005f68:	460b      	mov	r3, r1
 8005f6a:	4313      	orrs	r3, r2
 8005f6c:	d058      	beq.n	8006020 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8005f6e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005f72:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005f76:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8005f7a:	d033      	beq.n	8005fe4 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 8005f7c:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8005f80:	d82c      	bhi.n	8005fdc <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8005f82:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005f86:	d02f      	beq.n	8005fe8 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 8005f88:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005f8c:	d826      	bhi.n	8005fdc <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8005f8e:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8005f92:	d02b      	beq.n	8005fec <HAL_RCCEx_PeriphCLKConfig+0xd10>
 8005f94:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8005f98:	d820      	bhi.n	8005fdc <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8005f9a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005f9e:	d012      	beq.n	8005fc6 <HAL_RCCEx_PeriphCLKConfig+0xcea>
 8005fa0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005fa4:	d81a      	bhi.n	8005fdc <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8005fa6:	2b00      	cmp	r3, #0
 8005fa8:	d022      	beq.n	8005ff0 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 8005faa:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005fae:	d115      	bne.n	8005fdc <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005fb0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005fb4:	3308      	adds	r3, #8
 8005fb6:	2100      	movs	r1, #0
 8005fb8:	4618      	mov	r0, r3
 8005fba:	f000 fe57 	bl	8006c6c <RCCEx_PLL2_Config>
 8005fbe:	4603      	mov	r3, r0
 8005fc0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8005fc4:	e015      	b.n	8005ff2 <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005fc6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005fca:	3328      	adds	r3, #40	@ 0x28
 8005fcc:	2102      	movs	r1, #2
 8005fce:	4618      	mov	r0, r3
 8005fd0:	f000 fefe 	bl	8006dd0 <RCCEx_PLL3_Config>
 8005fd4:	4603      	mov	r3, r0
 8005fd6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8005fda:	e00a      	b.n	8005ff2 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005fdc:	2301      	movs	r3, #1
 8005fde:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005fe2:	e006      	b.n	8005ff2 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8005fe4:	bf00      	nop
 8005fe6:	e004      	b.n	8005ff2 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8005fe8:	bf00      	nop
 8005fea:	e002      	b.n	8005ff2 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8005fec:	bf00      	nop
 8005fee:	e000      	b.n	8005ff2 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8005ff0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005ff2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005ff6:	2b00      	cmp	r3, #0
 8005ff8:	d10e      	bne.n	8006018 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8005ffa:	4b06      	ldr	r3, [pc, #24]	@ (8006014 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005ffc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005ffe:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 8006002:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006006:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800600a:	4a02      	ldr	r2, [pc, #8]	@ (8006014 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800600c:	430b      	orrs	r3, r1
 800600e:	6593      	str	r3, [r2, #88]	@ 0x58
 8006010:	e006      	b.n	8006020 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 8006012:	bf00      	nop
 8006014:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006018:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800601c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8006020:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006024:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006028:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 800602c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8006030:	2300      	movs	r3, #0
 8006032:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8006036:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 800603a:	460b      	mov	r3, r1
 800603c:	4313      	orrs	r3, r2
 800603e:	d055      	beq.n	80060ec <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8006040:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006044:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8006048:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 800604c:	d033      	beq.n	80060b6 <HAL_RCCEx_PeriphCLKConfig+0xdda>
 800604e:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8006052:	d82c      	bhi.n	80060ae <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8006054:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006058:	d02f      	beq.n	80060ba <HAL_RCCEx_PeriphCLKConfig+0xdde>
 800605a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800605e:	d826      	bhi.n	80060ae <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8006060:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8006064:	d02b      	beq.n	80060be <HAL_RCCEx_PeriphCLKConfig+0xde2>
 8006066:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 800606a:	d820      	bhi.n	80060ae <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800606c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006070:	d012      	beq.n	8006098 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 8006072:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006076:	d81a      	bhi.n	80060ae <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8006078:	2b00      	cmp	r3, #0
 800607a:	d022      	beq.n	80060c2 <HAL_RCCEx_PeriphCLKConfig+0xde6>
 800607c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006080:	d115      	bne.n	80060ae <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006082:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006086:	3308      	adds	r3, #8
 8006088:	2100      	movs	r1, #0
 800608a:	4618      	mov	r0, r3
 800608c:	f000 fdee 	bl	8006c6c <RCCEx_PLL2_Config>
 8006090:	4603      	mov	r3, r0
 8006092:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8006096:	e015      	b.n	80060c4 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006098:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800609c:	3328      	adds	r3, #40	@ 0x28
 800609e:	2102      	movs	r1, #2
 80060a0:	4618      	mov	r0, r3
 80060a2:	f000 fe95 	bl	8006dd0 <RCCEx_PLL3_Config>
 80060a6:	4603      	mov	r3, r0
 80060a8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80060ac:	e00a      	b.n	80060c4 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80060ae:	2301      	movs	r3, #1
 80060b0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80060b4:	e006      	b.n	80060c4 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80060b6:	bf00      	nop
 80060b8:	e004      	b.n	80060c4 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80060ba:	bf00      	nop
 80060bc:	e002      	b.n	80060c4 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80060be:	bf00      	nop
 80060c0:	e000      	b.n	80060c4 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80060c2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80060c4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80060c8:	2b00      	cmp	r3, #0
 80060ca:	d10b      	bne.n	80060e4 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 80060cc:	4ba1      	ldr	r3, [pc, #644]	@ (8006354 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80060ce:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80060d0:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 80060d4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80060d8:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80060dc:	4a9d      	ldr	r2, [pc, #628]	@ (8006354 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80060de:	430b      	orrs	r3, r1
 80060e0:	6593      	str	r3, [r2, #88]	@ 0x58
 80060e2:	e003      	b.n	80060ec <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80060e4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80060e8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 80060ec:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80060f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80060f4:	f002 0308 	and.w	r3, r2, #8
 80060f8:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80060fc:	2300      	movs	r3, #0
 80060fe:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8006102:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8006106:	460b      	mov	r3, r1
 8006108:	4313      	orrs	r3, r2
 800610a:	d01e      	beq.n	800614a <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 800610c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006110:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006114:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006118:	d10c      	bne.n	8006134 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800611a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800611e:	3328      	adds	r3, #40	@ 0x28
 8006120:	2102      	movs	r1, #2
 8006122:	4618      	mov	r0, r3
 8006124:	f000 fe54 	bl	8006dd0 <RCCEx_PLL3_Config>
 8006128:	4603      	mov	r3, r0
 800612a:	2b00      	cmp	r3, #0
 800612c:	d002      	beq.n	8006134 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 800612e:	2301      	movs	r3, #1
 8006130:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8006134:	4b87      	ldr	r3, [pc, #540]	@ (8006354 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006136:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006138:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800613c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006140:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006144:	4a83      	ldr	r2, [pc, #524]	@ (8006354 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006146:	430b      	orrs	r3, r1
 8006148:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800614a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800614e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006152:	f002 0310 	and.w	r3, r2, #16
 8006156:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800615a:	2300      	movs	r3, #0
 800615c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8006160:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8006164:	460b      	mov	r3, r1
 8006166:	4313      	orrs	r3, r2
 8006168:	d01e      	beq.n	80061a8 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 800616a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800616e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8006172:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006176:	d10c      	bne.n	8006192 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8006178:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800617c:	3328      	adds	r3, #40	@ 0x28
 800617e:	2102      	movs	r1, #2
 8006180:	4618      	mov	r0, r3
 8006182:	f000 fe25 	bl	8006dd0 <RCCEx_PLL3_Config>
 8006186:	4603      	mov	r3, r0
 8006188:	2b00      	cmp	r3, #0
 800618a:	d002      	beq.n	8006192 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 800618c:	2301      	movs	r3, #1
 800618e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8006192:	4b70      	ldr	r3, [pc, #448]	@ (8006354 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006194:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006196:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800619a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800619e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80061a2:	4a6c      	ldr	r2, [pc, #432]	@ (8006354 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80061a4:	430b      	orrs	r3, r1
 80061a6:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80061a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80061ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80061b0:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 80061b4:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80061b8:	2300      	movs	r3, #0
 80061ba:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80061be:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 80061c2:	460b      	mov	r3, r1
 80061c4:	4313      	orrs	r3, r2
 80061c6:	d03e      	beq.n	8006246 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 80061c8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80061cc:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80061d0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80061d4:	d022      	beq.n	800621c <HAL_RCCEx_PeriphCLKConfig+0xf40>
 80061d6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80061da:	d81b      	bhi.n	8006214 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 80061dc:	2b00      	cmp	r3, #0
 80061de:	d003      	beq.n	80061e8 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 80061e0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80061e4:	d00b      	beq.n	80061fe <HAL_RCCEx_PeriphCLKConfig+0xf22>
 80061e6:	e015      	b.n	8006214 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80061e8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80061ec:	3308      	adds	r3, #8
 80061ee:	2100      	movs	r1, #0
 80061f0:	4618      	mov	r0, r3
 80061f2:	f000 fd3b 	bl	8006c6c <RCCEx_PLL2_Config>
 80061f6:	4603      	mov	r3, r0
 80061f8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 80061fc:	e00f      	b.n	800621e <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80061fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006202:	3328      	adds	r3, #40	@ 0x28
 8006204:	2102      	movs	r1, #2
 8006206:	4618      	mov	r0, r3
 8006208:	f000 fde2 	bl	8006dd0 <RCCEx_PLL3_Config>
 800620c:	4603      	mov	r3, r0
 800620e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8006212:	e004      	b.n	800621e <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006214:	2301      	movs	r3, #1
 8006216:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800621a:	e000      	b.n	800621e <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 800621c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800621e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006222:	2b00      	cmp	r3, #0
 8006224:	d10b      	bne.n	800623e <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8006226:	4b4b      	ldr	r3, [pc, #300]	@ (8006354 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006228:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800622a:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 800622e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006232:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8006236:	4a47      	ldr	r2, [pc, #284]	@ (8006354 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006238:	430b      	orrs	r3, r1
 800623a:	6593      	str	r3, [r2, #88]	@ 0x58
 800623c:	e003      	b.n	8006246 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800623e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006242:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8006246:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800624a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800624e:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 8006252:	67bb      	str	r3, [r7, #120]	@ 0x78
 8006254:	2300      	movs	r3, #0
 8006256:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8006258:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 800625c:	460b      	mov	r3, r1
 800625e:	4313      	orrs	r3, r2
 8006260:	d03b      	beq.n	80062da <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8006262:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006266:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800626a:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800626e:	d01f      	beq.n	80062b0 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 8006270:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8006274:	d818      	bhi.n	80062a8 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 8006276:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800627a:	d003      	beq.n	8006284 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 800627c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006280:	d007      	beq.n	8006292 <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 8006282:	e011      	b.n	80062a8 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006284:	4b33      	ldr	r3, [pc, #204]	@ (8006354 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006286:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006288:	4a32      	ldr	r2, [pc, #200]	@ (8006354 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800628a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800628e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8006290:	e00f      	b.n	80062b2 <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006292:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006296:	3328      	adds	r3, #40	@ 0x28
 8006298:	2101      	movs	r1, #1
 800629a:	4618      	mov	r0, r3
 800629c:	f000 fd98 	bl	8006dd0 <RCCEx_PLL3_Config>
 80062a0:	4603      	mov	r3, r0
 80062a2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 80062a6:	e004      	b.n	80062b2 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80062a8:	2301      	movs	r3, #1
 80062aa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80062ae:	e000      	b.n	80062b2 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 80062b0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80062b2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80062b6:	2b00      	cmp	r3, #0
 80062b8:	d10b      	bne.n	80062d2 <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80062ba:	4b26      	ldr	r3, [pc, #152]	@ (8006354 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80062bc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80062be:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 80062c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80062c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80062ca:	4a22      	ldr	r2, [pc, #136]	@ (8006354 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80062cc:	430b      	orrs	r3, r1
 80062ce:	6553      	str	r3, [r2, #84]	@ 0x54
 80062d0:	e003      	b.n	80062da <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80062d2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80062d6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 80062da:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80062de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062e2:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 80062e6:	673b      	str	r3, [r7, #112]	@ 0x70
 80062e8:	2300      	movs	r3, #0
 80062ea:	677b      	str	r3, [r7, #116]	@ 0x74
 80062ec:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 80062f0:	460b      	mov	r3, r1
 80062f2:	4313      	orrs	r3, r2
 80062f4:	d034      	beq.n	8006360 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 80062f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80062fa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80062fc:	2b00      	cmp	r3, #0
 80062fe:	d003      	beq.n	8006308 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 8006300:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006304:	d007      	beq.n	8006316 <HAL_RCCEx_PeriphCLKConfig+0x103a>
 8006306:	e011      	b.n	800632c <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006308:	4b12      	ldr	r3, [pc, #72]	@ (8006354 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800630a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800630c:	4a11      	ldr	r2, [pc, #68]	@ (8006354 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800630e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006312:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8006314:	e00e      	b.n	8006334 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8006316:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800631a:	3308      	adds	r3, #8
 800631c:	2102      	movs	r1, #2
 800631e:	4618      	mov	r0, r3
 8006320:	f000 fca4 	bl	8006c6c <RCCEx_PLL2_Config>
 8006324:	4603      	mov	r3, r0
 8006326:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800632a:	e003      	b.n	8006334 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 800632c:	2301      	movs	r3, #1
 800632e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006332:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006334:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006338:	2b00      	cmp	r3, #0
 800633a:	d10d      	bne.n	8006358 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800633c:	4b05      	ldr	r3, [pc, #20]	@ (8006354 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800633e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006340:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8006344:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006348:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800634a:	4a02      	ldr	r2, [pc, #8]	@ (8006354 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800634c:	430b      	orrs	r3, r1
 800634e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8006350:	e006      	b.n	8006360 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 8006352:	bf00      	nop
 8006354:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006358:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800635c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8006360:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006364:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006368:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 800636c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800636e:	2300      	movs	r3, #0
 8006370:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8006372:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8006376:	460b      	mov	r3, r1
 8006378:	4313      	orrs	r3, r2
 800637a:	d00c      	beq.n	8006396 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800637c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006380:	3328      	adds	r3, #40	@ 0x28
 8006382:	2102      	movs	r1, #2
 8006384:	4618      	mov	r0, r3
 8006386:	f000 fd23 	bl	8006dd0 <RCCEx_PLL3_Config>
 800638a:	4603      	mov	r3, r0
 800638c:	2b00      	cmp	r3, #0
 800638e:	d002      	beq.n	8006396 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 8006390:	2301      	movs	r3, #1
 8006392:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8006396:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800639a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800639e:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 80063a2:	663b      	str	r3, [r7, #96]	@ 0x60
 80063a4:	2300      	movs	r3, #0
 80063a6:	667b      	str	r3, [r7, #100]	@ 0x64
 80063a8:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 80063ac:	460b      	mov	r3, r1
 80063ae:	4313      	orrs	r3, r2
 80063b0:	d038      	beq.n	8006424 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 80063b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80063b6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80063ba:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80063be:	d018      	beq.n	80063f2 <HAL_RCCEx_PeriphCLKConfig+0x1116>
 80063c0:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80063c4:	d811      	bhi.n	80063ea <HAL_RCCEx_PeriphCLKConfig+0x110e>
 80063c6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80063ca:	d014      	beq.n	80063f6 <HAL_RCCEx_PeriphCLKConfig+0x111a>
 80063cc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80063d0:	d80b      	bhi.n	80063ea <HAL_RCCEx_PeriphCLKConfig+0x110e>
 80063d2:	2b00      	cmp	r3, #0
 80063d4:	d011      	beq.n	80063fa <HAL_RCCEx_PeriphCLKConfig+0x111e>
 80063d6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80063da:	d106      	bne.n	80063ea <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80063dc:	4bc3      	ldr	r3, [pc, #780]	@ (80066ec <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80063de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80063e0:	4ac2      	ldr	r2, [pc, #776]	@ (80066ec <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80063e2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80063e6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 80063e8:	e008      	b.n	80063fc <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80063ea:	2301      	movs	r3, #1
 80063ec:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80063f0:	e004      	b.n	80063fc <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 80063f2:	bf00      	nop
 80063f4:	e002      	b.n	80063fc <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 80063f6:	bf00      	nop
 80063f8:	e000      	b.n	80063fc <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 80063fa:	bf00      	nop
    }

    if (ret == HAL_OK)
 80063fc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006400:	2b00      	cmp	r3, #0
 8006402:	d10b      	bne.n	800641c <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8006404:	4bb9      	ldr	r3, [pc, #740]	@ (80066ec <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006406:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006408:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800640c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006410:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006414:	4ab5      	ldr	r2, [pc, #724]	@ (80066ec <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006416:	430b      	orrs	r3, r1
 8006418:	6553      	str	r3, [r2, #84]	@ 0x54
 800641a:	e003      	b.n	8006424 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800641c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006420:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8006424:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006428:	e9d3 2300 	ldrd	r2, r3, [r3]
 800642c:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8006430:	65bb      	str	r3, [r7, #88]	@ 0x58
 8006432:	2300      	movs	r3, #0
 8006434:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006436:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 800643a:	460b      	mov	r3, r1
 800643c:	4313      	orrs	r3, r2
 800643e:	d009      	beq.n	8006454 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8006440:	4baa      	ldr	r3, [pc, #680]	@ (80066ec <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006442:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006444:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8006448:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800644c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800644e:	4aa7      	ldr	r2, [pc, #668]	@ (80066ec <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006450:	430b      	orrs	r3, r1
 8006452:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8006454:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006458:	e9d3 2300 	ldrd	r2, r3, [r3]
 800645c:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 8006460:	653b      	str	r3, [r7, #80]	@ 0x50
 8006462:	2300      	movs	r3, #0
 8006464:	657b      	str	r3, [r7, #84]	@ 0x54
 8006466:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 800646a:	460b      	mov	r3, r1
 800646c:	4313      	orrs	r3, r2
 800646e:	d00a      	beq.n	8006486 <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8006470:	4b9e      	ldr	r3, [pc, #632]	@ (80066ec <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006472:	691b      	ldr	r3, [r3, #16]
 8006474:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 8006478:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800647c:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8006480:	4a9a      	ldr	r2, [pc, #616]	@ (80066ec <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006482:	430b      	orrs	r3, r1
 8006484:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8006486:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800648a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800648e:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8006492:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006494:	2300      	movs	r3, #0
 8006496:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006498:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 800649c:	460b      	mov	r3, r1
 800649e:	4313      	orrs	r3, r2
 80064a0:	d009      	beq.n	80064b6 <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80064a2:	4b92      	ldr	r3, [pc, #584]	@ (80066ec <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80064a4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80064a6:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 80064aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80064ae:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80064b0:	4a8e      	ldr	r2, [pc, #568]	@ (80066ec <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80064b2:	430b      	orrs	r3, r1
 80064b4:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 80064b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80064ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80064be:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 80064c2:	643b      	str	r3, [r7, #64]	@ 0x40
 80064c4:	2300      	movs	r3, #0
 80064c6:	647b      	str	r3, [r7, #68]	@ 0x44
 80064c8:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 80064cc:	460b      	mov	r3, r1
 80064ce:	4313      	orrs	r3, r2
 80064d0:	d00e      	beq.n	80064f0 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80064d2:	4b86      	ldr	r3, [pc, #536]	@ (80066ec <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80064d4:	691b      	ldr	r3, [r3, #16]
 80064d6:	4a85      	ldr	r2, [pc, #532]	@ (80066ec <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80064d8:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80064dc:	6113      	str	r3, [r2, #16]
 80064de:	4b83      	ldr	r3, [pc, #524]	@ (80066ec <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80064e0:	6919      	ldr	r1, [r3, #16]
 80064e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80064e6:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 80064ea:	4a80      	ldr	r2, [pc, #512]	@ (80066ec <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80064ec:	430b      	orrs	r3, r1
 80064ee:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 80064f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80064f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80064f8:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 80064fc:	63bb      	str	r3, [r7, #56]	@ 0x38
 80064fe:	2300      	movs	r3, #0
 8006500:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006502:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8006506:	460b      	mov	r3, r1
 8006508:	4313      	orrs	r3, r2
 800650a:	d009      	beq.n	8006520 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800650c:	4b77      	ldr	r3, [pc, #476]	@ (80066ec <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800650e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006510:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8006514:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006518:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800651a:	4a74      	ldr	r2, [pc, #464]	@ (80066ec <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800651c:	430b      	orrs	r3, r1
 800651e:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8006520:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006524:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006528:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 800652c:	633b      	str	r3, [r7, #48]	@ 0x30
 800652e:	2300      	movs	r3, #0
 8006530:	637b      	str	r3, [r7, #52]	@ 0x34
 8006532:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8006536:	460b      	mov	r3, r1
 8006538:	4313      	orrs	r3, r2
 800653a:	d00a      	beq.n	8006552 <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800653c:	4b6b      	ldr	r3, [pc, #428]	@ (80066ec <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800653e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006540:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 8006544:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006548:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800654c:	4a67      	ldr	r2, [pc, #412]	@ (80066ec <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800654e:	430b      	orrs	r3, r1
 8006550:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8006552:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006556:	e9d3 2300 	ldrd	r2, r3, [r3]
 800655a:	2100      	movs	r1, #0
 800655c:	62b9      	str	r1, [r7, #40]	@ 0x28
 800655e:	f003 0301 	and.w	r3, r3, #1
 8006562:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006564:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8006568:	460b      	mov	r3, r1
 800656a:	4313      	orrs	r3, r2
 800656c:	d011      	beq.n	8006592 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800656e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006572:	3308      	adds	r3, #8
 8006574:	2100      	movs	r1, #0
 8006576:	4618      	mov	r0, r3
 8006578:	f000 fb78 	bl	8006c6c <RCCEx_PLL2_Config>
 800657c:	4603      	mov	r3, r0
 800657e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8006582:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006586:	2b00      	cmp	r3, #0
 8006588:	d003      	beq.n	8006592 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800658a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800658e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8006592:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006596:	e9d3 2300 	ldrd	r2, r3, [r3]
 800659a:	2100      	movs	r1, #0
 800659c:	6239      	str	r1, [r7, #32]
 800659e:	f003 0302 	and.w	r3, r3, #2
 80065a2:	627b      	str	r3, [r7, #36]	@ 0x24
 80065a4:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 80065a8:	460b      	mov	r3, r1
 80065aa:	4313      	orrs	r3, r2
 80065ac:	d011      	beq.n	80065d2 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80065ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80065b2:	3308      	adds	r3, #8
 80065b4:	2101      	movs	r1, #1
 80065b6:	4618      	mov	r0, r3
 80065b8:	f000 fb58 	bl	8006c6c <RCCEx_PLL2_Config>
 80065bc:	4603      	mov	r3, r0
 80065be:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 80065c2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80065c6:	2b00      	cmp	r3, #0
 80065c8:	d003      	beq.n	80065d2 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80065ca:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80065ce:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 80065d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80065d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065da:	2100      	movs	r1, #0
 80065dc:	61b9      	str	r1, [r7, #24]
 80065de:	f003 0304 	and.w	r3, r3, #4
 80065e2:	61fb      	str	r3, [r7, #28]
 80065e4:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 80065e8:	460b      	mov	r3, r1
 80065ea:	4313      	orrs	r3, r2
 80065ec:	d011      	beq.n	8006612 <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80065ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80065f2:	3308      	adds	r3, #8
 80065f4:	2102      	movs	r1, #2
 80065f6:	4618      	mov	r0, r3
 80065f8:	f000 fb38 	bl	8006c6c <RCCEx_PLL2_Config>
 80065fc:	4603      	mov	r3, r0
 80065fe:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8006602:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006606:	2b00      	cmp	r3, #0
 8006608:	d003      	beq.n	8006612 <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800660a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800660e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8006612:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006616:	e9d3 2300 	ldrd	r2, r3, [r3]
 800661a:	2100      	movs	r1, #0
 800661c:	6139      	str	r1, [r7, #16]
 800661e:	f003 0308 	and.w	r3, r3, #8
 8006622:	617b      	str	r3, [r7, #20]
 8006624:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8006628:	460b      	mov	r3, r1
 800662a:	4313      	orrs	r3, r2
 800662c:	d011      	beq.n	8006652 <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800662e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006632:	3328      	adds	r3, #40	@ 0x28
 8006634:	2100      	movs	r1, #0
 8006636:	4618      	mov	r0, r3
 8006638:	f000 fbca 	bl	8006dd0 <RCCEx_PLL3_Config>
 800663c:	4603      	mov	r3, r0
 800663e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  
    if (ret == HAL_OK)
 8006642:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006646:	2b00      	cmp	r3, #0
 8006648:	d003      	beq.n	8006652 <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800664a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800664e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8006652:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006656:	e9d3 2300 	ldrd	r2, r3, [r3]
 800665a:	2100      	movs	r1, #0
 800665c:	60b9      	str	r1, [r7, #8]
 800665e:	f003 0310 	and.w	r3, r3, #16
 8006662:	60fb      	str	r3, [r7, #12]
 8006664:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8006668:	460b      	mov	r3, r1
 800666a:	4313      	orrs	r3, r2
 800666c:	d011      	beq.n	8006692 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800666e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006672:	3328      	adds	r3, #40	@ 0x28
 8006674:	2101      	movs	r1, #1
 8006676:	4618      	mov	r0, r3
 8006678:	f000 fbaa 	bl	8006dd0 <RCCEx_PLL3_Config>
 800667c:	4603      	mov	r3, r0
 800667e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8006682:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006686:	2b00      	cmp	r3, #0
 8006688:	d003      	beq.n	8006692 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800668a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800668e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8006692:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006696:	e9d3 2300 	ldrd	r2, r3, [r3]
 800669a:	2100      	movs	r1, #0
 800669c:	6039      	str	r1, [r7, #0]
 800669e:	f003 0320 	and.w	r3, r3, #32
 80066a2:	607b      	str	r3, [r7, #4]
 80066a4:	e9d7 1200 	ldrd	r1, r2, [r7]
 80066a8:	460b      	mov	r3, r1
 80066aa:	4313      	orrs	r3, r2
 80066ac:	d011      	beq.n	80066d2 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80066ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80066b2:	3328      	adds	r3, #40	@ 0x28
 80066b4:	2102      	movs	r1, #2
 80066b6:	4618      	mov	r0, r3
 80066b8:	f000 fb8a 	bl	8006dd0 <RCCEx_PLL3_Config>
 80066bc:	4603      	mov	r3, r0
 80066be:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 80066c2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80066c6:	2b00      	cmp	r3, #0
 80066c8:	d003      	beq.n	80066d2 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80066ca:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80066ce:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }

  if (status == HAL_OK)
 80066d2:	f897 3126 	ldrb.w	r3, [r7, #294]	@ 0x126
 80066d6:	2b00      	cmp	r3, #0
 80066d8:	d101      	bne.n	80066de <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 80066da:	2300      	movs	r3, #0
 80066dc:	e000      	b.n	80066e0 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 80066de:	2301      	movs	r3, #1
}
 80066e0:	4618      	mov	r0, r3
 80066e2:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 80066e6:	46bd      	mov	sp, r7
 80066e8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80066ec:	58024400 	.word	0x58024400

080066f0 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 80066f0:	b580      	push	{r7, lr}
 80066f2:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 80066f4:	f7fe fd96 	bl	8005224 <HAL_RCC_GetHCLKFreq>
 80066f8:	4602      	mov	r2, r0
 80066fa:	4b06      	ldr	r3, [pc, #24]	@ (8006714 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 80066fc:	6a1b      	ldr	r3, [r3, #32]
 80066fe:	091b      	lsrs	r3, r3, #4
 8006700:	f003 0307 	and.w	r3, r3, #7
 8006704:	4904      	ldr	r1, [pc, #16]	@ (8006718 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8006706:	5ccb      	ldrb	r3, [r1, r3]
 8006708:	f003 031f 	and.w	r3, r3, #31
 800670c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8006710:	4618      	mov	r0, r3
 8006712:	bd80      	pop	{r7, pc}
 8006714:	58024400 	.word	0x58024400
 8006718:	0800b2ec 	.word	0x0800b2ec

0800671c <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 800671c:	b480      	push	{r7}
 800671e:	b089      	sub	sp, #36	@ 0x24
 8006720:	af00      	add	r7, sp, #0
 8006722:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006724:	4ba1      	ldr	r3, [pc, #644]	@ (80069ac <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006726:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006728:	f003 0303 	and.w	r3, r3, #3
 800672c:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 800672e:	4b9f      	ldr	r3, [pc, #636]	@ (80069ac <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006730:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006732:	0b1b      	lsrs	r3, r3, #12
 8006734:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006738:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800673a:	4b9c      	ldr	r3, [pc, #624]	@ (80069ac <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800673c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800673e:	091b      	lsrs	r3, r3, #4
 8006740:	f003 0301 	and.w	r3, r3, #1
 8006744:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8006746:	4b99      	ldr	r3, [pc, #612]	@ (80069ac <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006748:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800674a:	08db      	lsrs	r3, r3, #3
 800674c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006750:	693a      	ldr	r2, [r7, #16]
 8006752:	fb02 f303 	mul.w	r3, r2, r3
 8006756:	ee07 3a90 	vmov	s15, r3
 800675a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800675e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8006762:	697b      	ldr	r3, [r7, #20]
 8006764:	2b00      	cmp	r3, #0
 8006766:	f000 8111 	beq.w	800698c <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800676a:	69bb      	ldr	r3, [r7, #24]
 800676c:	2b02      	cmp	r3, #2
 800676e:	f000 8083 	beq.w	8006878 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8006772:	69bb      	ldr	r3, [r7, #24]
 8006774:	2b02      	cmp	r3, #2
 8006776:	f200 80a1 	bhi.w	80068bc <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800677a:	69bb      	ldr	r3, [r7, #24]
 800677c:	2b00      	cmp	r3, #0
 800677e:	d003      	beq.n	8006788 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8006780:	69bb      	ldr	r3, [r7, #24]
 8006782:	2b01      	cmp	r3, #1
 8006784:	d056      	beq.n	8006834 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8006786:	e099      	b.n	80068bc <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006788:	4b88      	ldr	r3, [pc, #544]	@ (80069ac <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	f003 0320 	and.w	r3, r3, #32
 8006790:	2b00      	cmp	r3, #0
 8006792:	d02d      	beq.n	80067f0 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006794:	4b85      	ldr	r3, [pc, #532]	@ (80069ac <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006796:	681b      	ldr	r3, [r3, #0]
 8006798:	08db      	lsrs	r3, r3, #3
 800679a:	f003 0303 	and.w	r3, r3, #3
 800679e:	4a84      	ldr	r2, [pc, #528]	@ (80069b0 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 80067a0:	fa22 f303 	lsr.w	r3, r2, r3
 80067a4:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80067a6:	68bb      	ldr	r3, [r7, #8]
 80067a8:	ee07 3a90 	vmov	s15, r3
 80067ac:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80067b0:	697b      	ldr	r3, [r7, #20]
 80067b2:	ee07 3a90 	vmov	s15, r3
 80067b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80067ba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80067be:	4b7b      	ldr	r3, [pc, #492]	@ (80069ac <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80067c0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80067c2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80067c6:	ee07 3a90 	vmov	s15, r3
 80067ca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80067ce:	ed97 6a03 	vldr	s12, [r7, #12]
 80067d2:	eddf 5a78 	vldr	s11, [pc, #480]	@ 80069b4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80067d6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80067da:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80067de:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80067e2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80067e6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80067ea:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 80067ee:	e087      	b.n	8006900 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80067f0:	697b      	ldr	r3, [r7, #20]
 80067f2:	ee07 3a90 	vmov	s15, r3
 80067f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80067fa:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 80069b8 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 80067fe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006802:	4b6a      	ldr	r3, [pc, #424]	@ (80069ac <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006804:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006806:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800680a:	ee07 3a90 	vmov	s15, r3
 800680e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006812:	ed97 6a03 	vldr	s12, [r7, #12]
 8006816:	eddf 5a67 	vldr	s11, [pc, #412]	@ 80069b4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800681a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800681e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006822:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006826:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800682a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800682e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006832:	e065      	b.n	8006900 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006834:	697b      	ldr	r3, [r7, #20]
 8006836:	ee07 3a90 	vmov	s15, r3
 800683a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800683e:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 80069bc <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8006842:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006846:	4b59      	ldr	r3, [pc, #356]	@ (80069ac <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006848:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800684a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800684e:	ee07 3a90 	vmov	s15, r3
 8006852:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006856:	ed97 6a03 	vldr	s12, [r7, #12]
 800685a:	eddf 5a56 	vldr	s11, [pc, #344]	@ 80069b4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800685e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006862:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006866:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800686a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800686e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006872:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006876:	e043      	b.n	8006900 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006878:	697b      	ldr	r3, [r7, #20]
 800687a:	ee07 3a90 	vmov	s15, r3
 800687e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006882:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 80069c0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8006886:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800688a:	4b48      	ldr	r3, [pc, #288]	@ (80069ac <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800688c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800688e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006892:	ee07 3a90 	vmov	s15, r3
 8006896:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800689a:	ed97 6a03 	vldr	s12, [r7, #12]
 800689e:	eddf 5a45 	vldr	s11, [pc, #276]	@ 80069b4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80068a2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80068a6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80068aa:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80068ae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80068b2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80068b6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80068ba:	e021      	b.n	8006900 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80068bc:	697b      	ldr	r3, [r7, #20]
 80068be:	ee07 3a90 	vmov	s15, r3
 80068c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80068c6:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 80069bc <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80068ca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80068ce:	4b37      	ldr	r3, [pc, #220]	@ (80069ac <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80068d0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80068d2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80068d6:	ee07 3a90 	vmov	s15, r3
 80068da:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80068de:	ed97 6a03 	vldr	s12, [r7, #12]
 80068e2:	eddf 5a34 	vldr	s11, [pc, #208]	@ 80069b4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80068e6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80068ea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80068ee:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80068f2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80068f6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80068fa:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80068fe:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8006900:	4b2a      	ldr	r3, [pc, #168]	@ (80069ac <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006902:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006904:	0a5b      	lsrs	r3, r3, #9
 8006906:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800690a:	ee07 3a90 	vmov	s15, r3
 800690e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006912:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006916:	ee37 7a87 	vadd.f32	s14, s15, s14
 800691a:	edd7 6a07 	vldr	s13, [r7, #28]
 800691e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006922:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006926:	ee17 2a90 	vmov	r2, s15
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 800692e:	4b1f      	ldr	r3, [pc, #124]	@ (80069ac <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006930:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006932:	0c1b      	lsrs	r3, r3, #16
 8006934:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006938:	ee07 3a90 	vmov	s15, r3
 800693c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006940:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006944:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006948:	edd7 6a07 	vldr	s13, [r7, #28]
 800694c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006950:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006954:	ee17 2a90 	vmov	r2, s15
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 800695c:	4b13      	ldr	r3, [pc, #76]	@ (80069ac <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800695e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006960:	0e1b      	lsrs	r3, r3, #24
 8006962:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006966:	ee07 3a90 	vmov	s15, r3
 800696a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800696e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006972:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006976:	edd7 6a07 	vldr	s13, [r7, #28]
 800697a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800697e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006982:	ee17 2a90 	vmov	r2, s15
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800698a:	e008      	b.n	800699e <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	2200      	movs	r2, #0
 8006990:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	2200      	movs	r2, #0
 8006996:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	2200      	movs	r2, #0
 800699c:	609a      	str	r2, [r3, #8]
}
 800699e:	bf00      	nop
 80069a0:	3724      	adds	r7, #36	@ 0x24
 80069a2:	46bd      	mov	sp, r7
 80069a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069a8:	4770      	bx	lr
 80069aa:	bf00      	nop
 80069ac:	58024400 	.word	0x58024400
 80069b0:	03d09000 	.word	0x03d09000
 80069b4:	46000000 	.word	0x46000000
 80069b8:	4c742400 	.word	0x4c742400
 80069bc:	4a742400 	.word	0x4a742400
 80069c0:	4bbebc20 	.word	0x4bbebc20

080069c4 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 80069c4:	b480      	push	{r7}
 80069c6:	b089      	sub	sp, #36	@ 0x24
 80069c8:	af00      	add	r7, sp, #0
 80069ca:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80069cc:	4ba1      	ldr	r3, [pc, #644]	@ (8006c54 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80069ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80069d0:	f003 0303 	and.w	r3, r3, #3
 80069d4:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 80069d6:	4b9f      	ldr	r3, [pc, #636]	@ (8006c54 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80069d8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80069da:	0d1b      	lsrs	r3, r3, #20
 80069dc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80069e0:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 80069e2:	4b9c      	ldr	r3, [pc, #624]	@ (8006c54 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80069e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80069e6:	0a1b      	lsrs	r3, r3, #8
 80069e8:	f003 0301 	and.w	r3, r3, #1
 80069ec:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 80069ee:	4b99      	ldr	r3, [pc, #612]	@ (8006c54 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80069f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80069f2:	08db      	lsrs	r3, r3, #3
 80069f4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80069f8:	693a      	ldr	r2, [r7, #16]
 80069fa:	fb02 f303 	mul.w	r3, r2, r3
 80069fe:	ee07 3a90 	vmov	s15, r3
 8006a02:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006a06:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8006a0a:	697b      	ldr	r3, [r7, #20]
 8006a0c:	2b00      	cmp	r3, #0
 8006a0e:	f000 8111 	beq.w	8006c34 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8006a12:	69bb      	ldr	r3, [r7, #24]
 8006a14:	2b02      	cmp	r3, #2
 8006a16:	f000 8083 	beq.w	8006b20 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8006a1a:	69bb      	ldr	r3, [r7, #24]
 8006a1c:	2b02      	cmp	r3, #2
 8006a1e:	f200 80a1 	bhi.w	8006b64 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8006a22:	69bb      	ldr	r3, [r7, #24]
 8006a24:	2b00      	cmp	r3, #0
 8006a26:	d003      	beq.n	8006a30 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8006a28:	69bb      	ldr	r3, [r7, #24]
 8006a2a:	2b01      	cmp	r3, #1
 8006a2c:	d056      	beq.n	8006adc <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8006a2e:	e099      	b.n	8006b64 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006a30:	4b88      	ldr	r3, [pc, #544]	@ (8006c54 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006a32:	681b      	ldr	r3, [r3, #0]
 8006a34:	f003 0320 	and.w	r3, r3, #32
 8006a38:	2b00      	cmp	r3, #0
 8006a3a:	d02d      	beq.n	8006a98 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006a3c:	4b85      	ldr	r3, [pc, #532]	@ (8006c54 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006a3e:	681b      	ldr	r3, [r3, #0]
 8006a40:	08db      	lsrs	r3, r3, #3
 8006a42:	f003 0303 	and.w	r3, r3, #3
 8006a46:	4a84      	ldr	r2, [pc, #528]	@ (8006c58 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8006a48:	fa22 f303 	lsr.w	r3, r2, r3
 8006a4c:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8006a4e:	68bb      	ldr	r3, [r7, #8]
 8006a50:	ee07 3a90 	vmov	s15, r3
 8006a54:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006a58:	697b      	ldr	r3, [r7, #20]
 8006a5a:	ee07 3a90 	vmov	s15, r3
 8006a5e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006a62:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006a66:	4b7b      	ldr	r3, [pc, #492]	@ (8006c54 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006a68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006a6a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006a6e:	ee07 3a90 	vmov	s15, r3
 8006a72:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006a76:	ed97 6a03 	vldr	s12, [r7, #12]
 8006a7a:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8006c5c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006a7e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006a82:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006a86:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006a8a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006a8e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006a92:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8006a96:	e087      	b.n	8006ba8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8006a98:	697b      	ldr	r3, [r7, #20]
 8006a9a:	ee07 3a90 	vmov	s15, r3
 8006a9e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006aa2:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8006c60 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8006aa6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006aaa:	4b6a      	ldr	r3, [pc, #424]	@ (8006c54 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006aac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006aae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006ab2:	ee07 3a90 	vmov	s15, r3
 8006ab6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006aba:	ed97 6a03 	vldr	s12, [r7, #12]
 8006abe:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8006c5c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006ac2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006ac6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006aca:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006ace:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006ad2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006ad6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006ada:	e065      	b.n	8006ba8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8006adc:	697b      	ldr	r3, [r7, #20]
 8006ade:	ee07 3a90 	vmov	s15, r3
 8006ae2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006ae6:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8006c64 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8006aea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006aee:	4b59      	ldr	r3, [pc, #356]	@ (8006c54 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006af0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006af2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006af6:	ee07 3a90 	vmov	s15, r3
 8006afa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006afe:	ed97 6a03 	vldr	s12, [r7, #12]
 8006b02:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8006c5c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006b06:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006b0a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006b0e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006b12:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006b16:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006b1a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006b1e:	e043      	b.n	8006ba8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8006b20:	697b      	ldr	r3, [r7, #20]
 8006b22:	ee07 3a90 	vmov	s15, r3
 8006b26:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006b2a:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8006c68 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8006b2e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006b32:	4b48      	ldr	r3, [pc, #288]	@ (8006c54 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006b34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006b36:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006b3a:	ee07 3a90 	vmov	s15, r3
 8006b3e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006b42:	ed97 6a03 	vldr	s12, [r7, #12]
 8006b46:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8006c5c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006b4a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006b4e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006b52:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006b56:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006b5a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006b5e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006b62:	e021      	b.n	8006ba8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8006b64:	697b      	ldr	r3, [r7, #20]
 8006b66:	ee07 3a90 	vmov	s15, r3
 8006b6a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006b6e:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8006c64 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8006b72:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006b76:	4b37      	ldr	r3, [pc, #220]	@ (8006c54 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006b78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006b7a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006b7e:	ee07 3a90 	vmov	s15, r3
 8006b82:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006b86:	ed97 6a03 	vldr	s12, [r7, #12]
 8006b8a:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8006c5c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006b8e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006b92:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006b96:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006b9a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006b9e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006ba2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006ba6:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8006ba8:	4b2a      	ldr	r3, [pc, #168]	@ (8006c54 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006baa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006bac:	0a5b      	lsrs	r3, r3, #9
 8006bae:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006bb2:	ee07 3a90 	vmov	s15, r3
 8006bb6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006bba:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006bbe:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006bc2:	edd7 6a07 	vldr	s13, [r7, #28]
 8006bc6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006bca:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006bce:	ee17 2a90 	vmov	r2, s15
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8006bd6:	4b1f      	ldr	r3, [pc, #124]	@ (8006c54 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006bd8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006bda:	0c1b      	lsrs	r3, r3, #16
 8006bdc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006be0:	ee07 3a90 	vmov	s15, r3
 8006be4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006be8:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006bec:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006bf0:	edd7 6a07 	vldr	s13, [r7, #28]
 8006bf4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006bf8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006bfc:	ee17 2a90 	vmov	r2, s15
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8006c04:	4b13      	ldr	r3, [pc, #76]	@ (8006c54 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006c06:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006c08:	0e1b      	lsrs	r3, r3, #24
 8006c0a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006c0e:	ee07 3a90 	vmov	s15, r3
 8006c12:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006c16:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006c1a:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006c1e:	edd7 6a07 	vldr	s13, [r7, #28]
 8006c22:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006c26:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006c2a:	ee17 2a90 	vmov	r2, s15
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8006c32:	e008      	b.n	8006c46 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	2200      	movs	r2, #0
 8006c38:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	2200      	movs	r2, #0
 8006c3e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	2200      	movs	r2, #0
 8006c44:	609a      	str	r2, [r3, #8]
}
 8006c46:	bf00      	nop
 8006c48:	3724      	adds	r7, #36	@ 0x24
 8006c4a:	46bd      	mov	sp, r7
 8006c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c50:	4770      	bx	lr
 8006c52:	bf00      	nop
 8006c54:	58024400 	.word	0x58024400
 8006c58:	03d09000 	.word	0x03d09000
 8006c5c:	46000000 	.word	0x46000000
 8006c60:	4c742400 	.word	0x4c742400
 8006c64:	4a742400 	.word	0x4a742400
 8006c68:	4bbebc20 	.word	0x4bbebc20

08006c6c <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8006c6c:	b580      	push	{r7, lr}
 8006c6e:	b084      	sub	sp, #16
 8006c70:	af00      	add	r7, sp, #0
 8006c72:	6078      	str	r0, [r7, #4]
 8006c74:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006c76:	2300      	movs	r3, #0
 8006c78:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8006c7a:	4b53      	ldr	r3, [pc, #332]	@ (8006dc8 <RCCEx_PLL2_Config+0x15c>)
 8006c7c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006c7e:	f003 0303 	and.w	r3, r3, #3
 8006c82:	2b03      	cmp	r3, #3
 8006c84:	d101      	bne.n	8006c8a <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8006c86:	2301      	movs	r3, #1
 8006c88:	e099      	b.n	8006dbe <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8006c8a:	4b4f      	ldr	r3, [pc, #316]	@ (8006dc8 <RCCEx_PLL2_Config+0x15c>)
 8006c8c:	681b      	ldr	r3, [r3, #0]
 8006c8e:	4a4e      	ldr	r2, [pc, #312]	@ (8006dc8 <RCCEx_PLL2_Config+0x15c>)
 8006c90:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8006c94:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006c96:	f7fc f96f 	bl	8002f78 <HAL_GetTick>
 8006c9a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8006c9c:	e008      	b.n	8006cb0 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8006c9e:	f7fc f96b 	bl	8002f78 <HAL_GetTick>
 8006ca2:	4602      	mov	r2, r0
 8006ca4:	68bb      	ldr	r3, [r7, #8]
 8006ca6:	1ad3      	subs	r3, r2, r3
 8006ca8:	2b02      	cmp	r3, #2
 8006caa:	d901      	bls.n	8006cb0 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8006cac:	2303      	movs	r3, #3
 8006cae:	e086      	b.n	8006dbe <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8006cb0:	4b45      	ldr	r3, [pc, #276]	@ (8006dc8 <RCCEx_PLL2_Config+0x15c>)
 8006cb2:	681b      	ldr	r3, [r3, #0]
 8006cb4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006cb8:	2b00      	cmp	r3, #0
 8006cba:	d1f0      	bne.n	8006c9e <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8006cbc:	4b42      	ldr	r3, [pc, #264]	@ (8006dc8 <RCCEx_PLL2_Config+0x15c>)
 8006cbe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006cc0:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	681b      	ldr	r3, [r3, #0]
 8006cc8:	031b      	lsls	r3, r3, #12
 8006cca:	493f      	ldr	r1, [pc, #252]	@ (8006dc8 <RCCEx_PLL2_Config+0x15c>)
 8006ccc:	4313      	orrs	r3, r2
 8006cce:	628b      	str	r3, [r1, #40]	@ 0x28
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	685b      	ldr	r3, [r3, #4]
 8006cd4:	3b01      	subs	r3, #1
 8006cd6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	689b      	ldr	r3, [r3, #8]
 8006cde:	3b01      	subs	r3, #1
 8006ce0:	025b      	lsls	r3, r3, #9
 8006ce2:	b29b      	uxth	r3, r3
 8006ce4:	431a      	orrs	r2, r3
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	68db      	ldr	r3, [r3, #12]
 8006cea:	3b01      	subs	r3, #1
 8006cec:	041b      	lsls	r3, r3, #16
 8006cee:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8006cf2:	431a      	orrs	r2, r3
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	691b      	ldr	r3, [r3, #16]
 8006cf8:	3b01      	subs	r3, #1
 8006cfa:	061b      	lsls	r3, r3, #24
 8006cfc:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8006d00:	4931      	ldr	r1, [pc, #196]	@ (8006dc8 <RCCEx_PLL2_Config+0x15c>)
 8006d02:	4313      	orrs	r3, r2
 8006d04:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8006d06:	4b30      	ldr	r3, [pc, #192]	@ (8006dc8 <RCCEx_PLL2_Config+0x15c>)
 8006d08:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006d0a:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	695b      	ldr	r3, [r3, #20]
 8006d12:	492d      	ldr	r1, [pc, #180]	@ (8006dc8 <RCCEx_PLL2_Config+0x15c>)
 8006d14:	4313      	orrs	r3, r2
 8006d16:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8006d18:	4b2b      	ldr	r3, [pc, #172]	@ (8006dc8 <RCCEx_PLL2_Config+0x15c>)
 8006d1a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006d1c:	f023 0220 	bic.w	r2, r3, #32
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	699b      	ldr	r3, [r3, #24]
 8006d24:	4928      	ldr	r1, [pc, #160]	@ (8006dc8 <RCCEx_PLL2_Config+0x15c>)
 8006d26:	4313      	orrs	r3, r2
 8006d28:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8006d2a:	4b27      	ldr	r3, [pc, #156]	@ (8006dc8 <RCCEx_PLL2_Config+0x15c>)
 8006d2c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006d2e:	4a26      	ldr	r2, [pc, #152]	@ (8006dc8 <RCCEx_PLL2_Config+0x15c>)
 8006d30:	f023 0310 	bic.w	r3, r3, #16
 8006d34:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8006d36:	4b24      	ldr	r3, [pc, #144]	@ (8006dc8 <RCCEx_PLL2_Config+0x15c>)
 8006d38:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006d3a:	4b24      	ldr	r3, [pc, #144]	@ (8006dcc <RCCEx_PLL2_Config+0x160>)
 8006d3c:	4013      	ands	r3, r2
 8006d3e:	687a      	ldr	r2, [r7, #4]
 8006d40:	69d2      	ldr	r2, [r2, #28]
 8006d42:	00d2      	lsls	r2, r2, #3
 8006d44:	4920      	ldr	r1, [pc, #128]	@ (8006dc8 <RCCEx_PLL2_Config+0x15c>)
 8006d46:	4313      	orrs	r3, r2
 8006d48:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8006d4a:	4b1f      	ldr	r3, [pc, #124]	@ (8006dc8 <RCCEx_PLL2_Config+0x15c>)
 8006d4c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006d4e:	4a1e      	ldr	r2, [pc, #120]	@ (8006dc8 <RCCEx_PLL2_Config+0x15c>)
 8006d50:	f043 0310 	orr.w	r3, r3, #16
 8006d54:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8006d56:	683b      	ldr	r3, [r7, #0]
 8006d58:	2b00      	cmp	r3, #0
 8006d5a:	d106      	bne.n	8006d6a <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8006d5c:	4b1a      	ldr	r3, [pc, #104]	@ (8006dc8 <RCCEx_PLL2_Config+0x15c>)
 8006d5e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006d60:	4a19      	ldr	r2, [pc, #100]	@ (8006dc8 <RCCEx_PLL2_Config+0x15c>)
 8006d62:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8006d66:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8006d68:	e00f      	b.n	8006d8a <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8006d6a:	683b      	ldr	r3, [r7, #0]
 8006d6c:	2b01      	cmp	r3, #1
 8006d6e:	d106      	bne.n	8006d7e <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8006d70:	4b15      	ldr	r3, [pc, #84]	@ (8006dc8 <RCCEx_PLL2_Config+0x15c>)
 8006d72:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006d74:	4a14      	ldr	r2, [pc, #80]	@ (8006dc8 <RCCEx_PLL2_Config+0x15c>)
 8006d76:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006d7a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8006d7c:	e005      	b.n	8006d8a <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8006d7e:	4b12      	ldr	r3, [pc, #72]	@ (8006dc8 <RCCEx_PLL2_Config+0x15c>)
 8006d80:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006d82:	4a11      	ldr	r2, [pc, #68]	@ (8006dc8 <RCCEx_PLL2_Config+0x15c>)
 8006d84:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8006d88:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8006d8a:	4b0f      	ldr	r3, [pc, #60]	@ (8006dc8 <RCCEx_PLL2_Config+0x15c>)
 8006d8c:	681b      	ldr	r3, [r3, #0]
 8006d8e:	4a0e      	ldr	r2, [pc, #56]	@ (8006dc8 <RCCEx_PLL2_Config+0x15c>)
 8006d90:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8006d94:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006d96:	f7fc f8ef 	bl	8002f78 <HAL_GetTick>
 8006d9a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8006d9c:	e008      	b.n	8006db0 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8006d9e:	f7fc f8eb 	bl	8002f78 <HAL_GetTick>
 8006da2:	4602      	mov	r2, r0
 8006da4:	68bb      	ldr	r3, [r7, #8]
 8006da6:	1ad3      	subs	r3, r2, r3
 8006da8:	2b02      	cmp	r3, #2
 8006daa:	d901      	bls.n	8006db0 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8006dac:	2303      	movs	r3, #3
 8006dae:	e006      	b.n	8006dbe <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8006db0:	4b05      	ldr	r3, [pc, #20]	@ (8006dc8 <RCCEx_PLL2_Config+0x15c>)
 8006db2:	681b      	ldr	r3, [r3, #0]
 8006db4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006db8:	2b00      	cmp	r3, #0
 8006dba:	d0f0      	beq.n	8006d9e <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8006dbc:	7bfb      	ldrb	r3, [r7, #15]
}
 8006dbe:	4618      	mov	r0, r3
 8006dc0:	3710      	adds	r7, #16
 8006dc2:	46bd      	mov	sp, r7
 8006dc4:	bd80      	pop	{r7, pc}
 8006dc6:	bf00      	nop
 8006dc8:	58024400 	.word	0x58024400
 8006dcc:	ffff0007 	.word	0xffff0007

08006dd0 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8006dd0:	b580      	push	{r7, lr}
 8006dd2:	b084      	sub	sp, #16
 8006dd4:	af00      	add	r7, sp, #0
 8006dd6:	6078      	str	r0, [r7, #4]
 8006dd8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006dda:	2300      	movs	r3, #0
 8006ddc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8006dde:	4b53      	ldr	r3, [pc, #332]	@ (8006f2c <RCCEx_PLL3_Config+0x15c>)
 8006de0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006de2:	f003 0303 	and.w	r3, r3, #3
 8006de6:	2b03      	cmp	r3, #3
 8006de8:	d101      	bne.n	8006dee <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8006dea:	2301      	movs	r3, #1
 8006dec:	e099      	b.n	8006f22 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8006dee:	4b4f      	ldr	r3, [pc, #316]	@ (8006f2c <RCCEx_PLL3_Config+0x15c>)
 8006df0:	681b      	ldr	r3, [r3, #0]
 8006df2:	4a4e      	ldr	r2, [pc, #312]	@ (8006f2c <RCCEx_PLL3_Config+0x15c>)
 8006df4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006df8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006dfa:	f7fc f8bd 	bl	8002f78 <HAL_GetTick>
 8006dfe:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8006e00:	e008      	b.n	8006e14 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8006e02:	f7fc f8b9 	bl	8002f78 <HAL_GetTick>
 8006e06:	4602      	mov	r2, r0
 8006e08:	68bb      	ldr	r3, [r7, #8]
 8006e0a:	1ad3      	subs	r3, r2, r3
 8006e0c:	2b02      	cmp	r3, #2
 8006e0e:	d901      	bls.n	8006e14 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8006e10:	2303      	movs	r3, #3
 8006e12:	e086      	b.n	8006f22 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8006e14:	4b45      	ldr	r3, [pc, #276]	@ (8006f2c <RCCEx_PLL3_Config+0x15c>)
 8006e16:	681b      	ldr	r3, [r3, #0]
 8006e18:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006e1c:	2b00      	cmp	r3, #0
 8006e1e:	d1f0      	bne.n	8006e02 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8006e20:	4b42      	ldr	r3, [pc, #264]	@ (8006f2c <RCCEx_PLL3_Config+0x15c>)
 8006e22:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006e24:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	681b      	ldr	r3, [r3, #0]
 8006e2c:	051b      	lsls	r3, r3, #20
 8006e2e:	493f      	ldr	r1, [pc, #252]	@ (8006f2c <RCCEx_PLL3_Config+0x15c>)
 8006e30:	4313      	orrs	r3, r2
 8006e32:	628b      	str	r3, [r1, #40]	@ 0x28
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	685b      	ldr	r3, [r3, #4]
 8006e38:	3b01      	subs	r3, #1
 8006e3a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	689b      	ldr	r3, [r3, #8]
 8006e42:	3b01      	subs	r3, #1
 8006e44:	025b      	lsls	r3, r3, #9
 8006e46:	b29b      	uxth	r3, r3
 8006e48:	431a      	orrs	r2, r3
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	68db      	ldr	r3, [r3, #12]
 8006e4e:	3b01      	subs	r3, #1
 8006e50:	041b      	lsls	r3, r3, #16
 8006e52:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8006e56:	431a      	orrs	r2, r3
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	691b      	ldr	r3, [r3, #16]
 8006e5c:	3b01      	subs	r3, #1
 8006e5e:	061b      	lsls	r3, r3, #24
 8006e60:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8006e64:	4931      	ldr	r1, [pc, #196]	@ (8006f2c <RCCEx_PLL3_Config+0x15c>)
 8006e66:	4313      	orrs	r3, r2
 8006e68:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8006e6a:	4b30      	ldr	r3, [pc, #192]	@ (8006f2c <RCCEx_PLL3_Config+0x15c>)
 8006e6c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006e6e:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	695b      	ldr	r3, [r3, #20]
 8006e76:	492d      	ldr	r1, [pc, #180]	@ (8006f2c <RCCEx_PLL3_Config+0x15c>)
 8006e78:	4313      	orrs	r3, r2
 8006e7a:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8006e7c:	4b2b      	ldr	r3, [pc, #172]	@ (8006f2c <RCCEx_PLL3_Config+0x15c>)
 8006e7e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006e80:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	699b      	ldr	r3, [r3, #24]
 8006e88:	4928      	ldr	r1, [pc, #160]	@ (8006f2c <RCCEx_PLL3_Config+0x15c>)
 8006e8a:	4313      	orrs	r3, r2
 8006e8c:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8006e8e:	4b27      	ldr	r3, [pc, #156]	@ (8006f2c <RCCEx_PLL3_Config+0x15c>)
 8006e90:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006e92:	4a26      	ldr	r2, [pc, #152]	@ (8006f2c <RCCEx_PLL3_Config+0x15c>)
 8006e94:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006e98:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8006e9a:	4b24      	ldr	r3, [pc, #144]	@ (8006f2c <RCCEx_PLL3_Config+0x15c>)
 8006e9c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006e9e:	4b24      	ldr	r3, [pc, #144]	@ (8006f30 <RCCEx_PLL3_Config+0x160>)
 8006ea0:	4013      	ands	r3, r2
 8006ea2:	687a      	ldr	r2, [r7, #4]
 8006ea4:	69d2      	ldr	r2, [r2, #28]
 8006ea6:	00d2      	lsls	r2, r2, #3
 8006ea8:	4920      	ldr	r1, [pc, #128]	@ (8006f2c <RCCEx_PLL3_Config+0x15c>)
 8006eaa:	4313      	orrs	r3, r2
 8006eac:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8006eae:	4b1f      	ldr	r3, [pc, #124]	@ (8006f2c <RCCEx_PLL3_Config+0x15c>)
 8006eb0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006eb2:	4a1e      	ldr	r2, [pc, #120]	@ (8006f2c <RCCEx_PLL3_Config+0x15c>)
 8006eb4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006eb8:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8006eba:	683b      	ldr	r3, [r7, #0]
 8006ebc:	2b00      	cmp	r3, #0
 8006ebe:	d106      	bne.n	8006ece <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8006ec0:	4b1a      	ldr	r3, [pc, #104]	@ (8006f2c <RCCEx_PLL3_Config+0x15c>)
 8006ec2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006ec4:	4a19      	ldr	r2, [pc, #100]	@ (8006f2c <RCCEx_PLL3_Config+0x15c>)
 8006ec6:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8006eca:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8006ecc:	e00f      	b.n	8006eee <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8006ece:	683b      	ldr	r3, [r7, #0]
 8006ed0:	2b01      	cmp	r3, #1
 8006ed2:	d106      	bne.n	8006ee2 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8006ed4:	4b15      	ldr	r3, [pc, #84]	@ (8006f2c <RCCEx_PLL3_Config+0x15c>)
 8006ed6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006ed8:	4a14      	ldr	r2, [pc, #80]	@ (8006f2c <RCCEx_PLL3_Config+0x15c>)
 8006eda:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8006ede:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8006ee0:	e005      	b.n	8006eee <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8006ee2:	4b12      	ldr	r3, [pc, #72]	@ (8006f2c <RCCEx_PLL3_Config+0x15c>)
 8006ee4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006ee6:	4a11      	ldr	r2, [pc, #68]	@ (8006f2c <RCCEx_PLL3_Config+0x15c>)
 8006ee8:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8006eec:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8006eee:	4b0f      	ldr	r3, [pc, #60]	@ (8006f2c <RCCEx_PLL3_Config+0x15c>)
 8006ef0:	681b      	ldr	r3, [r3, #0]
 8006ef2:	4a0e      	ldr	r2, [pc, #56]	@ (8006f2c <RCCEx_PLL3_Config+0x15c>)
 8006ef4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006ef8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006efa:	f7fc f83d 	bl	8002f78 <HAL_GetTick>
 8006efe:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8006f00:	e008      	b.n	8006f14 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8006f02:	f7fc f839 	bl	8002f78 <HAL_GetTick>
 8006f06:	4602      	mov	r2, r0
 8006f08:	68bb      	ldr	r3, [r7, #8]
 8006f0a:	1ad3      	subs	r3, r2, r3
 8006f0c:	2b02      	cmp	r3, #2
 8006f0e:	d901      	bls.n	8006f14 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8006f10:	2303      	movs	r3, #3
 8006f12:	e006      	b.n	8006f22 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8006f14:	4b05      	ldr	r3, [pc, #20]	@ (8006f2c <RCCEx_PLL3_Config+0x15c>)
 8006f16:	681b      	ldr	r3, [r3, #0]
 8006f18:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006f1c:	2b00      	cmp	r3, #0
 8006f1e:	d0f0      	beq.n	8006f02 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8006f20:	7bfb      	ldrb	r3, [r7, #15]
}
 8006f22:	4618      	mov	r0, r3
 8006f24:	3710      	adds	r7, #16
 8006f26:	46bd      	mov	sp, r7
 8006f28:	bd80      	pop	{r7, pc}
 8006f2a:	bf00      	nop
 8006f2c:	58024400 	.word	0x58024400
 8006f30:	ffff0007 	.word	0xffff0007

08006f34 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006f34:	b580      	push	{r7, lr}
 8006f36:	b082      	sub	sp, #8
 8006f38:	af00      	add	r7, sp, #0
 8006f3a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	2b00      	cmp	r3, #0
 8006f40:	d101      	bne.n	8006f46 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006f42:	2301      	movs	r3, #1
 8006f44:	e042      	b.n	8006fcc <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006f4c:	2b00      	cmp	r3, #0
 8006f4e:	d106      	bne.n	8006f5e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	2200      	movs	r2, #0
 8006f54:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006f58:	6878      	ldr	r0, [r7, #4]
 8006f5a:	f7fb fd0f 	bl	800297c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	2224      	movs	r2, #36	@ 0x24
 8006f62:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	681b      	ldr	r3, [r3, #0]
 8006f6a:	681a      	ldr	r2, [r3, #0]
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	681b      	ldr	r3, [r3, #0]
 8006f70:	f022 0201 	bic.w	r2, r2, #1
 8006f74:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006f7a:	2b00      	cmp	r3, #0
 8006f7c:	d002      	beq.n	8006f84 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8006f7e:	6878      	ldr	r0, [r7, #4]
 8006f80:	f000 fee6 	bl	8007d50 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006f84:	6878      	ldr	r0, [r7, #4]
 8006f86:	f000 f97b 	bl	8007280 <UART_SetConfig>
 8006f8a:	4603      	mov	r3, r0
 8006f8c:	2b01      	cmp	r3, #1
 8006f8e:	d101      	bne.n	8006f94 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8006f90:	2301      	movs	r3, #1
 8006f92:	e01b      	b.n	8006fcc <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	681b      	ldr	r3, [r3, #0]
 8006f98:	685a      	ldr	r2, [r3, #4]
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	681b      	ldr	r3, [r3, #0]
 8006f9e:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8006fa2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	681b      	ldr	r3, [r3, #0]
 8006fa8:	689a      	ldr	r2, [r3, #8]
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	681b      	ldr	r3, [r3, #0]
 8006fae:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8006fb2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	681b      	ldr	r3, [r3, #0]
 8006fb8:	681a      	ldr	r2, [r3, #0]
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	681b      	ldr	r3, [r3, #0]
 8006fbe:	f042 0201 	orr.w	r2, r2, #1
 8006fc2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006fc4:	6878      	ldr	r0, [r7, #4]
 8006fc6:	f000 ff65 	bl	8007e94 <UART_CheckIdleState>
 8006fca:	4603      	mov	r3, r0
}
 8006fcc:	4618      	mov	r0, r3
 8006fce:	3708      	adds	r7, #8
 8006fd0:	46bd      	mov	sp, r7
 8006fd2:	bd80      	pop	{r7, pc}

08006fd4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006fd4:	b580      	push	{r7, lr}
 8006fd6:	b08a      	sub	sp, #40	@ 0x28
 8006fd8:	af02      	add	r7, sp, #8
 8006fda:	60f8      	str	r0, [r7, #12]
 8006fdc:	60b9      	str	r1, [r7, #8]
 8006fde:	603b      	str	r3, [r7, #0]
 8006fe0:	4613      	mov	r3, r2
 8006fe2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006fe4:	68fb      	ldr	r3, [r7, #12]
 8006fe6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006fea:	2b20      	cmp	r3, #32
 8006fec:	d17b      	bne.n	80070e6 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8006fee:	68bb      	ldr	r3, [r7, #8]
 8006ff0:	2b00      	cmp	r3, #0
 8006ff2:	d002      	beq.n	8006ffa <HAL_UART_Transmit+0x26>
 8006ff4:	88fb      	ldrh	r3, [r7, #6]
 8006ff6:	2b00      	cmp	r3, #0
 8006ff8:	d101      	bne.n	8006ffe <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8006ffa:	2301      	movs	r3, #1
 8006ffc:	e074      	b.n	80070e8 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006ffe:	68fb      	ldr	r3, [r7, #12]
 8007000:	2200      	movs	r2, #0
 8007002:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007006:	68fb      	ldr	r3, [r7, #12]
 8007008:	2221      	movs	r2, #33	@ 0x21
 800700a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800700e:	f7fb ffb3 	bl	8002f78 <HAL_GetTick>
 8007012:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8007014:	68fb      	ldr	r3, [r7, #12]
 8007016:	88fa      	ldrh	r2, [r7, #6]
 8007018:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 800701c:	68fb      	ldr	r3, [r7, #12]
 800701e:	88fa      	ldrh	r2, [r7, #6]
 8007020:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007024:	68fb      	ldr	r3, [r7, #12]
 8007026:	689b      	ldr	r3, [r3, #8]
 8007028:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800702c:	d108      	bne.n	8007040 <HAL_UART_Transmit+0x6c>
 800702e:	68fb      	ldr	r3, [r7, #12]
 8007030:	691b      	ldr	r3, [r3, #16]
 8007032:	2b00      	cmp	r3, #0
 8007034:	d104      	bne.n	8007040 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8007036:	2300      	movs	r3, #0
 8007038:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800703a:	68bb      	ldr	r3, [r7, #8]
 800703c:	61bb      	str	r3, [r7, #24]
 800703e:	e003      	b.n	8007048 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8007040:	68bb      	ldr	r3, [r7, #8]
 8007042:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007044:	2300      	movs	r3, #0
 8007046:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8007048:	e030      	b.n	80070ac <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800704a:	683b      	ldr	r3, [r7, #0]
 800704c:	9300      	str	r3, [sp, #0]
 800704e:	697b      	ldr	r3, [r7, #20]
 8007050:	2200      	movs	r2, #0
 8007052:	2180      	movs	r1, #128	@ 0x80
 8007054:	68f8      	ldr	r0, [r7, #12]
 8007056:	f000 ffc7 	bl	8007fe8 <UART_WaitOnFlagUntilTimeout>
 800705a:	4603      	mov	r3, r0
 800705c:	2b00      	cmp	r3, #0
 800705e:	d005      	beq.n	800706c <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8007060:	68fb      	ldr	r3, [r7, #12]
 8007062:	2220      	movs	r2, #32
 8007064:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 8007068:	2303      	movs	r3, #3
 800706a:	e03d      	b.n	80070e8 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 800706c:	69fb      	ldr	r3, [r7, #28]
 800706e:	2b00      	cmp	r3, #0
 8007070:	d10b      	bne.n	800708a <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8007072:	69bb      	ldr	r3, [r7, #24]
 8007074:	881b      	ldrh	r3, [r3, #0]
 8007076:	461a      	mov	r2, r3
 8007078:	68fb      	ldr	r3, [r7, #12]
 800707a:	681b      	ldr	r3, [r3, #0]
 800707c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007080:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8007082:	69bb      	ldr	r3, [r7, #24]
 8007084:	3302      	adds	r3, #2
 8007086:	61bb      	str	r3, [r7, #24]
 8007088:	e007      	b.n	800709a <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800708a:	69fb      	ldr	r3, [r7, #28]
 800708c:	781a      	ldrb	r2, [r3, #0]
 800708e:	68fb      	ldr	r3, [r7, #12]
 8007090:	681b      	ldr	r3, [r3, #0]
 8007092:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8007094:	69fb      	ldr	r3, [r7, #28]
 8007096:	3301      	adds	r3, #1
 8007098:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800709a:	68fb      	ldr	r3, [r7, #12]
 800709c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 80070a0:	b29b      	uxth	r3, r3
 80070a2:	3b01      	subs	r3, #1
 80070a4:	b29a      	uxth	r2, r3
 80070a6:	68fb      	ldr	r3, [r7, #12]
 80070a8:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 80070ac:	68fb      	ldr	r3, [r7, #12]
 80070ae:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 80070b2:	b29b      	uxth	r3, r3
 80070b4:	2b00      	cmp	r3, #0
 80070b6:	d1c8      	bne.n	800704a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80070b8:	683b      	ldr	r3, [r7, #0]
 80070ba:	9300      	str	r3, [sp, #0]
 80070bc:	697b      	ldr	r3, [r7, #20]
 80070be:	2200      	movs	r2, #0
 80070c0:	2140      	movs	r1, #64	@ 0x40
 80070c2:	68f8      	ldr	r0, [r7, #12]
 80070c4:	f000 ff90 	bl	8007fe8 <UART_WaitOnFlagUntilTimeout>
 80070c8:	4603      	mov	r3, r0
 80070ca:	2b00      	cmp	r3, #0
 80070cc:	d005      	beq.n	80070da <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 80070ce:	68fb      	ldr	r3, [r7, #12]
 80070d0:	2220      	movs	r2, #32
 80070d2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 80070d6:	2303      	movs	r3, #3
 80070d8:	e006      	b.n	80070e8 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80070da:	68fb      	ldr	r3, [r7, #12]
 80070dc:	2220      	movs	r2, #32
 80070de:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 80070e2:	2300      	movs	r3, #0
 80070e4:	e000      	b.n	80070e8 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 80070e6:	2302      	movs	r3, #2
  }
}
 80070e8:	4618      	mov	r0, r3
 80070ea:	3720      	adds	r7, #32
 80070ec:	46bd      	mov	sp, r7
 80070ee:	bd80      	pop	{r7, pc}

080070f0 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80070f0:	b580      	push	{r7, lr}
 80070f2:	b08a      	sub	sp, #40	@ 0x28
 80070f4:	af02      	add	r7, sp, #8
 80070f6:	60f8      	str	r0, [r7, #12]
 80070f8:	60b9      	str	r1, [r7, #8]
 80070fa:	603b      	str	r3, [r7, #0]
 80070fc:	4613      	mov	r3, r2
 80070fe:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8007100:	68fb      	ldr	r3, [r7, #12]
 8007102:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007106:	2b20      	cmp	r3, #32
 8007108:	f040 80b5 	bne.w	8007276 <HAL_UART_Receive+0x186>
  {
    if ((pData == NULL) || (Size == 0U))
 800710c:	68bb      	ldr	r3, [r7, #8]
 800710e:	2b00      	cmp	r3, #0
 8007110:	d002      	beq.n	8007118 <HAL_UART_Receive+0x28>
 8007112:	88fb      	ldrh	r3, [r7, #6]
 8007114:	2b00      	cmp	r3, #0
 8007116:	d101      	bne.n	800711c <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 8007118:	2301      	movs	r3, #1
 800711a:	e0ad      	b.n	8007278 <HAL_UART_Receive+0x188>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800711c:	68fb      	ldr	r3, [r7, #12]
 800711e:	2200      	movs	r2, #0
 8007120:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007124:	68fb      	ldr	r3, [r7, #12]
 8007126:	2222      	movs	r2, #34	@ 0x22
 8007128:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800712c:	68fb      	ldr	r3, [r7, #12]
 800712e:	2200      	movs	r2, #0
 8007130:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007132:	f7fb ff21 	bl	8002f78 <HAL_GetTick>
 8007136:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8007138:	68fb      	ldr	r3, [r7, #12]
 800713a:	88fa      	ldrh	r2, [r7, #6]
 800713c:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
    huart->RxXferCount = Size;
 8007140:	68fb      	ldr	r3, [r7, #12]
 8007142:	88fa      	ldrh	r2, [r7, #6]
 8007144:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8007148:	68fb      	ldr	r3, [r7, #12]
 800714a:	689b      	ldr	r3, [r3, #8]
 800714c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007150:	d10e      	bne.n	8007170 <HAL_UART_Receive+0x80>
 8007152:	68fb      	ldr	r3, [r7, #12]
 8007154:	691b      	ldr	r3, [r3, #16]
 8007156:	2b00      	cmp	r3, #0
 8007158:	d105      	bne.n	8007166 <HAL_UART_Receive+0x76>
 800715a:	68fb      	ldr	r3, [r7, #12]
 800715c:	f240 12ff 	movw	r2, #511	@ 0x1ff
 8007160:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8007164:	e02d      	b.n	80071c2 <HAL_UART_Receive+0xd2>
 8007166:	68fb      	ldr	r3, [r7, #12]
 8007168:	22ff      	movs	r2, #255	@ 0xff
 800716a:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800716e:	e028      	b.n	80071c2 <HAL_UART_Receive+0xd2>
 8007170:	68fb      	ldr	r3, [r7, #12]
 8007172:	689b      	ldr	r3, [r3, #8]
 8007174:	2b00      	cmp	r3, #0
 8007176:	d10d      	bne.n	8007194 <HAL_UART_Receive+0xa4>
 8007178:	68fb      	ldr	r3, [r7, #12]
 800717a:	691b      	ldr	r3, [r3, #16]
 800717c:	2b00      	cmp	r3, #0
 800717e:	d104      	bne.n	800718a <HAL_UART_Receive+0x9a>
 8007180:	68fb      	ldr	r3, [r7, #12]
 8007182:	22ff      	movs	r2, #255	@ 0xff
 8007184:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8007188:	e01b      	b.n	80071c2 <HAL_UART_Receive+0xd2>
 800718a:	68fb      	ldr	r3, [r7, #12]
 800718c:	227f      	movs	r2, #127	@ 0x7f
 800718e:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8007192:	e016      	b.n	80071c2 <HAL_UART_Receive+0xd2>
 8007194:	68fb      	ldr	r3, [r7, #12]
 8007196:	689b      	ldr	r3, [r3, #8]
 8007198:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800719c:	d10d      	bne.n	80071ba <HAL_UART_Receive+0xca>
 800719e:	68fb      	ldr	r3, [r7, #12]
 80071a0:	691b      	ldr	r3, [r3, #16]
 80071a2:	2b00      	cmp	r3, #0
 80071a4:	d104      	bne.n	80071b0 <HAL_UART_Receive+0xc0>
 80071a6:	68fb      	ldr	r3, [r7, #12]
 80071a8:	227f      	movs	r2, #127	@ 0x7f
 80071aa:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80071ae:	e008      	b.n	80071c2 <HAL_UART_Receive+0xd2>
 80071b0:	68fb      	ldr	r3, [r7, #12]
 80071b2:	223f      	movs	r2, #63	@ 0x3f
 80071b4:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80071b8:	e003      	b.n	80071c2 <HAL_UART_Receive+0xd2>
 80071ba:	68fb      	ldr	r3, [r7, #12]
 80071bc:	2200      	movs	r2, #0
 80071be:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
    uhMask = huart->Mask;
 80071c2:	68fb      	ldr	r3, [r7, #12]
 80071c4:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 80071c8:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80071ca:	68fb      	ldr	r3, [r7, #12]
 80071cc:	689b      	ldr	r3, [r3, #8]
 80071ce:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80071d2:	d108      	bne.n	80071e6 <HAL_UART_Receive+0xf6>
 80071d4:	68fb      	ldr	r3, [r7, #12]
 80071d6:	691b      	ldr	r3, [r3, #16]
 80071d8:	2b00      	cmp	r3, #0
 80071da:	d104      	bne.n	80071e6 <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 80071dc:	2300      	movs	r3, #0
 80071de:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80071e0:	68bb      	ldr	r3, [r7, #8]
 80071e2:	61bb      	str	r3, [r7, #24]
 80071e4:	e003      	b.n	80071ee <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 80071e6:	68bb      	ldr	r3, [r7, #8]
 80071e8:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80071ea:	2300      	movs	r3, #0
 80071ec:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 80071ee:	e036      	b.n	800725e <HAL_UART_Receive+0x16e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80071f0:	683b      	ldr	r3, [r7, #0]
 80071f2:	9300      	str	r3, [sp, #0]
 80071f4:	697b      	ldr	r3, [r7, #20]
 80071f6:	2200      	movs	r2, #0
 80071f8:	2120      	movs	r1, #32
 80071fa:	68f8      	ldr	r0, [r7, #12]
 80071fc:	f000 fef4 	bl	8007fe8 <UART_WaitOnFlagUntilTimeout>
 8007200:	4603      	mov	r3, r0
 8007202:	2b00      	cmp	r3, #0
 8007204:	d005      	beq.n	8007212 <HAL_UART_Receive+0x122>
      {
        huart->RxState = HAL_UART_STATE_READY;
 8007206:	68fb      	ldr	r3, [r7, #12]
 8007208:	2220      	movs	r2, #32
 800720a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        return HAL_TIMEOUT;
 800720e:	2303      	movs	r3, #3
 8007210:	e032      	b.n	8007278 <HAL_UART_Receive+0x188>
      }
      if (pdata8bits == NULL)
 8007212:	69fb      	ldr	r3, [r7, #28]
 8007214:	2b00      	cmp	r3, #0
 8007216:	d10c      	bne.n	8007232 <HAL_UART_Receive+0x142>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8007218:	68fb      	ldr	r3, [r7, #12]
 800721a:	681b      	ldr	r3, [r3, #0]
 800721c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800721e:	b29a      	uxth	r2, r3
 8007220:	8a7b      	ldrh	r3, [r7, #18]
 8007222:	4013      	ands	r3, r2
 8007224:	b29a      	uxth	r2, r3
 8007226:	69bb      	ldr	r3, [r7, #24]
 8007228:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 800722a:	69bb      	ldr	r3, [r7, #24]
 800722c:	3302      	adds	r3, #2
 800722e:	61bb      	str	r3, [r7, #24]
 8007230:	e00c      	b.n	800724c <HAL_UART_Receive+0x15c>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8007232:	68fb      	ldr	r3, [r7, #12]
 8007234:	681b      	ldr	r3, [r3, #0]
 8007236:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007238:	b2da      	uxtb	r2, r3
 800723a:	8a7b      	ldrh	r3, [r7, #18]
 800723c:	b2db      	uxtb	r3, r3
 800723e:	4013      	ands	r3, r2
 8007240:	b2da      	uxtb	r2, r3
 8007242:	69fb      	ldr	r3, [r7, #28]
 8007244:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8007246:	69fb      	ldr	r3, [r7, #28]
 8007248:	3301      	adds	r3, #1
 800724a:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 800724c:	68fb      	ldr	r3, [r7, #12]
 800724e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8007252:	b29b      	uxth	r3, r3
 8007254:	3b01      	subs	r3, #1
 8007256:	b29a      	uxth	r2, r3
 8007258:	68fb      	ldr	r3, [r7, #12]
 800725a:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    while (huart->RxXferCount > 0U)
 800725e:	68fb      	ldr	r3, [r7, #12]
 8007260:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8007264:	b29b      	uxth	r3, r3
 8007266:	2b00      	cmp	r3, #0
 8007268:	d1c2      	bne.n	80071f0 <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800726a:	68fb      	ldr	r3, [r7, #12]
 800726c:	2220      	movs	r2, #32
 800726e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

    return HAL_OK;
 8007272:	2300      	movs	r3, #0
 8007274:	e000      	b.n	8007278 <HAL_UART_Receive+0x188>
  }
  else
  {
    return HAL_BUSY;
 8007276:	2302      	movs	r3, #2
  }
}
 8007278:	4618      	mov	r0, r3
 800727a:	3720      	adds	r7, #32
 800727c:	46bd      	mov	sp, r7
 800727e:	bd80      	pop	{r7, pc}

08007280 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007280:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007284:	b092      	sub	sp, #72	@ 0x48
 8007286:	af00      	add	r7, sp, #0
 8007288:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800728a:	2300      	movs	r3, #0
 800728c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007290:	697b      	ldr	r3, [r7, #20]
 8007292:	689a      	ldr	r2, [r3, #8]
 8007294:	697b      	ldr	r3, [r7, #20]
 8007296:	691b      	ldr	r3, [r3, #16]
 8007298:	431a      	orrs	r2, r3
 800729a:	697b      	ldr	r3, [r7, #20]
 800729c:	695b      	ldr	r3, [r3, #20]
 800729e:	431a      	orrs	r2, r3
 80072a0:	697b      	ldr	r3, [r7, #20]
 80072a2:	69db      	ldr	r3, [r3, #28]
 80072a4:	4313      	orrs	r3, r2
 80072a6:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80072a8:	697b      	ldr	r3, [r7, #20]
 80072aa:	681b      	ldr	r3, [r3, #0]
 80072ac:	681a      	ldr	r2, [r3, #0]
 80072ae:	4bbe      	ldr	r3, [pc, #760]	@ (80075a8 <UART_SetConfig+0x328>)
 80072b0:	4013      	ands	r3, r2
 80072b2:	697a      	ldr	r2, [r7, #20]
 80072b4:	6812      	ldr	r2, [r2, #0]
 80072b6:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80072b8:	430b      	orrs	r3, r1
 80072ba:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80072bc:	697b      	ldr	r3, [r7, #20]
 80072be:	681b      	ldr	r3, [r3, #0]
 80072c0:	685b      	ldr	r3, [r3, #4]
 80072c2:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80072c6:	697b      	ldr	r3, [r7, #20]
 80072c8:	68da      	ldr	r2, [r3, #12]
 80072ca:	697b      	ldr	r3, [r7, #20]
 80072cc:	681b      	ldr	r3, [r3, #0]
 80072ce:	430a      	orrs	r2, r1
 80072d0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80072d2:	697b      	ldr	r3, [r7, #20]
 80072d4:	699b      	ldr	r3, [r3, #24]
 80072d6:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80072d8:	697b      	ldr	r3, [r7, #20]
 80072da:	681b      	ldr	r3, [r3, #0]
 80072dc:	4ab3      	ldr	r2, [pc, #716]	@ (80075ac <UART_SetConfig+0x32c>)
 80072de:	4293      	cmp	r3, r2
 80072e0:	d004      	beq.n	80072ec <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80072e2:	697b      	ldr	r3, [r7, #20]
 80072e4:	6a1b      	ldr	r3, [r3, #32]
 80072e6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80072e8:	4313      	orrs	r3, r2
 80072ea:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80072ec:	697b      	ldr	r3, [r7, #20]
 80072ee:	681b      	ldr	r3, [r3, #0]
 80072f0:	689a      	ldr	r2, [r3, #8]
 80072f2:	4baf      	ldr	r3, [pc, #700]	@ (80075b0 <UART_SetConfig+0x330>)
 80072f4:	4013      	ands	r3, r2
 80072f6:	697a      	ldr	r2, [r7, #20]
 80072f8:	6812      	ldr	r2, [r2, #0]
 80072fa:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80072fc:	430b      	orrs	r3, r1
 80072fe:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8007300:	697b      	ldr	r3, [r7, #20]
 8007302:	681b      	ldr	r3, [r3, #0]
 8007304:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007306:	f023 010f 	bic.w	r1, r3, #15
 800730a:	697b      	ldr	r3, [r7, #20]
 800730c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800730e:	697b      	ldr	r3, [r7, #20]
 8007310:	681b      	ldr	r3, [r3, #0]
 8007312:	430a      	orrs	r2, r1
 8007314:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007316:	697b      	ldr	r3, [r7, #20]
 8007318:	681b      	ldr	r3, [r3, #0]
 800731a:	4aa6      	ldr	r2, [pc, #664]	@ (80075b4 <UART_SetConfig+0x334>)
 800731c:	4293      	cmp	r3, r2
 800731e:	d177      	bne.n	8007410 <UART_SetConfig+0x190>
 8007320:	4ba5      	ldr	r3, [pc, #660]	@ (80075b8 <UART_SetConfig+0x338>)
 8007322:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007324:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8007328:	2b28      	cmp	r3, #40	@ 0x28
 800732a:	d86d      	bhi.n	8007408 <UART_SetConfig+0x188>
 800732c:	a201      	add	r2, pc, #4	@ (adr r2, 8007334 <UART_SetConfig+0xb4>)
 800732e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007332:	bf00      	nop
 8007334:	080073d9 	.word	0x080073d9
 8007338:	08007409 	.word	0x08007409
 800733c:	08007409 	.word	0x08007409
 8007340:	08007409 	.word	0x08007409
 8007344:	08007409 	.word	0x08007409
 8007348:	08007409 	.word	0x08007409
 800734c:	08007409 	.word	0x08007409
 8007350:	08007409 	.word	0x08007409
 8007354:	080073e1 	.word	0x080073e1
 8007358:	08007409 	.word	0x08007409
 800735c:	08007409 	.word	0x08007409
 8007360:	08007409 	.word	0x08007409
 8007364:	08007409 	.word	0x08007409
 8007368:	08007409 	.word	0x08007409
 800736c:	08007409 	.word	0x08007409
 8007370:	08007409 	.word	0x08007409
 8007374:	080073e9 	.word	0x080073e9
 8007378:	08007409 	.word	0x08007409
 800737c:	08007409 	.word	0x08007409
 8007380:	08007409 	.word	0x08007409
 8007384:	08007409 	.word	0x08007409
 8007388:	08007409 	.word	0x08007409
 800738c:	08007409 	.word	0x08007409
 8007390:	08007409 	.word	0x08007409
 8007394:	080073f1 	.word	0x080073f1
 8007398:	08007409 	.word	0x08007409
 800739c:	08007409 	.word	0x08007409
 80073a0:	08007409 	.word	0x08007409
 80073a4:	08007409 	.word	0x08007409
 80073a8:	08007409 	.word	0x08007409
 80073ac:	08007409 	.word	0x08007409
 80073b0:	08007409 	.word	0x08007409
 80073b4:	080073f9 	.word	0x080073f9
 80073b8:	08007409 	.word	0x08007409
 80073bc:	08007409 	.word	0x08007409
 80073c0:	08007409 	.word	0x08007409
 80073c4:	08007409 	.word	0x08007409
 80073c8:	08007409 	.word	0x08007409
 80073cc:	08007409 	.word	0x08007409
 80073d0:	08007409 	.word	0x08007409
 80073d4:	08007401 	.word	0x08007401
 80073d8:	2301      	movs	r3, #1
 80073da:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80073de:	e222      	b.n	8007826 <UART_SetConfig+0x5a6>
 80073e0:	2304      	movs	r3, #4
 80073e2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80073e6:	e21e      	b.n	8007826 <UART_SetConfig+0x5a6>
 80073e8:	2308      	movs	r3, #8
 80073ea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80073ee:	e21a      	b.n	8007826 <UART_SetConfig+0x5a6>
 80073f0:	2310      	movs	r3, #16
 80073f2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80073f6:	e216      	b.n	8007826 <UART_SetConfig+0x5a6>
 80073f8:	2320      	movs	r3, #32
 80073fa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80073fe:	e212      	b.n	8007826 <UART_SetConfig+0x5a6>
 8007400:	2340      	movs	r3, #64	@ 0x40
 8007402:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007406:	e20e      	b.n	8007826 <UART_SetConfig+0x5a6>
 8007408:	2380      	movs	r3, #128	@ 0x80
 800740a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800740e:	e20a      	b.n	8007826 <UART_SetConfig+0x5a6>
 8007410:	697b      	ldr	r3, [r7, #20]
 8007412:	681b      	ldr	r3, [r3, #0]
 8007414:	4a69      	ldr	r2, [pc, #420]	@ (80075bc <UART_SetConfig+0x33c>)
 8007416:	4293      	cmp	r3, r2
 8007418:	d130      	bne.n	800747c <UART_SetConfig+0x1fc>
 800741a:	4b67      	ldr	r3, [pc, #412]	@ (80075b8 <UART_SetConfig+0x338>)
 800741c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800741e:	f003 0307 	and.w	r3, r3, #7
 8007422:	2b05      	cmp	r3, #5
 8007424:	d826      	bhi.n	8007474 <UART_SetConfig+0x1f4>
 8007426:	a201      	add	r2, pc, #4	@ (adr r2, 800742c <UART_SetConfig+0x1ac>)
 8007428:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800742c:	08007445 	.word	0x08007445
 8007430:	0800744d 	.word	0x0800744d
 8007434:	08007455 	.word	0x08007455
 8007438:	0800745d 	.word	0x0800745d
 800743c:	08007465 	.word	0x08007465
 8007440:	0800746d 	.word	0x0800746d
 8007444:	2300      	movs	r3, #0
 8007446:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800744a:	e1ec      	b.n	8007826 <UART_SetConfig+0x5a6>
 800744c:	2304      	movs	r3, #4
 800744e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007452:	e1e8      	b.n	8007826 <UART_SetConfig+0x5a6>
 8007454:	2308      	movs	r3, #8
 8007456:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800745a:	e1e4      	b.n	8007826 <UART_SetConfig+0x5a6>
 800745c:	2310      	movs	r3, #16
 800745e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007462:	e1e0      	b.n	8007826 <UART_SetConfig+0x5a6>
 8007464:	2320      	movs	r3, #32
 8007466:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800746a:	e1dc      	b.n	8007826 <UART_SetConfig+0x5a6>
 800746c:	2340      	movs	r3, #64	@ 0x40
 800746e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007472:	e1d8      	b.n	8007826 <UART_SetConfig+0x5a6>
 8007474:	2380      	movs	r3, #128	@ 0x80
 8007476:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800747a:	e1d4      	b.n	8007826 <UART_SetConfig+0x5a6>
 800747c:	697b      	ldr	r3, [r7, #20]
 800747e:	681b      	ldr	r3, [r3, #0]
 8007480:	4a4f      	ldr	r2, [pc, #316]	@ (80075c0 <UART_SetConfig+0x340>)
 8007482:	4293      	cmp	r3, r2
 8007484:	d130      	bne.n	80074e8 <UART_SetConfig+0x268>
 8007486:	4b4c      	ldr	r3, [pc, #304]	@ (80075b8 <UART_SetConfig+0x338>)
 8007488:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800748a:	f003 0307 	and.w	r3, r3, #7
 800748e:	2b05      	cmp	r3, #5
 8007490:	d826      	bhi.n	80074e0 <UART_SetConfig+0x260>
 8007492:	a201      	add	r2, pc, #4	@ (adr r2, 8007498 <UART_SetConfig+0x218>)
 8007494:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007498:	080074b1 	.word	0x080074b1
 800749c:	080074b9 	.word	0x080074b9
 80074a0:	080074c1 	.word	0x080074c1
 80074a4:	080074c9 	.word	0x080074c9
 80074a8:	080074d1 	.word	0x080074d1
 80074ac:	080074d9 	.word	0x080074d9
 80074b0:	2300      	movs	r3, #0
 80074b2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80074b6:	e1b6      	b.n	8007826 <UART_SetConfig+0x5a6>
 80074b8:	2304      	movs	r3, #4
 80074ba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80074be:	e1b2      	b.n	8007826 <UART_SetConfig+0x5a6>
 80074c0:	2308      	movs	r3, #8
 80074c2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80074c6:	e1ae      	b.n	8007826 <UART_SetConfig+0x5a6>
 80074c8:	2310      	movs	r3, #16
 80074ca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80074ce:	e1aa      	b.n	8007826 <UART_SetConfig+0x5a6>
 80074d0:	2320      	movs	r3, #32
 80074d2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80074d6:	e1a6      	b.n	8007826 <UART_SetConfig+0x5a6>
 80074d8:	2340      	movs	r3, #64	@ 0x40
 80074da:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80074de:	e1a2      	b.n	8007826 <UART_SetConfig+0x5a6>
 80074e0:	2380      	movs	r3, #128	@ 0x80
 80074e2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80074e6:	e19e      	b.n	8007826 <UART_SetConfig+0x5a6>
 80074e8:	697b      	ldr	r3, [r7, #20]
 80074ea:	681b      	ldr	r3, [r3, #0]
 80074ec:	4a35      	ldr	r2, [pc, #212]	@ (80075c4 <UART_SetConfig+0x344>)
 80074ee:	4293      	cmp	r3, r2
 80074f0:	d130      	bne.n	8007554 <UART_SetConfig+0x2d4>
 80074f2:	4b31      	ldr	r3, [pc, #196]	@ (80075b8 <UART_SetConfig+0x338>)
 80074f4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80074f6:	f003 0307 	and.w	r3, r3, #7
 80074fa:	2b05      	cmp	r3, #5
 80074fc:	d826      	bhi.n	800754c <UART_SetConfig+0x2cc>
 80074fe:	a201      	add	r2, pc, #4	@ (adr r2, 8007504 <UART_SetConfig+0x284>)
 8007500:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007504:	0800751d 	.word	0x0800751d
 8007508:	08007525 	.word	0x08007525
 800750c:	0800752d 	.word	0x0800752d
 8007510:	08007535 	.word	0x08007535
 8007514:	0800753d 	.word	0x0800753d
 8007518:	08007545 	.word	0x08007545
 800751c:	2300      	movs	r3, #0
 800751e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007522:	e180      	b.n	8007826 <UART_SetConfig+0x5a6>
 8007524:	2304      	movs	r3, #4
 8007526:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800752a:	e17c      	b.n	8007826 <UART_SetConfig+0x5a6>
 800752c:	2308      	movs	r3, #8
 800752e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007532:	e178      	b.n	8007826 <UART_SetConfig+0x5a6>
 8007534:	2310      	movs	r3, #16
 8007536:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800753a:	e174      	b.n	8007826 <UART_SetConfig+0x5a6>
 800753c:	2320      	movs	r3, #32
 800753e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007542:	e170      	b.n	8007826 <UART_SetConfig+0x5a6>
 8007544:	2340      	movs	r3, #64	@ 0x40
 8007546:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800754a:	e16c      	b.n	8007826 <UART_SetConfig+0x5a6>
 800754c:	2380      	movs	r3, #128	@ 0x80
 800754e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007552:	e168      	b.n	8007826 <UART_SetConfig+0x5a6>
 8007554:	697b      	ldr	r3, [r7, #20]
 8007556:	681b      	ldr	r3, [r3, #0]
 8007558:	4a1b      	ldr	r2, [pc, #108]	@ (80075c8 <UART_SetConfig+0x348>)
 800755a:	4293      	cmp	r3, r2
 800755c:	d142      	bne.n	80075e4 <UART_SetConfig+0x364>
 800755e:	4b16      	ldr	r3, [pc, #88]	@ (80075b8 <UART_SetConfig+0x338>)
 8007560:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007562:	f003 0307 	and.w	r3, r3, #7
 8007566:	2b05      	cmp	r3, #5
 8007568:	d838      	bhi.n	80075dc <UART_SetConfig+0x35c>
 800756a:	a201      	add	r2, pc, #4	@ (adr r2, 8007570 <UART_SetConfig+0x2f0>)
 800756c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007570:	08007589 	.word	0x08007589
 8007574:	08007591 	.word	0x08007591
 8007578:	08007599 	.word	0x08007599
 800757c:	080075a1 	.word	0x080075a1
 8007580:	080075cd 	.word	0x080075cd
 8007584:	080075d5 	.word	0x080075d5
 8007588:	2300      	movs	r3, #0
 800758a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800758e:	e14a      	b.n	8007826 <UART_SetConfig+0x5a6>
 8007590:	2304      	movs	r3, #4
 8007592:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007596:	e146      	b.n	8007826 <UART_SetConfig+0x5a6>
 8007598:	2308      	movs	r3, #8
 800759a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800759e:	e142      	b.n	8007826 <UART_SetConfig+0x5a6>
 80075a0:	2310      	movs	r3, #16
 80075a2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80075a6:	e13e      	b.n	8007826 <UART_SetConfig+0x5a6>
 80075a8:	cfff69f3 	.word	0xcfff69f3
 80075ac:	58000c00 	.word	0x58000c00
 80075b0:	11fff4ff 	.word	0x11fff4ff
 80075b4:	40011000 	.word	0x40011000
 80075b8:	58024400 	.word	0x58024400
 80075bc:	40004400 	.word	0x40004400
 80075c0:	40004800 	.word	0x40004800
 80075c4:	40004c00 	.word	0x40004c00
 80075c8:	40005000 	.word	0x40005000
 80075cc:	2320      	movs	r3, #32
 80075ce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80075d2:	e128      	b.n	8007826 <UART_SetConfig+0x5a6>
 80075d4:	2340      	movs	r3, #64	@ 0x40
 80075d6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80075da:	e124      	b.n	8007826 <UART_SetConfig+0x5a6>
 80075dc:	2380      	movs	r3, #128	@ 0x80
 80075de:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80075e2:	e120      	b.n	8007826 <UART_SetConfig+0x5a6>
 80075e4:	697b      	ldr	r3, [r7, #20]
 80075e6:	681b      	ldr	r3, [r3, #0]
 80075e8:	4acb      	ldr	r2, [pc, #812]	@ (8007918 <UART_SetConfig+0x698>)
 80075ea:	4293      	cmp	r3, r2
 80075ec:	d176      	bne.n	80076dc <UART_SetConfig+0x45c>
 80075ee:	4bcb      	ldr	r3, [pc, #812]	@ (800791c <UART_SetConfig+0x69c>)
 80075f0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80075f2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80075f6:	2b28      	cmp	r3, #40	@ 0x28
 80075f8:	d86c      	bhi.n	80076d4 <UART_SetConfig+0x454>
 80075fa:	a201      	add	r2, pc, #4	@ (adr r2, 8007600 <UART_SetConfig+0x380>)
 80075fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007600:	080076a5 	.word	0x080076a5
 8007604:	080076d5 	.word	0x080076d5
 8007608:	080076d5 	.word	0x080076d5
 800760c:	080076d5 	.word	0x080076d5
 8007610:	080076d5 	.word	0x080076d5
 8007614:	080076d5 	.word	0x080076d5
 8007618:	080076d5 	.word	0x080076d5
 800761c:	080076d5 	.word	0x080076d5
 8007620:	080076ad 	.word	0x080076ad
 8007624:	080076d5 	.word	0x080076d5
 8007628:	080076d5 	.word	0x080076d5
 800762c:	080076d5 	.word	0x080076d5
 8007630:	080076d5 	.word	0x080076d5
 8007634:	080076d5 	.word	0x080076d5
 8007638:	080076d5 	.word	0x080076d5
 800763c:	080076d5 	.word	0x080076d5
 8007640:	080076b5 	.word	0x080076b5
 8007644:	080076d5 	.word	0x080076d5
 8007648:	080076d5 	.word	0x080076d5
 800764c:	080076d5 	.word	0x080076d5
 8007650:	080076d5 	.word	0x080076d5
 8007654:	080076d5 	.word	0x080076d5
 8007658:	080076d5 	.word	0x080076d5
 800765c:	080076d5 	.word	0x080076d5
 8007660:	080076bd 	.word	0x080076bd
 8007664:	080076d5 	.word	0x080076d5
 8007668:	080076d5 	.word	0x080076d5
 800766c:	080076d5 	.word	0x080076d5
 8007670:	080076d5 	.word	0x080076d5
 8007674:	080076d5 	.word	0x080076d5
 8007678:	080076d5 	.word	0x080076d5
 800767c:	080076d5 	.word	0x080076d5
 8007680:	080076c5 	.word	0x080076c5
 8007684:	080076d5 	.word	0x080076d5
 8007688:	080076d5 	.word	0x080076d5
 800768c:	080076d5 	.word	0x080076d5
 8007690:	080076d5 	.word	0x080076d5
 8007694:	080076d5 	.word	0x080076d5
 8007698:	080076d5 	.word	0x080076d5
 800769c:	080076d5 	.word	0x080076d5
 80076a0:	080076cd 	.word	0x080076cd
 80076a4:	2301      	movs	r3, #1
 80076a6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80076aa:	e0bc      	b.n	8007826 <UART_SetConfig+0x5a6>
 80076ac:	2304      	movs	r3, #4
 80076ae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80076b2:	e0b8      	b.n	8007826 <UART_SetConfig+0x5a6>
 80076b4:	2308      	movs	r3, #8
 80076b6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80076ba:	e0b4      	b.n	8007826 <UART_SetConfig+0x5a6>
 80076bc:	2310      	movs	r3, #16
 80076be:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80076c2:	e0b0      	b.n	8007826 <UART_SetConfig+0x5a6>
 80076c4:	2320      	movs	r3, #32
 80076c6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80076ca:	e0ac      	b.n	8007826 <UART_SetConfig+0x5a6>
 80076cc:	2340      	movs	r3, #64	@ 0x40
 80076ce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80076d2:	e0a8      	b.n	8007826 <UART_SetConfig+0x5a6>
 80076d4:	2380      	movs	r3, #128	@ 0x80
 80076d6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80076da:	e0a4      	b.n	8007826 <UART_SetConfig+0x5a6>
 80076dc:	697b      	ldr	r3, [r7, #20]
 80076de:	681b      	ldr	r3, [r3, #0]
 80076e0:	4a8f      	ldr	r2, [pc, #572]	@ (8007920 <UART_SetConfig+0x6a0>)
 80076e2:	4293      	cmp	r3, r2
 80076e4:	d130      	bne.n	8007748 <UART_SetConfig+0x4c8>
 80076e6:	4b8d      	ldr	r3, [pc, #564]	@ (800791c <UART_SetConfig+0x69c>)
 80076e8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80076ea:	f003 0307 	and.w	r3, r3, #7
 80076ee:	2b05      	cmp	r3, #5
 80076f0:	d826      	bhi.n	8007740 <UART_SetConfig+0x4c0>
 80076f2:	a201      	add	r2, pc, #4	@ (adr r2, 80076f8 <UART_SetConfig+0x478>)
 80076f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80076f8:	08007711 	.word	0x08007711
 80076fc:	08007719 	.word	0x08007719
 8007700:	08007721 	.word	0x08007721
 8007704:	08007729 	.word	0x08007729
 8007708:	08007731 	.word	0x08007731
 800770c:	08007739 	.word	0x08007739
 8007710:	2300      	movs	r3, #0
 8007712:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007716:	e086      	b.n	8007826 <UART_SetConfig+0x5a6>
 8007718:	2304      	movs	r3, #4
 800771a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800771e:	e082      	b.n	8007826 <UART_SetConfig+0x5a6>
 8007720:	2308      	movs	r3, #8
 8007722:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007726:	e07e      	b.n	8007826 <UART_SetConfig+0x5a6>
 8007728:	2310      	movs	r3, #16
 800772a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800772e:	e07a      	b.n	8007826 <UART_SetConfig+0x5a6>
 8007730:	2320      	movs	r3, #32
 8007732:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007736:	e076      	b.n	8007826 <UART_SetConfig+0x5a6>
 8007738:	2340      	movs	r3, #64	@ 0x40
 800773a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800773e:	e072      	b.n	8007826 <UART_SetConfig+0x5a6>
 8007740:	2380      	movs	r3, #128	@ 0x80
 8007742:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007746:	e06e      	b.n	8007826 <UART_SetConfig+0x5a6>
 8007748:	697b      	ldr	r3, [r7, #20]
 800774a:	681b      	ldr	r3, [r3, #0]
 800774c:	4a75      	ldr	r2, [pc, #468]	@ (8007924 <UART_SetConfig+0x6a4>)
 800774e:	4293      	cmp	r3, r2
 8007750:	d130      	bne.n	80077b4 <UART_SetConfig+0x534>
 8007752:	4b72      	ldr	r3, [pc, #456]	@ (800791c <UART_SetConfig+0x69c>)
 8007754:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007756:	f003 0307 	and.w	r3, r3, #7
 800775a:	2b05      	cmp	r3, #5
 800775c:	d826      	bhi.n	80077ac <UART_SetConfig+0x52c>
 800775e:	a201      	add	r2, pc, #4	@ (adr r2, 8007764 <UART_SetConfig+0x4e4>)
 8007760:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007764:	0800777d 	.word	0x0800777d
 8007768:	08007785 	.word	0x08007785
 800776c:	0800778d 	.word	0x0800778d
 8007770:	08007795 	.word	0x08007795
 8007774:	0800779d 	.word	0x0800779d
 8007778:	080077a5 	.word	0x080077a5
 800777c:	2300      	movs	r3, #0
 800777e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007782:	e050      	b.n	8007826 <UART_SetConfig+0x5a6>
 8007784:	2304      	movs	r3, #4
 8007786:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800778a:	e04c      	b.n	8007826 <UART_SetConfig+0x5a6>
 800778c:	2308      	movs	r3, #8
 800778e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007792:	e048      	b.n	8007826 <UART_SetConfig+0x5a6>
 8007794:	2310      	movs	r3, #16
 8007796:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800779a:	e044      	b.n	8007826 <UART_SetConfig+0x5a6>
 800779c:	2320      	movs	r3, #32
 800779e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80077a2:	e040      	b.n	8007826 <UART_SetConfig+0x5a6>
 80077a4:	2340      	movs	r3, #64	@ 0x40
 80077a6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80077aa:	e03c      	b.n	8007826 <UART_SetConfig+0x5a6>
 80077ac:	2380      	movs	r3, #128	@ 0x80
 80077ae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80077b2:	e038      	b.n	8007826 <UART_SetConfig+0x5a6>
 80077b4:	697b      	ldr	r3, [r7, #20]
 80077b6:	681b      	ldr	r3, [r3, #0]
 80077b8:	4a5b      	ldr	r2, [pc, #364]	@ (8007928 <UART_SetConfig+0x6a8>)
 80077ba:	4293      	cmp	r3, r2
 80077bc:	d130      	bne.n	8007820 <UART_SetConfig+0x5a0>
 80077be:	4b57      	ldr	r3, [pc, #348]	@ (800791c <UART_SetConfig+0x69c>)
 80077c0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80077c2:	f003 0307 	and.w	r3, r3, #7
 80077c6:	2b05      	cmp	r3, #5
 80077c8:	d826      	bhi.n	8007818 <UART_SetConfig+0x598>
 80077ca:	a201      	add	r2, pc, #4	@ (adr r2, 80077d0 <UART_SetConfig+0x550>)
 80077cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80077d0:	080077e9 	.word	0x080077e9
 80077d4:	080077f1 	.word	0x080077f1
 80077d8:	080077f9 	.word	0x080077f9
 80077dc:	08007801 	.word	0x08007801
 80077e0:	08007809 	.word	0x08007809
 80077e4:	08007811 	.word	0x08007811
 80077e8:	2302      	movs	r3, #2
 80077ea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80077ee:	e01a      	b.n	8007826 <UART_SetConfig+0x5a6>
 80077f0:	2304      	movs	r3, #4
 80077f2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80077f6:	e016      	b.n	8007826 <UART_SetConfig+0x5a6>
 80077f8:	2308      	movs	r3, #8
 80077fa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80077fe:	e012      	b.n	8007826 <UART_SetConfig+0x5a6>
 8007800:	2310      	movs	r3, #16
 8007802:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007806:	e00e      	b.n	8007826 <UART_SetConfig+0x5a6>
 8007808:	2320      	movs	r3, #32
 800780a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800780e:	e00a      	b.n	8007826 <UART_SetConfig+0x5a6>
 8007810:	2340      	movs	r3, #64	@ 0x40
 8007812:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007816:	e006      	b.n	8007826 <UART_SetConfig+0x5a6>
 8007818:	2380      	movs	r3, #128	@ 0x80
 800781a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800781e:	e002      	b.n	8007826 <UART_SetConfig+0x5a6>
 8007820:	2380      	movs	r3, #128	@ 0x80
 8007822:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8007826:	697b      	ldr	r3, [r7, #20]
 8007828:	681b      	ldr	r3, [r3, #0]
 800782a:	4a3f      	ldr	r2, [pc, #252]	@ (8007928 <UART_SetConfig+0x6a8>)
 800782c:	4293      	cmp	r3, r2
 800782e:	f040 80f8 	bne.w	8007a22 <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8007832:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8007836:	2b20      	cmp	r3, #32
 8007838:	dc46      	bgt.n	80078c8 <UART_SetConfig+0x648>
 800783a:	2b02      	cmp	r3, #2
 800783c:	f2c0 8082 	blt.w	8007944 <UART_SetConfig+0x6c4>
 8007840:	3b02      	subs	r3, #2
 8007842:	2b1e      	cmp	r3, #30
 8007844:	d87e      	bhi.n	8007944 <UART_SetConfig+0x6c4>
 8007846:	a201      	add	r2, pc, #4	@ (adr r2, 800784c <UART_SetConfig+0x5cc>)
 8007848:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800784c:	080078cf 	.word	0x080078cf
 8007850:	08007945 	.word	0x08007945
 8007854:	080078d7 	.word	0x080078d7
 8007858:	08007945 	.word	0x08007945
 800785c:	08007945 	.word	0x08007945
 8007860:	08007945 	.word	0x08007945
 8007864:	080078e7 	.word	0x080078e7
 8007868:	08007945 	.word	0x08007945
 800786c:	08007945 	.word	0x08007945
 8007870:	08007945 	.word	0x08007945
 8007874:	08007945 	.word	0x08007945
 8007878:	08007945 	.word	0x08007945
 800787c:	08007945 	.word	0x08007945
 8007880:	08007945 	.word	0x08007945
 8007884:	080078f7 	.word	0x080078f7
 8007888:	08007945 	.word	0x08007945
 800788c:	08007945 	.word	0x08007945
 8007890:	08007945 	.word	0x08007945
 8007894:	08007945 	.word	0x08007945
 8007898:	08007945 	.word	0x08007945
 800789c:	08007945 	.word	0x08007945
 80078a0:	08007945 	.word	0x08007945
 80078a4:	08007945 	.word	0x08007945
 80078a8:	08007945 	.word	0x08007945
 80078ac:	08007945 	.word	0x08007945
 80078b0:	08007945 	.word	0x08007945
 80078b4:	08007945 	.word	0x08007945
 80078b8:	08007945 	.word	0x08007945
 80078bc:	08007945 	.word	0x08007945
 80078c0:	08007945 	.word	0x08007945
 80078c4:	08007937 	.word	0x08007937
 80078c8:	2b40      	cmp	r3, #64	@ 0x40
 80078ca:	d037      	beq.n	800793c <UART_SetConfig+0x6bc>
 80078cc:	e03a      	b.n	8007944 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 80078ce:	f7fe ff0f 	bl	80066f0 <HAL_RCCEx_GetD3PCLK1Freq>
 80078d2:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80078d4:	e03c      	b.n	8007950 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80078d6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80078da:	4618      	mov	r0, r3
 80078dc:	f7fe ff1e 	bl	800671c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80078e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80078e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80078e4:	e034      	b.n	8007950 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80078e6:	f107 0318 	add.w	r3, r7, #24
 80078ea:	4618      	mov	r0, r3
 80078ec:	f7ff f86a 	bl	80069c4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80078f0:	69fb      	ldr	r3, [r7, #28]
 80078f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80078f4:	e02c      	b.n	8007950 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80078f6:	4b09      	ldr	r3, [pc, #36]	@ (800791c <UART_SetConfig+0x69c>)
 80078f8:	681b      	ldr	r3, [r3, #0]
 80078fa:	f003 0320 	and.w	r3, r3, #32
 80078fe:	2b00      	cmp	r3, #0
 8007900:	d016      	beq.n	8007930 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8007902:	4b06      	ldr	r3, [pc, #24]	@ (800791c <UART_SetConfig+0x69c>)
 8007904:	681b      	ldr	r3, [r3, #0]
 8007906:	08db      	lsrs	r3, r3, #3
 8007908:	f003 0303 	and.w	r3, r3, #3
 800790c:	4a07      	ldr	r2, [pc, #28]	@ (800792c <UART_SetConfig+0x6ac>)
 800790e:	fa22 f303 	lsr.w	r3, r2, r3
 8007912:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8007914:	e01c      	b.n	8007950 <UART_SetConfig+0x6d0>
 8007916:	bf00      	nop
 8007918:	40011400 	.word	0x40011400
 800791c:	58024400 	.word	0x58024400
 8007920:	40007800 	.word	0x40007800
 8007924:	40007c00 	.word	0x40007c00
 8007928:	58000c00 	.word	0x58000c00
 800792c:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 8007930:	4b9d      	ldr	r3, [pc, #628]	@ (8007ba8 <UART_SetConfig+0x928>)
 8007932:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007934:	e00c      	b.n	8007950 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8007936:	4b9d      	ldr	r3, [pc, #628]	@ (8007bac <UART_SetConfig+0x92c>)
 8007938:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800793a:	e009      	b.n	8007950 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800793c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007940:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007942:	e005      	b.n	8007950 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 8007944:	2300      	movs	r3, #0
 8007946:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8007948:	2301      	movs	r3, #1
 800794a:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800794e:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8007950:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007952:	2b00      	cmp	r3, #0
 8007954:	f000 81de 	beq.w	8007d14 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8007958:	697b      	ldr	r3, [r7, #20]
 800795a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800795c:	4a94      	ldr	r2, [pc, #592]	@ (8007bb0 <UART_SetConfig+0x930>)
 800795e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007962:	461a      	mov	r2, r3
 8007964:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007966:	fbb3 f3f2 	udiv	r3, r3, r2
 800796a:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800796c:	697b      	ldr	r3, [r7, #20]
 800796e:	685a      	ldr	r2, [r3, #4]
 8007970:	4613      	mov	r3, r2
 8007972:	005b      	lsls	r3, r3, #1
 8007974:	4413      	add	r3, r2
 8007976:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007978:	429a      	cmp	r2, r3
 800797a:	d305      	bcc.n	8007988 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800797c:	697b      	ldr	r3, [r7, #20]
 800797e:	685b      	ldr	r3, [r3, #4]
 8007980:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007982:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007984:	429a      	cmp	r2, r3
 8007986:	d903      	bls.n	8007990 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 8007988:	2301      	movs	r3, #1
 800798a:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800798e:	e1c1      	b.n	8007d14 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007990:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007992:	2200      	movs	r2, #0
 8007994:	60bb      	str	r3, [r7, #8]
 8007996:	60fa      	str	r2, [r7, #12]
 8007998:	697b      	ldr	r3, [r7, #20]
 800799a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800799c:	4a84      	ldr	r2, [pc, #528]	@ (8007bb0 <UART_SetConfig+0x930>)
 800799e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80079a2:	b29b      	uxth	r3, r3
 80079a4:	2200      	movs	r2, #0
 80079a6:	603b      	str	r3, [r7, #0]
 80079a8:	607a      	str	r2, [r7, #4]
 80079aa:	e9d7 2300 	ldrd	r2, r3, [r7]
 80079ae:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80079b2:	f7f8 fced 	bl	8000390 <__aeabi_uldivmod>
 80079b6:	4602      	mov	r2, r0
 80079b8:	460b      	mov	r3, r1
 80079ba:	4610      	mov	r0, r2
 80079bc:	4619      	mov	r1, r3
 80079be:	f04f 0200 	mov.w	r2, #0
 80079c2:	f04f 0300 	mov.w	r3, #0
 80079c6:	020b      	lsls	r3, r1, #8
 80079c8:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80079cc:	0202      	lsls	r2, r0, #8
 80079ce:	6979      	ldr	r1, [r7, #20]
 80079d0:	6849      	ldr	r1, [r1, #4]
 80079d2:	0849      	lsrs	r1, r1, #1
 80079d4:	2000      	movs	r0, #0
 80079d6:	460c      	mov	r4, r1
 80079d8:	4605      	mov	r5, r0
 80079da:	eb12 0804 	adds.w	r8, r2, r4
 80079de:	eb43 0905 	adc.w	r9, r3, r5
 80079e2:	697b      	ldr	r3, [r7, #20]
 80079e4:	685b      	ldr	r3, [r3, #4]
 80079e6:	2200      	movs	r2, #0
 80079e8:	469a      	mov	sl, r3
 80079ea:	4693      	mov	fp, r2
 80079ec:	4652      	mov	r2, sl
 80079ee:	465b      	mov	r3, fp
 80079f0:	4640      	mov	r0, r8
 80079f2:	4649      	mov	r1, r9
 80079f4:	f7f8 fccc 	bl	8000390 <__aeabi_uldivmod>
 80079f8:	4602      	mov	r2, r0
 80079fa:	460b      	mov	r3, r1
 80079fc:	4613      	mov	r3, r2
 80079fe:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8007a00:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007a02:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007a06:	d308      	bcc.n	8007a1a <UART_SetConfig+0x79a>
 8007a08:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007a0a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007a0e:	d204      	bcs.n	8007a1a <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 8007a10:	697b      	ldr	r3, [r7, #20]
 8007a12:	681b      	ldr	r3, [r3, #0]
 8007a14:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8007a16:	60da      	str	r2, [r3, #12]
 8007a18:	e17c      	b.n	8007d14 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 8007a1a:	2301      	movs	r3, #1
 8007a1c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8007a20:	e178      	b.n	8007d14 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007a22:	697b      	ldr	r3, [r7, #20]
 8007a24:	69db      	ldr	r3, [r3, #28]
 8007a26:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007a2a:	f040 80c5 	bne.w	8007bb8 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 8007a2e:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8007a32:	2b20      	cmp	r3, #32
 8007a34:	dc48      	bgt.n	8007ac8 <UART_SetConfig+0x848>
 8007a36:	2b00      	cmp	r3, #0
 8007a38:	db7b      	blt.n	8007b32 <UART_SetConfig+0x8b2>
 8007a3a:	2b20      	cmp	r3, #32
 8007a3c:	d879      	bhi.n	8007b32 <UART_SetConfig+0x8b2>
 8007a3e:	a201      	add	r2, pc, #4	@ (adr r2, 8007a44 <UART_SetConfig+0x7c4>)
 8007a40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a44:	08007acf 	.word	0x08007acf
 8007a48:	08007ad7 	.word	0x08007ad7
 8007a4c:	08007b33 	.word	0x08007b33
 8007a50:	08007b33 	.word	0x08007b33
 8007a54:	08007adf 	.word	0x08007adf
 8007a58:	08007b33 	.word	0x08007b33
 8007a5c:	08007b33 	.word	0x08007b33
 8007a60:	08007b33 	.word	0x08007b33
 8007a64:	08007aef 	.word	0x08007aef
 8007a68:	08007b33 	.word	0x08007b33
 8007a6c:	08007b33 	.word	0x08007b33
 8007a70:	08007b33 	.word	0x08007b33
 8007a74:	08007b33 	.word	0x08007b33
 8007a78:	08007b33 	.word	0x08007b33
 8007a7c:	08007b33 	.word	0x08007b33
 8007a80:	08007b33 	.word	0x08007b33
 8007a84:	08007aff 	.word	0x08007aff
 8007a88:	08007b33 	.word	0x08007b33
 8007a8c:	08007b33 	.word	0x08007b33
 8007a90:	08007b33 	.word	0x08007b33
 8007a94:	08007b33 	.word	0x08007b33
 8007a98:	08007b33 	.word	0x08007b33
 8007a9c:	08007b33 	.word	0x08007b33
 8007aa0:	08007b33 	.word	0x08007b33
 8007aa4:	08007b33 	.word	0x08007b33
 8007aa8:	08007b33 	.word	0x08007b33
 8007aac:	08007b33 	.word	0x08007b33
 8007ab0:	08007b33 	.word	0x08007b33
 8007ab4:	08007b33 	.word	0x08007b33
 8007ab8:	08007b33 	.word	0x08007b33
 8007abc:	08007b33 	.word	0x08007b33
 8007ac0:	08007b33 	.word	0x08007b33
 8007ac4:	08007b25 	.word	0x08007b25
 8007ac8:	2b40      	cmp	r3, #64	@ 0x40
 8007aca:	d02e      	beq.n	8007b2a <UART_SetConfig+0x8aa>
 8007acc:	e031      	b.n	8007b32 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007ace:	f7fd fbd9 	bl	8005284 <HAL_RCC_GetPCLK1Freq>
 8007ad2:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8007ad4:	e033      	b.n	8007b3e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007ad6:	f7fd fbeb 	bl	80052b0 <HAL_RCC_GetPCLK2Freq>
 8007ada:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8007adc:	e02f      	b.n	8007b3e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007ade:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8007ae2:	4618      	mov	r0, r3
 8007ae4:	f7fe fe1a 	bl	800671c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8007ae8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007aea:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007aec:	e027      	b.n	8007b3e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007aee:	f107 0318 	add.w	r3, r7, #24
 8007af2:	4618      	mov	r0, r3
 8007af4:	f7fe ff66 	bl	80069c4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8007af8:	69fb      	ldr	r3, [r7, #28]
 8007afa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007afc:	e01f      	b.n	8007b3e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007afe:	4b2d      	ldr	r3, [pc, #180]	@ (8007bb4 <UART_SetConfig+0x934>)
 8007b00:	681b      	ldr	r3, [r3, #0]
 8007b02:	f003 0320 	and.w	r3, r3, #32
 8007b06:	2b00      	cmp	r3, #0
 8007b08:	d009      	beq.n	8007b1e <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8007b0a:	4b2a      	ldr	r3, [pc, #168]	@ (8007bb4 <UART_SetConfig+0x934>)
 8007b0c:	681b      	ldr	r3, [r3, #0]
 8007b0e:	08db      	lsrs	r3, r3, #3
 8007b10:	f003 0303 	and.w	r3, r3, #3
 8007b14:	4a24      	ldr	r2, [pc, #144]	@ (8007ba8 <UART_SetConfig+0x928>)
 8007b16:	fa22 f303 	lsr.w	r3, r2, r3
 8007b1a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8007b1c:	e00f      	b.n	8007b3e <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8007b1e:	4b22      	ldr	r3, [pc, #136]	@ (8007ba8 <UART_SetConfig+0x928>)
 8007b20:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007b22:	e00c      	b.n	8007b3e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8007b24:	4b21      	ldr	r3, [pc, #132]	@ (8007bac <UART_SetConfig+0x92c>)
 8007b26:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007b28:	e009      	b.n	8007b3e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007b2a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007b2e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007b30:	e005      	b.n	8007b3e <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8007b32:	2300      	movs	r3, #0
 8007b34:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8007b36:	2301      	movs	r3, #1
 8007b38:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8007b3c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007b3e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007b40:	2b00      	cmp	r3, #0
 8007b42:	f000 80e7 	beq.w	8007d14 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007b46:	697b      	ldr	r3, [r7, #20]
 8007b48:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007b4a:	4a19      	ldr	r2, [pc, #100]	@ (8007bb0 <UART_SetConfig+0x930>)
 8007b4c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007b50:	461a      	mov	r2, r3
 8007b52:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007b54:	fbb3 f3f2 	udiv	r3, r3, r2
 8007b58:	005a      	lsls	r2, r3, #1
 8007b5a:	697b      	ldr	r3, [r7, #20]
 8007b5c:	685b      	ldr	r3, [r3, #4]
 8007b5e:	085b      	lsrs	r3, r3, #1
 8007b60:	441a      	add	r2, r3
 8007b62:	697b      	ldr	r3, [r7, #20]
 8007b64:	685b      	ldr	r3, [r3, #4]
 8007b66:	fbb2 f3f3 	udiv	r3, r2, r3
 8007b6a:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007b6c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007b6e:	2b0f      	cmp	r3, #15
 8007b70:	d916      	bls.n	8007ba0 <UART_SetConfig+0x920>
 8007b72:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007b74:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007b78:	d212      	bcs.n	8007ba0 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007b7a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007b7c:	b29b      	uxth	r3, r3
 8007b7e:	f023 030f 	bic.w	r3, r3, #15
 8007b82:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007b84:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007b86:	085b      	lsrs	r3, r3, #1
 8007b88:	b29b      	uxth	r3, r3
 8007b8a:	f003 0307 	and.w	r3, r3, #7
 8007b8e:	b29a      	uxth	r2, r3
 8007b90:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8007b92:	4313      	orrs	r3, r2
 8007b94:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 8007b96:	697b      	ldr	r3, [r7, #20]
 8007b98:	681b      	ldr	r3, [r3, #0]
 8007b9a:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 8007b9c:	60da      	str	r2, [r3, #12]
 8007b9e:	e0b9      	b.n	8007d14 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8007ba0:	2301      	movs	r3, #1
 8007ba2:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8007ba6:	e0b5      	b.n	8007d14 <UART_SetConfig+0xa94>
 8007ba8:	03d09000 	.word	0x03d09000
 8007bac:	003d0900 	.word	0x003d0900
 8007bb0:	0800b2fc 	.word	0x0800b2fc
 8007bb4:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 8007bb8:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8007bbc:	2b20      	cmp	r3, #32
 8007bbe:	dc49      	bgt.n	8007c54 <UART_SetConfig+0x9d4>
 8007bc0:	2b00      	cmp	r3, #0
 8007bc2:	db7c      	blt.n	8007cbe <UART_SetConfig+0xa3e>
 8007bc4:	2b20      	cmp	r3, #32
 8007bc6:	d87a      	bhi.n	8007cbe <UART_SetConfig+0xa3e>
 8007bc8:	a201      	add	r2, pc, #4	@ (adr r2, 8007bd0 <UART_SetConfig+0x950>)
 8007bca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007bce:	bf00      	nop
 8007bd0:	08007c5b 	.word	0x08007c5b
 8007bd4:	08007c63 	.word	0x08007c63
 8007bd8:	08007cbf 	.word	0x08007cbf
 8007bdc:	08007cbf 	.word	0x08007cbf
 8007be0:	08007c6b 	.word	0x08007c6b
 8007be4:	08007cbf 	.word	0x08007cbf
 8007be8:	08007cbf 	.word	0x08007cbf
 8007bec:	08007cbf 	.word	0x08007cbf
 8007bf0:	08007c7b 	.word	0x08007c7b
 8007bf4:	08007cbf 	.word	0x08007cbf
 8007bf8:	08007cbf 	.word	0x08007cbf
 8007bfc:	08007cbf 	.word	0x08007cbf
 8007c00:	08007cbf 	.word	0x08007cbf
 8007c04:	08007cbf 	.word	0x08007cbf
 8007c08:	08007cbf 	.word	0x08007cbf
 8007c0c:	08007cbf 	.word	0x08007cbf
 8007c10:	08007c8b 	.word	0x08007c8b
 8007c14:	08007cbf 	.word	0x08007cbf
 8007c18:	08007cbf 	.word	0x08007cbf
 8007c1c:	08007cbf 	.word	0x08007cbf
 8007c20:	08007cbf 	.word	0x08007cbf
 8007c24:	08007cbf 	.word	0x08007cbf
 8007c28:	08007cbf 	.word	0x08007cbf
 8007c2c:	08007cbf 	.word	0x08007cbf
 8007c30:	08007cbf 	.word	0x08007cbf
 8007c34:	08007cbf 	.word	0x08007cbf
 8007c38:	08007cbf 	.word	0x08007cbf
 8007c3c:	08007cbf 	.word	0x08007cbf
 8007c40:	08007cbf 	.word	0x08007cbf
 8007c44:	08007cbf 	.word	0x08007cbf
 8007c48:	08007cbf 	.word	0x08007cbf
 8007c4c:	08007cbf 	.word	0x08007cbf
 8007c50:	08007cb1 	.word	0x08007cb1
 8007c54:	2b40      	cmp	r3, #64	@ 0x40
 8007c56:	d02e      	beq.n	8007cb6 <UART_SetConfig+0xa36>
 8007c58:	e031      	b.n	8007cbe <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007c5a:	f7fd fb13 	bl	8005284 <HAL_RCC_GetPCLK1Freq>
 8007c5e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8007c60:	e033      	b.n	8007cca <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007c62:	f7fd fb25 	bl	80052b0 <HAL_RCC_GetPCLK2Freq>
 8007c66:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8007c68:	e02f      	b.n	8007cca <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007c6a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8007c6e:	4618      	mov	r0, r3
 8007c70:	f7fe fd54 	bl	800671c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8007c74:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007c76:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007c78:	e027      	b.n	8007cca <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007c7a:	f107 0318 	add.w	r3, r7, #24
 8007c7e:	4618      	mov	r0, r3
 8007c80:	f7fe fea0 	bl	80069c4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8007c84:	69fb      	ldr	r3, [r7, #28]
 8007c86:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007c88:	e01f      	b.n	8007cca <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007c8a:	4b2d      	ldr	r3, [pc, #180]	@ (8007d40 <UART_SetConfig+0xac0>)
 8007c8c:	681b      	ldr	r3, [r3, #0]
 8007c8e:	f003 0320 	and.w	r3, r3, #32
 8007c92:	2b00      	cmp	r3, #0
 8007c94:	d009      	beq.n	8007caa <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8007c96:	4b2a      	ldr	r3, [pc, #168]	@ (8007d40 <UART_SetConfig+0xac0>)
 8007c98:	681b      	ldr	r3, [r3, #0]
 8007c9a:	08db      	lsrs	r3, r3, #3
 8007c9c:	f003 0303 	and.w	r3, r3, #3
 8007ca0:	4a28      	ldr	r2, [pc, #160]	@ (8007d44 <UART_SetConfig+0xac4>)
 8007ca2:	fa22 f303 	lsr.w	r3, r2, r3
 8007ca6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8007ca8:	e00f      	b.n	8007cca <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 8007caa:	4b26      	ldr	r3, [pc, #152]	@ (8007d44 <UART_SetConfig+0xac4>)
 8007cac:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007cae:	e00c      	b.n	8007cca <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8007cb0:	4b25      	ldr	r3, [pc, #148]	@ (8007d48 <UART_SetConfig+0xac8>)
 8007cb2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007cb4:	e009      	b.n	8007cca <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007cb6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007cba:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007cbc:	e005      	b.n	8007cca <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 8007cbe:	2300      	movs	r3, #0
 8007cc0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8007cc2:	2301      	movs	r3, #1
 8007cc4:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8007cc8:	bf00      	nop
    }

    if (pclk != 0U)
 8007cca:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007ccc:	2b00      	cmp	r3, #0
 8007cce:	d021      	beq.n	8007d14 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007cd0:	697b      	ldr	r3, [r7, #20]
 8007cd2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007cd4:	4a1d      	ldr	r2, [pc, #116]	@ (8007d4c <UART_SetConfig+0xacc>)
 8007cd6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007cda:	461a      	mov	r2, r3
 8007cdc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007cde:	fbb3 f2f2 	udiv	r2, r3, r2
 8007ce2:	697b      	ldr	r3, [r7, #20]
 8007ce4:	685b      	ldr	r3, [r3, #4]
 8007ce6:	085b      	lsrs	r3, r3, #1
 8007ce8:	441a      	add	r2, r3
 8007cea:	697b      	ldr	r3, [r7, #20]
 8007cec:	685b      	ldr	r3, [r3, #4]
 8007cee:	fbb2 f3f3 	udiv	r3, r2, r3
 8007cf2:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007cf4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007cf6:	2b0f      	cmp	r3, #15
 8007cf8:	d909      	bls.n	8007d0e <UART_SetConfig+0xa8e>
 8007cfa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007cfc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007d00:	d205      	bcs.n	8007d0e <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8007d02:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007d04:	b29a      	uxth	r2, r3
 8007d06:	697b      	ldr	r3, [r7, #20]
 8007d08:	681b      	ldr	r3, [r3, #0]
 8007d0a:	60da      	str	r2, [r3, #12]
 8007d0c:	e002      	b.n	8007d14 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8007d0e:	2301      	movs	r3, #1
 8007d10:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8007d14:	697b      	ldr	r3, [r7, #20]
 8007d16:	2201      	movs	r2, #1
 8007d18:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8007d1c:	697b      	ldr	r3, [r7, #20]
 8007d1e:	2201      	movs	r2, #1
 8007d20:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007d24:	697b      	ldr	r3, [r7, #20]
 8007d26:	2200      	movs	r2, #0
 8007d28:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8007d2a:	697b      	ldr	r3, [r7, #20]
 8007d2c:	2200      	movs	r2, #0
 8007d2e:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8007d30:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 8007d34:	4618      	mov	r0, r3
 8007d36:	3748      	adds	r7, #72	@ 0x48
 8007d38:	46bd      	mov	sp, r7
 8007d3a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007d3e:	bf00      	nop
 8007d40:	58024400 	.word	0x58024400
 8007d44:	03d09000 	.word	0x03d09000
 8007d48:	003d0900 	.word	0x003d0900
 8007d4c:	0800b2fc 	.word	0x0800b2fc

08007d50 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007d50:	b480      	push	{r7}
 8007d52:	b083      	sub	sp, #12
 8007d54:	af00      	add	r7, sp, #0
 8007d56:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007d5c:	f003 0308 	and.w	r3, r3, #8
 8007d60:	2b00      	cmp	r3, #0
 8007d62:	d00a      	beq.n	8007d7a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	681b      	ldr	r3, [r3, #0]
 8007d68:	685b      	ldr	r3, [r3, #4]
 8007d6a:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	681b      	ldr	r3, [r3, #0]
 8007d76:	430a      	orrs	r2, r1
 8007d78:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007d7e:	f003 0301 	and.w	r3, r3, #1
 8007d82:	2b00      	cmp	r3, #0
 8007d84:	d00a      	beq.n	8007d9c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	681b      	ldr	r3, [r3, #0]
 8007d8a:	685b      	ldr	r3, [r3, #4]
 8007d8c:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	681b      	ldr	r3, [r3, #0]
 8007d98:	430a      	orrs	r2, r1
 8007d9a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007da0:	f003 0302 	and.w	r3, r3, #2
 8007da4:	2b00      	cmp	r3, #0
 8007da6:	d00a      	beq.n	8007dbe <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	681b      	ldr	r3, [r3, #0]
 8007dac:	685b      	ldr	r3, [r3, #4]
 8007dae:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	681b      	ldr	r3, [r3, #0]
 8007dba:	430a      	orrs	r2, r1
 8007dbc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007dc2:	f003 0304 	and.w	r3, r3, #4
 8007dc6:	2b00      	cmp	r3, #0
 8007dc8:	d00a      	beq.n	8007de0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	681b      	ldr	r3, [r3, #0]
 8007dce:	685b      	ldr	r3, [r3, #4]
 8007dd0:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	681b      	ldr	r3, [r3, #0]
 8007ddc:	430a      	orrs	r2, r1
 8007dde:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007de4:	f003 0310 	and.w	r3, r3, #16
 8007de8:	2b00      	cmp	r3, #0
 8007dea:	d00a      	beq.n	8007e02 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	681b      	ldr	r3, [r3, #0]
 8007df0:	689b      	ldr	r3, [r3, #8]
 8007df2:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	681b      	ldr	r3, [r3, #0]
 8007dfe:	430a      	orrs	r2, r1
 8007e00:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007e06:	f003 0320 	and.w	r3, r3, #32
 8007e0a:	2b00      	cmp	r3, #0
 8007e0c:	d00a      	beq.n	8007e24 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	681b      	ldr	r3, [r3, #0]
 8007e12:	689b      	ldr	r3, [r3, #8]
 8007e14:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	681b      	ldr	r3, [r3, #0]
 8007e20:	430a      	orrs	r2, r1
 8007e22:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007e28:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007e2c:	2b00      	cmp	r3, #0
 8007e2e:	d01a      	beq.n	8007e66 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	681b      	ldr	r3, [r3, #0]
 8007e34:	685b      	ldr	r3, [r3, #4]
 8007e36:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	681b      	ldr	r3, [r3, #0]
 8007e42:	430a      	orrs	r2, r1
 8007e44:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007e4a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007e4e:	d10a      	bne.n	8007e66 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	681b      	ldr	r3, [r3, #0]
 8007e54:	685b      	ldr	r3, [r3, #4]
 8007e56:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	681b      	ldr	r3, [r3, #0]
 8007e62:	430a      	orrs	r2, r1
 8007e64:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007e6a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007e6e:	2b00      	cmp	r3, #0
 8007e70:	d00a      	beq.n	8007e88 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	681b      	ldr	r3, [r3, #0]
 8007e76:	685b      	ldr	r3, [r3, #4]
 8007e78:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	681b      	ldr	r3, [r3, #0]
 8007e84:	430a      	orrs	r2, r1
 8007e86:	605a      	str	r2, [r3, #4]
  }
}
 8007e88:	bf00      	nop
 8007e8a:	370c      	adds	r7, #12
 8007e8c:	46bd      	mov	sp, r7
 8007e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e92:	4770      	bx	lr

08007e94 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007e94:	b580      	push	{r7, lr}
 8007e96:	b098      	sub	sp, #96	@ 0x60
 8007e98:	af02      	add	r7, sp, #8
 8007e9a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	2200      	movs	r2, #0
 8007ea0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007ea4:	f7fb f868 	bl	8002f78 <HAL_GetTick>
 8007ea8:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	681b      	ldr	r3, [r3, #0]
 8007eae:	681b      	ldr	r3, [r3, #0]
 8007eb0:	f003 0308 	and.w	r3, r3, #8
 8007eb4:	2b08      	cmp	r3, #8
 8007eb6:	d12f      	bne.n	8007f18 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007eb8:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8007ebc:	9300      	str	r3, [sp, #0]
 8007ebe:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007ec0:	2200      	movs	r2, #0
 8007ec2:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8007ec6:	6878      	ldr	r0, [r7, #4]
 8007ec8:	f000 f88e 	bl	8007fe8 <UART_WaitOnFlagUntilTimeout>
 8007ecc:	4603      	mov	r3, r0
 8007ece:	2b00      	cmp	r3, #0
 8007ed0:	d022      	beq.n	8007f18 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	681b      	ldr	r3, [r3, #0]
 8007ed6:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ed8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007eda:	e853 3f00 	ldrex	r3, [r3]
 8007ede:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8007ee0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007ee2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007ee6:	653b      	str	r3, [r7, #80]	@ 0x50
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	681b      	ldr	r3, [r3, #0]
 8007eec:	461a      	mov	r2, r3
 8007eee:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007ef0:	647b      	str	r3, [r7, #68]	@ 0x44
 8007ef2:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ef4:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8007ef6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007ef8:	e841 2300 	strex	r3, r2, [r1]
 8007efc:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8007efe:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007f00:	2b00      	cmp	r3, #0
 8007f02:	d1e6      	bne.n	8007ed2 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	2220      	movs	r2, #32
 8007f08:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	2200      	movs	r2, #0
 8007f10:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007f14:	2303      	movs	r3, #3
 8007f16:	e063      	b.n	8007fe0 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	681b      	ldr	r3, [r3, #0]
 8007f1c:	681b      	ldr	r3, [r3, #0]
 8007f1e:	f003 0304 	and.w	r3, r3, #4
 8007f22:	2b04      	cmp	r3, #4
 8007f24:	d149      	bne.n	8007fba <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007f26:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8007f2a:	9300      	str	r3, [sp, #0]
 8007f2c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007f2e:	2200      	movs	r2, #0
 8007f30:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8007f34:	6878      	ldr	r0, [r7, #4]
 8007f36:	f000 f857 	bl	8007fe8 <UART_WaitOnFlagUntilTimeout>
 8007f3a:	4603      	mov	r3, r0
 8007f3c:	2b00      	cmp	r3, #0
 8007f3e:	d03c      	beq.n	8007fba <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	681b      	ldr	r3, [r3, #0]
 8007f44:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007f48:	e853 3f00 	ldrex	r3, [r3]
 8007f4c:	623b      	str	r3, [r7, #32]
   return(result);
 8007f4e:	6a3b      	ldr	r3, [r7, #32]
 8007f50:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007f54:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	681b      	ldr	r3, [r3, #0]
 8007f5a:	461a      	mov	r2, r3
 8007f5c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007f5e:	633b      	str	r3, [r7, #48]	@ 0x30
 8007f60:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f62:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007f64:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007f66:	e841 2300 	strex	r3, r2, [r1]
 8007f6a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007f6c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007f6e:	2b00      	cmp	r3, #0
 8007f70:	d1e6      	bne.n	8007f40 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	681b      	ldr	r3, [r3, #0]
 8007f76:	3308      	adds	r3, #8
 8007f78:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f7a:	693b      	ldr	r3, [r7, #16]
 8007f7c:	e853 3f00 	ldrex	r3, [r3]
 8007f80:	60fb      	str	r3, [r7, #12]
   return(result);
 8007f82:	68fb      	ldr	r3, [r7, #12]
 8007f84:	f023 0301 	bic.w	r3, r3, #1
 8007f88:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	681b      	ldr	r3, [r3, #0]
 8007f8e:	3308      	adds	r3, #8
 8007f90:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007f92:	61fa      	str	r2, [r7, #28]
 8007f94:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f96:	69b9      	ldr	r1, [r7, #24]
 8007f98:	69fa      	ldr	r2, [r7, #28]
 8007f9a:	e841 2300 	strex	r3, r2, [r1]
 8007f9e:	617b      	str	r3, [r7, #20]
   return(result);
 8007fa0:	697b      	ldr	r3, [r7, #20]
 8007fa2:	2b00      	cmp	r3, #0
 8007fa4:	d1e5      	bne.n	8007f72 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	2220      	movs	r2, #32
 8007faa:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	2200      	movs	r2, #0
 8007fb2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007fb6:	2303      	movs	r3, #3
 8007fb8:	e012      	b.n	8007fe0 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	2220      	movs	r2, #32
 8007fbe:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	2220      	movs	r2, #32
 8007fc6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	2200      	movs	r2, #0
 8007fce:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	2200      	movs	r2, #0
 8007fd4:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	2200      	movs	r2, #0
 8007fda:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8007fde:	2300      	movs	r3, #0
}
 8007fe0:	4618      	mov	r0, r3
 8007fe2:	3758      	adds	r7, #88	@ 0x58
 8007fe4:	46bd      	mov	sp, r7
 8007fe6:	bd80      	pop	{r7, pc}

08007fe8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007fe8:	b580      	push	{r7, lr}
 8007fea:	b084      	sub	sp, #16
 8007fec:	af00      	add	r7, sp, #0
 8007fee:	60f8      	str	r0, [r7, #12]
 8007ff0:	60b9      	str	r1, [r7, #8]
 8007ff2:	603b      	str	r3, [r7, #0]
 8007ff4:	4613      	mov	r3, r2
 8007ff6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007ff8:	e04f      	b.n	800809a <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007ffa:	69bb      	ldr	r3, [r7, #24]
 8007ffc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008000:	d04b      	beq.n	800809a <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008002:	f7fa ffb9 	bl	8002f78 <HAL_GetTick>
 8008006:	4602      	mov	r2, r0
 8008008:	683b      	ldr	r3, [r7, #0]
 800800a:	1ad3      	subs	r3, r2, r3
 800800c:	69ba      	ldr	r2, [r7, #24]
 800800e:	429a      	cmp	r2, r3
 8008010:	d302      	bcc.n	8008018 <UART_WaitOnFlagUntilTimeout+0x30>
 8008012:	69bb      	ldr	r3, [r7, #24]
 8008014:	2b00      	cmp	r3, #0
 8008016:	d101      	bne.n	800801c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8008018:	2303      	movs	r3, #3
 800801a:	e04e      	b.n	80080ba <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800801c:	68fb      	ldr	r3, [r7, #12]
 800801e:	681b      	ldr	r3, [r3, #0]
 8008020:	681b      	ldr	r3, [r3, #0]
 8008022:	f003 0304 	and.w	r3, r3, #4
 8008026:	2b00      	cmp	r3, #0
 8008028:	d037      	beq.n	800809a <UART_WaitOnFlagUntilTimeout+0xb2>
 800802a:	68bb      	ldr	r3, [r7, #8]
 800802c:	2b80      	cmp	r3, #128	@ 0x80
 800802e:	d034      	beq.n	800809a <UART_WaitOnFlagUntilTimeout+0xb2>
 8008030:	68bb      	ldr	r3, [r7, #8]
 8008032:	2b40      	cmp	r3, #64	@ 0x40
 8008034:	d031      	beq.n	800809a <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8008036:	68fb      	ldr	r3, [r7, #12]
 8008038:	681b      	ldr	r3, [r3, #0]
 800803a:	69db      	ldr	r3, [r3, #28]
 800803c:	f003 0308 	and.w	r3, r3, #8
 8008040:	2b08      	cmp	r3, #8
 8008042:	d110      	bne.n	8008066 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8008044:	68fb      	ldr	r3, [r7, #12]
 8008046:	681b      	ldr	r3, [r3, #0]
 8008048:	2208      	movs	r2, #8
 800804a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800804c:	68f8      	ldr	r0, [r7, #12]
 800804e:	f000 f839 	bl	80080c4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8008052:	68fb      	ldr	r3, [r7, #12]
 8008054:	2208      	movs	r2, #8
 8008056:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800805a:	68fb      	ldr	r3, [r7, #12]
 800805c:	2200      	movs	r2, #0
 800805e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8008062:	2301      	movs	r3, #1
 8008064:	e029      	b.n	80080ba <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8008066:	68fb      	ldr	r3, [r7, #12]
 8008068:	681b      	ldr	r3, [r3, #0]
 800806a:	69db      	ldr	r3, [r3, #28]
 800806c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8008070:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008074:	d111      	bne.n	800809a <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008076:	68fb      	ldr	r3, [r7, #12]
 8008078:	681b      	ldr	r3, [r3, #0]
 800807a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800807e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8008080:	68f8      	ldr	r0, [r7, #12]
 8008082:	f000 f81f 	bl	80080c4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8008086:	68fb      	ldr	r3, [r7, #12]
 8008088:	2220      	movs	r2, #32
 800808a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800808e:	68fb      	ldr	r3, [r7, #12]
 8008090:	2200      	movs	r2, #0
 8008092:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8008096:	2303      	movs	r3, #3
 8008098:	e00f      	b.n	80080ba <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800809a:	68fb      	ldr	r3, [r7, #12]
 800809c:	681b      	ldr	r3, [r3, #0]
 800809e:	69da      	ldr	r2, [r3, #28]
 80080a0:	68bb      	ldr	r3, [r7, #8]
 80080a2:	4013      	ands	r3, r2
 80080a4:	68ba      	ldr	r2, [r7, #8]
 80080a6:	429a      	cmp	r2, r3
 80080a8:	bf0c      	ite	eq
 80080aa:	2301      	moveq	r3, #1
 80080ac:	2300      	movne	r3, #0
 80080ae:	b2db      	uxtb	r3, r3
 80080b0:	461a      	mov	r2, r3
 80080b2:	79fb      	ldrb	r3, [r7, #7]
 80080b4:	429a      	cmp	r2, r3
 80080b6:	d0a0      	beq.n	8007ffa <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80080b8:	2300      	movs	r3, #0
}
 80080ba:	4618      	mov	r0, r3
 80080bc:	3710      	adds	r7, #16
 80080be:	46bd      	mov	sp, r7
 80080c0:	bd80      	pop	{r7, pc}
	...

080080c4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80080c4:	b480      	push	{r7}
 80080c6:	b095      	sub	sp, #84	@ 0x54
 80080c8:	af00      	add	r7, sp, #0
 80080ca:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	681b      	ldr	r3, [r3, #0]
 80080d0:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80080d2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80080d4:	e853 3f00 	ldrex	r3, [r3]
 80080d8:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80080da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80080dc:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80080e0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	681b      	ldr	r3, [r3, #0]
 80080e6:	461a      	mov	r2, r3
 80080e8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80080ea:	643b      	str	r3, [r7, #64]	@ 0x40
 80080ec:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80080ee:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80080f0:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80080f2:	e841 2300 	strex	r3, r2, [r1]
 80080f6:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80080f8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80080fa:	2b00      	cmp	r3, #0
 80080fc:	d1e6      	bne.n	80080cc <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	681b      	ldr	r3, [r3, #0]
 8008102:	3308      	adds	r3, #8
 8008104:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008106:	6a3b      	ldr	r3, [r7, #32]
 8008108:	e853 3f00 	ldrex	r3, [r3]
 800810c:	61fb      	str	r3, [r7, #28]
   return(result);
 800810e:	69fa      	ldr	r2, [r7, #28]
 8008110:	4b1e      	ldr	r3, [pc, #120]	@ (800818c <UART_EndRxTransfer+0xc8>)
 8008112:	4013      	ands	r3, r2
 8008114:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	681b      	ldr	r3, [r3, #0]
 800811a:	3308      	adds	r3, #8
 800811c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800811e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8008120:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008122:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8008124:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008126:	e841 2300 	strex	r3, r2, [r1]
 800812a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800812c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800812e:	2b00      	cmp	r3, #0
 8008130:	d1e5      	bne.n	80080fe <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008136:	2b01      	cmp	r3, #1
 8008138:	d118      	bne.n	800816c <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	681b      	ldr	r3, [r3, #0]
 800813e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008140:	68fb      	ldr	r3, [r7, #12]
 8008142:	e853 3f00 	ldrex	r3, [r3]
 8008146:	60bb      	str	r3, [r7, #8]
   return(result);
 8008148:	68bb      	ldr	r3, [r7, #8]
 800814a:	f023 0310 	bic.w	r3, r3, #16
 800814e:	647b      	str	r3, [r7, #68]	@ 0x44
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	681b      	ldr	r3, [r3, #0]
 8008154:	461a      	mov	r2, r3
 8008156:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008158:	61bb      	str	r3, [r7, #24]
 800815a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800815c:	6979      	ldr	r1, [r7, #20]
 800815e:	69ba      	ldr	r2, [r7, #24]
 8008160:	e841 2300 	strex	r3, r2, [r1]
 8008164:	613b      	str	r3, [r7, #16]
   return(result);
 8008166:	693b      	ldr	r3, [r7, #16]
 8008168:	2b00      	cmp	r3, #0
 800816a:	d1e6      	bne.n	800813a <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	2220      	movs	r2, #32
 8008170:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	2200      	movs	r2, #0
 8008178:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	2200      	movs	r2, #0
 800817e:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8008180:	bf00      	nop
 8008182:	3754      	adds	r7, #84	@ 0x54
 8008184:	46bd      	mov	sp, r7
 8008186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800818a:	4770      	bx	lr
 800818c:	effffffe 	.word	0xeffffffe

08008190 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8008190:	b480      	push	{r7}
 8008192:	b085      	sub	sp, #20
 8008194:	af00      	add	r7, sp, #0
 8008196:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800819e:	2b01      	cmp	r3, #1
 80081a0:	d101      	bne.n	80081a6 <HAL_UARTEx_DisableFifoMode+0x16>
 80081a2:	2302      	movs	r3, #2
 80081a4:	e027      	b.n	80081f6 <HAL_UARTEx_DisableFifoMode+0x66>
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	2201      	movs	r2, #1
 80081aa:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	2224      	movs	r2, #36	@ 0x24
 80081b2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	681b      	ldr	r3, [r3, #0]
 80081ba:	681b      	ldr	r3, [r3, #0]
 80081bc:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	681b      	ldr	r3, [r3, #0]
 80081c2:	681a      	ldr	r2, [r3, #0]
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	681b      	ldr	r3, [r3, #0]
 80081c8:	f022 0201 	bic.w	r2, r2, #1
 80081cc:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80081ce:	68fb      	ldr	r3, [r7, #12]
 80081d0:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 80081d4:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	2200      	movs	r2, #0
 80081da:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	681b      	ldr	r3, [r3, #0]
 80081e0:	68fa      	ldr	r2, [r7, #12]
 80081e2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	2220      	movs	r2, #32
 80081e8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	2200      	movs	r2, #0
 80081f0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80081f4:	2300      	movs	r3, #0
}
 80081f6:	4618      	mov	r0, r3
 80081f8:	3714      	adds	r7, #20
 80081fa:	46bd      	mov	sp, r7
 80081fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008200:	4770      	bx	lr

08008202 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8008202:	b580      	push	{r7, lr}
 8008204:	b084      	sub	sp, #16
 8008206:	af00      	add	r7, sp, #0
 8008208:	6078      	str	r0, [r7, #4]
 800820a:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8008212:	2b01      	cmp	r3, #1
 8008214:	d101      	bne.n	800821a <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8008216:	2302      	movs	r3, #2
 8008218:	e02d      	b.n	8008276 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	2201      	movs	r2, #1
 800821e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	2224      	movs	r2, #36	@ 0x24
 8008226:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	681b      	ldr	r3, [r3, #0]
 800822e:	681b      	ldr	r3, [r3, #0]
 8008230:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	681b      	ldr	r3, [r3, #0]
 8008236:	681a      	ldr	r2, [r3, #0]
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	681b      	ldr	r3, [r3, #0]
 800823c:	f022 0201 	bic.w	r2, r2, #1
 8008240:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	681b      	ldr	r3, [r3, #0]
 8008246:	689b      	ldr	r3, [r3, #8]
 8008248:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	681b      	ldr	r3, [r3, #0]
 8008250:	683a      	ldr	r2, [r7, #0]
 8008252:	430a      	orrs	r2, r1
 8008254:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008256:	6878      	ldr	r0, [r7, #4]
 8008258:	f000 f850 	bl	80082fc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	681b      	ldr	r3, [r3, #0]
 8008260:	68fa      	ldr	r2, [r7, #12]
 8008262:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	2220      	movs	r2, #32
 8008268:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	2200      	movs	r2, #0
 8008270:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8008274:	2300      	movs	r3, #0
}
 8008276:	4618      	mov	r0, r3
 8008278:	3710      	adds	r7, #16
 800827a:	46bd      	mov	sp, r7
 800827c:	bd80      	pop	{r7, pc}

0800827e <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800827e:	b580      	push	{r7, lr}
 8008280:	b084      	sub	sp, #16
 8008282:	af00      	add	r7, sp, #0
 8008284:	6078      	str	r0, [r7, #4]
 8008286:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800828e:	2b01      	cmp	r3, #1
 8008290:	d101      	bne.n	8008296 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8008292:	2302      	movs	r3, #2
 8008294:	e02d      	b.n	80082f2 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8008296:	687b      	ldr	r3, [r7, #4]
 8008298:	2201      	movs	r2, #1
 800829a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	2224      	movs	r2, #36	@ 0x24
 80082a2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	681b      	ldr	r3, [r3, #0]
 80082aa:	681b      	ldr	r3, [r3, #0]
 80082ac:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	681b      	ldr	r3, [r3, #0]
 80082b2:	681a      	ldr	r2, [r3, #0]
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	681b      	ldr	r3, [r3, #0]
 80082b8:	f022 0201 	bic.w	r2, r2, #1
 80082bc:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80082be:	687b      	ldr	r3, [r7, #4]
 80082c0:	681b      	ldr	r3, [r3, #0]
 80082c2:	689b      	ldr	r3, [r3, #8]
 80082c4:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	681b      	ldr	r3, [r3, #0]
 80082cc:	683a      	ldr	r2, [r7, #0]
 80082ce:	430a      	orrs	r2, r1
 80082d0:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80082d2:	6878      	ldr	r0, [r7, #4]
 80082d4:	f000 f812 	bl	80082fc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	681b      	ldr	r3, [r3, #0]
 80082dc:	68fa      	ldr	r2, [r7, #12]
 80082de:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	2220      	movs	r2, #32
 80082e4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	2200      	movs	r2, #0
 80082ec:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80082f0:	2300      	movs	r3, #0
}
 80082f2:	4618      	mov	r0, r3
 80082f4:	3710      	adds	r7, #16
 80082f6:	46bd      	mov	sp, r7
 80082f8:	bd80      	pop	{r7, pc}
	...

080082fc <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80082fc:	b480      	push	{r7}
 80082fe:	b085      	sub	sp, #20
 8008300:	af00      	add	r7, sp, #0
 8008302:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008308:	2b00      	cmp	r3, #0
 800830a:	d108      	bne.n	800831e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	2201      	movs	r2, #1
 8008310:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	2201      	movs	r2, #1
 8008318:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800831c:	e031      	b.n	8008382 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800831e:	2310      	movs	r3, #16
 8008320:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8008322:	2310      	movs	r3, #16
 8008324:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8008326:	687b      	ldr	r3, [r7, #4]
 8008328:	681b      	ldr	r3, [r3, #0]
 800832a:	689b      	ldr	r3, [r3, #8]
 800832c:	0e5b      	lsrs	r3, r3, #25
 800832e:	b2db      	uxtb	r3, r3
 8008330:	f003 0307 	and.w	r3, r3, #7
 8008334:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	681b      	ldr	r3, [r3, #0]
 800833a:	689b      	ldr	r3, [r3, #8]
 800833c:	0f5b      	lsrs	r3, r3, #29
 800833e:	b2db      	uxtb	r3, r3
 8008340:	f003 0307 	and.w	r3, r3, #7
 8008344:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008346:	7bbb      	ldrb	r3, [r7, #14]
 8008348:	7b3a      	ldrb	r2, [r7, #12]
 800834a:	4911      	ldr	r1, [pc, #68]	@ (8008390 <UARTEx_SetNbDataToProcess+0x94>)
 800834c:	5c8a      	ldrb	r2, [r1, r2]
 800834e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8008352:	7b3a      	ldrb	r2, [r7, #12]
 8008354:	490f      	ldr	r1, [pc, #60]	@ (8008394 <UARTEx_SetNbDataToProcess+0x98>)
 8008356:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008358:	fb93 f3f2 	sdiv	r3, r3, r2
 800835c:	b29a      	uxth	r2, r3
 800835e:	687b      	ldr	r3, [r7, #4]
 8008360:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008364:	7bfb      	ldrb	r3, [r7, #15]
 8008366:	7b7a      	ldrb	r2, [r7, #13]
 8008368:	4909      	ldr	r1, [pc, #36]	@ (8008390 <UARTEx_SetNbDataToProcess+0x94>)
 800836a:	5c8a      	ldrb	r2, [r1, r2]
 800836c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8008370:	7b7a      	ldrb	r2, [r7, #13]
 8008372:	4908      	ldr	r1, [pc, #32]	@ (8008394 <UARTEx_SetNbDataToProcess+0x98>)
 8008374:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008376:	fb93 f3f2 	sdiv	r3, r3, r2
 800837a:	b29a      	uxth	r2, r3
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8008382:	bf00      	nop
 8008384:	3714      	adds	r7, #20
 8008386:	46bd      	mov	sp, r7
 8008388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800838c:	4770      	bx	lr
 800838e:	bf00      	nop
 8008390:	0800b314 	.word	0x0800b314
 8008394:	0800b31c 	.word	0x0800b31c

08008398 <checkint>:
 8008398:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 800839c:	2b7e      	cmp	r3, #126	@ 0x7e
 800839e:	d910      	bls.n	80083c2 <checkint+0x2a>
 80083a0:	2b96      	cmp	r3, #150	@ 0x96
 80083a2:	d80c      	bhi.n	80083be <checkint+0x26>
 80083a4:	2201      	movs	r2, #1
 80083a6:	f1c3 0396 	rsb	r3, r3, #150	@ 0x96
 80083aa:	fa02 f303 	lsl.w	r3, r2, r3
 80083ae:	1e5a      	subs	r2, r3, #1
 80083b0:	4202      	tst	r2, r0
 80083b2:	d106      	bne.n	80083c2 <checkint+0x2a>
 80083b4:	4203      	tst	r3, r0
 80083b6:	bf14      	ite	ne
 80083b8:	2001      	movne	r0, #1
 80083ba:	2002      	moveq	r0, #2
 80083bc:	4770      	bx	lr
 80083be:	2002      	movs	r0, #2
 80083c0:	4770      	bx	lr
 80083c2:	2000      	movs	r0, #0
 80083c4:	4770      	bx	lr
	...

080083c8 <powf>:
 80083c8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80083ca:	ee10 1a10 	vmov	r1, s0
 80083ce:	ee10 4a90 	vmov	r4, s1
 80083d2:	f5a1 0200 	sub.w	r2, r1, #8388608	@ 0x800000
 80083d6:	0063      	lsls	r3, r4, #1
 80083d8:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 80083dc:	eef0 7a40 	vmov.f32	s15, s0
 80083e0:	eeb0 7a60 	vmov.f32	s14, s1
 80083e4:	f103 30ff 	add.w	r0, r3, #4294967295
 80083e8:	f06f 7280 	mvn.w	r2, #16777216	@ 0x1000000
 80083ec:	d252      	bcs.n	8008494 <powf+0xcc>
 80083ee:	4290      	cmp	r0, r2
 80083f0:	d258      	bcs.n	80084a4 <powf+0xdc>
 80083f2:	2000      	movs	r0, #0
 80083f4:	f101 4340 	add.w	r3, r1, #3221225472	@ 0xc0000000
 80083f8:	f503 034d 	add.w	r3, r3, #13434880	@ 0xcd0000
 80083fc:	4a9e      	ldr	r2, [pc, #632]	@ (8008678 <powf+0x2b0>)
 80083fe:	eebf 2b00 	vmov.f64	d2, #240	@ 0xbf800000 -1.0
 8008402:	f3c3 44c3 	ubfx	r4, r3, #19, #4
 8008406:	f36f 0316 	bfc	r3, #0, #23
 800840a:	1ac9      	subs	r1, r1, r3
 800840c:	eb02 1404 	add.w	r4, r2, r4, lsl #4
 8008410:	ee07 1a90 	vmov	s15, r1
 8008414:	ed94 5b02 	vldr	d5, [r4, #8]
 8008418:	ed94 4b00 	vldr	d4, [r4]
 800841c:	15db      	asrs	r3, r3, #23
 800841e:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8008422:	ee07 3a90 	vmov	s15, r3
 8008426:	eea4 2b06 	vfma.f64	d2, d4, d6
 800842a:	ed92 1b42 	vldr	d1, [r2, #264]	@ 0x108
 800842e:	ee22 4b02 	vmul.f64	d4, d2, d2
 8008432:	ee24 0b04 	vmul.f64	d0, d4, d4
 8008436:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 800843a:	ee36 6b05 	vadd.f64	d6, d6, d5
 800843e:	ed92 5b40 	vldr	d5, [r2, #256]	@ 0x100
 8008442:	ed92 3b44 	vldr	d3, [r2, #272]	@ 0x110
 8008446:	eea2 1b05 	vfma.f64	d1, d2, d5
 800844a:	ed92 5b46 	vldr	d5, [r2, #280]	@ 0x118
 800844e:	eea2 5b03 	vfma.f64	d5, d2, d3
 8008452:	ed92 3b48 	vldr	d3, [r2, #288]	@ 0x120
 8008456:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
 800845a:	eea2 6b03 	vfma.f64	d6, d2, d3
 800845e:	eea4 6b05 	vfma.f64	d6, d4, d5
 8008462:	eea1 6b00 	vfma.f64	d6, d1, d0
 8008466:	ee27 7b06 	vmul.f64	d7, d7, d6
 800846a:	ee17 3a90 	vmov	r3, s15
 800846e:	f3c3 32cf 	ubfx	r2, r3, #15, #16
 8008472:	f248 03bf 	movw	r3, #32959	@ 0x80bf
 8008476:	429a      	cmp	r2, r3
 8008478:	f0c0 8098 	bcc.w	80085ac <powf+0x1e4>
 800847c:	ed9f 6b76 	vldr	d6, [pc, #472]	@ 8008658 <powf+0x290>
 8008480:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8008484:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008488:	dd79      	ble.n	800857e <powf+0x1b6>
 800848a:	b003      	add	sp, #12
 800848c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008490:	f000 b920 	b.w	80086d4 <__math_oflowf>
 8008494:	4290      	cmp	r0, r2
 8008496:	d330      	bcc.n	80084fa <powf+0x132>
 8008498:	b12b      	cbz	r3, 80084a6 <powf+0xde>
 800849a:	0049      	lsls	r1, r1, #1
 800849c:	f1b1 4f7f 	cmp.w	r1, #4278190080	@ 0xff000000
 80084a0:	d808      	bhi.n	80084b4 <powf+0xec>
 80084a2:	e015      	b.n	80084d0 <powf+0x108>
 80084a4:	b953      	cbnz	r3, 80084bc <powf+0xf4>
 80084a6:	f481 0180 	eor.w	r1, r1, #4194304	@ 0x400000
 80084aa:	0049      	lsls	r1, r1, #1
 80084ac:	f511 0f00 	cmn.w	r1, #8388608	@ 0x800000
 80084b0:	f240 80ca 	bls.w	8008648 <powf+0x280>
 80084b4:	ee37 0a87 	vadd.f32	s0, s15, s14
 80084b8:	b003      	add	sp, #12
 80084ba:	bd30      	pop	{r4, r5, pc}
 80084bc:	f1b1 5f7e 	cmp.w	r1, #1065353216	@ 0x3f800000
 80084c0:	d105      	bne.n	80084ce <powf+0x106>
 80084c2:	f484 0480 	eor.w	r4, r4, #4194304	@ 0x400000
 80084c6:	0064      	lsls	r4, r4, #1
 80084c8:	f514 0f00 	cmn.w	r4, #8388608	@ 0x800000
 80084cc:	e7f0      	b.n	80084b0 <powf+0xe8>
 80084ce:	0049      	lsls	r1, r1, #1
 80084d0:	f1b3 4f7f 	cmp.w	r3, #4278190080	@ 0xff000000
 80084d4:	d1ee      	bne.n	80084b4 <powf+0xec>
 80084d6:	f1b1 4ffe 	cmp.w	r1, #2130706432	@ 0x7f000000
 80084da:	f000 80b5 	beq.w	8008648 <powf+0x280>
 80084de:	f1b1 4ffe 	cmp.w	r1, #2130706432	@ 0x7f000000
 80084e2:	ea6f 0404 	mvn.w	r4, r4
 80084e6:	bf34      	ite	cc
 80084e8:	2100      	movcc	r1, #0
 80084ea:	2101      	movcs	r1, #1
 80084ec:	0fe4      	lsrs	r4, r4, #31
 80084ee:	42a1      	cmp	r1, r4
 80084f0:	f040 80ad 	bne.w	800864e <powf+0x286>
 80084f4:	ee27 0a07 	vmul.f32	s0, s14, s14
 80084f8:	e7de      	b.n	80084b8 <powf+0xf0>
 80084fa:	004d      	lsls	r5, r1, #1
 80084fc:	1e6b      	subs	r3, r5, #1
 80084fe:	4293      	cmp	r3, r2
 8008500:	d31b      	bcc.n	800853a <powf+0x172>
 8008502:	2900      	cmp	r1, #0
 8008504:	ee20 0a00 	vmul.f32	s0, s0, s0
 8008508:	da0e      	bge.n	8008528 <powf+0x160>
 800850a:	4620      	mov	r0, r4
 800850c:	f7ff ff44 	bl	8008398 <checkint>
 8008510:	2801      	cmp	r0, #1
 8008512:	d109      	bne.n	8008528 <powf+0x160>
 8008514:	eeb1 0a40 	vneg.f32	s0, s0
 8008518:	b945      	cbnz	r5, 800852c <powf+0x164>
 800851a:	2c00      	cmp	r4, #0
 800851c:	dacc      	bge.n	80084b8 <powf+0xf0>
 800851e:	b003      	add	sp, #12
 8008520:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008524:	f000 b8dc 	b.w	80086e0 <__math_divzerof>
 8008528:	2000      	movs	r0, #0
 800852a:	e7f5      	b.n	8008518 <powf+0x150>
 800852c:	2c00      	cmp	r4, #0
 800852e:	dac3      	bge.n	80084b8 <powf+0xf0>
 8008530:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 8008534:	ee87 0a80 	vdiv.f32	s0, s15, s0
 8008538:	e7be      	b.n	80084b8 <powf+0xf0>
 800853a:	2900      	cmp	r1, #0
 800853c:	da1d      	bge.n	800857a <powf+0x1b2>
 800853e:	4620      	mov	r0, r4
 8008540:	f7ff ff2a 	bl	8008398 <checkint>
 8008544:	b920      	cbnz	r0, 8008550 <powf+0x188>
 8008546:	b003      	add	sp, #12
 8008548:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800854c:	f000 b8da 	b.w	8008704 <__math_invalidf>
 8008550:	1e43      	subs	r3, r0, #1
 8008552:	4258      	negs	r0, r3
 8008554:	4158      	adcs	r0, r3
 8008556:	0400      	lsls	r0, r0, #16
 8008558:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800855c:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 8008560:	f4bf af48 	bcs.w	80083f4 <powf+0x2c>
 8008564:	eddf 6a45 	vldr	s13, [pc, #276]	@ 800867c <powf+0x2b4>
 8008568:	ee27 0aa6 	vmul.f32	s0, s15, s13
 800856c:	ee10 3a10 	vmov	r3, s0
 8008570:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8008574:	f1a3 6138 	sub.w	r1, r3, #192937984	@ 0xb800000
 8008578:	e73c      	b.n	80083f4 <powf+0x2c>
 800857a:	2000      	movs	r0, #0
 800857c:	e7ee      	b.n	800855c <powf+0x194>
 800857e:	ed9f 6b38 	vldr	d6, [pc, #224]	@ 8008660 <powf+0x298>
 8008582:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8008586:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800858a:	dd45      	ble.n	8008618 <powf+0x250>
 800858c:	f04f 534c 	mov.w	r3, #855638016	@ 0x33000000
 8008590:	b3d0      	cbz	r0, 8008608 <powf+0x240>
 8008592:	9301      	str	r3, [sp, #4]
 8008594:	eddd 6a01 	vldr	s13, [sp, #4]
 8008598:	eebf 6a00 	vmov.f32	s12, #240	@ 0xbf800000 -1.0
 800859c:	ee76 6a66 	vsub.f32	s13, s12, s13
 80085a0:	eef4 6a46 	vcmp.f32	s13, s12
 80085a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80085a8:	f47f af6f 	bne.w	800848a <powf+0xc2>
 80085ac:	eeb7 0b00 	vmov.f64	d0, #112	@ 0x3f800000  1.0
 80085b0:	4b33      	ldr	r3, [pc, #204]	@ (8008680 <powf+0x2b8>)
 80085b2:	ed93 5b40 	vldr	d5, [r3, #256]	@ 0x100
 80085b6:	ee37 6b05 	vadd.f64	d6, d7, d5
 80085ba:	ee16 2a10 	vmov	r2, s12
 80085be:	ee36 6b45 	vsub.f64	d6, d6, d5
 80085c2:	f002 011f 	and.w	r1, r2, #31
 80085c6:	ee37 7b46 	vsub.f64	d7, d7, d6
 80085ca:	ed93 5b42 	vldr	d5, [r3, #264]	@ 0x108
 80085ce:	ee27 4b07 	vmul.f64	d4, d7, d7
 80085d2:	ed93 6b44 	vldr	d6, [r3, #272]	@ 0x110
 80085d6:	eb03 05c1 	add.w	r5, r3, r1, lsl #3
 80085da:	f853 4031 	ldr.w	r4, [r3, r1, lsl #3]
 80085de:	eea7 6b05 	vfma.f64	d6, d7, d5
 80085e2:	686d      	ldr	r5, [r5, #4]
 80085e4:	ed93 5b46 	vldr	d5, [r3, #280]	@ 0x118
 80085e8:	1880      	adds	r0, r0, r2
 80085ea:	2100      	movs	r1, #0
 80085ec:	190a      	adds	r2, r1, r4
 80085ee:	eb05 33c0 	add.w	r3, r5, r0, lsl #15
 80085f2:	eea7 0b05 	vfma.f64	d0, d7, d5
 80085f6:	ec43 2b17 	vmov	d7, r2, r3
 80085fa:	eea6 0b04 	vfma.f64	d0, d6, d4
 80085fe:	ee20 0b07 	vmul.f64	d0, d0, d7
 8008602:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 8008606:	e757      	b.n	80084b8 <powf+0xf0>
 8008608:	9300      	str	r3, [sp, #0]
 800860a:	eddd 6a00 	vldr	s13, [sp]
 800860e:	eeb7 6a00 	vmov.f32	s12, #112	@ 0x3f800000  1.0
 8008612:	ee76 6a86 	vadd.f32	s13, s13, s12
 8008616:	e7c3      	b.n	80085a0 <powf+0x1d8>
 8008618:	ed9f 6b13 	vldr	d6, [pc, #76]	@ 8008668 <powf+0x2a0>
 800861c:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8008620:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008624:	d804      	bhi.n	8008630 <powf+0x268>
 8008626:	b003      	add	sp, #12
 8008628:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800862c:	f000 b846 	b.w	80086bc <__math_uflowf>
 8008630:	ed9f 6b0f 	vldr	d6, [pc, #60]	@ 8008670 <powf+0x2a8>
 8008634:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8008638:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800863c:	d5b6      	bpl.n	80085ac <powf+0x1e4>
 800863e:	b003      	add	sp, #12
 8008640:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008644:	f000 b840 	b.w	80086c8 <__math_may_uflowf>
 8008648:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 800864c:	e734      	b.n	80084b8 <powf+0xf0>
 800864e:	ed9f 0a0d 	vldr	s0, [pc, #52]	@ 8008684 <powf+0x2bc>
 8008652:	e731      	b.n	80084b8 <powf+0xf0>
 8008654:	f3af 8000 	nop.w
 8008658:	ffd1d571 	.word	0xffd1d571
 800865c:	405fffff 	.word	0x405fffff
 8008660:	ffa3aae2 	.word	0xffa3aae2
 8008664:	405fffff 	.word	0x405fffff
 8008668:	00000000 	.word	0x00000000
 800866c:	c062c000 	.word	0xc062c000
 8008670:	00000000 	.word	0x00000000
 8008674:	c062a000 	.word	0xc062a000
 8008678:	0800b470 	.word	0x0800b470
 800867c:	4b000000 	.word	0x4b000000
 8008680:	0800b328 	.word	0x0800b328
 8008684:	00000000 	.word	0x00000000

08008688 <with_errnof>:
 8008688:	b510      	push	{r4, lr}
 800868a:	ed2d 8b02 	vpush	{d8}
 800868e:	eeb0 8a40 	vmov.f32	s16, s0
 8008692:	4604      	mov	r4, r0
 8008694:	f000 ff8a 	bl	80095ac <__errno>
 8008698:	eeb0 0a48 	vmov.f32	s0, s16
 800869c:	ecbd 8b02 	vpop	{d8}
 80086a0:	6004      	str	r4, [r0, #0]
 80086a2:	bd10      	pop	{r4, pc}

080086a4 <xflowf>:
 80086a4:	b130      	cbz	r0, 80086b4 <xflowf+0x10>
 80086a6:	eef1 7a40 	vneg.f32	s15, s0
 80086aa:	ee27 0a80 	vmul.f32	s0, s15, s0
 80086ae:	2022      	movs	r0, #34	@ 0x22
 80086b0:	f7ff bfea 	b.w	8008688 <with_errnof>
 80086b4:	eef0 7a40 	vmov.f32	s15, s0
 80086b8:	e7f7      	b.n	80086aa <xflowf+0x6>
	...

080086bc <__math_uflowf>:
 80086bc:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 80086c4 <__math_uflowf+0x8>
 80086c0:	f7ff bff0 	b.w	80086a4 <xflowf>
 80086c4:	10000000 	.word	0x10000000

080086c8 <__math_may_uflowf>:
 80086c8:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 80086d0 <__math_may_uflowf+0x8>
 80086cc:	f7ff bfea 	b.w	80086a4 <xflowf>
 80086d0:	1a200000 	.word	0x1a200000

080086d4 <__math_oflowf>:
 80086d4:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 80086dc <__math_oflowf+0x8>
 80086d8:	f7ff bfe4 	b.w	80086a4 <xflowf>
 80086dc:	70000000 	.word	0x70000000

080086e0 <__math_divzerof>:
 80086e0:	ed9f 0a07 	vldr	s0, [pc, #28]	@ 8008700 <__math_divzerof+0x20>
 80086e4:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 80086e8:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 80086ec:	2800      	cmp	r0, #0
 80086ee:	f04f 0022 	mov.w	r0, #34	@ 0x22
 80086f2:	fe47 7a87 	vseleq.f32	s15, s15, s14
 80086f6:	ee87 0a80 	vdiv.f32	s0, s15, s0
 80086fa:	f7ff bfc5 	b.w	8008688 <with_errnof>
 80086fe:	bf00      	nop
 8008700:	00000000 	.word	0x00000000

08008704 <__math_invalidf>:
 8008704:	eef0 7a40 	vmov.f32	s15, s0
 8008708:	ee30 7a40 	vsub.f32	s14, s0, s0
 800870c:	eef4 7a67 	vcmp.f32	s15, s15
 8008710:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008714:	ee87 0a07 	vdiv.f32	s0, s14, s14
 8008718:	d602      	bvs.n	8008720 <__math_invalidf+0x1c>
 800871a:	2021      	movs	r0, #33	@ 0x21
 800871c:	f7ff bfb4 	b.w	8008688 <with_errnof>
 8008720:	4770      	bx	lr

08008722 <__cvt>:
 8008722:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008724:	ed2d 8b02 	vpush	{d8}
 8008728:	eeb0 8b40 	vmov.f64	d8, d0
 800872c:	b085      	sub	sp, #20
 800872e:	4617      	mov	r7, r2
 8008730:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
 8008732:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8008734:	ee18 2a90 	vmov	r2, s17
 8008738:	f025 0520 	bic.w	r5, r5, #32
 800873c:	2a00      	cmp	r2, #0
 800873e:	bfb6      	itet	lt
 8008740:	222d      	movlt	r2, #45	@ 0x2d
 8008742:	2200      	movge	r2, #0
 8008744:	eeb1 8b40 	vneglt.f64	d8, d0
 8008748:	2d46      	cmp	r5, #70	@ 0x46
 800874a:	460c      	mov	r4, r1
 800874c:	701a      	strb	r2, [r3, #0]
 800874e:	d004      	beq.n	800875a <__cvt+0x38>
 8008750:	2d45      	cmp	r5, #69	@ 0x45
 8008752:	d100      	bne.n	8008756 <__cvt+0x34>
 8008754:	3401      	adds	r4, #1
 8008756:	2102      	movs	r1, #2
 8008758:	e000      	b.n	800875c <__cvt+0x3a>
 800875a:	2103      	movs	r1, #3
 800875c:	ab03      	add	r3, sp, #12
 800875e:	9301      	str	r3, [sp, #4]
 8008760:	ab02      	add	r3, sp, #8
 8008762:	9300      	str	r3, [sp, #0]
 8008764:	4622      	mov	r2, r4
 8008766:	4633      	mov	r3, r6
 8008768:	eeb0 0b48 	vmov.f64	d0, d8
 800876c:	f000 ffd4 	bl	8009718 <_dtoa_r>
 8008770:	2d47      	cmp	r5, #71	@ 0x47
 8008772:	d114      	bne.n	800879e <__cvt+0x7c>
 8008774:	07fb      	lsls	r3, r7, #31
 8008776:	d50a      	bpl.n	800878e <__cvt+0x6c>
 8008778:	1902      	adds	r2, r0, r4
 800877a:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800877e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008782:	bf08      	it	eq
 8008784:	9203      	streq	r2, [sp, #12]
 8008786:	2130      	movs	r1, #48	@ 0x30
 8008788:	9b03      	ldr	r3, [sp, #12]
 800878a:	4293      	cmp	r3, r2
 800878c:	d319      	bcc.n	80087c2 <__cvt+0xa0>
 800878e:	9b03      	ldr	r3, [sp, #12]
 8008790:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8008792:	1a1b      	subs	r3, r3, r0
 8008794:	6013      	str	r3, [r2, #0]
 8008796:	b005      	add	sp, #20
 8008798:	ecbd 8b02 	vpop	{d8}
 800879c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800879e:	2d46      	cmp	r5, #70	@ 0x46
 80087a0:	eb00 0204 	add.w	r2, r0, r4
 80087a4:	d1e9      	bne.n	800877a <__cvt+0x58>
 80087a6:	7803      	ldrb	r3, [r0, #0]
 80087a8:	2b30      	cmp	r3, #48	@ 0x30
 80087aa:	d107      	bne.n	80087bc <__cvt+0x9a>
 80087ac:	eeb5 8b40 	vcmp.f64	d8, #0.0
 80087b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80087b4:	bf1c      	itt	ne
 80087b6:	f1c4 0401 	rsbne	r4, r4, #1
 80087ba:	6034      	strne	r4, [r6, #0]
 80087bc:	6833      	ldr	r3, [r6, #0]
 80087be:	441a      	add	r2, r3
 80087c0:	e7db      	b.n	800877a <__cvt+0x58>
 80087c2:	1c5c      	adds	r4, r3, #1
 80087c4:	9403      	str	r4, [sp, #12]
 80087c6:	7019      	strb	r1, [r3, #0]
 80087c8:	e7de      	b.n	8008788 <__cvt+0x66>

080087ca <__exponent>:
 80087ca:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80087cc:	2900      	cmp	r1, #0
 80087ce:	bfba      	itte	lt
 80087d0:	4249      	neglt	r1, r1
 80087d2:	232d      	movlt	r3, #45	@ 0x2d
 80087d4:	232b      	movge	r3, #43	@ 0x2b
 80087d6:	2909      	cmp	r1, #9
 80087d8:	7002      	strb	r2, [r0, #0]
 80087da:	7043      	strb	r3, [r0, #1]
 80087dc:	dd29      	ble.n	8008832 <__exponent+0x68>
 80087de:	f10d 0307 	add.w	r3, sp, #7
 80087e2:	461d      	mov	r5, r3
 80087e4:	270a      	movs	r7, #10
 80087e6:	461a      	mov	r2, r3
 80087e8:	fbb1 f6f7 	udiv	r6, r1, r7
 80087ec:	fb07 1416 	mls	r4, r7, r6, r1
 80087f0:	3430      	adds	r4, #48	@ 0x30
 80087f2:	f802 4c01 	strb.w	r4, [r2, #-1]
 80087f6:	460c      	mov	r4, r1
 80087f8:	2c63      	cmp	r4, #99	@ 0x63
 80087fa:	f103 33ff 	add.w	r3, r3, #4294967295
 80087fe:	4631      	mov	r1, r6
 8008800:	dcf1      	bgt.n	80087e6 <__exponent+0x1c>
 8008802:	3130      	adds	r1, #48	@ 0x30
 8008804:	1e94      	subs	r4, r2, #2
 8008806:	f803 1c01 	strb.w	r1, [r3, #-1]
 800880a:	1c41      	adds	r1, r0, #1
 800880c:	4623      	mov	r3, r4
 800880e:	42ab      	cmp	r3, r5
 8008810:	d30a      	bcc.n	8008828 <__exponent+0x5e>
 8008812:	f10d 0309 	add.w	r3, sp, #9
 8008816:	1a9b      	subs	r3, r3, r2
 8008818:	42ac      	cmp	r4, r5
 800881a:	bf88      	it	hi
 800881c:	2300      	movhi	r3, #0
 800881e:	3302      	adds	r3, #2
 8008820:	4403      	add	r3, r0
 8008822:	1a18      	subs	r0, r3, r0
 8008824:	b003      	add	sp, #12
 8008826:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008828:	f813 6b01 	ldrb.w	r6, [r3], #1
 800882c:	f801 6f01 	strb.w	r6, [r1, #1]!
 8008830:	e7ed      	b.n	800880e <__exponent+0x44>
 8008832:	2330      	movs	r3, #48	@ 0x30
 8008834:	3130      	adds	r1, #48	@ 0x30
 8008836:	7083      	strb	r3, [r0, #2]
 8008838:	70c1      	strb	r1, [r0, #3]
 800883a:	1d03      	adds	r3, r0, #4
 800883c:	e7f1      	b.n	8008822 <__exponent+0x58>
	...

08008840 <_printf_float>:
 8008840:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008844:	b08d      	sub	sp, #52	@ 0x34
 8008846:	460c      	mov	r4, r1
 8008848:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800884c:	4616      	mov	r6, r2
 800884e:	461f      	mov	r7, r3
 8008850:	4605      	mov	r5, r0
 8008852:	f000 fe61 	bl	8009518 <_localeconv_r>
 8008856:	f8d0 b000 	ldr.w	fp, [r0]
 800885a:	4658      	mov	r0, fp
 800885c:	f7f7 fd90 	bl	8000380 <strlen>
 8008860:	2300      	movs	r3, #0
 8008862:	930a      	str	r3, [sp, #40]	@ 0x28
 8008864:	f8d8 3000 	ldr.w	r3, [r8]
 8008868:	f894 9018 	ldrb.w	r9, [r4, #24]
 800886c:	6822      	ldr	r2, [r4, #0]
 800886e:	9005      	str	r0, [sp, #20]
 8008870:	3307      	adds	r3, #7
 8008872:	f023 0307 	bic.w	r3, r3, #7
 8008876:	f103 0108 	add.w	r1, r3, #8
 800887a:	f8c8 1000 	str.w	r1, [r8]
 800887e:	ed93 0b00 	vldr	d0, [r3]
 8008882:	ed9f 6b97 	vldr	d6, [pc, #604]	@ 8008ae0 <_printf_float+0x2a0>
 8008886:	eeb0 7bc0 	vabs.f64	d7, d0
 800888a:	eeb4 7b46 	vcmp.f64	d7, d6
 800888e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008892:	ed84 0b12 	vstr	d0, [r4, #72]	@ 0x48
 8008896:	dd24      	ble.n	80088e2 <_printf_float+0xa2>
 8008898:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 800889c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80088a0:	d502      	bpl.n	80088a8 <_printf_float+0x68>
 80088a2:	232d      	movs	r3, #45	@ 0x2d
 80088a4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80088a8:	498f      	ldr	r1, [pc, #572]	@ (8008ae8 <_printf_float+0x2a8>)
 80088aa:	4b90      	ldr	r3, [pc, #576]	@ (8008aec <_printf_float+0x2ac>)
 80088ac:	f1b9 0f47 	cmp.w	r9, #71	@ 0x47
 80088b0:	bf8c      	ite	hi
 80088b2:	4688      	movhi	r8, r1
 80088b4:	4698      	movls	r8, r3
 80088b6:	f022 0204 	bic.w	r2, r2, #4
 80088ba:	2303      	movs	r3, #3
 80088bc:	6123      	str	r3, [r4, #16]
 80088be:	6022      	str	r2, [r4, #0]
 80088c0:	f04f 0a00 	mov.w	sl, #0
 80088c4:	9700      	str	r7, [sp, #0]
 80088c6:	4633      	mov	r3, r6
 80088c8:	aa0b      	add	r2, sp, #44	@ 0x2c
 80088ca:	4621      	mov	r1, r4
 80088cc:	4628      	mov	r0, r5
 80088ce:	f000 f9d1 	bl	8008c74 <_printf_common>
 80088d2:	3001      	adds	r0, #1
 80088d4:	f040 8089 	bne.w	80089ea <_printf_float+0x1aa>
 80088d8:	f04f 30ff 	mov.w	r0, #4294967295
 80088dc:	b00d      	add	sp, #52	@ 0x34
 80088de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80088e2:	eeb4 0b40 	vcmp.f64	d0, d0
 80088e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80088ea:	d709      	bvc.n	8008900 <_printf_float+0xc0>
 80088ec:	ee10 3a90 	vmov	r3, s1
 80088f0:	2b00      	cmp	r3, #0
 80088f2:	bfbc      	itt	lt
 80088f4:	232d      	movlt	r3, #45	@ 0x2d
 80088f6:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 80088fa:	497d      	ldr	r1, [pc, #500]	@ (8008af0 <_printf_float+0x2b0>)
 80088fc:	4b7d      	ldr	r3, [pc, #500]	@ (8008af4 <_printf_float+0x2b4>)
 80088fe:	e7d5      	b.n	80088ac <_printf_float+0x6c>
 8008900:	6863      	ldr	r3, [r4, #4]
 8008902:	1c59      	adds	r1, r3, #1
 8008904:	f009 0adf 	and.w	sl, r9, #223	@ 0xdf
 8008908:	d139      	bne.n	800897e <_printf_float+0x13e>
 800890a:	2306      	movs	r3, #6
 800890c:	6063      	str	r3, [r4, #4]
 800890e:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8008912:	2300      	movs	r3, #0
 8008914:	6022      	str	r2, [r4, #0]
 8008916:	9303      	str	r3, [sp, #12]
 8008918:	ab0a      	add	r3, sp, #40	@ 0x28
 800891a:	e9cd 9301 	strd	r9, r3, [sp, #4]
 800891e:	ab09      	add	r3, sp, #36	@ 0x24
 8008920:	9300      	str	r3, [sp, #0]
 8008922:	6861      	ldr	r1, [r4, #4]
 8008924:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8008928:	4628      	mov	r0, r5
 800892a:	f7ff fefa 	bl	8008722 <__cvt>
 800892e:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8008932:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8008934:	4680      	mov	r8, r0
 8008936:	d129      	bne.n	800898c <_printf_float+0x14c>
 8008938:	1cc8      	adds	r0, r1, #3
 800893a:	db02      	blt.n	8008942 <_printf_float+0x102>
 800893c:	6863      	ldr	r3, [r4, #4]
 800893e:	4299      	cmp	r1, r3
 8008940:	dd41      	ble.n	80089c6 <_printf_float+0x186>
 8008942:	f1a9 0902 	sub.w	r9, r9, #2
 8008946:	fa5f f989 	uxtb.w	r9, r9
 800894a:	3901      	subs	r1, #1
 800894c:	464a      	mov	r2, r9
 800894e:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8008952:	9109      	str	r1, [sp, #36]	@ 0x24
 8008954:	f7ff ff39 	bl	80087ca <__exponent>
 8008958:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800895a:	1813      	adds	r3, r2, r0
 800895c:	2a01      	cmp	r2, #1
 800895e:	4682      	mov	sl, r0
 8008960:	6123      	str	r3, [r4, #16]
 8008962:	dc02      	bgt.n	800896a <_printf_float+0x12a>
 8008964:	6822      	ldr	r2, [r4, #0]
 8008966:	07d2      	lsls	r2, r2, #31
 8008968:	d501      	bpl.n	800896e <_printf_float+0x12e>
 800896a:	3301      	adds	r3, #1
 800896c:	6123      	str	r3, [r4, #16]
 800896e:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8008972:	2b00      	cmp	r3, #0
 8008974:	d0a6      	beq.n	80088c4 <_printf_float+0x84>
 8008976:	232d      	movs	r3, #45	@ 0x2d
 8008978:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800897c:	e7a2      	b.n	80088c4 <_printf_float+0x84>
 800897e:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8008982:	d1c4      	bne.n	800890e <_printf_float+0xce>
 8008984:	2b00      	cmp	r3, #0
 8008986:	d1c2      	bne.n	800890e <_printf_float+0xce>
 8008988:	2301      	movs	r3, #1
 800898a:	e7bf      	b.n	800890c <_printf_float+0xcc>
 800898c:	f1b9 0f65 	cmp.w	r9, #101	@ 0x65
 8008990:	d9db      	bls.n	800894a <_printf_float+0x10a>
 8008992:	f1b9 0f66 	cmp.w	r9, #102	@ 0x66
 8008996:	d118      	bne.n	80089ca <_printf_float+0x18a>
 8008998:	2900      	cmp	r1, #0
 800899a:	6863      	ldr	r3, [r4, #4]
 800899c:	dd0b      	ble.n	80089b6 <_printf_float+0x176>
 800899e:	6121      	str	r1, [r4, #16]
 80089a0:	b913      	cbnz	r3, 80089a8 <_printf_float+0x168>
 80089a2:	6822      	ldr	r2, [r4, #0]
 80089a4:	07d0      	lsls	r0, r2, #31
 80089a6:	d502      	bpl.n	80089ae <_printf_float+0x16e>
 80089a8:	3301      	adds	r3, #1
 80089aa:	440b      	add	r3, r1
 80089ac:	6123      	str	r3, [r4, #16]
 80089ae:	65a1      	str	r1, [r4, #88]	@ 0x58
 80089b0:	f04f 0a00 	mov.w	sl, #0
 80089b4:	e7db      	b.n	800896e <_printf_float+0x12e>
 80089b6:	b913      	cbnz	r3, 80089be <_printf_float+0x17e>
 80089b8:	6822      	ldr	r2, [r4, #0]
 80089ba:	07d2      	lsls	r2, r2, #31
 80089bc:	d501      	bpl.n	80089c2 <_printf_float+0x182>
 80089be:	3302      	adds	r3, #2
 80089c0:	e7f4      	b.n	80089ac <_printf_float+0x16c>
 80089c2:	2301      	movs	r3, #1
 80089c4:	e7f2      	b.n	80089ac <_printf_float+0x16c>
 80089c6:	f04f 0967 	mov.w	r9, #103	@ 0x67
 80089ca:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80089cc:	4299      	cmp	r1, r3
 80089ce:	db05      	blt.n	80089dc <_printf_float+0x19c>
 80089d0:	6823      	ldr	r3, [r4, #0]
 80089d2:	6121      	str	r1, [r4, #16]
 80089d4:	07d8      	lsls	r0, r3, #31
 80089d6:	d5ea      	bpl.n	80089ae <_printf_float+0x16e>
 80089d8:	1c4b      	adds	r3, r1, #1
 80089da:	e7e7      	b.n	80089ac <_printf_float+0x16c>
 80089dc:	2900      	cmp	r1, #0
 80089de:	bfd4      	ite	le
 80089e0:	f1c1 0202 	rsble	r2, r1, #2
 80089e4:	2201      	movgt	r2, #1
 80089e6:	4413      	add	r3, r2
 80089e8:	e7e0      	b.n	80089ac <_printf_float+0x16c>
 80089ea:	6823      	ldr	r3, [r4, #0]
 80089ec:	055a      	lsls	r2, r3, #21
 80089ee:	d407      	bmi.n	8008a00 <_printf_float+0x1c0>
 80089f0:	6923      	ldr	r3, [r4, #16]
 80089f2:	4642      	mov	r2, r8
 80089f4:	4631      	mov	r1, r6
 80089f6:	4628      	mov	r0, r5
 80089f8:	47b8      	blx	r7
 80089fa:	3001      	adds	r0, #1
 80089fc:	d12a      	bne.n	8008a54 <_printf_float+0x214>
 80089fe:	e76b      	b.n	80088d8 <_printf_float+0x98>
 8008a00:	f1b9 0f65 	cmp.w	r9, #101	@ 0x65
 8008a04:	f240 80e0 	bls.w	8008bc8 <_printf_float+0x388>
 8008a08:	ed94 7b12 	vldr	d7, [r4, #72]	@ 0x48
 8008a0c:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8008a10:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008a14:	d133      	bne.n	8008a7e <_printf_float+0x23e>
 8008a16:	4a38      	ldr	r2, [pc, #224]	@ (8008af8 <_printf_float+0x2b8>)
 8008a18:	2301      	movs	r3, #1
 8008a1a:	4631      	mov	r1, r6
 8008a1c:	4628      	mov	r0, r5
 8008a1e:	47b8      	blx	r7
 8008a20:	3001      	adds	r0, #1
 8008a22:	f43f af59 	beq.w	80088d8 <_printf_float+0x98>
 8008a26:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8008a2a:	4543      	cmp	r3, r8
 8008a2c:	db02      	blt.n	8008a34 <_printf_float+0x1f4>
 8008a2e:	6823      	ldr	r3, [r4, #0]
 8008a30:	07d8      	lsls	r0, r3, #31
 8008a32:	d50f      	bpl.n	8008a54 <_printf_float+0x214>
 8008a34:	9b05      	ldr	r3, [sp, #20]
 8008a36:	465a      	mov	r2, fp
 8008a38:	4631      	mov	r1, r6
 8008a3a:	4628      	mov	r0, r5
 8008a3c:	47b8      	blx	r7
 8008a3e:	3001      	adds	r0, #1
 8008a40:	f43f af4a 	beq.w	80088d8 <_printf_float+0x98>
 8008a44:	f04f 0900 	mov.w	r9, #0
 8008a48:	f108 38ff 	add.w	r8, r8, #4294967295
 8008a4c:	f104 0a1a 	add.w	sl, r4, #26
 8008a50:	45c8      	cmp	r8, r9
 8008a52:	dc09      	bgt.n	8008a68 <_printf_float+0x228>
 8008a54:	6823      	ldr	r3, [r4, #0]
 8008a56:	079b      	lsls	r3, r3, #30
 8008a58:	f100 8107 	bmi.w	8008c6a <_printf_float+0x42a>
 8008a5c:	68e0      	ldr	r0, [r4, #12]
 8008a5e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008a60:	4298      	cmp	r0, r3
 8008a62:	bfb8      	it	lt
 8008a64:	4618      	movlt	r0, r3
 8008a66:	e739      	b.n	80088dc <_printf_float+0x9c>
 8008a68:	2301      	movs	r3, #1
 8008a6a:	4652      	mov	r2, sl
 8008a6c:	4631      	mov	r1, r6
 8008a6e:	4628      	mov	r0, r5
 8008a70:	47b8      	blx	r7
 8008a72:	3001      	adds	r0, #1
 8008a74:	f43f af30 	beq.w	80088d8 <_printf_float+0x98>
 8008a78:	f109 0901 	add.w	r9, r9, #1
 8008a7c:	e7e8      	b.n	8008a50 <_printf_float+0x210>
 8008a7e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008a80:	2b00      	cmp	r3, #0
 8008a82:	dc3b      	bgt.n	8008afc <_printf_float+0x2bc>
 8008a84:	4a1c      	ldr	r2, [pc, #112]	@ (8008af8 <_printf_float+0x2b8>)
 8008a86:	2301      	movs	r3, #1
 8008a88:	4631      	mov	r1, r6
 8008a8a:	4628      	mov	r0, r5
 8008a8c:	47b8      	blx	r7
 8008a8e:	3001      	adds	r0, #1
 8008a90:	f43f af22 	beq.w	80088d8 <_printf_float+0x98>
 8008a94:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8008a98:	ea59 0303 	orrs.w	r3, r9, r3
 8008a9c:	d102      	bne.n	8008aa4 <_printf_float+0x264>
 8008a9e:	6823      	ldr	r3, [r4, #0]
 8008aa0:	07d9      	lsls	r1, r3, #31
 8008aa2:	d5d7      	bpl.n	8008a54 <_printf_float+0x214>
 8008aa4:	9b05      	ldr	r3, [sp, #20]
 8008aa6:	465a      	mov	r2, fp
 8008aa8:	4631      	mov	r1, r6
 8008aaa:	4628      	mov	r0, r5
 8008aac:	47b8      	blx	r7
 8008aae:	3001      	adds	r0, #1
 8008ab0:	f43f af12 	beq.w	80088d8 <_printf_float+0x98>
 8008ab4:	f04f 0a00 	mov.w	sl, #0
 8008ab8:	f104 0b1a 	add.w	fp, r4, #26
 8008abc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008abe:	425b      	negs	r3, r3
 8008ac0:	4553      	cmp	r3, sl
 8008ac2:	dc01      	bgt.n	8008ac8 <_printf_float+0x288>
 8008ac4:	464b      	mov	r3, r9
 8008ac6:	e794      	b.n	80089f2 <_printf_float+0x1b2>
 8008ac8:	2301      	movs	r3, #1
 8008aca:	465a      	mov	r2, fp
 8008acc:	4631      	mov	r1, r6
 8008ace:	4628      	mov	r0, r5
 8008ad0:	47b8      	blx	r7
 8008ad2:	3001      	adds	r0, #1
 8008ad4:	f43f af00 	beq.w	80088d8 <_printf_float+0x98>
 8008ad8:	f10a 0a01 	add.w	sl, sl, #1
 8008adc:	e7ee      	b.n	8008abc <_printf_float+0x27c>
 8008ade:	bf00      	nop
 8008ae0:	ffffffff 	.word	0xffffffff
 8008ae4:	7fefffff 	.word	0x7fefffff
 8008ae8:	0800b59c 	.word	0x0800b59c
 8008aec:	0800b598 	.word	0x0800b598
 8008af0:	0800b5a4 	.word	0x0800b5a4
 8008af4:	0800b5a0 	.word	0x0800b5a0
 8008af8:	0800b5a8 	.word	0x0800b5a8
 8008afc:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8008afe:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8008b02:	4553      	cmp	r3, sl
 8008b04:	bfa8      	it	ge
 8008b06:	4653      	movge	r3, sl
 8008b08:	2b00      	cmp	r3, #0
 8008b0a:	4699      	mov	r9, r3
 8008b0c:	dc37      	bgt.n	8008b7e <_printf_float+0x33e>
 8008b0e:	2300      	movs	r3, #0
 8008b10:	9307      	str	r3, [sp, #28]
 8008b12:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008b16:	f104 021a 	add.w	r2, r4, #26
 8008b1a:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8008b1c:	9907      	ldr	r1, [sp, #28]
 8008b1e:	9306      	str	r3, [sp, #24]
 8008b20:	eba3 0309 	sub.w	r3, r3, r9
 8008b24:	428b      	cmp	r3, r1
 8008b26:	dc31      	bgt.n	8008b8c <_printf_float+0x34c>
 8008b28:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008b2a:	459a      	cmp	sl, r3
 8008b2c:	dc3b      	bgt.n	8008ba6 <_printf_float+0x366>
 8008b2e:	6823      	ldr	r3, [r4, #0]
 8008b30:	07da      	lsls	r2, r3, #31
 8008b32:	d438      	bmi.n	8008ba6 <_printf_float+0x366>
 8008b34:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008b36:	ebaa 0903 	sub.w	r9, sl, r3
 8008b3a:	9b06      	ldr	r3, [sp, #24]
 8008b3c:	ebaa 0303 	sub.w	r3, sl, r3
 8008b40:	4599      	cmp	r9, r3
 8008b42:	bfa8      	it	ge
 8008b44:	4699      	movge	r9, r3
 8008b46:	f1b9 0f00 	cmp.w	r9, #0
 8008b4a:	dc34      	bgt.n	8008bb6 <_printf_float+0x376>
 8008b4c:	f04f 0800 	mov.w	r8, #0
 8008b50:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008b54:	f104 0b1a 	add.w	fp, r4, #26
 8008b58:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008b5a:	ebaa 0303 	sub.w	r3, sl, r3
 8008b5e:	eba3 0309 	sub.w	r3, r3, r9
 8008b62:	4543      	cmp	r3, r8
 8008b64:	f77f af76 	ble.w	8008a54 <_printf_float+0x214>
 8008b68:	2301      	movs	r3, #1
 8008b6a:	465a      	mov	r2, fp
 8008b6c:	4631      	mov	r1, r6
 8008b6e:	4628      	mov	r0, r5
 8008b70:	47b8      	blx	r7
 8008b72:	3001      	adds	r0, #1
 8008b74:	f43f aeb0 	beq.w	80088d8 <_printf_float+0x98>
 8008b78:	f108 0801 	add.w	r8, r8, #1
 8008b7c:	e7ec      	b.n	8008b58 <_printf_float+0x318>
 8008b7e:	4642      	mov	r2, r8
 8008b80:	4631      	mov	r1, r6
 8008b82:	4628      	mov	r0, r5
 8008b84:	47b8      	blx	r7
 8008b86:	3001      	adds	r0, #1
 8008b88:	d1c1      	bne.n	8008b0e <_printf_float+0x2ce>
 8008b8a:	e6a5      	b.n	80088d8 <_printf_float+0x98>
 8008b8c:	2301      	movs	r3, #1
 8008b8e:	4631      	mov	r1, r6
 8008b90:	4628      	mov	r0, r5
 8008b92:	9206      	str	r2, [sp, #24]
 8008b94:	47b8      	blx	r7
 8008b96:	3001      	adds	r0, #1
 8008b98:	f43f ae9e 	beq.w	80088d8 <_printf_float+0x98>
 8008b9c:	9b07      	ldr	r3, [sp, #28]
 8008b9e:	9a06      	ldr	r2, [sp, #24]
 8008ba0:	3301      	adds	r3, #1
 8008ba2:	9307      	str	r3, [sp, #28]
 8008ba4:	e7b9      	b.n	8008b1a <_printf_float+0x2da>
 8008ba6:	9b05      	ldr	r3, [sp, #20]
 8008ba8:	465a      	mov	r2, fp
 8008baa:	4631      	mov	r1, r6
 8008bac:	4628      	mov	r0, r5
 8008bae:	47b8      	blx	r7
 8008bb0:	3001      	adds	r0, #1
 8008bb2:	d1bf      	bne.n	8008b34 <_printf_float+0x2f4>
 8008bb4:	e690      	b.n	80088d8 <_printf_float+0x98>
 8008bb6:	9a06      	ldr	r2, [sp, #24]
 8008bb8:	464b      	mov	r3, r9
 8008bba:	4442      	add	r2, r8
 8008bbc:	4631      	mov	r1, r6
 8008bbe:	4628      	mov	r0, r5
 8008bc0:	47b8      	blx	r7
 8008bc2:	3001      	adds	r0, #1
 8008bc4:	d1c2      	bne.n	8008b4c <_printf_float+0x30c>
 8008bc6:	e687      	b.n	80088d8 <_printf_float+0x98>
 8008bc8:	f8dd 9028 	ldr.w	r9, [sp, #40]	@ 0x28
 8008bcc:	f1b9 0f01 	cmp.w	r9, #1
 8008bd0:	dc01      	bgt.n	8008bd6 <_printf_float+0x396>
 8008bd2:	07db      	lsls	r3, r3, #31
 8008bd4:	d536      	bpl.n	8008c44 <_printf_float+0x404>
 8008bd6:	2301      	movs	r3, #1
 8008bd8:	4642      	mov	r2, r8
 8008bda:	4631      	mov	r1, r6
 8008bdc:	4628      	mov	r0, r5
 8008bde:	47b8      	blx	r7
 8008be0:	3001      	adds	r0, #1
 8008be2:	f43f ae79 	beq.w	80088d8 <_printf_float+0x98>
 8008be6:	9b05      	ldr	r3, [sp, #20]
 8008be8:	465a      	mov	r2, fp
 8008bea:	4631      	mov	r1, r6
 8008bec:	4628      	mov	r0, r5
 8008bee:	47b8      	blx	r7
 8008bf0:	3001      	adds	r0, #1
 8008bf2:	f43f ae71 	beq.w	80088d8 <_printf_float+0x98>
 8008bf6:	ed94 7b12 	vldr	d7, [r4, #72]	@ 0x48
 8008bfa:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8008bfe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008c02:	f109 39ff 	add.w	r9, r9, #4294967295
 8008c06:	d018      	beq.n	8008c3a <_printf_float+0x3fa>
 8008c08:	464b      	mov	r3, r9
 8008c0a:	f108 0201 	add.w	r2, r8, #1
 8008c0e:	4631      	mov	r1, r6
 8008c10:	4628      	mov	r0, r5
 8008c12:	47b8      	blx	r7
 8008c14:	3001      	adds	r0, #1
 8008c16:	d10c      	bne.n	8008c32 <_printf_float+0x3f2>
 8008c18:	e65e      	b.n	80088d8 <_printf_float+0x98>
 8008c1a:	2301      	movs	r3, #1
 8008c1c:	465a      	mov	r2, fp
 8008c1e:	4631      	mov	r1, r6
 8008c20:	4628      	mov	r0, r5
 8008c22:	47b8      	blx	r7
 8008c24:	3001      	adds	r0, #1
 8008c26:	f43f ae57 	beq.w	80088d8 <_printf_float+0x98>
 8008c2a:	f108 0801 	add.w	r8, r8, #1
 8008c2e:	45c8      	cmp	r8, r9
 8008c30:	dbf3      	blt.n	8008c1a <_printf_float+0x3da>
 8008c32:	4653      	mov	r3, sl
 8008c34:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8008c38:	e6dc      	b.n	80089f4 <_printf_float+0x1b4>
 8008c3a:	f04f 0800 	mov.w	r8, #0
 8008c3e:	f104 0b1a 	add.w	fp, r4, #26
 8008c42:	e7f4      	b.n	8008c2e <_printf_float+0x3ee>
 8008c44:	2301      	movs	r3, #1
 8008c46:	4642      	mov	r2, r8
 8008c48:	e7e1      	b.n	8008c0e <_printf_float+0x3ce>
 8008c4a:	2301      	movs	r3, #1
 8008c4c:	464a      	mov	r2, r9
 8008c4e:	4631      	mov	r1, r6
 8008c50:	4628      	mov	r0, r5
 8008c52:	47b8      	blx	r7
 8008c54:	3001      	adds	r0, #1
 8008c56:	f43f ae3f 	beq.w	80088d8 <_printf_float+0x98>
 8008c5a:	f108 0801 	add.w	r8, r8, #1
 8008c5e:	68e3      	ldr	r3, [r4, #12]
 8008c60:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8008c62:	1a5b      	subs	r3, r3, r1
 8008c64:	4543      	cmp	r3, r8
 8008c66:	dcf0      	bgt.n	8008c4a <_printf_float+0x40a>
 8008c68:	e6f8      	b.n	8008a5c <_printf_float+0x21c>
 8008c6a:	f04f 0800 	mov.w	r8, #0
 8008c6e:	f104 0919 	add.w	r9, r4, #25
 8008c72:	e7f4      	b.n	8008c5e <_printf_float+0x41e>

08008c74 <_printf_common>:
 8008c74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008c78:	4616      	mov	r6, r2
 8008c7a:	4698      	mov	r8, r3
 8008c7c:	688a      	ldr	r2, [r1, #8]
 8008c7e:	690b      	ldr	r3, [r1, #16]
 8008c80:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8008c84:	4293      	cmp	r3, r2
 8008c86:	bfb8      	it	lt
 8008c88:	4613      	movlt	r3, r2
 8008c8a:	6033      	str	r3, [r6, #0]
 8008c8c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8008c90:	4607      	mov	r7, r0
 8008c92:	460c      	mov	r4, r1
 8008c94:	b10a      	cbz	r2, 8008c9a <_printf_common+0x26>
 8008c96:	3301      	adds	r3, #1
 8008c98:	6033      	str	r3, [r6, #0]
 8008c9a:	6823      	ldr	r3, [r4, #0]
 8008c9c:	0699      	lsls	r1, r3, #26
 8008c9e:	bf42      	ittt	mi
 8008ca0:	6833      	ldrmi	r3, [r6, #0]
 8008ca2:	3302      	addmi	r3, #2
 8008ca4:	6033      	strmi	r3, [r6, #0]
 8008ca6:	6825      	ldr	r5, [r4, #0]
 8008ca8:	f015 0506 	ands.w	r5, r5, #6
 8008cac:	d106      	bne.n	8008cbc <_printf_common+0x48>
 8008cae:	f104 0a19 	add.w	sl, r4, #25
 8008cb2:	68e3      	ldr	r3, [r4, #12]
 8008cb4:	6832      	ldr	r2, [r6, #0]
 8008cb6:	1a9b      	subs	r3, r3, r2
 8008cb8:	42ab      	cmp	r3, r5
 8008cba:	dc26      	bgt.n	8008d0a <_printf_common+0x96>
 8008cbc:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8008cc0:	6822      	ldr	r2, [r4, #0]
 8008cc2:	3b00      	subs	r3, #0
 8008cc4:	bf18      	it	ne
 8008cc6:	2301      	movne	r3, #1
 8008cc8:	0692      	lsls	r2, r2, #26
 8008cca:	d42b      	bmi.n	8008d24 <_printf_common+0xb0>
 8008ccc:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8008cd0:	4641      	mov	r1, r8
 8008cd2:	4638      	mov	r0, r7
 8008cd4:	47c8      	blx	r9
 8008cd6:	3001      	adds	r0, #1
 8008cd8:	d01e      	beq.n	8008d18 <_printf_common+0xa4>
 8008cda:	6823      	ldr	r3, [r4, #0]
 8008cdc:	6922      	ldr	r2, [r4, #16]
 8008cde:	f003 0306 	and.w	r3, r3, #6
 8008ce2:	2b04      	cmp	r3, #4
 8008ce4:	bf02      	ittt	eq
 8008ce6:	68e5      	ldreq	r5, [r4, #12]
 8008ce8:	6833      	ldreq	r3, [r6, #0]
 8008cea:	1aed      	subeq	r5, r5, r3
 8008cec:	68a3      	ldr	r3, [r4, #8]
 8008cee:	bf0c      	ite	eq
 8008cf0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008cf4:	2500      	movne	r5, #0
 8008cf6:	4293      	cmp	r3, r2
 8008cf8:	bfc4      	itt	gt
 8008cfa:	1a9b      	subgt	r3, r3, r2
 8008cfc:	18ed      	addgt	r5, r5, r3
 8008cfe:	2600      	movs	r6, #0
 8008d00:	341a      	adds	r4, #26
 8008d02:	42b5      	cmp	r5, r6
 8008d04:	d11a      	bne.n	8008d3c <_printf_common+0xc8>
 8008d06:	2000      	movs	r0, #0
 8008d08:	e008      	b.n	8008d1c <_printf_common+0xa8>
 8008d0a:	2301      	movs	r3, #1
 8008d0c:	4652      	mov	r2, sl
 8008d0e:	4641      	mov	r1, r8
 8008d10:	4638      	mov	r0, r7
 8008d12:	47c8      	blx	r9
 8008d14:	3001      	adds	r0, #1
 8008d16:	d103      	bne.n	8008d20 <_printf_common+0xac>
 8008d18:	f04f 30ff 	mov.w	r0, #4294967295
 8008d1c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008d20:	3501      	adds	r5, #1
 8008d22:	e7c6      	b.n	8008cb2 <_printf_common+0x3e>
 8008d24:	18e1      	adds	r1, r4, r3
 8008d26:	1c5a      	adds	r2, r3, #1
 8008d28:	2030      	movs	r0, #48	@ 0x30
 8008d2a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8008d2e:	4422      	add	r2, r4
 8008d30:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8008d34:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8008d38:	3302      	adds	r3, #2
 8008d3a:	e7c7      	b.n	8008ccc <_printf_common+0x58>
 8008d3c:	2301      	movs	r3, #1
 8008d3e:	4622      	mov	r2, r4
 8008d40:	4641      	mov	r1, r8
 8008d42:	4638      	mov	r0, r7
 8008d44:	47c8      	blx	r9
 8008d46:	3001      	adds	r0, #1
 8008d48:	d0e6      	beq.n	8008d18 <_printf_common+0xa4>
 8008d4a:	3601      	adds	r6, #1
 8008d4c:	e7d9      	b.n	8008d02 <_printf_common+0x8e>
	...

08008d50 <_printf_i>:
 8008d50:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008d54:	7e0f      	ldrb	r7, [r1, #24]
 8008d56:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8008d58:	2f78      	cmp	r7, #120	@ 0x78
 8008d5a:	4691      	mov	r9, r2
 8008d5c:	4680      	mov	r8, r0
 8008d5e:	460c      	mov	r4, r1
 8008d60:	469a      	mov	sl, r3
 8008d62:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8008d66:	d807      	bhi.n	8008d78 <_printf_i+0x28>
 8008d68:	2f62      	cmp	r7, #98	@ 0x62
 8008d6a:	d80a      	bhi.n	8008d82 <_printf_i+0x32>
 8008d6c:	2f00      	cmp	r7, #0
 8008d6e:	f000 80d1 	beq.w	8008f14 <_printf_i+0x1c4>
 8008d72:	2f58      	cmp	r7, #88	@ 0x58
 8008d74:	f000 80b8 	beq.w	8008ee8 <_printf_i+0x198>
 8008d78:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008d7c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8008d80:	e03a      	b.n	8008df8 <_printf_i+0xa8>
 8008d82:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8008d86:	2b15      	cmp	r3, #21
 8008d88:	d8f6      	bhi.n	8008d78 <_printf_i+0x28>
 8008d8a:	a101      	add	r1, pc, #4	@ (adr r1, 8008d90 <_printf_i+0x40>)
 8008d8c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008d90:	08008de9 	.word	0x08008de9
 8008d94:	08008dfd 	.word	0x08008dfd
 8008d98:	08008d79 	.word	0x08008d79
 8008d9c:	08008d79 	.word	0x08008d79
 8008da0:	08008d79 	.word	0x08008d79
 8008da4:	08008d79 	.word	0x08008d79
 8008da8:	08008dfd 	.word	0x08008dfd
 8008dac:	08008d79 	.word	0x08008d79
 8008db0:	08008d79 	.word	0x08008d79
 8008db4:	08008d79 	.word	0x08008d79
 8008db8:	08008d79 	.word	0x08008d79
 8008dbc:	08008efb 	.word	0x08008efb
 8008dc0:	08008e27 	.word	0x08008e27
 8008dc4:	08008eb5 	.word	0x08008eb5
 8008dc8:	08008d79 	.word	0x08008d79
 8008dcc:	08008d79 	.word	0x08008d79
 8008dd0:	08008f1d 	.word	0x08008f1d
 8008dd4:	08008d79 	.word	0x08008d79
 8008dd8:	08008e27 	.word	0x08008e27
 8008ddc:	08008d79 	.word	0x08008d79
 8008de0:	08008d79 	.word	0x08008d79
 8008de4:	08008ebd 	.word	0x08008ebd
 8008de8:	6833      	ldr	r3, [r6, #0]
 8008dea:	1d1a      	adds	r2, r3, #4
 8008dec:	681b      	ldr	r3, [r3, #0]
 8008dee:	6032      	str	r2, [r6, #0]
 8008df0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008df4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8008df8:	2301      	movs	r3, #1
 8008dfa:	e09c      	b.n	8008f36 <_printf_i+0x1e6>
 8008dfc:	6833      	ldr	r3, [r6, #0]
 8008dfe:	6820      	ldr	r0, [r4, #0]
 8008e00:	1d19      	adds	r1, r3, #4
 8008e02:	6031      	str	r1, [r6, #0]
 8008e04:	0606      	lsls	r6, r0, #24
 8008e06:	d501      	bpl.n	8008e0c <_printf_i+0xbc>
 8008e08:	681d      	ldr	r5, [r3, #0]
 8008e0a:	e003      	b.n	8008e14 <_printf_i+0xc4>
 8008e0c:	0645      	lsls	r5, r0, #25
 8008e0e:	d5fb      	bpl.n	8008e08 <_printf_i+0xb8>
 8008e10:	f9b3 5000 	ldrsh.w	r5, [r3]
 8008e14:	2d00      	cmp	r5, #0
 8008e16:	da03      	bge.n	8008e20 <_printf_i+0xd0>
 8008e18:	232d      	movs	r3, #45	@ 0x2d
 8008e1a:	426d      	negs	r5, r5
 8008e1c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008e20:	4858      	ldr	r0, [pc, #352]	@ (8008f84 <_printf_i+0x234>)
 8008e22:	230a      	movs	r3, #10
 8008e24:	e011      	b.n	8008e4a <_printf_i+0xfa>
 8008e26:	6821      	ldr	r1, [r4, #0]
 8008e28:	6833      	ldr	r3, [r6, #0]
 8008e2a:	0608      	lsls	r0, r1, #24
 8008e2c:	f853 5b04 	ldr.w	r5, [r3], #4
 8008e30:	d402      	bmi.n	8008e38 <_printf_i+0xe8>
 8008e32:	0649      	lsls	r1, r1, #25
 8008e34:	bf48      	it	mi
 8008e36:	b2ad      	uxthmi	r5, r5
 8008e38:	2f6f      	cmp	r7, #111	@ 0x6f
 8008e3a:	4852      	ldr	r0, [pc, #328]	@ (8008f84 <_printf_i+0x234>)
 8008e3c:	6033      	str	r3, [r6, #0]
 8008e3e:	bf14      	ite	ne
 8008e40:	230a      	movne	r3, #10
 8008e42:	2308      	moveq	r3, #8
 8008e44:	2100      	movs	r1, #0
 8008e46:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8008e4a:	6866      	ldr	r6, [r4, #4]
 8008e4c:	60a6      	str	r6, [r4, #8]
 8008e4e:	2e00      	cmp	r6, #0
 8008e50:	db05      	blt.n	8008e5e <_printf_i+0x10e>
 8008e52:	6821      	ldr	r1, [r4, #0]
 8008e54:	432e      	orrs	r6, r5
 8008e56:	f021 0104 	bic.w	r1, r1, #4
 8008e5a:	6021      	str	r1, [r4, #0]
 8008e5c:	d04b      	beq.n	8008ef6 <_printf_i+0x1a6>
 8008e5e:	4616      	mov	r6, r2
 8008e60:	fbb5 f1f3 	udiv	r1, r5, r3
 8008e64:	fb03 5711 	mls	r7, r3, r1, r5
 8008e68:	5dc7      	ldrb	r7, [r0, r7]
 8008e6a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8008e6e:	462f      	mov	r7, r5
 8008e70:	42bb      	cmp	r3, r7
 8008e72:	460d      	mov	r5, r1
 8008e74:	d9f4      	bls.n	8008e60 <_printf_i+0x110>
 8008e76:	2b08      	cmp	r3, #8
 8008e78:	d10b      	bne.n	8008e92 <_printf_i+0x142>
 8008e7a:	6823      	ldr	r3, [r4, #0]
 8008e7c:	07df      	lsls	r7, r3, #31
 8008e7e:	d508      	bpl.n	8008e92 <_printf_i+0x142>
 8008e80:	6923      	ldr	r3, [r4, #16]
 8008e82:	6861      	ldr	r1, [r4, #4]
 8008e84:	4299      	cmp	r1, r3
 8008e86:	bfde      	ittt	le
 8008e88:	2330      	movle	r3, #48	@ 0x30
 8008e8a:	f806 3c01 	strble.w	r3, [r6, #-1]
 8008e8e:	f106 36ff 	addle.w	r6, r6, #4294967295
 8008e92:	1b92      	subs	r2, r2, r6
 8008e94:	6122      	str	r2, [r4, #16]
 8008e96:	f8cd a000 	str.w	sl, [sp]
 8008e9a:	464b      	mov	r3, r9
 8008e9c:	aa03      	add	r2, sp, #12
 8008e9e:	4621      	mov	r1, r4
 8008ea0:	4640      	mov	r0, r8
 8008ea2:	f7ff fee7 	bl	8008c74 <_printf_common>
 8008ea6:	3001      	adds	r0, #1
 8008ea8:	d14a      	bne.n	8008f40 <_printf_i+0x1f0>
 8008eaa:	f04f 30ff 	mov.w	r0, #4294967295
 8008eae:	b004      	add	sp, #16
 8008eb0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008eb4:	6823      	ldr	r3, [r4, #0]
 8008eb6:	f043 0320 	orr.w	r3, r3, #32
 8008eba:	6023      	str	r3, [r4, #0]
 8008ebc:	4832      	ldr	r0, [pc, #200]	@ (8008f88 <_printf_i+0x238>)
 8008ebe:	2778      	movs	r7, #120	@ 0x78
 8008ec0:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8008ec4:	6823      	ldr	r3, [r4, #0]
 8008ec6:	6831      	ldr	r1, [r6, #0]
 8008ec8:	061f      	lsls	r7, r3, #24
 8008eca:	f851 5b04 	ldr.w	r5, [r1], #4
 8008ece:	d402      	bmi.n	8008ed6 <_printf_i+0x186>
 8008ed0:	065f      	lsls	r7, r3, #25
 8008ed2:	bf48      	it	mi
 8008ed4:	b2ad      	uxthmi	r5, r5
 8008ed6:	6031      	str	r1, [r6, #0]
 8008ed8:	07d9      	lsls	r1, r3, #31
 8008eda:	bf44      	itt	mi
 8008edc:	f043 0320 	orrmi.w	r3, r3, #32
 8008ee0:	6023      	strmi	r3, [r4, #0]
 8008ee2:	b11d      	cbz	r5, 8008eec <_printf_i+0x19c>
 8008ee4:	2310      	movs	r3, #16
 8008ee6:	e7ad      	b.n	8008e44 <_printf_i+0xf4>
 8008ee8:	4826      	ldr	r0, [pc, #152]	@ (8008f84 <_printf_i+0x234>)
 8008eea:	e7e9      	b.n	8008ec0 <_printf_i+0x170>
 8008eec:	6823      	ldr	r3, [r4, #0]
 8008eee:	f023 0320 	bic.w	r3, r3, #32
 8008ef2:	6023      	str	r3, [r4, #0]
 8008ef4:	e7f6      	b.n	8008ee4 <_printf_i+0x194>
 8008ef6:	4616      	mov	r6, r2
 8008ef8:	e7bd      	b.n	8008e76 <_printf_i+0x126>
 8008efa:	6833      	ldr	r3, [r6, #0]
 8008efc:	6825      	ldr	r5, [r4, #0]
 8008efe:	6961      	ldr	r1, [r4, #20]
 8008f00:	1d18      	adds	r0, r3, #4
 8008f02:	6030      	str	r0, [r6, #0]
 8008f04:	062e      	lsls	r6, r5, #24
 8008f06:	681b      	ldr	r3, [r3, #0]
 8008f08:	d501      	bpl.n	8008f0e <_printf_i+0x1be>
 8008f0a:	6019      	str	r1, [r3, #0]
 8008f0c:	e002      	b.n	8008f14 <_printf_i+0x1c4>
 8008f0e:	0668      	lsls	r0, r5, #25
 8008f10:	d5fb      	bpl.n	8008f0a <_printf_i+0x1ba>
 8008f12:	8019      	strh	r1, [r3, #0]
 8008f14:	2300      	movs	r3, #0
 8008f16:	6123      	str	r3, [r4, #16]
 8008f18:	4616      	mov	r6, r2
 8008f1a:	e7bc      	b.n	8008e96 <_printf_i+0x146>
 8008f1c:	6833      	ldr	r3, [r6, #0]
 8008f1e:	1d1a      	adds	r2, r3, #4
 8008f20:	6032      	str	r2, [r6, #0]
 8008f22:	681e      	ldr	r6, [r3, #0]
 8008f24:	6862      	ldr	r2, [r4, #4]
 8008f26:	2100      	movs	r1, #0
 8008f28:	4630      	mov	r0, r6
 8008f2a:	f7f7 f9d9 	bl	80002e0 <memchr>
 8008f2e:	b108      	cbz	r0, 8008f34 <_printf_i+0x1e4>
 8008f30:	1b80      	subs	r0, r0, r6
 8008f32:	6060      	str	r0, [r4, #4]
 8008f34:	6863      	ldr	r3, [r4, #4]
 8008f36:	6123      	str	r3, [r4, #16]
 8008f38:	2300      	movs	r3, #0
 8008f3a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008f3e:	e7aa      	b.n	8008e96 <_printf_i+0x146>
 8008f40:	6923      	ldr	r3, [r4, #16]
 8008f42:	4632      	mov	r2, r6
 8008f44:	4649      	mov	r1, r9
 8008f46:	4640      	mov	r0, r8
 8008f48:	47d0      	blx	sl
 8008f4a:	3001      	adds	r0, #1
 8008f4c:	d0ad      	beq.n	8008eaa <_printf_i+0x15a>
 8008f4e:	6823      	ldr	r3, [r4, #0]
 8008f50:	079b      	lsls	r3, r3, #30
 8008f52:	d413      	bmi.n	8008f7c <_printf_i+0x22c>
 8008f54:	68e0      	ldr	r0, [r4, #12]
 8008f56:	9b03      	ldr	r3, [sp, #12]
 8008f58:	4298      	cmp	r0, r3
 8008f5a:	bfb8      	it	lt
 8008f5c:	4618      	movlt	r0, r3
 8008f5e:	e7a6      	b.n	8008eae <_printf_i+0x15e>
 8008f60:	2301      	movs	r3, #1
 8008f62:	4632      	mov	r2, r6
 8008f64:	4649      	mov	r1, r9
 8008f66:	4640      	mov	r0, r8
 8008f68:	47d0      	blx	sl
 8008f6a:	3001      	adds	r0, #1
 8008f6c:	d09d      	beq.n	8008eaa <_printf_i+0x15a>
 8008f6e:	3501      	adds	r5, #1
 8008f70:	68e3      	ldr	r3, [r4, #12]
 8008f72:	9903      	ldr	r1, [sp, #12]
 8008f74:	1a5b      	subs	r3, r3, r1
 8008f76:	42ab      	cmp	r3, r5
 8008f78:	dcf2      	bgt.n	8008f60 <_printf_i+0x210>
 8008f7a:	e7eb      	b.n	8008f54 <_printf_i+0x204>
 8008f7c:	2500      	movs	r5, #0
 8008f7e:	f104 0619 	add.w	r6, r4, #25
 8008f82:	e7f5      	b.n	8008f70 <_printf_i+0x220>
 8008f84:	0800b5aa 	.word	0x0800b5aa
 8008f88:	0800b5bb 	.word	0x0800b5bb

08008f8c <std>:
 8008f8c:	2300      	movs	r3, #0
 8008f8e:	b510      	push	{r4, lr}
 8008f90:	4604      	mov	r4, r0
 8008f92:	e9c0 3300 	strd	r3, r3, [r0]
 8008f96:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8008f9a:	6083      	str	r3, [r0, #8]
 8008f9c:	8181      	strh	r1, [r0, #12]
 8008f9e:	6643      	str	r3, [r0, #100]	@ 0x64
 8008fa0:	81c2      	strh	r2, [r0, #14]
 8008fa2:	6183      	str	r3, [r0, #24]
 8008fa4:	4619      	mov	r1, r3
 8008fa6:	2208      	movs	r2, #8
 8008fa8:	305c      	adds	r0, #92	@ 0x5c
 8008faa:	f000 faad 	bl	8009508 <memset>
 8008fae:	4b0d      	ldr	r3, [pc, #52]	@ (8008fe4 <std+0x58>)
 8008fb0:	6263      	str	r3, [r4, #36]	@ 0x24
 8008fb2:	4b0d      	ldr	r3, [pc, #52]	@ (8008fe8 <std+0x5c>)
 8008fb4:	62a3      	str	r3, [r4, #40]	@ 0x28
 8008fb6:	4b0d      	ldr	r3, [pc, #52]	@ (8008fec <std+0x60>)
 8008fb8:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8008fba:	4b0d      	ldr	r3, [pc, #52]	@ (8008ff0 <std+0x64>)
 8008fbc:	6323      	str	r3, [r4, #48]	@ 0x30
 8008fbe:	4b0d      	ldr	r3, [pc, #52]	@ (8008ff4 <std+0x68>)
 8008fc0:	6224      	str	r4, [r4, #32]
 8008fc2:	429c      	cmp	r4, r3
 8008fc4:	d006      	beq.n	8008fd4 <std+0x48>
 8008fc6:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8008fca:	4294      	cmp	r4, r2
 8008fcc:	d002      	beq.n	8008fd4 <std+0x48>
 8008fce:	33d0      	adds	r3, #208	@ 0xd0
 8008fd0:	429c      	cmp	r4, r3
 8008fd2:	d105      	bne.n	8008fe0 <std+0x54>
 8008fd4:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8008fd8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008fdc:	f000 bb10 	b.w	8009600 <__retarget_lock_init_recursive>
 8008fe0:	bd10      	pop	{r4, pc}
 8008fe2:	bf00      	nop
 8008fe4:	08009359 	.word	0x08009359
 8008fe8:	0800937b 	.word	0x0800937b
 8008fec:	080093b3 	.word	0x080093b3
 8008ff0:	080093d7 	.word	0x080093d7
 8008ff4:	24000474 	.word	0x24000474

08008ff8 <stdio_exit_handler>:
 8008ff8:	4a02      	ldr	r2, [pc, #8]	@ (8009004 <stdio_exit_handler+0xc>)
 8008ffa:	4903      	ldr	r1, [pc, #12]	@ (8009008 <stdio_exit_handler+0x10>)
 8008ffc:	4803      	ldr	r0, [pc, #12]	@ (800900c <stdio_exit_handler+0x14>)
 8008ffe:	f000 b869 	b.w	80090d4 <_fwalk_sglue>
 8009002:	bf00      	nop
 8009004:	24000010 	.word	0x24000010
 8009008:	0800ae55 	.word	0x0800ae55
 800900c:	24000020 	.word	0x24000020

08009010 <cleanup_stdio>:
 8009010:	6841      	ldr	r1, [r0, #4]
 8009012:	4b0c      	ldr	r3, [pc, #48]	@ (8009044 <cleanup_stdio+0x34>)
 8009014:	4299      	cmp	r1, r3
 8009016:	b510      	push	{r4, lr}
 8009018:	4604      	mov	r4, r0
 800901a:	d001      	beq.n	8009020 <cleanup_stdio+0x10>
 800901c:	f001 ff1a 	bl	800ae54 <_fflush_r>
 8009020:	68a1      	ldr	r1, [r4, #8]
 8009022:	4b09      	ldr	r3, [pc, #36]	@ (8009048 <cleanup_stdio+0x38>)
 8009024:	4299      	cmp	r1, r3
 8009026:	d002      	beq.n	800902e <cleanup_stdio+0x1e>
 8009028:	4620      	mov	r0, r4
 800902a:	f001 ff13 	bl	800ae54 <_fflush_r>
 800902e:	68e1      	ldr	r1, [r4, #12]
 8009030:	4b06      	ldr	r3, [pc, #24]	@ (800904c <cleanup_stdio+0x3c>)
 8009032:	4299      	cmp	r1, r3
 8009034:	d004      	beq.n	8009040 <cleanup_stdio+0x30>
 8009036:	4620      	mov	r0, r4
 8009038:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800903c:	f001 bf0a 	b.w	800ae54 <_fflush_r>
 8009040:	bd10      	pop	{r4, pc}
 8009042:	bf00      	nop
 8009044:	24000474 	.word	0x24000474
 8009048:	240004dc 	.word	0x240004dc
 800904c:	24000544 	.word	0x24000544

08009050 <global_stdio_init.part.0>:
 8009050:	b510      	push	{r4, lr}
 8009052:	4b0b      	ldr	r3, [pc, #44]	@ (8009080 <global_stdio_init.part.0+0x30>)
 8009054:	4c0b      	ldr	r4, [pc, #44]	@ (8009084 <global_stdio_init.part.0+0x34>)
 8009056:	4a0c      	ldr	r2, [pc, #48]	@ (8009088 <global_stdio_init.part.0+0x38>)
 8009058:	601a      	str	r2, [r3, #0]
 800905a:	4620      	mov	r0, r4
 800905c:	2200      	movs	r2, #0
 800905e:	2104      	movs	r1, #4
 8009060:	f7ff ff94 	bl	8008f8c <std>
 8009064:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8009068:	2201      	movs	r2, #1
 800906a:	2109      	movs	r1, #9
 800906c:	f7ff ff8e 	bl	8008f8c <std>
 8009070:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8009074:	2202      	movs	r2, #2
 8009076:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800907a:	2112      	movs	r1, #18
 800907c:	f7ff bf86 	b.w	8008f8c <std>
 8009080:	240005ac 	.word	0x240005ac
 8009084:	24000474 	.word	0x24000474
 8009088:	08008ff9 	.word	0x08008ff9

0800908c <__sfp_lock_acquire>:
 800908c:	4801      	ldr	r0, [pc, #4]	@ (8009094 <__sfp_lock_acquire+0x8>)
 800908e:	f000 bab8 	b.w	8009602 <__retarget_lock_acquire_recursive>
 8009092:	bf00      	nop
 8009094:	240005b5 	.word	0x240005b5

08009098 <__sfp_lock_release>:
 8009098:	4801      	ldr	r0, [pc, #4]	@ (80090a0 <__sfp_lock_release+0x8>)
 800909a:	f000 bab3 	b.w	8009604 <__retarget_lock_release_recursive>
 800909e:	bf00      	nop
 80090a0:	240005b5 	.word	0x240005b5

080090a4 <__sinit>:
 80090a4:	b510      	push	{r4, lr}
 80090a6:	4604      	mov	r4, r0
 80090a8:	f7ff fff0 	bl	800908c <__sfp_lock_acquire>
 80090ac:	6a23      	ldr	r3, [r4, #32]
 80090ae:	b11b      	cbz	r3, 80090b8 <__sinit+0x14>
 80090b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80090b4:	f7ff bff0 	b.w	8009098 <__sfp_lock_release>
 80090b8:	4b04      	ldr	r3, [pc, #16]	@ (80090cc <__sinit+0x28>)
 80090ba:	6223      	str	r3, [r4, #32]
 80090bc:	4b04      	ldr	r3, [pc, #16]	@ (80090d0 <__sinit+0x2c>)
 80090be:	681b      	ldr	r3, [r3, #0]
 80090c0:	2b00      	cmp	r3, #0
 80090c2:	d1f5      	bne.n	80090b0 <__sinit+0xc>
 80090c4:	f7ff ffc4 	bl	8009050 <global_stdio_init.part.0>
 80090c8:	e7f2      	b.n	80090b0 <__sinit+0xc>
 80090ca:	bf00      	nop
 80090cc:	08009011 	.word	0x08009011
 80090d0:	240005ac 	.word	0x240005ac

080090d4 <_fwalk_sglue>:
 80090d4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80090d8:	4607      	mov	r7, r0
 80090da:	4688      	mov	r8, r1
 80090dc:	4614      	mov	r4, r2
 80090de:	2600      	movs	r6, #0
 80090e0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80090e4:	f1b9 0901 	subs.w	r9, r9, #1
 80090e8:	d505      	bpl.n	80090f6 <_fwalk_sglue+0x22>
 80090ea:	6824      	ldr	r4, [r4, #0]
 80090ec:	2c00      	cmp	r4, #0
 80090ee:	d1f7      	bne.n	80090e0 <_fwalk_sglue+0xc>
 80090f0:	4630      	mov	r0, r6
 80090f2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80090f6:	89ab      	ldrh	r3, [r5, #12]
 80090f8:	2b01      	cmp	r3, #1
 80090fa:	d907      	bls.n	800910c <_fwalk_sglue+0x38>
 80090fc:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8009100:	3301      	adds	r3, #1
 8009102:	d003      	beq.n	800910c <_fwalk_sglue+0x38>
 8009104:	4629      	mov	r1, r5
 8009106:	4638      	mov	r0, r7
 8009108:	47c0      	blx	r8
 800910a:	4306      	orrs	r6, r0
 800910c:	3568      	adds	r5, #104	@ 0x68
 800910e:	e7e9      	b.n	80090e4 <_fwalk_sglue+0x10>

08009110 <iprintf>:
 8009110:	b40f      	push	{r0, r1, r2, r3}
 8009112:	b507      	push	{r0, r1, r2, lr}
 8009114:	4906      	ldr	r1, [pc, #24]	@ (8009130 <iprintf+0x20>)
 8009116:	ab04      	add	r3, sp, #16
 8009118:	6808      	ldr	r0, [r1, #0]
 800911a:	f853 2b04 	ldr.w	r2, [r3], #4
 800911e:	6881      	ldr	r1, [r0, #8]
 8009120:	9301      	str	r3, [sp, #4]
 8009122:	f001 fcfb 	bl	800ab1c <_vfiprintf_r>
 8009126:	b003      	add	sp, #12
 8009128:	f85d eb04 	ldr.w	lr, [sp], #4
 800912c:	b004      	add	sp, #16
 800912e:	4770      	bx	lr
 8009130:	2400001c 	.word	0x2400001c

08009134 <_puts_r>:
 8009134:	6a03      	ldr	r3, [r0, #32]
 8009136:	b570      	push	{r4, r5, r6, lr}
 8009138:	6884      	ldr	r4, [r0, #8]
 800913a:	4605      	mov	r5, r0
 800913c:	460e      	mov	r6, r1
 800913e:	b90b      	cbnz	r3, 8009144 <_puts_r+0x10>
 8009140:	f7ff ffb0 	bl	80090a4 <__sinit>
 8009144:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8009146:	07db      	lsls	r3, r3, #31
 8009148:	d405      	bmi.n	8009156 <_puts_r+0x22>
 800914a:	89a3      	ldrh	r3, [r4, #12]
 800914c:	0598      	lsls	r0, r3, #22
 800914e:	d402      	bmi.n	8009156 <_puts_r+0x22>
 8009150:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8009152:	f000 fa56 	bl	8009602 <__retarget_lock_acquire_recursive>
 8009156:	89a3      	ldrh	r3, [r4, #12]
 8009158:	0719      	lsls	r1, r3, #28
 800915a:	d502      	bpl.n	8009162 <_puts_r+0x2e>
 800915c:	6923      	ldr	r3, [r4, #16]
 800915e:	2b00      	cmp	r3, #0
 8009160:	d135      	bne.n	80091ce <_puts_r+0x9a>
 8009162:	4621      	mov	r1, r4
 8009164:	4628      	mov	r0, r5
 8009166:	f000 f979 	bl	800945c <__swsetup_r>
 800916a:	b380      	cbz	r0, 80091ce <_puts_r+0x9a>
 800916c:	f04f 35ff 	mov.w	r5, #4294967295
 8009170:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8009172:	07da      	lsls	r2, r3, #31
 8009174:	d405      	bmi.n	8009182 <_puts_r+0x4e>
 8009176:	89a3      	ldrh	r3, [r4, #12]
 8009178:	059b      	lsls	r3, r3, #22
 800917a:	d402      	bmi.n	8009182 <_puts_r+0x4e>
 800917c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800917e:	f000 fa41 	bl	8009604 <__retarget_lock_release_recursive>
 8009182:	4628      	mov	r0, r5
 8009184:	bd70      	pop	{r4, r5, r6, pc}
 8009186:	2b00      	cmp	r3, #0
 8009188:	da04      	bge.n	8009194 <_puts_r+0x60>
 800918a:	69a2      	ldr	r2, [r4, #24]
 800918c:	429a      	cmp	r2, r3
 800918e:	dc17      	bgt.n	80091c0 <_puts_r+0x8c>
 8009190:	290a      	cmp	r1, #10
 8009192:	d015      	beq.n	80091c0 <_puts_r+0x8c>
 8009194:	6823      	ldr	r3, [r4, #0]
 8009196:	1c5a      	adds	r2, r3, #1
 8009198:	6022      	str	r2, [r4, #0]
 800919a:	7019      	strb	r1, [r3, #0]
 800919c:	68a3      	ldr	r3, [r4, #8]
 800919e:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80091a2:	3b01      	subs	r3, #1
 80091a4:	60a3      	str	r3, [r4, #8]
 80091a6:	2900      	cmp	r1, #0
 80091a8:	d1ed      	bne.n	8009186 <_puts_r+0x52>
 80091aa:	2b00      	cmp	r3, #0
 80091ac:	da11      	bge.n	80091d2 <_puts_r+0x9e>
 80091ae:	4622      	mov	r2, r4
 80091b0:	210a      	movs	r1, #10
 80091b2:	4628      	mov	r0, r5
 80091b4:	f000 f913 	bl	80093de <__swbuf_r>
 80091b8:	3001      	adds	r0, #1
 80091ba:	d0d7      	beq.n	800916c <_puts_r+0x38>
 80091bc:	250a      	movs	r5, #10
 80091be:	e7d7      	b.n	8009170 <_puts_r+0x3c>
 80091c0:	4622      	mov	r2, r4
 80091c2:	4628      	mov	r0, r5
 80091c4:	f000 f90b 	bl	80093de <__swbuf_r>
 80091c8:	3001      	adds	r0, #1
 80091ca:	d1e7      	bne.n	800919c <_puts_r+0x68>
 80091cc:	e7ce      	b.n	800916c <_puts_r+0x38>
 80091ce:	3e01      	subs	r6, #1
 80091d0:	e7e4      	b.n	800919c <_puts_r+0x68>
 80091d2:	6823      	ldr	r3, [r4, #0]
 80091d4:	1c5a      	adds	r2, r3, #1
 80091d6:	6022      	str	r2, [r4, #0]
 80091d8:	220a      	movs	r2, #10
 80091da:	701a      	strb	r2, [r3, #0]
 80091dc:	e7ee      	b.n	80091bc <_puts_r+0x88>
	...

080091e0 <puts>:
 80091e0:	4b02      	ldr	r3, [pc, #8]	@ (80091ec <puts+0xc>)
 80091e2:	4601      	mov	r1, r0
 80091e4:	6818      	ldr	r0, [r3, #0]
 80091e6:	f7ff bfa5 	b.w	8009134 <_puts_r>
 80091ea:	bf00      	nop
 80091ec:	2400001c 	.word	0x2400001c

080091f0 <setvbuf>:
 80091f0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80091f4:	461d      	mov	r5, r3
 80091f6:	4b57      	ldr	r3, [pc, #348]	@ (8009354 <setvbuf+0x164>)
 80091f8:	681f      	ldr	r7, [r3, #0]
 80091fa:	4604      	mov	r4, r0
 80091fc:	460e      	mov	r6, r1
 80091fe:	4690      	mov	r8, r2
 8009200:	b127      	cbz	r7, 800920c <setvbuf+0x1c>
 8009202:	6a3b      	ldr	r3, [r7, #32]
 8009204:	b913      	cbnz	r3, 800920c <setvbuf+0x1c>
 8009206:	4638      	mov	r0, r7
 8009208:	f7ff ff4c 	bl	80090a4 <__sinit>
 800920c:	f1b8 0f02 	cmp.w	r8, #2
 8009210:	d006      	beq.n	8009220 <setvbuf+0x30>
 8009212:	f1b8 0f01 	cmp.w	r8, #1
 8009216:	f200 809a 	bhi.w	800934e <setvbuf+0x15e>
 800921a:	2d00      	cmp	r5, #0
 800921c:	f2c0 8097 	blt.w	800934e <setvbuf+0x15e>
 8009220:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8009222:	07d9      	lsls	r1, r3, #31
 8009224:	d405      	bmi.n	8009232 <setvbuf+0x42>
 8009226:	89a3      	ldrh	r3, [r4, #12]
 8009228:	059a      	lsls	r2, r3, #22
 800922a:	d402      	bmi.n	8009232 <setvbuf+0x42>
 800922c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800922e:	f000 f9e8 	bl	8009602 <__retarget_lock_acquire_recursive>
 8009232:	4621      	mov	r1, r4
 8009234:	4638      	mov	r0, r7
 8009236:	f001 fe0d 	bl	800ae54 <_fflush_r>
 800923a:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800923c:	b141      	cbz	r1, 8009250 <setvbuf+0x60>
 800923e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8009242:	4299      	cmp	r1, r3
 8009244:	d002      	beq.n	800924c <setvbuf+0x5c>
 8009246:	4638      	mov	r0, r7
 8009248:	f000 ffc4 	bl	800a1d4 <_free_r>
 800924c:	2300      	movs	r3, #0
 800924e:	6363      	str	r3, [r4, #52]	@ 0x34
 8009250:	2300      	movs	r3, #0
 8009252:	61a3      	str	r3, [r4, #24]
 8009254:	6063      	str	r3, [r4, #4]
 8009256:	89a3      	ldrh	r3, [r4, #12]
 8009258:	061b      	lsls	r3, r3, #24
 800925a:	d503      	bpl.n	8009264 <setvbuf+0x74>
 800925c:	6921      	ldr	r1, [r4, #16]
 800925e:	4638      	mov	r0, r7
 8009260:	f000 ffb8 	bl	800a1d4 <_free_r>
 8009264:	89a3      	ldrh	r3, [r4, #12]
 8009266:	f423 634a 	bic.w	r3, r3, #3232	@ 0xca0
 800926a:	f023 0303 	bic.w	r3, r3, #3
 800926e:	f1b8 0f02 	cmp.w	r8, #2
 8009272:	81a3      	strh	r3, [r4, #12]
 8009274:	d061      	beq.n	800933a <setvbuf+0x14a>
 8009276:	ab01      	add	r3, sp, #4
 8009278:	466a      	mov	r2, sp
 800927a:	4621      	mov	r1, r4
 800927c:	4638      	mov	r0, r7
 800927e:	f001 fe11 	bl	800aea4 <__swhatbuf_r>
 8009282:	89a3      	ldrh	r3, [r4, #12]
 8009284:	4318      	orrs	r0, r3
 8009286:	81a0      	strh	r0, [r4, #12]
 8009288:	bb2d      	cbnz	r5, 80092d6 <setvbuf+0xe6>
 800928a:	9d00      	ldr	r5, [sp, #0]
 800928c:	4628      	mov	r0, r5
 800928e:	f000 ffeb 	bl	800a268 <malloc>
 8009292:	4606      	mov	r6, r0
 8009294:	2800      	cmp	r0, #0
 8009296:	d152      	bne.n	800933e <setvbuf+0x14e>
 8009298:	f8dd 9000 	ldr.w	r9, [sp]
 800929c:	45a9      	cmp	r9, r5
 800929e:	d140      	bne.n	8009322 <setvbuf+0x132>
 80092a0:	f04f 35ff 	mov.w	r5, #4294967295
 80092a4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80092a8:	f043 0202 	orr.w	r2, r3, #2
 80092ac:	81a2      	strh	r2, [r4, #12]
 80092ae:	2200      	movs	r2, #0
 80092b0:	60a2      	str	r2, [r4, #8]
 80092b2:	f104 0247 	add.w	r2, r4, #71	@ 0x47
 80092b6:	6022      	str	r2, [r4, #0]
 80092b8:	6122      	str	r2, [r4, #16]
 80092ba:	2201      	movs	r2, #1
 80092bc:	6162      	str	r2, [r4, #20]
 80092be:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80092c0:	07d6      	lsls	r6, r2, #31
 80092c2:	d404      	bmi.n	80092ce <setvbuf+0xde>
 80092c4:	0598      	lsls	r0, r3, #22
 80092c6:	d402      	bmi.n	80092ce <setvbuf+0xde>
 80092c8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80092ca:	f000 f99b 	bl	8009604 <__retarget_lock_release_recursive>
 80092ce:	4628      	mov	r0, r5
 80092d0:	b003      	add	sp, #12
 80092d2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80092d6:	2e00      	cmp	r6, #0
 80092d8:	d0d8      	beq.n	800928c <setvbuf+0x9c>
 80092da:	6a3b      	ldr	r3, [r7, #32]
 80092dc:	b913      	cbnz	r3, 80092e4 <setvbuf+0xf4>
 80092de:	4638      	mov	r0, r7
 80092e0:	f7ff fee0 	bl	80090a4 <__sinit>
 80092e4:	f1b8 0f01 	cmp.w	r8, #1
 80092e8:	bf08      	it	eq
 80092ea:	89a3      	ldrheq	r3, [r4, #12]
 80092ec:	6026      	str	r6, [r4, #0]
 80092ee:	bf04      	itt	eq
 80092f0:	f043 0301 	orreq.w	r3, r3, #1
 80092f4:	81a3      	strheq	r3, [r4, #12]
 80092f6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80092fa:	f013 0208 	ands.w	r2, r3, #8
 80092fe:	e9c4 6504 	strd	r6, r5, [r4, #16]
 8009302:	d01e      	beq.n	8009342 <setvbuf+0x152>
 8009304:	07d9      	lsls	r1, r3, #31
 8009306:	bf41      	itttt	mi
 8009308:	2200      	movmi	r2, #0
 800930a:	426d      	negmi	r5, r5
 800930c:	60a2      	strmi	r2, [r4, #8]
 800930e:	61a5      	strmi	r5, [r4, #24]
 8009310:	bf58      	it	pl
 8009312:	60a5      	strpl	r5, [r4, #8]
 8009314:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8009316:	07d2      	lsls	r2, r2, #31
 8009318:	d401      	bmi.n	800931e <setvbuf+0x12e>
 800931a:	059b      	lsls	r3, r3, #22
 800931c:	d513      	bpl.n	8009346 <setvbuf+0x156>
 800931e:	2500      	movs	r5, #0
 8009320:	e7d5      	b.n	80092ce <setvbuf+0xde>
 8009322:	4648      	mov	r0, r9
 8009324:	f000 ffa0 	bl	800a268 <malloc>
 8009328:	4606      	mov	r6, r0
 800932a:	2800      	cmp	r0, #0
 800932c:	d0b8      	beq.n	80092a0 <setvbuf+0xb0>
 800932e:	89a3      	ldrh	r3, [r4, #12]
 8009330:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009334:	81a3      	strh	r3, [r4, #12]
 8009336:	464d      	mov	r5, r9
 8009338:	e7cf      	b.n	80092da <setvbuf+0xea>
 800933a:	2500      	movs	r5, #0
 800933c:	e7b2      	b.n	80092a4 <setvbuf+0xb4>
 800933e:	46a9      	mov	r9, r5
 8009340:	e7f5      	b.n	800932e <setvbuf+0x13e>
 8009342:	60a2      	str	r2, [r4, #8]
 8009344:	e7e6      	b.n	8009314 <setvbuf+0x124>
 8009346:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8009348:	f000 f95c 	bl	8009604 <__retarget_lock_release_recursive>
 800934c:	e7e7      	b.n	800931e <setvbuf+0x12e>
 800934e:	f04f 35ff 	mov.w	r5, #4294967295
 8009352:	e7bc      	b.n	80092ce <setvbuf+0xde>
 8009354:	2400001c 	.word	0x2400001c

08009358 <__sread>:
 8009358:	b510      	push	{r4, lr}
 800935a:	460c      	mov	r4, r1
 800935c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009360:	f000 f900 	bl	8009564 <_read_r>
 8009364:	2800      	cmp	r0, #0
 8009366:	bfab      	itete	ge
 8009368:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800936a:	89a3      	ldrhlt	r3, [r4, #12]
 800936c:	181b      	addge	r3, r3, r0
 800936e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8009372:	bfac      	ite	ge
 8009374:	6563      	strge	r3, [r4, #84]	@ 0x54
 8009376:	81a3      	strhlt	r3, [r4, #12]
 8009378:	bd10      	pop	{r4, pc}

0800937a <__swrite>:
 800937a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800937e:	461f      	mov	r7, r3
 8009380:	898b      	ldrh	r3, [r1, #12]
 8009382:	05db      	lsls	r3, r3, #23
 8009384:	4605      	mov	r5, r0
 8009386:	460c      	mov	r4, r1
 8009388:	4616      	mov	r6, r2
 800938a:	d505      	bpl.n	8009398 <__swrite+0x1e>
 800938c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009390:	2302      	movs	r3, #2
 8009392:	2200      	movs	r2, #0
 8009394:	f000 f8d4 	bl	8009540 <_lseek_r>
 8009398:	89a3      	ldrh	r3, [r4, #12]
 800939a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800939e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80093a2:	81a3      	strh	r3, [r4, #12]
 80093a4:	4632      	mov	r2, r6
 80093a6:	463b      	mov	r3, r7
 80093a8:	4628      	mov	r0, r5
 80093aa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80093ae:	f000 b8eb 	b.w	8009588 <_write_r>

080093b2 <__sseek>:
 80093b2:	b510      	push	{r4, lr}
 80093b4:	460c      	mov	r4, r1
 80093b6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80093ba:	f000 f8c1 	bl	8009540 <_lseek_r>
 80093be:	1c43      	adds	r3, r0, #1
 80093c0:	89a3      	ldrh	r3, [r4, #12]
 80093c2:	bf15      	itete	ne
 80093c4:	6560      	strne	r0, [r4, #84]	@ 0x54
 80093c6:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80093ca:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80093ce:	81a3      	strheq	r3, [r4, #12]
 80093d0:	bf18      	it	ne
 80093d2:	81a3      	strhne	r3, [r4, #12]
 80093d4:	bd10      	pop	{r4, pc}

080093d6 <__sclose>:
 80093d6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80093da:	f000 b8a1 	b.w	8009520 <_close_r>

080093de <__swbuf_r>:
 80093de:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80093e0:	460e      	mov	r6, r1
 80093e2:	4614      	mov	r4, r2
 80093e4:	4605      	mov	r5, r0
 80093e6:	b118      	cbz	r0, 80093f0 <__swbuf_r+0x12>
 80093e8:	6a03      	ldr	r3, [r0, #32]
 80093ea:	b90b      	cbnz	r3, 80093f0 <__swbuf_r+0x12>
 80093ec:	f7ff fe5a 	bl	80090a4 <__sinit>
 80093f0:	69a3      	ldr	r3, [r4, #24]
 80093f2:	60a3      	str	r3, [r4, #8]
 80093f4:	89a3      	ldrh	r3, [r4, #12]
 80093f6:	071a      	lsls	r2, r3, #28
 80093f8:	d501      	bpl.n	80093fe <__swbuf_r+0x20>
 80093fa:	6923      	ldr	r3, [r4, #16]
 80093fc:	b943      	cbnz	r3, 8009410 <__swbuf_r+0x32>
 80093fe:	4621      	mov	r1, r4
 8009400:	4628      	mov	r0, r5
 8009402:	f000 f82b 	bl	800945c <__swsetup_r>
 8009406:	b118      	cbz	r0, 8009410 <__swbuf_r+0x32>
 8009408:	f04f 37ff 	mov.w	r7, #4294967295
 800940c:	4638      	mov	r0, r7
 800940e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009410:	6823      	ldr	r3, [r4, #0]
 8009412:	6922      	ldr	r2, [r4, #16]
 8009414:	1a98      	subs	r0, r3, r2
 8009416:	6963      	ldr	r3, [r4, #20]
 8009418:	b2f6      	uxtb	r6, r6
 800941a:	4283      	cmp	r3, r0
 800941c:	4637      	mov	r7, r6
 800941e:	dc05      	bgt.n	800942c <__swbuf_r+0x4e>
 8009420:	4621      	mov	r1, r4
 8009422:	4628      	mov	r0, r5
 8009424:	f001 fd16 	bl	800ae54 <_fflush_r>
 8009428:	2800      	cmp	r0, #0
 800942a:	d1ed      	bne.n	8009408 <__swbuf_r+0x2a>
 800942c:	68a3      	ldr	r3, [r4, #8]
 800942e:	3b01      	subs	r3, #1
 8009430:	60a3      	str	r3, [r4, #8]
 8009432:	6823      	ldr	r3, [r4, #0]
 8009434:	1c5a      	adds	r2, r3, #1
 8009436:	6022      	str	r2, [r4, #0]
 8009438:	701e      	strb	r6, [r3, #0]
 800943a:	6962      	ldr	r2, [r4, #20]
 800943c:	1c43      	adds	r3, r0, #1
 800943e:	429a      	cmp	r2, r3
 8009440:	d004      	beq.n	800944c <__swbuf_r+0x6e>
 8009442:	89a3      	ldrh	r3, [r4, #12]
 8009444:	07db      	lsls	r3, r3, #31
 8009446:	d5e1      	bpl.n	800940c <__swbuf_r+0x2e>
 8009448:	2e0a      	cmp	r6, #10
 800944a:	d1df      	bne.n	800940c <__swbuf_r+0x2e>
 800944c:	4621      	mov	r1, r4
 800944e:	4628      	mov	r0, r5
 8009450:	f001 fd00 	bl	800ae54 <_fflush_r>
 8009454:	2800      	cmp	r0, #0
 8009456:	d0d9      	beq.n	800940c <__swbuf_r+0x2e>
 8009458:	e7d6      	b.n	8009408 <__swbuf_r+0x2a>
	...

0800945c <__swsetup_r>:
 800945c:	b538      	push	{r3, r4, r5, lr}
 800945e:	4b29      	ldr	r3, [pc, #164]	@ (8009504 <__swsetup_r+0xa8>)
 8009460:	4605      	mov	r5, r0
 8009462:	6818      	ldr	r0, [r3, #0]
 8009464:	460c      	mov	r4, r1
 8009466:	b118      	cbz	r0, 8009470 <__swsetup_r+0x14>
 8009468:	6a03      	ldr	r3, [r0, #32]
 800946a:	b90b      	cbnz	r3, 8009470 <__swsetup_r+0x14>
 800946c:	f7ff fe1a 	bl	80090a4 <__sinit>
 8009470:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009474:	0719      	lsls	r1, r3, #28
 8009476:	d422      	bmi.n	80094be <__swsetup_r+0x62>
 8009478:	06da      	lsls	r2, r3, #27
 800947a:	d407      	bmi.n	800948c <__swsetup_r+0x30>
 800947c:	2209      	movs	r2, #9
 800947e:	602a      	str	r2, [r5, #0]
 8009480:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009484:	81a3      	strh	r3, [r4, #12]
 8009486:	f04f 30ff 	mov.w	r0, #4294967295
 800948a:	e033      	b.n	80094f4 <__swsetup_r+0x98>
 800948c:	0758      	lsls	r0, r3, #29
 800948e:	d512      	bpl.n	80094b6 <__swsetup_r+0x5a>
 8009490:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8009492:	b141      	cbz	r1, 80094a6 <__swsetup_r+0x4a>
 8009494:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8009498:	4299      	cmp	r1, r3
 800949a:	d002      	beq.n	80094a2 <__swsetup_r+0x46>
 800949c:	4628      	mov	r0, r5
 800949e:	f000 fe99 	bl	800a1d4 <_free_r>
 80094a2:	2300      	movs	r3, #0
 80094a4:	6363      	str	r3, [r4, #52]	@ 0x34
 80094a6:	89a3      	ldrh	r3, [r4, #12]
 80094a8:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80094ac:	81a3      	strh	r3, [r4, #12]
 80094ae:	2300      	movs	r3, #0
 80094b0:	6063      	str	r3, [r4, #4]
 80094b2:	6923      	ldr	r3, [r4, #16]
 80094b4:	6023      	str	r3, [r4, #0]
 80094b6:	89a3      	ldrh	r3, [r4, #12]
 80094b8:	f043 0308 	orr.w	r3, r3, #8
 80094bc:	81a3      	strh	r3, [r4, #12]
 80094be:	6923      	ldr	r3, [r4, #16]
 80094c0:	b94b      	cbnz	r3, 80094d6 <__swsetup_r+0x7a>
 80094c2:	89a3      	ldrh	r3, [r4, #12]
 80094c4:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80094c8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80094cc:	d003      	beq.n	80094d6 <__swsetup_r+0x7a>
 80094ce:	4621      	mov	r1, r4
 80094d0:	4628      	mov	r0, r5
 80094d2:	f001 fd0d 	bl	800aef0 <__smakebuf_r>
 80094d6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80094da:	f013 0201 	ands.w	r2, r3, #1
 80094de:	d00a      	beq.n	80094f6 <__swsetup_r+0x9a>
 80094e0:	2200      	movs	r2, #0
 80094e2:	60a2      	str	r2, [r4, #8]
 80094e4:	6962      	ldr	r2, [r4, #20]
 80094e6:	4252      	negs	r2, r2
 80094e8:	61a2      	str	r2, [r4, #24]
 80094ea:	6922      	ldr	r2, [r4, #16]
 80094ec:	b942      	cbnz	r2, 8009500 <__swsetup_r+0xa4>
 80094ee:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80094f2:	d1c5      	bne.n	8009480 <__swsetup_r+0x24>
 80094f4:	bd38      	pop	{r3, r4, r5, pc}
 80094f6:	0799      	lsls	r1, r3, #30
 80094f8:	bf58      	it	pl
 80094fa:	6962      	ldrpl	r2, [r4, #20]
 80094fc:	60a2      	str	r2, [r4, #8]
 80094fe:	e7f4      	b.n	80094ea <__swsetup_r+0x8e>
 8009500:	2000      	movs	r0, #0
 8009502:	e7f7      	b.n	80094f4 <__swsetup_r+0x98>
 8009504:	2400001c 	.word	0x2400001c

08009508 <memset>:
 8009508:	4402      	add	r2, r0
 800950a:	4603      	mov	r3, r0
 800950c:	4293      	cmp	r3, r2
 800950e:	d100      	bne.n	8009512 <memset+0xa>
 8009510:	4770      	bx	lr
 8009512:	f803 1b01 	strb.w	r1, [r3], #1
 8009516:	e7f9      	b.n	800950c <memset+0x4>

08009518 <_localeconv_r>:
 8009518:	4800      	ldr	r0, [pc, #0]	@ (800951c <_localeconv_r+0x4>)
 800951a:	4770      	bx	lr
 800951c:	2400015c 	.word	0x2400015c

08009520 <_close_r>:
 8009520:	b538      	push	{r3, r4, r5, lr}
 8009522:	4d06      	ldr	r5, [pc, #24]	@ (800953c <_close_r+0x1c>)
 8009524:	2300      	movs	r3, #0
 8009526:	4604      	mov	r4, r0
 8009528:	4608      	mov	r0, r1
 800952a:	602b      	str	r3, [r5, #0]
 800952c:	f7f9 fb4f 	bl	8002bce <_close>
 8009530:	1c43      	adds	r3, r0, #1
 8009532:	d102      	bne.n	800953a <_close_r+0x1a>
 8009534:	682b      	ldr	r3, [r5, #0]
 8009536:	b103      	cbz	r3, 800953a <_close_r+0x1a>
 8009538:	6023      	str	r3, [r4, #0]
 800953a:	bd38      	pop	{r3, r4, r5, pc}
 800953c:	240005b0 	.word	0x240005b0

08009540 <_lseek_r>:
 8009540:	b538      	push	{r3, r4, r5, lr}
 8009542:	4d07      	ldr	r5, [pc, #28]	@ (8009560 <_lseek_r+0x20>)
 8009544:	4604      	mov	r4, r0
 8009546:	4608      	mov	r0, r1
 8009548:	4611      	mov	r1, r2
 800954a:	2200      	movs	r2, #0
 800954c:	602a      	str	r2, [r5, #0]
 800954e:	461a      	mov	r2, r3
 8009550:	f7f9 fb64 	bl	8002c1c <_lseek>
 8009554:	1c43      	adds	r3, r0, #1
 8009556:	d102      	bne.n	800955e <_lseek_r+0x1e>
 8009558:	682b      	ldr	r3, [r5, #0]
 800955a:	b103      	cbz	r3, 800955e <_lseek_r+0x1e>
 800955c:	6023      	str	r3, [r4, #0]
 800955e:	bd38      	pop	{r3, r4, r5, pc}
 8009560:	240005b0 	.word	0x240005b0

08009564 <_read_r>:
 8009564:	b538      	push	{r3, r4, r5, lr}
 8009566:	4d07      	ldr	r5, [pc, #28]	@ (8009584 <_read_r+0x20>)
 8009568:	4604      	mov	r4, r0
 800956a:	4608      	mov	r0, r1
 800956c:	4611      	mov	r1, r2
 800956e:	2200      	movs	r2, #0
 8009570:	602a      	str	r2, [r5, #0]
 8009572:	461a      	mov	r2, r3
 8009574:	f7f9 fb0e 	bl	8002b94 <_read>
 8009578:	1c43      	adds	r3, r0, #1
 800957a:	d102      	bne.n	8009582 <_read_r+0x1e>
 800957c:	682b      	ldr	r3, [r5, #0]
 800957e:	b103      	cbz	r3, 8009582 <_read_r+0x1e>
 8009580:	6023      	str	r3, [r4, #0]
 8009582:	bd38      	pop	{r3, r4, r5, pc}
 8009584:	240005b0 	.word	0x240005b0

08009588 <_write_r>:
 8009588:	b538      	push	{r3, r4, r5, lr}
 800958a:	4d07      	ldr	r5, [pc, #28]	@ (80095a8 <_write_r+0x20>)
 800958c:	4604      	mov	r4, r0
 800958e:	4608      	mov	r0, r1
 8009590:	4611      	mov	r1, r2
 8009592:	2200      	movs	r2, #0
 8009594:	602a      	str	r2, [r5, #0]
 8009596:	461a      	mov	r2, r3
 8009598:	f7f9 f906 	bl	80027a8 <_write>
 800959c:	1c43      	adds	r3, r0, #1
 800959e:	d102      	bne.n	80095a6 <_write_r+0x1e>
 80095a0:	682b      	ldr	r3, [r5, #0]
 80095a2:	b103      	cbz	r3, 80095a6 <_write_r+0x1e>
 80095a4:	6023      	str	r3, [r4, #0]
 80095a6:	bd38      	pop	{r3, r4, r5, pc}
 80095a8:	240005b0 	.word	0x240005b0

080095ac <__errno>:
 80095ac:	4b01      	ldr	r3, [pc, #4]	@ (80095b4 <__errno+0x8>)
 80095ae:	6818      	ldr	r0, [r3, #0]
 80095b0:	4770      	bx	lr
 80095b2:	bf00      	nop
 80095b4:	2400001c 	.word	0x2400001c

080095b8 <__libc_init_array>:
 80095b8:	b570      	push	{r4, r5, r6, lr}
 80095ba:	4d0d      	ldr	r5, [pc, #52]	@ (80095f0 <__libc_init_array+0x38>)
 80095bc:	4c0d      	ldr	r4, [pc, #52]	@ (80095f4 <__libc_init_array+0x3c>)
 80095be:	1b64      	subs	r4, r4, r5
 80095c0:	10a4      	asrs	r4, r4, #2
 80095c2:	2600      	movs	r6, #0
 80095c4:	42a6      	cmp	r6, r4
 80095c6:	d109      	bne.n	80095dc <__libc_init_array+0x24>
 80095c8:	4d0b      	ldr	r5, [pc, #44]	@ (80095f8 <__libc_init_array+0x40>)
 80095ca:	4c0c      	ldr	r4, [pc, #48]	@ (80095fc <__libc_init_array+0x44>)
 80095cc:	f001 fdbc 	bl	800b148 <_init>
 80095d0:	1b64      	subs	r4, r4, r5
 80095d2:	10a4      	asrs	r4, r4, #2
 80095d4:	2600      	movs	r6, #0
 80095d6:	42a6      	cmp	r6, r4
 80095d8:	d105      	bne.n	80095e6 <__libc_init_array+0x2e>
 80095da:	bd70      	pop	{r4, r5, r6, pc}
 80095dc:	f855 3b04 	ldr.w	r3, [r5], #4
 80095e0:	4798      	blx	r3
 80095e2:	3601      	adds	r6, #1
 80095e4:	e7ee      	b.n	80095c4 <__libc_init_array+0xc>
 80095e6:	f855 3b04 	ldr.w	r3, [r5], #4
 80095ea:	4798      	blx	r3
 80095ec:	3601      	adds	r6, #1
 80095ee:	e7f2      	b.n	80095d6 <__libc_init_array+0x1e>
 80095f0:	0800b914 	.word	0x0800b914
 80095f4:	0800b914 	.word	0x0800b914
 80095f8:	0800b914 	.word	0x0800b914
 80095fc:	0800b918 	.word	0x0800b918

08009600 <__retarget_lock_init_recursive>:
 8009600:	4770      	bx	lr

08009602 <__retarget_lock_acquire_recursive>:
 8009602:	4770      	bx	lr

08009604 <__retarget_lock_release_recursive>:
 8009604:	4770      	bx	lr

08009606 <quorem>:
 8009606:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800960a:	6903      	ldr	r3, [r0, #16]
 800960c:	690c      	ldr	r4, [r1, #16]
 800960e:	42a3      	cmp	r3, r4
 8009610:	4607      	mov	r7, r0
 8009612:	db7e      	blt.n	8009712 <quorem+0x10c>
 8009614:	3c01      	subs	r4, #1
 8009616:	f101 0814 	add.w	r8, r1, #20
 800961a:	00a3      	lsls	r3, r4, #2
 800961c:	f100 0514 	add.w	r5, r0, #20
 8009620:	9300      	str	r3, [sp, #0]
 8009622:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009626:	9301      	str	r3, [sp, #4]
 8009628:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800962c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009630:	3301      	adds	r3, #1
 8009632:	429a      	cmp	r2, r3
 8009634:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8009638:	fbb2 f6f3 	udiv	r6, r2, r3
 800963c:	d32e      	bcc.n	800969c <quorem+0x96>
 800963e:	f04f 0a00 	mov.w	sl, #0
 8009642:	46c4      	mov	ip, r8
 8009644:	46ae      	mov	lr, r5
 8009646:	46d3      	mov	fp, sl
 8009648:	f85c 3b04 	ldr.w	r3, [ip], #4
 800964c:	b298      	uxth	r0, r3
 800964e:	fb06 a000 	mla	r0, r6, r0, sl
 8009652:	0c02      	lsrs	r2, r0, #16
 8009654:	0c1b      	lsrs	r3, r3, #16
 8009656:	fb06 2303 	mla	r3, r6, r3, r2
 800965a:	f8de 2000 	ldr.w	r2, [lr]
 800965e:	b280      	uxth	r0, r0
 8009660:	b292      	uxth	r2, r2
 8009662:	1a12      	subs	r2, r2, r0
 8009664:	445a      	add	r2, fp
 8009666:	f8de 0000 	ldr.w	r0, [lr]
 800966a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800966e:	b29b      	uxth	r3, r3
 8009670:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8009674:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8009678:	b292      	uxth	r2, r2
 800967a:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800967e:	45e1      	cmp	r9, ip
 8009680:	f84e 2b04 	str.w	r2, [lr], #4
 8009684:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8009688:	d2de      	bcs.n	8009648 <quorem+0x42>
 800968a:	9b00      	ldr	r3, [sp, #0]
 800968c:	58eb      	ldr	r3, [r5, r3]
 800968e:	b92b      	cbnz	r3, 800969c <quorem+0x96>
 8009690:	9b01      	ldr	r3, [sp, #4]
 8009692:	3b04      	subs	r3, #4
 8009694:	429d      	cmp	r5, r3
 8009696:	461a      	mov	r2, r3
 8009698:	d32f      	bcc.n	80096fa <quorem+0xf4>
 800969a:	613c      	str	r4, [r7, #16]
 800969c:	4638      	mov	r0, r7
 800969e:	f001 f90b 	bl	800a8b8 <__mcmp>
 80096a2:	2800      	cmp	r0, #0
 80096a4:	db25      	blt.n	80096f2 <quorem+0xec>
 80096a6:	4629      	mov	r1, r5
 80096a8:	2000      	movs	r0, #0
 80096aa:	f858 2b04 	ldr.w	r2, [r8], #4
 80096ae:	f8d1 c000 	ldr.w	ip, [r1]
 80096b2:	fa1f fe82 	uxth.w	lr, r2
 80096b6:	fa1f f38c 	uxth.w	r3, ip
 80096ba:	eba3 030e 	sub.w	r3, r3, lr
 80096be:	4403      	add	r3, r0
 80096c0:	0c12      	lsrs	r2, r2, #16
 80096c2:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 80096c6:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 80096ca:	b29b      	uxth	r3, r3
 80096cc:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80096d0:	45c1      	cmp	r9, r8
 80096d2:	f841 3b04 	str.w	r3, [r1], #4
 80096d6:	ea4f 4022 	mov.w	r0, r2, asr #16
 80096da:	d2e6      	bcs.n	80096aa <quorem+0xa4>
 80096dc:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80096e0:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80096e4:	b922      	cbnz	r2, 80096f0 <quorem+0xea>
 80096e6:	3b04      	subs	r3, #4
 80096e8:	429d      	cmp	r5, r3
 80096ea:	461a      	mov	r2, r3
 80096ec:	d30b      	bcc.n	8009706 <quorem+0x100>
 80096ee:	613c      	str	r4, [r7, #16]
 80096f0:	3601      	adds	r6, #1
 80096f2:	4630      	mov	r0, r6
 80096f4:	b003      	add	sp, #12
 80096f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80096fa:	6812      	ldr	r2, [r2, #0]
 80096fc:	3b04      	subs	r3, #4
 80096fe:	2a00      	cmp	r2, #0
 8009700:	d1cb      	bne.n	800969a <quorem+0x94>
 8009702:	3c01      	subs	r4, #1
 8009704:	e7c6      	b.n	8009694 <quorem+0x8e>
 8009706:	6812      	ldr	r2, [r2, #0]
 8009708:	3b04      	subs	r3, #4
 800970a:	2a00      	cmp	r2, #0
 800970c:	d1ef      	bne.n	80096ee <quorem+0xe8>
 800970e:	3c01      	subs	r4, #1
 8009710:	e7ea      	b.n	80096e8 <quorem+0xe2>
 8009712:	2000      	movs	r0, #0
 8009714:	e7ee      	b.n	80096f4 <quorem+0xee>
	...

08009718 <_dtoa_r>:
 8009718:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800971c:	ed2d 8b02 	vpush	{d8}
 8009720:	69c7      	ldr	r7, [r0, #28]
 8009722:	b091      	sub	sp, #68	@ 0x44
 8009724:	ed8d 0b02 	vstr	d0, [sp, #8]
 8009728:	ec55 4b10 	vmov	r4, r5, d0
 800972c:	9e1c      	ldr	r6, [sp, #112]	@ 0x70
 800972e:	9107      	str	r1, [sp, #28]
 8009730:	4681      	mov	r9, r0
 8009732:	9209      	str	r2, [sp, #36]	@ 0x24
 8009734:	930d      	str	r3, [sp, #52]	@ 0x34
 8009736:	b97f      	cbnz	r7, 8009758 <_dtoa_r+0x40>
 8009738:	2010      	movs	r0, #16
 800973a:	f000 fd95 	bl	800a268 <malloc>
 800973e:	4602      	mov	r2, r0
 8009740:	f8c9 001c 	str.w	r0, [r9, #28]
 8009744:	b920      	cbnz	r0, 8009750 <_dtoa_r+0x38>
 8009746:	4ba0      	ldr	r3, [pc, #640]	@ (80099c8 <_dtoa_r+0x2b0>)
 8009748:	21ef      	movs	r1, #239	@ 0xef
 800974a:	48a0      	ldr	r0, [pc, #640]	@ (80099cc <_dtoa_r+0x2b4>)
 800974c:	f001 fc4c 	bl	800afe8 <__assert_func>
 8009750:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8009754:	6007      	str	r7, [r0, #0]
 8009756:	60c7      	str	r7, [r0, #12]
 8009758:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800975c:	6819      	ldr	r1, [r3, #0]
 800975e:	b159      	cbz	r1, 8009778 <_dtoa_r+0x60>
 8009760:	685a      	ldr	r2, [r3, #4]
 8009762:	604a      	str	r2, [r1, #4]
 8009764:	2301      	movs	r3, #1
 8009766:	4093      	lsls	r3, r2
 8009768:	608b      	str	r3, [r1, #8]
 800976a:	4648      	mov	r0, r9
 800976c:	f000 fe72 	bl	800a454 <_Bfree>
 8009770:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8009774:	2200      	movs	r2, #0
 8009776:	601a      	str	r2, [r3, #0]
 8009778:	1e2b      	subs	r3, r5, #0
 800977a:	bfbb      	ittet	lt
 800977c:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8009780:	9303      	strlt	r3, [sp, #12]
 8009782:	2300      	movge	r3, #0
 8009784:	2201      	movlt	r2, #1
 8009786:	bfac      	ite	ge
 8009788:	6033      	strge	r3, [r6, #0]
 800978a:	6032      	strlt	r2, [r6, #0]
 800978c:	4b90      	ldr	r3, [pc, #576]	@ (80099d0 <_dtoa_r+0x2b8>)
 800978e:	9e03      	ldr	r6, [sp, #12]
 8009790:	43b3      	bics	r3, r6
 8009792:	d110      	bne.n	80097b6 <_dtoa_r+0x9e>
 8009794:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8009796:	f242 730f 	movw	r3, #9999	@ 0x270f
 800979a:	6013      	str	r3, [r2, #0]
 800979c:	f3c6 0313 	ubfx	r3, r6, #0, #20
 80097a0:	4323      	orrs	r3, r4
 80097a2:	f000 84e6 	beq.w	800a172 <_dtoa_r+0xa5a>
 80097a6:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 80097a8:	4f8a      	ldr	r7, [pc, #552]	@ (80099d4 <_dtoa_r+0x2bc>)
 80097aa:	2b00      	cmp	r3, #0
 80097ac:	f000 84e8 	beq.w	800a180 <_dtoa_r+0xa68>
 80097b0:	1cfb      	adds	r3, r7, #3
 80097b2:	f000 bce3 	b.w	800a17c <_dtoa_r+0xa64>
 80097b6:	ed9d 8b02 	vldr	d8, [sp, #8]
 80097ba:	eeb5 8b40 	vcmp.f64	d8, #0.0
 80097be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80097c2:	d10a      	bne.n	80097da <_dtoa_r+0xc2>
 80097c4:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80097c6:	2301      	movs	r3, #1
 80097c8:	6013      	str	r3, [r2, #0]
 80097ca:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 80097cc:	b113      	cbz	r3, 80097d4 <_dtoa_r+0xbc>
 80097ce:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 80097d0:	4b81      	ldr	r3, [pc, #516]	@ (80099d8 <_dtoa_r+0x2c0>)
 80097d2:	6013      	str	r3, [r2, #0]
 80097d4:	4f81      	ldr	r7, [pc, #516]	@ (80099dc <_dtoa_r+0x2c4>)
 80097d6:	f000 bcd3 	b.w	800a180 <_dtoa_r+0xa68>
 80097da:	aa0e      	add	r2, sp, #56	@ 0x38
 80097dc:	a90f      	add	r1, sp, #60	@ 0x3c
 80097de:	4648      	mov	r0, r9
 80097e0:	eeb0 0b48 	vmov.f64	d0, d8
 80097e4:	f001 f918 	bl	800aa18 <__d2b>
 80097e8:	f3c6 530a 	ubfx	r3, r6, #20, #11
 80097ec:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80097ee:	9001      	str	r0, [sp, #4]
 80097f0:	2b00      	cmp	r3, #0
 80097f2:	d045      	beq.n	8009880 <_dtoa_r+0x168>
 80097f4:	eeb0 7b48 	vmov.f64	d7, d8
 80097f8:	ee18 1a90 	vmov	r1, s17
 80097fc:	f3c1 0113 	ubfx	r1, r1, #0, #20
 8009800:	f041 517f 	orr.w	r1, r1, #1069547520	@ 0x3fc00000
 8009804:	f441 1140 	orr.w	r1, r1, #3145728	@ 0x300000
 8009808:	f2a3 33ff 	subw	r3, r3, #1023	@ 0x3ff
 800980c:	2500      	movs	r5, #0
 800980e:	ee07 1a90 	vmov	s15, r1
 8009812:	eeb7 6b08 	vmov.f64	d6, #120	@ 0x3fc00000  1.5
 8009816:	ed9f 5b66 	vldr	d5, [pc, #408]	@ 80099b0 <_dtoa_r+0x298>
 800981a:	ee37 7b46 	vsub.f64	d7, d7, d6
 800981e:	ed9f 6b66 	vldr	d6, [pc, #408]	@ 80099b8 <_dtoa_r+0x2a0>
 8009822:	eea7 6b05 	vfma.f64	d6, d7, d5
 8009826:	ed9f 5b66 	vldr	d5, [pc, #408]	@ 80099c0 <_dtoa_r+0x2a8>
 800982a:	ee07 3a90 	vmov	s15, r3
 800982e:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 8009832:	eeb0 7b46 	vmov.f64	d7, d6
 8009836:	eea4 7b05 	vfma.f64	d7, d4, d5
 800983a:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 800983e:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8009842:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009846:	ee16 8a90 	vmov	r8, s13
 800984a:	d508      	bpl.n	800985e <_dtoa_r+0x146>
 800984c:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 8009850:	eeb4 6b47 	vcmp.f64	d6, d7
 8009854:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009858:	bf18      	it	ne
 800985a:	f108 38ff 	addne.w	r8, r8, #4294967295
 800985e:	f1b8 0f16 	cmp.w	r8, #22
 8009862:	d82b      	bhi.n	80098bc <_dtoa_r+0x1a4>
 8009864:	495e      	ldr	r1, [pc, #376]	@ (80099e0 <_dtoa_r+0x2c8>)
 8009866:	eb01 01c8 	add.w	r1, r1, r8, lsl #3
 800986a:	ed91 7b00 	vldr	d7, [r1]
 800986e:	eeb4 8bc7 	vcmpe.f64	d8, d7
 8009872:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009876:	d501      	bpl.n	800987c <_dtoa_r+0x164>
 8009878:	f108 38ff 	add.w	r8, r8, #4294967295
 800987c:	2100      	movs	r1, #0
 800987e:	e01e      	b.n	80098be <_dtoa_r+0x1a6>
 8009880:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009882:	4413      	add	r3, r2
 8009884:	f203 4132 	addw	r1, r3, #1074	@ 0x432
 8009888:	2920      	cmp	r1, #32
 800988a:	bfc1      	itttt	gt
 800988c:	f1c1 0140 	rsbgt	r1, r1, #64	@ 0x40
 8009890:	408e      	lslgt	r6, r1
 8009892:	f203 4112 	addwgt	r1, r3, #1042	@ 0x412
 8009896:	fa24 f101 	lsrgt.w	r1, r4, r1
 800989a:	bfd6      	itet	le
 800989c:	f1c1 0120 	rsble	r1, r1, #32
 80098a0:	4331      	orrgt	r1, r6
 80098a2:	fa04 f101 	lslle.w	r1, r4, r1
 80098a6:	ee07 1a90 	vmov	s15, r1
 80098aa:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 80098ae:	3b01      	subs	r3, #1
 80098b0:	ee17 1a90 	vmov	r1, s15
 80098b4:	2501      	movs	r5, #1
 80098b6:	f1a1 71f8 	sub.w	r1, r1, #32505856	@ 0x1f00000
 80098ba:	e7a8      	b.n	800980e <_dtoa_r+0xf6>
 80098bc:	2101      	movs	r1, #1
 80098be:	1ad2      	subs	r2, r2, r3
 80098c0:	1e53      	subs	r3, r2, #1
 80098c2:	9306      	str	r3, [sp, #24]
 80098c4:	bf45      	ittet	mi
 80098c6:	f1c2 0301 	rsbmi	r3, r2, #1
 80098ca:	9304      	strmi	r3, [sp, #16]
 80098cc:	2300      	movpl	r3, #0
 80098ce:	2300      	movmi	r3, #0
 80098d0:	bf4c      	ite	mi
 80098d2:	9306      	strmi	r3, [sp, #24]
 80098d4:	9304      	strpl	r3, [sp, #16]
 80098d6:	f1b8 0f00 	cmp.w	r8, #0
 80098da:	910c      	str	r1, [sp, #48]	@ 0x30
 80098dc:	db18      	blt.n	8009910 <_dtoa_r+0x1f8>
 80098de:	9b06      	ldr	r3, [sp, #24]
 80098e0:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 80098e4:	4443      	add	r3, r8
 80098e6:	9306      	str	r3, [sp, #24]
 80098e8:	2300      	movs	r3, #0
 80098ea:	9a07      	ldr	r2, [sp, #28]
 80098ec:	2a09      	cmp	r2, #9
 80098ee:	d845      	bhi.n	800997c <_dtoa_r+0x264>
 80098f0:	2a05      	cmp	r2, #5
 80098f2:	bfc4      	itt	gt
 80098f4:	3a04      	subgt	r2, #4
 80098f6:	9207      	strgt	r2, [sp, #28]
 80098f8:	9a07      	ldr	r2, [sp, #28]
 80098fa:	f1a2 0202 	sub.w	r2, r2, #2
 80098fe:	bfcc      	ite	gt
 8009900:	2400      	movgt	r4, #0
 8009902:	2401      	movle	r4, #1
 8009904:	2a03      	cmp	r2, #3
 8009906:	d844      	bhi.n	8009992 <_dtoa_r+0x27a>
 8009908:	e8df f002 	tbb	[pc, r2]
 800990c:	0b173634 	.word	0x0b173634
 8009910:	9b04      	ldr	r3, [sp, #16]
 8009912:	2200      	movs	r2, #0
 8009914:	eba3 0308 	sub.w	r3, r3, r8
 8009918:	9304      	str	r3, [sp, #16]
 800991a:	920a      	str	r2, [sp, #40]	@ 0x28
 800991c:	f1c8 0300 	rsb	r3, r8, #0
 8009920:	e7e3      	b.n	80098ea <_dtoa_r+0x1d2>
 8009922:	2201      	movs	r2, #1
 8009924:	9208      	str	r2, [sp, #32]
 8009926:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009928:	eb08 0b02 	add.w	fp, r8, r2
 800992c:	f10b 0a01 	add.w	sl, fp, #1
 8009930:	4652      	mov	r2, sl
 8009932:	2a01      	cmp	r2, #1
 8009934:	bfb8      	it	lt
 8009936:	2201      	movlt	r2, #1
 8009938:	e006      	b.n	8009948 <_dtoa_r+0x230>
 800993a:	2201      	movs	r2, #1
 800993c:	9208      	str	r2, [sp, #32]
 800993e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009940:	2a00      	cmp	r2, #0
 8009942:	dd29      	ble.n	8009998 <_dtoa_r+0x280>
 8009944:	4693      	mov	fp, r2
 8009946:	4692      	mov	sl, r2
 8009948:	f8d9 701c 	ldr.w	r7, [r9, #28]
 800994c:	2100      	movs	r1, #0
 800994e:	2004      	movs	r0, #4
 8009950:	f100 0614 	add.w	r6, r0, #20
 8009954:	4296      	cmp	r6, r2
 8009956:	d926      	bls.n	80099a6 <_dtoa_r+0x28e>
 8009958:	6079      	str	r1, [r7, #4]
 800995a:	4648      	mov	r0, r9
 800995c:	9305      	str	r3, [sp, #20]
 800995e:	f000 fd39 	bl	800a3d4 <_Balloc>
 8009962:	9b05      	ldr	r3, [sp, #20]
 8009964:	4607      	mov	r7, r0
 8009966:	2800      	cmp	r0, #0
 8009968:	d13e      	bne.n	80099e8 <_dtoa_r+0x2d0>
 800996a:	4b1e      	ldr	r3, [pc, #120]	@ (80099e4 <_dtoa_r+0x2cc>)
 800996c:	4602      	mov	r2, r0
 800996e:	f240 11af 	movw	r1, #431	@ 0x1af
 8009972:	e6ea      	b.n	800974a <_dtoa_r+0x32>
 8009974:	2200      	movs	r2, #0
 8009976:	e7e1      	b.n	800993c <_dtoa_r+0x224>
 8009978:	2200      	movs	r2, #0
 800997a:	e7d3      	b.n	8009924 <_dtoa_r+0x20c>
 800997c:	2401      	movs	r4, #1
 800997e:	2200      	movs	r2, #0
 8009980:	e9cd 2407 	strd	r2, r4, [sp, #28]
 8009984:	f04f 3bff 	mov.w	fp, #4294967295
 8009988:	2100      	movs	r1, #0
 800998a:	46da      	mov	sl, fp
 800998c:	2212      	movs	r2, #18
 800998e:	9109      	str	r1, [sp, #36]	@ 0x24
 8009990:	e7da      	b.n	8009948 <_dtoa_r+0x230>
 8009992:	2201      	movs	r2, #1
 8009994:	9208      	str	r2, [sp, #32]
 8009996:	e7f5      	b.n	8009984 <_dtoa_r+0x26c>
 8009998:	f04f 0b01 	mov.w	fp, #1
 800999c:	46da      	mov	sl, fp
 800999e:	465a      	mov	r2, fp
 80099a0:	f8cd b024 	str.w	fp, [sp, #36]	@ 0x24
 80099a4:	e7d0      	b.n	8009948 <_dtoa_r+0x230>
 80099a6:	3101      	adds	r1, #1
 80099a8:	0040      	lsls	r0, r0, #1
 80099aa:	e7d1      	b.n	8009950 <_dtoa_r+0x238>
 80099ac:	f3af 8000 	nop.w
 80099b0:	636f4361 	.word	0x636f4361
 80099b4:	3fd287a7 	.word	0x3fd287a7
 80099b8:	8b60c8b3 	.word	0x8b60c8b3
 80099bc:	3fc68a28 	.word	0x3fc68a28
 80099c0:	509f79fb 	.word	0x509f79fb
 80099c4:	3fd34413 	.word	0x3fd34413
 80099c8:	0800b5d9 	.word	0x0800b5d9
 80099cc:	0800b5f0 	.word	0x0800b5f0
 80099d0:	7ff00000 	.word	0x7ff00000
 80099d4:	0800b5d5 	.word	0x0800b5d5
 80099d8:	0800b5a9 	.word	0x0800b5a9
 80099dc:	0800b5a8 	.word	0x0800b5a8
 80099e0:	0800b740 	.word	0x0800b740
 80099e4:	0800b648 	.word	0x0800b648
 80099e8:	f8d9 201c 	ldr.w	r2, [r9, #28]
 80099ec:	f1ba 0f0e 	cmp.w	sl, #14
 80099f0:	6010      	str	r0, [r2, #0]
 80099f2:	d86e      	bhi.n	8009ad2 <_dtoa_r+0x3ba>
 80099f4:	2c00      	cmp	r4, #0
 80099f6:	d06c      	beq.n	8009ad2 <_dtoa_r+0x3ba>
 80099f8:	f1b8 0f00 	cmp.w	r8, #0
 80099fc:	f340 80b4 	ble.w	8009b68 <_dtoa_r+0x450>
 8009a00:	4ac8      	ldr	r2, [pc, #800]	@ (8009d24 <_dtoa_r+0x60c>)
 8009a02:	f008 010f 	and.w	r1, r8, #15
 8009a06:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 8009a0a:	f418 7f80 	tst.w	r8, #256	@ 0x100
 8009a0e:	ed92 7b00 	vldr	d7, [r2]
 8009a12:	ea4f 1128 	mov.w	r1, r8, asr #4
 8009a16:	f000 809b 	beq.w	8009b50 <_dtoa_r+0x438>
 8009a1a:	4ac3      	ldr	r2, [pc, #780]	@ (8009d28 <_dtoa_r+0x610>)
 8009a1c:	ed92 6b08 	vldr	d6, [r2, #32]
 8009a20:	ee88 6b06 	vdiv.f64	d6, d8, d6
 8009a24:	ed8d 6b02 	vstr	d6, [sp, #8]
 8009a28:	f001 010f 	and.w	r1, r1, #15
 8009a2c:	2203      	movs	r2, #3
 8009a2e:	48be      	ldr	r0, [pc, #760]	@ (8009d28 <_dtoa_r+0x610>)
 8009a30:	2900      	cmp	r1, #0
 8009a32:	f040 808f 	bne.w	8009b54 <_dtoa_r+0x43c>
 8009a36:	ed9d 6b02 	vldr	d6, [sp, #8]
 8009a3a:	ee86 7b07 	vdiv.f64	d7, d6, d7
 8009a3e:	ed8d 7b02 	vstr	d7, [sp, #8]
 8009a42:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8009a44:	ed9d 7b02 	vldr	d7, [sp, #8]
 8009a48:	2900      	cmp	r1, #0
 8009a4a:	f000 80b3 	beq.w	8009bb4 <_dtoa_r+0x49c>
 8009a4e:	eeb7 6b00 	vmov.f64	d6, #112	@ 0x3f800000  1.0
 8009a52:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8009a56:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009a5a:	f140 80ab 	bpl.w	8009bb4 <_dtoa_r+0x49c>
 8009a5e:	f1ba 0f00 	cmp.w	sl, #0
 8009a62:	f000 80a7 	beq.w	8009bb4 <_dtoa_r+0x49c>
 8009a66:	f1bb 0f00 	cmp.w	fp, #0
 8009a6a:	dd30      	ble.n	8009ace <_dtoa_r+0x3b6>
 8009a6c:	eeb2 6b04 	vmov.f64	d6, #36	@ 0x41200000  10.0
 8009a70:	ee27 7b06 	vmul.f64	d7, d7, d6
 8009a74:	ed8d 7b02 	vstr	d7, [sp, #8]
 8009a78:	f108 31ff 	add.w	r1, r8, #4294967295
 8009a7c:	9105      	str	r1, [sp, #20]
 8009a7e:	3201      	adds	r2, #1
 8009a80:	465c      	mov	r4, fp
 8009a82:	ed9d 6b02 	vldr	d6, [sp, #8]
 8009a86:	eeb1 5b0c 	vmov.f64	d5, #28	@ 0x40e00000  7.0
 8009a8a:	ee07 2a90 	vmov	s15, r2
 8009a8e:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8009a92:	eea7 5b06 	vfma.f64	d5, d7, d6
 8009a96:	ee15 2a90 	vmov	r2, s11
 8009a9a:	ec51 0b15 	vmov	r0, r1, d5
 8009a9e:	f1a2 7150 	sub.w	r1, r2, #54525952	@ 0x3400000
 8009aa2:	2c00      	cmp	r4, #0
 8009aa4:	f040 808a 	bne.w	8009bbc <_dtoa_r+0x4a4>
 8009aa8:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
 8009aac:	ee36 6b47 	vsub.f64	d6, d6, d7
 8009ab0:	ec41 0b17 	vmov	d7, r0, r1
 8009ab4:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8009ab8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009abc:	f300 826a 	bgt.w	8009f94 <_dtoa_r+0x87c>
 8009ac0:	eeb1 7b47 	vneg.f64	d7, d7
 8009ac4:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8009ac8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009acc:	d423      	bmi.n	8009b16 <_dtoa_r+0x3fe>
 8009ace:	ed8d 8b02 	vstr	d8, [sp, #8]
 8009ad2:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8009ad4:	2a00      	cmp	r2, #0
 8009ad6:	f2c0 8129 	blt.w	8009d2c <_dtoa_r+0x614>
 8009ada:	f1b8 0f0e 	cmp.w	r8, #14
 8009ade:	f300 8125 	bgt.w	8009d2c <_dtoa_r+0x614>
 8009ae2:	4b90      	ldr	r3, [pc, #576]	@ (8009d24 <_dtoa_r+0x60c>)
 8009ae4:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8009ae8:	ed93 6b00 	vldr	d6, [r3]
 8009aec:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009aee:	2b00      	cmp	r3, #0
 8009af0:	f280 80c8 	bge.w	8009c84 <_dtoa_r+0x56c>
 8009af4:	f1ba 0f00 	cmp.w	sl, #0
 8009af8:	f300 80c4 	bgt.w	8009c84 <_dtoa_r+0x56c>
 8009afc:	d10b      	bne.n	8009b16 <_dtoa_r+0x3fe>
 8009afe:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
 8009b02:	ee26 6b07 	vmul.f64	d6, d6, d7
 8009b06:	ed9d 7b02 	vldr	d7, [sp, #8]
 8009b0a:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8009b0e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009b12:	f2c0 823c 	blt.w	8009f8e <_dtoa_r+0x876>
 8009b16:	2400      	movs	r4, #0
 8009b18:	4625      	mov	r5, r4
 8009b1a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009b1c:	43db      	mvns	r3, r3
 8009b1e:	9305      	str	r3, [sp, #20]
 8009b20:	463e      	mov	r6, r7
 8009b22:	f04f 0800 	mov.w	r8, #0
 8009b26:	4621      	mov	r1, r4
 8009b28:	4648      	mov	r0, r9
 8009b2a:	f000 fc93 	bl	800a454 <_Bfree>
 8009b2e:	2d00      	cmp	r5, #0
 8009b30:	f000 80a2 	beq.w	8009c78 <_dtoa_r+0x560>
 8009b34:	f1b8 0f00 	cmp.w	r8, #0
 8009b38:	d005      	beq.n	8009b46 <_dtoa_r+0x42e>
 8009b3a:	45a8      	cmp	r8, r5
 8009b3c:	d003      	beq.n	8009b46 <_dtoa_r+0x42e>
 8009b3e:	4641      	mov	r1, r8
 8009b40:	4648      	mov	r0, r9
 8009b42:	f000 fc87 	bl	800a454 <_Bfree>
 8009b46:	4629      	mov	r1, r5
 8009b48:	4648      	mov	r0, r9
 8009b4a:	f000 fc83 	bl	800a454 <_Bfree>
 8009b4e:	e093      	b.n	8009c78 <_dtoa_r+0x560>
 8009b50:	2202      	movs	r2, #2
 8009b52:	e76c      	b.n	8009a2e <_dtoa_r+0x316>
 8009b54:	07cc      	lsls	r4, r1, #31
 8009b56:	d504      	bpl.n	8009b62 <_dtoa_r+0x44a>
 8009b58:	ed90 6b00 	vldr	d6, [r0]
 8009b5c:	3201      	adds	r2, #1
 8009b5e:	ee27 7b06 	vmul.f64	d7, d7, d6
 8009b62:	1049      	asrs	r1, r1, #1
 8009b64:	3008      	adds	r0, #8
 8009b66:	e763      	b.n	8009a30 <_dtoa_r+0x318>
 8009b68:	d022      	beq.n	8009bb0 <_dtoa_r+0x498>
 8009b6a:	f1c8 0100 	rsb	r1, r8, #0
 8009b6e:	4a6d      	ldr	r2, [pc, #436]	@ (8009d24 <_dtoa_r+0x60c>)
 8009b70:	f001 000f 	and.w	r0, r1, #15
 8009b74:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 8009b78:	ed92 7b00 	vldr	d7, [r2]
 8009b7c:	ee28 7b07 	vmul.f64	d7, d8, d7
 8009b80:	ed8d 7b02 	vstr	d7, [sp, #8]
 8009b84:	4868      	ldr	r0, [pc, #416]	@ (8009d28 <_dtoa_r+0x610>)
 8009b86:	1109      	asrs	r1, r1, #4
 8009b88:	2400      	movs	r4, #0
 8009b8a:	2202      	movs	r2, #2
 8009b8c:	b929      	cbnz	r1, 8009b9a <_dtoa_r+0x482>
 8009b8e:	2c00      	cmp	r4, #0
 8009b90:	f43f af57 	beq.w	8009a42 <_dtoa_r+0x32a>
 8009b94:	ed8d 7b02 	vstr	d7, [sp, #8]
 8009b98:	e753      	b.n	8009a42 <_dtoa_r+0x32a>
 8009b9a:	07ce      	lsls	r6, r1, #31
 8009b9c:	d505      	bpl.n	8009baa <_dtoa_r+0x492>
 8009b9e:	ed90 6b00 	vldr	d6, [r0]
 8009ba2:	3201      	adds	r2, #1
 8009ba4:	2401      	movs	r4, #1
 8009ba6:	ee27 7b06 	vmul.f64	d7, d7, d6
 8009baa:	1049      	asrs	r1, r1, #1
 8009bac:	3008      	adds	r0, #8
 8009bae:	e7ed      	b.n	8009b8c <_dtoa_r+0x474>
 8009bb0:	2202      	movs	r2, #2
 8009bb2:	e746      	b.n	8009a42 <_dtoa_r+0x32a>
 8009bb4:	f8cd 8014 	str.w	r8, [sp, #20]
 8009bb8:	4654      	mov	r4, sl
 8009bba:	e762      	b.n	8009a82 <_dtoa_r+0x36a>
 8009bbc:	4a59      	ldr	r2, [pc, #356]	@ (8009d24 <_dtoa_r+0x60c>)
 8009bbe:	eb02 02c4 	add.w	r2, r2, r4, lsl #3
 8009bc2:	ed12 4b02 	vldr	d4, [r2, #-8]
 8009bc6:	9a08      	ldr	r2, [sp, #32]
 8009bc8:	ec41 0b17 	vmov	d7, r0, r1
 8009bcc:	443c      	add	r4, r7
 8009bce:	b34a      	cbz	r2, 8009c24 <_dtoa_r+0x50c>
 8009bd0:	eeb6 3b00 	vmov.f64	d3, #96	@ 0x3f000000  0.5
 8009bd4:	eeb7 2b00 	vmov.f64	d2, #112	@ 0x3f800000  1.0
 8009bd8:	463e      	mov	r6, r7
 8009bda:	ee83 5b04 	vdiv.f64	d5, d3, d4
 8009bde:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
 8009be2:	ee35 7b47 	vsub.f64	d7, d5, d7
 8009be6:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8009bea:	ee14 2a90 	vmov	r2, s9
 8009bee:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8009bf2:	3230      	adds	r2, #48	@ 0x30
 8009bf4:	ee36 6b45 	vsub.f64	d6, d6, d5
 8009bf8:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8009bfc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009c00:	f806 2b01 	strb.w	r2, [r6], #1
 8009c04:	d438      	bmi.n	8009c78 <_dtoa_r+0x560>
 8009c06:	ee32 5b46 	vsub.f64	d5, d2, d6
 8009c0a:	eeb4 5bc7 	vcmpe.f64	d5, d7
 8009c0e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009c12:	d46e      	bmi.n	8009cf2 <_dtoa_r+0x5da>
 8009c14:	42a6      	cmp	r6, r4
 8009c16:	f43f af5a 	beq.w	8009ace <_dtoa_r+0x3b6>
 8009c1a:	ee27 7b03 	vmul.f64	d7, d7, d3
 8009c1e:	ee26 6b03 	vmul.f64	d6, d6, d3
 8009c22:	e7e0      	b.n	8009be6 <_dtoa_r+0x4ce>
 8009c24:	4621      	mov	r1, r4
 8009c26:	463e      	mov	r6, r7
 8009c28:	ee27 7b04 	vmul.f64	d7, d7, d4
 8009c2c:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
 8009c30:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8009c34:	ee14 2a90 	vmov	r2, s9
 8009c38:	3230      	adds	r2, #48	@ 0x30
 8009c3a:	f806 2b01 	strb.w	r2, [r6], #1
 8009c3e:	42a6      	cmp	r6, r4
 8009c40:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8009c44:	ee36 6b45 	vsub.f64	d6, d6, d5
 8009c48:	d119      	bne.n	8009c7e <_dtoa_r+0x566>
 8009c4a:	eeb6 5b00 	vmov.f64	d5, #96	@ 0x3f000000  0.5
 8009c4e:	ee37 4b05 	vadd.f64	d4, d7, d5
 8009c52:	eeb4 6bc4 	vcmpe.f64	d6, d4
 8009c56:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009c5a:	dc4a      	bgt.n	8009cf2 <_dtoa_r+0x5da>
 8009c5c:	ee35 5b47 	vsub.f64	d5, d5, d7
 8009c60:	eeb4 6bc5 	vcmpe.f64	d6, d5
 8009c64:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009c68:	f57f af31 	bpl.w	8009ace <_dtoa_r+0x3b6>
 8009c6c:	460e      	mov	r6, r1
 8009c6e:	3901      	subs	r1, #1
 8009c70:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8009c74:	2b30      	cmp	r3, #48	@ 0x30
 8009c76:	d0f9      	beq.n	8009c6c <_dtoa_r+0x554>
 8009c78:	f8dd 8014 	ldr.w	r8, [sp, #20]
 8009c7c:	e027      	b.n	8009cce <_dtoa_r+0x5b6>
 8009c7e:	ee26 6b03 	vmul.f64	d6, d6, d3
 8009c82:	e7d5      	b.n	8009c30 <_dtoa_r+0x518>
 8009c84:	ed9d 7b02 	vldr	d7, [sp, #8]
 8009c88:	eeb2 4b04 	vmov.f64	d4, #36	@ 0x41200000  10.0
 8009c8c:	463e      	mov	r6, r7
 8009c8e:	ee87 5b06 	vdiv.f64	d5, d7, d6
 8009c92:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 8009c96:	ee15 3a10 	vmov	r3, s10
 8009c9a:	3330      	adds	r3, #48	@ 0x30
 8009c9c:	f806 3b01 	strb.w	r3, [r6], #1
 8009ca0:	1bf3      	subs	r3, r6, r7
 8009ca2:	459a      	cmp	sl, r3
 8009ca4:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 8009ca8:	eea3 7b46 	vfms.f64	d7, d3, d6
 8009cac:	d132      	bne.n	8009d14 <_dtoa_r+0x5fc>
 8009cae:	ee37 7b07 	vadd.f64	d7, d7, d7
 8009cb2:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8009cb6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009cba:	dc18      	bgt.n	8009cee <_dtoa_r+0x5d6>
 8009cbc:	eeb4 7b46 	vcmp.f64	d7, d6
 8009cc0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009cc4:	d103      	bne.n	8009cce <_dtoa_r+0x5b6>
 8009cc6:	ee15 3a10 	vmov	r3, s10
 8009cca:	07db      	lsls	r3, r3, #31
 8009ccc:	d40f      	bmi.n	8009cee <_dtoa_r+0x5d6>
 8009cce:	9901      	ldr	r1, [sp, #4]
 8009cd0:	4648      	mov	r0, r9
 8009cd2:	f000 fbbf 	bl	800a454 <_Bfree>
 8009cd6:	2300      	movs	r3, #0
 8009cd8:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8009cda:	7033      	strb	r3, [r6, #0]
 8009cdc:	f108 0301 	add.w	r3, r8, #1
 8009ce0:	6013      	str	r3, [r2, #0]
 8009ce2:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8009ce4:	2b00      	cmp	r3, #0
 8009ce6:	f000 824b 	beq.w	800a180 <_dtoa_r+0xa68>
 8009cea:	601e      	str	r6, [r3, #0]
 8009cec:	e248      	b.n	800a180 <_dtoa_r+0xa68>
 8009cee:	f8cd 8014 	str.w	r8, [sp, #20]
 8009cf2:	4633      	mov	r3, r6
 8009cf4:	461e      	mov	r6, r3
 8009cf6:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009cfa:	2a39      	cmp	r2, #57	@ 0x39
 8009cfc:	d106      	bne.n	8009d0c <_dtoa_r+0x5f4>
 8009cfe:	429f      	cmp	r7, r3
 8009d00:	d1f8      	bne.n	8009cf4 <_dtoa_r+0x5dc>
 8009d02:	9a05      	ldr	r2, [sp, #20]
 8009d04:	3201      	adds	r2, #1
 8009d06:	9205      	str	r2, [sp, #20]
 8009d08:	2230      	movs	r2, #48	@ 0x30
 8009d0a:	703a      	strb	r2, [r7, #0]
 8009d0c:	781a      	ldrb	r2, [r3, #0]
 8009d0e:	3201      	adds	r2, #1
 8009d10:	701a      	strb	r2, [r3, #0]
 8009d12:	e7b1      	b.n	8009c78 <_dtoa_r+0x560>
 8009d14:	ee27 7b04 	vmul.f64	d7, d7, d4
 8009d18:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8009d1c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009d20:	d1b5      	bne.n	8009c8e <_dtoa_r+0x576>
 8009d22:	e7d4      	b.n	8009cce <_dtoa_r+0x5b6>
 8009d24:	0800b740 	.word	0x0800b740
 8009d28:	0800b718 	.word	0x0800b718
 8009d2c:	9908      	ldr	r1, [sp, #32]
 8009d2e:	2900      	cmp	r1, #0
 8009d30:	f000 80e9 	beq.w	8009f06 <_dtoa_r+0x7ee>
 8009d34:	9907      	ldr	r1, [sp, #28]
 8009d36:	2901      	cmp	r1, #1
 8009d38:	f300 80cb 	bgt.w	8009ed2 <_dtoa_r+0x7ba>
 8009d3c:	2d00      	cmp	r5, #0
 8009d3e:	f000 80c4 	beq.w	8009eca <_dtoa_r+0x7b2>
 8009d42:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 8009d46:	9e04      	ldr	r6, [sp, #16]
 8009d48:	461c      	mov	r4, r3
 8009d4a:	9305      	str	r3, [sp, #20]
 8009d4c:	9b04      	ldr	r3, [sp, #16]
 8009d4e:	4413      	add	r3, r2
 8009d50:	9304      	str	r3, [sp, #16]
 8009d52:	9b06      	ldr	r3, [sp, #24]
 8009d54:	2101      	movs	r1, #1
 8009d56:	4413      	add	r3, r2
 8009d58:	4648      	mov	r0, r9
 8009d5a:	9306      	str	r3, [sp, #24]
 8009d5c:	f000 fc2e 	bl	800a5bc <__i2b>
 8009d60:	9b05      	ldr	r3, [sp, #20]
 8009d62:	4605      	mov	r5, r0
 8009d64:	b166      	cbz	r6, 8009d80 <_dtoa_r+0x668>
 8009d66:	9a06      	ldr	r2, [sp, #24]
 8009d68:	2a00      	cmp	r2, #0
 8009d6a:	dd09      	ble.n	8009d80 <_dtoa_r+0x668>
 8009d6c:	42b2      	cmp	r2, r6
 8009d6e:	9904      	ldr	r1, [sp, #16]
 8009d70:	bfa8      	it	ge
 8009d72:	4632      	movge	r2, r6
 8009d74:	1a89      	subs	r1, r1, r2
 8009d76:	9104      	str	r1, [sp, #16]
 8009d78:	9906      	ldr	r1, [sp, #24]
 8009d7a:	1ab6      	subs	r6, r6, r2
 8009d7c:	1a8a      	subs	r2, r1, r2
 8009d7e:	9206      	str	r2, [sp, #24]
 8009d80:	b30b      	cbz	r3, 8009dc6 <_dtoa_r+0x6ae>
 8009d82:	9a08      	ldr	r2, [sp, #32]
 8009d84:	2a00      	cmp	r2, #0
 8009d86:	f000 80c5 	beq.w	8009f14 <_dtoa_r+0x7fc>
 8009d8a:	2c00      	cmp	r4, #0
 8009d8c:	f000 80bf 	beq.w	8009f0e <_dtoa_r+0x7f6>
 8009d90:	4629      	mov	r1, r5
 8009d92:	4622      	mov	r2, r4
 8009d94:	4648      	mov	r0, r9
 8009d96:	930b      	str	r3, [sp, #44]	@ 0x2c
 8009d98:	f000 fcc8 	bl	800a72c <__pow5mult>
 8009d9c:	9a01      	ldr	r2, [sp, #4]
 8009d9e:	4601      	mov	r1, r0
 8009da0:	4605      	mov	r5, r0
 8009da2:	4648      	mov	r0, r9
 8009da4:	f000 fc20 	bl	800a5e8 <__multiply>
 8009da8:	9901      	ldr	r1, [sp, #4]
 8009daa:	9005      	str	r0, [sp, #20]
 8009dac:	4648      	mov	r0, r9
 8009dae:	f000 fb51 	bl	800a454 <_Bfree>
 8009db2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009db4:	1b1b      	subs	r3, r3, r4
 8009db6:	f000 80b0 	beq.w	8009f1a <_dtoa_r+0x802>
 8009dba:	9905      	ldr	r1, [sp, #20]
 8009dbc:	461a      	mov	r2, r3
 8009dbe:	4648      	mov	r0, r9
 8009dc0:	f000 fcb4 	bl	800a72c <__pow5mult>
 8009dc4:	9001      	str	r0, [sp, #4]
 8009dc6:	2101      	movs	r1, #1
 8009dc8:	4648      	mov	r0, r9
 8009dca:	f000 fbf7 	bl	800a5bc <__i2b>
 8009dce:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009dd0:	4604      	mov	r4, r0
 8009dd2:	2b00      	cmp	r3, #0
 8009dd4:	f000 81da 	beq.w	800a18c <_dtoa_r+0xa74>
 8009dd8:	461a      	mov	r2, r3
 8009dda:	4601      	mov	r1, r0
 8009ddc:	4648      	mov	r0, r9
 8009dde:	f000 fca5 	bl	800a72c <__pow5mult>
 8009de2:	9b07      	ldr	r3, [sp, #28]
 8009de4:	2b01      	cmp	r3, #1
 8009de6:	4604      	mov	r4, r0
 8009de8:	f300 80a0 	bgt.w	8009f2c <_dtoa_r+0x814>
 8009dec:	9b02      	ldr	r3, [sp, #8]
 8009dee:	2b00      	cmp	r3, #0
 8009df0:	f040 8096 	bne.w	8009f20 <_dtoa_r+0x808>
 8009df4:	9b03      	ldr	r3, [sp, #12]
 8009df6:	f3c3 0213 	ubfx	r2, r3, #0, #20
 8009dfa:	2a00      	cmp	r2, #0
 8009dfc:	f040 8092 	bne.w	8009f24 <_dtoa_r+0x80c>
 8009e00:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8009e04:	0d12      	lsrs	r2, r2, #20
 8009e06:	0512      	lsls	r2, r2, #20
 8009e08:	2a00      	cmp	r2, #0
 8009e0a:	f000 808d 	beq.w	8009f28 <_dtoa_r+0x810>
 8009e0e:	9b04      	ldr	r3, [sp, #16]
 8009e10:	3301      	adds	r3, #1
 8009e12:	9304      	str	r3, [sp, #16]
 8009e14:	9b06      	ldr	r3, [sp, #24]
 8009e16:	3301      	adds	r3, #1
 8009e18:	9306      	str	r3, [sp, #24]
 8009e1a:	2301      	movs	r3, #1
 8009e1c:	930b      	str	r3, [sp, #44]	@ 0x2c
 8009e1e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009e20:	2b00      	cmp	r3, #0
 8009e22:	f000 81b9 	beq.w	800a198 <_dtoa_r+0xa80>
 8009e26:	6922      	ldr	r2, [r4, #16]
 8009e28:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8009e2c:	6910      	ldr	r0, [r2, #16]
 8009e2e:	f000 fb79 	bl	800a524 <__hi0bits>
 8009e32:	f1c0 0020 	rsb	r0, r0, #32
 8009e36:	9b06      	ldr	r3, [sp, #24]
 8009e38:	4418      	add	r0, r3
 8009e3a:	f010 001f 	ands.w	r0, r0, #31
 8009e3e:	f000 8081 	beq.w	8009f44 <_dtoa_r+0x82c>
 8009e42:	f1c0 0220 	rsb	r2, r0, #32
 8009e46:	2a04      	cmp	r2, #4
 8009e48:	dd73      	ble.n	8009f32 <_dtoa_r+0x81a>
 8009e4a:	9b04      	ldr	r3, [sp, #16]
 8009e4c:	f1c0 001c 	rsb	r0, r0, #28
 8009e50:	4403      	add	r3, r0
 8009e52:	9304      	str	r3, [sp, #16]
 8009e54:	9b06      	ldr	r3, [sp, #24]
 8009e56:	4406      	add	r6, r0
 8009e58:	4403      	add	r3, r0
 8009e5a:	9306      	str	r3, [sp, #24]
 8009e5c:	9b04      	ldr	r3, [sp, #16]
 8009e5e:	2b00      	cmp	r3, #0
 8009e60:	dd05      	ble.n	8009e6e <_dtoa_r+0x756>
 8009e62:	9901      	ldr	r1, [sp, #4]
 8009e64:	461a      	mov	r2, r3
 8009e66:	4648      	mov	r0, r9
 8009e68:	f000 fcba 	bl	800a7e0 <__lshift>
 8009e6c:	9001      	str	r0, [sp, #4]
 8009e6e:	9b06      	ldr	r3, [sp, #24]
 8009e70:	2b00      	cmp	r3, #0
 8009e72:	dd05      	ble.n	8009e80 <_dtoa_r+0x768>
 8009e74:	4621      	mov	r1, r4
 8009e76:	461a      	mov	r2, r3
 8009e78:	4648      	mov	r0, r9
 8009e7a:	f000 fcb1 	bl	800a7e0 <__lshift>
 8009e7e:	4604      	mov	r4, r0
 8009e80:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8009e82:	2b00      	cmp	r3, #0
 8009e84:	d060      	beq.n	8009f48 <_dtoa_r+0x830>
 8009e86:	9801      	ldr	r0, [sp, #4]
 8009e88:	4621      	mov	r1, r4
 8009e8a:	f000 fd15 	bl	800a8b8 <__mcmp>
 8009e8e:	2800      	cmp	r0, #0
 8009e90:	da5a      	bge.n	8009f48 <_dtoa_r+0x830>
 8009e92:	f108 33ff 	add.w	r3, r8, #4294967295
 8009e96:	9305      	str	r3, [sp, #20]
 8009e98:	9901      	ldr	r1, [sp, #4]
 8009e9a:	2300      	movs	r3, #0
 8009e9c:	220a      	movs	r2, #10
 8009e9e:	4648      	mov	r0, r9
 8009ea0:	f000 fafa 	bl	800a498 <__multadd>
 8009ea4:	9b08      	ldr	r3, [sp, #32]
 8009ea6:	9001      	str	r0, [sp, #4]
 8009ea8:	2b00      	cmp	r3, #0
 8009eaa:	f000 8177 	beq.w	800a19c <_dtoa_r+0xa84>
 8009eae:	4629      	mov	r1, r5
 8009eb0:	2300      	movs	r3, #0
 8009eb2:	220a      	movs	r2, #10
 8009eb4:	4648      	mov	r0, r9
 8009eb6:	f000 faef 	bl	800a498 <__multadd>
 8009eba:	f1bb 0f00 	cmp.w	fp, #0
 8009ebe:	4605      	mov	r5, r0
 8009ec0:	dc6e      	bgt.n	8009fa0 <_dtoa_r+0x888>
 8009ec2:	9b07      	ldr	r3, [sp, #28]
 8009ec4:	2b02      	cmp	r3, #2
 8009ec6:	dc48      	bgt.n	8009f5a <_dtoa_r+0x842>
 8009ec8:	e06a      	b.n	8009fa0 <_dtoa_r+0x888>
 8009eca:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8009ecc:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 8009ed0:	e739      	b.n	8009d46 <_dtoa_r+0x62e>
 8009ed2:	f10a 34ff 	add.w	r4, sl, #4294967295
 8009ed6:	42a3      	cmp	r3, r4
 8009ed8:	db07      	blt.n	8009eea <_dtoa_r+0x7d2>
 8009eda:	f1ba 0f00 	cmp.w	sl, #0
 8009ede:	eba3 0404 	sub.w	r4, r3, r4
 8009ee2:	db0b      	blt.n	8009efc <_dtoa_r+0x7e4>
 8009ee4:	9e04      	ldr	r6, [sp, #16]
 8009ee6:	4652      	mov	r2, sl
 8009ee8:	e72f      	b.n	8009d4a <_dtoa_r+0x632>
 8009eea:	1ae2      	subs	r2, r4, r3
 8009eec:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009eee:	9e04      	ldr	r6, [sp, #16]
 8009ef0:	4413      	add	r3, r2
 8009ef2:	930a      	str	r3, [sp, #40]	@ 0x28
 8009ef4:	4652      	mov	r2, sl
 8009ef6:	4623      	mov	r3, r4
 8009ef8:	2400      	movs	r4, #0
 8009efa:	e726      	b.n	8009d4a <_dtoa_r+0x632>
 8009efc:	9a04      	ldr	r2, [sp, #16]
 8009efe:	eba2 060a 	sub.w	r6, r2, sl
 8009f02:	2200      	movs	r2, #0
 8009f04:	e721      	b.n	8009d4a <_dtoa_r+0x632>
 8009f06:	9e04      	ldr	r6, [sp, #16]
 8009f08:	9d08      	ldr	r5, [sp, #32]
 8009f0a:	461c      	mov	r4, r3
 8009f0c:	e72a      	b.n	8009d64 <_dtoa_r+0x64c>
 8009f0e:	9a01      	ldr	r2, [sp, #4]
 8009f10:	9205      	str	r2, [sp, #20]
 8009f12:	e752      	b.n	8009dba <_dtoa_r+0x6a2>
 8009f14:	9901      	ldr	r1, [sp, #4]
 8009f16:	461a      	mov	r2, r3
 8009f18:	e751      	b.n	8009dbe <_dtoa_r+0x6a6>
 8009f1a:	9b05      	ldr	r3, [sp, #20]
 8009f1c:	9301      	str	r3, [sp, #4]
 8009f1e:	e752      	b.n	8009dc6 <_dtoa_r+0x6ae>
 8009f20:	2300      	movs	r3, #0
 8009f22:	e77b      	b.n	8009e1c <_dtoa_r+0x704>
 8009f24:	9b02      	ldr	r3, [sp, #8]
 8009f26:	e779      	b.n	8009e1c <_dtoa_r+0x704>
 8009f28:	920b      	str	r2, [sp, #44]	@ 0x2c
 8009f2a:	e778      	b.n	8009e1e <_dtoa_r+0x706>
 8009f2c:	2300      	movs	r3, #0
 8009f2e:	930b      	str	r3, [sp, #44]	@ 0x2c
 8009f30:	e779      	b.n	8009e26 <_dtoa_r+0x70e>
 8009f32:	d093      	beq.n	8009e5c <_dtoa_r+0x744>
 8009f34:	9b04      	ldr	r3, [sp, #16]
 8009f36:	321c      	adds	r2, #28
 8009f38:	4413      	add	r3, r2
 8009f3a:	9304      	str	r3, [sp, #16]
 8009f3c:	9b06      	ldr	r3, [sp, #24]
 8009f3e:	4416      	add	r6, r2
 8009f40:	4413      	add	r3, r2
 8009f42:	e78a      	b.n	8009e5a <_dtoa_r+0x742>
 8009f44:	4602      	mov	r2, r0
 8009f46:	e7f5      	b.n	8009f34 <_dtoa_r+0x81c>
 8009f48:	f1ba 0f00 	cmp.w	sl, #0
 8009f4c:	f8cd 8014 	str.w	r8, [sp, #20]
 8009f50:	46d3      	mov	fp, sl
 8009f52:	dc21      	bgt.n	8009f98 <_dtoa_r+0x880>
 8009f54:	9b07      	ldr	r3, [sp, #28]
 8009f56:	2b02      	cmp	r3, #2
 8009f58:	dd1e      	ble.n	8009f98 <_dtoa_r+0x880>
 8009f5a:	f1bb 0f00 	cmp.w	fp, #0
 8009f5e:	f47f addc 	bne.w	8009b1a <_dtoa_r+0x402>
 8009f62:	4621      	mov	r1, r4
 8009f64:	465b      	mov	r3, fp
 8009f66:	2205      	movs	r2, #5
 8009f68:	4648      	mov	r0, r9
 8009f6a:	f000 fa95 	bl	800a498 <__multadd>
 8009f6e:	4601      	mov	r1, r0
 8009f70:	4604      	mov	r4, r0
 8009f72:	9801      	ldr	r0, [sp, #4]
 8009f74:	f000 fca0 	bl	800a8b8 <__mcmp>
 8009f78:	2800      	cmp	r0, #0
 8009f7a:	f77f adce 	ble.w	8009b1a <_dtoa_r+0x402>
 8009f7e:	463e      	mov	r6, r7
 8009f80:	2331      	movs	r3, #49	@ 0x31
 8009f82:	f806 3b01 	strb.w	r3, [r6], #1
 8009f86:	9b05      	ldr	r3, [sp, #20]
 8009f88:	3301      	adds	r3, #1
 8009f8a:	9305      	str	r3, [sp, #20]
 8009f8c:	e5c9      	b.n	8009b22 <_dtoa_r+0x40a>
 8009f8e:	f8cd 8014 	str.w	r8, [sp, #20]
 8009f92:	4654      	mov	r4, sl
 8009f94:	4625      	mov	r5, r4
 8009f96:	e7f2      	b.n	8009f7e <_dtoa_r+0x866>
 8009f98:	9b08      	ldr	r3, [sp, #32]
 8009f9a:	2b00      	cmp	r3, #0
 8009f9c:	f000 8102 	beq.w	800a1a4 <_dtoa_r+0xa8c>
 8009fa0:	2e00      	cmp	r6, #0
 8009fa2:	dd05      	ble.n	8009fb0 <_dtoa_r+0x898>
 8009fa4:	4629      	mov	r1, r5
 8009fa6:	4632      	mov	r2, r6
 8009fa8:	4648      	mov	r0, r9
 8009faa:	f000 fc19 	bl	800a7e0 <__lshift>
 8009fae:	4605      	mov	r5, r0
 8009fb0:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009fb2:	2b00      	cmp	r3, #0
 8009fb4:	d058      	beq.n	800a068 <_dtoa_r+0x950>
 8009fb6:	6869      	ldr	r1, [r5, #4]
 8009fb8:	4648      	mov	r0, r9
 8009fba:	f000 fa0b 	bl	800a3d4 <_Balloc>
 8009fbe:	4606      	mov	r6, r0
 8009fc0:	b928      	cbnz	r0, 8009fce <_dtoa_r+0x8b6>
 8009fc2:	4b82      	ldr	r3, [pc, #520]	@ (800a1cc <_dtoa_r+0xab4>)
 8009fc4:	4602      	mov	r2, r0
 8009fc6:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8009fca:	f7ff bbbe 	b.w	800974a <_dtoa_r+0x32>
 8009fce:	692a      	ldr	r2, [r5, #16]
 8009fd0:	3202      	adds	r2, #2
 8009fd2:	0092      	lsls	r2, r2, #2
 8009fd4:	f105 010c 	add.w	r1, r5, #12
 8009fd8:	300c      	adds	r0, #12
 8009fda:	f000 fff7 	bl	800afcc <memcpy>
 8009fde:	2201      	movs	r2, #1
 8009fe0:	4631      	mov	r1, r6
 8009fe2:	4648      	mov	r0, r9
 8009fe4:	f000 fbfc 	bl	800a7e0 <__lshift>
 8009fe8:	1c7b      	adds	r3, r7, #1
 8009fea:	9304      	str	r3, [sp, #16]
 8009fec:	eb07 030b 	add.w	r3, r7, fp
 8009ff0:	9309      	str	r3, [sp, #36]	@ 0x24
 8009ff2:	9b02      	ldr	r3, [sp, #8]
 8009ff4:	f003 0301 	and.w	r3, r3, #1
 8009ff8:	46a8      	mov	r8, r5
 8009ffa:	9308      	str	r3, [sp, #32]
 8009ffc:	4605      	mov	r5, r0
 8009ffe:	9b04      	ldr	r3, [sp, #16]
 800a000:	9801      	ldr	r0, [sp, #4]
 800a002:	4621      	mov	r1, r4
 800a004:	f103 3bff 	add.w	fp, r3, #4294967295
 800a008:	f7ff fafd 	bl	8009606 <quorem>
 800a00c:	4641      	mov	r1, r8
 800a00e:	9002      	str	r0, [sp, #8]
 800a010:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
 800a014:	9801      	ldr	r0, [sp, #4]
 800a016:	f000 fc4f 	bl	800a8b8 <__mcmp>
 800a01a:	462a      	mov	r2, r5
 800a01c:	9006      	str	r0, [sp, #24]
 800a01e:	4621      	mov	r1, r4
 800a020:	4648      	mov	r0, r9
 800a022:	f000 fc65 	bl	800a8f0 <__mdiff>
 800a026:	68c2      	ldr	r2, [r0, #12]
 800a028:	4606      	mov	r6, r0
 800a02a:	b9fa      	cbnz	r2, 800a06c <_dtoa_r+0x954>
 800a02c:	4601      	mov	r1, r0
 800a02e:	9801      	ldr	r0, [sp, #4]
 800a030:	f000 fc42 	bl	800a8b8 <__mcmp>
 800a034:	4602      	mov	r2, r0
 800a036:	4631      	mov	r1, r6
 800a038:	4648      	mov	r0, r9
 800a03a:	920a      	str	r2, [sp, #40]	@ 0x28
 800a03c:	f000 fa0a 	bl	800a454 <_Bfree>
 800a040:	9b07      	ldr	r3, [sp, #28]
 800a042:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800a044:	9e04      	ldr	r6, [sp, #16]
 800a046:	ea42 0103 	orr.w	r1, r2, r3
 800a04a:	9b08      	ldr	r3, [sp, #32]
 800a04c:	4319      	orrs	r1, r3
 800a04e:	d10f      	bne.n	800a070 <_dtoa_r+0x958>
 800a050:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 800a054:	d028      	beq.n	800a0a8 <_dtoa_r+0x990>
 800a056:	9b06      	ldr	r3, [sp, #24]
 800a058:	2b00      	cmp	r3, #0
 800a05a:	dd02      	ble.n	800a062 <_dtoa_r+0x94a>
 800a05c:	9b02      	ldr	r3, [sp, #8]
 800a05e:	f103 0a31 	add.w	sl, r3, #49	@ 0x31
 800a062:	f88b a000 	strb.w	sl, [fp]
 800a066:	e55e      	b.n	8009b26 <_dtoa_r+0x40e>
 800a068:	4628      	mov	r0, r5
 800a06a:	e7bd      	b.n	8009fe8 <_dtoa_r+0x8d0>
 800a06c:	2201      	movs	r2, #1
 800a06e:	e7e2      	b.n	800a036 <_dtoa_r+0x91e>
 800a070:	9b06      	ldr	r3, [sp, #24]
 800a072:	2b00      	cmp	r3, #0
 800a074:	db04      	blt.n	800a080 <_dtoa_r+0x968>
 800a076:	9907      	ldr	r1, [sp, #28]
 800a078:	430b      	orrs	r3, r1
 800a07a:	9908      	ldr	r1, [sp, #32]
 800a07c:	430b      	orrs	r3, r1
 800a07e:	d120      	bne.n	800a0c2 <_dtoa_r+0x9aa>
 800a080:	2a00      	cmp	r2, #0
 800a082:	ddee      	ble.n	800a062 <_dtoa_r+0x94a>
 800a084:	9901      	ldr	r1, [sp, #4]
 800a086:	2201      	movs	r2, #1
 800a088:	4648      	mov	r0, r9
 800a08a:	f000 fba9 	bl	800a7e0 <__lshift>
 800a08e:	4621      	mov	r1, r4
 800a090:	9001      	str	r0, [sp, #4]
 800a092:	f000 fc11 	bl	800a8b8 <__mcmp>
 800a096:	2800      	cmp	r0, #0
 800a098:	dc03      	bgt.n	800a0a2 <_dtoa_r+0x98a>
 800a09a:	d1e2      	bne.n	800a062 <_dtoa_r+0x94a>
 800a09c:	f01a 0f01 	tst.w	sl, #1
 800a0a0:	d0df      	beq.n	800a062 <_dtoa_r+0x94a>
 800a0a2:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 800a0a6:	d1d9      	bne.n	800a05c <_dtoa_r+0x944>
 800a0a8:	2339      	movs	r3, #57	@ 0x39
 800a0aa:	f88b 3000 	strb.w	r3, [fp]
 800a0ae:	4633      	mov	r3, r6
 800a0b0:	461e      	mov	r6, r3
 800a0b2:	3b01      	subs	r3, #1
 800a0b4:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800a0b8:	2a39      	cmp	r2, #57	@ 0x39
 800a0ba:	d052      	beq.n	800a162 <_dtoa_r+0xa4a>
 800a0bc:	3201      	adds	r2, #1
 800a0be:	701a      	strb	r2, [r3, #0]
 800a0c0:	e531      	b.n	8009b26 <_dtoa_r+0x40e>
 800a0c2:	2a00      	cmp	r2, #0
 800a0c4:	dd07      	ble.n	800a0d6 <_dtoa_r+0x9be>
 800a0c6:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 800a0ca:	d0ed      	beq.n	800a0a8 <_dtoa_r+0x990>
 800a0cc:	f10a 0301 	add.w	r3, sl, #1
 800a0d0:	f88b 3000 	strb.w	r3, [fp]
 800a0d4:	e527      	b.n	8009b26 <_dtoa_r+0x40e>
 800a0d6:	9b04      	ldr	r3, [sp, #16]
 800a0d8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a0da:	f803 ac01 	strb.w	sl, [r3, #-1]
 800a0de:	4293      	cmp	r3, r2
 800a0e0:	d029      	beq.n	800a136 <_dtoa_r+0xa1e>
 800a0e2:	9901      	ldr	r1, [sp, #4]
 800a0e4:	2300      	movs	r3, #0
 800a0e6:	220a      	movs	r2, #10
 800a0e8:	4648      	mov	r0, r9
 800a0ea:	f000 f9d5 	bl	800a498 <__multadd>
 800a0ee:	45a8      	cmp	r8, r5
 800a0f0:	9001      	str	r0, [sp, #4]
 800a0f2:	f04f 0300 	mov.w	r3, #0
 800a0f6:	f04f 020a 	mov.w	r2, #10
 800a0fa:	4641      	mov	r1, r8
 800a0fc:	4648      	mov	r0, r9
 800a0fe:	d107      	bne.n	800a110 <_dtoa_r+0x9f8>
 800a100:	f000 f9ca 	bl	800a498 <__multadd>
 800a104:	4680      	mov	r8, r0
 800a106:	4605      	mov	r5, r0
 800a108:	9b04      	ldr	r3, [sp, #16]
 800a10a:	3301      	adds	r3, #1
 800a10c:	9304      	str	r3, [sp, #16]
 800a10e:	e776      	b.n	8009ffe <_dtoa_r+0x8e6>
 800a110:	f000 f9c2 	bl	800a498 <__multadd>
 800a114:	4629      	mov	r1, r5
 800a116:	4680      	mov	r8, r0
 800a118:	2300      	movs	r3, #0
 800a11a:	220a      	movs	r2, #10
 800a11c:	4648      	mov	r0, r9
 800a11e:	f000 f9bb 	bl	800a498 <__multadd>
 800a122:	4605      	mov	r5, r0
 800a124:	e7f0      	b.n	800a108 <_dtoa_r+0x9f0>
 800a126:	f1bb 0f00 	cmp.w	fp, #0
 800a12a:	bfcc      	ite	gt
 800a12c:	465e      	movgt	r6, fp
 800a12e:	2601      	movle	r6, #1
 800a130:	443e      	add	r6, r7
 800a132:	f04f 0800 	mov.w	r8, #0
 800a136:	9901      	ldr	r1, [sp, #4]
 800a138:	2201      	movs	r2, #1
 800a13a:	4648      	mov	r0, r9
 800a13c:	f000 fb50 	bl	800a7e0 <__lshift>
 800a140:	4621      	mov	r1, r4
 800a142:	9001      	str	r0, [sp, #4]
 800a144:	f000 fbb8 	bl	800a8b8 <__mcmp>
 800a148:	2800      	cmp	r0, #0
 800a14a:	dcb0      	bgt.n	800a0ae <_dtoa_r+0x996>
 800a14c:	d102      	bne.n	800a154 <_dtoa_r+0xa3c>
 800a14e:	f01a 0f01 	tst.w	sl, #1
 800a152:	d1ac      	bne.n	800a0ae <_dtoa_r+0x996>
 800a154:	4633      	mov	r3, r6
 800a156:	461e      	mov	r6, r3
 800a158:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a15c:	2a30      	cmp	r2, #48	@ 0x30
 800a15e:	d0fa      	beq.n	800a156 <_dtoa_r+0xa3e>
 800a160:	e4e1      	b.n	8009b26 <_dtoa_r+0x40e>
 800a162:	429f      	cmp	r7, r3
 800a164:	d1a4      	bne.n	800a0b0 <_dtoa_r+0x998>
 800a166:	9b05      	ldr	r3, [sp, #20]
 800a168:	3301      	adds	r3, #1
 800a16a:	9305      	str	r3, [sp, #20]
 800a16c:	2331      	movs	r3, #49	@ 0x31
 800a16e:	703b      	strb	r3, [r7, #0]
 800a170:	e4d9      	b.n	8009b26 <_dtoa_r+0x40e>
 800a172:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800a174:	4f16      	ldr	r7, [pc, #88]	@ (800a1d0 <_dtoa_r+0xab8>)
 800a176:	b11b      	cbz	r3, 800a180 <_dtoa_r+0xa68>
 800a178:	f107 0308 	add.w	r3, r7, #8
 800a17c:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 800a17e:	6013      	str	r3, [r2, #0]
 800a180:	4638      	mov	r0, r7
 800a182:	b011      	add	sp, #68	@ 0x44
 800a184:	ecbd 8b02 	vpop	{d8}
 800a188:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a18c:	9b07      	ldr	r3, [sp, #28]
 800a18e:	2b01      	cmp	r3, #1
 800a190:	f77f ae2c 	ble.w	8009dec <_dtoa_r+0x6d4>
 800a194:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a196:	930b      	str	r3, [sp, #44]	@ 0x2c
 800a198:	2001      	movs	r0, #1
 800a19a:	e64c      	b.n	8009e36 <_dtoa_r+0x71e>
 800a19c:	f1bb 0f00 	cmp.w	fp, #0
 800a1a0:	f77f aed8 	ble.w	8009f54 <_dtoa_r+0x83c>
 800a1a4:	463e      	mov	r6, r7
 800a1a6:	9801      	ldr	r0, [sp, #4]
 800a1a8:	4621      	mov	r1, r4
 800a1aa:	f7ff fa2c 	bl	8009606 <quorem>
 800a1ae:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
 800a1b2:	f806 ab01 	strb.w	sl, [r6], #1
 800a1b6:	1bf2      	subs	r2, r6, r7
 800a1b8:	4593      	cmp	fp, r2
 800a1ba:	ddb4      	ble.n	800a126 <_dtoa_r+0xa0e>
 800a1bc:	9901      	ldr	r1, [sp, #4]
 800a1be:	2300      	movs	r3, #0
 800a1c0:	220a      	movs	r2, #10
 800a1c2:	4648      	mov	r0, r9
 800a1c4:	f000 f968 	bl	800a498 <__multadd>
 800a1c8:	9001      	str	r0, [sp, #4]
 800a1ca:	e7ec      	b.n	800a1a6 <_dtoa_r+0xa8e>
 800a1cc:	0800b648 	.word	0x0800b648
 800a1d0:	0800b5cc 	.word	0x0800b5cc

0800a1d4 <_free_r>:
 800a1d4:	b538      	push	{r3, r4, r5, lr}
 800a1d6:	4605      	mov	r5, r0
 800a1d8:	2900      	cmp	r1, #0
 800a1da:	d041      	beq.n	800a260 <_free_r+0x8c>
 800a1dc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a1e0:	1f0c      	subs	r4, r1, #4
 800a1e2:	2b00      	cmp	r3, #0
 800a1e4:	bfb8      	it	lt
 800a1e6:	18e4      	addlt	r4, r4, r3
 800a1e8:	f000 f8e8 	bl	800a3bc <__malloc_lock>
 800a1ec:	4a1d      	ldr	r2, [pc, #116]	@ (800a264 <_free_r+0x90>)
 800a1ee:	6813      	ldr	r3, [r2, #0]
 800a1f0:	b933      	cbnz	r3, 800a200 <_free_r+0x2c>
 800a1f2:	6063      	str	r3, [r4, #4]
 800a1f4:	6014      	str	r4, [r2, #0]
 800a1f6:	4628      	mov	r0, r5
 800a1f8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a1fc:	f000 b8e4 	b.w	800a3c8 <__malloc_unlock>
 800a200:	42a3      	cmp	r3, r4
 800a202:	d908      	bls.n	800a216 <_free_r+0x42>
 800a204:	6820      	ldr	r0, [r4, #0]
 800a206:	1821      	adds	r1, r4, r0
 800a208:	428b      	cmp	r3, r1
 800a20a:	bf01      	itttt	eq
 800a20c:	6819      	ldreq	r1, [r3, #0]
 800a20e:	685b      	ldreq	r3, [r3, #4]
 800a210:	1809      	addeq	r1, r1, r0
 800a212:	6021      	streq	r1, [r4, #0]
 800a214:	e7ed      	b.n	800a1f2 <_free_r+0x1e>
 800a216:	461a      	mov	r2, r3
 800a218:	685b      	ldr	r3, [r3, #4]
 800a21a:	b10b      	cbz	r3, 800a220 <_free_r+0x4c>
 800a21c:	42a3      	cmp	r3, r4
 800a21e:	d9fa      	bls.n	800a216 <_free_r+0x42>
 800a220:	6811      	ldr	r1, [r2, #0]
 800a222:	1850      	adds	r0, r2, r1
 800a224:	42a0      	cmp	r0, r4
 800a226:	d10b      	bne.n	800a240 <_free_r+0x6c>
 800a228:	6820      	ldr	r0, [r4, #0]
 800a22a:	4401      	add	r1, r0
 800a22c:	1850      	adds	r0, r2, r1
 800a22e:	4283      	cmp	r3, r0
 800a230:	6011      	str	r1, [r2, #0]
 800a232:	d1e0      	bne.n	800a1f6 <_free_r+0x22>
 800a234:	6818      	ldr	r0, [r3, #0]
 800a236:	685b      	ldr	r3, [r3, #4]
 800a238:	6053      	str	r3, [r2, #4]
 800a23a:	4408      	add	r0, r1
 800a23c:	6010      	str	r0, [r2, #0]
 800a23e:	e7da      	b.n	800a1f6 <_free_r+0x22>
 800a240:	d902      	bls.n	800a248 <_free_r+0x74>
 800a242:	230c      	movs	r3, #12
 800a244:	602b      	str	r3, [r5, #0]
 800a246:	e7d6      	b.n	800a1f6 <_free_r+0x22>
 800a248:	6820      	ldr	r0, [r4, #0]
 800a24a:	1821      	adds	r1, r4, r0
 800a24c:	428b      	cmp	r3, r1
 800a24e:	bf04      	itt	eq
 800a250:	6819      	ldreq	r1, [r3, #0]
 800a252:	685b      	ldreq	r3, [r3, #4]
 800a254:	6063      	str	r3, [r4, #4]
 800a256:	bf04      	itt	eq
 800a258:	1809      	addeq	r1, r1, r0
 800a25a:	6021      	streq	r1, [r4, #0]
 800a25c:	6054      	str	r4, [r2, #4]
 800a25e:	e7ca      	b.n	800a1f6 <_free_r+0x22>
 800a260:	bd38      	pop	{r3, r4, r5, pc}
 800a262:	bf00      	nop
 800a264:	240005bc 	.word	0x240005bc

0800a268 <malloc>:
 800a268:	4b02      	ldr	r3, [pc, #8]	@ (800a274 <malloc+0xc>)
 800a26a:	4601      	mov	r1, r0
 800a26c:	6818      	ldr	r0, [r3, #0]
 800a26e:	f000 b825 	b.w	800a2bc <_malloc_r>
 800a272:	bf00      	nop
 800a274:	2400001c 	.word	0x2400001c

0800a278 <sbrk_aligned>:
 800a278:	b570      	push	{r4, r5, r6, lr}
 800a27a:	4e0f      	ldr	r6, [pc, #60]	@ (800a2b8 <sbrk_aligned+0x40>)
 800a27c:	460c      	mov	r4, r1
 800a27e:	6831      	ldr	r1, [r6, #0]
 800a280:	4605      	mov	r5, r0
 800a282:	b911      	cbnz	r1, 800a28a <sbrk_aligned+0x12>
 800a284:	f000 fe92 	bl	800afac <_sbrk_r>
 800a288:	6030      	str	r0, [r6, #0]
 800a28a:	4621      	mov	r1, r4
 800a28c:	4628      	mov	r0, r5
 800a28e:	f000 fe8d 	bl	800afac <_sbrk_r>
 800a292:	1c43      	adds	r3, r0, #1
 800a294:	d103      	bne.n	800a29e <sbrk_aligned+0x26>
 800a296:	f04f 34ff 	mov.w	r4, #4294967295
 800a29a:	4620      	mov	r0, r4
 800a29c:	bd70      	pop	{r4, r5, r6, pc}
 800a29e:	1cc4      	adds	r4, r0, #3
 800a2a0:	f024 0403 	bic.w	r4, r4, #3
 800a2a4:	42a0      	cmp	r0, r4
 800a2a6:	d0f8      	beq.n	800a29a <sbrk_aligned+0x22>
 800a2a8:	1a21      	subs	r1, r4, r0
 800a2aa:	4628      	mov	r0, r5
 800a2ac:	f000 fe7e 	bl	800afac <_sbrk_r>
 800a2b0:	3001      	adds	r0, #1
 800a2b2:	d1f2      	bne.n	800a29a <sbrk_aligned+0x22>
 800a2b4:	e7ef      	b.n	800a296 <sbrk_aligned+0x1e>
 800a2b6:	bf00      	nop
 800a2b8:	240005b8 	.word	0x240005b8

0800a2bc <_malloc_r>:
 800a2bc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a2c0:	1ccd      	adds	r5, r1, #3
 800a2c2:	f025 0503 	bic.w	r5, r5, #3
 800a2c6:	3508      	adds	r5, #8
 800a2c8:	2d0c      	cmp	r5, #12
 800a2ca:	bf38      	it	cc
 800a2cc:	250c      	movcc	r5, #12
 800a2ce:	2d00      	cmp	r5, #0
 800a2d0:	4606      	mov	r6, r0
 800a2d2:	db01      	blt.n	800a2d8 <_malloc_r+0x1c>
 800a2d4:	42a9      	cmp	r1, r5
 800a2d6:	d904      	bls.n	800a2e2 <_malloc_r+0x26>
 800a2d8:	230c      	movs	r3, #12
 800a2da:	6033      	str	r3, [r6, #0]
 800a2dc:	2000      	movs	r0, #0
 800a2de:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a2e2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800a3b8 <_malloc_r+0xfc>
 800a2e6:	f000 f869 	bl	800a3bc <__malloc_lock>
 800a2ea:	f8d8 3000 	ldr.w	r3, [r8]
 800a2ee:	461c      	mov	r4, r3
 800a2f0:	bb44      	cbnz	r4, 800a344 <_malloc_r+0x88>
 800a2f2:	4629      	mov	r1, r5
 800a2f4:	4630      	mov	r0, r6
 800a2f6:	f7ff ffbf 	bl	800a278 <sbrk_aligned>
 800a2fa:	1c43      	adds	r3, r0, #1
 800a2fc:	4604      	mov	r4, r0
 800a2fe:	d158      	bne.n	800a3b2 <_malloc_r+0xf6>
 800a300:	f8d8 4000 	ldr.w	r4, [r8]
 800a304:	4627      	mov	r7, r4
 800a306:	2f00      	cmp	r7, #0
 800a308:	d143      	bne.n	800a392 <_malloc_r+0xd6>
 800a30a:	2c00      	cmp	r4, #0
 800a30c:	d04b      	beq.n	800a3a6 <_malloc_r+0xea>
 800a30e:	6823      	ldr	r3, [r4, #0]
 800a310:	4639      	mov	r1, r7
 800a312:	4630      	mov	r0, r6
 800a314:	eb04 0903 	add.w	r9, r4, r3
 800a318:	f000 fe48 	bl	800afac <_sbrk_r>
 800a31c:	4581      	cmp	r9, r0
 800a31e:	d142      	bne.n	800a3a6 <_malloc_r+0xea>
 800a320:	6821      	ldr	r1, [r4, #0]
 800a322:	1a6d      	subs	r5, r5, r1
 800a324:	4629      	mov	r1, r5
 800a326:	4630      	mov	r0, r6
 800a328:	f7ff ffa6 	bl	800a278 <sbrk_aligned>
 800a32c:	3001      	adds	r0, #1
 800a32e:	d03a      	beq.n	800a3a6 <_malloc_r+0xea>
 800a330:	6823      	ldr	r3, [r4, #0]
 800a332:	442b      	add	r3, r5
 800a334:	6023      	str	r3, [r4, #0]
 800a336:	f8d8 3000 	ldr.w	r3, [r8]
 800a33a:	685a      	ldr	r2, [r3, #4]
 800a33c:	bb62      	cbnz	r2, 800a398 <_malloc_r+0xdc>
 800a33e:	f8c8 7000 	str.w	r7, [r8]
 800a342:	e00f      	b.n	800a364 <_malloc_r+0xa8>
 800a344:	6822      	ldr	r2, [r4, #0]
 800a346:	1b52      	subs	r2, r2, r5
 800a348:	d420      	bmi.n	800a38c <_malloc_r+0xd0>
 800a34a:	2a0b      	cmp	r2, #11
 800a34c:	d917      	bls.n	800a37e <_malloc_r+0xc2>
 800a34e:	1961      	adds	r1, r4, r5
 800a350:	42a3      	cmp	r3, r4
 800a352:	6025      	str	r5, [r4, #0]
 800a354:	bf18      	it	ne
 800a356:	6059      	strne	r1, [r3, #4]
 800a358:	6863      	ldr	r3, [r4, #4]
 800a35a:	bf08      	it	eq
 800a35c:	f8c8 1000 	streq.w	r1, [r8]
 800a360:	5162      	str	r2, [r4, r5]
 800a362:	604b      	str	r3, [r1, #4]
 800a364:	4630      	mov	r0, r6
 800a366:	f000 f82f 	bl	800a3c8 <__malloc_unlock>
 800a36a:	f104 000b 	add.w	r0, r4, #11
 800a36e:	1d23      	adds	r3, r4, #4
 800a370:	f020 0007 	bic.w	r0, r0, #7
 800a374:	1ac2      	subs	r2, r0, r3
 800a376:	bf1c      	itt	ne
 800a378:	1a1b      	subne	r3, r3, r0
 800a37a:	50a3      	strne	r3, [r4, r2]
 800a37c:	e7af      	b.n	800a2de <_malloc_r+0x22>
 800a37e:	6862      	ldr	r2, [r4, #4]
 800a380:	42a3      	cmp	r3, r4
 800a382:	bf0c      	ite	eq
 800a384:	f8c8 2000 	streq.w	r2, [r8]
 800a388:	605a      	strne	r2, [r3, #4]
 800a38a:	e7eb      	b.n	800a364 <_malloc_r+0xa8>
 800a38c:	4623      	mov	r3, r4
 800a38e:	6864      	ldr	r4, [r4, #4]
 800a390:	e7ae      	b.n	800a2f0 <_malloc_r+0x34>
 800a392:	463c      	mov	r4, r7
 800a394:	687f      	ldr	r7, [r7, #4]
 800a396:	e7b6      	b.n	800a306 <_malloc_r+0x4a>
 800a398:	461a      	mov	r2, r3
 800a39a:	685b      	ldr	r3, [r3, #4]
 800a39c:	42a3      	cmp	r3, r4
 800a39e:	d1fb      	bne.n	800a398 <_malloc_r+0xdc>
 800a3a0:	2300      	movs	r3, #0
 800a3a2:	6053      	str	r3, [r2, #4]
 800a3a4:	e7de      	b.n	800a364 <_malloc_r+0xa8>
 800a3a6:	230c      	movs	r3, #12
 800a3a8:	6033      	str	r3, [r6, #0]
 800a3aa:	4630      	mov	r0, r6
 800a3ac:	f000 f80c 	bl	800a3c8 <__malloc_unlock>
 800a3b0:	e794      	b.n	800a2dc <_malloc_r+0x20>
 800a3b2:	6005      	str	r5, [r0, #0]
 800a3b4:	e7d6      	b.n	800a364 <_malloc_r+0xa8>
 800a3b6:	bf00      	nop
 800a3b8:	240005bc 	.word	0x240005bc

0800a3bc <__malloc_lock>:
 800a3bc:	4801      	ldr	r0, [pc, #4]	@ (800a3c4 <__malloc_lock+0x8>)
 800a3be:	f7ff b920 	b.w	8009602 <__retarget_lock_acquire_recursive>
 800a3c2:	bf00      	nop
 800a3c4:	240005b4 	.word	0x240005b4

0800a3c8 <__malloc_unlock>:
 800a3c8:	4801      	ldr	r0, [pc, #4]	@ (800a3d0 <__malloc_unlock+0x8>)
 800a3ca:	f7ff b91b 	b.w	8009604 <__retarget_lock_release_recursive>
 800a3ce:	bf00      	nop
 800a3d0:	240005b4 	.word	0x240005b4

0800a3d4 <_Balloc>:
 800a3d4:	b570      	push	{r4, r5, r6, lr}
 800a3d6:	69c6      	ldr	r6, [r0, #28]
 800a3d8:	4604      	mov	r4, r0
 800a3da:	460d      	mov	r5, r1
 800a3dc:	b976      	cbnz	r6, 800a3fc <_Balloc+0x28>
 800a3de:	2010      	movs	r0, #16
 800a3e0:	f7ff ff42 	bl	800a268 <malloc>
 800a3e4:	4602      	mov	r2, r0
 800a3e6:	61e0      	str	r0, [r4, #28]
 800a3e8:	b920      	cbnz	r0, 800a3f4 <_Balloc+0x20>
 800a3ea:	4b18      	ldr	r3, [pc, #96]	@ (800a44c <_Balloc+0x78>)
 800a3ec:	4818      	ldr	r0, [pc, #96]	@ (800a450 <_Balloc+0x7c>)
 800a3ee:	216b      	movs	r1, #107	@ 0x6b
 800a3f0:	f000 fdfa 	bl	800afe8 <__assert_func>
 800a3f4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a3f8:	6006      	str	r6, [r0, #0]
 800a3fa:	60c6      	str	r6, [r0, #12]
 800a3fc:	69e6      	ldr	r6, [r4, #28]
 800a3fe:	68f3      	ldr	r3, [r6, #12]
 800a400:	b183      	cbz	r3, 800a424 <_Balloc+0x50>
 800a402:	69e3      	ldr	r3, [r4, #28]
 800a404:	68db      	ldr	r3, [r3, #12]
 800a406:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800a40a:	b9b8      	cbnz	r0, 800a43c <_Balloc+0x68>
 800a40c:	2101      	movs	r1, #1
 800a40e:	fa01 f605 	lsl.w	r6, r1, r5
 800a412:	1d72      	adds	r2, r6, #5
 800a414:	0092      	lsls	r2, r2, #2
 800a416:	4620      	mov	r0, r4
 800a418:	f000 fe04 	bl	800b024 <_calloc_r>
 800a41c:	b160      	cbz	r0, 800a438 <_Balloc+0x64>
 800a41e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800a422:	e00e      	b.n	800a442 <_Balloc+0x6e>
 800a424:	2221      	movs	r2, #33	@ 0x21
 800a426:	2104      	movs	r1, #4
 800a428:	4620      	mov	r0, r4
 800a42a:	f000 fdfb 	bl	800b024 <_calloc_r>
 800a42e:	69e3      	ldr	r3, [r4, #28]
 800a430:	60f0      	str	r0, [r6, #12]
 800a432:	68db      	ldr	r3, [r3, #12]
 800a434:	2b00      	cmp	r3, #0
 800a436:	d1e4      	bne.n	800a402 <_Balloc+0x2e>
 800a438:	2000      	movs	r0, #0
 800a43a:	bd70      	pop	{r4, r5, r6, pc}
 800a43c:	6802      	ldr	r2, [r0, #0]
 800a43e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800a442:	2300      	movs	r3, #0
 800a444:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800a448:	e7f7      	b.n	800a43a <_Balloc+0x66>
 800a44a:	bf00      	nop
 800a44c:	0800b5d9 	.word	0x0800b5d9
 800a450:	0800b659 	.word	0x0800b659

0800a454 <_Bfree>:
 800a454:	b570      	push	{r4, r5, r6, lr}
 800a456:	69c6      	ldr	r6, [r0, #28]
 800a458:	4605      	mov	r5, r0
 800a45a:	460c      	mov	r4, r1
 800a45c:	b976      	cbnz	r6, 800a47c <_Bfree+0x28>
 800a45e:	2010      	movs	r0, #16
 800a460:	f7ff ff02 	bl	800a268 <malloc>
 800a464:	4602      	mov	r2, r0
 800a466:	61e8      	str	r0, [r5, #28]
 800a468:	b920      	cbnz	r0, 800a474 <_Bfree+0x20>
 800a46a:	4b09      	ldr	r3, [pc, #36]	@ (800a490 <_Bfree+0x3c>)
 800a46c:	4809      	ldr	r0, [pc, #36]	@ (800a494 <_Bfree+0x40>)
 800a46e:	218f      	movs	r1, #143	@ 0x8f
 800a470:	f000 fdba 	bl	800afe8 <__assert_func>
 800a474:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a478:	6006      	str	r6, [r0, #0]
 800a47a:	60c6      	str	r6, [r0, #12]
 800a47c:	b13c      	cbz	r4, 800a48e <_Bfree+0x3a>
 800a47e:	69eb      	ldr	r3, [r5, #28]
 800a480:	6862      	ldr	r2, [r4, #4]
 800a482:	68db      	ldr	r3, [r3, #12]
 800a484:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800a488:	6021      	str	r1, [r4, #0]
 800a48a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800a48e:	bd70      	pop	{r4, r5, r6, pc}
 800a490:	0800b5d9 	.word	0x0800b5d9
 800a494:	0800b659 	.word	0x0800b659

0800a498 <__multadd>:
 800a498:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a49c:	690d      	ldr	r5, [r1, #16]
 800a49e:	4607      	mov	r7, r0
 800a4a0:	460c      	mov	r4, r1
 800a4a2:	461e      	mov	r6, r3
 800a4a4:	f101 0c14 	add.w	ip, r1, #20
 800a4a8:	2000      	movs	r0, #0
 800a4aa:	f8dc 3000 	ldr.w	r3, [ip]
 800a4ae:	b299      	uxth	r1, r3
 800a4b0:	fb02 6101 	mla	r1, r2, r1, r6
 800a4b4:	0c1e      	lsrs	r6, r3, #16
 800a4b6:	0c0b      	lsrs	r3, r1, #16
 800a4b8:	fb02 3306 	mla	r3, r2, r6, r3
 800a4bc:	b289      	uxth	r1, r1
 800a4be:	3001      	adds	r0, #1
 800a4c0:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800a4c4:	4285      	cmp	r5, r0
 800a4c6:	f84c 1b04 	str.w	r1, [ip], #4
 800a4ca:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800a4ce:	dcec      	bgt.n	800a4aa <__multadd+0x12>
 800a4d0:	b30e      	cbz	r6, 800a516 <__multadd+0x7e>
 800a4d2:	68a3      	ldr	r3, [r4, #8]
 800a4d4:	42ab      	cmp	r3, r5
 800a4d6:	dc19      	bgt.n	800a50c <__multadd+0x74>
 800a4d8:	6861      	ldr	r1, [r4, #4]
 800a4da:	4638      	mov	r0, r7
 800a4dc:	3101      	adds	r1, #1
 800a4de:	f7ff ff79 	bl	800a3d4 <_Balloc>
 800a4e2:	4680      	mov	r8, r0
 800a4e4:	b928      	cbnz	r0, 800a4f2 <__multadd+0x5a>
 800a4e6:	4602      	mov	r2, r0
 800a4e8:	4b0c      	ldr	r3, [pc, #48]	@ (800a51c <__multadd+0x84>)
 800a4ea:	480d      	ldr	r0, [pc, #52]	@ (800a520 <__multadd+0x88>)
 800a4ec:	21ba      	movs	r1, #186	@ 0xba
 800a4ee:	f000 fd7b 	bl	800afe8 <__assert_func>
 800a4f2:	6922      	ldr	r2, [r4, #16]
 800a4f4:	3202      	adds	r2, #2
 800a4f6:	f104 010c 	add.w	r1, r4, #12
 800a4fa:	0092      	lsls	r2, r2, #2
 800a4fc:	300c      	adds	r0, #12
 800a4fe:	f000 fd65 	bl	800afcc <memcpy>
 800a502:	4621      	mov	r1, r4
 800a504:	4638      	mov	r0, r7
 800a506:	f7ff ffa5 	bl	800a454 <_Bfree>
 800a50a:	4644      	mov	r4, r8
 800a50c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800a510:	3501      	adds	r5, #1
 800a512:	615e      	str	r6, [r3, #20]
 800a514:	6125      	str	r5, [r4, #16]
 800a516:	4620      	mov	r0, r4
 800a518:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a51c:	0800b648 	.word	0x0800b648
 800a520:	0800b659 	.word	0x0800b659

0800a524 <__hi0bits>:
 800a524:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800a528:	4603      	mov	r3, r0
 800a52a:	bf36      	itet	cc
 800a52c:	0403      	lslcc	r3, r0, #16
 800a52e:	2000      	movcs	r0, #0
 800a530:	2010      	movcc	r0, #16
 800a532:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800a536:	bf3c      	itt	cc
 800a538:	021b      	lslcc	r3, r3, #8
 800a53a:	3008      	addcc	r0, #8
 800a53c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a540:	bf3c      	itt	cc
 800a542:	011b      	lslcc	r3, r3, #4
 800a544:	3004      	addcc	r0, #4
 800a546:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a54a:	bf3c      	itt	cc
 800a54c:	009b      	lslcc	r3, r3, #2
 800a54e:	3002      	addcc	r0, #2
 800a550:	2b00      	cmp	r3, #0
 800a552:	db05      	blt.n	800a560 <__hi0bits+0x3c>
 800a554:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800a558:	f100 0001 	add.w	r0, r0, #1
 800a55c:	bf08      	it	eq
 800a55e:	2020      	moveq	r0, #32
 800a560:	4770      	bx	lr

0800a562 <__lo0bits>:
 800a562:	6803      	ldr	r3, [r0, #0]
 800a564:	4602      	mov	r2, r0
 800a566:	f013 0007 	ands.w	r0, r3, #7
 800a56a:	d00b      	beq.n	800a584 <__lo0bits+0x22>
 800a56c:	07d9      	lsls	r1, r3, #31
 800a56e:	d421      	bmi.n	800a5b4 <__lo0bits+0x52>
 800a570:	0798      	lsls	r0, r3, #30
 800a572:	bf49      	itett	mi
 800a574:	085b      	lsrmi	r3, r3, #1
 800a576:	089b      	lsrpl	r3, r3, #2
 800a578:	2001      	movmi	r0, #1
 800a57a:	6013      	strmi	r3, [r2, #0]
 800a57c:	bf5c      	itt	pl
 800a57e:	6013      	strpl	r3, [r2, #0]
 800a580:	2002      	movpl	r0, #2
 800a582:	4770      	bx	lr
 800a584:	b299      	uxth	r1, r3
 800a586:	b909      	cbnz	r1, 800a58c <__lo0bits+0x2a>
 800a588:	0c1b      	lsrs	r3, r3, #16
 800a58a:	2010      	movs	r0, #16
 800a58c:	b2d9      	uxtb	r1, r3
 800a58e:	b909      	cbnz	r1, 800a594 <__lo0bits+0x32>
 800a590:	3008      	adds	r0, #8
 800a592:	0a1b      	lsrs	r3, r3, #8
 800a594:	0719      	lsls	r1, r3, #28
 800a596:	bf04      	itt	eq
 800a598:	091b      	lsreq	r3, r3, #4
 800a59a:	3004      	addeq	r0, #4
 800a59c:	0799      	lsls	r1, r3, #30
 800a59e:	bf04      	itt	eq
 800a5a0:	089b      	lsreq	r3, r3, #2
 800a5a2:	3002      	addeq	r0, #2
 800a5a4:	07d9      	lsls	r1, r3, #31
 800a5a6:	d403      	bmi.n	800a5b0 <__lo0bits+0x4e>
 800a5a8:	085b      	lsrs	r3, r3, #1
 800a5aa:	f100 0001 	add.w	r0, r0, #1
 800a5ae:	d003      	beq.n	800a5b8 <__lo0bits+0x56>
 800a5b0:	6013      	str	r3, [r2, #0]
 800a5b2:	4770      	bx	lr
 800a5b4:	2000      	movs	r0, #0
 800a5b6:	4770      	bx	lr
 800a5b8:	2020      	movs	r0, #32
 800a5ba:	4770      	bx	lr

0800a5bc <__i2b>:
 800a5bc:	b510      	push	{r4, lr}
 800a5be:	460c      	mov	r4, r1
 800a5c0:	2101      	movs	r1, #1
 800a5c2:	f7ff ff07 	bl	800a3d4 <_Balloc>
 800a5c6:	4602      	mov	r2, r0
 800a5c8:	b928      	cbnz	r0, 800a5d6 <__i2b+0x1a>
 800a5ca:	4b05      	ldr	r3, [pc, #20]	@ (800a5e0 <__i2b+0x24>)
 800a5cc:	4805      	ldr	r0, [pc, #20]	@ (800a5e4 <__i2b+0x28>)
 800a5ce:	f240 1145 	movw	r1, #325	@ 0x145
 800a5d2:	f000 fd09 	bl	800afe8 <__assert_func>
 800a5d6:	2301      	movs	r3, #1
 800a5d8:	6144      	str	r4, [r0, #20]
 800a5da:	6103      	str	r3, [r0, #16]
 800a5dc:	bd10      	pop	{r4, pc}
 800a5de:	bf00      	nop
 800a5e0:	0800b648 	.word	0x0800b648
 800a5e4:	0800b659 	.word	0x0800b659

0800a5e8 <__multiply>:
 800a5e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a5ec:	4617      	mov	r7, r2
 800a5ee:	690a      	ldr	r2, [r1, #16]
 800a5f0:	693b      	ldr	r3, [r7, #16]
 800a5f2:	429a      	cmp	r2, r3
 800a5f4:	bfa8      	it	ge
 800a5f6:	463b      	movge	r3, r7
 800a5f8:	4689      	mov	r9, r1
 800a5fa:	bfa4      	itt	ge
 800a5fc:	460f      	movge	r7, r1
 800a5fe:	4699      	movge	r9, r3
 800a600:	693d      	ldr	r5, [r7, #16]
 800a602:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800a606:	68bb      	ldr	r3, [r7, #8]
 800a608:	6879      	ldr	r1, [r7, #4]
 800a60a:	eb05 060a 	add.w	r6, r5, sl
 800a60e:	42b3      	cmp	r3, r6
 800a610:	b085      	sub	sp, #20
 800a612:	bfb8      	it	lt
 800a614:	3101      	addlt	r1, #1
 800a616:	f7ff fedd 	bl	800a3d4 <_Balloc>
 800a61a:	b930      	cbnz	r0, 800a62a <__multiply+0x42>
 800a61c:	4602      	mov	r2, r0
 800a61e:	4b41      	ldr	r3, [pc, #260]	@ (800a724 <__multiply+0x13c>)
 800a620:	4841      	ldr	r0, [pc, #260]	@ (800a728 <__multiply+0x140>)
 800a622:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800a626:	f000 fcdf 	bl	800afe8 <__assert_func>
 800a62a:	f100 0414 	add.w	r4, r0, #20
 800a62e:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 800a632:	4623      	mov	r3, r4
 800a634:	2200      	movs	r2, #0
 800a636:	4573      	cmp	r3, lr
 800a638:	d320      	bcc.n	800a67c <__multiply+0x94>
 800a63a:	f107 0814 	add.w	r8, r7, #20
 800a63e:	f109 0114 	add.w	r1, r9, #20
 800a642:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 800a646:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 800a64a:	9302      	str	r3, [sp, #8]
 800a64c:	1beb      	subs	r3, r5, r7
 800a64e:	3b15      	subs	r3, #21
 800a650:	f023 0303 	bic.w	r3, r3, #3
 800a654:	3304      	adds	r3, #4
 800a656:	3715      	adds	r7, #21
 800a658:	42bd      	cmp	r5, r7
 800a65a:	bf38      	it	cc
 800a65c:	2304      	movcc	r3, #4
 800a65e:	9301      	str	r3, [sp, #4]
 800a660:	9b02      	ldr	r3, [sp, #8]
 800a662:	9103      	str	r1, [sp, #12]
 800a664:	428b      	cmp	r3, r1
 800a666:	d80c      	bhi.n	800a682 <__multiply+0x9a>
 800a668:	2e00      	cmp	r6, #0
 800a66a:	dd03      	ble.n	800a674 <__multiply+0x8c>
 800a66c:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800a670:	2b00      	cmp	r3, #0
 800a672:	d055      	beq.n	800a720 <__multiply+0x138>
 800a674:	6106      	str	r6, [r0, #16]
 800a676:	b005      	add	sp, #20
 800a678:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a67c:	f843 2b04 	str.w	r2, [r3], #4
 800a680:	e7d9      	b.n	800a636 <__multiply+0x4e>
 800a682:	f8b1 a000 	ldrh.w	sl, [r1]
 800a686:	f1ba 0f00 	cmp.w	sl, #0
 800a68a:	d01f      	beq.n	800a6cc <__multiply+0xe4>
 800a68c:	46c4      	mov	ip, r8
 800a68e:	46a1      	mov	r9, r4
 800a690:	2700      	movs	r7, #0
 800a692:	f85c 2b04 	ldr.w	r2, [ip], #4
 800a696:	f8d9 3000 	ldr.w	r3, [r9]
 800a69a:	fa1f fb82 	uxth.w	fp, r2
 800a69e:	b29b      	uxth	r3, r3
 800a6a0:	fb0a 330b 	mla	r3, sl, fp, r3
 800a6a4:	443b      	add	r3, r7
 800a6a6:	f8d9 7000 	ldr.w	r7, [r9]
 800a6aa:	0c12      	lsrs	r2, r2, #16
 800a6ac:	0c3f      	lsrs	r7, r7, #16
 800a6ae:	fb0a 7202 	mla	r2, sl, r2, r7
 800a6b2:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 800a6b6:	b29b      	uxth	r3, r3
 800a6b8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a6bc:	4565      	cmp	r5, ip
 800a6be:	f849 3b04 	str.w	r3, [r9], #4
 800a6c2:	ea4f 4712 	mov.w	r7, r2, lsr #16
 800a6c6:	d8e4      	bhi.n	800a692 <__multiply+0xaa>
 800a6c8:	9b01      	ldr	r3, [sp, #4]
 800a6ca:	50e7      	str	r7, [r4, r3]
 800a6cc:	9b03      	ldr	r3, [sp, #12]
 800a6ce:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800a6d2:	3104      	adds	r1, #4
 800a6d4:	f1b9 0f00 	cmp.w	r9, #0
 800a6d8:	d020      	beq.n	800a71c <__multiply+0x134>
 800a6da:	6823      	ldr	r3, [r4, #0]
 800a6dc:	4647      	mov	r7, r8
 800a6de:	46a4      	mov	ip, r4
 800a6e0:	f04f 0a00 	mov.w	sl, #0
 800a6e4:	f8b7 b000 	ldrh.w	fp, [r7]
 800a6e8:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 800a6ec:	fb09 220b 	mla	r2, r9, fp, r2
 800a6f0:	4452      	add	r2, sl
 800a6f2:	b29b      	uxth	r3, r3
 800a6f4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a6f8:	f84c 3b04 	str.w	r3, [ip], #4
 800a6fc:	f857 3b04 	ldr.w	r3, [r7], #4
 800a700:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800a704:	f8bc 3000 	ldrh.w	r3, [ip]
 800a708:	fb09 330a 	mla	r3, r9, sl, r3
 800a70c:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 800a710:	42bd      	cmp	r5, r7
 800a712:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800a716:	d8e5      	bhi.n	800a6e4 <__multiply+0xfc>
 800a718:	9a01      	ldr	r2, [sp, #4]
 800a71a:	50a3      	str	r3, [r4, r2]
 800a71c:	3404      	adds	r4, #4
 800a71e:	e79f      	b.n	800a660 <__multiply+0x78>
 800a720:	3e01      	subs	r6, #1
 800a722:	e7a1      	b.n	800a668 <__multiply+0x80>
 800a724:	0800b648 	.word	0x0800b648
 800a728:	0800b659 	.word	0x0800b659

0800a72c <__pow5mult>:
 800a72c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a730:	4615      	mov	r5, r2
 800a732:	f012 0203 	ands.w	r2, r2, #3
 800a736:	4607      	mov	r7, r0
 800a738:	460e      	mov	r6, r1
 800a73a:	d007      	beq.n	800a74c <__pow5mult+0x20>
 800a73c:	4c25      	ldr	r4, [pc, #148]	@ (800a7d4 <__pow5mult+0xa8>)
 800a73e:	3a01      	subs	r2, #1
 800a740:	2300      	movs	r3, #0
 800a742:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800a746:	f7ff fea7 	bl	800a498 <__multadd>
 800a74a:	4606      	mov	r6, r0
 800a74c:	10ad      	asrs	r5, r5, #2
 800a74e:	d03d      	beq.n	800a7cc <__pow5mult+0xa0>
 800a750:	69fc      	ldr	r4, [r7, #28]
 800a752:	b97c      	cbnz	r4, 800a774 <__pow5mult+0x48>
 800a754:	2010      	movs	r0, #16
 800a756:	f7ff fd87 	bl	800a268 <malloc>
 800a75a:	4602      	mov	r2, r0
 800a75c:	61f8      	str	r0, [r7, #28]
 800a75e:	b928      	cbnz	r0, 800a76c <__pow5mult+0x40>
 800a760:	4b1d      	ldr	r3, [pc, #116]	@ (800a7d8 <__pow5mult+0xac>)
 800a762:	481e      	ldr	r0, [pc, #120]	@ (800a7dc <__pow5mult+0xb0>)
 800a764:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800a768:	f000 fc3e 	bl	800afe8 <__assert_func>
 800a76c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800a770:	6004      	str	r4, [r0, #0]
 800a772:	60c4      	str	r4, [r0, #12]
 800a774:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800a778:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800a77c:	b94c      	cbnz	r4, 800a792 <__pow5mult+0x66>
 800a77e:	f240 2171 	movw	r1, #625	@ 0x271
 800a782:	4638      	mov	r0, r7
 800a784:	f7ff ff1a 	bl	800a5bc <__i2b>
 800a788:	2300      	movs	r3, #0
 800a78a:	f8c8 0008 	str.w	r0, [r8, #8]
 800a78e:	4604      	mov	r4, r0
 800a790:	6003      	str	r3, [r0, #0]
 800a792:	f04f 0900 	mov.w	r9, #0
 800a796:	07eb      	lsls	r3, r5, #31
 800a798:	d50a      	bpl.n	800a7b0 <__pow5mult+0x84>
 800a79a:	4631      	mov	r1, r6
 800a79c:	4622      	mov	r2, r4
 800a79e:	4638      	mov	r0, r7
 800a7a0:	f7ff ff22 	bl	800a5e8 <__multiply>
 800a7a4:	4631      	mov	r1, r6
 800a7a6:	4680      	mov	r8, r0
 800a7a8:	4638      	mov	r0, r7
 800a7aa:	f7ff fe53 	bl	800a454 <_Bfree>
 800a7ae:	4646      	mov	r6, r8
 800a7b0:	106d      	asrs	r5, r5, #1
 800a7b2:	d00b      	beq.n	800a7cc <__pow5mult+0xa0>
 800a7b4:	6820      	ldr	r0, [r4, #0]
 800a7b6:	b938      	cbnz	r0, 800a7c8 <__pow5mult+0x9c>
 800a7b8:	4622      	mov	r2, r4
 800a7ba:	4621      	mov	r1, r4
 800a7bc:	4638      	mov	r0, r7
 800a7be:	f7ff ff13 	bl	800a5e8 <__multiply>
 800a7c2:	6020      	str	r0, [r4, #0]
 800a7c4:	f8c0 9000 	str.w	r9, [r0]
 800a7c8:	4604      	mov	r4, r0
 800a7ca:	e7e4      	b.n	800a796 <__pow5mult+0x6a>
 800a7cc:	4630      	mov	r0, r6
 800a7ce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a7d2:	bf00      	nop
 800a7d4:	0800b70c 	.word	0x0800b70c
 800a7d8:	0800b5d9 	.word	0x0800b5d9
 800a7dc:	0800b659 	.word	0x0800b659

0800a7e0 <__lshift>:
 800a7e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a7e4:	460c      	mov	r4, r1
 800a7e6:	6849      	ldr	r1, [r1, #4]
 800a7e8:	6923      	ldr	r3, [r4, #16]
 800a7ea:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800a7ee:	68a3      	ldr	r3, [r4, #8]
 800a7f0:	4607      	mov	r7, r0
 800a7f2:	4691      	mov	r9, r2
 800a7f4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800a7f8:	f108 0601 	add.w	r6, r8, #1
 800a7fc:	42b3      	cmp	r3, r6
 800a7fe:	db0b      	blt.n	800a818 <__lshift+0x38>
 800a800:	4638      	mov	r0, r7
 800a802:	f7ff fde7 	bl	800a3d4 <_Balloc>
 800a806:	4605      	mov	r5, r0
 800a808:	b948      	cbnz	r0, 800a81e <__lshift+0x3e>
 800a80a:	4602      	mov	r2, r0
 800a80c:	4b28      	ldr	r3, [pc, #160]	@ (800a8b0 <__lshift+0xd0>)
 800a80e:	4829      	ldr	r0, [pc, #164]	@ (800a8b4 <__lshift+0xd4>)
 800a810:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800a814:	f000 fbe8 	bl	800afe8 <__assert_func>
 800a818:	3101      	adds	r1, #1
 800a81a:	005b      	lsls	r3, r3, #1
 800a81c:	e7ee      	b.n	800a7fc <__lshift+0x1c>
 800a81e:	2300      	movs	r3, #0
 800a820:	f100 0114 	add.w	r1, r0, #20
 800a824:	f100 0210 	add.w	r2, r0, #16
 800a828:	4618      	mov	r0, r3
 800a82a:	4553      	cmp	r3, sl
 800a82c:	db33      	blt.n	800a896 <__lshift+0xb6>
 800a82e:	6920      	ldr	r0, [r4, #16]
 800a830:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800a834:	f104 0314 	add.w	r3, r4, #20
 800a838:	f019 091f 	ands.w	r9, r9, #31
 800a83c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800a840:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800a844:	d02b      	beq.n	800a89e <__lshift+0xbe>
 800a846:	f1c9 0e20 	rsb	lr, r9, #32
 800a84a:	468a      	mov	sl, r1
 800a84c:	2200      	movs	r2, #0
 800a84e:	6818      	ldr	r0, [r3, #0]
 800a850:	fa00 f009 	lsl.w	r0, r0, r9
 800a854:	4310      	orrs	r0, r2
 800a856:	f84a 0b04 	str.w	r0, [sl], #4
 800a85a:	f853 2b04 	ldr.w	r2, [r3], #4
 800a85e:	459c      	cmp	ip, r3
 800a860:	fa22 f20e 	lsr.w	r2, r2, lr
 800a864:	d8f3      	bhi.n	800a84e <__lshift+0x6e>
 800a866:	ebac 0304 	sub.w	r3, ip, r4
 800a86a:	3b15      	subs	r3, #21
 800a86c:	f023 0303 	bic.w	r3, r3, #3
 800a870:	3304      	adds	r3, #4
 800a872:	f104 0015 	add.w	r0, r4, #21
 800a876:	4560      	cmp	r0, ip
 800a878:	bf88      	it	hi
 800a87a:	2304      	movhi	r3, #4
 800a87c:	50ca      	str	r2, [r1, r3]
 800a87e:	b10a      	cbz	r2, 800a884 <__lshift+0xa4>
 800a880:	f108 0602 	add.w	r6, r8, #2
 800a884:	3e01      	subs	r6, #1
 800a886:	4638      	mov	r0, r7
 800a888:	612e      	str	r6, [r5, #16]
 800a88a:	4621      	mov	r1, r4
 800a88c:	f7ff fde2 	bl	800a454 <_Bfree>
 800a890:	4628      	mov	r0, r5
 800a892:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a896:	f842 0f04 	str.w	r0, [r2, #4]!
 800a89a:	3301      	adds	r3, #1
 800a89c:	e7c5      	b.n	800a82a <__lshift+0x4a>
 800a89e:	3904      	subs	r1, #4
 800a8a0:	f853 2b04 	ldr.w	r2, [r3], #4
 800a8a4:	f841 2f04 	str.w	r2, [r1, #4]!
 800a8a8:	459c      	cmp	ip, r3
 800a8aa:	d8f9      	bhi.n	800a8a0 <__lshift+0xc0>
 800a8ac:	e7ea      	b.n	800a884 <__lshift+0xa4>
 800a8ae:	bf00      	nop
 800a8b0:	0800b648 	.word	0x0800b648
 800a8b4:	0800b659 	.word	0x0800b659

0800a8b8 <__mcmp>:
 800a8b8:	690a      	ldr	r2, [r1, #16]
 800a8ba:	4603      	mov	r3, r0
 800a8bc:	6900      	ldr	r0, [r0, #16]
 800a8be:	1a80      	subs	r0, r0, r2
 800a8c0:	b530      	push	{r4, r5, lr}
 800a8c2:	d10e      	bne.n	800a8e2 <__mcmp+0x2a>
 800a8c4:	3314      	adds	r3, #20
 800a8c6:	3114      	adds	r1, #20
 800a8c8:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800a8cc:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800a8d0:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800a8d4:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800a8d8:	4295      	cmp	r5, r2
 800a8da:	d003      	beq.n	800a8e4 <__mcmp+0x2c>
 800a8dc:	d205      	bcs.n	800a8ea <__mcmp+0x32>
 800a8de:	f04f 30ff 	mov.w	r0, #4294967295
 800a8e2:	bd30      	pop	{r4, r5, pc}
 800a8e4:	42a3      	cmp	r3, r4
 800a8e6:	d3f3      	bcc.n	800a8d0 <__mcmp+0x18>
 800a8e8:	e7fb      	b.n	800a8e2 <__mcmp+0x2a>
 800a8ea:	2001      	movs	r0, #1
 800a8ec:	e7f9      	b.n	800a8e2 <__mcmp+0x2a>
	...

0800a8f0 <__mdiff>:
 800a8f0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a8f4:	4689      	mov	r9, r1
 800a8f6:	4606      	mov	r6, r0
 800a8f8:	4611      	mov	r1, r2
 800a8fa:	4648      	mov	r0, r9
 800a8fc:	4614      	mov	r4, r2
 800a8fe:	f7ff ffdb 	bl	800a8b8 <__mcmp>
 800a902:	1e05      	subs	r5, r0, #0
 800a904:	d112      	bne.n	800a92c <__mdiff+0x3c>
 800a906:	4629      	mov	r1, r5
 800a908:	4630      	mov	r0, r6
 800a90a:	f7ff fd63 	bl	800a3d4 <_Balloc>
 800a90e:	4602      	mov	r2, r0
 800a910:	b928      	cbnz	r0, 800a91e <__mdiff+0x2e>
 800a912:	4b3f      	ldr	r3, [pc, #252]	@ (800aa10 <__mdiff+0x120>)
 800a914:	f240 2137 	movw	r1, #567	@ 0x237
 800a918:	483e      	ldr	r0, [pc, #248]	@ (800aa14 <__mdiff+0x124>)
 800a91a:	f000 fb65 	bl	800afe8 <__assert_func>
 800a91e:	2301      	movs	r3, #1
 800a920:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800a924:	4610      	mov	r0, r2
 800a926:	b003      	add	sp, #12
 800a928:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a92c:	bfbc      	itt	lt
 800a92e:	464b      	movlt	r3, r9
 800a930:	46a1      	movlt	r9, r4
 800a932:	4630      	mov	r0, r6
 800a934:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800a938:	bfba      	itte	lt
 800a93a:	461c      	movlt	r4, r3
 800a93c:	2501      	movlt	r5, #1
 800a93e:	2500      	movge	r5, #0
 800a940:	f7ff fd48 	bl	800a3d4 <_Balloc>
 800a944:	4602      	mov	r2, r0
 800a946:	b918      	cbnz	r0, 800a950 <__mdiff+0x60>
 800a948:	4b31      	ldr	r3, [pc, #196]	@ (800aa10 <__mdiff+0x120>)
 800a94a:	f240 2145 	movw	r1, #581	@ 0x245
 800a94e:	e7e3      	b.n	800a918 <__mdiff+0x28>
 800a950:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800a954:	6926      	ldr	r6, [r4, #16]
 800a956:	60c5      	str	r5, [r0, #12]
 800a958:	f109 0310 	add.w	r3, r9, #16
 800a95c:	f109 0514 	add.w	r5, r9, #20
 800a960:	f104 0e14 	add.w	lr, r4, #20
 800a964:	f100 0b14 	add.w	fp, r0, #20
 800a968:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800a96c:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800a970:	9301      	str	r3, [sp, #4]
 800a972:	46d9      	mov	r9, fp
 800a974:	f04f 0c00 	mov.w	ip, #0
 800a978:	9b01      	ldr	r3, [sp, #4]
 800a97a:	f85e 0b04 	ldr.w	r0, [lr], #4
 800a97e:	f853 af04 	ldr.w	sl, [r3, #4]!
 800a982:	9301      	str	r3, [sp, #4]
 800a984:	fa1f f38a 	uxth.w	r3, sl
 800a988:	4619      	mov	r1, r3
 800a98a:	b283      	uxth	r3, r0
 800a98c:	1acb      	subs	r3, r1, r3
 800a98e:	0c00      	lsrs	r0, r0, #16
 800a990:	4463      	add	r3, ip
 800a992:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800a996:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800a99a:	b29b      	uxth	r3, r3
 800a99c:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800a9a0:	4576      	cmp	r6, lr
 800a9a2:	f849 3b04 	str.w	r3, [r9], #4
 800a9a6:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800a9aa:	d8e5      	bhi.n	800a978 <__mdiff+0x88>
 800a9ac:	1b33      	subs	r3, r6, r4
 800a9ae:	3b15      	subs	r3, #21
 800a9b0:	f023 0303 	bic.w	r3, r3, #3
 800a9b4:	3415      	adds	r4, #21
 800a9b6:	3304      	adds	r3, #4
 800a9b8:	42a6      	cmp	r6, r4
 800a9ba:	bf38      	it	cc
 800a9bc:	2304      	movcc	r3, #4
 800a9be:	441d      	add	r5, r3
 800a9c0:	445b      	add	r3, fp
 800a9c2:	461e      	mov	r6, r3
 800a9c4:	462c      	mov	r4, r5
 800a9c6:	4544      	cmp	r4, r8
 800a9c8:	d30e      	bcc.n	800a9e8 <__mdiff+0xf8>
 800a9ca:	f108 0103 	add.w	r1, r8, #3
 800a9ce:	1b49      	subs	r1, r1, r5
 800a9d0:	f021 0103 	bic.w	r1, r1, #3
 800a9d4:	3d03      	subs	r5, #3
 800a9d6:	45a8      	cmp	r8, r5
 800a9d8:	bf38      	it	cc
 800a9da:	2100      	movcc	r1, #0
 800a9dc:	440b      	add	r3, r1
 800a9de:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800a9e2:	b191      	cbz	r1, 800aa0a <__mdiff+0x11a>
 800a9e4:	6117      	str	r7, [r2, #16]
 800a9e6:	e79d      	b.n	800a924 <__mdiff+0x34>
 800a9e8:	f854 1b04 	ldr.w	r1, [r4], #4
 800a9ec:	46e6      	mov	lr, ip
 800a9ee:	0c08      	lsrs	r0, r1, #16
 800a9f0:	fa1c fc81 	uxtah	ip, ip, r1
 800a9f4:	4471      	add	r1, lr
 800a9f6:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800a9fa:	b289      	uxth	r1, r1
 800a9fc:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800aa00:	f846 1b04 	str.w	r1, [r6], #4
 800aa04:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800aa08:	e7dd      	b.n	800a9c6 <__mdiff+0xd6>
 800aa0a:	3f01      	subs	r7, #1
 800aa0c:	e7e7      	b.n	800a9de <__mdiff+0xee>
 800aa0e:	bf00      	nop
 800aa10:	0800b648 	.word	0x0800b648
 800aa14:	0800b659 	.word	0x0800b659

0800aa18 <__d2b>:
 800aa18:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800aa1c:	460f      	mov	r7, r1
 800aa1e:	2101      	movs	r1, #1
 800aa20:	ec59 8b10 	vmov	r8, r9, d0
 800aa24:	4616      	mov	r6, r2
 800aa26:	f7ff fcd5 	bl	800a3d4 <_Balloc>
 800aa2a:	4604      	mov	r4, r0
 800aa2c:	b930      	cbnz	r0, 800aa3c <__d2b+0x24>
 800aa2e:	4602      	mov	r2, r0
 800aa30:	4b23      	ldr	r3, [pc, #140]	@ (800aac0 <__d2b+0xa8>)
 800aa32:	4824      	ldr	r0, [pc, #144]	@ (800aac4 <__d2b+0xac>)
 800aa34:	f240 310f 	movw	r1, #783	@ 0x30f
 800aa38:	f000 fad6 	bl	800afe8 <__assert_func>
 800aa3c:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800aa40:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800aa44:	b10d      	cbz	r5, 800aa4a <__d2b+0x32>
 800aa46:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800aa4a:	9301      	str	r3, [sp, #4]
 800aa4c:	f1b8 0300 	subs.w	r3, r8, #0
 800aa50:	d023      	beq.n	800aa9a <__d2b+0x82>
 800aa52:	4668      	mov	r0, sp
 800aa54:	9300      	str	r3, [sp, #0]
 800aa56:	f7ff fd84 	bl	800a562 <__lo0bits>
 800aa5a:	e9dd 1200 	ldrd	r1, r2, [sp]
 800aa5e:	b1d0      	cbz	r0, 800aa96 <__d2b+0x7e>
 800aa60:	f1c0 0320 	rsb	r3, r0, #32
 800aa64:	fa02 f303 	lsl.w	r3, r2, r3
 800aa68:	430b      	orrs	r3, r1
 800aa6a:	40c2      	lsrs	r2, r0
 800aa6c:	6163      	str	r3, [r4, #20]
 800aa6e:	9201      	str	r2, [sp, #4]
 800aa70:	9b01      	ldr	r3, [sp, #4]
 800aa72:	61a3      	str	r3, [r4, #24]
 800aa74:	2b00      	cmp	r3, #0
 800aa76:	bf0c      	ite	eq
 800aa78:	2201      	moveq	r2, #1
 800aa7a:	2202      	movne	r2, #2
 800aa7c:	6122      	str	r2, [r4, #16]
 800aa7e:	b1a5      	cbz	r5, 800aaaa <__d2b+0x92>
 800aa80:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800aa84:	4405      	add	r5, r0
 800aa86:	603d      	str	r5, [r7, #0]
 800aa88:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800aa8c:	6030      	str	r0, [r6, #0]
 800aa8e:	4620      	mov	r0, r4
 800aa90:	b003      	add	sp, #12
 800aa92:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800aa96:	6161      	str	r1, [r4, #20]
 800aa98:	e7ea      	b.n	800aa70 <__d2b+0x58>
 800aa9a:	a801      	add	r0, sp, #4
 800aa9c:	f7ff fd61 	bl	800a562 <__lo0bits>
 800aaa0:	9b01      	ldr	r3, [sp, #4]
 800aaa2:	6163      	str	r3, [r4, #20]
 800aaa4:	3020      	adds	r0, #32
 800aaa6:	2201      	movs	r2, #1
 800aaa8:	e7e8      	b.n	800aa7c <__d2b+0x64>
 800aaaa:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800aaae:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800aab2:	6038      	str	r0, [r7, #0]
 800aab4:	6918      	ldr	r0, [r3, #16]
 800aab6:	f7ff fd35 	bl	800a524 <__hi0bits>
 800aaba:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800aabe:	e7e5      	b.n	800aa8c <__d2b+0x74>
 800aac0:	0800b648 	.word	0x0800b648
 800aac4:	0800b659 	.word	0x0800b659

0800aac8 <__sfputc_r>:
 800aac8:	6893      	ldr	r3, [r2, #8]
 800aaca:	3b01      	subs	r3, #1
 800aacc:	2b00      	cmp	r3, #0
 800aace:	b410      	push	{r4}
 800aad0:	6093      	str	r3, [r2, #8]
 800aad2:	da08      	bge.n	800aae6 <__sfputc_r+0x1e>
 800aad4:	6994      	ldr	r4, [r2, #24]
 800aad6:	42a3      	cmp	r3, r4
 800aad8:	db01      	blt.n	800aade <__sfputc_r+0x16>
 800aada:	290a      	cmp	r1, #10
 800aadc:	d103      	bne.n	800aae6 <__sfputc_r+0x1e>
 800aade:	f85d 4b04 	ldr.w	r4, [sp], #4
 800aae2:	f7fe bc7c 	b.w	80093de <__swbuf_r>
 800aae6:	6813      	ldr	r3, [r2, #0]
 800aae8:	1c58      	adds	r0, r3, #1
 800aaea:	6010      	str	r0, [r2, #0]
 800aaec:	7019      	strb	r1, [r3, #0]
 800aaee:	4608      	mov	r0, r1
 800aaf0:	f85d 4b04 	ldr.w	r4, [sp], #4
 800aaf4:	4770      	bx	lr

0800aaf6 <__sfputs_r>:
 800aaf6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aaf8:	4606      	mov	r6, r0
 800aafa:	460f      	mov	r7, r1
 800aafc:	4614      	mov	r4, r2
 800aafe:	18d5      	adds	r5, r2, r3
 800ab00:	42ac      	cmp	r4, r5
 800ab02:	d101      	bne.n	800ab08 <__sfputs_r+0x12>
 800ab04:	2000      	movs	r0, #0
 800ab06:	e007      	b.n	800ab18 <__sfputs_r+0x22>
 800ab08:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ab0c:	463a      	mov	r2, r7
 800ab0e:	4630      	mov	r0, r6
 800ab10:	f7ff ffda 	bl	800aac8 <__sfputc_r>
 800ab14:	1c43      	adds	r3, r0, #1
 800ab16:	d1f3      	bne.n	800ab00 <__sfputs_r+0xa>
 800ab18:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800ab1c <_vfiprintf_r>:
 800ab1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ab20:	460d      	mov	r5, r1
 800ab22:	b09d      	sub	sp, #116	@ 0x74
 800ab24:	4614      	mov	r4, r2
 800ab26:	4698      	mov	r8, r3
 800ab28:	4606      	mov	r6, r0
 800ab2a:	b118      	cbz	r0, 800ab34 <_vfiprintf_r+0x18>
 800ab2c:	6a03      	ldr	r3, [r0, #32]
 800ab2e:	b90b      	cbnz	r3, 800ab34 <_vfiprintf_r+0x18>
 800ab30:	f7fe fab8 	bl	80090a4 <__sinit>
 800ab34:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800ab36:	07d9      	lsls	r1, r3, #31
 800ab38:	d405      	bmi.n	800ab46 <_vfiprintf_r+0x2a>
 800ab3a:	89ab      	ldrh	r3, [r5, #12]
 800ab3c:	059a      	lsls	r2, r3, #22
 800ab3e:	d402      	bmi.n	800ab46 <_vfiprintf_r+0x2a>
 800ab40:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800ab42:	f7fe fd5e 	bl	8009602 <__retarget_lock_acquire_recursive>
 800ab46:	89ab      	ldrh	r3, [r5, #12]
 800ab48:	071b      	lsls	r3, r3, #28
 800ab4a:	d501      	bpl.n	800ab50 <_vfiprintf_r+0x34>
 800ab4c:	692b      	ldr	r3, [r5, #16]
 800ab4e:	b99b      	cbnz	r3, 800ab78 <_vfiprintf_r+0x5c>
 800ab50:	4629      	mov	r1, r5
 800ab52:	4630      	mov	r0, r6
 800ab54:	f7fe fc82 	bl	800945c <__swsetup_r>
 800ab58:	b170      	cbz	r0, 800ab78 <_vfiprintf_r+0x5c>
 800ab5a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800ab5c:	07dc      	lsls	r4, r3, #31
 800ab5e:	d504      	bpl.n	800ab6a <_vfiprintf_r+0x4e>
 800ab60:	f04f 30ff 	mov.w	r0, #4294967295
 800ab64:	b01d      	add	sp, #116	@ 0x74
 800ab66:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ab6a:	89ab      	ldrh	r3, [r5, #12]
 800ab6c:	0598      	lsls	r0, r3, #22
 800ab6e:	d4f7      	bmi.n	800ab60 <_vfiprintf_r+0x44>
 800ab70:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800ab72:	f7fe fd47 	bl	8009604 <__retarget_lock_release_recursive>
 800ab76:	e7f3      	b.n	800ab60 <_vfiprintf_r+0x44>
 800ab78:	2300      	movs	r3, #0
 800ab7a:	9309      	str	r3, [sp, #36]	@ 0x24
 800ab7c:	2320      	movs	r3, #32
 800ab7e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800ab82:	f8cd 800c 	str.w	r8, [sp, #12]
 800ab86:	2330      	movs	r3, #48	@ 0x30
 800ab88:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800ad38 <_vfiprintf_r+0x21c>
 800ab8c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800ab90:	f04f 0901 	mov.w	r9, #1
 800ab94:	4623      	mov	r3, r4
 800ab96:	469a      	mov	sl, r3
 800ab98:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ab9c:	b10a      	cbz	r2, 800aba2 <_vfiprintf_r+0x86>
 800ab9e:	2a25      	cmp	r2, #37	@ 0x25
 800aba0:	d1f9      	bne.n	800ab96 <_vfiprintf_r+0x7a>
 800aba2:	ebba 0b04 	subs.w	fp, sl, r4
 800aba6:	d00b      	beq.n	800abc0 <_vfiprintf_r+0xa4>
 800aba8:	465b      	mov	r3, fp
 800abaa:	4622      	mov	r2, r4
 800abac:	4629      	mov	r1, r5
 800abae:	4630      	mov	r0, r6
 800abb0:	f7ff ffa1 	bl	800aaf6 <__sfputs_r>
 800abb4:	3001      	adds	r0, #1
 800abb6:	f000 80a7 	beq.w	800ad08 <_vfiprintf_r+0x1ec>
 800abba:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800abbc:	445a      	add	r2, fp
 800abbe:	9209      	str	r2, [sp, #36]	@ 0x24
 800abc0:	f89a 3000 	ldrb.w	r3, [sl]
 800abc4:	2b00      	cmp	r3, #0
 800abc6:	f000 809f 	beq.w	800ad08 <_vfiprintf_r+0x1ec>
 800abca:	2300      	movs	r3, #0
 800abcc:	f04f 32ff 	mov.w	r2, #4294967295
 800abd0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800abd4:	f10a 0a01 	add.w	sl, sl, #1
 800abd8:	9304      	str	r3, [sp, #16]
 800abda:	9307      	str	r3, [sp, #28]
 800abdc:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800abe0:	931a      	str	r3, [sp, #104]	@ 0x68
 800abe2:	4654      	mov	r4, sl
 800abe4:	2205      	movs	r2, #5
 800abe6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800abea:	4853      	ldr	r0, [pc, #332]	@ (800ad38 <_vfiprintf_r+0x21c>)
 800abec:	f7f5 fb78 	bl	80002e0 <memchr>
 800abf0:	9a04      	ldr	r2, [sp, #16]
 800abf2:	b9d8      	cbnz	r0, 800ac2c <_vfiprintf_r+0x110>
 800abf4:	06d1      	lsls	r1, r2, #27
 800abf6:	bf44      	itt	mi
 800abf8:	2320      	movmi	r3, #32
 800abfa:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800abfe:	0713      	lsls	r3, r2, #28
 800ac00:	bf44      	itt	mi
 800ac02:	232b      	movmi	r3, #43	@ 0x2b
 800ac04:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800ac08:	f89a 3000 	ldrb.w	r3, [sl]
 800ac0c:	2b2a      	cmp	r3, #42	@ 0x2a
 800ac0e:	d015      	beq.n	800ac3c <_vfiprintf_r+0x120>
 800ac10:	9a07      	ldr	r2, [sp, #28]
 800ac12:	4654      	mov	r4, sl
 800ac14:	2000      	movs	r0, #0
 800ac16:	f04f 0c0a 	mov.w	ip, #10
 800ac1a:	4621      	mov	r1, r4
 800ac1c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ac20:	3b30      	subs	r3, #48	@ 0x30
 800ac22:	2b09      	cmp	r3, #9
 800ac24:	d94b      	bls.n	800acbe <_vfiprintf_r+0x1a2>
 800ac26:	b1b0      	cbz	r0, 800ac56 <_vfiprintf_r+0x13a>
 800ac28:	9207      	str	r2, [sp, #28]
 800ac2a:	e014      	b.n	800ac56 <_vfiprintf_r+0x13a>
 800ac2c:	eba0 0308 	sub.w	r3, r0, r8
 800ac30:	fa09 f303 	lsl.w	r3, r9, r3
 800ac34:	4313      	orrs	r3, r2
 800ac36:	9304      	str	r3, [sp, #16]
 800ac38:	46a2      	mov	sl, r4
 800ac3a:	e7d2      	b.n	800abe2 <_vfiprintf_r+0xc6>
 800ac3c:	9b03      	ldr	r3, [sp, #12]
 800ac3e:	1d19      	adds	r1, r3, #4
 800ac40:	681b      	ldr	r3, [r3, #0]
 800ac42:	9103      	str	r1, [sp, #12]
 800ac44:	2b00      	cmp	r3, #0
 800ac46:	bfbb      	ittet	lt
 800ac48:	425b      	neglt	r3, r3
 800ac4a:	f042 0202 	orrlt.w	r2, r2, #2
 800ac4e:	9307      	strge	r3, [sp, #28]
 800ac50:	9307      	strlt	r3, [sp, #28]
 800ac52:	bfb8      	it	lt
 800ac54:	9204      	strlt	r2, [sp, #16]
 800ac56:	7823      	ldrb	r3, [r4, #0]
 800ac58:	2b2e      	cmp	r3, #46	@ 0x2e
 800ac5a:	d10a      	bne.n	800ac72 <_vfiprintf_r+0x156>
 800ac5c:	7863      	ldrb	r3, [r4, #1]
 800ac5e:	2b2a      	cmp	r3, #42	@ 0x2a
 800ac60:	d132      	bne.n	800acc8 <_vfiprintf_r+0x1ac>
 800ac62:	9b03      	ldr	r3, [sp, #12]
 800ac64:	1d1a      	adds	r2, r3, #4
 800ac66:	681b      	ldr	r3, [r3, #0]
 800ac68:	9203      	str	r2, [sp, #12]
 800ac6a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800ac6e:	3402      	adds	r4, #2
 800ac70:	9305      	str	r3, [sp, #20]
 800ac72:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800ad48 <_vfiprintf_r+0x22c>
 800ac76:	7821      	ldrb	r1, [r4, #0]
 800ac78:	2203      	movs	r2, #3
 800ac7a:	4650      	mov	r0, sl
 800ac7c:	f7f5 fb30 	bl	80002e0 <memchr>
 800ac80:	b138      	cbz	r0, 800ac92 <_vfiprintf_r+0x176>
 800ac82:	9b04      	ldr	r3, [sp, #16]
 800ac84:	eba0 000a 	sub.w	r0, r0, sl
 800ac88:	2240      	movs	r2, #64	@ 0x40
 800ac8a:	4082      	lsls	r2, r0
 800ac8c:	4313      	orrs	r3, r2
 800ac8e:	3401      	adds	r4, #1
 800ac90:	9304      	str	r3, [sp, #16]
 800ac92:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ac96:	4829      	ldr	r0, [pc, #164]	@ (800ad3c <_vfiprintf_r+0x220>)
 800ac98:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800ac9c:	2206      	movs	r2, #6
 800ac9e:	f7f5 fb1f 	bl	80002e0 <memchr>
 800aca2:	2800      	cmp	r0, #0
 800aca4:	d03f      	beq.n	800ad26 <_vfiprintf_r+0x20a>
 800aca6:	4b26      	ldr	r3, [pc, #152]	@ (800ad40 <_vfiprintf_r+0x224>)
 800aca8:	bb1b      	cbnz	r3, 800acf2 <_vfiprintf_r+0x1d6>
 800acaa:	9b03      	ldr	r3, [sp, #12]
 800acac:	3307      	adds	r3, #7
 800acae:	f023 0307 	bic.w	r3, r3, #7
 800acb2:	3308      	adds	r3, #8
 800acb4:	9303      	str	r3, [sp, #12]
 800acb6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800acb8:	443b      	add	r3, r7
 800acba:	9309      	str	r3, [sp, #36]	@ 0x24
 800acbc:	e76a      	b.n	800ab94 <_vfiprintf_r+0x78>
 800acbe:	fb0c 3202 	mla	r2, ip, r2, r3
 800acc2:	460c      	mov	r4, r1
 800acc4:	2001      	movs	r0, #1
 800acc6:	e7a8      	b.n	800ac1a <_vfiprintf_r+0xfe>
 800acc8:	2300      	movs	r3, #0
 800acca:	3401      	adds	r4, #1
 800accc:	9305      	str	r3, [sp, #20]
 800acce:	4619      	mov	r1, r3
 800acd0:	f04f 0c0a 	mov.w	ip, #10
 800acd4:	4620      	mov	r0, r4
 800acd6:	f810 2b01 	ldrb.w	r2, [r0], #1
 800acda:	3a30      	subs	r2, #48	@ 0x30
 800acdc:	2a09      	cmp	r2, #9
 800acde:	d903      	bls.n	800ace8 <_vfiprintf_r+0x1cc>
 800ace0:	2b00      	cmp	r3, #0
 800ace2:	d0c6      	beq.n	800ac72 <_vfiprintf_r+0x156>
 800ace4:	9105      	str	r1, [sp, #20]
 800ace6:	e7c4      	b.n	800ac72 <_vfiprintf_r+0x156>
 800ace8:	fb0c 2101 	mla	r1, ip, r1, r2
 800acec:	4604      	mov	r4, r0
 800acee:	2301      	movs	r3, #1
 800acf0:	e7f0      	b.n	800acd4 <_vfiprintf_r+0x1b8>
 800acf2:	ab03      	add	r3, sp, #12
 800acf4:	9300      	str	r3, [sp, #0]
 800acf6:	462a      	mov	r2, r5
 800acf8:	4b12      	ldr	r3, [pc, #72]	@ (800ad44 <_vfiprintf_r+0x228>)
 800acfa:	a904      	add	r1, sp, #16
 800acfc:	4630      	mov	r0, r6
 800acfe:	f7fd fd9f 	bl	8008840 <_printf_float>
 800ad02:	4607      	mov	r7, r0
 800ad04:	1c78      	adds	r0, r7, #1
 800ad06:	d1d6      	bne.n	800acb6 <_vfiprintf_r+0x19a>
 800ad08:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800ad0a:	07d9      	lsls	r1, r3, #31
 800ad0c:	d405      	bmi.n	800ad1a <_vfiprintf_r+0x1fe>
 800ad0e:	89ab      	ldrh	r3, [r5, #12]
 800ad10:	059a      	lsls	r2, r3, #22
 800ad12:	d402      	bmi.n	800ad1a <_vfiprintf_r+0x1fe>
 800ad14:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800ad16:	f7fe fc75 	bl	8009604 <__retarget_lock_release_recursive>
 800ad1a:	89ab      	ldrh	r3, [r5, #12]
 800ad1c:	065b      	lsls	r3, r3, #25
 800ad1e:	f53f af1f 	bmi.w	800ab60 <_vfiprintf_r+0x44>
 800ad22:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800ad24:	e71e      	b.n	800ab64 <_vfiprintf_r+0x48>
 800ad26:	ab03      	add	r3, sp, #12
 800ad28:	9300      	str	r3, [sp, #0]
 800ad2a:	462a      	mov	r2, r5
 800ad2c:	4b05      	ldr	r3, [pc, #20]	@ (800ad44 <_vfiprintf_r+0x228>)
 800ad2e:	a904      	add	r1, sp, #16
 800ad30:	4630      	mov	r0, r6
 800ad32:	f7fe f80d 	bl	8008d50 <_printf_i>
 800ad36:	e7e4      	b.n	800ad02 <_vfiprintf_r+0x1e6>
 800ad38:	0800b6b2 	.word	0x0800b6b2
 800ad3c:	0800b6bc 	.word	0x0800b6bc
 800ad40:	08008841 	.word	0x08008841
 800ad44:	0800aaf7 	.word	0x0800aaf7
 800ad48:	0800b6b8 	.word	0x0800b6b8

0800ad4c <__sflush_r>:
 800ad4c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800ad50:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ad54:	0716      	lsls	r6, r2, #28
 800ad56:	4605      	mov	r5, r0
 800ad58:	460c      	mov	r4, r1
 800ad5a:	d454      	bmi.n	800ae06 <__sflush_r+0xba>
 800ad5c:	684b      	ldr	r3, [r1, #4]
 800ad5e:	2b00      	cmp	r3, #0
 800ad60:	dc02      	bgt.n	800ad68 <__sflush_r+0x1c>
 800ad62:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800ad64:	2b00      	cmp	r3, #0
 800ad66:	dd48      	ble.n	800adfa <__sflush_r+0xae>
 800ad68:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800ad6a:	2e00      	cmp	r6, #0
 800ad6c:	d045      	beq.n	800adfa <__sflush_r+0xae>
 800ad6e:	2300      	movs	r3, #0
 800ad70:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800ad74:	682f      	ldr	r7, [r5, #0]
 800ad76:	6a21      	ldr	r1, [r4, #32]
 800ad78:	602b      	str	r3, [r5, #0]
 800ad7a:	d030      	beq.n	800adde <__sflush_r+0x92>
 800ad7c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800ad7e:	89a3      	ldrh	r3, [r4, #12]
 800ad80:	0759      	lsls	r1, r3, #29
 800ad82:	d505      	bpl.n	800ad90 <__sflush_r+0x44>
 800ad84:	6863      	ldr	r3, [r4, #4]
 800ad86:	1ad2      	subs	r2, r2, r3
 800ad88:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800ad8a:	b10b      	cbz	r3, 800ad90 <__sflush_r+0x44>
 800ad8c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800ad8e:	1ad2      	subs	r2, r2, r3
 800ad90:	2300      	movs	r3, #0
 800ad92:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800ad94:	6a21      	ldr	r1, [r4, #32]
 800ad96:	4628      	mov	r0, r5
 800ad98:	47b0      	blx	r6
 800ad9a:	1c43      	adds	r3, r0, #1
 800ad9c:	89a3      	ldrh	r3, [r4, #12]
 800ad9e:	d106      	bne.n	800adae <__sflush_r+0x62>
 800ada0:	6829      	ldr	r1, [r5, #0]
 800ada2:	291d      	cmp	r1, #29
 800ada4:	d82b      	bhi.n	800adfe <__sflush_r+0xb2>
 800ada6:	4a2a      	ldr	r2, [pc, #168]	@ (800ae50 <__sflush_r+0x104>)
 800ada8:	40ca      	lsrs	r2, r1
 800adaa:	07d6      	lsls	r6, r2, #31
 800adac:	d527      	bpl.n	800adfe <__sflush_r+0xb2>
 800adae:	2200      	movs	r2, #0
 800adb0:	6062      	str	r2, [r4, #4]
 800adb2:	04d9      	lsls	r1, r3, #19
 800adb4:	6922      	ldr	r2, [r4, #16]
 800adb6:	6022      	str	r2, [r4, #0]
 800adb8:	d504      	bpl.n	800adc4 <__sflush_r+0x78>
 800adba:	1c42      	adds	r2, r0, #1
 800adbc:	d101      	bne.n	800adc2 <__sflush_r+0x76>
 800adbe:	682b      	ldr	r3, [r5, #0]
 800adc0:	b903      	cbnz	r3, 800adc4 <__sflush_r+0x78>
 800adc2:	6560      	str	r0, [r4, #84]	@ 0x54
 800adc4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800adc6:	602f      	str	r7, [r5, #0]
 800adc8:	b1b9      	cbz	r1, 800adfa <__sflush_r+0xae>
 800adca:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800adce:	4299      	cmp	r1, r3
 800add0:	d002      	beq.n	800add8 <__sflush_r+0x8c>
 800add2:	4628      	mov	r0, r5
 800add4:	f7ff f9fe 	bl	800a1d4 <_free_r>
 800add8:	2300      	movs	r3, #0
 800adda:	6363      	str	r3, [r4, #52]	@ 0x34
 800addc:	e00d      	b.n	800adfa <__sflush_r+0xae>
 800adde:	2301      	movs	r3, #1
 800ade0:	4628      	mov	r0, r5
 800ade2:	47b0      	blx	r6
 800ade4:	4602      	mov	r2, r0
 800ade6:	1c50      	adds	r0, r2, #1
 800ade8:	d1c9      	bne.n	800ad7e <__sflush_r+0x32>
 800adea:	682b      	ldr	r3, [r5, #0]
 800adec:	2b00      	cmp	r3, #0
 800adee:	d0c6      	beq.n	800ad7e <__sflush_r+0x32>
 800adf0:	2b1d      	cmp	r3, #29
 800adf2:	d001      	beq.n	800adf8 <__sflush_r+0xac>
 800adf4:	2b16      	cmp	r3, #22
 800adf6:	d11e      	bne.n	800ae36 <__sflush_r+0xea>
 800adf8:	602f      	str	r7, [r5, #0]
 800adfa:	2000      	movs	r0, #0
 800adfc:	e022      	b.n	800ae44 <__sflush_r+0xf8>
 800adfe:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ae02:	b21b      	sxth	r3, r3
 800ae04:	e01b      	b.n	800ae3e <__sflush_r+0xf2>
 800ae06:	690f      	ldr	r7, [r1, #16]
 800ae08:	2f00      	cmp	r7, #0
 800ae0a:	d0f6      	beq.n	800adfa <__sflush_r+0xae>
 800ae0c:	0793      	lsls	r3, r2, #30
 800ae0e:	680e      	ldr	r6, [r1, #0]
 800ae10:	bf08      	it	eq
 800ae12:	694b      	ldreq	r3, [r1, #20]
 800ae14:	600f      	str	r7, [r1, #0]
 800ae16:	bf18      	it	ne
 800ae18:	2300      	movne	r3, #0
 800ae1a:	eba6 0807 	sub.w	r8, r6, r7
 800ae1e:	608b      	str	r3, [r1, #8]
 800ae20:	f1b8 0f00 	cmp.w	r8, #0
 800ae24:	dde9      	ble.n	800adfa <__sflush_r+0xae>
 800ae26:	6a21      	ldr	r1, [r4, #32]
 800ae28:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800ae2a:	4643      	mov	r3, r8
 800ae2c:	463a      	mov	r2, r7
 800ae2e:	4628      	mov	r0, r5
 800ae30:	47b0      	blx	r6
 800ae32:	2800      	cmp	r0, #0
 800ae34:	dc08      	bgt.n	800ae48 <__sflush_r+0xfc>
 800ae36:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ae3a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ae3e:	81a3      	strh	r3, [r4, #12]
 800ae40:	f04f 30ff 	mov.w	r0, #4294967295
 800ae44:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ae48:	4407      	add	r7, r0
 800ae4a:	eba8 0800 	sub.w	r8, r8, r0
 800ae4e:	e7e7      	b.n	800ae20 <__sflush_r+0xd4>
 800ae50:	20400001 	.word	0x20400001

0800ae54 <_fflush_r>:
 800ae54:	b538      	push	{r3, r4, r5, lr}
 800ae56:	690b      	ldr	r3, [r1, #16]
 800ae58:	4605      	mov	r5, r0
 800ae5a:	460c      	mov	r4, r1
 800ae5c:	b913      	cbnz	r3, 800ae64 <_fflush_r+0x10>
 800ae5e:	2500      	movs	r5, #0
 800ae60:	4628      	mov	r0, r5
 800ae62:	bd38      	pop	{r3, r4, r5, pc}
 800ae64:	b118      	cbz	r0, 800ae6e <_fflush_r+0x1a>
 800ae66:	6a03      	ldr	r3, [r0, #32]
 800ae68:	b90b      	cbnz	r3, 800ae6e <_fflush_r+0x1a>
 800ae6a:	f7fe f91b 	bl	80090a4 <__sinit>
 800ae6e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ae72:	2b00      	cmp	r3, #0
 800ae74:	d0f3      	beq.n	800ae5e <_fflush_r+0xa>
 800ae76:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800ae78:	07d0      	lsls	r0, r2, #31
 800ae7a:	d404      	bmi.n	800ae86 <_fflush_r+0x32>
 800ae7c:	0599      	lsls	r1, r3, #22
 800ae7e:	d402      	bmi.n	800ae86 <_fflush_r+0x32>
 800ae80:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800ae82:	f7fe fbbe 	bl	8009602 <__retarget_lock_acquire_recursive>
 800ae86:	4628      	mov	r0, r5
 800ae88:	4621      	mov	r1, r4
 800ae8a:	f7ff ff5f 	bl	800ad4c <__sflush_r>
 800ae8e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800ae90:	07da      	lsls	r2, r3, #31
 800ae92:	4605      	mov	r5, r0
 800ae94:	d4e4      	bmi.n	800ae60 <_fflush_r+0xc>
 800ae96:	89a3      	ldrh	r3, [r4, #12]
 800ae98:	059b      	lsls	r3, r3, #22
 800ae9a:	d4e1      	bmi.n	800ae60 <_fflush_r+0xc>
 800ae9c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800ae9e:	f7fe fbb1 	bl	8009604 <__retarget_lock_release_recursive>
 800aea2:	e7dd      	b.n	800ae60 <_fflush_r+0xc>

0800aea4 <__swhatbuf_r>:
 800aea4:	b570      	push	{r4, r5, r6, lr}
 800aea6:	460c      	mov	r4, r1
 800aea8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800aeac:	2900      	cmp	r1, #0
 800aeae:	b096      	sub	sp, #88	@ 0x58
 800aeb0:	4615      	mov	r5, r2
 800aeb2:	461e      	mov	r6, r3
 800aeb4:	da0d      	bge.n	800aed2 <__swhatbuf_r+0x2e>
 800aeb6:	89a3      	ldrh	r3, [r4, #12]
 800aeb8:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800aebc:	f04f 0100 	mov.w	r1, #0
 800aec0:	bf14      	ite	ne
 800aec2:	2340      	movne	r3, #64	@ 0x40
 800aec4:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800aec8:	2000      	movs	r0, #0
 800aeca:	6031      	str	r1, [r6, #0]
 800aecc:	602b      	str	r3, [r5, #0]
 800aece:	b016      	add	sp, #88	@ 0x58
 800aed0:	bd70      	pop	{r4, r5, r6, pc}
 800aed2:	466a      	mov	r2, sp
 800aed4:	f000 f848 	bl	800af68 <_fstat_r>
 800aed8:	2800      	cmp	r0, #0
 800aeda:	dbec      	blt.n	800aeb6 <__swhatbuf_r+0x12>
 800aedc:	9901      	ldr	r1, [sp, #4]
 800aede:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800aee2:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800aee6:	4259      	negs	r1, r3
 800aee8:	4159      	adcs	r1, r3
 800aeea:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800aeee:	e7eb      	b.n	800aec8 <__swhatbuf_r+0x24>

0800aef0 <__smakebuf_r>:
 800aef0:	898b      	ldrh	r3, [r1, #12]
 800aef2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800aef4:	079d      	lsls	r5, r3, #30
 800aef6:	4606      	mov	r6, r0
 800aef8:	460c      	mov	r4, r1
 800aefa:	d507      	bpl.n	800af0c <__smakebuf_r+0x1c>
 800aefc:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800af00:	6023      	str	r3, [r4, #0]
 800af02:	6123      	str	r3, [r4, #16]
 800af04:	2301      	movs	r3, #1
 800af06:	6163      	str	r3, [r4, #20]
 800af08:	b003      	add	sp, #12
 800af0a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800af0c:	ab01      	add	r3, sp, #4
 800af0e:	466a      	mov	r2, sp
 800af10:	f7ff ffc8 	bl	800aea4 <__swhatbuf_r>
 800af14:	9f00      	ldr	r7, [sp, #0]
 800af16:	4605      	mov	r5, r0
 800af18:	4639      	mov	r1, r7
 800af1a:	4630      	mov	r0, r6
 800af1c:	f7ff f9ce 	bl	800a2bc <_malloc_r>
 800af20:	b948      	cbnz	r0, 800af36 <__smakebuf_r+0x46>
 800af22:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800af26:	059a      	lsls	r2, r3, #22
 800af28:	d4ee      	bmi.n	800af08 <__smakebuf_r+0x18>
 800af2a:	f023 0303 	bic.w	r3, r3, #3
 800af2e:	f043 0302 	orr.w	r3, r3, #2
 800af32:	81a3      	strh	r3, [r4, #12]
 800af34:	e7e2      	b.n	800aefc <__smakebuf_r+0xc>
 800af36:	89a3      	ldrh	r3, [r4, #12]
 800af38:	6020      	str	r0, [r4, #0]
 800af3a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800af3e:	81a3      	strh	r3, [r4, #12]
 800af40:	9b01      	ldr	r3, [sp, #4]
 800af42:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800af46:	b15b      	cbz	r3, 800af60 <__smakebuf_r+0x70>
 800af48:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800af4c:	4630      	mov	r0, r6
 800af4e:	f000 f81d 	bl	800af8c <_isatty_r>
 800af52:	b128      	cbz	r0, 800af60 <__smakebuf_r+0x70>
 800af54:	89a3      	ldrh	r3, [r4, #12]
 800af56:	f023 0303 	bic.w	r3, r3, #3
 800af5a:	f043 0301 	orr.w	r3, r3, #1
 800af5e:	81a3      	strh	r3, [r4, #12]
 800af60:	89a3      	ldrh	r3, [r4, #12]
 800af62:	431d      	orrs	r5, r3
 800af64:	81a5      	strh	r5, [r4, #12]
 800af66:	e7cf      	b.n	800af08 <__smakebuf_r+0x18>

0800af68 <_fstat_r>:
 800af68:	b538      	push	{r3, r4, r5, lr}
 800af6a:	4d07      	ldr	r5, [pc, #28]	@ (800af88 <_fstat_r+0x20>)
 800af6c:	2300      	movs	r3, #0
 800af6e:	4604      	mov	r4, r0
 800af70:	4608      	mov	r0, r1
 800af72:	4611      	mov	r1, r2
 800af74:	602b      	str	r3, [r5, #0]
 800af76:	f7f7 fe36 	bl	8002be6 <_fstat>
 800af7a:	1c43      	adds	r3, r0, #1
 800af7c:	d102      	bne.n	800af84 <_fstat_r+0x1c>
 800af7e:	682b      	ldr	r3, [r5, #0]
 800af80:	b103      	cbz	r3, 800af84 <_fstat_r+0x1c>
 800af82:	6023      	str	r3, [r4, #0]
 800af84:	bd38      	pop	{r3, r4, r5, pc}
 800af86:	bf00      	nop
 800af88:	240005b0 	.word	0x240005b0

0800af8c <_isatty_r>:
 800af8c:	b538      	push	{r3, r4, r5, lr}
 800af8e:	4d06      	ldr	r5, [pc, #24]	@ (800afa8 <_isatty_r+0x1c>)
 800af90:	2300      	movs	r3, #0
 800af92:	4604      	mov	r4, r0
 800af94:	4608      	mov	r0, r1
 800af96:	602b      	str	r3, [r5, #0]
 800af98:	f7f7 fe35 	bl	8002c06 <_isatty>
 800af9c:	1c43      	adds	r3, r0, #1
 800af9e:	d102      	bne.n	800afa6 <_isatty_r+0x1a>
 800afa0:	682b      	ldr	r3, [r5, #0]
 800afa2:	b103      	cbz	r3, 800afa6 <_isatty_r+0x1a>
 800afa4:	6023      	str	r3, [r4, #0]
 800afa6:	bd38      	pop	{r3, r4, r5, pc}
 800afa8:	240005b0 	.word	0x240005b0

0800afac <_sbrk_r>:
 800afac:	b538      	push	{r3, r4, r5, lr}
 800afae:	4d06      	ldr	r5, [pc, #24]	@ (800afc8 <_sbrk_r+0x1c>)
 800afb0:	2300      	movs	r3, #0
 800afb2:	4604      	mov	r4, r0
 800afb4:	4608      	mov	r0, r1
 800afb6:	602b      	str	r3, [r5, #0]
 800afb8:	f7f7 fe3e 	bl	8002c38 <_sbrk>
 800afbc:	1c43      	adds	r3, r0, #1
 800afbe:	d102      	bne.n	800afc6 <_sbrk_r+0x1a>
 800afc0:	682b      	ldr	r3, [r5, #0]
 800afc2:	b103      	cbz	r3, 800afc6 <_sbrk_r+0x1a>
 800afc4:	6023      	str	r3, [r4, #0]
 800afc6:	bd38      	pop	{r3, r4, r5, pc}
 800afc8:	240005b0 	.word	0x240005b0

0800afcc <memcpy>:
 800afcc:	440a      	add	r2, r1
 800afce:	4291      	cmp	r1, r2
 800afd0:	f100 33ff 	add.w	r3, r0, #4294967295
 800afd4:	d100      	bne.n	800afd8 <memcpy+0xc>
 800afd6:	4770      	bx	lr
 800afd8:	b510      	push	{r4, lr}
 800afda:	f811 4b01 	ldrb.w	r4, [r1], #1
 800afde:	f803 4f01 	strb.w	r4, [r3, #1]!
 800afe2:	4291      	cmp	r1, r2
 800afe4:	d1f9      	bne.n	800afda <memcpy+0xe>
 800afe6:	bd10      	pop	{r4, pc}

0800afe8 <__assert_func>:
 800afe8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800afea:	4614      	mov	r4, r2
 800afec:	461a      	mov	r2, r3
 800afee:	4b09      	ldr	r3, [pc, #36]	@ (800b014 <__assert_func+0x2c>)
 800aff0:	681b      	ldr	r3, [r3, #0]
 800aff2:	4605      	mov	r5, r0
 800aff4:	68d8      	ldr	r0, [r3, #12]
 800aff6:	b14c      	cbz	r4, 800b00c <__assert_func+0x24>
 800aff8:	4b07      	ldr	r3, [pc, #28]	@ (800b018 <__assert_func+0x30>)
 800affa:	9100      	str	r1, [sp, #0]
 800affc:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800b000:	4906      	ldr	r1, [pc, #24]	@ (800b01c <__assert_func+0x34>)
 800b002:	462b      	mov	r3, r5
 800b004:	f000 f842 	bl	800b08c <fiprintf>
 800b008:	f000 f852 	bl	800b0b0 <abort>
 800b00c:	4b04      	ldr	r3, [pc, #16]	@ (800b020 <__assert_func+0x38>)
 800b00e:	461c      	mov	r4, r3
 800b010:	e7f3      	b.n	800affa <__assert_func+0x12>
 800b012:	bf00      	nop
 800b014:	2400001c 	.word	0x2400001c
 800b018:	0800b6cd 	.word	0x0800b6cd
 800b01c:	0800b6da 	.word	0x0800b6da
 800b020:	0800b708 	.word	0x0800b708

0800b024 <_calloc_r>:
 800b024:	b570      	push	{r4, r5, r6, lr}
 800b026:	fba1 5402 	umull	r5, r4, r1, r2
 800b02a:	b934      	cbnz	r4, 800b03a <_calloc_r+0x16>
 800b02c:	4629      	mov	r1, r5
 800b02e:	f7ff f945 	bl	800a2bc <_malloc_r>
 800b032:	4606      	mov	r6, r0
 800b034:	b928      	cbnz	r0, 800b042 <_calloc_r+0x1e>
 800b036:	4630      	mov	r0, r6
 800b038:	bd70      	pop	{r4, r5, r6, pc}
 800b03a:	220c      	movs	r2, #12
 800b03c:	6002      	str	r2, [r0, #0]
 800b03e:	2600      	movs	r6, #0
 800b040:	e7f9      	b.n	800b036 <_calloc_r+0x12>
 800b042:	462a      	mov	r2, r5
 800b044:	4621      	mov	r1, r4
 800b046:	f7fe fa5f 	bl	8009508 <memset>
 800b04a:	e7f4      	b.n	800b036 <_calloc_r+0x12>

0800b04c <__ascii_mbtowc>:
 800b04c:	b082      	sub	sp, #8
 800b04e:	b901      	cbnz	r1, 800b052 <__ascii_mbtowc+0x6>
 800b050:	a901      	add	r1, sp, #4
 800b052:	b142      	cbz	r2, 800b066 <__ascii_mbtowc+0x1a>
 800b054:	b14b      	cbz	r3, 800b06a <__ascii_mbtowc+0x1e>
 800b056:	7813      	ldrb	r3, [r2, #0]
 800b058:	600b      	str	r3, [r1, #0]
 800b05a:	7812      	ldrb	r2, [r2, #0]
 800b05c:	1e10      	subs	r0, r2, #0
 800b05e:	bf18      	it	ne
 800b060:	2001      	movne	r0, #1
 800b062:	b002      	add	sp, #8
 800b064:	4770      	bx	lr
 800b066:	4610      	mov	r0, r2
 800b068:	e7fb      	b.n	800b062 <__ascii_mbtowc+0x16>
 800b06a:	f06f 0001 	mvn.w	r0, #1
 800b06e:	e7f8      	b.n	800b062 <__ascii_mbtowc+0x16>

0800b070 <__ascii_wctomb>:
 800b070:	4603      	mov	r3, r0
 800b072:	4608      	mov	r0, r1
 800b074:	b141      	cbz	r1, 800b088 <__ascii_wctomb+0x18>
 800b076:	2aff      	cmp	r2, #255	@ 0xff
 800b078:	d904      	bls.n	800b084 <__ascii_wctomb+0x14>
 800b07a:	228a      	movs	r2, #138	@ 0x8a
 800b07c:	601a      	str	r2, [r3, #0]
 800b07e:	f04f 30ff 	mov.w	r0, #4294967295
 800b082:	4770      	bx	lr
 800b084:	700a      	strb	r2, [r1, #0]
 800b086:	2001      	movs	r0, #1
 800b088:	4770      	bx	lr
	...

0800b08c <fiprintf>:
 800b08c:	b40e      	push	{r1, r2, r3}
 800b08e:	b503      	push	{r0, r1, lr}
 800b090:	4601      	mov	r1, r0
 800b092:	ab03      	add	r3, sp, #12
 800b094:	4805      	ldr	r0, [pc, #20]	@ (800b0ac <fiprintf+0x20>)
 800b096:	f853 2b04 	ldr.w	r2, [r3], #4
 800b09a:	6800      	ldr	r0, [r0, #0]
 800b09c:	9301      	str	r3, [sp, #4]
 800b09e:	f7ff fd3d 	bl	800ab1c <_vfiprintf_r>
 800b0a2:	b002      	add	sp, #8
 800b0a4:	f85d eb04 	ldr.w	lr, [sp], #4
 800b0a8:	b003      	add	sp, #12
 800b0aa:	4770      	bx	lr
 800b0ac:	2400001c 	.word	0x2400001c

0800b0b0 <abort>:
 800b0b0:	b508      	push	{r3, lr}
 800b0b2:	2006      	movs	r0, #6
 800b0b4:	f000 f82c 	bl	800b110 <raise>
 800b0b8:	2001      	movs	r0, #1
 800b0ba:	f7f7 fd60 	bl	8002b7e <_exit>

0800b0be <_raise_r>:
 800b0be:	291f      	cmp	r1, #31
 800b0c0:	b538      	push	{r3, r4, r5, lr}
 800b0c2:	4605      	mov	r5, r0
 800b0c4:	460c      	mov	r4, r1
 800b0c6:	d904      	bls.n	800b0d2 <_raise_r+0x14>
 800b0c8:	2316      	movs	r3, #22
 800b0ca:	6003      	str	r3, [r0, #0]
 800b0cc:	f04f 30ff 	mov.w	r0, #4294967295
 800b0d0:	bd38      	pop	{r3, r4, r5, pc}
 800b0d2:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800b0d4:	b112      	cbz	r2, 800b0dc <_raise_r+0x1e>
 800b0d6:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800b0da:	b94b      	cbnz	r3, 800b0f0 <_raise_r+0x32>
 800b0dc:	4628      	mov	r0, r5
 800b0de:	f000 f831 	bl	800b144 <_getpid_r>
 800b0e2:	4622      	mov	r2, r4
 800b0e4:	4601      	mov	r1, r0
 800b0e6:	4628      	mov	r0, r5
 800b0e8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b0ec:	f000 b818 	b.w	800b120 <_kill_r>
 800b0f0:	2b01      	cmp	r3, #1
 800b0f2:	d00a      	beq.n	800b10a <_raise_r+0x4c>
 800b0f4:	1c59      	adds	r1, r3, #1
 800b0f6:	d103      	bne.n	800b100 <_raise_r+0x42>
 800b0f8:	2316      	movs	r3, #22
 800b0fa:	6003      	str	r3, [r0, #0]
 800b0fc:	2001      	movs	r0, #1
 800b0fe:	e7e7      	b.n	800b0d0 <_raise_r+0x12>
 800b100:	2100      	movs	r1, #0
 800b102:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800b106:	4620      	mov	r0, r4
 800b108:	4798      	blx	r3
 800b10a:	2000      	movs	r0, #0
 800b10c:	e7e0      	b.n	800b0d0 <_raise_r+0x12>
	...

0800b110 <raise>:
 800b110:	4b02      	ldr	r3, [pc, #8]	@ (800b11c <raise+0xc>)
 800b112:	4601      	mov	r1, r0
 800b114:	6818      	ldr	r0, [r3, #0]
 800b116:	f7ff bfd2 	b.w	800b0be <_raise_r>
 800b11a:	bf00      	nop
 800b11c:	2400001c 	.word	0x2400001c

0800b120 <_kill_r>:
 800b120:	b538      	push	{r3, r4, r5, lr}
 800b122:	4d07      	ldr	r5, [pc, #28]	@ (800b140 <_kill_r+0x20>)
 800b124:	2300      	movs	r3, #0
 800b126:	4604      	mov	r4, r0
 800b128:	4608      	mov	r0, r1
 800b12a:	4611      	mov	r1, r2
 800b12c:	602b      	str	r3, [r5, #0]
 800b12e:	f7f7 fd16 	bl	8002b5e <_kill>
 800b132:	1c43      	adds	r3, r0, #1
 800b134:	d102      	bne.n	800b13c <_kill_r+0x1c>
 800b136:	682b      	ldr	r3, [r5, #0]
 800b138:	b103      	cbz	r3, 800b13c <_kill_r+0x1c>
 800b13a:	6023      	str	r3, [r4, #0]
 800b13c:	bd38      	pop	{r3, r4, r5, pc}
 800b13e:	bf00      	nop
 800b140:	240005b0 	.word	0x240005b0

0800b144 <_getpid_r>:
 800b144:	f7f7 bd03 	b.w	8002b4e <_getpid>

0800b148 <_init>:
 800b148:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b14a:	bf00      	nop
 800b14c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b14e:	bc08      	pop	{r3}
 800b150:	469e      	mov	lr, r3
 800b152:	4770      	bx	lr

0800b154 <_fini>:
 800b154:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b156:	bf00      	nop
 800b158:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b15a:	bc08      	pop	{r3}
 800b15c:	469e      	mov	lr, r3
 800b15e:	4770      	bx	lr
