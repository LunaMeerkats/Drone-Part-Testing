
Drone_Part_Testing.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000daf0  080002a0  080002a0  000012a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000980  0800dd90  0800dd90  0000ed90  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800e710  0800e710  0000f710  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800e718  0800e718  0000f718  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  0800e71c  0800e71c  0000f71c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         000001d8  24000000  0800e720  00010000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          0000045c  240001d8  0800e8f8  000101d8  2**3
                  ALLOC
  8 ._user_heap_stack 00000604  24000634  0800e8f8  00010634  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  000101d8  2**0
                  CONTENTS, READONLY
 10 .debug_info   0001870c  00000000  00000000  00010206  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00002ef4  00000000  00000000  00028912  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 000010b0  00000000  00000000  0002b808  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 00000d0d  00000000  00000000  0002c8b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00038fc1  00000000  00000000  0002d5c5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   000177c2  00000000  00000000  00066586  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0015ff1f  00000000  00000000  0007dd48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  001ddc67  2**0
                  CONTENTS, READONLY
 18 .debug_frame  000059bc  00000000  00000000  001ddcac  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 00000062  00000000  00000000  001e3668  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	@ (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	@ (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	@ (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	240001d8 	.word	0x240001d8
 80002bc:	00000000 	.word	0x00000000
 80002c0:	0800dd78 	.word	0x0800dd78

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	@ (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	@ (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	@ (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	240001dc 	.word	0x240001dc
 80002dc:	0800dd78 	.word	0x0800dd78

080002e0 <memchr>:
 80002e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002e4:	2a10      	cmp	r2, #16
 80002e6:	db2b      	blt.n	8000340 <memchr+0x60>
 80002e8:	f010 0f07 	tst.w	r0, #7
 80002ec:	d008      	beq.n	8000300 <memchr+0x20>
 80002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f2:	3a01      	subs	r2, #1
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d02d      	beq.n	8000354 <memchr+0x74>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	b342      	cbz	r2, 8000350 <memchr+0x70>
 80002fe:	d1f6      	bne.n	80002ee <memchr+0xe>
 8000300:	b4f0      	push	{r4, r5, r6, r7}
 8000302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800030a:	f022 0407 	bic.w	r4, r2, #7
 800030e:	f07f 0700 	mvns.w	r7, #0
 8000312:	2300      	movs	r3, #0
 8000314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000318:	3c08      	subs	r4, #8
 800031a:	ea85 0501 	eor.w	r5, r5, r1
 800031e:	ea86 0601 	eor.w	r6, r6, r1
 8000322:	fa85 f547 	uadd8	r5, r5, r7
 8000326:	faa3 f587 	sel	r5, r3, r7
 800032a:	fa86 f647 	uadd8	r6, r6, r7
 800032e:	faa5 f687 	sel	r6, r5, r7
 8000332:	b98e      	cbnz	r6, 8000358 <memchr+0x78>
 8000334:	d1ee      	bne.n	8000314 <memchr+0x34>
 8000336:	bcf0      	pop	{r4, r5, r6, r7}
 8000338:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800033c:	f002 0207 	and.w	r2, r2, #7
 8000340:	b132      	cbz	r2, 8000350 <memchr+0x70>
 8000342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000346:	3a01      	subs	r2, #1
 8000348:	ea83 0301 	eor.w	r3, r3, r1
 800034c:	b113      	cbz	r3, 8000354 <memchr+0x74>
 800034e:	d1f8      	bne.n	8000342 <memchr+0x62>
 8000350:	2000      	movs	r0, #0
 8000352:	4770      	bx	lr
 8000354:	3801      	subs	r0, #1
 8000356:	4770      	bx	lr
 8000358:	2d00      	cmp	r5, #0
 800035a:	bf06      	itte	eq
 800035c:	4635      	moveq	r5, r6
 800035e:	3803      	subeq	r0, #3
 8000360:	3807      	subne	r0, #7
 8000362:	f015 0f01 	tst.w	r5, #1
 8000366:	d107      	bne.n	8000378 <memchr+0x98>
 8000368:	3001      	adds	r0, #1
 800036a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800036e:	bf02      	ittt	eq
 8000370:	3001      	addeq	r0, #1
 8000372:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000376:	3001      	addeq	r0, #1
 8000378:	bcf0      	pop	{r4, r5, r6, r7}
 800037a:	3801      	subs	r0, #1
 800037c:	4770      	bx	lr
 800037e:	bf00      	nop

08000380 <strlen>:
 8000380:	4603      	mov	r3, r0
 8000382:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000386:	2a00      	cmp	r2, #0
 8000388:	d1fb      	bne.n	8000382 <strlen+0x2>
 800038a:	1a18      	subs	r0, r3, r0
 800038c:	3801      	subs	r0, #1
 800038e:	4770      	bx	lr

08000390 <__aeabi_drsub>:
 8000390:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000394:	e002      	b.n	800039c <__adddf3>
 8000396:	bf00      	nop

08000398 <__aeabi_dsub>:
 8000398:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800039c <__adddf3>:
 800039c:	b530      	push	{r4, r5, lr}
 800039e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80003a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80003a6:	ea94 0f05 	teq	r4, r5
 80003aa:	bf08      	it	eq
 80003ac:	ea90 0f02 	teqeq	r0, r2
 80003b0:	bf1f      	itttt	ne
 80003b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80003b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80003ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80003be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003c2:	f000 80e2 	beq.w	800058a <__adddf3+0x1ee>
 80003c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80003ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80003ce:	bfb8      	it	lt
 80003d0:	426d      	neglt	r5, r5
 80003d2:	dd0c      	ble.n	80003ee <__adddf3+0x52>
 80003d4:	442c      	add	r4, r5
 80003d6:	ea80 0202 	eor.w	r2, r0, r2
 80003da:	ea81 0303 	eor.w	r3, r1, r3
 80003de:	ea82 0000 	eor.w	r0, r2, r0
 80003e2:	ea83 0101 	eor.w	r1, r3, r1
 80003e6:	ea80 0202 	eor.w	r2, r0, r2
 80003ea:	ea81 0303 	eor.w	r3, r1, r3
 80003ee:	2d36      	cmp	r5, #54	@ 0x36
 80003f0:	bf88      	it	hi
 80003f2:	bd30      	pophi	{r4, r5, pc}
 80003f4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80003f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80003fc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000400:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000404:	d002      	beq.n	800040c <__adddf3+0x70>
 8000406:	4240      	negs	r0, r0
 8000408:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800040c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000410:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000414:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000418:	d002      	beq.n	8000420 <__adddf3+0x84>
 800041a:	4252      	negs	r2, r2
 800041c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000420:	ea94 0f05 	teq	r4, r5
 8000424:	f000 80a7 	beq.w	8000576 <__adddf3+0x1da>
 8000428:	f1a4 0401 	sub.w	r4, r4, #1
 800042c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000430:	db0d      	blt.n	800044e <__adddf3+0xb2>
 8000432:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000436:	fa22 f205 	lsr.w	r2, r2, r5
 800043a:	1880      	adds	r0, r0, r2
 800043c:	f141 0100 	adc.w	r1, r1, #0
 8000440:	fa03 f20e 	lsl.w	r2, r3, lr
 8000444:	1880      	adds	r0, r0, r2
 8000446:	fa43 f305 	asr.w	r3, r3, r5
 800044a:	4159      	adcs	r1, r3
 800044c:	e00e      	b.n	800046c <__adddf3+0xd0>
 800044e:	f1a5 0520 	sub.w	r5, r5, #32
 8000452:	f10e 0e20 	add.w	lr, lr, #32
 8000456:	2a01      	cmp	r2, #1
 8000458:	fa03 fc0e 	lsl.w	ip, r3, lr
 800045c:	bf28      	it	cs
 800045e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000462:	fa43 f305 	asr.w	r3, r3, r5
 8000466:	18c0      	adds	r0, r0, r3
 8000468:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800046c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000470:	d507      	bpl.n	8000482 <__adddf3+0xe6>
 8000472:	f04f 0e00 	mov.w	lr, #0
 8000476:	f1dc 0c00 	rsbs	ip, ip, #0
 800047a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800047e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000482:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000486:	d31b      	bcc.n	80004c0 <__adddf3+0x124>
 8000488:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800048c:	d30c      	bcc.n	80004a8 <__adddf3+0x10c>
 800048e:	0849      	lsrs	r1, r1, #1
 8000490:	ea5f 0030 	movs.w	r0, r0, rrx
 8000494:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000498:	f104 0401 	add.w	r4, r4, #1
 800049c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80004a0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80004a4:	f080 809a 	bcs.w	80005dc <__adddf3+0x240>
 80004a8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80004ac:	bf08      	it	eq
 80004ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80004b2:	f150 0000 	adcs.w	r0, r0, #0
 80004b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80004ba:	ea41 0105 	orr.w	r1, r1, r5
 80004be:	bd30      	pop	{r4, r5, pc}
 80004c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80004c4:	4140      	adcs	r0, r0
 80004c6:	eb41 0101 	adc.w	r1, r1, r1
 80004ca:	3c01      	subs	r4, #1
 80004cc:	bf28      	it	cs
 80004ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80004d2:	d2e9      	bcs.n	80004a8 <__adddf3+0x10c>
 80004d4:	f091 0f00 	teq	r1, #0
 80004d8:	bf04      	itt	eq
 80004da:	4601      	moveq	r1, r0
 80004dc:	2000      	moveq	r0, #0
 80004de:	fab1 f381 	clz	r3, r1
 80004e2:	bf08      	it	eq
 80004e4:	3320      	addeq	r3, #32
 80004e6:	f1a3 030b 	sub.w	r3, r3, #11
 80004ea:	f1b3 0220 	subs.w	r2, r3, #32
 80004ee:	da0c      	bge.n	800050a <__adddf3+0x16e>
 80004f0:	320c      	adds	r2, #12
 80004f2:	dd08      	ble.n	8000506 <__adddf3+0x16a>
 80004f4:	f102 0c14 	add.w	ip, r2, #20
 80004f8:	f1c2 020c 	rsb	r2, r2, #12
 80004fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000500:	fa21 f102 	lsr.w	r1, r1, r2
 8000504:	e00c      	b.n	8000520 <__adddf3+0x184>
 8000506:	f102 0214 	add.w	r2, r2, #20
 800050a:	bfd8      	it	le
 800050c:	f1c2 0c20 	rsble	ip, r2, #32
 8000510:	fa01 f102 	lsl.w	r1, r1, r2
 8000514:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000518:	bfdc      	itt	le
 800051a:	ea41 010c 	orrle.w	r1, r1, ip
 800051e:	4090      	lslle	r0, r2
 8000520:	1ae4      	subs	r4, r4, r3
 8000522:	bfa2      	ittt	ge
 8000524:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000528:	4329      	orrge	r1, r5
 800052a:	bd30      	popge	{r4, r5, pc}
 800052c:	ea6f 0404 	mvn.w	r4, r4
 8000530:	3c1f      	subs	r4, #31
 8000532:	da1c      	bge.n	800056e <__adddf3+0x1d2>
 8000534:	340c      	adds	r4, #12
 8000536:	dc0e      	bgt.n	8000556 <__adddf3+0x1ba>
 8000538:	f104 0414 	add.w	r4, r4, #20
 800053c:	f1c4 0220 	rsb	r2, r4, #32
 8000540:	fa20 f004 	lsr.w	r0, r0, r4
 8000544:	fa01 f302 	lsl.w	r3, r1, r2
 8000548:	ea40 0003 	orr.w	r0, r0, r3
 800054c:	fa21 f304 	lsr.w	r3, r1, r4
 8000550:	ea45 0103 	orr.w	r1, r5, r3
 8000554:	bd30      	pop	{r4, r5, pc}
 8000556:	f1c4 040c 	rsb	r4, r4, #12
 800055a:	f1c4 0220 	rsb	r2, r4, #32
 800055e:	fa20 f002 	lsr.w	r0, r0, r2
 8000562:	fa01 f304 	lsl.w	r3, r1, r4
 8000566:	ea40 0003 	orr.w	r0, r0, r3
 800056a:	4629      	mov	r1, r5
 800056c:	bd30      	pop	{r4, r5, pc}
 800056e:	fa21 f004 	lsr.w	r0, r1, r4
 8000572:	4629      	mov	r1, r5
 8000574:	bd30      	pop	{r4, r5, pc}
 8000576:	f094 0f00 	teq	r4, #0
 800057a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800057e:	bf06      	itte	eq
 8000580:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000584:	3401      	addeq	r4, #1
 8000586:	3d01      	subne	r5, #1
 8000588:	e74e      	b.n	8000428 <__adddf3+0x8c>
 800058a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800058e:	bf18      	it	ne
 8000590:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000594:	d029      	beq.n	80005ea <__adddf3+0x24e>
 8000596:	ea94 0f05 	teq	r4, r5
 800059a:	bf08      	it	eq
 800059c:	ea90 0f02 	teqeq	r0, r2
 80005a0:	d005      	beq.n	80005ae <__adddf3+0x212>
 80005a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80005a6:	bf04      	itt	eq
 80005a8:	4619      	moveq	r1, r3
 80005aa:	4610      	moveq	r0, r2
 80005ac:	bd30      	pop	{r4, r5, pc}
 80005ae:	ea91 0f03 	teq	r1, r3
 80005b2:	bf1e      	ittt	ne
 80005b4:	2100      	movne	r1, #0
 80005b6:	2000      	movne	r0, #0
 80005b8:	bd30      	popne	{r4, r5, pc}
 80005ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80005be:	d105      	bne.n	80005cc <__adddf3+0x230>
 80005c0:	0040      	lsls	r0, r0, #1
 80005c2:	4149      	adcs	r1, r1
 80005c4:	bf28      	it	cs
 80005c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80005ca:	bd30      	pop	{r4, r5, pc}
 80005cc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80005d0:	bf3c      	itt	cc
 80005d2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80005d6:	bd30      	popcc	{r4, r5, pc}
 80005d8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005dc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80005e0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80005e4:	f04f 0000 	mov.w	r0, #0
 80005e8:	bd30      	pop	{r4, r5, pc}
 80005ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80005ee:	bf1a      	itte	ne
 80005f0:	4619      	movne	r1, r3
 80005f2:	4610      	movne	r0, r2
 80005f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80005f8:	bf1c      	itt	ne
 80005fa:	460b      	movne	r3, r1
 80005fc:	4602      	movne	r2, r0
 80005fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000602:	bf06      	itte	eq
 8000604:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000608:	ea91 0f03 	teqeq	r1, r3
 800060c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000610:	bd30      	pop	{r4, r5, pc}
 8000612:	bf00      	nop

08000614 <__aeabi_ui2d>:
 8000614:	f090 0f00 	teq	r0, #0
 8000618:	bf04      	itt	eq
 800061a:	2100      	moveq	r1, #0
 800061c:	4770      	bxeq	lr
 800061e:	b530      	push	{r4, r5, lr}
 8000620:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000624:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000628:	f04f 0500 	mov.w	r5, #0
 800062c:	f04f 0100 	mov.w	r1, #0
 8000630:	e750      	b.n	80004d4 <__adddf3+0x138>
 8000632:	bf00      	nop

08000634 <__aeabi_i2d>:
 8000634:	f090 0f00 	teq	r0, #0
 8000638:	bf04      	itt	eq
 800063a:	2100      	moveq	r1, #0
 800063c:	4770      	bxeq	lr
 800063e:	b530      	push	{r4, r5, lr}
 8000640:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000644:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000648:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800064c:	bf48      	it	mi
 800064e:	4240      	negmi	r0, r0
 8000650:	f04f 0100 	mov.w	r1, #0
 8000654:	e73e      	b.n	80004d4 <__adddf3+0x138>
 8000656:	bf00      	nop

08000658 <__aeabi_f2d>:
 8000658:	0042      	lsls	r2, r0, #1
 800065a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800065e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000662:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000666:	bf1f      	itttt	ne
 8000668:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800066c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000670:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000674:	4770      	bxne	lr
 8000676:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800067a:	bf08      	it	eq
 800067c:	4770      	bxeq	lr
 800067e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000682:	bf04      	itt	eq
 8000684:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000688:	4770      	bxeq	lr
 800068a:	b530      	push	{r4, r5, lr}
 800068c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000690:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000694:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000698:	e71c      	b.n	80004d4 <__adddf3+0x138>
 800069a:	bf00      	nop

0800069c <__aeabi_ul2d>:
 800069c:	ea50 0201 	orrs.w	r2, r0, r1
 80006a0:	bf08      	it	eq
 80006a2:	4770      	bxeq	lr
 80006a4:	b530      	push	{r4, r5, lr}
 80006a6:	f04f 0500 	mov.w	r5, #0
 80006aa:	e00a      	b.n	80006c2 <__aeabi_l2d+0x16>

080006ac <__aeabi_l2d>:
 80006ac:	ea50 0201 	orrs.w	r2, r0, r1
 80006b0:	bf08      	it	eq
 80006b2:	4770      	bxeq	lr
 80006b4:	b530      	push	{r4, r5, lr}
 80006b6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80006ba:	d502      	bpl.n	80006c2 <__aeabi_l2d+0x16>
 80006bc:	4240      	negs	r0, r0
 80006be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80006c2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80006c6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80006ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80006ce:	f43f aed8 	beq.w	8000482 <__adddf3+0xe6>
 80006d2:	f04f 0203 	mov.w	r2, #3
 80006d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006da:	bf18      	it	ne
 80006dc:	3203      	addne	r2, #3
 80006de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006e2:	bf18      	it	ne
 80006e4:	3203      	addne	r2, #3
 80006e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80006ea:	f1c2 0320 	rsb	r3, r2, #32
 80006ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80006f2:	fa20 f002 	lsr.w	r0, r0, r2
 80006f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80006fa:	ea40 000e 	orr.w	r0, r0, lr
 80006fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000702:	4414      	add	r4, r2
 8000704:	e6bd      	b.n	8000482 <__adddf3+0xe6>
 8000706:	bf00      	nop

08000708 <__aeabi_uldivmod>:
 8000708:	b953      	cbnz	r3, 8000720 <__aeabi_uldivmod+0x18>
 800070a:	b94a      	cbnz	r2, 8000720 <__aeabi_uldivmod+0x18>
 800070c:	2900      	cmp	r1, #0
 800070e:	bf08      	it	eq
 8000710:	2800      	cmpeq	r0, #0
 8000712:	bf1c      	itt	ne
 8000714:	f04f 31ff 	movne.w	r1, #4294967295
 8000718:	f04f 30ff 	movne.w	r0, #4294967295
 800071c:	f000 b9c0 	b.w	8000aa0 <__aeabi_idiv0>
 8000720:	f1ad 0c08 	sub.w	ip, sp, #8
 8000724:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000728:	f000 f83e 	bl	80007a8 <__udivmoddi4>
 800072c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000730:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000734:	b004      	add	sp, #16
 8000736:	4770      	bx	lr

08000738 <__aeabi_d2lz>:
 8000738:	b508      	push	{r3, lr}
 800073a:	4602      	mov	r2, r0
 800073c:	460b      	mov	r3, r1
 800073e:	ec43 2b17 	vmov	d7, r2, r3
 8000742:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8000746:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800074a:	d403      	bmi.n	8000754 <__aeabi_d2lz+0x1c>
 800074c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8000750:	f000 b80a 	b.w	8000768 <__aeabi_d2ulz>
 8000754:	eeb1 7b47 	vneg.f64	d7, d7
 8000758:	ec51 0b17 	vmov	r0, r1, d7
 800075c:	f000 f804 	bl	8000768 <__aeabi_d2ulz>
 8000760:	4240      	negs	r0, r0
 8000762:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000766:	bd08      	pop	{r3, pc}

08000768 <__aeabi_d2ulz>:
 8000768:	ed9f 6b0b 	vldr	d6, [pc, #44]	@ 8000798 <__aeabi_d2ulz+0x30>
 800076c:	ec41 0b17 	vmov	d7, r0, r1
 8000770:	ed9f 5b0b 	vldr	d5, [pc, #44]	@ 80007a0 <__aeabi_d2ulz+0x38>
 8000774:	ee27 6b06 	vmul.f64	d6, d7, d6
 8000778:	eebc 6bc6 	vcvt.u32.f64	s12, d6
 800077c:	eeb8 4b46 	vcvt.f64.u32	d4, s12
 8000780:	eea4 7b45 	vfms.f64	d7, d4, d5
 8000784:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8000788:	ee16 1a10 	vmov	r1, s12
 800078c:	ee17 0a90 	vmov	r0, s15
 8000790:	4770      	bx	lr
 8000792:	bf00      	nop
 8000794:	f3af 8000 	nop.w
 8000798:	00000000 	.word	0x00000000
 800079c:	3df00000 	.word	0x3df00000
 80007a0:	00000000 	.word	0x00000000
 80007a4:	41f00000 	.word	0x41f00000

080007a8 <__udivmoddi4>:
 80007a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80007ac:	9d08      	ldr	r5, [sp, #32]
 80007ae:	468e      	mov	lr, r1
 80007b0:	4604      	mov	r4, r0
 80007b2:	4688      	mov	r8, r1
 80007b4:	2b00      	cmp	r3, #0
 80007b6:	d14a      	bne.n	800084e <__udivmoddi4+0xa6>
 80007b8:	428a      	cmp	r2, r1
 80007ba:	4617      	mov	r7, r2
 80007bc:	d962      	bls.n	8000884 <__udivmoddi4+0xdc>
 80007be:	fab2 f682 	clz	r6, r2
 80007c2:	b14e      	cbz	r6, 80007d8 <__udivmoddi4+0x30>
 80007c4:	f1c6 0320 	rsb	r3, r6, #32
 80007c8:	fa01 f806 	lsl.w	r8, r1, r6
 80007cc:	fa20 f303 	lsr.w	r3, r0, r3
 80007d0:	40b7      	lsls	r7, r6
 80007d2:	ea43 0808 	orr.w	r8, r3, r8
 80007d6:	40b4      	lsls	r4, r6
 80007d8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80007dc:	fa1f fc87 	uxth.w	ip, r7
 80007e0:	fbb8 f1fe 	udiv	r1, r8, lr
 80007e4:	0c23      	lsrs	r3, r4, #16
 80007e6:	fb0e 8811 	mls	r8, lr, r1, r8
 80007ea:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80007ee:	fb01 f20c 	mul.w	r2, r1, ip
 80007f2:	429a      	cmp	r2, r3
 80007f4:	d909      	bls.n	800080a <__udivmoddi4+0x62>
 80007f6:	18fb      	adds	r3, r7, r3
 80007f8:	f101 30ff 	add.w	r0, r1, #4294967295
 80007fc:	f080 80ea 	bcs.w	80009d4 <__udivmoddi4+0x22c>
 8000800:	429a      	cmp	r2, r3
 8000802:	f240 80e7 	bls.w	80009d4 <__udivmoddi4+0x22c>
 8000806:	3902      	subs	r1, #2
 8000808:	443b      	add	r3, r7
 800080a:	1a9a      	subs	r2, r3, r2
 800080c:	b2a3      	uxth	r3, r4
 800080e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000812:	fb0e 2210 	mls	r2, lr, r0, r2
 8000816:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800081a:	fb00 fc0c 	mul.w	ip, r0, ip
 800081e:	459c      	cmp	ip, r3
 8000820:	d909      	bls.n	8000836 <__udivmoddi4+0x8e>
 8000822:	18fb      	adds	r3, r7, r3
 8000824:	f100 32ff 	add.w	r2, r0, #4294967295
 8000828:	f080 80d6 	bcs.w	80009d8 <__udivmoddi4+0x230>
 800082c:	459c      	cmp	ip, r3
 800082e:	f240 80d3 	bls.w	80009d8 <__udivmoddi4+0x230>
 8000832:	443b      	add	r3, r7
 8000834:	3802      	subs	r0, #2
 8000836:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800083a:	eba3 030c 	sub.w	r3, r3, ip
 800083e:	2100      	movs	r1, #0
 8000840:	b11d      	cbz	r5, 800084a <__udivmoddi4+0xa2>
 8000842:	40f3      	lsrs	r3, r6
 8000844:	2200      	movs	r2, #0
 8000846:	e9c5 3200 	strd	r3, r2, [r5]
 800084a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800084e:	428b      	cmp	r3, r1
 8000850:	d905      	bls.n	800085e <__udivmoddi4+0xb6>
 8000852:	b10d      	cbz	r5, 8000858 <__udivmoddi4+0xb0>
 8000854:	e9c5 0100 	strd	r0, r1, [r5]
 8000858:	2100      	movs	r1, #0
 800085a:	4608      	mov	r0, r1
 800085c:	e7f5      	b.n	800084a <__udivmoddi4+0xa2>
 800085e:	fab3 f183 	clz	r1, r3
 8000862:	2900      	cmp	r1, #0
 8000864:	d146      	bne.n	80008f4 <__udivmoddi4+0x14c>
 8000866:	4573      	cmp	r3, lr
 8000868:	d302      	bcc.n	8000870 <__udivmoddi4+0xc8>
 800086a:	4282      	cmp	r2, r0
 800086c:	f200 8105 	bhi.w	8000a7a <__udivmoddi4+0x2d2>
 8000870:	1a84      	subs	r4, r0, r2
 8000872:	eb6e 0203 	sbc.w	r2, lr, r3
 8000876:	2001      	movs	r0, #1
 8000878:	4690      	mov	r8, r2
 800087a:	2d00      	cmp	r5, #0
 800087c:	d0e5      	beq.n	800084a <__udivmoddi4+0xa2>
 800087e:	e9c5 4800 	strd	r4, r8, [r5]
 8000882:	e7e2      	b.n	800084a <__udivmoddi4+0xa2>
 8000884:	2a00      	cmp	r2, #0
 8000886:	f000 8090 	beq.w	80009aa <__udivmoddi4+0x202>
 800088a:	fab2 f682 	clz	r6, r2
 800088e:	2e00      	cmp	r6, #0
 8000890:	f040 80a4 	bne.w	80009dc <__udivmoddi4+0x234>
 8000894:	1a8a      	subs	r2, r1, r2
 8000896:	0c03      	lsrs	r3, r0, #16
 8000898:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800089c:	b280      	uxth	r0, r0
 800089e:	b2bc      	uxth	r4, r7
 80008a0:	2101      	movs	r1, #1
 80008a2:	fbb2 fcfe 	udiv	ip, r2, lr
 80008a6:	fb0e 221c 	mls	r2, lr, ip, r2
 80008aa:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80008ae:	fb04 f20c 	mul.w	r2, r4, ip
 80008b2:	429a      	cmp	r2, r3
 80008b4:	d907      	bls.n	80008c6 <__udivmoddi4+0x11e>
 80008b6:	18fb      	adds	r3, r7, r3
 80008b8:	f10c 38ff 	add.w	r8, ip, #4294967295
 80008bc:	d202      	bcs.n	80008c4 <__udivmoddi4+0x11c>
 80008be:	429a      	cmp	r2, r3
 80008c0:	f200 80e0 	bhi.w	8000a84 <__udivmoddi4+0x2dc>
 80008c4:	46c4      	mov	ip, r8
 80008c6:	1a9b      	subs	r3, r3, r2
 80008c8:	fbb3 f2fe 	udiv	r2, r3, lr
 80008cc:	fb0e 3312 	mls	r3, lr, r2, r3
 80008d0:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80008d4:	fb02 f404 	mul.w	r4, r2, r4
 80008d8:	429c      	cmp	r4, r3
 80008da:	d907      	bls.n	80008ec <__udivmoddi4+0x144>
 80008dc:	18fb      	adds	r3, r7, r3
 80008de:	f102 30ff 	add.w	r0, r2, #4294967295
 80008e2:	d202      	bcs.n	80008ea <__udivmoddi4+0x142>
 80008e4:	429c      	cmp	r4, r3
 80008e6:	f200 80ca 	bhi.w	8000a7e <__udivmoddi4+0x2d6>
 80008ea:	4602      	mov	r2, r0
 80008ec:	1b1b      	subs	r3, r3, r4
 80008ee:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 80008f2:	e7a5      	b.n	8000840 <__udivmoddi4+0x98>
 80008f4:	f1c1 0620 	rsb	r6, r1, #32
 80008f8:	408b      	lsls	r3, r1
 80008fa:	fa22 f706 	lsr.w	r7, r2, r6
 80008fe:	431f      	orrs	r7, r3
 8000900:	fa0e f401 	lsl.w	r4, lr, r1
 8000904:	fa20 f306 	lsr.w	r3, r0, r6
 8000908:	fa2e fe06 	lsr.w	lr, lr, r6
 800090c:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000910:	4323      	orrs	r3, r4
 8000912:	fa00 f801 	lsl.w	r8, r0, r1
 8000916:	fa1f fc87 	uxth.w	ip, r7
 800091a:	fbbe f0f9 	udiv	r0, lr, r9
 800091e:	0c1c      	lsrs	r4, r3, #16
 8000920:	fb09 ee10 	mls	lr, r9, r0, lr
 8000924:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000928:	fb00 fe0c 	mul.w	lr, r0, ip
 800092c:	45a6      	cmp	lr, r4
 800092e:	fa02 f201 	lsl.w	r2, r2, r1
 8000932:	d909      	bls.n	8000948 <__udivmoddi4+0x1a0>
 8000934:	193c      	adds	r4, r7, r4
 8000936:	f100 3aff 	add.w	sl, r0, #4294967295
 800093a:	f080 809c 	bcs.w	8000a76 <__udivmoddi4+0x2ce>
 800093e:	45a6      	cmp	lr, r4
 8000940:	f240 8099 	bls.w	8000a76 <__udivmoddi4+0x2ce>
 8000944:	3802      	subs	r0, #2
 8000946:	443c      	add	r4, r7
 8000948:	eba4 040e 	sub.w	r4, r4, lr
 800094c:	fa1f fe83 	uxth.w	lr, r3
 8000950:	fbb4 f3f9 	udiv	r3, r4, r9
 8000954:	fb09 4413 	mls	r4, r9, r3, r4
 8000958:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 800095c:	fb03 fc0c 	mul.w	ip, r3, ip
 8000960:	45a4      	cmp	ip, r4
 8000962:	d908      	bls.n	8000976 <__udivmoddi4+0x1ce>
 8000964:	193c      	adds	r4, r7, r4
 8000966:	f103 3eff 	add.w	lr, r3, #4294967295
 800096a:	f080 8082 	bcs.w	8000a72 <__udivmoddi4+0x2ca>
 800096e:	45a4      	cmp	ip, r4
 8000970:	d97f      	bls.n	8000a72 <__udivmoddi4+0x2ca>
 8000972:	3b02      	subs	r3, #2
 8000974:	443c      	add	r4, r7
 8000976:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 800097a:	eba4 040c 	sub.w	r4, r4, ip
 800097e:	fba0 ec02 	umull	lr, ip, r0, r2
 8000982:	4564      	cmp	r4, ip
 8000984:	4673      	mov	r3, lr
 8000986:	46e1      	mov	r9, ip
 8000988:	d362      	bcc.n	8000a50 <__udivmoddi4+0x2a8>
 800098a:	d05f      	beq.n	8000a4c <__udivmoddi4+0x2a4>
 800098c:	b15d      	cbz	r5, 80009a6 <__udivmoddi4+0x1fe>
 800098e:	ebb8 0203 	subs.w	r2, r8, r3
 8000992:	eb64 0409 	sbc.w	r4, r4, r9
 8000996:	fa04 f606 	lsl.w	r6, r4, r6
 800099a:	fa22 f301 	lsr.w	r3, r2, r1
 800099e:	431e      	orrs	r6, r3
 80009a0:	40cc      	lsrs	r4, r1
 80009a2:	e9c5 6400 	strd	r6, r4, [r5]
 80009a6:	2100      	movs	r1, #0
 80009a8:	e74f      	b.n	800084a <__udivmoddi4+0xa2>
 80009aa:	fbb1 fcf2 	udiv	ip, r1, r2
 80009ae:	0c01      	lsrs	r1, r0, #16
 80009b0:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80009b4:	b280      	uxth	r0, r0
 80009b6:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80009ba:	463b      	mov	r3, r7
 80009bc:	4638      	mov	r0, r7
 80009be:	463c      	mov	r4, r7
 80009c0:	46b8      	mov	r8, r7
 80009c2:	46be      	mov	lr, r7
 80009c4:	2620      	movs	r6, #32
 80009c6:	fbb1 f1f7 	udiv	r1, r1, r7
 80009ca:	eba2 0208 	sub.w	r2, r2, r8
 80009ce:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80009d2:	e766      	b.n	80008a2 <__udivmoddi4+0xfa>
 80009d4:	4601      	mov	r1, r0
 80009d6:	e718      	b.n	800080a <__udivmoddi4+0x62>
 80009d8:	4610      	mov	r0, r2
 80009da:	e72c      	b.n	8000836 <__udivmoddi4+0x8e>
 80009dc:	f1c6 0220 	rsb	r2, r6, #32
 80009e0:	fa2e f302 	lsr.w	r3, lr, r2
 80009e4:	40b7      	lsls	r7, r6
 80009e6:	40b1      	lsls	r1, r6
 80009e8:	fa20 f202 	lsr.w	r2, r0, r2
 80009ec:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80009f0:	430a      	orrs	r2, r1
 80009f2:	fbb3 f8fe 	udiv	r8, r3, lr
 80009f6:	b2bc      	uxth	r4, r7
 80009f8:	fb0e 3318 	mls	r3, lr, r8, r3
 80009fc:	0c11      	lsrs	r1, r2, #16
 80009fe:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000a02:	fb08 f904 	mul.w	r9, r8, r4
 8000a06:	40b0      	lsls	r0, r6
 8000a08:	4589      	cmp	r9, r1
 8000a0a:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000a0e:	b280      	uxth	r0, r0
 8000a10:	d93e      	bls.n	8000a90 <__udivmoddi4+0x2e8>
 8000a12:	1879      	adds	r1, r7, r1
 8000a14:	f108 3cff 	add.w	ip, r8, #4294967295
 8000a18:	d201      	bcs.n	8000a1e <__udivmoddi4+0x276>
 8000a1a:	4589      	cmp	r9, r1
 8000a1c:	d81f      	bhi.n	8000a5e <__udivmoddi4+0x2b6>
 8000a1e:	eba1 0109 	sub.w	r1, r1, r9
 8000a22:	fbb1 f9fe 	udiv	r9, r1, lr
 8000a26:	fb09 f804 	mul.w	r8, r9, r4
 8000a2a:	fb0e 1119 	mls	r1, lr, r9, r1
 8000a2e:	b292      	uxth	r2, r2
 8000a30:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000a34:	4542      	cmp	r2, r8
 8000a36:	d229      	bcs.n	8000a8c <__udivmoddi4+0x2e4>
 8000a38:	18ba      	adds	r2, r7, r2
 8000a3a:	f109 31ff 	add.w	r1, r9, #4294967295
 8000a3e:	d2c4      	bcs.n	80009ca <__udivmoddi4+0x222>
 8000a40:	4542      	cmp	r2, r8
 8000a42:	d2c2      	bcs.n	80009ca <__udivmoddi4+0x222>
 8000a44:	f1a9 0102 	sub.w	r1, r9, #2
 8000a48:	443a      	add	r2, r7
 8000a4a:	e7be      	b.n	80009ca <__udivmoddi4+0x222>
 8000a4c:	45f0      	cmp	r8, lr
 8000a4e:	d29d      	bcs.n	800098c <__udivmoddi4+0x1e4>
 8000a50:	ebbe 0302 	subs.w	r3, lr, r2
 8000a54:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000a58:	3801      	subs	r0, #1
 8000a5a:	46e1      	mov	r9, ip
 8000a5c:	e796      	b.n	800098c <__udivmoddi4+0x1e4>
 8000a5e:	eba7 0909 	sub.w	r9, r7, r9
 8000a62:	4449      	add	r1, r9
 8000a64:	f1a8 0c02 	sub.w	ip, r8, #2
 8000a68:	fbb1 f9fe 	udiv	r9, r1, lr
 8000a6c:	fb09 f804 	mul.w	r8, r9, r4
 8000a70:	e7db      	b.n	8000a2a <__udivmoddi4+0x282>
 8000a72:	4673      	mov	r3, lr
 8000a74:	e77f      	b.n	8000976 <__udivmoddi4+0x1ce>
 8000a76:	4650      	mov	r0, sl
 8000a78:	e766      	b.n	8000948 <__udivmoddi4+0x1a0>
 8000a7a:	4608      	mov	r0, r1
 8000a7c:	e6fd      	b.n	800087a <__udivmoddi4+0xd2>
 8000a7e:	443b      	add	r3, r7
 8000a80:	3a02      	subs	r2, #2
 8000a82:	e733      	b.n	80008ec <__udivmoddi4+0x144>
 8000a84:	f1ac 0c02 	sub.w	ip, ip, #2
 8000a88:	443b      	add	r3, r7
 8000a8a:	e71c      	b.n	80008c6 <__udivmoddi4+0x11e>
 8000a8c:	4649      	mov	r1, r9
 8000a8e:	e79c      	b.n	80009ca <__udivmoddi4+0x222>
 8000a90:	eba1 0109 	sub.w	r1, r1, r9
 8000a94:	46c4      	mov	ip, r8
 8000a96:	fbb1 f9fe 	udiv	r9, r1, lr
 8000a9a:	fb09 f804 	mul.w	r8, r9, r4
 8000a9e:	e7c4      	b.n	8000a2a <__udivmoddi4+0x282>

08000aa0 <__aeabi_idiv0>:
 8000aa0:	4770      	bx	lr
 8000aa2:	bf00      	nop

08000aa4 <dps_probe>:
static inline float   dps_osr_scale(uint8_t osr_code);
static dps310_t* getSelfStatePointer(sensor_if_t *self);

/* ---- vtable ops (minimal) ---- */
static HAL_StatusTypeDef dps_probe(sensor_if_t *self)
{
 8000aa4:	b580      	push	{r7, lr}
 8000aa6:	b088      	sub	sp, #32
 8000aa8:	af04      	add	r7, sp, #16
 8000aaa:	6078      	str	r0, [r7, #4]
	dps310_t *s = (dps310_t*)self->state;
 8000aac:	687b      	ldr	r3, [r7, #4]
 8000aae:	685b      	ldr	r3, [r3, #4]
 8000ab0:	60fb      	str	r3, [r7, #12]
	if (!s) return HAL_ERROR;
 8000ab2:	68fb      	ldr	r3, [r7, #12]
 8000ab4:	2b00      	cmp	r3, #0
 8000ab6:	d101      	bne.n	8000abc <dps_probe+0x18>
 8000ab8:	2301      	movs	r3, #1
 8000aba:	e022      	b.n	8000b02 <dps_probe+0x5e>

	uint8_t id = 0;
 8000abc:	2300      	movs	r3, #0
 8000abe:	72bb      	strb	r3, [r7, #10]
	HAL_StatusTypeDef st = HAL_I2C_Mem_Read(s->i2c, s->addr7 << 1,
 8000ac0:	68fb      	ldr	r3, [r7, #12]
 8000ac2:	6818      	ldr	r0, [r3, #0]
 8000ac4:	68fb      	ldr	r3, [r7, #12]
 8000ac6:	791b      	ldrb	r3, [r3, #4]
 8000ac8:	005b      	lsls	r3, r3, #1
 8000aca:	b299      	uxth	r1, r3
 8000acc:	23c8      	movs	r3, #200	@ 0xc8
 8000ace:	9302      	str	r3, [sp, #8]
 8000ad0:	2301      	movs	r3, #1
 8000ad2:	9301      	str	r3, [sp, #4]
 8000ad4:	f107 030a 	add.w	r3, r7, #10
 8000ad8:	9300      	str	r3, [sp, #0]
 8000ada:	2301      	movs	r3, #1
 8000adc:	220d      	movs	r2, #13
 8000ade:	f004 fa6b 	bl	8004fb8 <HAL_I2C_Mem_Read>
 8000ae2:	4603      	mov	r3, r0
 8000ae4:	72fb      	strb	r3, [r7, #11]
			DPS_ID_REG, I2C_MEMADD_SIZE_8BIT,
			&id, 1, 200);
	if (st != HAL_OK) return st;
 8000ae6:	7afb      	ldrb	r3, [r7, #11]
 8000ae8:	2b00      	cmp	r3, #0
 8000aea:	d001      	beq.n	8000af0 <dps_probe+0x4c>
 8000aec:	7afb      	ldrb	r3, [r7, #11]
 8000aee:	e008      	b.n	8000b02 <dps_probe+0x5e>

	s->last_whoami = id;
 8000af0:	7aba      	ldrb	r2, [r7, #10]
 8000af2:	68fb      	ldr	r3, [r7, #12]
 8000af4:	731a      	strb	r2, [r3, #12]
	return (id == DPS_WHOAMI_EXPECT) ? HAL_OK : HAL_ERROR;
 8000af6:	7abb      	ldrb	r3, [r7, #10]
 8000af8:	2b10      	cmp	r3, #16
 8000afa:	bf14      	ite	ne
 8000afc:	2301      	movne	r3, #1
 8000afe:	2300      	moveq	r3, #0
 8000b00:	b2db      	uxtb	r3, r3
}
 8000b02:	4618      	mov	r0, r3
 8000b04:	3710      	adds	r7, #16
 8000b06:	46bd      	mov	sp, r7
 8000b08:	bd80      	pop	{r7, pc}

08000b0a <dps_init>:

static HAL_StatusTypeDef dps_init(sensor_if_t *self)
{
 8000b0a:	b580      	push	{r7, lr}
 8000b0c:	b084      	sub	sp, #16
 8000b0e:	af00      	add	r7, sp, #0
 8000b10:	6078      	str	r0, [r7, #4]
	dps310_t *s = getSelfStatePointer(self);
 8000b12:	6878      	ldr	r0, [r7, #4]
 8000b14:	f000 fe2e 	bl	8001774 <getSelfStatePointer>
 8000b18:	60f8      	str	r0, [r7, #12]

	HAL_StatusTypeDef response;

	//TODO: If this is 8 or higher, a bit shift needs to be applied. Check the docs.
	const uint8_t pressure_oversampling_rate = 6;
 8000b1a:	2306      	movs	r3, #6
 8000b1c:	72fb      	strb	r3, [r7, #11]

	response = dsp_soft_reset(s);
 8000b1e:	68f8      	ldr	r0, [r7, #12]
 8000b20:	f000 fb11 	bl	8001146 <dsp_soft_reset>
 8000b24:	4603      	mov	r3, r0
 8000b26:	72bb      	strb	r3, [r7, #10]
	if(response != HAL_OK){
 8000b28:	7abb      	ldrb	r3, [r7, #10]
 8000b2a:	2b00      	cmp	r3, #0
 8000b2c:	d004      	beq.n	8000b38 <dps_init+0x2e>
		s->last_err = DPS_ERR_NOT_INITIALIZED;
 8000b2e:	68fb      	ldr	r3, [r7, #12]
 8000b30:	2205      	movs	r2, #5
 8000b32:	715a      	strb	r2, [r3, #5]
		return HAL_ERROR;
 8000b34:	2301      	movs	r3, #1
 8000b36:	e063      	b.n	8000c00 <dps_init+0xf6>
	}

	HAL_Delay(500);
 8000b38:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000b3c:	f003 fd1c 	bl	8004578 <HAL_Delay>

	response = dsp_pressure_configuration(s, 6, pressure_oversampling_rate);
 8000b40:	7afb      	ldrb	r3, [r7, #11]
 8000b42:	461a      	mov	r2, r3
 8000b44:	2106      	movs	r1, #6
 8000b46:	68f8      	ldr	r0, [r7, #12]
 8000b48:	f000 f8f0 	bl	8000d2c <dsp_pressure_configuration>
 8000b4c:	4603      	mov	r3, r0
 8000b4e:	72bb      	strb	r3, [r7, #10]
	if(response != HAL_OK){
 8000b50:	7abb      	ldrb	r3, [r7, #10]
 8000b52:	2b00      	cmp	r3, #0
 8000b54:	d004      	beq.n	8000b60 <dps_init+0x56>
		s->last_err = DPS_ERR_NOT_INITIALIZED;
 8000b56:	68fb      	ldr	r3, [r7, #12]
 8000b58:	2205      	movs	r2, #5
 8000b5a:	715a      	strb	r2, [r3, #5]
		return response;
 8000b5c:	7abb      	ldrb	r3, [r7, #10]
 8000b5e:	e04f      	b.n	8000c00 <dps_init+0xf6>
	}

	HAL_Delay(500);
 8000b60:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000b64:	f003 fd08 	bl	8004578 <HAL_Delay>

	response = dsp_temperature_configuration(s, 1, 6, 6);
 8000b68:	2306      	movs	r3, #6
 8000b6a:	2206      	movs	r2, #6
 8000b6c:	2101      	movs	r1, #1
 8000b6e:	68f8      	ldr	r0, [r7, #12]
 8000b70:	f000 f957 	bl	8000e22 <dsp_temperature_configuration>
 8000b74:	4603      	mov	r3, r0
 8000b76:	72bb      	strb	r3, [r7, #10]
	if(response != HAL_OK){
 8000b78:	7abb      	ldrb	r3, [r7, #10]
 8000b7a:	2b00      	cmp	r3, #0
 8000b7c:	d004      	beq.n	8000b88 <dps_init+0x7e>
		s->last_err = DPS_ERR_NOT_INITIALIZED;
 8000b7e:	68fb      	ldr	r3, [r7, #12]
 8000b80:	2205      	movs	r2, #5
 8000b82:	715a      	strb	r2, [r3, #5]
		return response;
 8000b84:	7abb      	ldrb	r3, [r7, #10]
 8000b86:	e03b      	b.n	8000c00 <dps_init+0xf6>
	}

	HAL_Delay(500);
 8000b88:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000b8c:	f003 fcf4 	bl	8004578 <HAL_Delay>

	response = dsp_fifo_config(s);
 8000b90:	68f8      	ldr	r0, [r7, #12]
 8000b92:	f000 f9c9 	bl	8000f28 <dsp_fifo_config>
 8000b96:	4603      	mov	r3, r0
 8000b98:	72bb      	strb	r3, [r7, #10]
	if(response != HAL_OK){
 8000b9a:	7abb      	ldrb	r3, [r7, #10]
 8000b9c:	2b00      	cmp	r3, #0
 8000b9e:	d004      	beq.n	8000baa <dps_init+0xa0>
		s->last_err = DPS_ERR_NOT_INITIALIZED;
 8000ba0:	68fb      	ldr	r3, [r7, #12]
 8000ba2:	2205      	movs	r2, #5
 8000ba4:	715a      	strb	r2, [r3, #5]
		return HAL_ERROR;
 8000ba6:	2301      	movs	r3, #1
 8000ba8:	e02a      	b.n	8000c00 <dps_init+0xf6>
	}

	HAL_Delay(500);
 8000baa:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000bae:	f003 fce3 	bl	8004578 <HAL_Delay>

	response = dsp_status_configuration(s, 7);
 8000bb2:	2107      	movs	r1, #7
 8000bb4:	68f8      	ldr	r0, [r7, #12]
 8000bb6:	f000 fa4b 	bl	8001050 <dsp_status_configuration>
 8000bba:	4603      	mov	r3, r0
 8000bbc:	72bb      	strb	r3, [r7, #10]
	if(response != HAL_OK){
 8000bbe:	7abb      	ldrb	r3, [r7, #10]
 8000bc0:	2b00      	cmp	r3, #0
 8000bc2:	d004      	beq.n	8000bce <dps_init+0xc4>
		s->last_err = DPS_ERR_NOT_INITIALIZED;
 8000bc4:	68fb      	ldr	r3, [r7, #12]
 8000bc6:	2205      	movs	r2, #5
 8000bc8:	715a      	strb	r2, [r3, #5]
		return response;
 8000bca:	7abb      	ldrb	r3, [r7, #10]
 8000bcc:	e018      	b.n	8000c00 <dps_init+0xf6>
	}

	HAL_Delay(500);
 8000bce:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000bd2:	f003 fcd1 	bl	8004578 <HAL_Delay>

	response = dsp_read_coefficients(s);
 8000bd6:	68f8      	ldr	r0, [r7, #12]
 8000bd8:	f000 fad6 	bl	8001188 <dsp_read_coefficients>
 8000bdc:	4603      	mov	r3, r0
 8000bde:	72bb      	strb	r3, [r7, #10]
	if(response != HAL_OK){
 8000be0:	7abb      	ldrb	r3, [r7, #10]
 8000be2:	2b00      	cmp	r3, #0
 8000be4:	d004      	beq.n	8000bf0 <dps_init+0xe6>
		s->last_err = DPS_ERR_NOT_INITIALIZED;
 8000be6:	68fb      	ldr	r3, [r7, #12]
 8000be8:	2205      	movs	r2, #5
 8000bea:	715a      	strb	r2, [r3, #5]
		return response;
 8000bec:	7abb      	ldrb	r3, [r7, #10]
 8000bee:	e007      	b.n	8000c00 <dps_init+0xf6>
	}

	HAL_Delay(500);
 8000bf0:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000bf4:	f003 fcc0 	bl	8004578 <HAL_Delay>

	s->last_err = DPS_OK;
 8000bf8:	68fb      	ldr	r3, [r7, #12]
 8000bfa:	2200      	movs	r2, #0
 8000bfc:	715a      	strb	r2, [r3, #5]
	return HAL_OK;
 8000bfe:	2300      	movs	r3, #0
}
 8000c00:	4618      	mov	r0, r3
 8000c02:	3710      	adds	r7, #16
 8000c04:	46bd      	mov	sp, r7
 8000c06:	bd80      	pop	{r7, pc}

08000c08 <dps_read>:

static HAL_StatusTypeDef dps_read(sensor_if_t *self)
{
 8000c08:	b580      	push	{r7, lr}
 8000c0a:	b084      	sub	sp, #16
 8000c0c:	af00      	add	r7, sp, #0
 8000c0e:	6078      	str	r0, [r7, #4]
	dps310_t *s = getSelfStatePointer(self);
 8000c10:	6878      	ldr	r0, [r7, #4]
 8000c12:	f000 fdaf 	bl	8001774 <getSelfStatePointer>
 8000c16:	60f8      	str	r0, [r7, #12]

	HAL_StatusTypeDef response;

	response = dsp_read_pressure_raw(s);
 8000c18:	68f8      	ldr	r0, [r7, #12]
 8000c1a:	f000 fc9b 	bl	8001554 <dsp_read_pressure_raw>
 8000c1e:	4603      	mov	r3, r0
 8000c20:	72fb      	strb	r3, [r7, #11]
	if(response != HAL_OK){
 8000c22:	7afb      	ldrb	r3, [r7, #11]
 8000c24:	2b00      	cmp	r3, #0
 8000c26:	d004      	beq.n	8000c32 <dps_read+0x2a>
		s->last_err = DPS_ERR_NOT_INITIALIZED;
 8000c28:	68fb      	ldr	r3, [r7, #12]
 8000c2a:	2205      	movs	r2, #5
 8000c2c:	715a      	strb	r2, [r3, #5]
		return HAL_ERROR;
 8000c2e:	2301      	movs	r3, #1
 8000c30:	e037      	b.n	8000ca2 <dps_read+0x9a>
	}

	response = dsp_read_temperature_raw(s);  // fill self->temperature_raw   (sign-extended 24-bit, as float)
 8000c32:	68f8      	ldr	r0, [r7, #12]
 8000c34:	f000 fcd9 	bl	80015ea <dsp_read_temperature_raw>
 8000c38:	4603      	mov	r3, r0
 8000c3a:	72fb      	strb	r3, [r7, #11]
	if(response != HAL_OK){
 8000c3c:	7afb      	ldrb	r3, [r7, #11]
 8000c3e:	2b00      	cmp	r3, #0
 8000c40:	d004      	beq.n	8000c4c <dps_read+0x44>
		s->last_err = DPS_ERR_NOT_INITIALIZED;
 8000c42:	68fb      	ldr	r3, [r7, #12]
 8000c44:	2205      	movs	r2, #5
 8000c46:	715a      	strb	r2, [r3, #5]
		return HAL_ERROR;
 8000c48:	2301      	movs	r3, #1
 8000c4a:	e02a      	b.n	8000ca2 <dps_read+0x9a>
	}

	response = dsp_read_pressure_raw(s);     // fill self->pressure_raw      (sign-extended 24-bit, as float)
 8000c4c:	68f8      	ldr	r0, [r7, #12]
 8000c4e:	f000 fc81 	bl	8001554 <dsp_read_pressure_raw>
 8000c52:	4603      	mov	r3, r0
 8000c54:	72fb      	strb	r3, [r7, #11]
	if(response != HAL_OK){
 8000c56:	7afb      	ldrb	r3, [r7, #11]
 8000c58:	2b00      	cmp	r3, #0
 8000c5a:	d004      	beq.n	8000c66 <dps_read+0x5e>
		s->last_err = DPS_ERR_NOT_INITIALIZED;
 8000c5c:	68fb      	ldr	r3, [r7, #12]
 8000c5e:	2205      	movs	r2, #5
 8000c60:	715a      	strb	r2, [r3, #5]
		return HAL_ERROR;
 8000c62:	2301      	movs	r3, #1
 8000c64:	e01d      	b.n	8000ca2 <dps_read+0x9a>
	}

	response = dsp_compensate_all(s);        // fills self->temperature (°C) and self->pressure (Pa)
 8000c66:	68f8      	ldr	r0, [r7, #12]
 8000c68:	f000 fb5a 	bl	8001320 <dsp_compensate_all>
 8000c6c:	4603      	mov	r3, r0
 8000c6e:	72fb      	strb	r3, [r7, #11]
	if(response != HAL_OK){
 8000c70:	7afb      	ldrb	r3, [r7, #11]
 8000c72:	2b00      	cmp	r3, #0
 8000c74:	d004      	beq.n	8000c80 <dps_read+0x78>
		s->last_err = DPS_ERR_NOT_INITIALIZED;
 8000c76:	68fb      	ldr	r3, [r7, #12]
 8000c78:	2205      	movs	r2, #5
 8000c7a:	715a      	strb	r2, [r3, #5]
		return HAL_ERROR;
 8000c7c:	2301      	movs	r3, #1
 8000c7e:	e010      	b.n	8000ca2 <dps_read+0x9a>
	}

	response = dps_pressure_to_altitude(s);
 8000c80:	68f8      	ldr	r0, [r7, #12]
 8000c82:	f000 fc31 	bl	80014e8 <dps_pressure_to_altitude>
 8000c86:	4603      	mov	r3, r0
 8000c88:	72fb      	strb	r3, [r7, #11]
	if(response != HAL_OK){
 8000c8a:	7afb      	ldrb	r3, [r7, #11]
 8000c8c:	2b00      	cmp	r3, #0
 8000c8e:	d004      	beq.n	8000c9a <dps_read+0x92>
		s->last_err = DPS_ERR_NOT_INITIALIZED;
 8000c90:	68fb      	ldr	r3, [r7, #12]
 8000c92:	2205      	movs	r2, #5
 8000c94:	715a      	strb	r2, [r3, #5]
		return HAL_ERROR;
 8000c96:	2301      	movs	r3, #1
 8000c98:	e003      	b.n	8000ca2 <dps_read+0x9a>
	}

	s->last_err = DPS_OK;
 8000c9a:	68fb      	ldr	r3, [r7, #12]
 8000c9c:	2200      	movs	r2, #0
 8000c9e:	715a      	strb	r2, [r3, #5]
	return HAL_OK;
 8000ca0:	2300      	movs	r3, #0
}
 8000ca2:	4618      	mov	r0, r3
 8000ca4:	3710      	adds	r7, #16
 8000ca6:	46bd      	mov	sp, r7
 8000ca8:	bd80      	pop	{r7, pc}

08000caa <dps_whoami>:

static HAL_StatusTypeDef dps_whoami(sensor_if_t *self, uint8_t *out)
{
 8000caa:	b580      	push	{r7, lr}
 8000cac:	b088      	sub	sp, #32
 8000cae:	af04      	add	r7, sp, #16
 8000cb0:	6078      	str	r0, [r7, #4]
 8000cb2:	6039      	str	r1, [r7, #0]
	dps310_t *s = (dps310_t*)self->state;
 8000cb4:	687b      	ldr	r3, [r7, #4]
 8000cb6:	685b      	ldr	r3, [r3, #4]
 8000cb8:	60fb      	str	r3, [r7, #12]
	if (!s || !out) return HAL_ERROR;
 8000cba:	68fb      	ldr	r3, [r7, #12]
 8000cbc:	2b00      	cmp	r3, #0
 8000cbe:	d002      	beq.n	8000cc6 <dps_whoami+0x1c>
 8000cc0:	683b      	ldr	r3, [r7, #0]
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	d101      	bne.n	8000cca <dps_whoami+0x20>
 8000cc6:	2301      	movs	r3, #1
 8000cc8:	e010      	b.n	8000cec <dps_whoami+0x42>

	return HAL_I2C_Mem_Read(s->i2c, s->addr7 << 1,
 8000cca:	68fb      	ldr	r3, [r7, #12]
 8000ccc:	6818      	ldr	r0, [r3, #0]
 8000cce:	68fb      	ldr	r3, [r7, #12]
 8000cd0:	791b      	ldrb	r3, [r3, #4]
 8000cd2:	005b      	lsls	r3, r3, #1
 8000cd4:	b299      	uxth	r1, r3
 8000cd6:	23c8      	movs	r3, #200	@ 0xc8
 8000cd8:	9302      	str	r3, [sp, #8]
 8000cda:	2301      	movs	r3, #1
 8000cdc:	9301      	str	r3, [sp, #4]
 8000cde:	683b      	ldr	r3, [r7, #0]
 8000ce0:	9300      	str	r3, [sp, #0]
 8000ce2:	2301      	movs	r3, #1
 8000ce4:	220d      	movs	r2, #13
 8000ce6:	f004 f967 	bl	8004fb8 <HAL_I2C_Mem_Read>
 8000cea:	4603      	mov	r3, r0
			DPS_ID_REG, I2C_MEMADD_SIZE_8BIT,
			out, 1, 200);
}
 8000cec:	4618      	mov	r0, r3
 8000cee:	3710      	adds	r7, #16
 8000cf0:	46bd      	mov	sp, r7
 8000cf2:	bd80      	pop	{r7, pc}

08000cf4 <dps310_bind>:
		.whoami = dps_whoami
};

void dps310_bind(sensor_if_t *iface, dps310_t *inst,
		I2C_HandleTypeDef *i2c, uint8_t addr7)
{
 8000cf4:	b480      	push	{r7}
 8000cf6:	b085      	sub	sp, #20
 8000cf8:	af00      	add	r7, sp, #0
 8000cfa:	60f8      	str	r0, [r7, #12]
 8000cfc:	60b9      	str	r1, [r7, #8]
 8000cfe:	607a      	str	r2, [r7, #4]
 8000d00:	70fb      	strb	r3, [r7, #3]
	inst->i2c   = i2c;
 8000d02:	68bb      	ldr	r3, [r7, #8]
 8000d04:	687a      	ldr	r2, [r7, #4]
 8000d06:	601a      	str	r2, [r3, #0]
	inst->addr7 = addr7;
 8000d08:	68bb      	ldr	r3, [r7, #8]
 8000d0a:	78fa      	ldrb	r2, [r7, #3]
 8000d0c:	711a      	strb	r2, [r3, #4]
	iface->vTable    = &DPS310_VTBL;
 8000d0e:	68fb      	ldr	r3, [r7, #12]
 8000d10:	4a05      	ldr	r2, [pc, #20]	@ (8000d28 <dps310_bind+0x34>)
 8000d12:	601a      	str	r2, [r3, #0]
	iface->state = inst;
 8000d14:	68fb      	ldr	r3, [r7, #12]
 8000d16:	68ba      	ldr	r2, [r7, #8]
 8000d18:	605a      	str	r2, [r3, #4]
}
 8000d1a:	bf00      	nop
 8000d1c:	3714      	adds	r7, #20
 8000d1e:	46bd      	mov	sp, r7
 8000d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d24:	4770      	bx	lr
 8000d26:	bf00      	nop
 8000d28:	0800dff0 	.word	0x0800dff0

08000d2c <dsp_pressure_configuration>:

/* ---------- Configuration ---------- */
static HAL_StatusTypeDef dsp_pressure_configuration(dps310_t *self, uint8_t pressure_measurement_rate, uint8_t pressure_oversampling_rate){
 8000d2c:	b580      	push	{r7, lr}
 8000d2e:	b088      	sub	sp, #32
 8000d30:	af04      	add	r7, sp, #16
 8000d32:	6078      	str	r0, [r7, #4]
 8000d34:	460b      	mov	r3, r1
 8000d36:	70fb      	strb	r3, [r7, #3]
 8000d38:	4613      	mov	r3, r2
 8000d3a:	70bb      	strb	r3, [r7, #2]
	if(!self) {return HAL_ERROR;}
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	2b00      	cmp	r3, #0
 8000d40:	d101      	bne.n	8000d46 <dsp_pressure_configuration+0x1a>
 8000d42:	2301      	movs	r3, #1
 8000d44:	e069      	b.n	8000e1a <dsp_pressure_configuration+0xee>

	uint8_t v;
	HAL_StatusTypeDef response;

	pressure_measurement_rate = clip3(pressure_measurement_rate);
 8000d46:	78fb      	ldrb	r3, [r7, #3]
 8000d48:	4618      	mov	r0, r3
 8000d4a:	f000 fc99 	bl	8001680 <clip3>
 8000d4e:	4603      	mov	r3, r0
 8000d50:	70fb      	strb	r3, [r7, #3]
	pressure_oversampling_rate = clip4(pressure_oversampling_rate);
 8000d52:	78bb      	ldrb	r3, [r7, #2]
 8000d54:	4618      	mov	r0, r3
 8000d56:	f000 fca2 	bl	800169e <clip4>
 8000d5a:	4603      	mov	r3, r0
 8000d5c:	70bb      	strb	r3, [r7, #2]

	//Read
	response = HAL_I2C_Mem_Read(self->i2c, self->addr7<<1, DPS_PRESSURE_CONFIGURATION_Reg, I2C_MEMADD_SIZE_8BIT, &v, sizeof(v), 200);
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	6818      	ldr	r0, [r3, #0]
 8000d62:	687b      	ldr	r3, [r7, #4]
 8000d64:	791b      	ldrb	r3, [r3, #4]
 8000d66:	005b      	lsls	r3, r3, #1
 8000d68:	b299      	uxth	r1, r3
 8000d6a:	23c8      	movs	r3, #200	@ 0xc8
 8000d6c:	9302      	str	r3, [sp, #8]
 8000d6e:	2301      	movs	r3, #1
 8000d70:	9301      	str	r3, [sp, #4]
 8000d72:	f107 030d 	add.w	r3, r7, #13
 8000d76:	9300      	str	r3, [sp, #0]
 8000d78:	2301      	movs	r3, #1
 8000d7a:	2206      	movs	r2, #6
 8000d7c:	f004 f91c 	bl	8004fb8 <HAL_I2C_Mem_Read>
 8000d80:	4603      	mov	r3, r0
 8000d82:	73fb      	strb	r3, [r7, #15]
	if(response != HAL_OK){
 8000d84:	7bfb      	ldrb	r3, [r7, #15]
 8000d86:	2b00      	cmp	r3, #0
 8000d88:	d004      	beq.n	8000d94 <dsp_pressure_configuration+0x68>
		self->last_err = DPS_ERR_I2C;
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	2202      	movs	r2, #2
 8000d8e:	715a      	strb	r2, [r3, #5]
		return HAL_ERROR;
 8000d90:	2301      	movs	r3, #1
 8000d92:	e042      	b.n	8000e1a <dsp_pressure_configuration+0xee>
	}

	//Modify
	uint8_t set = (uint8_t)	(pressure_measurement_rate 	<< DPS_PRESSURE_CONFIGURATION_MR_Pos) | \
 8000d94:	78fb      	ldrb	r3, [r7, #3]
 8000d96:	011b      	lsls	r3, r3, #4
 8000d98:	b2da      	uxtb	r2, r3
 8000d9a:	78bb      	ldrb	r3, [r7, #2]
 8000d9c:	4313      	orrs	r3, r2
 8000d9e:	73bb      	strb	r3, [r7, #14]
			(pressure_oversampling_rate << DPS_PRESSURE_CONFIGURATION_POR_Pos);

	uint8_t nv   = (uint8_t)((v & ~DPS_PRESSURE_CONFIGURATION_Msk) | set);
 8000da0:	7b7b      	ldrb	r3, [r7, #13]
 8000da2:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8000da6:	b2da      	uxtb	r2, r3
 8000da8:	7bbb      	ldrb	r3, [r7, #14]
 8000daa:	4313      	orrs	r3, r2
 8000dac:	b2db      	uxtb	r3, r3
 8000dae:	733b      	strb	r3, [r7, #12]


	//Write
	if (nv != v){
 8000db0:	7b3a      	ldrb	r2, [r7, #12]
 8000db2:	7b7b      	ldrb	r3, [r7, #13]
 8000db4:	429a      	cmp	r2, r3
 8000db6:	d01a      	beq.n	8000dee <dsp_pressure_configuration+0xc2>
		response = HAL_I2C_Mem_Write(self->i2c, self->addr7<<1, DPS_PRESSURE_CONFIGURATION_Reg, I2C_MEMADD_SIZE_8BIT, &nv, sizeof(nv), 200);
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	6818      	ldr	r0, [r3, #0]
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	791b      	ldrb	r3, [r3, #4]
 8000dc0:	005b      	lsls	r3, r3, #1
 8000dc2:	b299      	uxth	r1, r3
 8000dc4:	23c8      	movs	r3, #200	@ 0xc8
 8000dc6:	9302      	str	r3, [sp, #8]
 8000dc8:	2301      	movs	r3, #1
 8000dca:	9301      	str	r3, [sp, #4]
 8000dcc:	f107 030c 	add.w	r3, r7, #12
 8000dd0:	9300      	str	r3, [sp, #0]
 8000dd2:	2301      	movs	r3, #1
 8000dd4:	2206      	movs	r2, #6
 8000dd6:	f003 ffdb 	bl	8004d90 <HAL_I2C_Mem_Write>
 8000dda:	4603      	mov	r3, r0
 8000ddc:	73fb      	strb	r3, [r7, #15]
		if(response != HAL_OK){
 8000dde:	7bfb      	ldrb	r3, [r7, #15]
 8000de0:	2b00      	cmp	r3, #0
 8000de2:	d004      	beq.n	8000dee <dsp_pressure_configuration+0xc2>
			self->last_err = DPS_ERR_I2C;
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	2202      	movs	r2, #2
 8000de8:	715a      	strb	r2, [r3, #5]
			return HAL_ERROR;
 8000dea:	2301      	movs	r3, #1
 8000dec:	e015      	b.n	8000e1a <dsp_pressure_configuration+0xee>
		}
	}

	self->p_osr_code = (uint8_t)(pressure_oversampling_rate & 0x0F);
 8000dee:	78bb      	ldrb	r3, [r7, #2]
 8000df0:	f003 030f 	and.w	r3, r3, #15
 8000df4:	b2da      	uxtb	r2, r3
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26
	self->kP = dps_osr_scale(self->p_osr_code);
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	f893 3026 	ldrb.w	r3, [r3, #38]	@ 0x26
 8000e02:	4618      	mov	r0, r3
 8000e04:	f000 fc9e 	bl	8001744 <dps_osr_scale>
 8000e08:	eef0 7a40 	vmov.f32	s15, s0
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	edc3 7a0a 	vstr	s15, [r3, #40]	@ 0x28


	self->last_err = DPS_OK;
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	2200      	movs	r2, #0
 8000e16:	715a      	strb	r2, [r3, #5]
	return HAL_OK;
 8000e18:	2300      	movs	r3, #0
}
 8000e1a:	4618      	mov	r0, r3
 8000e1c:	3710      	adds	r7, #16
 8000e1e:	46bd      	mov	sp, r7
 8000e20:	bd80      	pop	{r7, pc}

08000e22 <dsp_temperature_configuration>:

static HAL_StatusTypeDef dsp_temperature_configuration(dps310_t *self, uint8_t temperature_sensor, uint8_t temperature_measurement_rate, uint8_t temperature_oversampling_rate){
 8000e22:	b580      	push	{r7, lr}
 8000e24:	b088      	sub	sp, #32
 8000e26:	af04      	add	r7, sp, #16
 8000e28:	6078      	str	r0, [r7, #4]
 8000e2a:	4608      	mov	r0, r1
 8000e2c:	4611      	mov	r1, r2
 8000e2e:	461a      	mov	r2, r3
 8000e30:	4603      	mov	r3, r0
 8000e32:	70fb      	strb	r3, [r7, #3]
 8000e34:	460b      	mov	r3, r1
 8000e36:	70bb      	strb	r3, [r7, #2]
 8000e38:	4613      	mov	r3, r2
 8000e3a:	707b      	strb	r3, [r7, #1]
	if(!self) {return HAL_ERROR;}
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	2b00      	cmp	r3, #0
 8000e40:	d101      	bne.n	8000e46 <dsp_temperature_configuration+0x24>
 8000e42:	2301      	movs	r3, #1
 8000e44:	e06c      	b.n	8000f20 <dsp_temperature_configuration+0xfe>

	uint8_t v;
	HAL_StatusTypeDef response;

	temperature_measurement_rate = clip3(temperature_measurement_rate);
 8000e46:	78bb      	ldrb	r3, [r7, #2]
 8000e48:	4618      	mov	r0, r3
 8000e4a:	f000 fc19 	bl	8001680 <clip3>
 8000e4e:	4603      	mov	r3, r0
 8000e50:	70bb      	strb	r3, [r7, #2]
	temperature_oversampling_rate = clip4(temperature_oversampling_rate);
 8000e52:	787b      	ldrb	r3, [r7, #1]
 8000e54:	4618      	mov	r0, r3
 8000e56:	f000 fc22 	bl	800169e <clip4>
 8000e5a:	4603      	mov	r3, r0
 8000e5c:	707b      	strb	r3, [r7, #1]

	//Read
	response = HAL_I2C_Mem_Read(self->i2c, self->addr7<<1, DPS_TEMPERATURE_CONFIGURATION_Reg, I2C_MEMADD_SIZE_8BIT, &v, sizeof(v), 200);
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	6818      	ldr	r0, [r3, #0]
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	791b      	ldrb	r3, [r3, #4]
 8000e66:	005b      	lsls	r3, r3, #1
 8000e68:	b299      	uxth	r1, r3
 8000e6a:	23c8      	movs	r3, #200	@ 0xc8
 8000e6c:	9302      	str	r3, [sp, #8]
 8000e6e:	2301      	movs	r3, #1
 8000e70:	9301      	str	r3, [sp, #4]
 8000e72:	f107 030d 	add.w	r3, r7, #13
 8000e76:	9300      	str	r3, [sp, #0]
 8000e78:	2301      	movs	r3, #1
 8000e7a:	2207      	movs	r2, #7
 8000e7c:	f004 f89c 	bl	8004fb8 <HAL_I2C_Mem_Read>
 8000e80:	4603      	mov	r3, r0
 8000e82:	73fb      	strb	r3, [r7, #15]
	if(response != HAL_OK){
 8000e84:	7bfb      	ldrb	r3, [r7, #15]
 8000e86:	2b00      	cmp	r3, #0
 8000e88:	d004      	beq.n	8000e94 <dsp_temperature_configuration+0x72>
		self->last_err = DPS_ERR_I2C;
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	2202      	movs	r2, #2
 8000e8e:	715a      	strb	r2, [r3, #5]
		return HAL_ERROR;
 8000e90:	2301      	movs	r3, #1
 8000e92:	e045      	b.n	8000f20 <dsp_temperature_configuration+0xfe>
	}

	//Modify
	uint8_t set = (uint8_t)	(temperature_sensor << DPS_TEMPERATURE_CONFIGURATION_SENSE_Pos) | \
 8000e94:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8000e98:	01db      	lsls	r3, r3, #7
 8000e9a:	b25a      	sxtb	r2, r3
 8000e9c:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8000ea0:	011b      	lsls	r3, r3, #4
 8000ea2:	b25b      	sxtb	r3, r3
 8000ea4:	4313      	orrs	r3, r2
 8000ea6:	b25a      	sxtb	r2, r3
			(temperature_measurement_rate 	<< DPS_TEMPERATURE_CONFIGURATION_MR_Pos) | \
 8000ea8:	f997 3001 	ldrsb.w	r3, [r7, #1]
 8000eac:	4313      	orrs	r3, r2
 8000eae:	b25b      	sxtb	r3, r3
	uint8_t set = (uint8_t)	(temperature_sensor << DPS_TEMPERATURE_CONFIGURATION_SENSE_Pos) | \
 8000eb0:	73bb      	strb	r3, [r7, #14]
			(temperature_oversampling_rate << DPS_TEMPERATURE_CONFIGURATION_TOS_Pos);

	uint8_t nv   = (uint8_t)((v & ~DPS_TEMPERATURE_CONFIGURATION_Msk) | set);
 8000eb2:	7bbb      	ldrb	r3, [r7, #14]
 8000eb4:	733b      	strb	r3, [r7, #12]


	//Write
	if (nv != v){
 8000eb6:	7b3a      	ldrb	r2, [r7, #12]
 8000eb8:	7b7b      	ldrb	r3, [r7, #13]
 8000eba:	429a      	cmp	r2, r3
 8000ebc:	d01a      	beq.n	8000ef4 <dsp_temperature_configuration+0xd2>
		response = HAL_I2C_Mem_Write(self->i2c, self->addr7<<1, DPS_TEMPERATURE_CONFIGURATION_Reg, I2C_MEMADD_SIZE_8BIT, &nv, sizeof(nv), 200);
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	6818      	ldr	r0, [r3, #0]
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	791b      	ldrb	r3, [r3, #4]
 8000ec6:	005b      	lsls	r3, r3, #1
 8000ec8:	b299      	uxth	r1, r3
 8000eca:	23c8      	movs	r3, #200	@ 0xc8
 8000ecc:	9302      	str	r3, [sp, #8]
 8000ece:	2301      	movs	r3, #1
 8000ed0:	9301      	str	r3, [sp, #4]
 8000ed2:	f107 030c 	add.w	r3, r7, #12
 8000ed6:	9300      	str	r3, [sp, #0]
 8000ed8:	2301      	movs	r3, #1
 8000eda:	2207      	movs	r2, #7
 8000edc:	f003 ff58 	bl	8004d90 <HAL_I2C_Mem_Write>
 8000ee0:	4603      	mov	r3, r0
 8000ee2:	73fb      	strb	r3, [r7, #15]
		if(response != HAL_OK){
 8000ee4:	7bfb      	ldrb	r3, [r7, #15]
 8000ee6:	2b00      	cmp	r3, #0
 8000ee8:	d004      	beq.n	8000ef4 <dsp_temperature_configuration+0xd2>
			self->last_err = DPS_ERR_I2C;
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	2202      	movs	r2, #2
 8000eee:	715a      	strb	r2, [r3, #5]
			return HAL_ERROR;
 8000ef0:	2301      	movs	r3, #1
 8000ef2:	e015      	b.n	8000f20 <dsp_temperature_configuration+0xfe>
		}
	}

	self->t_osr_code = (uint8_t)(temperature_oversampling_rate & 0x0F);
 8000ef4:	787b      	ldrb	r3, [r7, #1]
 8000ef6:	f003 030f 	and.w	r3, r3, #15
 8000efa:	b2da      	uxtb	r2, r3
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27
	self->kT = dps_osr_scale(self->t_osr_code);
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	f893 3027 	ldrb.w	r3, [r3, #39]	@ 0x27
 8000f08:	4618      	mov	r0, r3
 8000f0a:	f000 fc1b 	bl	8001744 <dps_osr_scale>
 8000f0e:	eef0 7a40 	vmov.f32	s15, s0
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	edc3 7a0b 	vstr	s15, [r3, #44]	@ 0x2c

	self->last_err = DPS_OK;
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	2200      	movs	r2, #0
 8000f1c:	715a      	strb	r2, [r3, #5]
	return HAL_OK;
 8000f1e:	2300      	movs	r3, #0
}
 8000f20:	4618      	mov	r0, r3
 8000f22:	3710      	adds	r7, #16
 8000f24:	46bd      	mov	sp, r7
 8000f26:	bd80      	pop	{r7, pc}

08000f28 <dsp_fifo_config>:

static HAL_StatusTypeDef dsp_fifo_config(dps310_t *self)
{
 8000f28:	b580      	push	{r7, lr}
 8000f2a:	b088      	sub	sp, #32
 8000f2c:	af04      	add	r7, sp, #16
 8000f2e:	6078      	str	r0, [r7, #4]
	if (!self) return HAL_ERROR;
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	2b00      	cmp	r3, #0
 8000f34:	d101      	bne.n	8000f3a <dsp_fifo_config+0x12>
 8000f36:	2301      	movs	r3, #1
 8000f38:	e086      	b.n	8001048 <dsp_fifo_config+0x120>

	HAL_StatusTypeDef st;
	uint8_t pv = 0, tv = 0, cfg = 0;
 8000f3a:	2300      	movs	r3, #0
 8000f3c:	733b      	strb	r3, [r7, #12]
 8000f3e:	2300      	movs	r3, #0
 8000f40:	72fb      	strb	r3, [r7, #11]
 8000f42:	2300      	movs	r3, #0
 8000f44:	72bb      	strb	r3, [r7, #10]

	/* Read pressure & temperature config to get OSR codes */
	st = HAL_I2C_Mem_Read(self->i2c, self->addr7 << 1,
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	6818      	ldr	r0, [r3, #0]
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	791b      	ldrb	r3, [r3, #4]
 8000f4e:	005b      	lsls	r3, r3, #1
 8000f50:	b299      	uxth	r1, r3
 8000f52:	23c8      	movs	r3, #200	@ 0xc8
 8000f54:	9302      	str	r3, [sp, #8]
 8000f56:	2301      	movs	r3, #1
 8000f58:	9301      	str	r3, [sp, #4]
 8000f5a:	f107 030c 	add.w	r3, r7, #12
 8000f5e:	9300      	str	r3, [sp, #0]
 8000f60:	2301      	movs	r3, #1
 8000f62:	2206      	movs	r2, #6
 8000f64:	f004 f828 	bl	8004fb8 <HAL_I2C_Mem_Read>
 8000f68:	4603      	mov	r3, r0
 8000f6a:	73fb      	strb	r3, [r7, #15]
			DPS_PRESSURE_CONFIGURATION_Reg, I2C_MEMADD_SIZE_8BIT,
			&pv, 1, 200);
	if (st != HAL_OK) return st;
 8000f6c:	7bfb      	ldrb	r3, [r7, #15]
 8000f6e:	2b00      	cmp	r3, #0
 8000f70:	d001      	beq.n	8000f76 <dsp_fifo_config+0x4e>
 8000f72:	7bfb      	ldrb	r3, [r7, #15]
 8000f74:	e068      	b.n	8001048 <dsp_fifo_config+0x120>

	st = HAL_I2C_Mem_Read(self->i2c, self->addr7 << 1,
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	6818      	ldr	r0, [r3, #0]
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	791b      	ldrb	r3, [r3, #4]
 8000f7e:	005b      	lsls	r3, r3, #1
 8000f80:	b299      	uxth	r1, r3
 8000f82:	23c8      	movs	r3, #200	@ 0xc8
 8000f84:	9302      	str	r3, [sp, #8]
 8000f86:	2301      	movs	r3, #1
 8000f88:	9301      	str	r3, [sp, #4]
 8000f8a:	f107 030b 	add.w	r3, r7, #11
 8000f8e:	9300      	str	r3, [sp, #0]
 8000f90:	2301      	movs	r3, #1
 8000f92:	2207      	movs	r2, #7
 8000f94:	f004 f810 	bl	8004fb8 <HAL_I2C_Mem_Read>
 8000f98:	4603      	mov	r3, r0
 8000f9a:	73fb      	strb	r3, [r7, #15]
			DPS_TEMPERATURE_CONFIGURATION_Reg, I2C_MEMADD_SIZE_8BIT,
			&tv, 1, 200);
	if (st != HAL_OK) return st;
 8000f9c:	7bfb      	ldrb	r3, [r7, #15]
 8000f9e:	2b00      	cmp	r3, #0
 8000fa0:	d001      	beq.n	8000fa6 <dsp_fifo_config+0x7e>
 8000fa2:	7bfb      	ldrb	r3, [r7, #15]
 8000fa4:	e050      	b.n	8001048 <dsp_fifo_config+0x120>

	/* Extract OSR codes */
	uint8_t p_osr = (uint8_t)((pv & DPS_PRESSURE_CONFIGURATION_POR_Msk) >>
 8000fa6:	7b3b      	ldrb	r3, [r7, #12]
 8000fa8:	f003 030f 	and.w	r3, r3, #15
 8000fac:	73bb      	strb	r3, [r7, #14]
			DPS_PRESSURE_CONFIGURATION_POR_Pos);
	uint8_t t_osr = (uint8_t)((tv & DPS_TEMPERATURE_CONFIGURATION_TOS_Msk) >>
 8000fae:	7afb      	ldrb	r3, [r7, #11]
 8000fb0:	f003 030f 	and.w	r3, r3, #15
 8000fb4:	737b      	strb	r3, [r7, #13]
			DPS_TEMPERATURE_CONFIGURATION_TOS_Pos);

	/* Read current CFG_REG */
	st = HAL_I2C_Mem_Read(self->i2c, self->addr7 << 1,
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	6818      	ldr	r0, [r3, #0]
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	791b      	ldrb	r3, [r3, #4]
 8000fbe:	005b      	lsls	r3, r3, #1
 8000fc0:	b299      	uxth	r1, r3
 8000fc2:	23c8      	movs	r3, #200	@ 0xc8
 8000fc4:	9302      	str	r3, [sp, #8]
 8000fc6:	2301      	movs	r3, #1
 8000fc8:	9301      	str	r3, [sp, #4]
 8000fca:	f107 030a 	add.w	r3, r7, #10
 8000fce:	9300      	str	r3, [sp, #0]
 8000fd0:	2301      	movs	r3, #1
 8000fd2:	2209      	movs	r2, #9
 8000fd4:	f003 fff0 	bl	8004fb8 <HAL_I2C_Mem_Read>
 8000fd8:	4603      	mov	r3, r0
 8000fda:	73fb      	strb	r3, [r7, #15]
			DPS_CFG_REG, I2C_MEMADD_SIZE_8BIT,
			&cfg, 1, 200);
	if (st != HAL_OK) return st;
 8000fdc:	7bfb      	ldrb	r3, [r7, #15]
 8000fde:	2b00      	cmp	r3, #0
 8000fe0:	d001      	beq.n	8000fe6 <dsp_fifo_config+0xbe>
 8000fe2:	7bfb      	ldrb	r3, [r7, #15]
 8000fe4:	e030      	b.n	8001048 <dsp_fifo_config+0x120>

	/* Compute new CFG: toggle only T_SHIFT/P_SHIFT based on OSR */
	uint8_t nv = (uint8_t)(cfg & ~(DPS_CFG_P_SHIFT_Msk | DPS_CFG_T_SHIFT_Msk));
 8000fe6:	7abb      	ldrb	r3, [r7, #10]
 8000fe8:	f023 030c 	bic.w	r3, r3, #12
 8000fec:	b2db      	uxtb	r3, r3
 8000fee:	727b      	strb	r3, [r7, #9]

	if (DPS_OSR_NEEDS_SHIFT(p_osr)) nv |= DPS_CFG_P_SHIFT_Msk;
 8000ff0:	7bbb      	ldrb	r3, [r7, #14]
 8000ff2:	f003 030c 	and.w	r3, r3, #12
 8000ff6:	2b00      	cmp	r3, #0
 8000ff8:	d004      	beq.n	8001004 <dsp_fifo_config+0xdc>
 8000ffa:	7a7b      	ldrb	r3, [r7, #9]
 8000ffc:	f043 0304 	orr.w	r3, r3, #4
 8001000:	b2db      	uxtb	r3, r3
 8001002:	727b      	strb	r3, [r7, #9]
	if (DPS_OSR_NEEDS_SHIFT(t_osr)) nv |= DPS_CFG_T_SHIFT_Msk;
 8001004:	7b7b      	ldrb	r3, [r7, #13]
 8001006:	f003 030c 	and.w	r3, r3, #12
 800100a:	2b00      	cmp	r3, #0
 800100c:	d004      	beq.n	8001018 <dsp_fifo_config+0xf0>
 800100e:	7a7b      	ldrb	r3, [r7, #9]
 8001010:	f043 0308 	orr.w	r3, r3, #8
 8001014:	b2db      	uxtb	r3, r3
 8001016:	727b      	strb	r3, [r7, #9]

	if (nv == cfg) return HAL_OK;  /* nothing to do */
 8001018:	7a7a      	ldrb	r2, [r7, #9]
 800101a:	7abb      	ldrb	r3, [r7, #10]
 800101c:	429a      	cmp	r2, r3
 800101e:	d101      	bne.n	8001024 <dsp_fifo_config+0xfc>
 8001020:	2300      	movs	r3, #0
 8001022:	e011      	b.n	8001048 <dsp_fifo_config+0x120>

	return HAL_I2C_Mem_Write(self->i2c, self->addr7 << 1,
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	6818      	ldr	r0, [r3, #0]
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	791b      	ldrb	r3, [r3, #4]
 800102c:	005b      	lsls	r3, r3, #1
 800102e:	b299      	uxth	r1, r3
 8001030:	23c8      	movs	r3, #200	@ 0xc8
 8001032:	9302      	str	r3, [sp, #8]
 8001034:	2301      	movs	r3, #1
 8001036:	9301      	str	r3, [sp, #4]
 8001038:	f107 0309 	add.w	r3, r7, #9
 800103c:	9300      	str	r3, [sp, #0]
 800103e:	2301      	movs	r3, #1
 8001040:	2209      	movs	r2, #9
 8001042:	f003 fea5 	bl	8004d90 <HAL_I2C_Mem_Write>
 8001046:	4603      	mov	r3, r0
			DPS_CFG_REG, I2C_MEMADD_SIZE_8BIT,
			&nv, 1, 200);
}
 8001048:	4618      	mov	r0, r3
 800104a:	3710      	adds	r7, #16
 800104c:	46bd      	mov	sp, r7
 800104e:	bd80      	pop	{r7, pc}

08001050 <dsp_status_configuration>:


static HAL_StatusTypeDef dsp_status_configuration(dps310_t *self, uint8_t meas_ctrl){
 8001050:	b580      	push	{r7, lr}
 8001052:	b08a      	sub	sp, #40	@ 0x28
 8001054:	af04      	add	r7, sp, #16
 8001056:	6078      	str	r0, [r7, #4]
 8001058:	460b      	mov	r3, r1
 800105a:	70fb      	strb	r3, [r7, #3]
	if (!self) return HAL_ERROR;
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	2b00      	cmp	r3, #0
 8001060:	d101      	bne.n	8001066 <dsp_status_configuration+0x16>
 8001062:	2301      	movs	r3, #1
 8001064:	e06b      	b.n	800113e <dsp_status_configuration+0xee>
	meas_ctrl = clip3(meas_ctrl);
 8001066:	78fb      	ldrb	r3, [r7, #3]
 8001068:	4618      	mov	r0, r3
 800106a:	f000 fb09 	bl	8001680 <clip3>
 800106e:	4603      	mov	r3, r0
 8001070:	70fb      	strb	r3, [r7, #3]

	uint8_t v = 0;
 8001072:	2300      	movs	r3, #0
 8001074:	743b      	strb	r3, [r7, #16]
	uint32_t t0 = HAL_GetTick();
 8001076:	f003 fa73 	bl	8004560 <HAL_GetTick>
 800107a:	6178      	str	r0, [r7, #20]
	for (;;) {
		HAL_StatusTypeDef st = HAL_I2C_Mem_Read(self->i2c, (self->addr7 << 1),
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	6818      	ldr	r0, [r3, #0]
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	791b      	ldrb	r3, [r3, #4]
 8001084:	005b      	lsls	r3, r3, #1
 8001086:	b299      	uxth	r1, r3
 8001088:	23c8      	movs	r3, #200	@ 0xc8
 800108a:	9302      	str	r3, [sp, #8]
 800108c:	2301      	movs	r3, #1
 800108e:	9301      	str	r3, [sp, #4]
 8001090:	f107 0310 	add.w	r3, r7, #16
 8001094:	9300      	str	r3, [sp, #0]
 8001096:	2301      	movs	r3, #1
 8001098:	2208      	movs	r2, #8
 800109a:	f003 ff8d 	bl	8004fb8 <HAL_I2C_Mem_Read>
 800109e:	4603      	mov	r3, r0
 80010a0:	74fb      	strb	r3, [r7, #19]
				DPS_STATUS_Reg, I2C_MEMADD_SIZE_8BIT,
				&v, 1, 200);
		if (st != HAL_OK) { self->last_err = DPS_ERR_I2C; return st; }
 80010a2:	7cfb      	ldrb	r3, [r7, #19]
 80010a4:	2b00      	cmp	r3, #0
 80010a6:	d004      	beq.n	80010b2 <dsp_status_configuration+0x62>
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	2202      	movs	r2, #2
 80010ac:	715a      	strb	r2, [r3, #5]
 80010ae:	7cfb      	ldrb	r3, [r7, #19]
 80010b0:	e045      	b.n	800113e <dsp_status_configuration+0xee>
		if ((v & DPS_STATUS_READY_Msk) == DPS_STATUS_READY_Msk) break;
 80010b2:	7c3b      	ldrb	r3, [r7, #16]
 80010b4:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 80010b8:	2bc0      	cmp	r3, #192	@ 0xc0
 80010ba:	d012      	beq.n	80010e2 <dsp_status_configuration+0x92>
		if ((HAL_GetTick() - t0) > 5000) {
 80010bc:	f003 fa50 	bl	8004560 <HAL_GetTick>
 80010c0:	4602      	mov	r2, r0
 80010c2:	697b      	ldr	r3, [r7, #20]
 80010c4:	1ad3      	subs	r3, r2, r3
 80010c6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80010ca:	4293      	cmp	r3, r2
 80010cc:	d904      	bls.n	80010d8 <dsp_status_configuration+0x88>
			self->last_err = DPS_ERR_NOT_INITIALIZED;
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	2205      	movs	r2, #5
 80010d2:	715a      	strb	r2, [r3, #5]
			return HAL_TIMEOUT;
 80010d4:	2303      	movs	r3, #3
 80010d6:	e032      	b.n	800113e <dsp_status_configuration+0xee>
		}
		HAL_Delay(1000);
 80010d8:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80010dc:	f003 fa4c 	bl	8004578 <HAL_Delay>
	for (;;) {
 80010e0:	e7cc      	b.n	800107c <dsp_status_configuration+0x2c>
		if ((v & DPS_STATUS_READY_Msk) == DPS_STATUS_READY_Msk) break;
 80010e2:	bf00      	nop
	}

	// ---- RMW only MEAS_CTRL[2:0] ----
	uint8_t set = (uint8_t)(meas_ctrl << DPS_STATUS_MEAS_CTRL_Pos);
 80010e4:	78fb      	ldrb	r3, [r7, #3]
 80010e6:	74bb      	strb	r3, [r7, #18]
	uint8_t nv  = (uint8_t)((v & ~DPS_STATUS_MEAS_CTRL_Msk) | set);
 80010e8:	7c3b      	ldrb	r3, [r7, #16]
 80010ea:	f023 0303 	bic.w	r3, r3, #3
 80010ee:	b2da      	uxtb	r2, r3
 80010f0:	7cbb      	ldrb	r3, [r7, #18]
 80010f2:	4313      	orrs	r3, r2
 80010f4:	b2db      	uxtb	r3, r3
 80010f6:	73fb      	strb	r3, [r7, #15]

	if (nv != v) {
 80010f8:	7bfa      	ldrb	r2, [r7, #15]
 80010fa:	7c3b      	ldrb	r3, [r7, #16]
 80010fc:	429a      	cmp	r2, r3
 80010fe:	d01a      	beq.n	8001136 <dsp_status_configuration+0xe6>
		HAL_StatusTypeDef st = HAL_I2C_Mem_Write(self->i2c, (self->addr7 << 1), DPS_STATUS_Reg, I2C_MEMADD_SIZE_8BIT, &nv, 1, 200);
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	6818      	ldr	r0, [r3, #0]
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	791b      	ldrb	r3, [r3, #4]
 8001108:	005b      	lsls	r3, r3, #1
 800110a:	b299      	uxth	r1, r3
 800110c:	23c8      	movs	r3, #200	@ 0xc8
 800110e:	9302      	str	r3, [sp, #8]
 8001110:	2301      	movs	r3, #1
 8001112:	9301      	str	r3, [sp, #4]
 8001114:	f107 030f 	add.w	r3, r7, #15
 8001118:	9300      	str	r3, [sp, #0]
 800111a:	2301      	movs	r3, #1
 800111c:	2208      	movs	r2, #8
 800111e:	f003 fe37 	bl	8004d90 <HAL_I2C_Mem_Write>
 8001122:	4603      	mov	r3, r0
 8001124:	747b      	strb	r3, [r7, #17]
		if (st != HAL_OK) { self->last_err = DPS_ERR_I2C; return st; }
 8001126:	7c7b      	ldrb	r3, [r7, #17]
 8001128:	2b00      	cmp	r3, #0
 800112a:	d004      	beq.n	8001136 <dsp_status_configuration+0xe6>
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	2202      	movs	r2, #2
 8001130:	715a      	strb	r2, [r3, #5]
 8001132:	7c7b      	ldrb	r3, [r7, #17]
 8001134:	e003      	b.n	800113e <dsp_status_configuration+0xee>
	}

	self->last_err = DPS_OK;
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	2200      	movs	r2, #0
 800113a:	715a      	strb	r2, [r3, #5]
	return HAL_OK;
 800113c:	2300      	movs	r3, #0
}
 800113e:	4618      	mov	r0, r3
 8001140:	3718      	adds	r7, #24
 8001142:	46bd      	mov	sp, r7
 8001144:	bd80      	pop	{r7, pc}

08001146 <dsp_soft_reset>:

static HAL_StatusTypeDef dsp_soft_reset(dps310_t *self){
 8001146:	b580      	push	{r7, lr}
 8001148:	b088      	sub	sp, #32
 800114a:	af04      	add	r7, sp, #16
 800114c:	6078      	str	r0, [r7, #4]
	if (!self) return HAL_ERROR;
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	2b00      	cmp	r3, #0
 8001152:	d101      	bne.n	8001158 <dsp_soft_reset+0x12>
 8001154:	2301      	movs	r3, #1
 8001156:	e013      	b.n	8001180 <dsp_soft_reset+0x3a>
	uint8_t v = 0x09; // SOFT_RST = 0b1001
 8001158:	2309      	movs	r3, #9
 800115a:	73fb      	strb	r3, [r7, #15]
	return HAL_I2C_Mem_Write(self->i2c, self->addr7 << 1,
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	6818      	ldr	r0, [r3, #0]
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	791b      	ldrb	r3, [r3, #4]
 8001164:	005b      	lsls	r3, r3, #1
 8001166:	b299      	uxth	r1, r3
 8001168:	23c8      	movs	r3, #200	@ 0xc8
 800116a:	9302      	str	r3, [sp, #8]
 800116c:	2301      	movs	r3, #1
 800116e:	9301      	str	r3, [sp, #4]
 8001170:	f107 030f 	add.w	r3, r7, #15
 8001174:	9300      	str	r3, [sp, #0]
 8001176:	2301      	movs	r3, #1
 8001178:	220c      	movs	r2, #12
 800117a:	f003 fe09 	bl	8004d90 <HAL_I2C_Mem_Write>
 800117e:	4603      	mov	r3, r0
			DPS_SOFT_RESET_Reg, I2C_MEMADD_SIZE_8BIT,
			&v, 1, 200);
}
 8001180:	4618      	mov	r0, r3
 8001182:	3710      	adds	r7, #16
 8001184:	46bd      	mov	sp, r7
 8001186:	bd80      	pop	{r7, pc}

08001188 <dsp_read_coefficients>:

static HAL_StatusTypeDef dsp_read_coefficients(dps310_t *self)
{
 8001188:	b580      	push	{r7, lr}
 800118a:	b090      	sub	sp, #64	@ 0x40
 800118c:	af04      	add	r7, sp, #16
 800118e:	6078      	str	r0, [r7, #4]
	if (!self) return HAL_ERROR;
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	2b00      	cmp	r3, #0
 8001194:	d101      	bne.n	800119a <dsp_read_coefficients+0x12>
 8001196:	2301      	movs	r3, #1
 8001198:	e0be      	b.n	8001318 <dsp_read_coefficients+0x190>

	uint8_t b[DPS_COEF_BLOCK_LEN];  // 0x10 .. 0x21
	HAL_StatusTypeDef st = HAL_I2C_Mem_Read(self->i2c, self->addr7 << 1,
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	6818      	ldr	r0, [r3, #0]
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	791b      	ldrb	r3, [r3, #4]
 80011a2:	005b      	lsls	r3, r3, #1
 80011a4:	b299      	uxth	r1, r3
 80011a6:	23c8      	movs	r3, #200	@ 0xc8
 80011a8:	9302      	str	r3, [sp, #8]
 80011aa:	2312      	movs	r3, #18
 80011ac:	9301      	str	r3, [sp, #4]
 80011ae:	f107 030c 	add.w	r3, r7, #12
 80011b2:	9300      	str	r3, [sp, #0]
 80011b4:	2301      	movs	r3, #1
 80011b6:	2210      	movs	r2, #16
 80011b8:	f003 fefe 	bl	8004fb8 <HAL_I2C_Mem_Read>
 80011bc:	4603      	mov	r3, r0
 80011be:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
			DPS_COEF_BLOCK_START, I2C_MEMADD_SIZE_8BIT,
			b, sizeof(b), 200);
	if (st != HAL_OK) {
 80011c2:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80011c6:	2b00      	cmp	r3, #0
 80011c8:	d013      	beq.n	80011f2 <dsp_read_coefficients+0x6a>
		self->last_hal_err = HAL_I2C_GetError(self->i2c);
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	4618      	mov	r0, r3
 80011d0:	f004 f80c 	bl	80051ec <HAL_I2C_GetError>
 80011d4:	4602      	mov	r2, r0
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	609a      	str	r2, [r3, #8]
		self->last_err = (st == HAL_TIMEOUT) ? DPS_ERR_TIMEOUT : DPS_ERR_I2C;
 80011da:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80011de:	2b03      	cmp	r3, #3
 80011e0:	d101      	bne.n	80011e6 <dsp_read_coefficients+0x5e>
 80011e2:	2203      	movs	r2, #3
 80011e4:	e000      	b.n	80011e8 <dsp_read_coefficients+0x60>
 80011e6:	2202      	movs	r2, #2
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	715a      	strb	r2, [r3, #5]
		return st;
 80011ec:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80011f0:	e092      	b.n	8001318 <dsp_read_coefficients+0x190>
	}

	/* Index helper: b[0] = 0x10, b[1] = 0x11, ... b[18] = 0x22 (but we read to 0x21) */
	/* c0: 12-bit signed: 0x10[7:0]=c0[11:4], 0x11[7:4]=c0[3:0] */
	uint16_t c0u = ((uint16_t)b[0] << 4) | (b[1] >> 4);
 80011f2:	7b3b      	ldrb	r3, [r7, #12]
 80011f4:	b21b      	sxth	r3, r3
 80011f6:	011b      	lsls	r3, r3, #4
 80011f8:	b21a      	sxth	r2, r3
 80011fa:	7b7b      	ldrb	r3, [r7, #13]
 80011fc:	091b      	lsrs	r3, r3, #4
 80011fe:	b2db      	uxtb	r3, r3
 8001200:	b21b      	sxth	r3, r3
 8001202:	4313      	orrs	r3, r2
 8001204:	b21b      	sxth	r3, r3
 8001206:	85bb      	strh	r3, [r7, #44]	@ 0x2c
	self->c0 = sx12(c0u);
 8001208:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 800120a:	4618      	mov	r0, r3
 800120c:	f000 fa6a 	bl	80016e4 <sx12>
 8001210:	4603      	mov	r3, r0
 8001212:	461a      	mov	r2, r3
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	81da      	strh	r2, [r3, #14]

	/* c1: 12-bit signed: 0x11[3:0]=c1[11:8], 0x12= c1[7:0] */
	uint16_t c1u = ((uint16_t)(b[1] & 0x0F) << 8) | b[2];
 8001218:	7b7b      	ldrb	r3, [r7, #13]
 800121a:	b21b      	sxth	r3, r3
 800121c:	021b      	lsls	r3, r3, #8
 800121e:	b21b      	sxth	r3, r3
 8001220:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8001224:	b21a      	sxth	r2, r3
 8001226:	7bbb      	ldrb	r3, [r7, #14]
 8001228:	b21b      	sxth	r3, r3
 800122a:	4313      	orrs	r3, r2
 800122c:	b21b      	sxth	r3, r3
 800122e:	857b      	strh	r3, [r7, #42]	@ 0x2a
	self->c1 = sx12(c1u);
 8001230:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8001232:	4618      	mov	r0, r3
 8001234:	f000 fa56 	bl	80016e4 <sx12>
 8001238:	4603      	mov	r3, r0
 800123a:	461a      	mov	r2, r3
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	821a      	strh	r2, [r3, #16]

	/* c00: 20-bit signed: 0x13[7:0]=[19:12], 0x14[7:0]=[11:4], 0x15[7:4]=[3:0] */
	uint32_t c00u = ((uint32_t)b[3] << 12) | ((uint32_t)b[4] << 4) | (b[5] >> 4);
 8001240:	7bfb      	ldrb	r3, [r7, #15]
 8001242:	031a      	lsls	r2, r3, #12
 8001244:	7c3b      	ldrb	r3, [r7, #16]
 8001246:	011b      	lsls	r3, r3, #4
 8001248:	4313      	orrs	r3, r2
 800124a:	7c7a      	ldrb	r2, [r7, #17]
 800124c:	0912      	lsrs	r2, r2, #4
 800124e:	b2d2      	uxtb	r2, r2
 8001250:	4313      	orrs	r3, r2
 8001252:	627b      	str	r3, [r7, #36]	@ 0x24
	self->c00 = sx20(c00u);
 8001254:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8001256:	f000 fa5f 	bl	8001718 <sx20>
 800125a:	4602      	mov	r2, r0
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	615a      	str	r2, [r3, #20]

	/* c10: 20-bit signed: 0x15[3:0]=[19:16], 0x16[7:0]=[15:8], 0x17[7:0]=[7:0] */
	uint32_t c10u = ((uint32_t)(b[5] & 0x0F) << 16) | ((uint32_t)b[6] << 8) | b[7];
 8001260:	7c7b      	ldrb	r3, [r7, #17]
 8001262:	041b      	lsls	r3, r3, #16
 8001264:	f403 2270 	and.w	r2, r3, #983040	@ 0xf0000
 8001268:	7cbb      	ldrb	r3, [r7, #18]
 800126a:	021b      	lsls	r3, r3, #8
 800126c:	4313      	orrs	r3, r2
 800126e:	7cfa      	ldrb	r2, [r7, #19]
 8001270:	4313      	orrs	r3, r2
 8001272:	623b      	str	r3, [r7, #32]
	self->c10 = sx20(c10u);
 8001274:	6a38      	ldr	r0, [r7, #32]
 8001276:	f000 fa4f 	bl	8001718 <sx20>
 800127a:	4602      	mov	r2, r0
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	619a      	str	r2, [r3, #24]

	/* signed 16-bit pairs */
	self->c01 = (int16_t)((b[8]  << 8) | b[9]);   // 0x18,0x19
 8001280:	7d3b      	ldrb	r3, [r7, #20]
 8001282:	b21b      	sxth	r3, r3
 8001284:	021b      	lsls	r3, r3, #8
 8001286:	b21a      	sxth	r2, r3
 8001288:	7d7b      	ldrb	r3, [r7, #21]
 800128a:	b21b      	sxth	r3, r3
 800128c:	4313      	orrs	r3, r2
 800128e:	b21a      	sxth	r2, r3
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	839a      	strh	r2, [r3, #28]
	self->c11 = (int16_t)((b[10] << 8) | b[11]);  // 0x1A,0x1B
 8001294:	7dbb      	ldrb	r3, [r7, #22]
 8001296:	b21b      	sxth	r3, r3
 8001298:	021b      	lsls	r3, r3, #8
 800129a:	b21a      	sxth	r2, r3
 800129c:	7dfb      	ldrb	r3, [r7, #23]
 800129e:	b21b      	sxth	r3, r3
 80012a0:	4313      	orrs	r3, r2
 80012a2:	b21a      	sxth	r2, r3
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	83da      	strh	r2, [r3, #30]
	self->c20 = (int16_t)((b[12] << 8) | b[13]);  // 0x1C,0x1D
 80012a8:	7e3b      	ldrb	r3, [r7, #24]
 80012aa:	b21b      	sxth	r3, r3
 80012ac:	021b      	lsls	r3, r3, #8
 80012ae:	b21a      	sxth	r2, r3
 80012b0:	7e7b      	ldrb	r3, [r7, #25]
 80012b2:	b21b      	sxth	r3, r3
 80012b4:	4313      	orrs	r3, r2
 80012b6:	b21a      	sxth	r2, r3
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	841a      	strh	r2, [r3, #32]
	self->c21 = (int16_t)((b[14] << 8) | b[15]);  // 0x1E,0x1F
 80012bc:	7ebb      	ldrb	r3, [r7, #26]
 80012be:	b21b      	sxth	r3, r3
 80012c0:	021b      	lsls	r3, r3, #8
 80012c2:	b21a      	sxth	r2, r3
 80012c4:	7efb      	ldrb	r3, [r7, #27]
 80012c6:	b21b      	sxth	r3, r3
 80012c8:	4313      	orrs	r3, r2
 80012ca:	b21a      	sxth	r2, r3
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	845a      	strh	r2, [r3, #34]	@ 0x22
	self->c30 = (int16_t)((b[16] << 8) | b[17]);  // 0x20,0x21
 80012d0:	7f3b      	ldrb	r3, [r7, #28]
 80012d2:	b21b      	sxth	r3, r3
 80012d4:	021b      	lsls	r3, r3, #8
 80012d6:	b21a      	sxth	r2, r3
 80012d8:	7f7b      	ldrb	r3, [r7, #29]
 80012da:	b21b      	sxth	r3, r3
 80012dc:	4313      	orrs	r3, r2
 80012de:	b21a      	sxth	r2, r3
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	849a      	strh	r2, [r3, #36]	@ 0x24

	/* If you captured OSR codes in your config, prime the scale factors now */
	self->kT = dps_osr_scale(self->t_osr_code);
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	f893 3027 	ldrb.w	r3, [r3, #39]	@ 0x27
 80012ea:	4618      	mov	r0, r3
 80012ec:	f000 fa2a 	bl	8001744 <dps_osr_scale>
 80012f0:	eef0 7a40 	vmov.f32	s15, s0
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	edc3 7a0b 	vstr	s15, [r3, #44]	@ 0x2c
	self->kP = dps_osr_scale(self->p_osr_code);
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	f893 3026 	ldrb.w	r3, [r3, #38]	@ 0x26
 8001300:	4618      	mov	r0, r3
 8001302:	f000 fa1f 	bl	8001744 <dps_osr_scale>
 8001306:	eef0 7a40 	vmov.f32	s15, s0
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	edc3 7a0a 	vstr	s15, [r3, #40]	@ 0x28

	self->last_err = DPS_OK;
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	2200      	movs	r2, #0
 8001314:	715a      	strb	r2, [r3, #5]
	return HAL_OK;
 8001316:	2300      	movs	r3, #0
}
 8001318:	4618      	mov	r0, r3
 800131a:	3730      	adds	r7, #48	@ 0x30
 800131c:	46bd      	mov	sp, r7
 800131e:	bd80      	pop	{r7, pc}

08001320 <dsp_compensate_all>:
 *   T(°C) = c0*0.5 + c1*T_sc
 *   P(Pa) = c00 + P_sc*(c10 + P_sc*(c20 + P_sc*c30))
 *                + T_sc*(c01 + P_sc*(c11 + P_sc*c21))
 */
static HAL_StatusTypeDef dsp_compensate_all(dps310_t *self)
{
 8001320:	b580      	push	{r7, lr}
 8001322:	b086      	sub	sp, #24
 8001324:	af00      	add	r7, sp, #0
 8001326:	6078      	str	r0, [r7, #4]
	if (!self) return HAL_ERROR;
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	2b00      	cmp	r3, #0
 800132c:	d101      	bne.n	8001332 <dsp_compensate_all+0x12>
 800132e:	2301      	movs	r3, #1
 8001330:	e0d6      	b.n	80014e0 <dsp_compensate_all+0x1c0>
	if (self->kT <= 0.f || self->kP <= 0.f) {
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 8001338:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800133c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001340:	d907      	bls.n	8001352 <dsp_compensate_all+0x32>
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 8001348:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800134c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001350:	d837      	bhi.n	80013c2 <dsp_compensate_all+0xa2>
		/* Set from your config routines or default to OSR code 0 if unset */
		if (self->kT <= 0.f) self->kT = dps_osr_scale(self->t_osr_code);
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 8001358:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800135c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001360:	d80a      	bhi.n	8001378 <dsp_compensate_all+0x58>
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	f893 3027 	ldrb.w	r3, [r3, #39]	@ 0x27
 8001368:	4618      	mov	r0, r3
 800136a:	f000 f9eb 	bl	8001744 <dps_osr_scale>
 800136e:	eef0 7a40 	vmov.f32	s15, s0
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	edc3 7a0b 	vstr	s15, [r3, #44]	@ 0x2c
		if (self->kP <= 0.f) self->kP = dps_osr_scale(self->p_osr_code);
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 800137e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001382:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001386:	d80a      	bhi.n	800139e <dsp_compensate_all+0x7e>
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	f893 3026 	ldrb.w	r3, [r3, #38]	@ 0x26
 800138e:	4618      	mov	r0, r3
 8001390:	f000 f9d8 	bl	8001744 <dps_osr_scale>
 8001394:	eef0 7a40 	vmov.f32	s15, s0
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	edc3 7a0a 	vstr	s15, [r3, #40]	@ 0x28
		if (self->kT <= 0.f || self->kP <= 0.f) return HAL_ERROR;
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 80013a4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80013a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80013ac:	d907      	bls.n	80013be <dsp_compensate_all+0x9e>
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 80013b4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80013b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80013bc:	d801      	bhi.n	80013c2 <dsp_compensate_all+0xa2>
 80013be:	2301      	movs	r3, #1
 80013c0:	e08e      	b.n	80014e0 <dsp_compensate_all+0x1c0>
	}

	const float T_sc = self->temperature_raw / self->kT;
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	edd3 6a0d 	vldr	s13, [r3, #52]	@ 0x34
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	ed93 7a0b 	vldr	s14, [r3, #44]	@ 0x2c
 80013ce:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80013d2:	edc7 7a05 	vstr	s15, [r7, #20]
	const float P_sc = self->pressure_raw    / self->kP;
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	edd3 6a0c 	vldr	s13, [r3, #48]	@ 0x30
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	ed93 7a0a 	vldr	s14, [r3, #40]	@ 0x28
 80013e2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80013e6:	edc7 7a04 	vstr	s15, [r7, #16]

	/* Temperature in °C */
	self->temperature = 0.5f * (float)self->c0 + (float)self->c1 * T_sc;
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 80013f0:	ee07 3a90 	vmov	s15, r3
 80013f4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80013f8:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 80013fc:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8001406:	ee07 3a90 	vmov	s15, r3
 800140a:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800140e:	edd7 7a05 	vldr	s15, [r7, #20]
 8001412:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001416:	ee77 7a27 	vadd.f32	s15, s14, s15
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	edc3 7a0f 	vstr	s15, [r3, #60]	@ 0x3c

	/* Pressure in Pa (polynomial from datasheet) */
	const float P_lin =
			(float)self->c00
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	695b      	ldr	r3, [r3, #20]
 8001424:	ee07 3a90 	vmov	s15, r3
 8001428:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
			+ P_sc * ((float)self->c10 + P_sc * ((float)self->c20 + P_sc * (float)self->c30))
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	699b      	ldr	r3, [r3, #24]
 8001430:	ee07 3a90 	vmov	s15, r3
 8001434:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 800143e:	ee07 3a90 	vmov	s15, r3
 8001442:	eeb8 6ae7 	vcvt.f32.s32	s12, s15
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	f9b3 3024 	ldrsh.w	r3, [r3, #36]	@ 0x24
 800144c:	ee07 3a90 	vmov	s15, r3
 8001450:	eef8 5ae7 	vcvt.f32.s32	s11, s15
 8001454:	edd7 7a04 	vldr	s15, [r7, #16]
 8001458:	ee65 7aa7 	vmul.f32	s15, s11, s15
 800145c:	ee36 6a27 	vadd.f32	s12, s12, s15
 8001460:	edd7 7a04 	vldr	s15, [r7, #16]
 8001464:	ee66 7a27 	vmul.f32	s15, s12, s15
 8001468:	ee76 6aa7 	vadd.f32	s13, s13, s15
 800146c:	edd7 7a04 	vldr	s15, [r7, #16]
 8001470:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001474:	ee37 7a27 	vadd.f32	s14, s14, s15
			+ T_sc * (float)self->c01 + T_sc * P_sc * ((float)self->c11+P_sc*(float)self->c21);
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 800147e:	ee07 3a90 	vmov	s15, r3
 8001482:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001486:	edd7 7a05 	vldr	s15, [r7, #20]
 800148a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800148e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001492:	edd7 6a05 	vldr	s13, [r7, #20]
 8001496:	edd7 7a04 	vldr	s15, [r7, #16]
 800149a:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	f9b3 301e 	ldrsh.w	r3, [r3, #30]
 80014a4:	ee07 3a90 	vmov	s15, r3
 80014a8:	eeb8 6ae7 	vcvt.f32.s32	s12, s15
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	f9b3 3022 	ldrsh.w	r3, [r3, #34]	@ 0x22
 80014b2:	ee07 3a90 	vmov	s15, r3
 80014b6:	eef8 5ae7 	vcvt.f32.s32	s11, s15
 80014ba:	edd7 7a04 	vldr	s15, [r7, #16]
 80014be:	ee65 7aa7 	vmul.f32	s15, s11, s15
 80014c2:	ee76 7a27 	vadd.f32	s15, s12, s15
 80014c6:	ee66 7aa7 	vmul.f32	s15, s13, s15
	const float P_lin =
 80014ca:	ee77 7a27 	vadd.f32	s15, s14, s15
 80014ce:	edc7 7a03 	vstr	s15, [r7, #12]

	self->pressure = P_lin;
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	68fa      	ldr	r2, [r7, #12]
 80014d6:	639a      	str	r2, [r3, #56]	@ 0x38

	self->last_err = DPS_OK;
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	2200      	movs	r2, #0
 80014dc:	715a      	strb	r2, [r3, #5]
	return HAL_OK;
 80014de:	2300      	movs	r3, #0
}
 80014e0:	4618      	mov	r0, r3
 80014e2:	3718      	adds	r7, #24
 80014e4:	46bd      	mov	sp, r7
 80014e6:	bd80      	pop	{r7, pc}

080014e8 <dps_pressure_to_altitude>:

// International Standard Atmosphere barometric formula.
// pressure_pa = measured static pressure in Pa.
// p0_pa       = sea-level reference pressure in Pa (use local QNH if you have it).
static HAL_StatusTypeDef dps_pressure_to_altitude(dps310_t *self)
{
 80014e8:	b580      	push	{r7, lr}
 80014ea:	b084      	sub	sp, #16
 80014ec:	af00      	add	r7, sp, #0
 80014ee:	6078      	str	r0, [r7, #4]
	if (self->pressure <= 0.0f) return 0.0f;
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	edd3 7a0e 	vldr	s15, [r3, #56]	@ 0x38
 80014f6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80014fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80014fe:	d801      	bhi.n	8001504 <dps_pressure_to_altitude+0x1c>
 8001500:	2300      	movs	r3, #0
 8001502:	e01c      	b.n	800153e <dps_pressure_to_altitude+0x56>
	// Exponent 1/5.255 ≈ 0.190295
	float ratio = self->pressure / 101325;
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	ed93 7a0e 	vldr	s14, [r3, #56]	@ 0x38
 800150a:	eddf 6a0f 	vldr	s13, [pc, #60]	@ 8001548 <dps_pressure_to_altitude+0x60>
 800150e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001512:	edc7 7a03 	vstr	s15, [r7, #12]
	self->altitude = 44330.0f * (1.0f - powf(ratio, 0.190295f));
 8001516:	eddf 0a0d 	vldr	s1, [pc, #52]	@ 800154c <dps_pressure_to_altitude+0x64>
 800151a:	ed97 0a03 	vldr	s0, [r7, #12]
 800151e:	f008 fa63 	bl	80099e8 <powf>
 8001522:	eef0 7a40 	vmov.f32	s15, s0
 8001526:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800152a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800152e:	ed9f 7a08 	vldr	s14, [pc, #32]	@ 8001550 <dps_pressure_to_altitude+0x68>
 8001532:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	edc3 7a10 	vstr	s15, [r3, #64]	@ 0x40

	return HAL_OK;
 800153c:	2300      	movs	r3, #0
}
 800153e:	4618      	mov	r0, r3
 8001540:	3710      	adds	r7, #16
 8001542:	46bd      	mov	sp, r7
 8001544:	bd80      	pop	{r7, pc}
 8001546:	bf00      	nop
 8001548:	47c5e680 	.word	0x47c5e680
 800154c:	3e42dcb1 	.word	0x3e42dcb1
 8001550:	472d2a00 	.word	0x472d2a00

08001554 <dsp_read_pressure_raw>:


/* ---------- Read Values ---------- */
static HAL_StatusTypeDef dsp_read_pressure_raw(dps310_t *self)
{
 8001554:	b580      	push	{r7, lr}
 8001556:	b08a      	sub	sp, #40	@ 0x28
 8001558:	af04      	add	r7, sp, #16
 800155a:	6078      	str	r0, [r7, #4]
	if (!self) return HAL_ERROR;
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	2b00      	cmp	r3, #0
 8001560:	d101      	bne.n	8001566 <dsp_read_pressure_raw+0x12>
 8001562:	2301      	movs	r3, #1
 8001564:	e03d      	b.n	80015e2 <dsp_read_pressure_raw+0x8e>

	uint8_t v[3];
	HAL_StatusTypeDef st = HAL_I2C_Mem_Read(self->i2c, self->addr7 << 1,
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	6818      	ldr	r0, [r3, #0]
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	791b      	ldrb	r3, [r3, #4]
 800156e:	005b      	lsls	r3, r3, #1
 8001570:	b299      	uxth	r1, r3
 8001572:	23c8      	movs	r3, #200	@ 0xc8
 8001574:	9302      	str	r3, [sp, #8]
 8001576:	2303      	movs	r3, #3
 8001578:	9301      	str	r3, [sp, #4]
 800157a:	f107 030c 	add.w	r3, r7, #12
 800157e:	9300      	str	r3, [sp, #0]
 8001580:	2301      	movs	r3, #1
 8001582:	2200      	movs	r2, #0
 8001584:	f003 fd18 	bl	8004fb8 <HAL_I2C_Mem_Read>
 8001588:	4603      	mov	r3, r0
 800158a:	75fb      	strb	r3, [r7, #23]
			DPS_PRESSURE_BYTE3_Reg, I2C_MEMADD_SIZE_8BIT,
			v, 3, 200);
	if (st != HAL_OK) {
 800158c:	7dfb      	ldrb	r3, [r7, #23]
 800158e:	2b00      	cmp	r3, #0
 8001590:	d011      	beq.n	80015b6 <dsp_read_pressure_raw+0x62>
		self->last_hal_err = HAL_I2C_GetError(self->i2c);
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	4618      	mov	r0, r3
 8001598:	f003 fe28 	bl	80051ec <HAL_I2C_GetError>
 800159c:	4602      	mov	r2, r0
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	609a      	str	r2, [r3, #8]
		self->last_err = (st == HAL_TIMEOUT) ? DPS_ERR_TIMEOUT : DPS_ERR_I2C;
 80015a2:	7dfb      	ldrb	r3, [r7, #23]
 80015a4:	2b03      	cmp	r3, #3
 80015a6:	d101      	bne.n	80015ac <dsp_read_pressure_raw+0x58>
 80015a8:	2203      	movs	r2, #3
 80015aa:	e000      	b.n	80015ae <dsp_read_pressure_raw+0x5a>
 80015ac:	2202      	movs	r2, #2
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	715a      	strb	r2, [r3, #5]
		return st;
 80015b2:	7dfb      	ldrb	r3, [r7, #23]
 80015b4:	e015      	b.n	80015e2 <dsp_read_pressure_raw+0x8e>
	}

	uint32_t u = ((uint32_t)v[0] << 16) | ((uint32_t)v[1] << 8) | (uint32_t)v[2];
 80015b6:	7b3b      	ldrb	r3, [r7, #12]
 80015b8:	041a      	lsls	r2, r3, #16
 80015ba:	7b7b      	ldrb	r3, [r7, #13]
 80015bc:	021b      	lsls	r3, r3, #8
 80015be:	4313      	orrs	r3, r2
 80015c0:	7bba      	ldrb	r2, [r7, #14]
 80015c2:	4313      	orrs	r3, r2
 80015c4:	613b      	str	r3, [r7, #16]
	self->pressure_raw = sx24(u);
 80015c6:	6938      	ldr	r0, [r7, #16]
 80015c8:	f000 f878 	bl	80016bc <sx24>
 80015cc:	ee07 0a90 	vmov	s15, r0
 80015d0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	edc3 7a0c 	vstr	s15, [r3, #48]	@ 0x30

	self->last_err = DPS_OK;
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	2200      	movs	r2, #0
 80015de:	715a      	strb	r2, [r3, #5]
	return HAL_OK;
 80015e0:	2300      	movs	r3, #0
}
 80015e2:	4618      	mov	r0, r3
 80015e4:	3718      	adds	r7, #24
 80015e6:	46bd      	mov	sp, r7
 80015e8:	bd80      	pop	{r7, pc}

080015ea <dsp_read_temperature_raw>:


static HAL_StatusTypeDef dsp_read_temperature_raw(dps310_t *self)
{
 80015ea:	b580      	push	{r7, lr}
 80015ec:	b08a      	sub	sp, #40	@ 0x28
 80015ee:	af04      	add	r7, sp, #16
 80015f0:	6078      	str	r0, [r7, #4]
	if (!self) return HAL_ERROR;
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	2b00      	cmp	r3, #0
 80015f6:	d101      	bne.n	80015fc <dsp_read_temperature_raw+0x12>
 80015f8:	2301      	movs	r3, #1
 80015fa:	e03d      	b.n	8001678 <dsp_read_temperature_raw+0x8e>

	uint8_t v[3];
	HAL_StatusTypeDef st = HAL_I2C_Mem_Read(self->i2c, self->addr7 << 1,
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	6818      	ldr	r0, [r3, #0]
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	791b      	ldrb	r3, [r3, #4]
 8001604:	005b      	lsls	r3, r3, #1
 8001606:	b299      	uxth	r1, r3
 8001608:	23c8      	movs	r3, #200	@ 0xc8
 800160a:	9302      	str	r3, [sp, #8]
 800160c:	2303      	movs	r3, #3
 800160e:	9301      	str	r3, [sp, #4]
 8001610:	f107 030c 	add.w	r3, r7, #12
 8001614:	9300      	str	r3, [sp, #0]
 8001616:	2301      	movs	r3, #1
 8001618:	2203      	movs	r2, #3
 800161a:	f003 fccd 	bl	8004fb8 <HAL_I2C_Mem_Read>
 800161e:	4603      	mov	r3, r0
 8001620:	75fb      	strb	r3, [r7, #23]
			DPS_TEMPERATURE_BYTE3_Reg, I2C_MEMADD_SIZE_8BIT,
			v, 3, 200);
	if (st != HAL_OK) {
 8001622:	7dfb      	ldrb	r3, [r7, #23]
 8001624:	2b00      	cmp	r3, #0
 8001626:	d011      	beq.n	800164c <dsp_read_temperature_raw+0x62>
		self->last_hal_err = HAL_I2C_GetError(self->i2c);
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	4618      	mov	r0, r3
 800162e:	f003 fddd 	bl	80051ec <HAL_I2C_GetError>
 8001632:	4602      	mov	r2, r0
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	609a      	str	r2, [r3, #8]
		self->last_err = (st == HAL_TIMEOUT) ? DPS_ERR_TIMEOUT : DPS_ERR_I2C;
 8001638:	7dfb      	ldrb	r3, [r7, #23]
 800163a:	2b03      	cmp	r3, #3
 800163c:	d101      	bne.n	8001642 <dsp_read_temperature_raw+0x58>
 800163e:	2203      	movs	r2, #3
 8001640:	e000      	b.n	8001644 <dsp_read_temperature_raw+0x5a>
 8001642:	2202      	movs	r2, #2
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	715a      	strb	r2, [r3, #5]
		return st;
 8001648:	7dfb      	ldrb	r3, [r7, #23]
 800164a:	e015      	b.n	8001678 <dsp_read_temperature_raw+0x8e>
	}

	const uint32_t u = ((uint32_t)v[0] << 16) | ((uint32_t)v[1] << 8) | (uint32_t)v[2];
 800164c:	7b3b      	ldrb	r3, [r7, #12]
 800164e:	041a      	lsls	r2, r3, #16
 8001650:	7b7b      	ldrb	r3, [r7, #13]
 8001652:	021b      	lsls	r3, r3, #8
 8001654:	4313      	orrs	r3, r2
 8001656:	7bba      	ldrb	r2, [r7, #14]
 8001658:	4313      	orrs	r3, r2
 800165a:	613b      	str	r3, [r7, #16]
	self->temperature_raw = sx24(u);
 800165c:	6938      	ldr	r0, [r7, #16]
 800165e:	f000 f82d 	bl	80016bc <sx24>
 8001662:	ee07 0a90 	vmov	s15, r0
 8001666:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	edc3 7a0d 	vstr	s15, [r3, #52]	@ 0x34

	self->last_err = DPS_OK;
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	2200      	movs	r2, #0
 8001674:	715a      	strb	r2, [r3, #5]
	return HAL_OK;
 8001676:	2300      	movs	r3, #0
}
 8001678:	4618      	mov	r0, r3
 800167a:	3718      	adds	r7, #24
 800167c:	46bd      	mov	sp, r7
 800167e:	bd80      	pop	{r7, pc}

08001680 <clip3>:


/* ---------- Helpers ---------- */
static inline uint8_t clip2(uint8_t x)	{ return (uint8_t)(x & 0x03u);	} // 2-bit
static inline uint8_t clip3(uint8_t x) 	{ return (uint8_t)(x & 0x07u); 	} // 3-bit
 8001680:	b480      	push	{r7}
 8001682:	b083      	sub	sp, #12
 8001684:	af00      	add	r7, sp, #0
 8001686:	4603      	mov	r3, r0
 8001688:	71fb      	strb	r3, [r7, #7]
 800168a:	79fb      	ldrb	r3, [r7, #7]
 800168c:	f003 0307 	and.w	r3, r3, #7
 8001690:	b2db      	uxtb	r3, r3
 8001692:	4618      	mov	r0, r3
 8001694:	370c      	adds	r7, #12
 8001696:	46bd      	mov	sp, r7
 8001698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800169c:	4770      	bx	lr

0800169e <clip4>:
static inline uint8_t clip4(uint8_t x) 	{ return (uint8_t)(x & 0x0Fu); 	} // 4-bit
 800169e:	b480      	push	{r7}
 80016a0:	b083      	sub	sp, #12
 80016a2:	af00      	add	r7, sp, #0
 80016a4:	4603      	mov	r3, r0
 80016a6:	71fb      	strb	r3, [r7, #7]
 80016a8:	79fb      	ldrb	r3, [r7, #7]
 80016aa:	f003 030f 	and.w	r3, r3, #15
 80016ae:	b2db      	uxtb	r3, r3
 80016b0:	4618      	mov	r0, r3
 80016b2:	370c      	adds	r7, #12
 80016b4:	46bd      	mov	sp, r7
 80016b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ba:	4770      	bx	lr

080016bc <sx24>:

static inline int32_t sx24(uint32_t u) {
 80016bc:	b480      	push	{r7}
 80016be:	b083      	sub	sp, #12
 80016c0:	af00      	add	r7, sp, #0
 80016c2:	6078      	str	r0, [r7, #4]
	return (u & 0x00800000u) ? (int32_t)(u | 0xFF000000u) : (int32_t)u;
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	d003      	beq.n	80016d6 <sx24+0x1a>
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80016d4:	e000      	b.n	80016d8 <sx24+0x1c>
 80016d6:	687b      	ldr	r3, [r7, #4]
}
 80016d8:	4618      	mov	r0, r3
 80016da:	370c      	adds	r7, #12
 80016dc:	46bd      	mov	sp, r7
 80016de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e2:	4770      	bx	lr

080016e4 <sx12>:

static inline int16_t sx12(uint16_t u) {            // 12-bit signed -> int16
 80016e4:	b480      	push	{r7}
 80016e6:	b083      	sub	sp, #12
 80016e8:	af00      	add	r7, sp, #0
 80016ea:	4603      	mov	r3, r0
 80016ec:	80fb      	strh	r3, [r7, #6]
	return (u & 0x0800u) ? (int16_t)(u | 0xF000u) : (int16_t)u;
 80016ee:	88fb      	ldrh	r3, [r7, #6]
 80016f0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80016f4:	2b00      	cmp	r3, #0
 80016f6:	d007      	beq.n	8001708 <sx12+0x24>
 80016f8:	88fb      	ldrh	r3, [r7, #6]
 80016fa:	ea6f 5303 	mvn.w	r3, r3, lsl #20
 80016fe:	ea6f 5313 	mvn.w	r3, r3, lsr #20
 8001702:	b29b      	uxth	r3, r3
 8001704:	b21b      	sxth	r3, r3
 8001706:	e001      	b.n	800170c <sx12+0x28>
 8001708:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
}
 800170c:	4618      	mov	r0, r3
 800170e:	370c      	adds	r7, #12
 8001710:	46bd      	mov	sp, r7
 8001712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001716:	4770      	bx	lr

08001718 <sx20>:
static inline int32_t sx20(uint32_t u) {            // 20-bit signed -> int32
 8001718:	b480      	push	{r7}
 800171a:	b083      	sub	sp, #12
 800171c:	af00      	add	r7, sp, #0
 800171e:	6078      	str	r0, [r7, #4]
	return (u & 0x00080000u) ? (int32_t)(u | 0xFFF00000u) : (int32_t)u;
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001726:	2b00      	cmp	r3, #0
 8001728:	d003      	beq.n	8001732 <sx20+0x1a>
 800172a:	687a      	ldr	r2, [r7, #4]
 800172c:	4b04      	ldr	r3, [pc, #16]	@ (8001740 <sx20+0x28>)
 800172e:	4313      	orrs	r3, r2
 8001730:	e000      	b.n	8001734 <sx20+0x1c>
 8001732:	687b      	ldr	r3, [r7, #4]
}
 8001734:	4618      	mov	r0, r3
 8001736:	370c      	adds	r7, #12
 8001738:	46bd      	mov	sp, r7
 800173a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800173e:	4770      	bx	lr
 8001740:	fff00000 	.word	0xfff00000

08001744 <dps_osr_scale>:

/* OSR code (0..7) -> scale factor used for raw scaling (Infineon table) */
static inline float dps_osr_scale(uint8_t osr_code) {
 8001744:	b480      	push	{r7}
 8001746:	b083      	sub	sp, #12
 8001748:	af00      	add	r7, sp, #0
 800174a:	4603      	mov	r3, r0
 800174c:	71fb      	strb	r3, [r7, #7]
	static const float K[8] = {
			524288.0f,  1572864.0f, 3670016.0f, 7864320.0f,
			253952.0f,   516096.0f,  1040384.0f, 2088960.0f
	};
	return K[osr_code & 7u];
 800174e:	79fb      	ldrb	r3, [r7, #7]
 8001750:	f003 0307 	and.w	r3, r3, #7
 8001754:	4a06      	ldr	r2, [pc, #24]	@ (8001770 <dps_osr_scale+0x2c>)
 8001756:	009b      	lsls	r3, r3, #2
 8001758:	4413      	add	r3, r2
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	ee07 3a90 	vmov	s15, r3
}
 8001760:	eeb0 0a67 	vmov.f32	s0, s15
 8001764:	370c      	adds	r7, #12
 8001766:	46bd      	mov	sp, r7
 8001768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800176c:	4770      	bx	lr
 800176e:	bf00      	nop
 8001770:	0800e000 	.word	0x0800e000

08001774 <getSelfStatePointer>:

static dps310_t* getSelfStatePointer(sensor_if_t *self) {
 8001774:	b480      	push	{r7}
 8001776:	b083      	sub	sp, #12
 8001778:	af00      	add	r7, sp, #0
 800177a:	6078      	str	r0, [r7, #4]
	if (!self || !self->state) return NULL;
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	2b00      	cmp	r3, #0
 8001780:	d003      	beq.n	800178a <getSelfStatePointer+0x16>
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	685b      	ldr	r3, [r3, #4]
 8001786:	2b00      	cmp	r3, #0
 8001788:	d101      	bne.n	800178e <getSelfStatePointer+0x1a>
 800178a:	2300      	movs	r3, #0
 800178c:	e001      	b.n	8001792 <getSelfStatePointer+0x1e>
	return (dps310_t*)self->state;
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	685b      	ldr	r3, [r3, #4]
}
 8001792:	4618      	mov	r0, r3
 8001794:	370c      	adds	r7, #12
 8001796:	46bd      	mov	sp, r7
 8001798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800179c:	4770      	bx	lr

0800179e <rx1>:
static const char* nth_field(const char *s, int n);
static HAL_StatusTypeDef nmea_read_line(UART_HandleTypeDef *u, char *buf, size_t maxlen, uint32_t timeout_ms);
static void parse_status(const char *line, gps_fix_status_t *st);

/* ---- impl ---- */
static HAL_StatusTypeDef rx1(UART_HandleTypeDef *u, uint8_t *c, uint32_t to_ms) {
 800179e:	b580      	push	{r7, lr}
 80017a0:	b084      	sub	sp, #16
 80017a2:	af00      	add	r7, sp, #0
 80017a4:	60f8      	str	r0, [r7, #12]
 80017a6:	60b9      	str	r1, [r7, #8]
 80017a8:	607a      	str	r2, [r7, #4]
    return HAL_UART_Receive(u, c, 1, to_ms);
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	2201      	movs	r2, #1
 80017ae:	68b9      	ldr	r1, [r7, #8]
 80017b0:	68f8      	ldr	r0, [r7, #12]
 80017b2:	f006 ffab 	bl	800870c <HAL_UART_Receive>
 80017b6:	4603      	mov	r3, r0
}
 80017b8:	4618      	mov	r0, r3
 80017ba:	3710      	adds	r7, #16
 80017bc:	46bd      	mov	sp, r7
 80017be:	bd80      	pop	{r7, pc}

080017c0 <uart_sniff>:

static void uart_sniff(UART_HandleTypeDef *u) {
 80017c0:	b580      	push	{r7, lr}
 80017c2:	b084      	sub	sp, #16
 80017c4:	af00      	add	r7, sp, #0
 80017c6:	6078      	str	r0, [r7, #4]
    uint32_t t0 = HAL_GetTick();
 80017c8:	f002 feca 	bl	8004560 <HAL_GetTick>
 80017cc:	60f8      	str	r0, [r7, #12]
    printf("[gps] sniffing 1s...\n");
 80017ce:	4816      	ldr	r0, [pc, #88]	@ (8001828 <uart_sniff+0x68>)
 80017d0:	f009 fe6a 	bl	800b4a8 <puts>
    while (HAL_GetTick() - t0 < 1000) {
 80017d4:	e019      	b.n	800180a <uart_sniff+0x4a>
        uint8_t c;
        if (rx1(u, &c, 50) == HAL_OK) {
 80017d6:	f107 030b 	add.w	r3, r7, #11
 80017da:	2232      	movs	r2, #50	@ 0x32
 80017dc:	4619      	mov	r1, r3
 80017de:	6878      	ldr	r0, [r7, #4]
 80017e0:	f7ff ffdd 	bl	800179e <rx1>
 80017e4:	4603      	mov	r3, r0
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	d10c      	bne.n	8001804 <uart_sniff+0x44>
            printf("%c", (c >= 32 && c <= 126) ? c : '.');
 80017ea:	7afb      	ldrb	r3, [r7, #11]
 80017ec:	2b1f      	cmp	r3, #31
 80017ee:	d904      	bls.n	80017fa <uart_sniff+0x3a>
 80017f0:	7afb      	ldrb	r3, [r7, #11]
 80017f2:	2b7e      	cmp	r3, #126	@ 0x7e
 80017f4:	d801      	bhi.n	80017fa <uart_sniff+0x3a>
 80017f6:	7afb      	ldrb	r3, [r7, #11]
 80017f8:	e000      	b.n	80017fc <uart_sniff+0x3c>
 80017fa:	232e      	movs	r3, #46	@ 0x2e
 80017fc:	4618      	mov	r0, r3
 80017fe:	f009 fdf5 	bl	800b3ec <putchar>
 8001802:	e002      	b.n	800180a <uart_sniff+0x4a>
        } else {
            printf("_");
 8001804:	205f      	movs	r0, #95	@ 0x5f
 8001806:	f009 fdf1 	bl	800b3ec <putchar>
    while (HAL_GetTick() - t0 < 1000) {
 800180a:	f002 fea9 	bl	8004560 <HAL_GetTick>
 800180e:	4602      	mov	r2, r0
 8001810:	68fb      	ldr	r3, [r7, #12]
 8001812:	1ad3      	subs	r3, r2, r3
 8001814:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001818:	d3dd      	bcc.n	80017d6 <uart_sniff+0x16>
        }
    }
    printf("\n");
 800181a:	200a      	movs	r0, #10
 800181c:	f009 fde6 	bl	800b3ec <putchar>
}
 8001820:	bf00      	nop
 8001822:	3710      	adds	r7, #16
 8001824:	46bd      	mov	sp, r7
 8001826:	bd80      	pop	{r7, pc}
 8001828:	0800dd90 	.word	0x0800dd90

0800182c <nmea_probe_stream>:

static HAL_StatusTypeDef nmea_probe_stream(UART_HandleTypeDef *u) {
 800182c:	b580      	push	{r7, lr}
 800182e:	b086      	sub	sp, #24
 8001830:	af00      	add	r7, sp, #0
 8001832:	6078      	str	r0, [r7, #4]
    probe_state_t st = S_WAIT_DOLLAR;
 8001834:	2300      	movs	r3, #0
 8001836:	75fb      	strb	r3, [r7, #23]
    uint32_t t0 = HAL_GetTick();
 8001838:	f002 fe92 	bl	8004560 <HAL_GetTick>
 800183c:	6138      	str	r0, [r7, #16]
    while ((HAL_GetTick() - t0) < 5000) {
 800183e:	e02f      	b.n	80018a0 <nmea_probe_stream+0x74>
        uint8_t c;
        if (rx1(u, &c, 50) != HAL_OK) continue;
 8001840:	f107 030f 	add.w	r3, r7, #15
 8001844:	2232      	movs	r2, #50	@ 0x32
 8001846:	4619      	mov	r1, r3
 8001848:	6878      	ldr	r0, [r7, #4]
 800184a:	f7ff ffa8 	bl	800179e <rx1>
 800184e:	4603      	mov	r3, r0
 8001850:	2b00      	cmp	r3, #0
 8001852:	d122      	bne.n	800189a <nmea_probe_stream+0x6e>
        switch (st) {
 8001854:	7dfb      	ldrb	r3, [r7, #23]
 8001856:	2b02      	cmp	r3, #2
 8001858:	d014      	beq.n	8001884 <nmea_probe_stream+0x58>
 800185a:	2b02      	cmp	r3, #2
 800185c:	dc20      	bgt.n	80018a0 <nmea_probe_stream+0x74>
 800185e:	2b00      	cmp	r3, #0
 8001860:	d002      	beq.n	8001868 <nmea_probe_stream+0x3c>
 8001862:	2b01      	cmp	r3, #1
 8001864:	d006      	beq.n	8001874 <nmea_probe_stream+0x48>
 8001866:	e01b      	b.n	80018a0 <nmea_probe_stream+0x74>
            case S_WAIT_DOLLAR: if (c == '$') st = S_G; break;
 8001868:	7bfb      	ldrb	r3, [r7, #15]
 800186a:	2b24      	cmp	r3, #36	@ 0x24
 800186c:	d117      	bne.n	800189e <nmea_probe_stream+0x72>
 800186e:	2301      	movs	r3, #1
 8001870:	75fb      	strb	r3, [r7, #23]
 8001872:	e014      	b.n	800189e <nmea_probe_stream+0x72>
            case S_G:           st = (c == 'G') ? S_GP_OR_GN : S_WAIT_DOLLAR; break;
 8001874:	7bfb      	ldrb	r3, [r7, #15]
 8001876:	2b47      	cmp	r3, #71	@ 0x47
 8001878:	d101      	bne.n	800187e <nmea_probe_stream+0x52>
 800187a:	2302      	movs	r3, #2
 800187c:	e000      	b.n	8001880 <nmea_probe_stream+0x54>
 800187e:	2300      	movs	r3, #0
 8001880:	75fb      	strb	r3, [r7, #23]
 8001882:	e00d      	b.n	80018a0 <nmea_probe_stream+0x74>
            case S_GP_OR_GN:    if (c == 'P' || c == 'N') return HAL_OK; else st = S_WAIT_DOLLAR; break;
 8001884:	7bfb      	ldrb	r3, [r7, #15]
 8001886:	2b50      	cmp	r3, #80	@ 0x50
 8001888:	d002      	beq.n	8001890 <nmea_probe_stream+0x64>
 800188a:	7bfb      	ldrb	r3, [r7, #15]
 800188c:	2b4e      	cmp	r3, #78	@ 0x4e
 800188e:	d101      	bne.n	8001894 <nmea_probe_stream+0x68>
 8001890:	2300      	movs	r3, #0
 8001892:	e00f      	b.n	80018b4 <nmea_probe_stream+0x88>
 8001894:	2300      	movs	r3, #0
 8001896:	75fb      	strb	r3, [r7, #23]
 8001898:	e002      	b.n	80018a0 <nmea_probe_stream+0x74>
        if (rx1(u, &c, 50) != HAL_OK) continue;
 800189a:	bf00      	nop
 800189c:	e000      	b.n	80018a0 <nmea_probe_stream+0x74>
            case S_WAIT_DOLLAR: if (c == '$') st = S_G; break;
 800189e:	bf00      	nop
    while ((HAL_GetTick() - t0) < 5000) {
 80018a0:	f002 fe5e 	bl	8004560 <HAL_GetTick>
 80018a4:	4602      	mov	r2, r0
 80018a6:	693b      	ldr	r3, [r7, #16]
 80018a8:	1ad3      	subs	r3, r2, r3
 80018aa:	f241 3287 	movw	r2, #4999	@ 0x1387
 80018ae:	4293      	cmp	r3, r2
 80018b0:	d9c6      	bls.n	8001840 <nmea_probe_stream+0x14>
        }
    }
    return HAL_TIMEOUT;
 80018b2:	2303      	movs	r3, #3
}
 80018b4:	4618      	mov	r0, r3
 80018b6:	3718      	adds	r7, #24
 80018b8:	46bd      	mov	sp, r7
 80018ba:	bd80      	pop	{r7, pc}
 80018bc:	0000      	movs	r0, r0
	...

080018c0 <parse_lat_ddmm>:

/* ---- Read Values ---- */

static double parse_lat_ddmm(const char *f_lat, const char *f_ns) {
 80018c0:	b580      	push	{r7, lr}
 80018c2:	b08a      	sub	sp, #40	@ 0x28
 80018c4:	af00      	add	r7, sp, #0
 80018c6:	6078      	str	r0, [r7, #4]
 80018c8:	6039      	str	r1, [r7, #0]
    if (!f_lat || !*f_lat || !f_ns || !*f_ns) return 0.0;
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	d00a      	beq.n	80018e6 <parse_lat_ddmm+0x26>
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	781b      	ldrb	r3, [r3, #0]
 80018d4:	2b00      	cmp	r3, #0
 80018d6:	d006      	beq.n	80018e6 <parse_lat_ddmm+0x26>
 80018d8:	683b      	ldr	r3, [r7, #0]
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d003      	beq.n	80018e6 <parse_lat_ddmm+0x26>
 80018de:	683b      	ldr	r3, [r7, #0]
 80018e0:	781b      	ldrb	r3, [r3, #0]
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	d104      	bne.n	80018f0 <parse_lat_ddmm+0x30>
 80018e6:	f04f 0200 	mov.w	r2, #0
 80018ea:	f04f 0300 	mov.w	r3, #0
 80018ee:	e03d      	b.n	800196c <parse_lat_ddmm+0xac>
    double v = atof(f_lat);                 // ddmm.mmmm
 80018f0:	6878      	ldr	r0, [r7, #4]
 80018f2:	f008 fa26 	bl	8009d42 <atof>
 80018f6:	ed87 0b06 	vstr	d0, [r7, #24]
    int deg = (int)(v / 100.0);
 80018fa:	ed97 6b06 	vldr	d6, [r7, #24]
 80018fe:	ed9f 5b20 	vldr	d5, [pc, #128]	@ 8001980 <parse_lat_ddmm+0xc0>
 8001902:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8001906:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 800190a:	ee17 3a90 	vmov	r3, s15
 800190e:	617b      	str	r3, [r7, #20]
    double min = v - deg * 100.0;
 8001910:	697b      	ldr	r3, [r7, #20]
 8001912:	ee07 3a90 	vmov	s15, r3
 8001916:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800191a:	ed9f 6b19 	vldr	d6, [pc, #100]	@ 8001980 <parse_lat_ddmm+0xc0>
 800191e:	ee27 7b06 	vmul.f64	d7, d7, d6
 8001922:	ed97 6b06 	vldr	d6, [r7, #24]
 8001926:	ee36 7b47 	vsub.f64	d7, d6, d7
 800192a:	ed87 7b02 	vstr	d7, [r7, #8]
    double dd = deg + (min / 60.0);
 800192e:	697b      	ldr	r3, [r7, #20]
 8001930:	ee07 3a90 	vmov	s15, r3
 8001934:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8001938:	ed97 5b02 	vldr	d5, [r7, #8]
 800193c:	ed9f 4b12 	vldr	d4, [pc, #72]	@ 8001988 <parse_lat_ddmm+0xc8>
 8001940:	ee85 7b04 	vdiv.f64	d7, d5, d4
 8001944:	ee36 7b07 	vadd.f64	d7, d6, d7
 8001948:	ed87 7b08 	vstr	d7, [r7, #32]
    if (*f_ns == 'S' || *f_ns == 's') dd = -dd;
 800194c:	683b      	ldr	r3, [r7, #0]
 800194e:	781b      	ldrb	r3, [r3, #0]
 8001950:	2b53      	cmp	r3, #83	@ 0x53
 8001952:	d003      	beq.n	800195c <parse_lat_ddmm+0x9c>
 8001954:	683b      	ldr	r3, [r7, #0]
 8001956:	781b      	ldrb	r3, [r3, #0]
 8001958:	2b73      	cmp	r3, #115	@ 0x73
 800195a:	d105      	bne.n	8001968 <parse_lat_ddmm+0xa8>
 800195c:	ed97 7b08 	vldr	d7, [r7, #32]
 8001960:	eeb1 7b47 	vneg.f64	d7, d7
 8001964:	ed87 7b08 	vstr	d7, [r7, #32]
    return dd;
 8001968:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
}
 800196c:	ec43 2b17 	vmov	d7, r2, r3
 8001970:	eeb0 0b47 	vmov.f64	d0, d7
 8001974:	3728      	adds	r7, #40	@ 0x28
 8001976:	46bd      	mov	sp, r7
 8001978:	bd80      	pop	{r7, pc}
 800197a:	bf00      	nop
 800197c:	f3af 8000 	nop.w
 8001980:	00000000 	.word	0x00000000
 8001984:	40590000 	.word	0x40590000
 8001988:	00000000 	.word	0x00000000
 800198c:	404e0000 	.word	0x404e0000

08001990 <parse_lon_dddmm>:

static double parse_lon_dddmm(const char *f_lon, const char *f_ew) {
 8001990:	b580      	push	{r7, lr}
 8001992:	b08a      	sub	sp, #40	@ 0x28
 8001994:	af00      	add	r7, sp, #0
 8001996:	6078      	str	r0, [r7, #4]
 8001998:	6039      	str	r1, [r7, #0]
    if (!f_lon || !*f_lon || !f_ew || !*f_ew) return 0.0;
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	2b00      	cmp	r3, #0
 800199e:	d00a      	beq.n	80019b6 <parse_lon_dddmm+0x26>
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	781b      	ldrb	r3, [r3, #0]
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	d006      	beq.n	80019b6 <parse_lon_dddmm+0x26>
 80019a8:	683b      	ldr	r3, [r7, #0]
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	d003      	beq.n	80019b6 <parse_lon_dddmm+0x26>
 80019ae:	683b      	ldr	r3, [r7, #0]
 80019b0:	781b      	ldrb	r3, [r3, #0]
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	d104      	bne.n	80019c0 <parse_lon_dddmm+0x30>
 80019b6:	f04f 0200 	mov.w	r2, #0
 80019ba:	f04f 0300 	mov.w	r3, #0
 80019be:	e03d      	b.n	8001a3c <parse_lon_dddmm+0xac>
    double v = atof(f_lon);                 // dddmm.mmmm
 80019c0:	6878      	ldr	r0, [r7, #4]
 80019c2:	f008 f9be 	bl	8009d42 <atof>
 80019c6:	ed87 0b06 	vstr	d0, [r7, #24]
    int deg = (int)(v / 100.0);
 80019ca:	ed97 6b06 	vldr	d6, [r7, #24]
 80019ce:	ed9f 5b20 	vldr	d5, [pc, #128]	@ 8001a50 <parse_lon_dddmm+0xc0>
 80019d2:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80019d6:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 80019da:	ee17 3a90 	vmov	r3, s15
 80019de:	617b      	str	r3, [r7, #20]
    double min = v - deg * 100.0;
 80019e0:	697b      	ldr	r3, [r7, #20]
 80019e2:	ee07 3a90 	vmov	s15, r3
 80019e6:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80019ea:	ed9f 6b19 	vldr	d6, [pc, #100]	@ 8001a50 <parse_lon_dddmm+0xc0>
 80019ee:	ee27 7b06 	vmul.f64	d7, d7, d6
 80019f2:	ed97 6b06 	vldr	d6, [r7, #24]
 80019f6:	ee36 7b47 	vsub.f64	d7, d6, d7
 80019fa:	ed87 7b02 	vstr	d7, [r7, #8]
    double dd = deg + (min / 60.0);
 80019fe:	697b      	ldr	r3, [r7, #20]
 8001a00:	ee07 3a90 	vmov	s15, r3
 8001a04:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8001a08:	ed97 5b02 	vldr	d5, [r7, #8]
 8001a0c:	ed9f 4b12 	vldr	d4, [pc, #72]	@ 8001a58 <parse_lon_dddmm+0xc8>
 8001a10:	ee85 7b04 	vdiv.f64	d7, d5, d4
 8001a14:	ee36 7b07 	vadd.f64	d7, d6, d7
 8001a18:	ed87 7b08 	vstr	d7, [r7, #32]
    if (*f_ew == 'W' || *f_ew == 'w') dd = -dd;
 8001a1c:	683b      	ldr	r3, [r7, #0]
 8001a1e:	781b      	ldrb	r3, [r3, #0]
 8001a20:	2b57      	cmp	r3, #87	@ 0x57
 8001a22:	d003      	beq.n	8001a2c <parse_lon_dddmm+0x9c>
 8001a24:	683b      	ldr	r3, [r7, #0]
 8001a26:	781b      	ldrb	r3, [r3, #0]
 8001a28:	2b77      	cmp	r3, #119	@ 0x77
 8001a2a:	d105      	bne.n	8001a38 <parse_lon_dddmm+0xa8>
 8001a2c:	ed97 7b08 	vldr	d7, [r7, #32]
 8001a30:	eeb1 7b47 	vneg.f64	d7, d7
 8001a34:	ed87 7b08 	vstr	d7, [r7, #32]
    return dd;
 8001a38:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
}
 8001a3c:	ec43 2b17 	vmov	d7, r2, r3
 8001a40:	eeb0 0b47 	vmov.f64	d0, d7
 8001a44:	3728      	adds	r7, #40	@ 0x28
 8001a46:	46bd      	mov	sp, r7
 8001a48:	bd80      	pop	{r7, pc}
 8001a4a:	bf00      	nop
 8001a4c:	f3af 8000 	nop.w
 8001a50:	00000000 	.word	0x00000000
 8001a54:	40590000 	.word	0x40590000
 8001a58:	00000000 	.word	0x00000000
 8001a5c:	404e0000 	.word	0x404e0000

08001a60 <knots_to_mps>:

static float knots_to_mps(const char *f_knots) {
 8001a60:	b580      	push	{r7, lr}
 8001a62:	b082      	sub	sp, #8
 8001a64:	af00      	add	r7, sp, #0
 8001a66:	6078      	str	r0, [r7, #4]
    if (!f_knots || !*f_knots) return 0.0f;
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d003      	beq.n	8001a76 <knots_to_mps+0x16>
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	781b      	ldrb	r3, [r3, #0]
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d102      	bne.n	8001a7c <knots_to_mps+0x1c>
 8001a76:	eddf 7a0c 	vldr	s15, [pc, #48]	@ 8001aa8 <knots_to_mps+0x48>
 8001a7a:	e00a      	b.n	8001a92 <knots_to_mps+0x32>
    return (float)(atof(f_knots) * 0.514444444);  // 1 knot = 0.514444... m/s
 8001a7c:	6878      	ldr	r0, [r7, #4]
 8001a7e:	f008 f960 	bl	8009d42 <atof>
 8001a82:	eeb0 7b40 	vmov.f64	d7, d0
 8001a86:	ed9f 6b06 	vldr	d6, [pc, #24]	@ 8001aa0 <knots_to_mps+0x40>
 8001a8a:	ee27 7b06 	vmul.f64	d7, d7, d6
 8001a8e:	eef7 7bc7 	vcvt.f32.f64	s15, d7
}
 8001a92:	eeb0 0a67 	vmov.f32	s0, s15
 8001a96:	3708      	adds	r7, #8
 8001a98:	46bd      	mov	sp, r7
 8001a9a:	bd80      	pop	{r7, pc}
 8001a9c:	f3af 8000 	nop.w
 8001aa0:	31d2d84c 	.word	0x31d2d84c
 8001aa4:	3fe07654 	.word	0x3fe07654
 8001aa8:	00000000 	.word	0x00000000

08001aac <parse_RMC>:

static void parse_RMC(const char *line, gps6m_t *s) {
 8001aac:	b580      	push	{r7, lr}
 8001aae:	b08a      	sub	sp, #40	@ 0x28
 8001ab0:	af00      	add	r7, sp, #0
 8001ab2:	6078      	str	r0, [r7, #4]
 8001ab4:	6039      	str	r1, [r7, #0]
    // $..RMC,1:time,2:status,3:lat,4:N/S,5:lon,6:E/W,7:sog(kn),8:cog,9:date,...
    if (!nmea_checksum_ok(line)) return;
 8001ab6:	6878      	ldr	r0, [r7, #4]
 8001ab8:	f000 f98c 	bl	8001dd4 <nmea_checksum_ok>
 8001abc:	4603      	mov	r3, r0
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	f000 8096 	beq.w	8001bf0 <parse_RMC+0x144>
    if (!(line[3]=='R' && line[4]=='M' && line[5]=='C')) return;
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	3303      	adds	r3, #3
 8001ac8:	781b      	ldrb	r3, [r3, #0]
 8001aca:	2b52      	cmp	r3, #82	@ 0x52
 8001acc:	f040 8092 	bne.w	8001bf4 <parse_RMC+0x148>
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	3304      	adds	r3, #4
 8001ad4:	781b      	ldrb	r3, [r3, #0]
 8001ad6:	2b4d      	cmp	r3, #77	@ 0x4d
 8001ad8:	f040 808c 	bne.w	8001bf4 <parse_RMC+0x148>
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	3305      	adds	r3, #5
 8001ae0:	781b      	ldrb	r3, [r3, #0]
 8001ae2:	2b43      	cmp	r3, #67	@ 0x43
 8001ae4:	f040 8086 	bne.w	8001bf4 <parse_RMC+0x148>

    const char *f_time = nth_field(line, 1);
 8001ae8:	2101      	movs	r1, #1
 8001aea:	6878      	ldr	r0, [r7, #4]
 8001aec:	f000 f9d9 	bl	8001ea2 <nth_field>
 8001af0:	6278      	str	r0, [r7, #36]	@ 0x24
    const char *f_stat = nth_field(line, 2);
 8001af2:	2102      	movs	r1, #2
 8001af4:	6878      	ldr	r0, [r7, #4]
 8001af6:	f000 f9d4 	bl	8001ea2 <nth_field>
 8001afa:	6238      	str	r0, [r7, #32]
    const char *f_lat  = nth_field(line, 3);
 8001afc:	2103      	movs	r1, #3
 8001afe:	6878      	ldr	r0, [r7, #4]
 8001b00:	f000 f9cf 	bl	8001ea2 <nth_field>
 8001b04:	61f8      	str	r0, [r7, #28]
    const char *f_ns   = nth_field(line, 4);
 8001b06:	2104      	movs	r1, #4
 8001b08:	6878      	ldr	r0, [r7, #4]
 8001b0a:	f000 f9ca 	bl	8001ea2 <nth_field>
 8001b0e:	61b8      	str	r0, [r7, #24]
    const char *f_lon  = nth_field(line, 5);
 8001b10:	2105      	movs	r1, #5
 8001b12:	6878      	ldr	r0, [r7, #4]
 8001b14:	f000 f9c5 	bl	8001ea2 <nth_field>
 8001b18:	6178      	str	r0, [r7, #20]
    const char *f_ew   = nth_field(line, 6);
 8001b1a:	2106      	movs	r1, #6
 8001b1c:	6878      	ldr	r0, [r7, #4]
 8001b1e:	f000 f9c0 	bl	8001ea2 <nth_field>
 8001b22:	6138      	str	r0, [r7, #16]
    const char *f_sog  = nth_field(line, 7);
 8001b24:	2107      	movs	r1, #7
 8001b26:	6878      	ldr	r0, [r7, #4]
 8001b28:	f000 f9bb 	bl	8001ea2 <nth_field>
 8001b2c:	60f8      	str	r0, [r7, #12]
    const char *f_cog  = nth_field(line, 8);
 8001b2e:	2108      	movs	r1, #8
 8001b30:	6878      	ldr	r0, [r7, #4]
 8001b32:	f000 f9b6 	bl	8001ea2 <nth_field>
 8001b36:	60b8      	str	r0, [r7, #8]

    if (f_stat && *f_stat == 'A') { s->has_fix = 1; s->last_fix_ms = HAL_GetTick(); }
 8001b38:	6a3b      	ldr	r3, [r7, #32]
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	d00b      	beq.n	8001b56 <parse_RMC+0xaa>
 8001b3e:	6a3b      	ldr	r3, [r7, #32]
 8001b40:	781b      	ldrb	r3, [r3, #0]
 8001b42:	2b41      	cmp	r3, #65	@ 0x41
 8001b44:	d107      	bne.n	8001b56 <parse_RMC+0xaa>
 8001b46:	683b      	ldr	r3, [r7, #0]
 8001b48:	2201      	movs	r2, #1
 8001b4a:	711a      	strb	r2, [r3, #4]
 8001b4c:	f002 fd08 	bl	8004560 <HAL_GetTick>
 8001b50:	4602      	mov	r2, r0
 8001b52:	683b      	ldr	r3, [r7, #0]
 8001b54:	635a      	str	r2, [r3, #52]	@ 0x34
    if (f_time && *f_time) s->utc_hms = (uint32_t)atoi(f_time);  // e.g., 063911.00 -> 63911
 8001b56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	d00a      	beq.n	8001b72 <parse_RMC+0xc6>
 8001b5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b5e:	781b      	ldrb	r3, [r3, #0]
 8001b60:	2b00      	cmp	r3, #0
 8001b62:	d006      	beq.n	8001b72 <parse_RMC+0xc6>
 8001b64:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8001b66:	f008 f8ef 	bl	8009d48 <atoi>
 8001b6a:	4603      	mov	r3, r0
 8001b6c:	461a      	mov	r2, r3
 8001b6e:	683b      	ldr	r3, [r7, #0]
 8001b70:	62da      	str	r2, [r3, #44]	@ 0x2c

    if (f_lat && f_ns && f_lon && f_ew) {
 8001b72:	69fb      	ldr	r3, [r7, #28]
 8001b74:	2b00      	cmp	r3, #0
 8001b76:	d01a      	beq.n	8001bae <parse_RMC+0x102>
 8001b78:	69bb      	ldr	r3, [r7, #24]
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d017      	beq.n	8001bae <parse_RMC+0x102>
 8001b7e:	697b      	ldr	r3, [r7, #20]
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	d014      	beq.n	8001bae <parse_RMC+0x102>
 8001b84:	693b      	ldr	r3, [r7, #16]
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d011      	beq.n	8001bae <parse_RMC+0x102>
        s->lat_deg = parse_lat_ddmm(f_lat, f_ns);
 8001b8a:	69b9      	ldr	r1, [r7, #24]
 8001b8c:	69f8      	ldr	r0, [r7, #28]
 8001b8e:	f7ff fe97 	bl	80018c0 <parse_lat_ddmm>
 8001b92:	eeb0 7b40 	vmov.f64	d7, d0
 8001b96:	683b      	ldr	r3, [r7, #0]
 8001b98:	ed83 7b02 	vstr	d7, [r3, #8]
        s->lon_deg = parse_lon_dddmm(f_lon, f_ew);
 8001b9c:	6939      	ldr	r1, [r7, #16]
 8001b9e:	6978      	ldr	r0, [r7, #20]
 8001ba0:	f7ff fef6 	bl	8001990 <parse_lon_dddmm>
 8001ba4:	eeb0 7b40 	vmov.f64	d7, d0
 8001ba8:	683b      	ldr	r3, [r7, #0]
 8001baa:	ed83 7b04 	vstr	d7, [r3, #16]
    }
    if (f_sog && *f_sog) s->speed_mps = knots_to_mps(f_sog);
 8001bae:	68fb      	ldr	r3, [r7, #12]
 8001bb0:	2b00      	cmp	r3, #0
 8001bb2:	d00b      	beq.n	8001bcc <parse_RMC+0x120>
 8001bb4:	68fb      	ldr	r3, [r7, #12]
 8001bb6:	781b      	ldrb	r3, [r3, #0]
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	d007      	beq.n	8001bcc <parse_RMC+0x120>
 8001bbc:	68f8      	ldr	r0, [r7, #12]
 8001bbe:	f7ff ff4f 	bl	8001a60 <knots_to_mps>
 8001bc2:	eef0 7a40 	vmov.f32	s15, s0
 8001bc6:	683b      	ldr	r3, [r7, #0]
 8001bc8:	edc3 7a07 	vstr	s15, [r3, #28]
    if (f_cog && *f_cog) s->course_deg = (float)atof(f_cog);
 8001bcc:	68bb      	ldr	r3, [r7, #8]
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	d011      	beq.n	8001bf6 <parse_RMC+0x14a>
 8001bd2:	68bb      	ldr	r3, [r7, #8]
 8001bd4:	781b      	ldrb	r3, [r3, #0]
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	d00d      	beq.n	8001bf6 <parse_RMC+0x14a>
 8001bda:	68b8      	ldr	r0, [r7, #8]
 8001bdc:	f008 f8b1 	bl	8009d42 <atof>
 8001be0:	eeb0 7b40 	vmov.f64	d7, d0
 8001be4:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8001be8:	683b      	ldr	r3, [r7, #0]
 8001bea:	edc3 7a08 	vstr	s15, [r3, #32]
 8001bee:	e002      	b.n	8001bf6 <parse_RMC+0x14a>
    if (!nmea_checksum_ok(line)) return;
 8001bf0:	bf00      	nop
 8001bf2:	e000      	b.n	8001bf6 <parse_RMC+0x14a>
    if (!(line[3]=='R' && line[4]=='M' && line[5]=='C')) return;
 8001bf4:	bf00      	nop
}
 8001bf6:	3728      	adds	r7, #40	@ 0x28
 8001bf8:	46bd      	mov	sp, r7
 8001bfa:	bd80      	pop	{r7, pc}

08001bfc <parse_GGA>:

static void parse_GGA(const char *line, gps6m_t *s) {
 8001bfc:	b580      	push	{r7, lr}
 8001bfe:	b08c      	sub	sp, #48	@ 0x30
 8001c00:	af00      	add	r7, sp, #0
 8001c02:	6078      	str	r0, [r7, #4]
 8001c04:	6039      	str	r1, [r7, #0]
    // $..GGA,1:time,2:lat,3:N/S,4:lon,5:E/W,6:fix,7:sats,8:hdop,9:alt,10:M,...
    if (!nmea_checksum_ok(line)) return;
 8001c06:	6878      	ldr	r0, [r7, #4]
 8001c08:	f000 f8e4 	bl	8001dd4 <nmea_checksum_ok>
 8001c0c:	4603      	mov	r3, r0
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	f000 80b2 	beq.w	8001d78 <parse_GGA+0x17c>
    if (!(line[3]=='G' && line[4]=='G' && line[5]=='A')) return;
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	3303      	adds	r3, #3
 8001c18:	781b      	ldrb	r3, [r3, #0]
 8001c1a:	2b47      	cmp	r3, #71	@ 0x47
 8001c1c:	f040 80ae 	bne.w	8001d7c <parse_GGA+0x180>
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	3304      	adds	r3, #4
 8001c24:	781b      	ldrb	r3, [r3, #0]
 8001c26:	2b47      	cmp	r3, #71	@ 0x47
 8001c28:	f040 80a8 	bne.w	8001d7c <parse_GGA+0x180>
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	3305      	adds	r3, #5
 8001c30:	781b      	ldrb	r3, [r3, #0]
 8001c32:	2b41      	cmp	r3, #65	@ 0x41
 8001c34:	f040 80a2 	bne.w	8001d7c <parse_GGA+0x180>

    const char *f_time = nth_field(line, 1);
 8001c38:	2101      	movs	r1, #1
 8001c3a:	6878      	ldr	r0, [r7, #4]
 8001c3c:	f000 f931 	bl	8001ea2 <nth_field>
 8001c40:	62f8      	str	r0, [r7, #44]	@ 0x2c
    const char *f_lat  = nth_field(line, 2);
 8001c42:	2102      	movs	r1, #2
 8001c44:	6878      	ldr	r0, [r7, #4]
 8001c46:	f000 f92c 	bl	8001ea2 <nth_field>
 8001c4a:	62b8      	str	r0, [r7, #40]	@ 0x28
    const char *f_ns   = nth_field(line, 3);
 8001c4c:	2103      	movs	r1, #3
 8001c4e:	6878      	ldr	r0, [r7, #4]
 8001c50:	f000 f927 	bl	8001ea2 <nth_field>
 8001c54:	6278      	str	r0, [r7, #36]	@ 0x24
    const char *f_lon  = nth_field(line, 4);
 8001c56:	2104      	movs	r1, #4
 8001c58:	6878      	ldr	r0, [r7, #4]
 8001c5a:	f000 f922 	bl	8001ea2 <nth_field>
 8001c5e:	6238      	str	r0, [r7, #32]
    const char *f_ew   = nth_field(line, 5);
 8001c60:	2105      	movs	r1, #5
 8001c62:	6878      	ldr	r0, [r7, #4]
 8001c64:	f000 f91d 	bl	8001ea2 <nth_field>
 8001c68:	61f8      	str	r0, [r7, #28]
    const char *f_fix  = nth_field(line, 6);
 8001c6a:	2106      	movs	r1, #6
 8001c6c:	6878      	ldr	r0, [r7, #4]
 8001c6e:	f000 f918 	bl	8001ea2 <nth_field>
 8001c72:	61b8      	str	r0, [r7, #24]
    const char *f_sats = nth_field(line, 7);
 8001c74:	2107      	movs	r1, #7
 8001c76:	6878      	ldr	r0, [r7, #4]
 8001c78:	f000 f913 	bl	8001ea2 <nth_field>
 8001c7c:	6178      	str	r0, [r7, #20]
    const char *f_hdop = nth_field(line, 8);
 8001c7e:	2108      	movs	r1, #8
 8001c80:	6878      	ldr	r0, [r7, #4]
 8001c82:	f000 f90e 	bl	8001ea2 <nth_field>
 8001c86:	6138      	str	r0, [r7, #16]
    const char *f_alt  = nth_field(line, 9);
 8001c88:	2109      	movs	r1, #9
 8001c8a:	6878      	ldr	r0, [r7, #4]
 8001c8c:	f000 f909 	bl	8001ea2 <nth_field>
 8001c90:	60f8      	str	r0, [r7, #12]

    if (f_time && *f_time) s->utc_hms = (uint32_t)atoi(f_time);
 8001c92:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	d00a      	beq.n	8001cae <parse_GGA+0xb2>
 8001c98:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001c9a:	781b      	ldrb	r3, [r3, #0]
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	d006      	beq.n	8001cae <parse_GGA+0xb2>
 8001ca0:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8001ca2:	f008 f851 	bl	8009d48 <atoi>
 8001ca6:	4603      	mov	r3, r0
 8001ca8:	461a      	mov	r2, r3
 8001caa:	683b      	ldr	r3, [r7, #0]
 8001cac:	62da      	str	r2, [r3, #44]	@ 0x2c
    if (f_fix && *f_fix && atoi(f_fix) > 0) { s->has_fix = 1; s->last_fix_ms = HAL_GetTick(); }
 8001cae:	69bb      	ldr	r3, [r7, #24]
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	d011      	beq.n	8001cd8 <parse_GGA+0xdc>
 8001cb4:	69bb      	ldr	r3, [r7, #24]
 8001cb6:	781b      	ldrb	r3, [r3, #0]
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	d00d      	beq.n	8001cd8 <parse_GGA+0xdc>
 8001cbc:	69b8      	ldr	r0, [r7, #24]
 8001cbe:	f008 f843 	bl	8009d48 <atoi>
 8001cc2:	4603      	mov	r3, r0
 8001cc4:	2b00      	cmp	r3, #0
 8001cc6:	dd07      	ble.n	8001cd8 <parse_GGA+0xdc>
 8001cc8:	683b      	ldr	r3, [r7, #0]
 8001cca:	2201      	movs	r2, #1
 8001ccc:	711a      	strb	r2, [r3, #4]
 8001cce:	f002 fc47 	bl	8004560 <HAL_GetTick>
 8001cd2:	4602      	mov	r2, r0
 8001cd4:	683b      	ldr	r3, [r7, #0]
 8001cd6:	635a      	str	r2, [r3, #52]	@ 0x34

    if (f_lat && f_ns && f_lon && f_ew) {
 8001cd8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d01a      	beq.n	8001d14 <parse_GGA+0x118>
 8001cde:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	d017      	beq.n	8001d14 <parse_GGA+0x118>
 8001ce4:	6a3b      	ldr	r3, [r7, #32]
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d014      	beq.n	8001d14 <parse_GGA+0x118>
 8001cea:	69fb      	ldr	r3, [r7, #28]
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	d011      	beq.n	8001d14 <parse_GGA+0x118>
        s->lat_deg = parse_lat_ddmm(f_lat, f_ns);
 8001cf0:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8001cf2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8001cf4:	f7ff fde4 	bl	80018c0 <parse_lat_ddmm>
 8001cf8:	eeb0 7b40 	vmov.f64	d7, d0
 8001cfc:	683b      	ldr	r3, [r7, #0]
 8001cfe:	ed83 7b02 	vstr	d7, [r3, #8]
        s->lon_deg = parse_lon_dddmm(f_lon, f_ew);
 8001d02:	69f9      	ldr	r1, [r7, #28]
 8001d04:	6a38      	ldr	r0, [r7, #32]
 8001d06:	f7ff fe43 	bl	8001990 <parse_lon_dddmm>
 8001d0a:	eeb0 7b40 	vmov.f64	d7, d0
 8001d0e:	683b      	ldr	r3, [r7, #0]
 8001d10:	ed83 7b04 	vstr	d7, [r3, #16]
    }
    if (f_sats && *f_sats) s->sats_used = (uint8_t)atoi(f_sats);
 8001d14:	697b      	ldr	r3, [r7, #20]
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d00b      	beq.n	8001d32 <parse_GGA+0x136>
 8001d1a:	697b      	ldr	r3, [r7, #20]
 8001d1c:	781b      	ldrb	r3, [r3, #0]
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d007      	beq.n	8001d32 <parse_GGA+0x136>
 8001d22:	6978      	ldr	r0, [r7, #20]
 8001d24:	f008 f810 	bl	8009d48 <atoi>
 8001d28:	4603      	mov	r3, r0
 8001d2a:	b2da      	uxtb	r2, r3
 8001d2c:	683b      	ldr	r3, [r7, #0]
 8001d2e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
    if (f_hdop && *f_hdop) s->hdop      = (float)atof(f_hdop);
 8001d32:	693b      	ldr	r3, [r7, #16]
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	d00d      	beq.n	8001d54 <parse_GGA+0x158>
 8001d38:	693b      	ldr	r3, [r7, #16]
 8001d3a:	781b      	ldrb	r3, [r3, #0]
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	d009      	beq.n	8001d54 <parse_GGA+0x158>
 8001d40:	6938      	ldr	r0, [r7, #16]
 8001d42:	f007 fffe 	bl	8009d42 <atof>
 8001d46:	eeb0 7b40 	vmov.f64	d7, d0
 8001d4a:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8001d4e:	683b      	ldr	r3, [r7, #0]
 8001d50:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24
    if (f_alt  && *f_alt)  s->alt_m     = (float)atof(f_alt);
 8001d54:	68fb      	ldr	r3, [r7, #12]
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d011      	beq.n	8001d7e <parse_GGA+0x182>
 8001d5a:	68fb      	ldr	r3, [r7, #12]
 8001d5c:	781b      	ldrb	r3, [r3, #0]
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d00d      	beq.n	8001d7e <parse_GGA+0x182>
 8001d62:	68f8      	ldr	r0, [r7, #12]
 8001d64:	f007 ffed 	bl	8009d42 <atof>
 8001d68:	eeb0 7b40 	vmov.f64	d7, d0
 8001d6c:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8001d70:	683b      	ldr	r3, [r7, #0]
 8001d72:	edc3 7a06 	vstr	s15, [r3, #24]
 8001d76:	e002      	b.n	8001d7e <parse_GGA+0x182>
    if (!nmea_checksum_ok(line)) return;
 8001d78:	bf00      	nop
 8001d7a:	e000      	b.n	8001d7e <parse_GGA+0x182>
    if (!(line[3]=='G' && line[4]=='G' && line[5]=='A')) return;
 8001d7c:	bf00      	nop
}
 8001d7e:	3730      	adds	r7, #48	@ 0x30
 8001d80:	46bd      	mov	sp, r7
 8001d82:	bd80      	pop	{r7, pc}

08001d84 <hexval>:

/* ---- small NMEA helpers ---- */
static int hexval(char c) {
 8001d84:	b480      	push	{r7}
 8001d86:	b083      	sub	sp, #12
 8001d88:	af00      	add	r7, sp, #0
 8001d8a:	4603      	mov	r3, r0
 8001d8c:	71fb      	strb	r3, [r7, #7]
    if (c >= '0' && c <= '9') return c - '0';
 8001d8e:	79fb      	ldrb	r3, [r7, #7]
 8001d90:	2b2f      	cmp	r3, #47	@ 0x2f
 8001d92:	d905      	bls.n	8001da0 <hexval+0x1c>
 8001d94:	79fb      	ldrb	r3, [r7, #7]
 8001d96:	2b39      	cmp	r3, #57	@ 0x39
 8001d98:	d802      	bhi.n	8001da0 <hexval+0x1c>
 8001d9a:	79fb      	ldrb	r3, [r7, #7]
 8001d9c:	3b30      	subs	r3, #48	@ 0x30
 8001d9e:	e013      	b.n	8001dc8 <hexval+0x44>
    if (c >= 'A' && c <= 'F') return c - 'A' + 10;
 8001da0:	79fb      	ldrb	r3, [r7, #7]
 8001da2:	2b40      	cmp	r3, #64	@ 0x40
 8001da4:	d905      	bls.n	8001db2 <hexval+0x2e>
 8001da6:	79fb      	ldrb	r3, [r7, #7]
 8001da8:	2b46      	cmp	r3, #70	@ 0x46
 8001daa:	d802      	bhi.n	8001db2 <hexval+0x2e>
 8001dac:	79fb      	ldrb	r3, [r7, #7]
 8001dae:	3b37      	subs	r3, #55	@ 0x37
 8001db0:	e00a      	b.n	8001dc8 <hexval+0x44>
    if (c >= 'a' && c <= 'f') return c - 'a' + 10;
 8001db2:	79fb      	ldrb	r3, [r7, #7]
 8001db4:	2b60      	cmp	r3, #96	@ 0x60
 8001db6:	d905      	bls.n	8001dc4 <hexval+0x40>
 8001db8:	79fb      	ldrb	r3, [r7, #7]
 8001dba:	2b66      	cmp	r3, #102	@ 0x66
 8001dbc:	d802      	bhi.n	8001dc4 <hexval+0x40>
 8001dbe:	79fb      	ldrb	r3, [r7, #7]
 8001dc0:	3b57      	subs	r3, #87	@ 0x57
 8001dc2:	e001      	b.n	8001dc8 <hexval+0x44>
    return -1;
 8001dc4:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001dc8:	4618      	mov	r0, r3
 8001dca:	370c      	adds	r7, #12
 8001dcc:	46bd      	mov	sp, r7
 8001dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd2:	4770      	bx	lr

08001dd4 <nmea_checksum_ok>:

static int nmea_checksum_ok(const char *line) {
 8001dd4:	b580      	push	{r7, lr}
 8001dd6:	b088      	sub	sp, #32
 8001dd8:	af00      	add	r7, sp, #0
 8001dda:	6078      	str	r0, [r7, #4]
    if (!line || line[0] != '$') return 0;
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d003      	beq.n	8001dea <nmea_checksum_ok+0x16>
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	781b      	ldrb	r3, [r3, #0]
 8001de6:	2b24      	cmp	r3, #36	@ 0x24
 8001de8:	d001      	beq.n	8001dee <nmea_checksum_ok+0x1a>
 8001dea:	2300      	movs	r3, #0
 8001dec:	e055      	b.n	8001e9a <nmea_checksum_ok+0xc6>
    uint8_t sum = 0;
 8001dee:	2300      	movs	r3, #0
 8001df0:	77fb      	strb	r3, [r7, #31]
    const char *p = line + 1, *star = NULL;
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	3301      	adds	r3, #1
 8001df6:	61bb      	str	r3, [r7, #24]
 8001df8:	2300      	movs	r3, #0
 8001dfa:	617b      	str	r3, [r7, #20]
    while (*p && *p != '\r' && *p != '\n') {
 8001dfc:	e00d      	b.n	8001e1a <nmea_checksum_ok+0x46>
        if (*p == '*') { star = p; break; }
 8001dfe:	69bb      	ldr	r3, [r7, #24]
 8001e00:	781b      	ldrb	r3, [r3, #0]
 8001e02:	2b2a      	cmp	r3, #42	@ 0x2a
 8001e04:	d102      	bne.n	8001e0c <nmea_checksum_ok+0x38>
 8001e06:	69bb      	ldr	r3, [r7, #24]
 8001e08:	617b      	str	r3, [r7, #20]
 8001e0a:	e012      	b.n	8001e32 <nmea_checksum_ok+0x5e>
        sum ^= (uint8_t)*p++;
 8001e0c:	69bb      	ldr	r3, [r7, #24]
 8001e0e:	1c5a      	adds	r2, r3, #1
 8001e10:	61ba      	str	r2, [r7, #24]
 8001e12:	781a      	ldrb	r2, [r3, #0]
 8001e14:	7ffb      	ldrb	r3, [r7, #31]
 8001e16:	4053      	eors	r3, r2
 8001e18:	77fb      	strb	r3, [r7, #31]
    while (*p && *p != '\r' && *p != '\n') {
 8001e1a:	69bb      	ldr	r3, [r7, #24]
 8001e1c:	781b      	ldrb	r3, [r3, #0]
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	d007      	beq.n	8001e32 <nmea_checksum_ok+0x5e>
 8001e22:	69bb      	ldr	r3, [r7, #24]
 8001e24:	781b      	ldrb	r3, [r3, #0]
 8001e26:	2b0d      	cmp	r3, #13
 8001e28:	d003      	beq.n	8001e32 <nmea_checksum_ok+0x5e>
 8001e2a:	69bb      	ldr	r3, [r7, #24]
 8001e2c:	781b      	ldrb	r3, [r3, #0]
 8001e2e:	2b0a      	cmp	r3, #10
 8001e30:	d1e5      	bne.n	8001dfe <nmea_checksum_ok+0x2a>
    }
    if (!star || !star[1] || !star[2]) return 0;
 8001e32:	697b      	ldr	r3, [r7, #20]
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	d009      	beq.n	8001e4c <nmea_checksum_ok+0x78>
 8001e38:	697b      	ldr	r3, [r7, #20]
 8001e3a:	3301      	adds	r3, #1
 8001e3c:	781b      	ldrb	r3, [r3, #0]
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d004      	beq.n	8001e4c <nmea_checksum_ok+0x78>
 8001e42:	697b      	ldr	r3, [r7, #20]
 8001e44:	3302      	adds	r3, #2
 8001e46:	781b      	ldrb	r3, [r3, #0]
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	d101      	bne.n	8001e50 <nmea_checksum_ok+0x7c>
 8001e4c:	2300      	movs	r3, #0
 8001e4e:	e024      	b.n	8001e9a <nmea_checksum_ok+0xc6>
    int hi = hexval(star[1]), lo = hexval(star[2]);
 8001e50:	697b      	ldr	r3, [r7, #20]
 8001e52:	3301      	adds	r3, #1
 8001e54:	781b      	ldrb	r3, [r3, #0]
 8001e56:	4618      	mov	r0, r3
 8001e58:	f7ff ff94 	bl	8001d84 <hexval>
 8001e5c:	6138      	str	r0, [r7, #16]
 8001e5e:	697b      	ldr	r3, [r7, #20]
 8001e60:	3302      	adds	r3, #2
 8001e62:	781b      	ldrb	r3, [r3, #0]
 8001e64:	4618      	mov	r0, r3
 8001e66:	f7ff ff8d 	bl	8001d84 <hexval>
 8001e6a:	60f8      	str	r0, [r7, #12]
    if (hi < 0 || lo < 0) return 0;
 8001e6c:	693b      	ldr	r3, [r7, #16]
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	db02      	blt.n	8001e78 <nmea_checksum_ok+0xa4>
 8001e72:	68fb      	ldr	r3, [r7, #12]
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	da01      	bge.n	8001e7c <nmea_checksum_ok+0xa8>
 8001e78:	2300      	movs	r3, #0
 8001e7a:	e00e      	b.n	8001e9a <nmea_checksum_ok+0xc6>
    return sum == (uint8_t)((hi << 4) | lo);
 8001e7c:	693b      	ldr	r3, [r7, #16]
 8001e7e:	b25b      	sxtb	r3, r3
 8001e80:	011b      	lsls	r3, r3, #4
 8001e82:	b25a      	sxtb	r2, r3
 8001e84:	68fb      	ldr	r3, [r7, #12]
 8001e86:	b25b      	sxtb	r3, r3
 8001e88:	4313      	orrs	r3, r2
 8001e8a:	b25a      	sxtb	r2, r3
 8001e8c:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8001e90:	429a      	cmp	r2, r3
 8001e92:	bf0c      	ite	eq
 8001e94:	2301      	moveq	r3, #1
 8001e96:	2300      	movne	r3, #0
 8001e98:	b2db      	uxtb	r3, r3
}
 8001e9a:	4618      	mov	r0, r3
 8001e9c:	3720      	adds	r7, #32
 8001e9e:	46bd      	mov	sp, r7
 8001ea0:	bd80      	pop	{r7, pc}

08001ea2 <nth_field>:

static const char* nth_field(const char *s, int n) {
 8001ea2:	b480      	push	{r7}
 8001ea4:	b085      	sub	sp, #20
 8001ea6:	af00      	add	r7, sp, #0
 8001ea8:	6078      	str	r0, [r7, #4]
 8001eaa:	6039      	str	r1, [r7, #0]
    int idx = 0;
 8001eac:	2300      	movs	r3, #0
 8001eae:	60fb      	str	r3, [r7, #12]
    if (!s) return NULL;
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d101      	bne.n	8001eba <nth_field+0x18>
 8001eb6:	2300      	movs	r3, #0
 8001eb8:	e022      	b.n	8001f00 <nth_field+0x5e>
    if (n == 0) return s;
 8001eba:	683b      	ldr	r3, [r7, #0]
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	d112      	bne.n	8001ee6 <nth_field+0x44>
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	e01d      	b.n	8001f00 <nth_field+0x5e>
    while (*s && *s != '\n' && *s != '\r') {
        if (*s == ',') {
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	781b      	ldrb	r3, [r3, #0]
 8001ec8:	2b2c      	cmp	r3, #44	@ 0x2c
 8001eca:	d109      	bne.n	8001ee0 <nth_field+0x3e>
            idx++;
 8001ecc:	68fb      	ldr	r3, [r7, #12]
 8001ece:	3301      	adds	r3, #1
 8001ed0:	60fb      	str	r3, [r7, #12]
            if (idx == n) return s + 1;
 8001ed2:	68fa      	ldr	r2, [r7, #12]
 8001ed4:	683b      	ldr	r3, [r7, #0]
 8001ed6:	429a      	cmp	r2, r3
 8001ed8:	d102      	bne.n	8001ee0 <nth_field+0x3e>
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	3301      	adds	r3, #1
 8001ede:	e00f      	b.n	8001f00 <nth_field+0x5e>
        }
        s++;
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	3301      	adds	r3, #1
 8001ee4:	607b      	str	r3, [r7, #4]
    while (*s && *s != '\n' && *s != '\r') {
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	781b      	ldrb	r3, [r3, #0]
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d007      	beq.n	8001efe <nth_field+0x5c>
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	781b      	ldrb	r3, [r3, #0]
 8001ef2:	2b0a      	cmp	r3, #10
 8001ef4:	d003      	beq.n	8001efe <nth_field+0x5c>
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	781b      	ldrb	r3, [r3, #0]
 8001efa:	2b0d      	cmp	r3, #13
 8001efc:	d1e2      	bne.n	8001ec4 <nth_field+0x22>
    }
    return NULL;
 8001efe:	2300      	movs	r3, #0
}
 8001f00:	4618      	mov	r0, r3
 8001f02:	3714      	adds	r7, #20
 8001f04:	46bd      	mov	sp, r7
 8001f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f0a:	4770      	bx	lr

08001f0c <nmea_read_line>:

static HAL_StatusTypeDef nmea_read_line(UART_HandleTypeDef *u, char *buf, size_t maxlen, uint32_t timeout_ms) {
 8001f0c:	b580      	push	{r7, lr}
 8001f0e:	b088      	sub	sp, #32
 8001f10:	af00      	add	r7, sp, #0
 8001f12:	60f8      	str	r0, [r7, #12]
 8001f14:	60b9      	str	r1, [r7, #8]
 8001f16:	607a      	str	r2, [r7, #4]
 8001f18:	603b      	str	r3, [r7, #0]
    size_t i = 0;
 8001f1a:	2300      	movs	r3, #0
 8001f1c:	61fb      	str	r3, [r7, #28]
    uint32_t t0 = HAL_GetTick();
 8001f1e:	f002 fb1f 	bl	8004560 <HAL_GetTick>
 8001f22:	61b8      	str	r0, [r7, #24]
    while ((HAL_GetTick() - t0) < timeout_ms) {
 8001f24:	e028      	b.n	8001f78 <nmea_read_line+0x6c>
        uint8_t c;
        if (HAL_UART_Receive(u, &c, 1, 50) != HAL_OK) continue;
 8001f26:	f107 0117 	add.w	r1, r7, #23
 8001f2a:	2332      	movs	r3, #50	@ 0x32
 8001f2c:	2201      	movs	r2, #1
 8001f2e:	68f8      	ldr	r0, [r7, #12]
 8001f30:	f006 fbec 	bl	800870c <HAL_UART_Receive>
 8001f34:	4603      	mov	r3, r0
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d11b      	bne.n	8001f72 <nmea_read_line+0x66>
        if (i == 0 && c != '$') continue;
 8001f3a:	69fb      	ldr	r3, [r7, #28]
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	d102      	bne.n	8001f46 <nmea_read_line+0x3a>
 8001f40:	7dfb      	ldrb	r3, [r7, #23]
 8001f42:	2b24      	cmp	r3, #36	@ 0x24
 8001f44:	d117      	bne.n	8001f76 <nmea_read_line+0x6a>
        if (i < maxlen - 1) buf[i++] = (char)c;
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	3b01      	subs	r3, #1
 8001f4a:	69fa      	ldr	r2, [r7, #28]
 8001f4c:	429a      	cmp	r2, r3
 8001f4e:	d206      	bcs.n	8001f5e <nmea_read_line+0x52>
 8001f50:	69fb      	ldr	r3, [r7, #28]
 8001f52:	1c5a      	adds	r2, r3, #1
 8001f54:	61fa      	str	r2, [r7, #28]
 8001f56:	68ba      	ldr	r2, [r7, #8]
 8001f58:	4413      	add	r3, r2
 8001f5a:	7dfa      	ldrb	r2, [r7, #23]
 8001f5c:	701a      	strb	r2, [r3, #0]
        if (c == '\n') { buf[i] = 0; return HAL_OK; }
 8001f5e:	7dfb      	ldrb	r3, [r7, #23]
 8001f60:	2b0a      	cmp	r3, #10
 8001f62:	d109      	bne.n	8001f78 <nmea_read_line+0x6c>
 8001f64:	68ba      	ldr	r2, [r7, #8]
 8001f66:	69fb      	ldr	r3, [r7, #28]
 8001f68:	4413      	add	r3, r2
 8001f6a:	2200      	movs	r2, #0
 8001f6c:	701a      	strb	r2, [r3, #0]
 8001f6e:	2300      	movs	r3, #0
 8001f70:	e00b      	b.n	8001f8a <nmea_read_line+0x7e>
        if (HAL_UART_Receive(u, &c, 1, 50) != HAL_OK) continue;
 8001f72:	bf00      	nop
 8001f74:	e000      	b.n	8001f78 <nmea_read_line+0x6c>
        if (i == 0 && c != '$') continue;
 8001f76:	bf00      	nop
    while ((HAL_GetTick() - t0) < timeout_ms) {
 8001f78:	f002 faf2 	bl	8004560 <HAL_GetTick>
 8001f7c:	4602      	mov	r2, r0
 8001f7e:	69bb      	ldr	r3, [r7, #24]
 8001f80:	1ad3      	subs	r3, r2, r3
 8001f82:	683a      	ldr	r2, [r7, #0]
 8001f84:	429a      	cmp	r2, r3
 8001f86:	d8ce      	bhi.n	8001f26 <nmea_read_line+0x1a>
    }
    return HAL_TIMEOUT;
 8001f88:	2303      	movs	r3, #3
}
 8001f8a:	4618      	mov	r0, r3
 8001f8c:	3720      	adds	r7, #32
 8001f8e:	46bd      	mov	sp, r7
 8001f90:	bd80      	pop	{r7, pc}

08001f92 <parse_status>:

static void parse_status(const char *line, gps_fix_status_t *st) {
 8001f92:	b580      	push	{r7, lr}
 8001f94:	b086      	sub	sp, #24
 8001f96:	af00      	add	r7, sp, #0
 8001f98:	6078      	str	r0, [r7, #4]
 8001f9a:	6039      	str	r1, [r7, #0]
    if (!st || !nmea_checksum_ok(line)) return;
 8001f9c:	683b      	ldr	r3, [r7, #0]
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	f000 8083 	beq.w	80020aa <parse_status+0x118>
 8001fa4:	6878      	ldr	r0, [r7, #4]
 8001fa6:	f7ff ff15 	bl	8001dd4 <nmea_checksum_ok>
 8001faa:	4603      	mov	r3, r0
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	d07c      	beq.n	80020aa <parse_status+0x118>
    if (line[3]=='G' && line[4]=='G' && line[5]=='A') {
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	3303      	adds	r3, #3
 8001fb4:	781b      	ldrb	r3, [r3, #0]
 8001fb6:	2b47      	cmp	r3, #71	@ 0x47
 8001fb8:	d150      	bne.n	800205c <parse_status+0xca>
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	3304      	adds	r3, #4
 8001fbe:	781b      	ldrb	r3, [r3, #0]
 8001fc0:	2b47      	cmp	r3, #71	@ 0x47
 8001fc2:	d14b      	bne.n	800205c <parse_status+0xca>
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	3305      	adds	r3, #5
 8001fc8:	781b      	ldrb	r3, [r3, #0]
 8001fca:	2b41      	cmp	r3, #65	@ 0x41
 8001fcc:	d146      	bne.n	800205c <parse_status+0xca>
        const char *f6 = nth_field(line, 6);
 8001fce:	2106      	movs	r1, #6
 8001fd0:	6878      	ldr	r0, [r7, #4]
 8001fd2:	f7ff ff66 	bl	8001ea2 <nth_field>
 8001fd6:	6178      	str	r0, [r7, #20]
        const char *f7 = nth_field(line, 7);
 8001fd8:	2107      	movs	r1, #7
 8001fda:	6878      	ldr	r0, [r7, #4]
 8001fdc:	f7ff ff61 	bl	8001ea2 <nth_field>
 8001fe0:	6138      	str	r0, [r7, #16]
        const char *f8 = nth_field(line, 8);
 8001fe2:	2108      	movs	r1, #8
 8001fe4:	6878      	ldr	r0, [r7, #4]
 8001fe6:	f7ff ff5c 	bl	8001ea2 <nth_field>
 8001fea:	60f8      	str	r0, [r7, #12]
        if (f6 && *f6) st->fix_quality = atoi(f6);
 8001fec:	697b      	ldr	r3, [r7, #20]
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d009      	beq.n	8002006 <parse_status+0x74>
 8001ff2:	697b      	ldr	r3, [r7, #20]
 8001ff4:	781b      	ldrb	r3, [r3, #0]
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d005      	beq.n	8002006 <parse_status+0x74>
 8001ffa:	6978      	ldr	r0, [r7, #20]
 8001ffc:	f007 fea4 	bl	8009d48 <atoi>
 8002000:	4602      	mov	r2, r0
 8002002:	683b      	ldr	r3, [r7, #0]
 8002004:	605a      	str	r2, [r3, #4]
        if (f7 && *f7) st->sats_used   = atoi(f7);
 8002006:	693b      	ldr	r3, [r7, #16]
 8002008:	2b00      	cmp	r3, #0
 800200a:	d009      	beq.n	8002020 <parse_status+0x8e>
 800200c:	693b      	ldr	r3, [r7, #16]
 800200e:	781b      	ldrb	r3, [r3, #0]
 8002010:	2b00      	cmp	r3, #0
 8002012:	d005      	beq.n	8002020 <parse_status+0x8e>
 8002014:	6938      	ldr	r0, [r7, #16]
 8002016:	f007 fe97 	bl	8009d48 <atoi>
 800201a:	4602      	mov	r2, r0
 800201c:	683b      	ldr	r3, [r7, #0]
 800201e:	609a      	str	r2, [r3, #8]
        if (f8 && *f8) st->hdop        = (float)atof(f8);
 8002020:	68fb      	ldr	r3, [r7, #12]
 8002022:	2b00      	cmp	r3, #0
 8002024:	d00d      	beq.n	8002042 <parse_status+0xb0>
 8002026:	68fb      	ldr	r3, [r7, #12]
 8002028:	781b      	ldrb	r3, [r3, #0]
 800202a:	2b00      	cmp	r3, #0
 800202c:	d009      	beq.n	8002042 <parse_status+0xb0>
 800202e:	68f8      	ldr	r0, [r7, #12]
 8002030:	f007 fe87 	bl	8009d42 <atof>
 8002034:	eeb0 7b40 	vmov.f64	d7, d0
 8002038:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800203c:	683b      	ldr	r3, [r7, #0]
 800203e:	edc3 7a03 	vstr	s15, [r3, #12]
        st->has_fix |= st->fix_quality > 0;
 8002042:	683b      	ldr	r3, [r7, #0]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	683a      	ldr	r2, [r7, #0]
 8002048:	6852      	ldr	r2, [r2, #4]
 800204a:	2a00      	cmp	r2, #0
 800204c:	bfcc      	ite	gt
 800204e:	2201      	movgt	r2, #1
 8002050:	2200      	movle	r2, #0
 8002052:	b2d2      	uxtb	r2, r2
 8002054:	431a      	orrs	r2, r3
 8002056:	683b      	ldr	r3, [r7, #0]
 8002058:	601a      	str	r2, [r3, #0]
    if (line[3]=='G' && line[4]=='G' && line[5]=='A') {
 800205a:	e027      	b.n	80020ac <parse_status+0x11a>
    } else if (line[3]=='R' && line[4]=='M' && line[5]=='C') {
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	3303      	adds	r3, #3
 8002060:	781b      	ldrb	r3, [r3, #0]
 8002062:	2b52      	cmp	r3, #82	@ 0x52
 8002064:	d122      	bne.n	80020ac <parse_status+0x11a>
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	3304      	adds	r3, #4
 800206a:	781b      	ldrb	r3, [r3, #0]
 800206c:	2b4d      	cmp	r3, #77	@ 0x4d
 800206e:	d11d      	bne.n	80020ac <parse_status+0x11a>
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	3305      	adds	r3, #5
 8002074:	781b      	ldrb	r3, [r3, #0]
 8002076:	2b43      	cmp	r3, #67	@ 0x43
 8002078:	d118      	bne.n	80020ac <parse_status+0x11a>
        const char *f2 = nth_field(line, 2);
 800207a:	2102      	movs	r1, #2
 800207c:	6878      	ldr	r0, [r7, #4]
 800207e:	f7ff ff10 	bl	8001ea2 <nth_field>
 8002082:	60b8      	str	r0, [r7, #8]
        if (f2 && *f2) st->rmc_status = *f2;   // 'A' or 'V'
 8002084:	68bb      	ldr	r3, [r7, #8]
 8002086:	2b00      	cmp	r3, #0
 8002088:	d007      	beq.n	800209a <parse_status+0x108>
 800208a:	68bb      	ldr	r3, [r7, #8]
 800208c:	781b      	ldrb	r3, [r3, #0]
 800208e:	2b00      	cmp	r3, #0
 8002090:	d003      	beq.n	800209a <parse_status+0x108>
 8002092:	68bb      	ldr	r3, [r7, #8]
 8002094:	781a      	ldrb	r2, [r3, #0]
 8002096:	683b      	ldr	r3, [r7, #0]
 8002098:	741a      	strb	r2, [r3, #16]
        if (st->rmc_status == 'A') st->has_fix = 1;
 800209a:	683b      	ldr	r3, [r7, #0]
 800209c:	7c1b      	ldrb	r3, [r3, #16]
 800209e:	2b41      	cmp	r3, #65	@ 0x41
 80020a0:	d104      	bne.n	80020ac <parse_status+0x11a>
 80020a2:	683b      	ldr	r3, [r7, #0]
 80020a4:	2201      	movs	r2, #1
 80020a6:	601a      	str	r2, [r3, #0]
 80020a8:	e000      	b.n	80020ac <parse_status+0x11a>
    if (!st || !nmea_checksum_ok(line)) return;
 80020aa:	bf00      	nop
    }
}
 80020ac:	3718      	adds	r7, #24
 80020ae:	46bd      	mov	sp, r7
 80020b0:	bd80      	pop	{r7, pc}
	...

080020b4 <gps_probe>:

/* ---- vtable ops ---- */
static HAL_StatusTypeDef gps_probe(sensor_if_t *self) {
 80020b4:	b580      	push	{r7, lr}
 80020b6:	b084      	sub	sp, #16
 80020b8:	af00      	add	r7, sp, #0
 80020ba:	6078      	str	r0, [r7, #4]
    gps6m_t *s = (gps6m_t*)self->state;
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	685b      	ldr	r3, [r3, #4]
 80020c0:	60fb      	str	r3, [r7, #12]
    printf("[gps] probe start (UART=%p)\n", (void*)s->uart);
 80020c2:	68fb      	ldr	r3, [r7, #12]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	4619      	mov	r1, r3
 80020c8:	480c      	ldr	r0, [pc, #48]	@ (80020fc <gps_probe+0x48>)
 80020ca:	f009 f97d 	bl	800b3c8 <iprintf>
    uart_sniff(s->uart);
 80020ce:	68fb      	ldr	r3, [r7, #12]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	4618      	mov	r0, r3
 80020d4:	f7ff fb74 	bl	80017c0 <uart_sniff>
    HAL_StatusTypeDef st = nmea_probe_stream(s->uart);
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	4618      	mov	r0, r3
 80020de:	f7ff fba5 	bl	800182c <nmea_probe_stream>
 80020e2:	4603      	mov	r3, r0
 80020e4:	72fb      	strb	r3, [r7, #11]
    printf("[gps] probe done: %ld\n", (long)st);
 80020e6:	7afb      	ldrb	r3, [r7, #11]
 80020e8:	4619      	mov	r1, r3
 80020ea:	4805      	ldr	r0, [pc, #20]	@ (8002100 <gps_probe+0x4c>)
 80020ec:	f009 f96c 	bl	800b3c8 <iprintf>
    return st;
 80020f0:	7afb      	ldrb	r3, [r7, #11]
}
 80020f2:	4618      	mov	r0, r3
 80020f4:	3710      	adds	r7, #16
 80020f6:	46bd      	mov	sp, r7
 80020f8:	bd80      	pop	{r7, pc}
 80020fa:	bf00      	nop
 80020fc:	0800dda8 	.word	0x0800dda8
 8002100:	0800ddc8 	.word	0x0800ddc8

08002104 <gps_init>:

static HAL_StatusTypeDef gps_init(sensor_if_t *self) {
 8002104:	b580      	push	{r7, lr}
 8002106:	b0ac      	sub	sp, #176	@ 0xb0
 8002108:	af02      	add	r7, sp, #8
 800210a:	6078      	str	r0, [r7, #4]
    gps6m_t *s = (gps6m_t*)self->state;
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	685b      	ldr	r3, [r3, #4]
 8002110:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    char line[128];
    gps_fix_status_t fs = {0};
 8002114:	f107 0308 	add.w	r3, r7, #8
 8002118:	2200      	movs	r2, #0
 800211a:	601a      	str	r2, [r3, #0]
 800211c:	605a      	str	r2, [r3, #4]
 800211e:	609a      	str	r2, [r3, #8]
 8002120:	60da      	str	r2, [r3, #12]
 8002122:	611a      	str	r2, [r3, #16]
    uint32_t t0 = HAL_GetTick();
 8002124:	f002 fa1c 	bl	8004560 <HAL_GetTick>
 8002128:	f8c7 00a0 	str.w	r0, [r7, #160]	@ 0xa0
    const uint32_t MAX_WAIT = 30000;
 800212c:	f247 5330 	movw	r3, #30000	@ 0x7530
 8002130:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c

    printf("[gps] waiting for fix (%lu ms)\n", (unsigned long)MAX_WAIT);
 8002134:	f8d7 109c 	ldr.w	r1, [r7, #156]	@ 0x9c
 8002138:	4831      	ldr	r0, [pc, #196]	@ (8002200 <gps_init+0xfc>)
 800213a:	f009 f945 	bl	800b3c8 <iprintf>
    while ((HAL_GetTick() - t0) < MAX_WAIT) {
 800213e:	e04d      	b.n	80021dc <gps_init+0xd8>
        if (nmea_read_line(s->uart, line, sizeof line, 1200) != HAL_OK) continue;
 8002140:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8002144:	6818      	ldr	r0, [r3, #0]
 8002146:	f107 011c 	add.w	r1, r7, #28
 800214a:	f44f 6396 	mov.w	r3, #1200	@ 0x4b0
 800214e:	2280      	movs	r2, #128	@ 0x80
 8002150:	f7ff fedc 	bl	8001f0c <nmea_read_line>
 8002154:	4603      	mov	r3, r0
 8002156:	2b00      	cmp	r3, #0
 8002158:	d13f      	bne.n	80021da <gps_init+0xd6>
        parse_status(line, &fs);
 800215a:	f107 0208 	add.w	r2, r7, #8
 800215e:	f107 031c 	add.w	r3, r7, #28
 8002162:	4611      	mov	r1, r2
 8002164:	4618      	mov	r0, r3
 8002166:	f7ff ff14 	bl	8001f92 <parse_status>
        if (line[3]=='G' && line[4]=='G' && line[5]=='A') {
 800216a:	7ffb      	ldrb	r3, [r7, #31]
 800216c:	2b47      	cmp	r3, #71	@ 0x47
 800216e:	d114      	bne.n	800219a <gps_init+0x96>
 8002170:	f897 3020 	ldrb.w	r3, [r7, #32]
 8002174:	2b47      	cmp	r3, #71	@ 0x47
 8002176:	d110      	bne.n	800219a <gps_init+0x96>
 8002178:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 800217c:	2b41      	cmp	r3, #65	@ 0x41
 800217e:	d10c      	bne.n	800219a <gps_init+0x96>
            printf("[gps] GGA fix=%d sats=%d hdop=%.2f\n", fs.fix_quality, fs.sats_used, fs.hdop);
 8002180:	68fb      	ldr	r3, [r7, #12]
 8002182:	693a      	ldr	r2, [r7, #16]
 8002184:	edd7 7a05 	vldr	s15, [r7, #20]
 8002188:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800218c:	ed8d 7b00 	vstr	d7, [sp]
 8002190:	4619      	mov	r1, r3
 8002192:	481c      	ldr	r0, [pc, #112]	@ (8002204 <gps_init+0x100>)
 8002194:	f009 f918 	bl	800b3c8 <iprintf>
 8002198:	e014      	b.n	80021c4 <gps_init+0xc0>
        } else if (line[3]=='R' && line[4]=='M' && line[5]=='C') {
 800219a:	7ffb      	ldrb	r3, [r7, #31]
 800219c:	2b52      	cmp	r3, #82	@ 0x52
 800219e:	d111      	bne.n	80021c4 <gps_init+0xc0>
 80021a0:	f897 3020 	ldrb.w	r3, [r7, #32]
 80021a4:	2b4d      	cmp	r3, #77	@ 0x4d
 80021a6:	d10d      	bne.n	80021c4 <gps_init+0xc0>
 80021a8:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 80021ac:	2b43      	cmp	r3, #67	@ 0x43
 80021ae:	d109      	bne.n	80021c4 <gps_init+0xc0>
            printf("[gps] RMC status=%c\n", fs.rmc_status ? fs.rmc_status : '?');
 80021b0:	7e3b      	ldrb	r3, [r7, #24]
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d001      	beq.n	80021ba <gps_init+0xb6>
 80021b6:	7e3b      	ldrb	r3, [r7, #24]
 80021b8:	e000      	b.n	80021bc <gps_init+0xb8>
 80021ba:	233f      	movs	r3, #63	@ 0x3f
 80021bc:	4619      	mov	r1, r3
 80021be:	4812      	ldr	r0, [pc, #72]	@ (8002208 <gps_init+0x104>)
 80021c0:	f009 f902 	bl	800b3c8 <iprintf>
        }
        if (fs.has_fix && fs.sats_used >= 4) {
 80021c4:	68bb      	ldr	r3, [r7, #8]
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d008      	beq.n	80021dc <gps_init+0xd8>
 80021ca:	693b      	ldr	r3, [r7, #16]
 80021cc:	2b03      	cmp	r3, #3
 80021ce:	dd05      	ble.n	80021dc <gps_init+0xd8>
            printf("[gps] fix acquired\n");
 80021d0:	480e      	ldr	r0, [pc, #56]	@ (800220c <gps_init+0x108>)
 80021d2:	f009 f969 	bl	800b4a8 <puts>
            return HAL_OK;
 80021d6:	2300      	movs	r3, #0
 80021d8:	e00e      	b.n	80021f8 <gps_init+0xf4>
        if (nmea_read_line(s->uart, line, sizeof line, 1200) != HAL_OK) continue;
 80021da:	bf00      	nop
    while ((HAL_GetTick() - t0) < MAX_WAIT) {
 80021dc:	f002 f9c0 	bl	8004560 <HAL_GetTick>
 80021e0:	4602      	mov	r2, r0
 80021e2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80021e6:	1ad3      	subs	r3, r2, r3
 80021e8:	f8d7 209c 	ldr.w	r2, [r7, #156]	@ 0x9c
 80021ec:	429a      	cmp	r2, r3
 80021ee:	d8a7      	bhi.n	8002140 <gps_init+0x3c>
        }
    }
    printf("[gps] no fix within window\n");
 80021f0:	4807      	ldr	r0, [pc, #28]	@ (8002210 <gps_init+0x10c>)
 80021f2:	f009 f959 	bl	800b4a8 <puts>
    return HAL_TIMEOUT;
 80021f6:	2303      	movs	r3, #3
}
 80021f8:	4618      	mov	r0, r3
 80021fa:	37a8      	adds	r7, #168	@ 0xa8
 80021fc:	46bd      	mov	sp, r7
 80021fe:	bd80      	pop	{r7, pc}
 8002200:	0800dde0 	.word	0x0800dde0
 8002204:	0800de00 	.word	0x0800de00
 8002208:	0800de24 	.word	0x0800de24
 800220c:	0800de3c 	.word	0x0800de3c
 8002210:	0800de50 	.word	0x0800de50

08002214 <gps_read>:

static HAL_StatusTypeDef gps_read(sensor_if_t *self) {
 8002214:	b580      	push	{r7, lr}
 8002216:	b0a8      	sub	sp, #160	@ 0xa0
 8002218:	af00      	add	r7, sp, #0
 800221a:	6078      	str	r0, [r7, #4]
    gps6m_t *s = (gps6m_t*)self->state;
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	685b      	ldr	r3, [r3, #4]
 8002220:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    char line[128];
    uint32_t t0 = HAL_GetTick();
 8002224:	f002 f99c 	bl	8004560 <HAL_GetTick>
 8002228:	f8c7 0094 	str.w	r0, [r7, #148]	@ 0x94
    const uint32_t BUDGET_MS   = 200;   // keep it snappy
 800222c:	23c8      	movs	r3, #200	@ 0xc8
 800222e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    const uint32_t FIX_HOLD_MS = 2000;  // keep fix valid for 2 s since last confirmed fix
 8002232:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8002236:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c

    int got_any = 0;
 800223a:	2300      	movs	r3, #0
 800223c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c

    while ((HAL_GetTick() - t0) < BUDGET_MS) {
 8002240:	e032      	b.n	80022a8 <gps_read+0x94>
        if (nmea_read_line(s->uart, line, sizeof line, 80) != HAL_OK) break;
 8002242:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002246:	6818      	ldr	r0, [r3, #0]
 8002248:	f107 010c 	add.w	r1, r7, #12
 800224c:	2350      	movs	r3, #80	@ 0x50
 800224e:	2280      	movs	r2, #128	@ 0x80
 8002250:	f7ff fe5c 	bl	8001f0c <nmea_read_line>
 8002254:	4603      	mov	r3, r0
 8002256:	2b00      	cmp	r3, #0
 8002258:	d131      	bne.n	80022be <gps_read+0xaa>
        got_any = 1;
 800225a:	2301      	movs	r3, #1
 800225c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c

        // classify & parse
        if (line[0] == '$') {
 8002260:	7b3b      	ldrb	r3, [r7, #12]
 8002262:	2b24      	cmp	r3, #36	@ 0x24
 8002264:	d120      	bne.n	80022a8 <gps_read+0x94>
            if (line[3]=='R' && line[4]=='M' && line[5]=='C') {
 8002266:	7bfb      	ldrb	r3, [r7, #15]
 8002268:	2b52      	cmp	r3, #82	@ 0x52
 800226a:	d10d      	bne.n	8002288 <gps_read+0x74>
 800226c:	7c3b      	ldrb	r3, [r7, #16]
 800226e:	2b4d      	cmp	r3, #77	@ 0x4d
 8002270:	d10a      	bne.n	8002288 <gps_read+0x74>
 8002272:	7c7b      	ldrb	r3, [r7, #17]
 8002274:	2b43      	cmp	r3, #67	@ 0x43
 8002276:	d107      	bne.n	8002288 <gps_read+0x74>
                parse_RMC(line, s);
 8002278:	f107 030c 	add.w	r3, r7, #12
 800227c:	f8d7 1098 	ldr.w	r1, [r7, #152]	@ 0x98
 8002280:	4618      	mov	r0, r3
 8002282:	f7ff fc13 	bl	8001aac <parse_RMC>
 8002286:	e00f      	b.n	80022a8 <gps_read+0x94>
            } else if (line[3]=='G' && line[4]=='G' && line[5]=='A') {
 8002288:	7bfb      	ldrb	r3, [r7, #15]
 800228a:	2b47      	cmp	r3, #71	@ 0x47
 800228c:	d10c      	bne.n	80022a8 <gps_read+0x94>
 800228e:	7c3b      	ldrb	r3, [r7, #16]
 8002290:	2b47      	cmp	r3, #71	@ 0x47
 8002292:	d109      	bne.n	80022a8 <gps_read+0x94>
 8002294:	7c7b      	ldrb	r3, [r7, #17]
 8002296:	2b41      	cmp	r3, #65	@ 0x41
 8002298:	d106      	bne.n	80022a8 <gps_read+0x94>
                parse_GGA(line, s);
 800229a:	f107 030c 	add.w	r3, r7, #12
 800229e:	f8d7 1098 	ldr.w	r1, [r7, #152]	@ 0x98
 80022a2:	4618      	mov	r0, r3
 80022a4:	f7ff fcaa 	bl	8001bfc <parse_GGA>
    while ((HAL_GetTick() - t0) < BUDGET_MS) {
 80022a8:	f002 f95a 	bl	8004560 <HAL_GetTick>
 80022ac:	4602      	mov	r2, r0
 80022ae:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80022b2:	1ad3      	subs	r3, r2, r3
 80022b4:	f8d7 2090 	ldr.w	r2, [r7, #144]	@ 0x90
 80022b8:	429a      	cmp	r2, r3
 80022ba:	d8c2      	bhi.n	8002242 <gps_read+0x2e>
 80022bc:	e000      	b.n	80022c0 <gps_read+0xac>
        if (nmea_read_line(s->uart, line, sizeof line, 80) != HAL_OK) break;
 80022be:	bf00      	nop
            }
        }
    }

    if (got_any) s->last_update_ms = HAL_GetTick();
 80022c0:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	d005      	beq.n	80022d4 <gps_read+0xc0>
 80022c8:	f002 f94a 	bl	8004560 <HAL_GetTick>
 80022cc:	4602      	mov	r2, r0
 80022ce:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80022d2:	631a      	str	r2, [r3, #48]	@ 0x30

    // AGE-OUT: only drop fix if we’ve gone too long without confirming it
    if (s->has_fix) {
 80022d4:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80022d8:	791b      	ldrb	r3, [r3, #4]
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d00e      	beq.n	80022fc <gps_read+0xe8>
        if ((HAL_GetTick() - s->last_fix_ms) > FIX_HOLD_MS) {
 80022de:	f002 f93f 	bl	8004560 <HAL_GetTick>
 80022e2:	4602      	mov	r2, r0
 80022e4:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80022e8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80022ea:	1ad3      	subs	r3, r2, r3
 80022ec:	f8d7 208c 	ldr.w	r2, [r7, #140]	@ 0x8c
 80022f0:	429a      	cmp	r2, r3
 80022f2:	d203      	bcs.n	80022fc <gps_read+0xe8>
            s->has_fix = 0;   // stale fix; keep lat/lon/alt but mark invalid
 80022f4:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80022f8:	2200      	movs	r2, #0
 80022fa:	711a      	strb	r2, [r3, #4]
        }
    }

    return HAL_OK;
 80022fc:	2300      	movs	r3, #0
}
 80022fe:	4618      	mov	r0, r3
 8002300:	37a0      	adds	r7, #160	@ 0xa0
 8002302:	46bd      	mov	sp, r7
 8002304:	bd80      	pop	{r7, pc}

08002306 <gps_whoami>:



static HAL_StatusTypeDef gps_whoami(sensor_if_t *self, uint8_t *out) {
 8002306:	b580      	push	{r7, lr}
 8002308:	b084      	sub	sp, #16
 800230a:	af00      	add	r7, sp, #0
 800230c:	6078      	str	r0, [r7, #4]
 800230e:	6039      	str	r1, [r7, #0]
    gps6m_t *s = (gps6m_t*)self->state;
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	685b      	ldr	r3, [r3, #4]
 8002314:	60fb      	str	r3, [r7, #12]
    if (nmea_probe_stream(s->uart) == HAL_OK) { if (out) *out = 'G'; return HAL_OK; }
 8002316:	68fb      	ldr	r3, [r7, #12]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	4618      	mov	r0, r3
 800231c:	f7ff fa86 	bl	800182c <nmea_probe_stream>
 8002320:	4603      	mov	r3, r0
 8002322:	2b00      	cmp	r3, #0
 8002324:	d107      	bne.n	8002336 <gps_whoami+0x30>
 8002326:	683b      	ldr	r3, [r7, #0]
 8002328:	2b00      	cmp	r3, #0
 800232a:	d002      	beq.n	8002332 <gps_whoami+0x2c>
 800232c:	683b      	ldr	r3, [r7, #0]
 800232e:	2247      	movs	r2, #71	@ 0x47
 8002330:	701a      	strb	r2, [r3, #0]
 8002332:	2300      	movs	r3, #0
 8002334:	e000      	b.n	8002338 <gps_whoami+0x32>
    return HAL_ERROR;
 8002336:	2301      	movs	r3, #1
}
 8002338:	4618      	mov	r0, r3
 800233a:	3710      	adds	r7, #16
 800233c:	46bd      	mov	sp, r7
 800233e:	bd80      	pop	{r7, pc}

08002340 <gps6m_bind>:
    .init   = gps_init,
    .read   = gps_read,
    .whoami = gps_whoami
};

void gps6m_bind(sensor_if_t *iface, gps6m_t *inst, UART_HandleTypeDef *uart) {
 8002340:	b580      	push	{r7, lr}
 8002342:	b084      	sub	sp, #16
 8002344:	af00      	add	r7, sp, #0
 8002346:	60f8      	str	r0, [r7, #12]
 8002348:	60b9      	str	r1, [r7, #8]
 800234a:	607a      	str	r2, [r7, #4]
    memset(inst, 0, sizeof(*inst));   // ensure clean state
 800234c:	2238      	movs	r2, #56	@ 0x38
 800234e:	2100      	movs	r1, #0
 8002350:	68b8      	ldr	r0, [r7, #8]
 8002352:	f009 fa3d 	bl	800b7d0 <memset>
    inst->uart   = uart;
 8002356:	68bb      	ldr	r3, [r7, #8]
 8002358:	687a      	ldr	r2, [r7, #4]
 800235a:	601a      	str	r2, [r3, #0]
    iface->vTable= &GPS_VTBL;
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	4a04      	ldr	r2, [pc, #16]	@ (8002370 <gps6m_bind+0x30>)
 8002360:	601a      	str	r2, [r3, #0]
    iface->state = inst;
 8002362:	68fb      	ldr	r3, [r7, #12]
 8002364:	68ba      	ldr	r2, [r7, #8]
 8002366:	605a      	str	r2, [r3, #4]
}
 8002368:	bf00      	nop
 800236a:	3710      	adds	r7, #16
 800236c:	46bd      	mov	sp, r7
 800236e:	bd80      	pop	{r7, pc}
 8002370:	0800e020 	.word	0x0800e020

08002374 <icm_probe>:
static inline uint8_t clip3(uint8_t x);
static inline uint8_t clip4(uint8_t x);
static icm42688_t* getSelfStatePointer(sensor_if_t *self);

/* ---------- vtable ops ---------- */
static HAL_StatusTypeDef icm_probe(sensor_if_t *self) {
 8002374:	b580      	push	{r7, lr}
 8002376:	b084      	sub	sp, #16
 8002378:	af00      	add	r7, sp, #0
 800237a:	6078      	str	r0, [r7, #4]
	icm42688_t *s = getSelfStatePointer(self);
 800237c:	6878      	ldr	r0, [r7, #4]
 800237e:	f000 fddc 	bl	8002f3a <getSelfStatePointer>
 8002382:	60f8      	str	r0, [r7, #12]
	if (!s) return HAL_ERROR;
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	2b00      	cmp	r3, #0
 8002388:	d101      	bne.n	800238e <icm_probe+0x1a>
 800238a:	2301      	movs	r3, #1
 800238c:	e02d      	b.n	80023ea <icm_probe+0x76>

	//Get the id.
	uint8_t id = 0;
 800238e:	2300      	movs	r3, #0
 8002390:	72bb      	strb	r3, [r7, #10]
	HAL_StatusTypeDef st = icm_whoami(self, &id);
 8002392:	f107 030a 	add.w	r3, r7, #10
 8002396:	4619      	mov	r1, r3
 8002398:	6878      	ldr	r0, [r7, #4]
 800239a:	f000 f8b7 	bl	800250c <icm_whoami>
 800239e:	4603      	mov	r3, r0
 80023a0:	72fb      	strb	r3, [r7, #11]
	if (st != HAL_OK) {
 80023a2:	7afb      	ldrb	r3, [r7, #11]
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	d011      	beq.n	80023cc <icm_probe+0x58>
		s->last_hal_err = HAL_I2C_GetError(s->i2c);
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	4618      	mov	r0, r3
 80023ae:	f002 ff1d 	bl	80051ec <HAL_I2C_GetError>
 80023b2:	4602      	mov	r2, r0
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	609a      	str	r2, [r3, #8]
		s->last_err = (st == HAL_TIMEOUT) ? ICM_ERR_TIMEOUT : ICM_ERR_I2C;
 80023b8:	7afb      	ldrb	r3, [r7, #11]
 80023ba:	2b03      	cmp	r3, #3
 80023bc:	d101      	bne.n	80023c2 <icm_probe+0x4e>
 80023be:	2203      	movs	r2, #3
 80023c0:	e000      	b.n	80023c4 <icm_probe+0x50>
 80023c2:	2202      	movs	r2, #2
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	715a      	strb	r2, [r3, #5]
		return st;
 80023c8:	7afb      	ldrb	r3, [r7, #11]
 80023ca:	e00e      	b.n	80023ea <icm_probe+0x76>
	}

	//Check that the id matches the documentation.
	if (id != ICM_WHO_AM_I_DEFAULT) {
 80023cc:	7abb      	ldrb	r3, [r7, #10]
 80023ce:	2b47      	cmp	r3, #71	@ 0x47
 80023d0:	d007      	beq.n	80023e2 <icm_probe+0x6e>
		s->last_err = ICM_ERR_WHOAMI_MISMATCH;
 80023d2:	68fb      	ldr	r3, [r7, #12]
 80023d4:	2204      	movs	r2, #4
 80023d6:	715a      	strb	r2, [r3, #5]
		s->last_whoami = id;
 80023d8:	7aba      	ldrb	r2, [r7, #10]
 80023da:	68fb      	ldr	r3, [r7, #12]
 80023dc:	731a      	strb	r2, [r3, #12]
		return HAL_ERROR;
 80023de:	2301      	movs	r3, #1
 80023e0:	e003      	b.n	80023ea <icm_probe+0x76>
	}

	s->last_err = ICM_OK;
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	2200      	movs	r2, #0
 80023e6:	715a      	strb	r2, [r3, #5]
	return HAL_OK;
 80023e8:	2300      	movs	r3, #0
}
 80023ea:	4618      	mov	r0, r3
 80023ec:	3710      	adds	r7, #16
 80023ee:	46bd      	mov	sp, r7
 80023f0:	bd80      	pop	{r7, pc}

080023f2 <icm_init>:

static HAL_StatusTypeDef icm_init(sensor_if_t *self) {
 80023f2:	b580      	push	{r7, lr}
 80023f4:	b086      	sub	sp, #24
 80023f6:	af02      	add	r7, sp, #8
 80023f8:	6078      	str	r0, [r7, #4]
	icm42688_t *s = getSelfStatePointer(self);
 80023fa:	6878      	ldr	r0, [r7, #4]
 80023fc:	f000 fd9d 	bl	8002f3a <getSelfStatePointer>
 8002400:	60f8      	str	r0, [r7, #12]
	if (!s) return HAL_ERROR;
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	2b00      	cmp	r3, #0
 8002406:	d101      	bne.n	800240c <icm_init+0x1a>
 8002408:	2301      	movs	r3, #1
 800240a:	e066      	b.n	80024da <icm_init+0xe8>

	//TODO: Configure sensor filters, etc.

	HAL_StatusTypeDef response;

	response = icm_soft_reset(s);
 800240c:	68f8      	ldr	r0, [r7, #12]
 800240e:	f000 fbd7 	bl	8002bc0 <icm_soft_reset>
 8002412:	4603      	mov	r3, r0
 8002414:	72fb      	strb	r3, [r7, #11]
	if (response != HAL_OK){
 8002416:	7afb      	ldrb	r3, [r7, #11]
 8002418:	2b00      	cmp	r3, #0
 800241a:	d004      	beq.n	8002426 <icm_init+0x34>
		s->last_err = ICM_ERR_NOT_INITIALIZED;
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	2205      	movs	r2, #5
 8002420:	715a      	strb	r2, [r3, #5]
		return HAL_ERROR;
 8002422:	2301      	movs	r3, #1
 8002424:	e059      	b.n	80024da <icm_init+0xe8>
	}

	HAL_Delay(500);
 8002426:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800242a:	f002 f8a5 	bl	8004578 <HAL_Delay>

	// Put in standby power modes
	response = icm_power_mgmt0_config(s, /*gyro_mode*/0, /*accel_mode*/0, /*temp_disable*/1, /*idle*/0);
 800242e:	2300      	movs	r3, #0
 8002430:	9300      	str	r3, [sp, #0]
 8002432:	2301      	movs	r3, #1
 8002434:	2200      	movs	r2, #0
 8002436:	2100      	movs	r1, #0
 8002438:	68f8      	ldr	r0, [r7, #12]
 800243a:	f000 f8a1 	bl	8002580 <icm_power_mgmt0_config>
 800243e:	4603      	mov	r3, r0
 8002440:	72fb      	strb	r3, [r7, #11]
	if (response != HAL_OK){
 8002442:	7afb      	ldrb	r3, [r7, #11]
 8002444:	2b00      	cmp	r3, #0
 8002446:	d004      	beq.n	8002452 <icm_init+0x60>
		s->last_err = ICM_ERR_NOT_INITIALIZED;
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	2205      	movs	r2, #5
 800244c:	715a      	strb	r2, [r3, #5]
		return HAL_ERROR;
 800244e:	2301      	movs	r3, #1
 8002450:	e043      	b.n	80024da <icm_init+0xe8>
	}

	HAL_Delay(500);
 8002452:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8002456:	f002 f88f 	bl	8004578 <HAL_Delay>

	response = icm_gyro_config0(s, 0, 6);
 800245a:	2206      	movs	r2, #6
 800245c:	2100      	movs	r1, #0
 800245e:	68f8      	ldr	r0, [r7, #12]
 8002460:	f000 f92c 	bl	80026bc <icm_gyro_config0>
 8002464:	4603      	mov	r3, r0
 8002466:	72fb      	strb	r3, [r7, #11]
	if (response != HAL_OK){
 8002468:	7afb      	ldrb	r3, [r7, #11]
 800246a:	2b00      	cmp	r3, #0
 800246c:	d004      	beq.n	8002478 <icm_init+0x86>
		s->last_err = ICM_ERR_NOT_INITIALIZED;
 800246e:	68fb      	ldr	r3, [r7, #12]
 8002470:	2205      	movs	r2, #5
 8002472:	715a      	strb	r2, [r3, #5]
		return HAL_ERROR;
 8002474:	2301      	movs	r3, #1
 8002476:	e030      	b.n	80024da <icm_init+0xe8>
	}

	HAL_Delay(500);
 8002478:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800247c:	f002 f87c 	bl	8004578 <HAL_Delay>

	response = icm_accel_config0(s, 0 , 6);
 8002480:	2206      	movs	r2, #6
 8002482:	2100      	movs	r1, #0
 8002484:	68f8      	ldr	r0, [r7, #12]
 8002486:	f000 fa63 	bl	8002950 <icm_accel_config0>
 800248a:	4603      	mov	r3, r0
 800248c:	72fb      	strb	r3, [r7, #11]
	if (response != HAL_OK){
 800248e:	7afb      	ldrb	r3, [r7, #11]
 8002490:	2b00      	cmp	r3, #0
 8002492:	d004      	beq.n	800249e <icm_init+0xac>
		s->last_err = ICM_ERR_NOT_INITIALIZED;
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	2205      	movs	r2, #5
 8002498:	715a      	strb	r2, [r3, #5]
		return HAL_ERROR;
 800249a:	2301      	movs	r3, #1
 800249c:	e01d      	b.n	80024da <icm_init+0xe8>
	}

	HAL_Delay(500);
 800249e:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80024a2:	f002 f869 	bl	8004578 <HAL_Delay>

	// Configure power modes
	response = icm_power_mgmt0_config(s, /*gyro_mode*/2, /*accel_mode*/2, /*temp_disable*/0, /*idle*/0);
 80024a6:	2300      	movs	r3, #0
 80024a8:	9300      	str	r3, [sp, #0]
 80024aa:	2300      	movs	r3, #0
 80024ac:	2202      	movs	r2, #2
 80024ae:	2102      	movs	r1, #2
 80024b0:	68f8      	ldr	r0, [r7, #12]
 80024b2:	f000 f865 	bl	8002580 <icm_power_mgmt0_config>
 80024b6:	4603      	mov	r3, r0
 80024b8:	72fb      	strb	r3, [r7, #11]
	if (response != HAL_OK){
 80024ba:	7afb      	ldrb	r3, [r7, #11]
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d004      	beq.n	80024ca <icm_init+0xd8>
		s->last_err = ICM_ERR_NOT_INITIALIZED;
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	2205      	movs	r2, #5
 80024c4:	715a      	strb	r2, [r3, #5]
		return HAL_ERROR;
 80024c6:	2301      	movs	r3, #1
 80024c8:	e007      	b.n	80024da <icm_init+0xe8>
	}

	HAL_Delay(500);
 80024ca:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80024ce:	f002 f853 	bl	8004578 <HAL_Delay>

	s->last_err = ICM_OK;
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	2200      	movs	r2, #0
 80024d6:	715a      	strb	r2, [r3, #5]
	return HAL_OK;
 80024d8:	2300      	movs	r3, #0
}
 80024da:	4618      	mov	r0, r3
 80024dc:	3710      	adds	r7, #16
 80024de:	46bd      	mov	sp, r7
 80024e0:	bd80      	pop	{r7, pc}

080024e2 <icm_read>:

static HAL_StatusTypeDef icm_read(sensor_if_t *self) {
 80024e2:	b580      	push	{r7, lr}
 80024e4:	b084      	sub	sp, #16
 80024e6:	af00      	add	r7, sp, #0
 80024e8:	6078      	str	r0, [r7, #4]
	icm42688_t *s = getSelfStatePointer(self);
 80024ea:	6878      	ldr	r0, [r7, #4]
 80024ec:	f000 fd25 	bl	8002f3a <getSelfStatePointer>
 80024f0:	60f8      	str	r0, [r7, #12]
	if (!s) return HAL_ERROR;
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d101      	bne.n	80024fc <icm_read+0x1a>
 80024f8:	2301      	movs	r3, #1
 80024fa:	e003      	b.n	8002504 <icm_read+0x22>

	return icm_read_all(s);
 80024fc:	68f8      	ldr	r0, [r7, #12]
 80024fe:	f000 fc47 	bl	8002d90 <icm_read_all>
 8002502:	4603      	mov	r3, r0
}
 8002504:	4618      	mov	r0, r3
 8002506:	3710      	adds	r7, #16
 8002508:	46bd      	mov	sp, r7
 800250a:	bd80      	pop	{r7, pc}

0800250c <icm_whoami>:

static HAL_StatusTypeDef icm_whoami(sensor_if_t *self, uint8_t *out) {
 800250c:	b580      	push	{r7, lr}
 800250e:	b086      	sub	sp, #24
 8002510:	af02      	add	r7, sp, #8
 8002512:	6078      	str	r0, [r7, #4]
 8002514:	6039      	str	r1, [r7, #0]
	icm42688_t *s = getSelfStatePointer(self);
 8002516:	6878      	ldr	r0, [r7, #4]
 8002518:	f000 fd0f 	bl	8002f3a <getSelfStatePointer>
 800251c:	60f8      	str	r0, [r7, #12]
	if (!s) return HAL_ERROR;
 800251e:	68fb      	ldr	r3, [r7, #12]
 8002520:	2b00      	cmp	r3, #0
 8002522:	d101      	bne.n	8002528 <icm_whoami+0x1c>
 8002524:	2301      	movs	r3, #1
 8002526:	e00a      	b.n	800253e <icm_whoami+0x32>

	return rd(s->i2c, s->addr7, ICM_WHO_AM_I_REG, out, 1);
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	6818      	ldr	r0, [r3, #0]
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	7919      	ldrb	r1, [r3, #4]
 8002530:	2301      	movs	r3, #1
 8002532:	9300      	str	r3, [sp, #0]
 8002534:	683b      	ldr	r3, [r7, #0]
 8002536:	2275      	movs	r2, #117	@ 0x75
 8002538:	f000 fcb4 	bl	8002ea4 <rd>
 800253c:	4603      	mov	r3, r0
}
 800253e:	4618      	mov	r0, r3
 8002540:	3710      	adds	r7, #16
 8002542:	46bd      	mov	sp, r7
 8002544:	bd80      	pop	{r7, pc}
	...

08002548 <icm42688_bind>:
		.init  = icm_init,
		.read  = icm_read,
		.whoami= icm_whoami
};

void icm42688_bind(sensor_if_t *iface, icm42688_t *inst, I2C_HandleTypeDef *i2c, uint8_t addr7) {
 8002548:	b480      	push	{r7}
 800254a:	b085      	sub	sp, #20
 800254c:	af00      	add	r7, sp, #0
 800254e:	60f8      	str	r0, [r7, #12]
 8002550:	60b9      	str	r1, [r7, #8]
 8002552:	607a      	str	r2, [r7, #4]
 8002554:	70fb      	strb	r3, [r7, #3]
	inst->i2c  = i2c;
 8002556:	68bb      	ldr	r3, [r7, #8]
 8002558:	687a      	ldr	r2, [r7, #4]
 800255a:	601a      	str	r2, [r3, #0]
	inst->addr7 = addr7;
 800255c:	68bb      	ldr	r3, [r7, #8]
 800255e:	78fa      	ldrb	r2, [r7, #3]
 8002560:	711a      	strb	r2, [r3, #4]
	iface->vTable    = &ICM_VTBL;
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	4a05      	ldr	r2, [pc, #20]	@ (800257c <icm42688_bind+0x34>)
 8002566:	601a      	str	r2, [r3, #0]
	iface->state = inst;
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	68ba      	ldr	r2, [r7, #8]
 800256c:	605a      	str	r2, [r3, #4]
}
 800256e:	bf00      	nop
 8002570:	3714      	adds	r7, #20
 8002572:	46bd      	mov	sp, r7
 8002574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002578:	4770      	bx	lr
 800257a:	bf00      	nop
 800257c:	0800e030 	.word	0x0800e030

08002580 <icm_power_mgmt0_config>:
static HAL_StatusTypeDef icm_power_mgmt0_config(icm42688_t *self,
		uint8_t gyro_mode,
		uint8_t accel_mode,
		uint8_t temp_disable,
		uint8_t idle)
{
 8002580:	b590      	push	{r4, r7, lr}
 8002582:	b089      	sub	sp, #36	@ 0x24
 8002584:	af04      	add	r7, sp, #16
 8002586:	6078      	str	r0, [r7, #4]
 8002588:	4608      	mov	r0, r1
 800258a:	4611      	mov	r1, r2
 800258c:	461a      	mov	r2, r3
 800258e:	4603      	mov	r3, r0
 8002590:	70fb      	strb	r3, [r7, #3]
 8002592:	460b      	mov	r3, r1
 8002594:	70bb      	strb	r3, [r7, #2]
 8002596:	4613      	mov	r3, r2
 8002598:	707b      	strb	r3, [r7, #1]
	uint8_t v;
	HAL_StatusTypeDef st = HAL_I2C_Mem_Read(self->i2c, (self->addr7 << 1),
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	6818      	ldr	r0, [r3, #0]
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	791b      	ldrb	r3, [r3, #4]
 80025a2:	005b      	lsls	r3, r3, #1
 80025a4:	b299      	uxth	r1, r3
 80025a6:	23c8      	movs	r3, #200	@ 0xc8
 80025a8:	9302      	str	r3, [sp, #8]
 80025aa:	2301      	movs	r3, #1
 80025ac:	9301      	str	r3, [sp, #4]
 80025ae:	f107 030d 	add.w	r3, r7, #13
 80025b2:	9300      	str	r3, [sp, #0]
 80025b4:	2301      	movs	r3, #1
 80025b6:	224e      	movs	r2, #78	@ 0x4e
 80025b8:	f002 fcfe 	bl	8004fb8 <HAL_I2C_Mem_Read>
 80025bc:	4603      	mov	r3, r0
 80025be:	73fb      	strb	r3, [r7, #15]
			ICM_POWER_MGMT0_REG, I2C_MEMADD_SIZE_8BIT,
			&v, 1, 200);
	if (st != HAL_OK) {
 80025c0:	7bfb      	ldrb	r3, [r7, #15]
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d011      	beq.n	80025ea <icm_power_mgmt0_config+0x6a>
		self->last_hal_err = HAL_I2C_GetError(self->i2c);
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	4618      	mov	r0, r3
 80025cc:	f002 fe0e 	bl	80051ec <HAL_I2C_GetError>
 80025d0:	4602      	mov	r2, r0
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	609a      	str	r2, [r3, #8]
		self->last_err = (st == HAL_TIMEOUT) ? ICM_ERR_TIMEOUT : ICM_ERR_I2C;
 80025d6:	7bfb      	ldrb	r3, [r7, #15]
 80025d8:	2b03      	cmp	r3, #3
 80025da:	d101      	bne.n	80025e0 <icm_power_mgmt0_config+0x60>
 80025dc:	2203      	movs	r2, #3
 80025de:	e000      	b.n	80025e2 <icm_power_mgmt0_config+0x62>
 80025e0:	2202      	movs	r2, #2
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	715a      	strb	r2, [r3, #5]
		return st;
 80025e6:	7bfb      	ldrb	r3, [r7, #15]
 80025e8:	e064      	b.n	80026b4 <icm_power_mgmt0_config+0x134>
	}

	// Compose only the fields we intend to change
	uint8_t set =
			((clip2(gyro_mode)  << ICM_POWER_MGMT0_GYRO_MODE_POS)  & ICM_POWER_MGMT0_GYRO_MODE_Msk) |
 80025ea:	78fb      	ldrb	r3, [r7, #3]
 80025ec:	4618      	mov	r0, r3
 80025ee:	f000 fc77 	bl	8002ee0 <clip2>
 80025f2:	4603      	mov	r3, r0
 80025f4:	009b      	lsls	r3, r3, #2
 80025f6:	b2db      	uxtb	r3, r3
 80025f8:	f003 030c 	and.w	r3, r3, #12
 80025fc:	b2dc      	uxtb	r4, r3
			((clip2(accel_mode) << ICM_POWER_MGMT0_ACCEL_MODE_POS) & ICM_POWER_MGMT0_ACCEL_MODE_Msk) |
 80025fe:	78bb      	ldrb	r3, [r7, #2]
 8002600:	4618      	mov	r0, r3
 8002602:	f000 fc6d 	bl	8002ee0 <clip2>
 8002606:	4603      	mov	r3, r0
 8002608:	f003 0303 	and.w	r3, r3, #3
 800260c:	b2db      	uxtb	r3, r3
			((clip2(gyro_mode)  << ICM_POWER_MGMT0_GYRO_MODE_POS)  & ICM_POWER_MGMT0_GYRO_MODE_Msk) |
 800260e:	4323      	orrs	r3, r4
 8002610:	b2db      	uxtb	r3, r3
			((clip2(accel_mode) << ICM_POWER_MGMT0_ACCEL_MODE_POS) & ICM_POWER_MGMT0_ACCEL_MODE_Msk) |
 8002612:	787a      	ldrb	r2, [r7, #1]
 8002614:	2a00      	cmp	r2, #0
 8002616:	d001      	beq.n	800261c <icm_power_mgmt0_config+0x9c>
 8002618:	2220      	movs	r2, #32
 800261a:	e000      	b.n	800261e <icm_power_mgmt0_config+0x9e>
 800261c:	2200      	movs	r2, #0
 800261e:	4313      	orrs	r3, r2
 8002620:	b2db      	uxtb	r3, r3
			(temp_disable ? ICM_POWER_MGMT0_TEMP_DISABLE_Msk  : 0u) |
 8002622:	f897 2020 	ldrb.w	r2, [r7, #32]
 8002626:	2a00      	cmp	r2, #0
 8002628:	d001      	beq.n	800262e <icm_power_mgmt0_config+0xae>
 800262a:	2210      	movs	r2, #16
 800262c:	e000      	b.n	8002630 <icm_power_mgmt0_config+0xb0>
 800262e:	2200      	movs	r2, #0
	uint8_t set =
 8002630:	4313      	orrs	r3, r2
 8002632:	73bb      	strb	r3, [r7, #14]
			(idle         ? ICM_POWER_MGMT0_IDLE_Msk     : 0u);

	uint8_t new_v = (uint8_t)((v & ~ICM_POWER_MGMT0_WRITABLE_Msk) | (set & ICM_POWER_MGMT0_WRITABLE_Msk));
 8002634:	7b7b      	ldrb	r3, [r7, #13]
 8002636:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800263a:	b2da      	uxtb	r2, r3
 800263c:	7bbb      	ldrb	r3, [r7, #14]
 800263e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002642:	b2db      	uxtb	r3, r3
 8002644:	4313      	orrs	r3, r2
 8002646:	b2db      	uxtb	r3, r3
 8002648:	733b      	strb	r3, [r7, #12]

	if (new_v == v) {        // no change → skip bus write
 800264a:	7b3a      	ldrb	r2, [r7, #12]
 800264c:	7b7b      	ldrb	r3, [r7, #13]
 800264e:	429a      	cmp	r2, r3
 8002650:	d104      	bne.n	800265c <icm_power_mgmt0_config+0xdc>
		self->last_err = ICM_OK;
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	2200      	movs	r2, #0
 8002656:	715a      	strb	r2, [r3, #5]
		return HAL_OK;
 8002658:	2300      	movs	r3, #0
 800265a:	e02b      	b.n	80026b4 <icm_power_mgmt0_config+0x134>
	}

	st = HAL_I2C_Mem_Write(self->i2c, (self->addr7 << 1),
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	6818      	ldr	r0, [r3, #0]
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	791b      	ldrb	r3, [r3, #4]
 8002664:	005b      	lsls	r3, r3, #1
 8002666:	b299      	uxth	r1, r3
 8002668:	23c8      	movs	r3, #200	@ 0xc8
 800266a:	9302      	str	r3, [sp, #8]
 800266c:	2301      	movs	r3, #1
 800266e:	9301      	str	r3, [sp, #4]
 8002670:	f107 030c 	add.w	r3, r7, #12
 8002674:	9300      	str	r3, [sp, #0]
 8002676:	2301      	movs	r3, #1
 8002678:	224e      	movs	r2, #78	@ 0x4e
 800267a:	f002 fb89 	bl	8004d90 <HAL_I2C_Mem_Write>
 800267e:	4603      	mov	r3, r0
 8002680:	73fb      	strb	r3, [r7, #15]
			ICM_POWER_MGMT0_REG, I2C_MEMADD_SIZE_8BIT,
			&new_v, 1, 200);
	if (st != HAL_OK) {
 8002682:	7bfb      	ldrb	r3, [r7, #15]
 8002684:	2b00      	cmp	r3, #0
 8002686:	d011      	beq.n	80026ac <icm_power_mgmt0_config+0x12c>
		self->last_hal_err = HAL_I2C_GetError(self->i2c);
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	4618      	mov	r0, r3
 800268e:	f002 fdad 	bl	80051ec <HAL_I2C_GetError>
 8002692:	4602      	mov	r2, r0
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	609a      	str	r2, [r3, #8]
		self->last_err = (st == HAL_TIMEOUT) ? ICM_ERR_TIMEOUT : ICM_ERR_I2C;
 8002698:	7bfb      	ldrb	r3, [r7, #15]
 800269a:	2b03      	cmp	r3, #3
 800269c:	d101      	bne.n	80026a2 <icm_power_mgmt0_config+0x122>
 800269e:	2203      	movs	r2, #3
 80026a0:	e000      	b.n	80026a4 <icm_power_mgmt0_config+0x124>
 80026a2:	2202      	movs	r2, #2
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	715a      	strb	r2, [r3, #5]
		return st;
 80026a8:	7bfb      	ldrb	r3, [r7, #15]
 80026aa:	e003      	b.n	80026b4 <icm_power_mgmt0_config+0x134>
	}

	self->last_err = ICM_OK;
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	2200      	movs	r2, #0
 80026b0:	715a      	strb	r2, [r3, #5]
	return HAL_OK;
 80026b2:	2300      	movs	r3, #0
}
 80026b4:	4618      	mov	r0, r3
 80026b6:	3714      	adds	r7, #20
 80026b8:	46bd      	mov	sp, r7
 80026ba:	bd90      	pop	{r4, r7, pc}

080026bc <icm_gyro_config0>:

static HAL_StatusTypeDef icm_gyro_config0(icm42688_t *self, uint8_t gyro_fs_sel, uint8_t gyro_odr)
{
 80026bc:	b590      	push	{r4, r7, lr}
 80026be:	b089      	sub	sp, #36	@ 0x24
 80026c0:	af04      	add	r7, sp, #16
 80026c2:	6078      	str	r0, [r7, #4]
 80026c4:	460b      	mov	r3, r1
 80026c6:	70fb      	strb	r3, [r7, #3]
 80026c8:	4613      	mov	r3, r2
 80026ca:	70bb      	strb	r3, [r7, #2]
	if (!self) return HAL_ERROR;
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d101      	bne.n	80026d6 <icm_gyro_config0+0x1a>
 80026d2:	2301      	movs	r3, #1
 80026d4:	e10f      	b.n	80028f6 <icm_gyro_config0+0x23a>

	uint8_t v;
	HAL_StatusTypeDef st = HAL_I2C_Mem_Read(self->i2c, (self->addr7 << 1),
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	6818      	ldr	r0, [r3, #0]
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	791b      	ldrb	r3, [r3, #4]
 80026de:	005b      	lsls	r3, r3, #1
 80026e0:	b299      	uxth	r1, r3
 80026e2:	23c8      	movs	r3, #200	@ 0xc8
 80026e4:	9302      	str	r3, [sp, #8]
 80026e6:	2301      	movs	r3, #1
 80026e8:	9301      	str	r3, [sp, #4]
 80026ea:	f107 030a 	add.w	r3, r7, #10
 80026ee:	9300      	str	r3, [sp, #0]
 80026f0:	2301      	movs	r3, #1
 80026f2:	224f      	movs	r2, #79	@ 0x4f
 80026f4:	f002 fc60 	bl	8004fb8 <HAL_I2C_Mem_Read>
 80026f8:	4603      	mov	r3, r0
 80026fa:	73fb      	strb	r3, [r7, #15]
			ICM_GYRO_CONFIG0_REG, I2C_MEMADD_SIZE_8BIT,
			&v, 1, 200);
	if (st != HAL_OK) {
 80026fc:	7bfb      	ldrb	r3, [r7, #15]
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d011      	beq.n	8002726 <icm_gyro_config0+0x6a>
		self->last_hal_err = HAL_I2C_GetError(self->i2c);
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	4618      	mov	r0, r3
 8002708:	f002 fd70 	bl	80051ec <HAL_I2C_GetError>
 800270c:	4602      	mov	r2, r0
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	609a      	str	r2, [r3, #8]
		self->last_err = (st == HAL_TIMEOUT) ? ICM_ERR_TIMEOUT : ICM_ERR_I2C;
 8002712:	7bfb      	ldrb	r3, [r7, #15]
 8002714:	2b03      	cmp	r3, #3
 8002716:	d101      	bne.n	800271c <icm_gyro_config0+0x60>
 8002718:	2203      	movs	r2, #3
 800271a:	e000      	b.n	800271e <icm_gyro_config0+0x62>
 800271c:	2202      	movs	r2, #2
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	715a      	strb	r2, [r3, #5]
		return st;
 8002722:	7bfb      	ldrb	r3, [r7, #15]
 8002724:	e0e7      	b.n	80028f6 <icm_gyro_config0+0x23a>
	}

	uint8_t set =
			((clip4(gyro_odr)    << ICM_GYRO_CONFIG0_ODR_POS) & ICM_GYRO_CONFIG0_ODR_Msk) |
 8002726:	78bb      	ldrb	r3, [r7, #2]
 8002728:	4618      	mov	r0, r3
 800272a:	f000 fbf7 	bl	8002f1c <clip4>
 800272e:	4603      	mov	r3, r0
 8002730:	f003 030f 	and.w	r3, r3, #15
 8002734:	b2dc      	uxtb	r4, r3
			((clip3(gyro_fs_sel) << ICM_GYRO_CONFIG0_FS_POS)  & ICM_GYRO_CONFIG0_FS_Msk);
 8002736:	78fb      	ldrb	r3, [r7, #3]
 8002738:	4618      	mov	r0, r3
 800273a:	f000 fbe0 	bl	8002efe <clip3>
 800273e:	4603      	mov	r3, r0
 8002740:	015b      	lsls	r3, r3, #5
 8002742:	b2db      	uxtb	r3, r3
	uint8_t set =
 8002744:	4323      	orrs	r3, r4
 8002746:	73bb      	strb	r3, [r7, #14]

	uint8_t new_v = (uint8_t)((v & ~ICM_GYRO_CONFIG0_WRITABLE_Msk) | set);
 8002748:	7abb      	ldrb	r3, [r7, #10]
 800274a:	f003 0310 	and.w	r3, r3, #16
 800274e:	b2da      	uxtb	r2, r3
 8002750:	7bbb      	ldrb	r3, [r7, #14]
 8002752:	4313      	orrs	r3, r2
 8002754:	b2db      	uxtb	r3, r3
 8002756:	727b      	strb	r3, [r7, #9]

	if (new_v != v) {
 8002758:	7a7a      	ldrb	r2, [r7, #9]
 800275a:	7abb      	ldrb	r3, [r7, #10]
 800275c:	429a      	cmp	r2, r3
 800275e:	d027      	beq.n	80027b0 <icm_gyro_config0+0xf4>
		st = HAL_I2C_Mem_Write(self->i2c, (self->addr7 << 1),
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	6818      	ldr	r0, [r3, #0]
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	791b      	ldrb	r3, [r3, #4]
 8002768:	005b      	lsls	r3, r3, #1
 800276a:	b299      	uxth	r1, r3
 800276c:	23c8      	movs	r3, #200	@ 0xc8
 800276e:	9302      	str	r3, [sp, #8]
 8002770:	2301      	movs	r3, #1
 8002772:	9301      	str	r3, [sp, #4]
 8002774:	f107 0309 	add.w	r3, r7, #9
 8002778:	9300      	str	r3, [sp, #0]
 800277a:	2301      	movs	r3, #1
 800277c:	224f      	movs	r2, #79	@ 0x4f
 800277e:	f002 fb07 	bl	8004d90 <HAL_I2C_Mem_Write>
 8002782:	4603      	mov	r3, r0
 8002784:	73fb      	strb	r3, [r7, #15]
				ICM_GYRO_CONFIG0_REG, I2C_MEMADD_SIZE_8BIT,
				&new_v, 1, 200);
		if (st != HAL_OK) {
 8002786:	7bfb      	ldrb	r3, [r7, #15]
 8002788:	2b00      	cmp	r3, #0
 800278a:	d011      	beq.n	80027b0 <icm_gyro_config0+0xf4>
			self->last_hal_err = HAL_I2C_GetError(self->i2c);
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	4618      	mov	r0, r3
 8002792:	f002 fd2b 	bl	80051ec <HAL_I2C_GetError>
 8002796:	4602      	mov	r2, r0
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	609a      	str	r2, [r3, #8]
			self->last_err = (st == HAL_TIMEOUT) ? ICM_ERR_TIMEOUT : ICM_ERR_I2C;
 800279c:	7bfb      	ldrb	r3, [r7, #15]
 800279e:	2b03      	cmp	r3, #3
 80027a0:	d101      	bne.n	80027a6 <icm_gyro_config0+0xea>
 80027a2:	2203      	movs	r2, #3
 80027a4:	e000      	b.n	80027a8 <icm_gyro_config0+0xec>
 80027a6:	2202      	movs	r2, #2
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	715a      	strb	r2, [r3, #5]
			return st;
 80027ac:	7bfb      	ldrb	r3, [r7, #15]
 80027ae:	e0a2      	b.n	80028f6 <icm_gyro_config0+0x23a>
		}
	}

	// >>> ALWAYS derive effective settings from the value we now have in the register
	uint8_t eff = (new_v != v) ? new_v : v;
 80027b0:	7a7b      	ldrb	r3, [r7, #9]
 80027b2:	737b      	strb	r3, [r7, #13]
	uint8_t fs_code  = (eff & ICM_GYRO_CONFIG0_FS_Msk)  >> ICM_GYRO_CONFIG0_FS_POS;
 80027b4:	7b7b      	ldrb	r3, [r7, #13]
 80027b6:	095b      	lsrs	r3, r3, #5
 80027b8:	733b      	strb	r3, [r7, #12]
	uint8_t odr_code = (eff & ICM_GYRO_CONFIG0_ODR_Msk) >> ICM_GYRO_CONFIG0_ODR_POS;
 80027ba:	7b7b      	ldrb	r3, [r7, #13]
 80027bc:	f003 030f 	and.w	r3, r3, #15
 80027c0:	72fb      	strb	r3, [r7, #11]

	// FS -> LSB per dps  (keep switch for readability)
	switch (fs_code & 0x7u) {
 80027c2:	7b3b      	ldrb	r3, [r7, #12]
 80027c4:	f003 0307 	and.w	r3, r3, #7
 80027c8:	2b07      	cmp	r3, #7
 80027ca:	d833      	bhi.n	8002834 <icm_gyro_config0+0x178>
 80027cc:	a201      	add	r2, pc, #4	@ (adr r2, 80027d4 <icm_gyro_config0+0x118>)
 80027ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80027d2:	bf00      	nop
 80027d4:	080027f5 	.word	0x080027f5
 80027d8:	080027fd 	.word	0x080027fd
 80027dc:	08002805 	.word	0x08002805
 80027e0:	0800280d 	.word	0x0800280d
 80027e4:	08002815 	.word	0x08002815
 80027e8:	0800281d 	.word	0x0800281d
 80027ec:	08002825 	.word	0x08002825
 80027f0:	0800282d 	.word	0x0800282d
	case 0: self->gyro_lsb_per_dps = 16.384f;   break; // ±2000 dps
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	4a42      	ldr	r2, [pc, #264]	@ (8002900 <icm_gyro_config0+0x244>)
 80027f8:	63da      	str	r2, [r3, #60]	@ 0x3c
 80027fa:	e01b      	b.n	8002834 <icm_gyro_config0+0x178>
	case 1: self->gyro_lsb_per_dps = 32.768f;   break; // ±1000
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	4a41      	ldr	r2, [pc, #260]	@ (8002904 <icm_gyro_config0+0x248>)
 8002800:	63da      	str	r2, [r3, #60]	@ 0x3c
 8002802:	e017      	b.n	8002834 <icm_gyro_config0+0x178>
	case 2: self->gyro_lsb_per_dps = 65.536f;   break; // ±500
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	4a40      	ldr	r2, [pc, #256]	@ (8002908 <icm_gyro_config0+0x24c>)
 8002808:	63da      	str	r2, [r3, #60]	@ 0x3c
 800280a:	e013      	b.n	8002834 <icm_gyro_config0+0x178>
	case 3: self->gyro_lsb_per_dps = 131.072f;  break; // ±250
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	4a3f      	ldr	r2, [pc, #252]	@ (800290c <icm_gyro_config0+0x250>)
 8002810:	63da      	str	r2, [r3, #60]	@ 0x3c
 8002812:	e00f      	b.n	8002834 <icm_gyro_config0+0x178>
	case 4: self->gyro_lsb_per_dps = 262.144f;  break; // ±125
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	4a3e      	ldr	r2, [pc, #248]	@ (8002910 <icm_gyro_config0+0x254>)
 8002818:	63da      	str	r2, [r3, #60]	@ 0x3c
 800281a:	e00b      	b.n	8002834 <icm_gyro_config0+0x178>
	case 5: self->gyro_lsb_per_dps = 524.288f;  break; // ±62.5
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	4a3d      	ldr	r2, [pc, #244]	@ (8002914 <icm_gyro_config0+0x258>)
 8002820:	63da      	str	r2, [r3, #60]	@ 0x3c
 8002822:	e007      	b.n	8002834 <icm_gyro_config0+0x178>
	case 6: self->gyro_lsb_per_dps = 1048.576f; break; // ±31.25
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	4a3c      	ldr	r2, [pc, #240]	@ (8002918 <icm_gyro_config0+0x25c>)
 8002828:	63da      	str	r2, [r3, #60]	@ 0x3c
 800282a:	e003      	b.n	8002834 <icm_gyro_config0+0x178>
	case 7: self->gyro_lsb_per_dps = 2097.152f; break; // ±15.625
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	4a3b      	ldr	r2, [pc, #236]	@ (800291c <icm_gyro_config0+0x260>)
 8002830:	63da      	str	r2, [r3, #60]	@ 0x3c
 8002832:	bf00      	nop
	}

	// ODR code -> Hz
	switch (odr_code & 0xFu) {
 8002834:	7afb      	ldrb	r3, [r7, #11]
 8002836:	f003 030f 	and.w	r3, r3, #15
 800283a:	3b01      	subs	r3, #1
 800283c:	2b0e      	cmp	r3, #14
 800283e:	d851      	bhi.n	80028e4 <icm_gyro_config0+0x228>
 8002840:	a201      	add	r2, pc, #4	@ (adr r2, 8002848 <icm_gyro_config0+0x18c>)
 8002842:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002846:	bf00      	nop
 8002848:	08002885 	.word	0x08002885
 800284c:	0800288d 	.word	0x0800288d
 8002850:	08002895 	.word	0x08002895
 8002854:	0800289d 	.word	0x0800289d
 8002858:	080028a5 	.word	0x080028a5
 800285c:	080028ad 	.word	0x080028ad
 8002860:	080028b5 	.word	0x080028b5
 8002864:	080028bd 	.word	0x080028bd
 8002868:	080028c5 	.word	0x080028c5
 800286c:	080028cd 	.word	0x080028cd
 8002870:	080028d5 	.word	0x080028d5
 8002874:	080028e5 	.word	0x080028e5
 8002878:	080028e5 	.word	0x080028e5
 800287c:	080028e5 	.word	0x080028e5
 8002880:	080028dd 	.word	0x080028dd
	case 1:  self->gyro_odr = 32000.0f; break;
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	4a26      	ldr	r2, [pc, #152]	@ (8002920 <icm_gyro_config0+0x264>)
 8002888:	641a      	str	r2, [r3, #64]	@ 0x40
 800288a:	e030      	b.n	80028ee <icm_gyro_config0+0x232>
	case 2:  self->gyro_odr = 16000.0f; break;
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	4a25      	ldr	r2, [pc, #148]	@ (8002924 <icm_gyro_config0+0x268>)
 8002890:	641a      	str	r2, [r3, #64]	@ 0x40
 8002892:	e02c      	b.n	80028ee <icm_gyro_config0+0x232>
	case 3:  self->gyro_odr = 8000.0f;  break;
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	4a24      	ldr	r2, [pc, #144]	@ (8002928 <icm_gyro_config0+0x26c>)
 8002898:	641a      	str	r2, [r3, #64]	@ 0x40
 800289a:	e028      	b.n	80028ee <icm_gyro_config0+0x232>
	case 4:  self->gyro_odr = 4000.0f;  break;
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	4a23      	ldr	r2, [pc, #140]	@ (800292c <icm_gyro_config0+0x270>)
 80028a0:	641a      	str	r2, [r3, #64]	@ 0x40
 80028a2:	e024      	b.n	80028ee <icm_gyro_config0+0x232>
	case 5:  self->gyro_odr = 2000.0f;  break;
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	4a22      	ldr	r2, [pc, #136]	@ (8002930 <icm_gyro_config0+0x274>)
 80028a8:	641a      	str	r2, [r3, #64]	@ 0x40
 80028aa:	e020      	b.n	80028ee <icm_gyro_config0+0x232>
	case 6:  self->gyro_odr = 1000.0f;  break; // reset default
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	4a21      	ldr	r2, [pc, #132]	@ (8002934 <icm_gyro_config0+0x278>)
 80028b0:	641a      	str	r2, [r3, #64]	@ 0x40
 80028b2:	e01c      	b.n	80028ee <icm_gyro_config0+0x232>
	case 7:  self->gyro_odr = 200.0f;   break;
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	4a20      	ldr	r2, [pc, #128]	@ (8002938 <icm_gyro_config0+0x27c>)
 80028b8:	641a      	str	r2, [r3, #64]	@ 0x40
 80028ba:	e018      	b.n	80028ee <icm_gyro_config0+0x232>
	case 8:  self->gyro_odr = 100.0f;   break;
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	4a1f      	ldr	r2, [pc, #124]	@ (800293c <icm_gyro_config0+0x280>)
 80028c0:	641a      	str	r2, [r3, #64]	@ 0x40
 80028c2:	e014      	b.n	80028ee <icm_gyro_config0+0x232>
	case 9:  self->gyro_odr = 50.0f;    break;
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	4a1e      	ldr	r2, [pc, #120]	@ (8002940 <icm_gyro_config0+0x284>)
 80028c8:	641a      	str	r2, [r3, #64]	@ 0x40
 80028ca:	e010      	b.n	80028ee <icm_gyro_config0+0x232>
	case 10: self->gyro_odr = 25.0f;    break;
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	4a1d      	ldr	r2, [pc, #116]	@ (8002944 <icm_gyro_config0+0x288>)
 80028d0:	641a      	str	r2, [r3, #64]	@ 0x40
 80028d2:	e00c      	b.n	80028ee <icm_gyro_config0+0x232>
	case 11: self->gyro_odr = 12.5f;    break;
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	4a1c      	ldr	r2, [pc, #112]	@ (8002948 <icm_gyro_config0+0x28c>)
 80028d8:	641a      	str	r2, [r3, #64]	@ 0x40
 80028da:	e008      	b.n	80028ee <icm_gyro_config0+0x232>
	case 15: self->gyro_odr = 500.0f;   break;
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	4a1b      	ldr	r2, [pc, #108]	@ (800294c <icm_gyro_config0+0x290>)
 80028e0:	641a      	str	r2, [r3, #64]	@ 0x40
 80028e2:	e004      	b.n	80028ee <icm_gyro_config0+0x232>
	default: self->gyro_odr = 0.0f;     break; // reserved codes
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	f04f 0200 	mov.w	r2, #0
 80028ea:	641a      	str	r2, [r3, #64]	@ 0x40
 80028ec:	bf00      	nop
	}

	self->last_err = ICM_OK;
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	2200      	movs	r2, #0
 80028f2:	715a      	strb	r2, [r3, #5]
	return HAL_OK;
 80028f4:	2300      	movs	r3, #0
}
 80028f6:	4618      	mov	r0, r3
 80028f8:	3714      	adds	r7, #20
 80028fa:	46bd      	mov	sp, r7
 80028fc:	bd90      	pop	{r4, r7, pc}
 80028fe:	bf00      	nop
 8002900:	4183126f 	.word	0x4183126f
 8002904:	4203126f 	.word	0x4203126f
 8002908:	4283126f 	.word	0x4283126f
 800290c:	4303126f 	.word	0x4303126f
 8002910:	4383126f 	.word	0x4383126f
 8002914:	4403126f 	.word	0x4403126f
 8002918:	4483126f 	.word	0x4483126f
 800291c:	4503126f 	.word	0x4503126f
 8002920:	46fa0000 	.word	0x46fa0000
 8002924:	467a0000 	.word	0x467a0000
 8002928:	45fa0000 	.word	0x45fa0000
 800292c:	457a0000 	.word	0x457a0000
 8002930:	44fa0000 	.word	0x44fa0000
 8002934:	447a0000 	.word	0x447a0000
 8002938:	43480000 	.word	0x43480000
 800293c:	42c80000 	.word	0x42c80000
 8002940:	42480000 	.word	0x42480000
 8002944:	41c80000 	.word	0x41c80000
 8002948:	41480000 	.word	0x41480000
 800294c:	43fa0000 	.word	0x43fa0000

08002950 <icm_accel_config0>:

static HAL_StatusTypeDef icm_accel_config0(icm42688_t *self, uint8_t accel_fs_sel, uint8_t accel_odr)
{
 8002950:	b590      	push	{r4, r7, lr}
 8002952:	b089      	sub	sp, #36	@ 0x24
 8002954:	af04      	add	r7, sp, #16
 8002956:	6078      	str	r0, [r7, #4]
 8002958:	460b      	mov	r3, r1
 800295a:	70fb      	strb	r3, [r7, #3]
 800295c:	4613      	mov	r3, r2
 800295e:	70bb      	strb	r3, [r7, #2]
	if (!self) return HAL_ERROR;
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	2b00      	cmp	r3, #0
 8002964:	d101      	bne.n	800296a <icm_accel_config0+0x1a>
 8002966:	2301      	movs	r3, #1
 8002968:	e107      	b.n	8002b7a <icm_accel_config0+0x22a>

	uint8_t v;
	HAL_StatusTypeDef st = HAL_I2C_Mem_Read(self->i2c, (self->addr7 << 1),
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	6818      	ldr	r0, [r3, #0]
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	791b      	ldrb	r3, [r3, #4]
 8002972:	005b      	lsls	r3, r3, #1
 8002974:	b299      	uxth	r1, r3
 8002976:	23c8      	movs	r3, #200	@ 0xc8
 8002978:	9302      	str	r3, [sp, #8]
 800297a:	2301      	movs	r3, #1
 800297c:	9301      	str	r3, [sp, #4]
 800297e:	f107 030a 	add.w	r3, r7, #10
 8002982:	9300      	str	r3, [sp, #0]
 8002984:	2301      	movs	r3, #1
 8002986:	2250      	movs	r2, #80	@ 0x50
 8002988:	f002 fb16 	bl	8004fb8 <HAL_I2C_Mem_Read>
 800298c:	4603      	mov	r3, r0
 800298e:	73fb      	strb	r3, [r7, #15]
			ICM_ACCEL_CONFIG0_REG, I2C_MEMADD_SIZE_8BIT,
			&v, 1, 200);
	if (st != HAL_OK) {
 8002990:	7bfb      	ldrb	r3, [r7, #15]
 8002992:	2b00      	cmp	r3, #0
 8002994:	d011      	beq.n	80029ba <icm_accel_config0+0x6a>
		self->last_hal_err = HAL_I2C_GetError(self->i2c);
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	4618      	mov	r0, r3
 800299c:	f002 fc26 	bl	80051ec <HAL_I2C_GetError>
 80029a0:	4602      	mov	r2, r0
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	609a      	str	r2, [r3, #8]
		self->last_err = (st == HAL_TIMEOUT) ? ICM_ERR_TIMEOUT : ICM_ERR_I2C;
 80029a6:	7bfb      	ldrb	r3, [r7, #15]
 80029a8:	2b03      	cmp	r3, #3
 80029aa:	d101      	bne.n	80029b0 <icm_accel_config0+0x60>
 80029ac:	2203      	movs	r2, #3
 80029ae:	e000      	b.n	80029b2 <icm_accel_config0+0x62>
 80029b0:	2202      	movs	r2, #2
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	715a      	strb	r2, [r3, #5]
		return st;
 80029b6:	7bfb      	ldrb	r3, [r7, #15]
 80029b8:	e0df      	b.n	8002b7a <icm_accel_config0+0x22a>
	}

	uint8_t set =
			((clip4(accel_odr)    << ICM_ACCEL_CONFIG0_ODR_POS) & ICM_ACCEL_CONFIG0_ODR_Msk) |
 80029ba:	78bb      	ldrb	r3, [r7, #2]
 80029bc:	4618      	mov	r0, r3
 80029be:	f000 faad 	bl	8002f1c <clip4>
 80029c2:	4603      	mov	r3, r0
 80029c4:	f003 030f 	and.w	r3, r3, #15
 80029c8:	b2dc      	uxtb	r4, r3
			((clip3(accel_fs_sel) << ICM_ACCEL_CONFIG0_FS_POS)  & ICM_ACCEL_CONFIG0_FS_Msk);
 80029ca:	78fb      	ldrb	r3, [r7, #3]
 80029cc:	4618      	mov	r0, r3
 80029ce:	f000 fa96 	bl	8002efe <clip3>
 80029d2:	4603      	mov	r3, r0
 80029d4:	015b      	lsls	r3, r3, #5
 80029d6:	b2db      	uxtb	r3, r3
	uint8_t set =
 80029d8:	4323      	orrs	r3, r4
 80029da:	73bb      	strb	r3, [r7, #14]

	uint8_t new_v = (uint8_t)((v & ~ICM_ACCEL_CONFIG0_WRITABLE_Msk) | set);
 80029dc:	7abb      	ldrb	r3, [r7, #10]
 80029de:	f003 0310 	and.w	r3, r3, #16
 80029e2:	b2da      	uxtb	r2, r3
 80029e4:	7bbb      	ldrb	r3, [r7, #14]
 80029e6:	4313      	orrs	r3, r2
 80029e8:	b2db      	uxtb	r3, r3
 80029ea:	727b      	strb	r3, [r7, #9]

	if (new_v != v) {
 80029ec:	7a7a      	ldrb	r2, [r7, #9]
 80029ee:	7abb      	ldrb	r3, [r7, #10]
 80029f0:	429a      	cmp	r2, r3
 80029f2:	d027      	beq.n	8002a44 <icm_accel_config0+0xf4>
		st = HAL_I2C_Mem_Write(self->i2c, (self->addr7 << 1),
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	6818      	ldr	r0, [r3, #0]
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	791b      	ldrb	r3, [r3, #4]
 80029fc:	005b      	lsls	r3, r3, #1
 80029fe:	b299      	uxth	r1, r3
 8002a00:	23c8      	movs	r3, #200	@ 0xc8
 8002a02:	9302      	str	r3, [sp, #8]
 8002a04:	2301      	movs	r3, #1
 8002a06:	9301      	str	r3, [sp, #4]
 8002a08:	f107 0309 	add.w	r3, r7, #9
 8002a0c:	9300      	str	r3, [sp, #0]
 8002a0e:	2301      	movs	r3, #1
 8002a10:	2250      	movs	r2, #80	@ 0x50
 8002a12:	f002 f9bd 	bl	8004d90 <HAL_I2C_Mem_Write>
 8002a16:	4603      	mov	r3, r0
 8002a18:	73fb      	strb	r3, [r7, #15]
				ICM_ACCEL_CONFIG0_REG, I2C_MEMADD_SIZE_8BIT,
				&new_v, 1, 200);
		if (st != HAL_OK) {
 8002a1a:	7bfb      	ldrb	r3, [r7, #15]
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d011      	beq.n	8002a44 <icm_accel_config0+0xf4>
			self->last_hal_err = HAL_I2C_GetError(self->i2c);
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	4618      	mov	r0, r3
 8002a26:	f002 fbe1 	bl	80051ec <HAL_I2C_GetError>
 8002a2a:	4602      	mov	r2, r0
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	609a      	str	r2, [r3, #8]
			self->last_err = (st == HAL_TIMEOUT) ? ICM_ERR_TIMEOUT : ICM_ERR_I2C;
 8002a30:	7bfb      	ldrb	r3, [r7, #15]
 8002a32:	2b03      	cmp	r3, #3
 8002a34:	d101      	bne.n	8002a3a <icm_accel_config0+0xea>
 8002a36:	2203      	movs	r2, #3
 8002a38:	e000      	b.n	8002a3c <icm_accel_config0+0xec>
 8002a3a:	2202      	movs	r2, #2
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	715a      	strb	r2, [r3, #5]
			return st;
 8002a40:	7bfb      	ldrb	r3, [r7, #15]
 8002a42:	e09a      	b.n	8002b7a <icm_accel_config0+0x22a>
		}
	}

	// >>> ALWAYS derive effective settings
	uint8_t eff = (new_v != v) ? new_v : v;
 8002a44:	7a7b      	ldrb	r3, [r7, #9]
 8002a46:	737b      	strb	r3, [r7, #13]
	uint8_t fs_code  = (eff & ICM_ACCEL_CONFIG0_FS_Msk)  >> ICM_ACCEL_CONFIG0_FS_POS;
 8002a48:	7b7b      	ldrb	r3, [r7, #13]
 8002a4a:	095b      	lsrs	r3, r3, #5
 8002a4c:	733b      	strb	r3, [r7, #12]
	uint8_t odr_code = (eff & ICM_ACCEL_CONFIG0_ODR_Msk) >> ICM_ACCEL_CONFIG0_ODR_POS;
 8002a4e:	7b7b      	ldrb	r3, [r7, #13]
 8002a50:	f003 030f 	and.w	r3, r3, #15
 8002a54:	72fb      	strb	r3, [r7, #11]

	// FS -> LSB per g (assuming 00=±2g, 01=±4g, 10=±8g, 11=±16g)
	switch (fs_code & 0x3u) {
 8002a56:	7b3b      	ldrb	r3, [r7, #12]
 8002a58:	f003 0303 	and.w	r3, r3, #3
 8002a5c:	2b03      	cmp	r3, #3
 8002a5e:	d81f      	bhi.n	8002aa0 <icm_accel_config0+0x150>
 8002a60:	a201      	add	r2, pc, #4	@ (adr r2, 8002a68 <icm_accel_config0+0x118>)
 8002a62:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a66:	bf00      	nop
 8002a68:	08002a79 	.word	0x08002a79
 8002a6c:	08002a83 	.word	0x08002a83
 8002a70:	08002a8d 	.word	0x08002a8d
 8002a74:	08002a97 	.word	0x08002a97
	case 0: self->accel_lsb_per_g = 2048.0f;  break; // ±16g
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	f04f 428a 	mov.w	r2, #1157627904	@ 0x45000000
 8002a7e:	639a      	str	r2, [r3, #56]	@ 0x38
 8002a80:	e00e      	b.n	8002aa0 <icm_accel_config0+0x150>
	case 1: self->accel_lsb_per_g = 4096.0f;  break; // ±8g
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	f04f 428b 	mov.w	r2, #1166016512	@ 0x45800000
 8002a88:	639a      	str	r2, [r3, #56]	@ 0x38
 8002a8a:	e009      	b.n	8002aa0 <icm_accel_config0+0x150>
	case 2: self->accel_lsb_per_g = 8192.0f;  break; // ±4g
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	f04f 428c 	mov.w	r2, #1174405120	@ 0x46000000
 8002a92:	639a      	str	r2, [r3, #56]	@ 0x38
 8002a94:	e004      	b.n	8002aa0 <icm_accel_config0+0x150>
	case 3: self->accel_lsb_per_g = 16384.0f; break; // ±2g
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	f04f 428d 	mov.w	r2, #1182793728	@ 0x46800000
 8002a9c:	639a      	str	r2, [r3, #56]	@ 0x38
 8002a9e:	bf00      	nop
	}

	// ODR code -> Hz
	switch (odr_code & 0xFu) {
 8002aa0:	7afb      	ldrb	r3, [r7, #11]
 8002aa2:	f003 030f 	and.w	r3, r3, #15
 8002aa6:	3b01      	subs	r3, #1
 8002aa8:	2b0e      	cmp	r3, #14
 8002aaa:	d85d      	bhi.n	8002b68 <icm_accel_config0+0x218>
 8002aac:	a201      	add	r2, pc, #4	@ (adr r2, 8002ab4 <icm_accel_config0+0x164>)
 8002aae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ab2:	bf00      	nop
 8002ab4:	08002af1 	.word	0x08002af1
 8002ab8:	08002af9 	.word	0x08002af9
 8002abc:	08002b01 	.word	0x08002b01
 8002ac0:	08002b09 	.word	0x08002b09
 8002ac4:	08002b11 	.word	0x08002b11
 8002ac8:	08002b19 	.word	0x08002b19
 8002acc:	08002b21 	.word	0x08002b21
 8002ad0:	08002b29 	.word	0x08002b29
 8002ad4:	08002b31 	.word	0x08002b31
 8002ad8:	08002b39 	.word	0x08002b39
 8002adc:	08002b41 	.word	0x08002b41
 8002ae0:	08002b49 	.word	0x08002b49
 8002ae4:	08002b51 	.word	0x08002b51
 8002ae8:	08002b59 	.word	0x08002b59
 8002aec:	08002b61 	.word	0x08002b61
	case 1:  self->accel_odr = 32000.0f; break;
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	4a24      	ldr	r2, [pc, #144]	@ (8002b84 <icm_accel_config0+0x234>)
 8002af4:	645a      	str	r2, [r3, #68]	@ 0x44
 8002af6:	e03c      	b.n	8002b72 <icm_accel_config0+0x222>
	case 2:  self->accel_odr = 16000.0f; break;
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	4a23      	ldr	r2, [pc, #140]	@ (8002b88 <icm_accel_config0+0x238>)
 8002afc:	645a      	str	r2, [r3, #68]	@ 0x44
 8002afe:	e038      	b.n	8002b72 <icm_accel_config0+0x222>
	case 3:  self->accel_odr = 8000.0f;  break;
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	4a22      	ldr	r2, [pc, #136]	@ (8002b8c <icm_accel_config0+0x23c>)
 8002b04:	645a      	str	r2, [r3, #68]	@ 0x44
 8002b06:	e034      	b.n	8002b72 <icm_accel_config0+0x222>
	case 4:  self->accel_odr = 4000.0f;  break;
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	4a21      	ldr	r2, [pc, #132]	@ (8002b90 <icm_accel_config0+0x240>)
 8002b0c:	645a      	str	r2, [r3, #68]	@ 0x44
 8002b0e:	e030      	b.n	8002b72 <icm_accel_config0+0x222>
	case 5:  self->accel_odr = 2000.0f;  break;
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	4a20      	ldr	r2, [pc, #128]	@ (8002b94 <icm_accel_config0+0x244>)
 8002b14:	645a      	str	r2, [r3, #68]	@ 0x44
 8002b16:	e02c      	b.n	8002b72 <icm_accel_config0+0x222>
	case 6:  self->accel_odr = 1000.0f;  break; // reset default
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	4a1f      	ldr	r2, [pc, #124]	@ (8002b98 <icm_accel_config0+0x248>)
 8002b1c:	645a      	str	r2, [r3, #68]	@ 0x44
 8002b1e:	e028      	b.n	8002b72 <icm_accel_config0+0x222>
	case 7:  self->accel_odr = 200.0f;   break;
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	4a1e      	ldr	r2, [pc, #120]	@ (8002b9c <icm_accel_config0+0x24c>)
 8002b24:	645a      	str	r2, [r3, #68]	@ 0x44
 8002b26:	e024      	b.n	8002b72 <icm_accel_config0+0x222>
	case 8:  self->accel_odr = 100.0f;   break;
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	4a1d      	ldr	r2, [pc, #116]	@ (8002ba0 <icm_accel_config0+0x250>)
 8002b2c:	645a      	str	r2, [r3, #68]	@ 0x44
 8002b2e:	e020      	b.n	8002b72 <icm_accel_config0+0x222>
	case 9:  self->accel_odr = 50.0f;    break;
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	4a1c      	ldr	r2, [pc, #112]	@ (8002ba4 <icm_accel_config0+0x254>)
 8002b34:	645a      	str	r2, [r3, #68]	@ 0x44
 8002b36:	e01c      	b.n	8002b72 <icm_accel_config0+0x222>
	case 10: self->accel_odr = 25.0f;    break;
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	4a1b      	ldr	r2, [pc, #108]	@ (8002ba8 <icm_accel_config0+0x258>)
 8002b3c:	645a      	str	r2, [r3, #68]	@ 0x44
 8002b3e:	e018      	b.n	8002b72 <icm_accel_config0+0x222>
	case 11: self->accel_odr = 12.5f;    break;
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	4a1a      	ldr	r2, [pc, #104]	@ (8002bac <icm_accel_config0+0x25c>)
 8002b44:	645a      	str	r2, [r3, #68]	@ 0x44
 8002b46:	e014      	b.n	8002b72 <icm_accel_config0+0x222>
	case 12: self->accel_odr = 6.25f;    break;
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	4a19      	ldr	r2, [pc, #100]	@ (8002bb0 <icm_accel_config0+0x260>)
 8002b4c:	645a      	str	r2, [r3, #68]	@ 0x44
 8002b4e:	e010      	b.n	8002b72 <icm_accel_config0+0x222>
	case 13: self->accel_odr = 3.125f;   break;
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	4a18      	ldr	r2, [pc, #96]	@ (8002bb4 <icm_accel_config0+0x264>)
 8002b54:	645a      	str	r2, [r3, #68]	@ 0x44
 8002b56:	e00c      	b.n	8002b72 <icm_accel_config0+0x222>
	case 14: self->accel_odr = 1.5625f;  break;
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	4a17      	ldr	r2, [pc, #92]	@ (8002bb8 <icm_accel_config0+0x268>)
 8002b5c:	645a      	str	r2, [r3, #68]	@ 0x44
 8002b5e:	e008      	b.n	8002b72 <icm_accel_config0+0x222>
	case 15: self->accel_odr = 500.0f;   break;
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	4a16      	ldr	r2, [pc, #88]	@ (8002bbc <icm_accel_config0+0x26c>)
 8002b64:	645a      	str	r2, [r3, #68]	@ 0x44
 8002b66:	e004      	b.n	8002b72 <icm_accel_config0+0x222>
	default: self->accel_odr = 0.0f;     break;
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	f04f 0200 	mov.w	r2, #0
 8002b6e:	645a      	str	r2, [r3, #68]	@ 0x44
 8002b70:	bf00      	nop
	}

	self->last_err = ICM_OK;
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	2200      	movs	r2, #0
 8002b76:	715a      	strb	r2, [r3, #5]
	return HAL_OK;
 8002b78:	2300      	movs	r3, #0
}
 8002b7a:	4618      	mov	r0, r3
 8002b7c:	3714      	adds	r7, #20
 8002b7e:	46bd      	mov	sp, r7
 8002b80:	bd90      	pop	{r4, r7, pc}
 8002b82:	bf00      	nop
 8002b84:	46fa0000 	.word	0x46fa0000
 8002b88:	467a0000 	.word	0x467a0000
 8002b8c:	45fa0000 	.word	0x45fa0000
 8002b90:	457a0000 	.word	0x457a0000
 8002b94:	44fa0000 	.word	0x44fa0000
 8002b98:	447a0000 	.word	0x447a0000
 8002b9c:	43480000 	.word	0x43480000
 8002ba0:	42c80000 	.word	0x42c80000
 8002ba4:	42480000 	.word	0x42480000
 8002ba8:	41c80000 	.word	0x41c80000
 8002bac:	41480000 	.word	0x41480000
 8002bb0:	40c80000 	.word	0x40c80000
 8002bb4:	40480000 	.word	0x40480000
 8002bb8:	3fc80000 	.word	0x3fc80000
 8002bbc:	43fa0000 	.word	0x43fa0000

08002bc0 <icm_soft_reset>:

static HAL_StatusTypeDef icm_soft_reset(icm42688_t *s)
{
 8002bc0:	b580      	push	{r7, lr}
 8002bc2:	b088      	sub	sp, #32
 8002bc4:	af04      	add	r7, sp, #16
 8002bc6:	6078      	str	r0, [r7, #4]
	if (!s) return HAL_ERROR;
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d101      	bne.n	8002bd2 <icm_soft_reset+0x12>
 8002bce:	2301      	movs	r3, #1
 8002bd0:	e060      	b.n	8002c94 <icm_soft_reset+0xd4>

	uint8_t cmd = ICM_SOFT_RESET_Msk;                 // write-one-to-reset
 8002bd2:	2301      	movs	r3, #1
 8002bd4:	73bb      	strb	r3, [r7, #14]
	HAL_StatusTypeDef st = HAL_I2C_Mem_Write(s->i2c, (s->addr7 << 1),
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	6818      	ldr	r0, [r3, #0]
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	791b      	ldrb	r3, [r3, #4]
 8002bde:	005b      	lsls	r3, r3, #1
 8002be0:	b299      	uxth	r1, r3
 8002be2:	23c8      	movs	r3, #200	@ 0xc8
 8002be4:	9302      	str	r3, [sp, #8]
 8002be6:	2301      	movs	r3, #1
 8002be8:	9301      	str	r3, [sp, #4]
 8002bea:	f107 030e 	add.w	r3, r7, #14
 8002bee:	9300      	str	r3, [sp, #0]
 8002bf0:	2301      	movs	r3, #1
 8002bf2:	2211      	movs	r2, #17
 8002bf4:	f002 f8cc 	bl	8004d90 <HAL_I2C_Mem_Write>
 8002bf8:	4603      	mov	r3, r0
 8002bfa:	73fb      	strb	r3, [r7, #15]
			ICM_SOFT_RESET_REG, I2C_MEMADD_SIZE_8BIT,
			&cmd, 1, 200);
	if (st != HAL_OK) {
 8002bfc:	7bfb      	ldrb	r3, [r7, #15]
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d011      	beq.n	8002c26 <icm_soft_reset+0x66>
		s->last_hal_err = HAL_I2C_GetError(s->i2c);
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	4618      	mov	r0, r3
 8002c08:	f002 faf0 	bl	80051ec <HAL_I2C_GetError>
 8002c0c:	4602      	mov	r2, r0
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	609a      	str	r2, [r3, #8]
		s->last_err = (st == HAL_TIMEOUT) ? ICM_ERR_TIMEOUT : ICM_ERR_I2C;
 8002c12:	7bfb      	ldrb	r3, [r7, #15]
 8002c14:	2b03      	cmp	r3, #3
 8002c16:	d101      	bne.n	8002c1c <icm_soft_reset+0x5c>
 8002c18:	2203      	movs	r2, #3
 8002c1a:	e000      	b.n	8002c1e <icm_soft_reset+0x5e>
 8002c1c:	2202      	movs	r2, #2
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	715a      	strb	r2, [r3, #5]
		return st;
 8002c22:	7bfb      	ldrb	r3, [r7, #15]
 8002c24:	e036      	b.n	8002c94 <icm_soft_reset+0xd4>
	}

	// Give the device time to reboot and reload defaults.
	// Typical is a few ms; be conservative.
	HAL_Delay(10);
 8002c26:	200a      	movs	r0, #10
 8002c28:	f001 fca6 	bl	8004578 <HAL_Delay>

	// Optional: verify reset by reading a known reset-value register
	// (e.g., WHO_AM_I or checking PWR_MGMT0 returned to its reset state).
	uint8_t who = 0;
 8002c2c:	2300      	movs	r3, #0
 8002c2e:	737b      	strb	r3, [r7, #13]
	st = HAL_I2C_Mem_Read(s->i2c, (s->addr7 << 1), ICM_WHO_AM_I_REG,
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	6818      	ldr	r0, [r3, #0]
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	791b      	ldrb	r3, [r3, #4]
 8002c38:	005b      	lsls	r3, r3, #1
 8002c3a:	b299      	uxth	r1, r3
 8002c3c:	23c8      	movs	r3, #200	@ 0xc8
 8002c3e:	9302      	str	r3, [sp, #8]
 8002c40:	2301      	movs	r3, #1
 8002c42:	9301      	str	r3, [sp, #4]
 8002c44:	f107 030d 	add.w	r3, r7, #13
 8002c48:	9300      	str	r3, [sp, #0]
 8002c4a:	2301      	movs	r3, #1
 8002c4c:	2275      	movs	r2, #117	@ 0x75
 8002c4e:	f002 f9b3 	bl	8004fb8 <HAL_I2C_Mem_Read>
 8002c52:	4603      	mov	r3, r0
 8002c54:	73fb      	strb	r3, [r7, #15]
			I2C_MEMADD_SIZE_8BIT, &who, 1, 200);
	if (st != HAL_OK || who != ICM_WHO_AM_I_DEFAULT) {
 8002c56:	7bfb      	ldrb	r3, [r7, #15]
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	d102      	bne.n	8002c62 <icm_soft_reset+0xa2>
 8002c5c:	7b7b      	ldrb	r3, [r7, #13]
 8002c5e:	2b47      	cmp	r3, #71	@ 0x47
 8002c60:	d014      	beq.n	8002c8c <icm_soft_reset+0xcc>
		s->last_hal_err = HAL_I2C_GetError(s->i2c);
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	4618      	mov	r0, r3
 8002c68:	f002 fac0 	bl	80051ec <HAL_I2C_GetError>
 8002c6c:	4602      	mov	r2, r0
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	609a      	str	r2, [r3, #8]
		s->last_err = ICM_ERR_WHOAMI_MISMATCH;
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	2204      	movs	r2, #4
 8002c76:	715a      	strb	r2, [r3, #5]
		s->last_whoami = who;
 8002c78:	7b7a      	ldrb	r2, [r7, #13]
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	731a      	strb	r2, [r3, #12]
		return (st != HAL_OK) ? st : HAL_ERROR;
 8002c7e:	7bfb      	ldrb	r3, [r7, #15]
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	d001      	beq.n	8002c88 <icm_soft_reset+0xc8>
 8002c84:	7bfb      	ldrb	r3, [r7, #15]
 8002c86:	e005      	b.n	8002c94 <icm_soft_reset+0xd4>
 8002c88:	2301      	movs	r3, #1
 8002c8a:	e003      	b.n	8002c94 <icm_soft_reset+0xd4>
	}

	s->last_err = ICM_OK;
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	2200      	movs	r2, #0
 8002c90:	715a      	strb	r2, [r3, #5]
	return HAL_OK;
 8002c92:	2300      	movs	r3, #0
}
 8002c94:	4618      	mov	r0, r3
 8002c96:	3710      	adds	r7, #16
 8002c98:	46bd      	mov	sp, r7
 8002c9a:	bd80      	pop	{r7, pc}

08002c9c <icm_read_all_raw>:
	self->gyro_dps[2] = self->gyro_raw[2] / scale;
	return HAL_OK;
}

// Read TEMP(2) + ACCEL(6) + GYRO(6) in one shot: 0x1D..0x2A (14 bytes)
static HAL_StatusTypeDef icm_read_all_raw(icm42688_t *self) {
 8002c9c:	b580      	push	{r7, lr}
 8002c9e:	b088      	sub	sp, #32
 8002ca0:	af02      	add	r7, sp, #8
 8002ca2:	6078      	str	r0, [r7, #4]
	if (!self) return HAL_ERROR;
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d101      	bne.n	8002cae <icm_read_all_raw+0x12>
 8002caa:	2301      	movs	r3, #1
 8002cac:	e06b      	b.n	8002d86 <icm_read_all_raw+0xea>

	uint8_t raw[14];

	HAL_StatusTypeDef st = rd(self->i2c, self->addr7, ICM_TEMP_MSB, raw, 14);
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	6818      	ldr	r0, [r3, #0]
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	7919      	ldrb	r1, [r3, #4]
 8002cb6:	f107 0308 	add.w	r3, r7, #8
 8002cba:	220e      	movs	r2, #14
 8002cbc:	9200      	str	r2, [sp, #0]
 8002cbe:	221d      	movs	r2, #29
 8002cc0:	f000 f8f0 	bl	8002ea4 <rd>
 8002cc4:	4603      	mov	r3, r0
 8002cc6:	75fb      	strb	r3, [r7, #23]
	if (st != HAL_OK) {
 8002cc8:	7dfb      	ldrb	r3, [r7, #23]
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d011      	beq.n	8002cf2 <icm_read_all_raw+0x56>
		self->last_hal_err = HAL_I2C_GetError(self->i2c);
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	4618      	mov	r0, r3
 8002cd4:	f002 fa8a 	bl	80051ec <HAL_I2C_GetError>
 8002cd8:	4602      	mov	r2, r0
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	609a      	str	r2, [r3, #8]
		self->last_err = (st == HAL_TIMEOUT) ? ICM_ERR_TIMEOUT : ICM_ERR_I2C;
 8002cde:	7dfb      	ldrb	r3, [r7, #23]
 8002ce0:	2b03      	cmp	r3, #3
 8002ce2:	d101      	bne.n	8002ce8 <icm_read_all_raw+0x4c>
 8002ce4:	2203      	movs	r2, #3
 8002ce6:	e000      	b.n	8002cea <icm_read_all_raw+0x4e>
 8002ce8:	2202      	movs	r2, #2
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	715a      	strb	r2, [r3, #5]
		return st;
 8002cee:	7dfb      	ldrb	r3, [r7, #23]
 8002cf0:	e049      	b.n	8002d86 <icm_read_all_raw+0xea>
	}

	// index map: 0..1 Temp, 2..3 Ax, 4..5 Ay, 6..7 Az, 8..9 Gx, 10..11 Gy, 12..13 Gz
	self->temp_raw     = (int16_t)((raw[0]  << 8) | raw[1]);
 8002cf2:	7a3b      	ldrb	r3, [r7, #8]
 8002cf4:	b21b      	sxth	r3, r3
 8002cf6:	021b      	lsls	r3, r3, #8
 8002cf8:	b21a      	sxth	r2, r3
 8002cfa:	7a7b      	ldrb	r3, [r7, #9]
 8002cfc:	b21b      	sxth	r3, r3
 8002cfe:	4313      	orrs	r3, r2
 8002d00:	b21a      	sxth	r2, r3
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	81da      	strh	r2, [r3, #14]
	self->accel_raw[0] = (int16_t)((raw[2]  << 8) | raw[3]);
 8002d06:	7abb      	ldrb	r3, [r7, #10]
 8002d08:	b21b      	sxth	r3, r3
 8002d0a:	021b      	lsls	r3, r3, #8
 8002d0c:	b21a      	sxth	r2, r3
 8002d0e:	7afb      	ldrb	r3, [r7, #11]
 8002d10:	b21b      	sxth	r3, r3
 8002d12:	4313      	orrs	r3, r2
 8002d14:	b21a      	sxth	r2, r3
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	821a      	strh	r2, [r3, #16]
	self->accel_raw[1] = (int16_t)((raw[4]  << 8) | raw[5]);
 8002d1a:	7b3b      	ldrb	r3, [r7, #12]
 8002d1c:	b21b      	sxth	r3, r3
 8002d1e:	021b      	lsls	r3, r3, #8
 8002d20:	b21a      	sxth	r2, r3
 8002d22:	7b7b      	ldrb	r3, [r7, #13]
 8002d24:	b21b      	sxth	r3, r3
 8002d26:	4313      	orrs	r3, r2
 8002d28:	b21a      	sxth	r2, r3
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	825a      	strh	r2, [r3, #18]
	self->accel_raw[2] = (int16_t)((raw[6]  << 8) | raw[7]);
 8002d2e:	7bbb      	ldrb	r3, [r7, #14]
 8002d30:	b21b      	sxth	r3, r3
 8002d32:	021b      	lsls	r3, r3, #8
 8002d34:	b21a      	sxth	r2, r3
 8002d36:	7bfb      	ldrb	r3, [r7, #15]
 8002d38:	b21b      	sxth	r3, r3
 8002d3a:	4313      	orrs	r3, r2
 8002d3c:	b21a      	sxth	r2, r3
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	829a      	strh	r2, [r3, #20]
	self->gyro_raw[0]  = (int16_t)((raw[8]  << 8) | raw[9]);
 8002d42:	7c3b      	ldrb	r3, [r7, #16]
 8002d44:	b21b      	sxth	r3, r3
 8002d46:	021b      	lsls	r3, r3, #8
 8002d48:	b21a      	sxth	r2, r3
 8002d4a:	7c7b      	ldrb	r3, [r7, #17]
 8002d4c:	b21b      	sxth	r3, r3
 8002d4e:	4313      	orrs	r3, r2
 8002d50:	b21a      	sxth	r2, r3
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	82da      	strh	r2, [r3, #22]
	self->gyro_raw[1]  = (int16_t)((raw[10] << 8) | raw[11]);
 8002d56:	7cbb      	ldrb	r3, [r7, #18]
 8002d58:	b21b      	sxth	r3, r3
 8002d5a:	021b      	lsls	r3, r3, #8
 8002d5c:	b21a      	sxth	r2, r3
 8002d5e:	7cfb      	ldrb	r3, [r7, #19]
 8002d60:	b21b      	sxth	r3, r3
 8002d62:	4313      	orrs	r3, r2
 8002d64:	b21a      	sxth	r2, r3
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	831a      	strh	r2, [r3, #24]
	self->gyro_raw[2]  = (int16_t)((raw[12] << 8) | raw[13]);
 8002d6a:	7d3b      	ldrb	r3, [r7, #20]
 8002d6c:	b21b      	sxth	r3, r3
 8002d6e:	021b      	lsls	r3, r3, #8
 8002d70:	b21a      	sxth	r2, r3
 8002d72:	7d7b      	ldrb	r3, [r7, #21]
 8002d74:	b21b      	sxth	r3, r3
 8002d76:	4313      	orrs	r3, r2
 8002d78:	b21a      	sxth	r2, r3
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	835a      	strh	r2, [r3, #26]

	self->last_err = ICM_OK;
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	2200      	movs	r2, #0
 8002d82:	715a      	strb	r2, [r3, #5]
	return HAL_OK;
 8002d84:	2300      	movs	r3, #0
}
 8002d86:	4618      	mov	r0, r3
 8002d88:	3718      	adds	r7, #24
 8002d8a:	46bd      	mov	sp, r7
 8002d8c:	bd80      	pop	{r7, pc}
	...

08002d90 <icm_read_all>:

// Convert everything: raw → °C, g, dps (uses configured scale factors)
static HAL_StatusTypeDef icm_read_all(icm42688_t *self) {
 8002d90:	b580      	push	{r7, lr}
 8002d92:	b086      	sub	sp, #24
 8002d94:	af00      	add	r7, sp, #0
 8002d96:	6078      	str	r0, [r7, #4]
	if (!self) return HAL_ERROR;
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d101      	bne.n	8002da2 <icm_read_all+0x12>
 8002d9e:	2301      	movs	r3, #1
 8002da0:	e079      	b.n	8002e96 <icm_read_all+0x106>

	HAL_StatusTypeDef st = icm_read_all_raw(self);
 8002da2:	6878      	ldr	r0, [r7, #4]
 8002da4:	f7ff ff7a 	bl	8002c9c <icm_read_all_raw>
 8002da8:	4603      	mov	r3, r0
 8002daa:	75fb      	strb	r3, [r7, #23]
	if (st != HAL_OK) return st;
 8002dac:	7dfb      	ldrb	r3, [r7, #23]
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d001      	beq.n	8002db6 <icm_read_all+0x26>
 8002db2:	7dfb      	ldrb	r3, [r7, #23]
 8002db4:	e06f      	b.n	8002e96 <icm_read_all+0x106>

	// Temperature
	self->last_temp_c = (self->temp_raw / ICM_TEMP_SENS_LSB_PER_C) + ICM_TEMP_OFFSET_C;
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8002dbc:	ee07 3a90 	vmov	s15, r3
 8002dc0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002dc4:	eddf 6a36 	vldr	s13, [pc, #216]	@ 8002ea0 <icm_read_all+0x110>
 8002dc8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002dcc:	eeb3 7a09 	vmov.f32	s14, #57	@ 0x41c80000  25.0
 8002dd0:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	edc3 7a07 	vstr	s15, [r3, #28]

	// Scales: guard against zero if config wasn’t called for some reason
	const float a_scale = self->accel_lsb_per_g;
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002dde:	613b      	str	r3, [r7, #16]
	const float g_scale = self->gyro_lsb_per_dps;
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002de4:	60fb      	str	r3, [r7, #12]

	// Accel
	self->accel_g[0] = self->accel_raw[0] / a_scale;
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8002dec:	ee07 3a90 	vmov	s15, r3
 8002df0:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8002df4:	ed97 7a04 	vldr	s14, [r7, #16]
 8002df8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	edc3 7a08 	vstr	s15, [r3, #32]
	self->accel_g[1] = self->accel_raw[1] / a_scale;
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 8002e08:	ee07 3a90 	vmov	s15, r3
 8002e0c:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8002e10:	ed97 7a04 	vldr	s14, [r7, #16]
 8002e14:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24
	self->accel_g[2] = self->accel_raw[2] / a_scale;
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8002e24:	ee07 3a90 	vmov	s15, r3
 8002e28:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8002e2c:	ed97 7a04 	vldr	s14, [r7, #16]
 8002e30:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	edc3 7a0a 	vstr	s15, [r3, #40]	@ 0x28

	// Gyro
	self->gyro_dps[0] = self->gyro_raw[0] / g_scale;
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 8002e40:	ee07 3a90 	vmov	s15, r3
 8002e44:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8002e48:	ed97 7a03 	vldr	s14, [r7, #12]
 8002e4c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	edc3 7a0b 	vstr	s15, [r3, #44]	@ 0x2c
	self->gyro_dps[1] = self->gyro_raw[1] / g_scale;
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	f9b3 3018 	ldrsh.w	r3, [r3, #24]
 8002e5c:	ee07 3a90 	vmov	s15, r3
 8002e60:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8002e64:	ed97 7a03 	vldr	s14, [r7, #12]
 8002e68:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	edc3 7a0c 	vstr	s15, [r3, #48]	@ 0x30
	self->gyro_dps[2] = self->gyro_raw[2] / g_scale;
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	f9b3 301a 	ldrsh.w	r3, [r3, #26]
 8002e78:	ee07 3a90 	vmov	s15, r3
 8002e7c:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8002e80:	ed97 7a03 	vldr	s14, [r7, #12]
 8002e84:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	edc3 7a0d 	vstr	s15, [r3, #52]	@ 0x34

	self->last_err = ICM_OK;
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	2200      	movs	r2, #0
 8002e92:	715a      	strb	r2, [r3, #5]
	return HAL_OK;
 8002e94:	2300      	movs	r3, #0
}
 8002e96:	4618      	mov	r0, r3
 8002e98:	3718      	adds	r7, #24
 8002e9a:	46bd      	mov	sp, r7
 8002e9c:	bd80      	pop	{r7, pc}
 8002e9e:	bf00      	nop
 8002ea0:	43047ae1 	.word	0x43047ae1

08002ea4 <rd>:
 * buf/n: output buffer & length.
 * 200: timeout in ms.
 * Returns HAL_OK/HAL_ERROR/HAL_BUSY/HAL_TIMEOUT.
 * Why shift? STM32 HAL HAL_I2C_* expects the address in “left-shifted 8-bit” form (R/W bit in bit0). Passing raw 7-bit without shifting will fail.
 */
static HAL_StatusTypeDef rd(I2C_HandleTypeDef *i2c, uint8_t a7, uint8_t reg, uint8_t *buf, uint16_t bufferSize) {
 8002ea4:	b580      	push	{r7, lr}
 8002ea6:	b088      	sub	sp, #32
 8002ea8:	af04      	add	r7, sp, #16
 8002eaa:	60f8      	str	r0, [r7, #12]
 8002eac:	607b      	str	r3, [r7, #4]
 8002eae:	460b      	mov	r3, r1
 8002eb0:	72fb      	strb	r3, [r7, #11]
 8002eb2:	4613      	mov	r3, r2
 8002eb4:	72bb      	strb	r3, [r7, #10]
	return HAL_I2C_Mem_Read(i2c, (a7 << 1), reg, I2C_MEMADD_SIZE_8BIT, buf, bufferSize, 200);
 8002eb6:	7afb      	ldrb	r3, [r7, #11]
 8002eb8:	b29b      	uxth	r3, r3
 8002eba:	005b      	lsls	r3, r3, #1
 8002ebc:	b299      	uxth	r1, r3
 8002ebe:	7abb      	ldrb	r3, [r7, #10]
 8002ec0:	b29a      	uxth	r2, r3
 8002ec2:	23c8      	movs	r3, #200	@ 0xc8
 8002ec4:	9302      	str	r3, [sp, #8]
 8002ec6:	8b3b      	ldrh	r3, [r7, #24]
 8002ec8:	9301      	str	r3, [sp, #4]
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	9300      	str	r3, [sp, #0]
 8002ece:	2301      	movs	r3, #1
 8002ed0:	68f8      	ldr	r0, [r7, #12]
 8002ed2:	f002 f871 	bl	8004fb8 <HAL_I2C_Mem_Read>
 8002ed6:	4603      	mov	r3, r0
}
 8002ed8:	4618      	mov	r0, r3
 8002eda:	3710      	adds	r7, #16
 8002edc:	46bd      	mov	sp, r7
 8002ede:	bd80      	pop	{r7, pc}

08002ee0 <clip2>:

static HAL_StatusTypeDef wr1(I2C_HandleTypeDef *i2c, uint8_t a7, uint8_t reg, uint8_t val) {
	return HAL_I2C_Mem_Write(i2c, (a7 << 1), reg, I2C_MEMADD_SIZE_8BIT, &val, 1, 200);
}

static inline uint8_t clip2(uint8_t x)	{ return (uint8_t)(x & 0x03u);	} // 2-bit
 8002ee0:	b480      	push	{r7}
 8002ee2:	b083      	sub	sp, #12
 8002ee4:	af00      	add	r7, sp, #0
 8002ee6:	4603      	mov	r3, r0
 8002ee8:	71fb      	strb	r3, [r7, #7]
 8002eea:	79fb      	ldrb	r3, [r7, #7]
 8002eec:	f003 0303 	and.w	r3, r3, #3
 8002ef0:	b2db      	uxtb	r3, r3
 8002ef2:	4618      	mov	r0, r3
 8002ef4:	370c      	adds	r7, #12
 8002ef6:	46bd      	mov	sp, r7
 8002ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002efc:	4770      	bx	lr

08002efe <clip3>:
static inline uint8_t clip3(uint8_t x) 	{ return (uint8_t)(x & 0x07u); 	} // 3-bit
 8002efe:	b480      	push	{r7}
 8002f00:	b083      	sub	sp, #12
 8002f02:	af00      	add	r7, sp, #0
 8002f04:	4603      	mov	r3, r0
 8002f06:	71fb      	strb	r3, [r7, #7]
 8002f08:	79fb      	ldrb	r3, [r7, #7]
 8002f0a:	f003 0307 	and.w	r3, r3, #7
 8002f0e:	b2db      	uxtb	r3, r3
 8002f10:	4618      	mov	r0, r3
 8002f12:	370c      	adds	r7, #12
 8002f14:	46bd      	mov	sp, r7
 8002f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f1a:	4770      	bx	lr

08002f1c <clip4>:
static inline uint8_t clip4(uint8_t x) 	{ return (uint8_t)(x & 0x0Fu); 	} // 4-bit
 8002f1c:	b480      	push	{r7}
 8002f1e:	b083      	sub	sp, #12
 8002f20:	af00      	add	r7, sp, #0
 8002f22:	4603      	mov	r3, r0
 8002f24:	71fb      	strb	r3, [r7, #7]
 8002f26:	79fb      	ldrb	r3, [r7, #7]
 8002f28:	f003 030f 	and.w	r3, r3, #15
 8002f2c:	b2db      	uxtb	r3, r3
 8002f2e:	4618      	mov	r0, r3
 8002f30:	370c      	adds	r7, #12
 8002f32:	46bd      	mov	sp, r7
 8002f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f38:	4770      	bx	lr

08002f3a <getSelfStatePointer>:

static icm42688_t* getSelfStatePointer(sensor_if_t *self) {
 8002f3a:	b480      	push	{r7}
 8002f3c:	b083      	sub	sp, #12
 8002f3e:	af00      	add	r7, sp, #0
 8002f40:	6078      	str	r0, [r7, #4]
	if (!self || !self->state) return NULL;
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d003      	beq.n	8002f50 <getSelfStatePointer+0x16>
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	685b      	ldr	r3, [r3, #4]
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	d101      	bne.n	8002f54 <getSelfStatePointer+0x1a>
 8002f50:	2300      	movs	r3, #0
 8002f52:	e001      	b.n	8002f58 <getSelfStatePointer+0x1e>
	return (icm42688_t*)self->state;
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	685b      	ldr	r3, [r3, #4]
}
 8002f58:	4618      	mov	r0, r3
 8002f5a:	370c      	adds	r7, #12
 8002f5c:	46bd      	mov	sp, r7
 8002f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f62:	4770      	bx	lr

08002f64 <altkf_init>:
	float x;          // altitude (m)
	float v;          // vertical speed (m/s)
	float P00, P01, P10, P11;  // covariance
} AltKF;

static void altkf_init(AltKF *kf, float x0) {
 8002f64:	b480      	push	{r7}
 8002f66:	b083      	sub	sp, #12
 8002f68:	af00      	add	r7, sp, #0
 8002f6a:	6078      	str	r0, [r7, #4]
 8002f6c:	ed87 0a00 	vstr	s0, [r7]
	kf->x = x0; kf->v = 0.0f;
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	683a      	ldr	r2, [r7, #0]
 8002f74:	601a      	str	r2, [r3, #0]
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	f04f 0200 	mov.w	r2, #0
 8002f7c:	605a      	str	r2, [r3, #4]
	kf->P00 = 10.0f; kf->P01 = 0.0f;
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	4a09      	ldr	r2, [pc, #36]	@ (8002fa8 <altkf_init+0x44>)
 8002f82:	609a      	str	r2, [r3, #8]
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	f04f 0200 	mov.w	r2, #0
 8002f8a:	60da      	str	r2, [r3, #12]
	kf->P10 = 0.0f;  kf->P11 = 10.0f;
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	f04f 0200 	mov.w	r2, #0
 8002f92:	611a      	str	r2, [r3, #16]
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	4a04      	ldr	r2, [pc, #16]	@ (8002fa8 <altkf_init+0x44>)
 8002f98:	615a      	str	r2, [r3, #20]
}
 8002f9a:	bf00      	nop
 8002f9c:	370c      	adds	r7, #12
 8002f9e:	46bd      	mov	sp, r7
 8002fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fa4:	4770      	bx	lr
 8002fa6:	bf00      	nop
 8002fa8:	41200000 	.word	0x41200000

08002fac <altkf_predict>:

static void altkf_predict(AltKF *kf, float dt, float Q_pos, float Q_vel) {
 8002fac:	b480      	push	{r7}
 8002fae:	b089      	sub	sp, #36	@ 0x24
 8002fb0:	af00      	add	r7, sp, #0
 8002fb2:	60f8      	str	r0, [r7, #12]
 8002fb4:	ed87 0a02 	vstr	s0, [r7, #8]
 8002fb8:	edc7 0a01 	vstr	s1, [r7, #4]
 8002fbc:	ed87 1a00 	vstr	s2, [r7]
	// x = x + v*dt
	kf->x += kf->v * dt;
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	ed93 7a00 	vldr	s14, [r3]
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	edd3 6a01 	vldr	s13, [r3, #4]
 8002fcc:	edd7 7a02 	vldr	s15, [r7, #8]
 8002fd0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002fd4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	edc3 7a00 	vstr	s15, [r3]
	// v = v
	// P = F P F' + Q, F = [[1 dt],[0 1]]
	float P00 = kf->P00 + dt*(kf->P10 + kf->P01) + dt*dt*kf->P11 + Q_pos;
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	ed93 7a02 	vldr	s14, [r3, #8]
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	edd3 6a04 	vldr	s13, [r3, #16]
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	edd3 7a03 	vldr	s15, [r3, #12]
 8002ff0:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8002ff4:	edd7 7a02 	vldr	s15, [r7, #8]
 8002ff8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002ffc:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003000:	edd7 7a02 	vldr	s15, [r7, #8]
 8003004:	ee67 6aa7 	vmul.f32	s13, s15, s15
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	edd3 7a05 	vldr	s15, [r3, #20]
 800300e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003012:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003016:	ed97 7a01 	vldr	s14, [r7, #4]
 800301a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800301e:	edc7 7a07 	vstr	s15, [r7, #28]
	float P01 = kf->P01 + dt*kf->P11;
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	ed93 7a03 	vldr	s14, [r3, #12]
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	edd3 6a05 	vldr	s13, [r3, #20]
 800302e:	edd7 7a02 	vldr	s15, [r7, #8]
 8003032:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003036:	ee77 7a27 	vadd.f32	s15, s14, s15
 800303a:	edc7 7a06 	vstr	s15, [r7, #24]
	float P10 = kf->P10 + dt*kf->P11;
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	ed93 7a04 	vldr	s14, [r3, #16]
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	edd3 6a05 	vldr	s13, [r3, #20]
 800304a:	edd7 7a02 	vldr	s15, [r7, #8]
 800304e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003052:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003056:	edc7 7a05 	vstr	s15, [r7, #20]
	float P11 = kf->P11 + Q_vel;
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	edd3 7a05 	vldr	s15, [r3, #20]
 8003060:	ed97 7a00 	vldr	s14, [r7]
 8003064:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003068:	edc7 7a04 	vstr	s15, [r7, #16]
	kf->P00=P00; kf->P01=P01; kf->P10=P10; kf->P11=P11;
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	69fa      	ldr	r2, [r7, #28]
 8003070:	609a      	str	r2, [r3, #8]
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	69ba      	ldr	r2, [r7, #24]
 8003076:	60da      	str	r2, [r3, #12]
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	697a      	ldr	r2, [r7, #20]
 800307c:	611a      	str	r2, [r3, #16]
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	693a      	ldr	r2, [r7, #16]
 8003082:	615a      	str	r2, [r3, #20]
}
 8003084:	bf00      	nop
 8003086:	3724      	adds	r7, #36	@ 0x24
 8003088:	46bd      	mov	sp, r7
 800308a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800308e:	4770      	bx	lr

08003090 <altkf_update_scalar>:

static void altkf_update_scalar(AltKF *kf, float z, float R) {
 8003090:	b480      	push	{r7}
 8003092:	b08d      	sub	sp, #52	@ 0x34
 8003094:	af00      	add	r7, sp, #0
 8003096:	60f8      	str	r0, [r7, #12]
 8003098:	ed87 0a02 	vstr	s0, [r7, #8]
 800309c:	edc7 0a01 	vstr	s1, [r7, #4]
	// H = [1 0]
	float y  = z - kf->x;
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	edd3 7a00 	vldr	s15, [r3]
 80030a6:	ed97 7a02 	vldr	s14, [r7, #8]
 80030aa:	ee77 7a67 	vsub.f32	s15, s14, s15
 80030ae:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c
	float S  = kf->P00 + R;
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	edd3 7a02 	vldr	s15, [r3, #8]
 80030b8:	ed97 7a01 	vldr	s14, [r7, #4]
 80030bc:	ee77 7a27 	vadd.f32	s15, s14, s15
 80030c0:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28
	float K0 = kf->P00 / S;
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	edd3 6a02 	vldr	s13, [r3, #8]
 80030ca:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 80030ce:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80030d2:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
	float K1 = kf->P10 / S;
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	edd3 6a04 	vldr	s13, [r3, #16]
 80030dc:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 80030e0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80030e4:	edc7 7a08 	vstr	s15, [r7, #32]
	kf->x += K0 * y;
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	ed93 7a00 	vldr	s14, [r3]
 80030ee:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 80030f2:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 80030f6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80030fa:	ee77 7a27 	vadd.f32	s15, s14, s15
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	edc3 7a00 	vstr	s15, [r3]
	kf->v += K1 * y;
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	ed93 7a01 	vldr	s14, [r3, #4]
 800310a:	edd7 6a08 	vldr	s13, [r7, #32]
 800310e:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8003112:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003116:	ee77 7a27 	vadd.f32	s15, s14, s15
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	edc3 7a01 	vstr	s15, [r3, #4]
	float P00 = (1.0f - K0) * kf->P00;
 8003120:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8003124:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8003128:	ee37 7a67 	vsub.f32	s14, s14, s15
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	edd3 7a02 	vldr	s15, [r3, #8]
 8003132:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003136:	edc7 7a07 	vstr	s15, [r7, #28]
	float P01 = (1.0f - K0) * kf->P01;
 800313a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800313e:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8003142:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	edd3 7a03 	vldr	s15, [r3, #12]
 800314c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003150:	edc7 7a06 	vstr	s15, [r7, #24]
	float P10 = kf->P10 - K1 * kf->P00;
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	ed93 7a04 	vldr	s14, [r3, #16]
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	edd3 6a02 	vldr	s13, [r3, #8]
 8003160:	edd7 7a08 	vldr	s15, [r7, #32]
 8003164:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003168:	ee77 7a67 	vsub.f32	s15, s14, s15
 800316c:	edc7 7a05 	vstr	s15, [r7, #20]
	float P11 = kf->P11 - K1 * kf->P01;
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	ed93 7a05 	vldr	s14, [r3, #20]
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	edd3 6a03 	vldr	s13, [r3, #12]
 800317c:	edd7 7a08 	vldr	s15, [r7, #32]
 8003180:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003184:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003188:	edc7 7a04 	vstr	s15, [r7, #16]
	kf->P00=P00; kf->P01=P01; kf->P10=P10; kf->P11=P11;
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	69fa      	ldr	r2, [r7, #28]
 8003190:	609a      	str	r2, [r3, #8]
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	69ba      	ldr	r2, [r7, #24]
 8003196:	60da      	str	r2, [r3, #12]
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	697a      	ldr	r2, [r7, #20]
 800319c:	611a      	str	r2, [r3, #16]
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	693a      	ldr	r2, [r7, #16]
 80031a2:	615a      	str	r2, [r3, #20]
}
 80031a4:	bf00      	nop
 80031a6:	3734      	adds	r7, #52	@ 0x34
 80031a8:	46bd      	mov	sp, r7
 80031aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ae:	4770      	bx	lr

080031b0 <gps_ema_reset>:
	double lon_deg_f;
	float  spd_mps_f;
	float  course_deg_f;
} GpsEMA;

static void gps_ema_reset(GpsEMA *f) { memset(f, 0, sizeof(*f)); }
 80031b0:	b580      	push	{r7, lr}
 80031b2:	b082      	sub	sp, #8
 80031b4:	af00      	add	r7, sp, #0
 80031b6:	6078      	str	r0, [r7, #4]
 80031b8:	2220      	movs	r2, #32
 80031ba:	2100      	movs	r1, #0
 80031bc:	6878      	ldr	r0, [r7, #4]
 80031be:	f008 fb07 	bl	800b7d0 <memset>
 80031c2:	bf00      	nop
 80031c4:	3708      	adds	r7, #8
 80031c6:	46bd      	mov	sp, r7
 80031c8:	bd80      	pop	{r7, pc}
	...

080031cc <gps_ema_update>:
static void gps_ema_update(GpsEMA *f, const gps6m_t *g, float alpha_latlon, float alpha_spd) {
 80031cc:	b480      	push	{r7}
 80031ce:	b087      	sub	sp, #28
 80031d0:	af00      	add	r7, sp, #0
 80031d2:	60f8      	str	r0, [r7, #12]
 80031d4:	60b9      	str	r1, [r7, #8]
 80031d6:	ed87 0a01 	vstr	s0, [r7, #4]
 80031da:	edc7 0a00 	vstr	s1, [r7]
	if (!f->seeded) {
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d117      	bne.n	8003216 <gps_ema_update+0x4a>
		f->lat_deg_f = g->lat_deg;
 80031e6:	68bb      	ldr	r3, [r7, #8]
 80031e8:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80031ec:	68f9      	ldr	r1, [r7, #12]
 80031ee:	e9c1 2302 	strd	r2, r3, [r1, #8]
		f->lon_deg_f = g->lon_deg;
 80031f2:	68bb      	ldr	r3, [r7, #8]
 80031f4:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 80031f8:	68f9      	ldr	r1, [r7, #12]
 80031fa:	e9c1 2304 	strd	r2, r3, [r1, #16]
		f->spd_mps_f = g->speed_mps;
 80031fe:	68bb      	ldr	r3, [r7, #8]
 8003200:	69da      	ldr	r2, [r3, #28]
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	619a      	str	r2, [r3, #24]
		f->course_deg_f = g->course_deg;
 8003206:	68bb      	ldr	r3, [r7, #8]
 8003208:	6a1a      	ldr	r2, [r3, #32]
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	61da      	str	r2, [r3, #28]
		f->seeded = 1;
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	2201      	movs	r2, #1
 8003212:	601a      	str	r2, [r3, #0]
		return;
 8003214:	e0ab      	b.n	800336e <gps_ema_update+0x1a2>
	}
	f->lat_deg_f = f->lat_deg_f + alpha_latlon * (g->lat_deg - f->lat_deg_f);
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	ed93 6b02 	vldr	d6, [r3, #8]
 800321c:	edd7 7a01 	vldr	s15, [r7, #4]
 8003220:	eeb7 5ae7 	vcvt.f64.f32	d5, s15
 8003224:	68bb      	ldr	r3, [r7, #8]
 8003226:	ed93 4b02 	vldr	d4, [r3, #8]
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	ed93 7b02 	vldr	d7, [r3, #8]
 8003230:	ee34 7b47 	vsub.f64	d7, d4, d7
 8003234:	ee25 7b07 	vmul.f64	d7, d5, d7
 8003238:	ee36 7b07 	vadd.f64	d7, d6, d7
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	ed83 7b02 	vstr	d7, [r3, #8]
	f->lon_deg_f = f->lon_deg_f + alpha_latlon * (g->lon_deg - f->lon_deg_f);
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	ed93 6b04 	vldr	d6, [r3, #16]
 8003248:	edd7 7a01 	vldr	s15, [r7, #4]
 800324c:	eeb7 5ae7 	vcvt.f64.f32	d5, s15
 8003250:	68bb      	ldr	r3, [r7, #8]
 8003252:	ed93 4b04 	vldr	d4, [r3, #16]
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	ed93 7b04 	vldr	d7, [r3, #16]
 800325c:	ee34 7b47 	vsub.f64	d7, d4, d7
 8003260:	ee25 7b07 	vmul.f64	d7, d5, d7
 8003264:	ee36 7b07 	vadd.f64	d7, d6, d7
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	ed83 7b04 	vstr	d7, [r3, #16]
	f->spd_mps_f = f->spd_mps_f + alpha_spd    * (g->speed_mps - f->spd_mps_f);
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	ed93 7a06 	vldr	s14, [r3, #24]
 8003274:	68bb      	ldr	r3, [r7, #8]
 8003276:	edd3 6a07 	vldr	s13, [r3, #28]
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	edd3 7a06 	vldr	s15, [r3, #24]
 8003280:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8003284:	edd7 7a00 	vldr	s15, [r7]
 8003288:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800328c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	edc3 7a06 	vstr	s15, [r3, #24]
	// course is meaningless at low speed, keep last when speed < 0.5 m/s
	if (g->speed_mps > 0.5f) {
 8003296:	68bb      	ldr	r3, [r7, #8]
 8003298:	edd3 7a07 	vldr	s15, [r3, #28]
 800329c:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 80032a0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80032a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80032a8:	dd61      	ble.n	800336e <gps_ema_update+0x1a2>
		float e = g->course_deg - f->course_deg_f;
 80032aa:	68bb      	ldr	r3, [r7, #8]
 80032ac:	ed93 7a08 	vldr	s14, [r3, #32]
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	edd3 7a07 	vldr	s15, [r3, #28]
 80032b6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80032ba:	edc7 7a05 	vstr	s15, [r7, #20]
		// wrap to [-180,180]
		while (e > 180.0f) e -= 360.0f;
 80032be:	e007      	b.n	80032d0 <gps_ema_update+0x104>
 80032c0:	edd7 7a05 	vldr	s15, [r7, #20]
 80032c4:	ed9f 7a2c 	vldr	s14, [pc, #176]	@ 8003378 <gps_ema_update+0x1ac>
 80032c8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80032cc:	edc7 7a05 	vstr	s15, [r7, #20]
 80032d0:	edd7 7a05 	vldr	s15, [r7, #20]
 80032d4:	ed9f 7a29 	vldr	s14, [pc, #164]	@ 800337c <gps_ema_update+0x1b0>
 80032d8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80032dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80032e0:	dcee      	bgt.n	80032c0 <gps_ema_update+0xf4>
		while (e < -180.0f) e += 360.0f;
 80032e2:	e007      	b.n	80032f4 <gps_ema_update+0x128>
 80032e4:	edd7 7a05 	vldr	s15, [r7, #20]
 80032e8:	ed9f 7a23 	vldr	s14, [pc, #140]	@ 8003378 <gps_ema_update+0x1ac>
 80032ec:	ee77 7a87 	vadd.f32	s15, s15, s14
 80032f0:	edc7 7a05 	vstr	s15, [r7, #20]
 80032f4:	edd7 7a05 	vldr	s15, [r7, #20]
 80032f8:	ed9f 7a21 	vldr	s14, [pc, #132]	@ 8003380 <gps_ema_update+0x1b4>
 80032fc:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003300:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003304:	d4ee      	bmi.n	80032e4 <gps_ema_update+0x118>
		f->course_deg_f += alpha_spd * e;
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	ed93 7a07 	vldr	s14, [r3, #28]
 800330c:	edd7 6a00 	vldr	s13, [r7]
 8003310:	edd7 7a05 	vldr	s15, [r7, #20]
 8003314:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003318:	ee77 7a27 	vadd.f32	s15, s14, s15
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	edc3 7a07 	vstr	s15, [r3, #28]
		// wrap back to [0,360)
		if (f->course_deg_f < 0.0f)  f->course_deg_f += 360.0f;
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	edd3 7a07 	vldr	s15, [r3, #28]
 8003328:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800332c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003330:	d509      	bpl.n	8003346 <gps_ema_update+0x17a>
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	edd3 7a07 	vldr	s15, [r3, #28]
 8003338:	ed9f 7a0f 	vldr	s14, [pc, #60]	@ 8003378 <gps_ema_update+0x1ac>
 800333c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	edc3 7a07 	vstr	s15, [r3, #28]
		if (f->course_deg_f >= 360.0f) f->course_deg_f -= 360.0f;
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	edd3 7a07 	vldr	s15, [r3, #28]
 800334c:	ed9f 7a0a 	vldr	s14, [pc, #40]	@ 8003378 <gps_ema_update+0x1ac>
 8003350:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003354:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003358:	db09      	blt.n	800336e <gps_ema_update+0x1a2>
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	edd3 7a07 	vldr	s15, [r3, #28]
 8003360:	ed9f 7a05 	vldr	s14, [pc, #20]	@ 8003378 <gps_ema_update+0x1ac>
 8003364:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	edc3 7a07 	vstr	s15, [r3, #28]
	}
}
 800336e:	371c      	adds	r7, #28
 8003370:	46bd      	mov	sp, r7
 8003372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003376:	4770      	bx	lr
 8003378:	43b40000 	.word	0x43b40000
 800337c:	43340000 	.word	0x43340000
 8003380:	c3340000 	.word	0xc3340000

08003384 <sensors_step>:
/* One-step function you asked for: reads sensors, updates filters, and prints */
static void sensors_step(float dt_s,
		float Q_pos, float Q_vel,
		float R_baro, float R_gps,
		float ema_latlon_alpha, float ema_spd_alpha,
		float *alt_fused_out) {
 8003384:	b5b0      	push	{r4, r5, r7, lr}
 8003386:	b096      	sub	sp, #88	@ 0x58
 8003388:	af0c      	add	r7, sp, #48	@ 0x30
 800338a:	ed87 0a07 	vstr	s0, [r7, #28]
 800338e:	edc7 0a06 	vstr	s1, [r7, #24]
 8003392:	ed87 1a05 	vstr	s2, [r7, #20]
 8003396:	edc7 1a04 	vstr	s3, [r7, #16]
 800339a:	ed87 2a03 	vstr	s4, [r7, #12]
 800339e:	edc7 2a02 	vstr	s5, [r7, #8]
 80033a2:	ed87 3a01 	vstr	s6, [r7, #4]
 80033a6:	6038      	str	r0, [r7, #0]
	// 1) Read all devices (non-blocking reads)
	if_dps.vTable->read(&if_dps);
 80033a8:	4b91      	ldr	r3, [pc, #580]	@ (80035f0 <sensors_step+0x26c>)
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	689b      	ldr	r3, [r3, #8]
 80033ae:	4890      	ldr	r0, [pc, #576]	@ (80035f0 <sensors_step+0x26c>)
 80033b0:	4798      	blx	r3
	if_icm.vTable->read(&if_icm);
 80033b2:	4b90      	ldr	r3, [pc, #576]	@ (80035f4 <sensors_step+0x270>)
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	689b      	ldr	r3, [r3, #8]
 80033b8:	488e      	ldr	r0, [pc, #568]	@ (80035f4 <sensors_step+0x270>)
 80033ba:	4798      	blx	r3

	if (HAL_GetTick() - gps.last_update_ms > 150) {
 80033bc:	f001 f8d0 	bl	8004560 <HAL_GetTick>
 80033c0:	4602      	mov	r2, r0
 80033c2:	4b8d      	ldr	r3, [pc, #564]	@ (80035f8 <sensors_step+0x274>)
 80033c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80033c6:	1ad3      	subs	r3, r2, r3
 80033c8:	2b96      	cmp	r3, #150	@ 0x96
 80033ca:	d919      	bls.n	8003400 <sensors_step+0x7c>
		uint32_t t_end = HAL_GetTick() + 60;         // ~60 ms budget
 80033cc:	f001 f8c8 	bl	8004560 <HAL_GetTick>
 80033d0:	4603      	mov	r3, r0
 80033d2:	333c      	adds	r3, #60	@ 0x3c
 80033d4:	627b      	str	r3, [r7, #36]	@ 0x24
		do {
			if_gps.vTable->read(&if_gps);
 80033d6:	4b89      	ldr	r3, [pc, #548]	@ (80035fc <sensors_step+0x278>)
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	689b      	ldr	r3, [r3, #8]
 80033dc:	4887      	ldr	r0, [pc, #540]	@ (80035fc <sensors_step+0x278>)
 80033de:	4798      	blx	r3
			if (HAL_GetTick() - gps.last_update_ms <= 50) break; // fresh enough
 80033e0:	f001 f8be 	bl	8004560 <HAL_GetTick>
 80033e4:	4602      	mov	r2, r0
 80033e6:	4b84      	ldr	r3, [pc, #528]	@ (80035f8 <sensors_step+0x274>)
 80033e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80033ea:	1ad3      	subs	r3, r2, r3
 80033ec:	2b32      	cmp	r3, #50	@ 0x32
 80033ee:	d90d      	bls.n	800340c <sensors_step+0x88>
		} while ((int32_t)(HAL_GetTick() - t_end) < 0);
 80033f0:	f001 f8b6 	bl	8004560 <HAL_GetTick>
 80033f4:	4602      	mov	r2, r0
 80033f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80033f8:	1ad3      	subs	r3, r2, r3
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	dbeb      	blt.n	80033d6 <sensors_step+0x52>
 80033fe:	e006      	b.n	800340e <sensors_step+0x8a>
	} else {
		// still give it a light read so we don't fall behind
		if_gps.vTable->read(&if_gps);
 8003400:	4b7e      	ldr	r3, [pc, #504]	@ (80035fc <sensors_step+0x278>)
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	689b      	ldr	r3, [r3, #8]
 8003406:	487d      	ldr	r0, [pc, #500]	@ (80035fc <sensors_step+0x278>)
 8003408:	4798      	blx	r3
 800340a:	e000      	b.n	800340e <sensors_step+0x8a>
			if (HAL_GetTick() - gps.last_update_ms <= 50) break; // fresh enough
 800340c:	bf00      	nop
	}

	// 2) Seed filters once we have a GPS fix
	if (!filters_seeded && gps.has_fix) {
 800340e:	4b7c      	ldr	r3, [pc, #496]	@ (8003600 <sensors_step+0x27c>)
 8003410:	781b      	ldrb	r3, [r3, #0]
 8003412:	2b00      	cmp	r3, #0
 8003414:	d111      	bne.n	800343a <sensors_step+0xb6>
 8003416:	4b78      	ldr	r3, [pc, #480]	@ (80035f8 <sensors_step+0x274>)
 8003418:	791b      	ldrb	r3, [r3, #4]
 800341a:	2b00      	cmp	r3, #0
 800341c:	d00d      	beq.n	800343a <sensors_step+0xb6>
		altkf_init(&altkf, gps.alt_m);  // start from GPS altitude
 800341e:	4b76      	ldr	r3, [pc, #472]	@ (80035f8 <sensors_step+0x274>)
 8003420:	edd3 7a06 	vldr	s15, [r3, #24]
 8003424:	eeb0 0a67 	vmov.f32	s0, s15
 8003428:	4876      	ldr	r0, [pc, #472]	@ (8003604 <sensors_step+0x280>)
 800342a:	f7ff fd9b 	bl	8002f64 <altkf_init>
		gps_ema_reset(&gpsf);
 800342e:	4876      	ldr	r0, [pc, #472]	@ (8003608 <sensors_step+0x284>)
 8003430:	f7ff febe 	bl	80031b0 <gps_ema_reset>
		filters_seeded = 1;
 8003434:	4b72      	ldr	r3, [pc, #456]	@ (8003600 <sensors_step+0x27c>)
 8003436:	2201      	movs	r2, #1
 8003438:	701a      	strb	r2, [r3, #0]
	}

	// 3) Predict step for altitude KF
	altkf_predict(&altkf, dt_s, Q_pos, Q_vel);
 800343a:	ed97 1a05 	vldr	s2, [r7, #20]
 800343e:	edd7 0a06 	vldr	s1, [r7, #24]
 8003442:	ed97 0a07 	vldr	s0, [r7, #28]
 8003446:	486f      	ldr	r0, [pc, #444]	@ (8003604 <sensors_step+0x280>)
 8003448:	f7ff fdb0 	bl	8002fac <altkf_predict>

	// 4) Baro absolute altitude, using your current DPS altitude.
	// If your dps.altitude already uses a good P0, this is fine.
	// Otherwise, compute dps.altitude yourself from pressure and a calibrated P0.
	float z_baro = (float)dps.altitude;
 800344c:	4b6f      	ldr	r3, [pc, #444]	@ (800360c <sensors_step+0x288>)
 800344e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003450:	623b      	str	r3, [r7, #32]

	// 5) Update with baro at high rate
	altkf_update_scalar(&altkf, z_baro, R_baro);
 8003452:	edd7 0a04 	vldr	s1, [r7, #16]
 8003456:	ed97 0a08 	vldr	s0, [r7, #32]
 800345a:	486a      	ldr	r0, [pc, #424]	@ (8003604 <sensors_step+0x280>)
 800345c:	f7ff fe18 	bl	8003090 <altkf_update_scalar>

	// 6) If a fresh GPS fix is present, update with GPS altitude as absolute correction
	if (gps.has_fix) {
 8003460:	4b65      	ldr	r3, [pc, #404]	@ (80035f8 <sensors_step+0x274>)
 8003462:	791b      	ldrb	r3, [r3, #4]
 8003464:	2b00      	cmp	r3, #0
 8003466:	d011      	beq.n	800348c <sensors_step+0x108>
		altkf_update_scalar(&altkf, (float)gps.alt_m, R_gps);
 8003468:	4b63      	ldr	r3, [pc, #396]	@ (80035f8 <sensors_step+0x274>)
 800346a:	edd3 7a06 	vldr	s15, [r3, #24]
 800346e:	edd7 0a03 	vldr	s1, [r7, #12]
 8003472:	eeb0 0a67 	vmov.f32	s0, s15
 8003476:	4863      	ldr	r0, [pc, #396]	@ (8003604 <sensors_step+0x280>)
 8003478:	f7ff fe0a 	bl	8003090 <altkf_update_scalar>
		gps_ema_update(&gpsf, &gps, ema_latlon_alpha, ema_spd_alpha);
 800347c:	edd7 0a01 	vldr	s1, [r7, #4]
 8003480:	ed97 0a02 	vldr	s0, [r7, #8]
 8003484:	495c      	ldr	r1, [pc, #368]	@ (80035f8 <sensors_step+0x274>)
 8003486:	4860      	ldr	r0, [pc, #384]	@ (8003608 <sensors_step+0x284>)
 8003488:	f7ff fea0 	bl	80031cc <gps_ema_update>
	}

	if (alt_fused_out) *alt_fused_out = altkf.x;
 800348c:	683b      	ldr	r3, [r7, #0]
 800348e:	2b00      	cmp	r3, #0
 8003490:	d003      	beq.n	800349a <sensors_step+0x116>
 8003492:	4b5c      	ldr	r3, [pc, #368]	@ (8003604 <sensors_step+0x280>)
 8003494:	681a      	ldr	r2, [r3, #0]
 8003496:	683b      	ldr	r3, [r7, #0]
 8003498:	601a      	str	r2, [r3, #0]

	// 7) Print once per call for visibility
	printf("ICM temp: %.2f C\r\n", icm.last_temp_c);
 800349a:	4b5d      	ldr	r3, [pc, #372]	@ (8003610 <sensors_step+0x28c>)
 800349c:	edd3 7a07 	vldr	s15, [r3, #28]
 80034a0:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80034a4:	ec53 2b17 	vmov	r2, r3, d7
 80034a8:	485a      	ldr	r0, [pc, #360]	@ (8003614 <sensors_step+0x290>)
 80034aa:	f007 ff8d 	bl	800b3c8 <iprintf>
	printf("ICM Accel (g): [%.2f, %.2f, %.2f]\r\n", (double)icm.accel_g[0], (double)icm.accel_g[1], (double)icm.accel_g[2]);
 80034ae:	4b58      	ldr	r3, [pc, #352]	@ (8003610 <sensors_step+0x28c>)
 80034b0:	edd3 7a08 	vldr	s15, [r3, #32]
 80034b4:	eeb7 5ae7 	vcvt.f64.f32	d5, s15
 80034b8:	4b55      	ldr	r3, [pc, #340]	@ (8003610 <sensors_step+0x28c>)
 80034ba:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 80034be:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80034c2:	4b53      	ldr	r3, [pc, #332]	@ (8003610 <sensors_step+0x28c>)
 80034c4:	edd3 6a0a 	vldr	s13, [r3, #40]	@ 0x28
 80034c8:	eeb7 6ae6 	vcvt.f64.f32	d6, s13
 80034cc:	ed8d 6b02 	vstr	d6, [sp, #8]
 80034d0:	ed8d 7b00 	vstr	d7, [sp]
 80034d4:	ec53 2b15 	vmov	r2, r3, d5
 80034d8:	484f      	ldr	r0, [pc, #316]	@ (8003618 <sensors_step+0x294>)
 80034da:	f007 ff75 	bl	800b3c8 <iprintf>
	printf("ICM Gyro  (dps): [%.2f, %.2f, %.2f]\r\n", (double)icm.gyro_dps[0], (double)icm.gyro_dps[1], (double)icm.gyro_dps[2]);
 80034de:	4b4c      	ldr	r3, [pc, #304]	@ (8003610 <sensors_step+0x28c>)
 80034e0:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 80034e4:	eeb7 5ae7 	vcvt.f64.f32	d5, s15
 80034e8:	4b49      	ldr	r3, [pc, #292]	@ (8003610 <sensors_step+0x28c>)
 80034ea:	edd3 7a0c 	vldr	s15, [r3, #48]	@ 0x30
 80034ee:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80034f2:	4b47      	ldr	r3, [pc, #284]	@ (8003610 <sensors_step+0x28c>)
 80034f4:	edd3 6a0d 	vldr	s13, [r3, #52]	@ 0x34
 80034f8:	eeb7 6ae6 	vcvt.f64.f32	d6, s13
 80034fc:	ed8d 6b02 	vstr	d6, [sp, #8]
 8003500:	ed8d 7b00 	vstr	d7, [sp]
 8003504:	ec53 2b15 	vmov	r2, r3, d5
 8003508:	4844      	ldr	r0, [pc, #272]	@ (800361c <sensors_step+0x298>)
 800350a:	f007 ff5d 	bl	800b3c8 <iprintf>

	printf("DPS Pressure: %.2f Pa   Temp: %.2f C   Alt_raw: %.2f m\r\n",
			(double)dps.pressure, (double)dps.temperature, (double)dps.altitude);
 800350e:	4b3f      	ldr	r3, [pc, #252]	@ (800360c <sensors_step+0x288>)
 8003510:	edd3 7a0e 	vldr	s15, [r3, #56]	@ 0x38
	printf("DPS Pressure: %.2f Pa   Temp: %.2f C   Alt_raw: %.2f m\r\n",
 8003514:	eeb7 5ae7 	vcvt.f64.f32	d5, s15
			(double)dps.pressure, (double)dps.temperature, (double)dps.altitude);
 8003518:	4b3c      	ldr	r3, [pc, #240]	@ (800360c <sensors_step+0x288>)
 800351a:	edd3 7a0f 	vldr	s15, [r3, #60]	@ 0x3c
	printf("DPS Pressure: %.2f Pa   Temp: %.2f C   Alt_raw: %.2f m\r\n",
 800351e:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
			(double)dps.pressure, (double)dps.temperature, (double)dps.altitude);
 8003522:	4b3a      	ldr	r3, [pc, #232]	@ (800360c <sensors_step+0x288>)
 8003524:	edd3 6a10 	vldr	s13, [r3, #64]	@ 0x40
	printf("DPS Pressure: %.2f Pa   Temp: %.2f C   Alt_raw: %.2f m\r\n",
 8003528:	eeb7 6ae6 	vcvt.f64.f32	d6, s13
 800352c:	ed8d 6b02 	vstr	d6, [sp, #8]
 8003530:	ed8d 7b00 	vstr	d7, [sp]
 8003534:	ec53 2b15 	vmov	r2, r3, d5
 8003538:	4839      	ldr	r0, [pc, #228]	@ (8003620 <sensors_step+0x29c>)
 800353a:	f007 ff45 	bl	800b3c8 <iprintf>

	if (gps.has_fix) {
 800353e:	4b2e      	ldr	r3, [pc, #184]	@ (80035f8 <sensors_step+0x274>)
 8003540:	791b      	ldrb	r3, [r3, #4]
 8003542:	2b00      	cmp	r3, #0
 8003544:	d031      	beq.n	80035aa <sensors_step+0x226>
		printf("[gps] FIX sats=%u hdop=%.2f lat=%.6f lon=%.6f alt=%.1f m spd=%.2f m/s cog=%.1f utc=%06lu\r\n",
				gps.sats_used, gps.hdop, gpsf.lat_deg_f, gpsf.lon_deg_f, gps.alt_m,
 8003546:	4b2c      	ldr	r3, [pc, #176]	@ (80035f8 <sensors_step+0x274>)
 8003548:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
		printf("[gps] FIX sats=%u hdop=%.2f lat=%.6f lon=%.6f alt=%.1f m spd=%.2f m/s cog=%.1f utc=%06lu\r\n",
 800354c:	461d      	mov	r5, r3
				gps.sats_used, gps.hdop, gpsf.lat_deg_f, gpsf.lon_deg_f, gps.alt_m,
 800354e:	4b2a      	ldr	r3, [pc, #168]	@ (80035f8 <sensors_step+0x274>)
 8003550:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
		printf("[gps] FIX sats=%u hdop=%.2f lat=%.6f lon=%.6f alt=%.1f m spd=%.2f m/s cog=%.1f utc=%06lu\r\n",
 8003554:	eeb7 4ae7 	vcvt.f64.f32	d4, s15
 8003558:	4b2b      	ldr	r3, [pc, #172]	@ (8003608 <sensors_step+0x284>)
 800355a:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 800355e:	492a      	ldr	r1, [pc, #168]	@ (8003608 <sensors_step+0x284>)
 8003560:	e9d1 0104 	ldrd	r0, r1, [r1, #16]
				gps.sats_used, gps.hdop, gpsf.lat_deg_f, gpsf.lon_deg_f, gps.alt_m,
 8003564:	4c24      	ldr	r4, [pc, #144]	@ (80035f8 <sensors_step+0x274>)
 8003566:	edd4 7a06 	vldr	s15, [r4, #24]
		printf("[gps] FIX sats=%u hdop=%.2f lat=%.6f lon=%.6f alt=%.1f m spd=%.2f m/s cog=%.1f utc=%06lu\r\n",
 800356a:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
				gpsf.spd_mps_f, gpsf.course_deg_f, (unsigned long)gps.utc_hms);
 800356e:	4c26      	ldr	r4, [pc, #152]	@ (8003608 <sensors_step+0x284>)
 8003570:	edd4 6a06 	vldr	s13, [r4, #24]
		printf("[gps] FIX sats=%u hdop=%.2f lat=%.6f lon=%.6f alt=%.1f m spd=%.2f m/s cog=%.1f utc=%06lu\r\n",
 8003574:	eeb7 6ae6 	vcvt.f64.f32	d6, s13
				gpsf.spd_mps_f, gpsf.course_deg_f, (unsigned long)gps.utc_hms);
 8003578:	4c23      	ldr	r4, [pc, #140]	@ (8003608 <sensors_step+0x284>)
 800357a:	edd4 5a07 	vldr	s11, [r4, #28]
		printf("[gps] FIX sats=%u hdop=%.2f lat=%.6f lon=%.6f alt=%.1f m spd=%.2f m/s cog=%.1f utc=%06lu\r\n",
 800357e:	eeb7 5ae5 	vcvt.f64.f32	d5, s11
				gpsf.spd_mps_f, gpsf.course_deg_f, (unsigned long)gps.utc_hms);
 8003582:	4c1d      	ldr	r4, [pc, #116]	@ (80035f8 <sensors_step+0x274>)
 8003584:	6ae4      	ldr	r4, [r4, #44]	@ 0x2c
		printf("[gps] FIX sats=%u hdop=%.2f lat=%.6f lon=%.6f alt=%.1f m spd=%.2f m/s cog=%.1f utc=%06lu\r\n",
 8003586:	940a      	str	r4, [sp, #40]	@ 0x28
 8003588:	ed8d 5b08 	vstr	d5, [sp, #32]
 800358c:	ed8d 6b06 	vstr	d6, [sp, #24]
 8003590:	ed8d 7b04 	vstr	d7, [sp, #16]
 8003594:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8003598:	e9cd 2300 	strd	r2, r3, [sp]
 800359c:	ec53 2b14 	vmov	r2, r3, d4
 80035a0:	4629      	mov	r1, r5
 80035a2:	4820      	ldr	r0, [pc, #128]	@ (8003624 <sensors_step+0x2a0>)
 80035a4:	f007 ff10 	bl	800b3c8 <iprintf>
 80035a8:	e00d      	b.n	80035c6 <sensors_step+0x242>
	} else {
		printf("[gps] NO FIX, sats=%u hdop=%.2f\r\n", gps.sats_used, gps.hdop);
 80035aa:	4b13      	ldr	r3, [pc, #76]	@ (80035f8 <sensors_step+0x274>)
 80035ac:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80035b0:	4619      	mov	r1, r3
 80035b2:	4b11      	ldr	r3, [pc, #68]	@ (80035f8 <sensors_step+0x274>)
 80035b4:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 80035b8:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80035bc:	ec53 2b17 	vmov	r2, r3, d7
 80035c0:	4819      	ldr	r0, [pc, #100]	@ (8003628 <sensors_step+0x2a4>)
 80035c2:	f007 ff01 	bl	800b3c8 <iprintf>
	}

	printf("[fuse] alt_fused=%.2f m  v_z=%.2f m/s\r\n", (double)altkf.x, (double)altkf.v);
 80035c6:	4b0f      	ldr	r3, [pc, #60]	@ (8003604 <sensors_step+0x280>)
 80035c8:	edd3 7a00 	vldr	s15, [r3]
 80035cc:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 80035d0:	4b0c      	ldr	r3, [pc, #48]	@ (8003604 <sensors_step+0x280>)
 80035d2:	edd3 7a01 	vldr	s15, [r3, #4]
 80035d6:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80035da:	ed8d 7b00 	vstr	d7, [sp]
 80035de:	ec53 2b16 	vmov	r2, r3, d6
 80035e2:	4812      	ldr	r0, [pc, #72]	@ (800362c <sensors_step+0x2a8>)
 80035e4:	f007 fef0 	bl	800b3c8 <iprintf>
}
 80035e8:	bf00      	nop
 80035ea:	3728      	adds	r7, #40	@ 0x28
 80035ec:	46bd      	mov	sp, r7
 80035ee:	bdb0      	pop	{r4, r5, r7, pc}
 80035f0:	240003c4 	.word	0x240003c4
 80035f4:	240003cc 	.word	0x240003cc
 80035f8:	24000468 	.word	0x24000468
 80035fc:	240003d4 	.word	0x240003d4
 8003600:	240004d8 	.word	0x240004d8
 8003604:	240004a0 	.word	0x240004a0
 8003608:	240004b8 	.word	0x240004b8
 800360c:	240003dc 	.word	0x240003dc
 8003610:	24000420 	.word	0x24000420
 8003614:	0800de6c 	.word	0x0800de6c
 8003618:	0800de80 	.word	0x0800de80
 800361c:	0800dea4 	.word	0x0800dea4
 8003620:	0800decc 	.word	0x0800decc
 8003624:	0800df08 	.word	0x0800df08
 8003628:	0800df64 	.word	0x0800df64
 800362c:	0800df88 	.word	0x0800df88

08003630 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8003630:	b580      	push	{r7, lr}
 8003632:	b08c      	sub	sp, #48	@ 0x30
 8003634:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN 1 */

	/* USER CODE END 1 */

	/* MPU Configuration--------------------------------------------------------*/
	MPU_Config();
 8003636:	f000 fb15 	bl	8003c64 <MPU_Config>

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 800363a:	f000 ff0b 	bl	8004454 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 800363e:	f000 f8fb 	bl	8003838 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8003642:	f000 fa87 	bl	8003b54 <MX_GPIO_Init>
	MX_I2C1_Init();
 8003646:	f000 f961 	bl	800390c <MX_I2C1_Init>
	MX_USART3_UART_Init();
 800364a:	f000 f9df 	bl	8003a0c <MX_USART3_UART_Init>
	MX_I2C2_Init();
 800364e:	f000 f99d 	bl	800398c <MX_I2C2_Init>
	MX_USART6_UART_Init();
 8003652:	f000 fa2f 	bl	8003ab4 <MX_USART6_UART_Init>
	/* USER CODE BEGIN 2 */
	setvbuf(stdout, NULL, _IONBF, 0);
 8003656:	4b67      	ldr	r3, [pc, #412]	@ (80037f4 <main+0x1c4>)
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	6898      	ldr	r0, [r3, #8]
 800365c:	2300      	movs	r3, #0
 800365e:	2202      	movs	r2, #2
 8003660:	2100      	movs	r1, #0
 8003662:	f007 ff29 	bl	800b4b8 <setvbuf>
	printf("BOOT\r\n");
 8003666:	4864      	ldr	r0, [pc, #400]	@ (80037f8 <main+0x1c8>)
 8003668:	f007 ff1e 	bl	800b4a8 <puts>

	HAL_Delay(50);   // let sensors power up
 800366c:	2032      	movs	r0, #50	@ 0x32
 800366e:	f000 ff83 	bl	8004578 <HAL_Delay>
	// Optional quick sanity scan
	// I2C_Scan(&hi2c1);
	// I2C_Scan(&hi2c2);

	// Bind drivers to their buses/addresses (adjust to your wiring)
	dps310_bind(&if_dps, &dps, &hi2c2, DPS_I2C_ADDRESS);  // 0x77 by default, 0x76 if SDO low
 8003672:	2377      	movs	r3, #119	@ 0x77
 8003674:	4a61      	ldr	r2, [pc, #388]	@ (80037fc <main+0x1cc>)
 8003676:	4962      	ldr	r1, [pc, #392]	@ (8003800 <main+0x1d0>)
 8003678:	4862      	ldr	r0, [pc, #392]	@ (8003804 <main+0x1d4>)
 800367a:	f7fd fb3b 	bl	8000cf4 <dps310_bind>
	icm42688_bind(&if_icm, &icm, &hi2c1, ICM_ADDR_7B);  // 0x68 or 0x69 depending on AD0
 800367e:	2368      	movs	r3, #104	@ 0x68
 8003680:	4a61      	ldr	r2, [pc, #388]	@ (8003808 <main+0x1d8>)
 8003682:	4962      	ldr	r1, [pc, #392]	@ (800380c <main+0x1dc>)
 8003684:	4862      	ldr	r0, [pc, #392]	@ (8003810 <main+0x1e0>)
 8003686:	f7fe ff5f 	bl	8002548 <icm42688_bind>
	gps6m_bind(&if_gps, &gps, &huart6);
 800368a:	4a62      	ldr	r2, [pc, #392]	@ (8003814 <main+0x1e4>)
 800368c:	4962      	ldr	r1, [pc, #392]	@ (8003818 <main+0x1e8>)
 800368e:	4863      	ldr	r0, [pc, #396]	@ (800381c <main+0x1ec>)
 8003690:	f7fe fe56 	bl	8002340 <gps6m_bind>

	HAL_GPIO_WritePin(Red_LED_GPIO_Port, Red_LED_Pin, GPIO_PIN_SET);
 8003694:	2201      	movs	r2, #1
 8003696:	2102      	movs	r1, #2
 8003698:	4861      	ldr	r0, [pc, #388]	@ (8003820 <main+0x1f0>)
 800369a:	f001 faa9 	bl	8004bf0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Yellow_LED_GPIO_Port, Yellow_LED_Pin, GPIO_PIN_SET);
 800369e:	2201      	movs	r2, #1
 80036a0:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80036a4:	485f      	ldr	r0, [pc, #380]	@ (8003824 <main+0x1f4>)
 80036a6:	f001 faa3 	bl	8004bf0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Green_LED_GPIO_Port, Green_LED_Pin, GPIO_PIN_SET);
 80036aa:	2201      	movs	r2, #1
 80036ac:	2101      	movs	r1, #1
 80036ae:	485d      	ldr	r0, [pc, #372]	@ (8003824 <main+0x1f4>)
 80036b0:	f001 fa9e 	bl	8004bf0 <HAL_GPIO_WritePin>

	HAL_Delay(100);
 80036b4:	2064      	movs	r0, #100	@ 0x64
 80036b6:	f000 ff5f 	bl	8004578 <HAL_Delay>
	//
	//	HAL_GPIO_WritePin(Green_LED_GPIO_Port, Green_LED_Pin, GPIO_PIN_RESET);

	// Init devices (config, coeffs, etc. — your driver stubs can be expanded later)
	HAL_StatusTypeDef response;
	response = if_icm.vTable->init(&if_icm);
 80036ba:	4b55      	ldr	r3, [pc, #340]	@ (8003810 <main+0x1e0>)
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	685b      	ldr	r3, [r3, #4]
 80036c0:	4853      	ldr	r0, [pc, #332]	@ (8003810 <main+0x1e0>)
 80036c2:	4798      	blx	r3
 80036c4:	4603      	mov	r3, r0
 80036c6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	if (response != HAL_OK) while(1);
 80036ca:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d001      	beq.n	80036d6 <main+0xa6>
 80036d2:	bf00      	nop
 80036d4:	e7fd      	b.n	80036d2 <main+0xa2>

	HAL_GPIO_WritePin(Red_LED_GPIO_Port, Red_LED_Pin, GPIO_PIN_RESET);
 80036d6:	2200      	movs	r2, #0
 80036d8:	2102      	movs	r1, #2
 80036da:	4851      	ldr	r0, [pc, #324]	@ (8003820 <main+0x1f0>)
 80036dc:	f001 fa88 	bl	8004bf0 <HAL_GPIO_WritePin>

	response =if_dps.vTable->init(&if_dps);
 80036e0:	4b48      	ldr	r3, [pc, #288]	@ (8003804 <main+0x1d4>)
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	685b      	ldr	r3, [r3, #4]
 80036e6:	4847      	ldr	r0, [pc, #284]	@ (8003804 <main+0x1d4>)
 80036e8:	4798      	blx	r3
 80036ea:	4603      	mov	r3, r0
 80036ec:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	if (response != HAL_OK) while(1);
 80036f0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	d001      	beq.n	80036fc <main+0xcc>
 80036f8:	bf00      	nop
 80036fa:	e7fd      	b.n	80036f8 <main+0xc8>

	HAL_GPIO_WritePin(Yellow_LED_GPIO_Port, Yellow_LED_Pin, GPIO_PIN_RESET);
 80036fc:	2200      	movs	r2, #0
 80036fe:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8003702:	4848      	ldr	r0, [pc, #288]	@ (8003824 <main+0x1f4>)
 8003704:	f001 fa74 	bl	8004bf0 <HAL_GPIO_WritePin>

	response = if_gps.vTable->probe(&if_gps);
 8003708:	4b44      	ldr	r3, [pc, #272]	@ (800381c <main+0x1ec>)
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	4843      	ldr	r0, [pc, #268]	@ (800381c <main+0x1ec>)
 8003710:	4798      	blx	r3
 8003712:	4603      	mov	r3, r0
 8003714:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	if (response != HAL_OK) while(1);
 8003718:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800371c:	2b00      	cmp	r3, #0
 800371e:	d001      	beq.n	8003724 <main+0xf4>
 8003720:	bf00      	nop
 8003722:	e7fd      	b.n	8003720 <main+0xf0>

	response =if_gps.vTable->init(&if_gps);
 8003724:	4b3d      	ldr	r3, [pc, #244]	@ (800381c <main+0x1ec>)
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	685b      	ldr	r3, [r3, #4]
 800372a:	483c      	ldr	r0, [pc, #240]	@ (800381c <main+0x1ec>)
 800372c:	4798      	blx	r3
 800372e:	4603      	mov	r3, r0
 8003730:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	if (response != HAL_OK) while(1);
 8003734:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003738:	2b00      	cmp	r3, #0
 800373a:	d001      	beq.n	8003740 <main+0x110>
 800373c:	bf00      	nop
 800373e:	e7fd      	b.n	800373c <main+0x10c>

	HAL_GPIO_WritePin(Green_LED_GPIO_Port, Green_LED_Pin, GPIO_PIN_RESET);
 8003740:	2200      	movs	r2, #0
 8003742:	2101      	movs	r1, #1
 8003744:	4837      	ldr	r0, [pc, #220]	@ (8003824 <main+0x1f4>)
 8003746:	f001 fa53 	bl	8004bf0 <HAL_GPIO_WritePin>

	/* USER CODE END 2 */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	uint32_t t_prev = HAL_GetTick();
 800374a:	f000 ff09 	bl	8004560 <HAL_GetTick>
 800374e:	62f8      	str	r0, [r7, #44]	@ 0x2c
	while (1)
	{
		uint32_t t_now = HAL_GetTick();
 8003750:	f000 ff06 	bl	8004560 <HAL_GetTick>
 8003754:	6238      	str	r0, [r7, #32]
		float dt_s = (t_now - t_prev) * 0.001f;
 8003756:	6a3a      	ldr	r2, [r7, #32]
 8003758:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800375a:	1ad3      	subs	r3, r2, r3
 800375c:	ee07 3a90 	vmov	s15, r3
 8003760:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003764:	ed9f 7a30 	vldr	s14, [pc, #192]	@ 8003828 <main+0x1f8>
 8003768:	ee67 7a87 	vmul.f32	s15, s15, s14
 800376c:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28
		if (dt_s <= 0.0f || dt_s > 1.0f) dt_s = 0.01f; // guard
 8003770:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 8003774:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003778:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800377c:	d908      	bls.n	8003790 <main+0x160>
 800377e:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 8003782:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8003786:	eef4 7ac7 	vcmpe.f32	s15, s14
 800378a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800378e:	dd01      	ble.n	8003794 <main+0x164>
 8003790:	4b26      	ldr	r3, [pc, #152]	@ (800382c <main+0x1fc>)
 8003792:	62bb      	str	r3, [r7, #40]	@ 0x28
		t_prev = t_now;
 8003794:	6a3b      	ldr	r3, [r7, #32]
 8003796:	62fb      	str	r3, [r7, #44]	@ 0x2c

		// Tuning knobs:
		const float Q_pos = 0.05f;    // process noise on position, m^2 per step
 8003798:	4b25      	ldr	r3, [pc, #148]	@ (8003830 <main+0x200>)
 800379a:	61fb      	str	r3, [r7, #28]
		const float Q_vel = 0.5f;     // process noise on velocity
 800379c:	f04f 537c 	mov.w	r3, #1056964608	@ 0x3f000000
 80037a0:	61bb      	str	r3, [r7, #24]
		const float R_baro = 1.0f;    // baro meas var (m^2)
 80037a2:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 80037a6:	617b      	str	r3, [r7, #20]
		const float R_gps  = 16.0f;   // gps meas var (m^2) ~4 m std^2
 80037a8:	f04f 4383 	mov.w	r3, #1098907648	@ 0x41800000
 80037ac:	613b      	str	r3, [r7, #16]

		const float EMA_LATLON = 0.15f; // 0..1, higher = less smoothing
 80037ae:	4b21      	ldr	r3, [pc, #132]	@ (8003834 <main+0x204>)
 80037b0:	60fb      	str	r3, [r7, #12]
		const float EMA_SPD    = 0.25f;
 80037b2:	f04f 537a 	mov.w	r3, #1048576000	@ 0x3e800000
 80037b6:	60bb      	str	r3, [r7, #8]

		float alt_fused = 0.0f;
 80037b8:	f04f 0300 	mov.w	r3, #0
 80037bc:	607b      	str	r3, [r7, #4]
		sensors_step(dt_s, Q_pos, Q_vel, R_baro, R_gps, EMA_LATLON, EMA_SPD, &alt_fused);
 80037be:	1d3b      	adds	r3, r7, #4
 80037c0:	4618      	mov	r0, r3
 80037c2:	ed97 3a02 	vldr	s6, [r7, #8]
 80037c6:	edd7 2a03 	vldr	s5, [r7, #12]
 80037ca:	ed97 2a04 	vldr	s4, [r7, #16]
 80037ce:	edd7 1a05 	vldr	s3, [r7, #20]
 80037d2:	ed97 1a06 	vldr	s2, [r7, #24]
 80037d6:	edd7 0a07 	vldr	s1, [r7, #28]
 80037da:	ed97 0a0a 	vldr	s0, [r7, #40]	@ 0x28
 80037de:	f7ff fdd1 	bl	8003384 <sensors_step>

		// Example: light heartbeat and 10 Hz loop
		HAL_GPIO_TogglePin(Green_LED_GPIO_Port, Green_LED_Pin);
 80037e2:	2101      	movs	r1, #1
 80037e4:	480f      	ldr	r0, [pc, #60]	@ (8003824 <main+0x1f4>)
 80037e6:	f001 fa1c 	bl	8004c22 <HAL_GPIO_TogglePin>
		HAL_Delay(100);
 80037ea:	2064      	movs	r0, #100	@ 0x64
 80037ec:	f000 fec4 	bl	8004578 <HAL_Delay>
	{
 80037f0:	e7ae      	b.n	8003750 <main+0x120>
 80037f2:	bf00      	nop
 80037f4:	24000188 	.word	0x24000188
 80037f8:	0800dfe0 	.word	0x0800dfe0
 80037fc:	24000248 	.word	0x24000248
 8003800:	240003dc 	.word	0x240003dc
 8003804:	240003c4 	.word	0x240003c4
 8003808:	240001f4 	.word	0x240001f4
 800380c:	24000420 	.word	0x24000420
 8003810:	240003cc 	.word	0x240003cc
 8003814:	24000330 	.word	0x24000330
 8003818:	24000468 	.word	0x24000468
 800381c:	240003d4 	.word	0x240003d4
 8003820:	58021000 	.word	0x58021000
 8003824:	58020400 	.word	0x58020400
 8003828:	3a83126f 	.word	0x3a83126f
 800382c:	3c23d70a 	.word	0x3c23d70a
 8003830:	3d4ccccd 	.word	0x3d4ccccd
 8003834:	3e19999a 	.word	0x3e19999a

08003838 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8003838:	b580      	push	{r7, lr}
 800383a:	b09c      	sub	sp, #112	@ 0x70
 800383c:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800383e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003842:	224c      	movs	r2, #76	@ 0x4c
 8003844:	2100      	movs	r1, #0
 8003846:	4618      	mov	r0, r3
 8003848:	f007 ffc2 	bl	800b7d0 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800384c:	1d3b      	adds	r3, r7, #4
 800384e:	2220      	movs	r2, #32
 8003850:	2100      	movs	r1, #0
 8003852:	4618      	mov	r0, r3
 8003854:	f007 ffbc 	bl	800b7d0 <memset>

	/** Supply configuration update enable
	 */
	HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8003858:	2002      	movs	r0, #2
 800385a:	f002 f82d 	bl	80058b8 <HAL_PWREx_ConfigSupply>

	/** Configure the main internal regulator output voltage
	 */
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 800385e:	2300      	movs	r3, #0
 8003860:	603b      	str	r3, [r7, #0]
 8003862:	4b28      	ldr	r3, [pc, #160]	@ (8003904 <SystemClock_Config+0xcc>)
 8003864:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003866:	4a27      	ldr	r2, [pc, #156]	@ (8003904 <SystemClock_Config+0xcc>)
 8003868:	f023 0301 	bic.w	r3, r3, #1
 800386c:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800386e:	4b25      	ldr	r3, [pc, #148]	@ (8003904 <SystemClock_Config+0xcc>)
 8003870:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003872:	f003 0301 	and.w	r3, r3, #1
 8003876:	603b      	str	r3, [r7, #0]
 8003878:	4b23      	ldr	r3, [pc, #140]	@ (8003908 <SystemClock_Config+0xd0>)
 800387a:	699b      	ldr	r3, [r3, #24]
 800387c:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8003880:	4a21      	ldr	r2, [pc, #132]	@ (8003908 <SystemClock_Config+0xd0>)
 8003882:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003886:	6193      	str	r3, [r2, #24]
 8003888:	4b1f      	ldr	r3, [pc, #124]	@ (8003908 <SystemClock_Config+0xd0>)
 800388a:	699b      	ldr	r3, [r3, #24]
 800388c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8003890:	603b      	str	r3, [r7, #0]
 8003892:	683b      	ldr	r3, [r7, #0]

	while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8003894:	bf00      	nop
 8003896:	4b1c      	ldr	r3, [pc, #112]	@ (8003908 <SystemClock_Config+0xd0>)
 8003898:	699b      	ldr	r3, [r3, #24]
 800389a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800389e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80038a2:	d1f8      	bne.n	8003896 <SystemClock_Config+0x5e>

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80038a4:	2302      	movs	r3, #2
 80038a6:	627b      	str	r3, [r7, #36]	@ 0x24
	RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 80038a8:	2301      	movs	r3, #1
 80038aa:	633b      	str	r3, [r7, #48]	@ 0x30
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80038ac:	2340      	movs	r3, #64	@ 0x40
 80038ae:	637b      	str	r3, [r7, #52]	@ 0x34
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80038b0:	2300      	movs	r3, #0
 80038b2:	64bb      	str	r3, [r7, #72]	@ 0x48
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80038b4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80038b8:	4618      	mov	r0, r3
 80038ba:	f002 f837 	bl	800592c <HAL_RCC_OscConfig>
 80038be:	4603      	mov	r3, r0
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d001      	beq.n	80038c8 <SystemClock_Config+0x90>
	{
		Error_Handler();
 80038c4:	f000 f9fa 	bl	8003cbc <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80038c8:	233f      	movs	r3, #63	@ 0x3f
 80038ca:	607b      	str	r3, [r7, #4]
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
			|RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80038cc:	2300      	movs	r3, #0
 80038ce:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80038d0:	2300      	movs	r3, #0
 80038d2:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 80038d4:	2300      	movs	r3, #0
 80038d6:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 80038d8:	2300      	movs	r3, #0
 80038da:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 80038dc:	2300      	movs	r3, #0
 80038de:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 80038e0:	2300      	movs	r3, #0
 80038e2:	61fb      	str	r3, [r7, #28]
	RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 80038e4:	2300      	movs	r3, #0
 80038e6:	623b      	str	r3, [r7, #32]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80038e8:	1d3b      	adds	r3, r7, #4
 80038ea:	2101      	movs	r1, #1
 80038ec:	4618      	mov	r0, r3
 80038ee:	f002 fc77 	bl	80061e0 <HAL_RCC_ClockConfig>
 80038f2:	4603      	mov	r3, r0
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	d001      	beq.n	80038fc <SystemClock_Config+0xc4>
	{
		Error_Handler();
 80038f8:	f000 f9e0 	bl	8003cbc <Error_Handler>
	}
}
 80038fc:	bf00      	nop
 80038fe:	3770      	adds	r7, #112	@ 0x70
 8003900:	46bd      	mov	sp, r7
 8003902:	bd80      	pop	{r7, pc}
 8003904:	58000400 	.word	0x58000400
 8003908:	58024800 	.word	0x58024800

0800390c <MX_I2C1_Init>:
 * @brief I2C1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C1_Init(void)
{
 800390c:	b580      	push	{r7, lr}
 800390e:	af00      	add	r7, sp, #0
	/* USER CODE END I2C1_Init 0 */

	/* USER CODE BEGIN I2C1_Init 1 */

	/* USER CODE END I2C1_Init 1 */
	hi2c1.Instance = I2C1;
 8003910:	4b1b      	ldr	r3, [pc, #108]	@ (8003980 <MX_I2C1_Init+0x74>)
 8003912:	4a1c      	ldr	r2, [pc, #112]	@ (8003984 <MX_I2C1_Init+0x78>)
 8003914:	601a      	str	r2, [r3, #0]
	hi2c1.Init.Timing = 0x10707DBC;
 8003916:	4b1a      	ldr	r3, [pc, #104]	@ (8003980 <MX_I2C1_Init+0x74>)
 8003918:	4a1b      	ldr	r2, [pc, #108]	@ (8003988 <MX_I2C1_Init+0x7c>)
 800391a:	605a      	str	r2, [r3, #4]
	hi2c1.Init.OwnAddress1 = 0;
 800391c:	4b18      	ldr	r3, [pc, #96]	@ (8003980 <MX_I2C1_Init+0x74>)
 800391e:	2200      	movs	r2, #0
 8003920:	609a      	str	r2, [r3, #8]
	hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8003922:	4b17      	ldr	r3, [pc, #92]	@ (8003980 <MX_I2C1_Init+0x74>)
 8003924:	2201      	movs	r2, #1
 8003926:	60da      	str	r2, [r3, #12]
	hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8003928:	4b15      	ldr	r3, [pc, #84]	@ (8003980 <MX_I2C1_Init+0x74>)
 800392a:	2200      	movs	r2, #0
 800392c:	611a      	str	r2, [r3, #16]
	hi2c1.Init.OwnAddress2 = 0;
 800392e:	4b14      	ldr	r3, [pc, #80]	@ (8003980 <MX_I2C1_Init+0x74>)
 8003930:	2200      	movs	r2, #0
 8003932:	615a      	str	r2, [r3, #20]
	hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8003934:	4b12      	ldr	r3, [pc, #72]	@ (8003980 <MX_I2C1_Init+0x74>)
 8003936:	2200      	movs	r2, #0
 8003938:	619a      	str	r2, [r3, #24]
	hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800393a:	4b11      	ldr	r3, [pc, #68]	@ (8003980 <MX_I2C1_Init+0x74>)
 800393c:	2200      	movs	r2, #0
 800393e:	61da      	str	r2, [r3, #28]
	hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8003940:	4b0f      	ldr	r3, [pc, #60]	@ (8003980 <MX_I2C1_Init+0x74>)
 8003942:	2200      	movs	r2, #0
 8003944:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8003946:	480e      	ldr	r0, [pc, #56]	@ (8003980 <MX_I2C1_Init+0x74>)
 8003948:	f001 f986 	bl	8004c58 <HAL_I2C_Init>
 800394c:	4603      	mov	r3, r0
 800394e:	2b00      	cmp	r3, #0
 8003950:	d001      	beq.n	8003956 <MX_I2C1_Init+0x4a>
	{
		Error_Handler();
 8003952:	f000 f9b3 	bl	8003cbc <Error_Handler>
	}

	/** Configure Analogue filter
	 */
	if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8003956:	2100      	movs	r1, #0
 8003958:	4809      	ldr	r0, [pc, #36]	@ (8003980 <MX_I2C1_Init+0x74>)
 800395a:	f001 ff15 	bl	8005788 <HAL_I2CEx_ConfigAnalogFilter>
 800395e:	4603      	mov	r3, r0
 8003960:	2b00      	cmp	r3, #0
 8003962:	d001      	beq.n	8003968 <MX_I2C1_Init+0x5c>
	{
		Error_Handler();
 8003964:	f000 f9aa 	bl	8003cbc <Error_Handler>
	}

	/** Configure Digital filter
	 */
	if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8003968:	2100      	movs	r1, #0
 800396a:	4805      	ldr	r0, [pc, #20]	@ (8003980 <MX_I2C1_Init+0x74>)
 800396c:	f001 ff57 	bl	800581e <HAL_I2CEx_ConfigDigitalFilter>
 8003970:	4603      	mov	r3, r0
 8003972:	2b00      	cmp	r3, #0
 8003974:	d001      	beq.n	800397a <MX_I2C1_Init+0x6e>
	{
		Error_Handler();
 8003976:	f000 f9a1 	bl	8003cbc <Error_Handler>
	}
	/* USER CODE BEGIN I2C1_Init 2 */

	/* USER CODE END I2C1_Init 2 */

}
 800397a:	bf00      	nop
 800397c:	bd80      	pop	{r7, pc}
 800397e:	bf00      	nop
 8003980:	240001f4 	.word	0x240001f4
 8003984:	40005400 	.word	0x40005400
 8003988:	10707dbc 	.word	0x10707dbc

0800398c <MX_I2C2_Init>:
 * @brief I2C2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C2_Init(void)
{
 800398c:	b580      	push	{r7, lr}
 800398e:	af00      	add	r7, sp, #0
	/* USER CODE END I2C2_Init 0 */

	/* USER CODE BEGIN I2C2_Init 1 */

	/* USER CODE END I2C2_Init 1 */
	hi2c2.Instance = I2C2;
 8003990:	4b1b      	ldr	r3, [pc, #108]	@ (8003a00 <MX_I2C2_Init+0x74>)
 8003992:	4a1c      	ldr	r2, [pc, #112]	@ (8003a04 <MX_I2C2_Init+0x78>)
 8003994:	601a      	str	r2, [r3, #0]
	hi2c2.Init.Timing = 0x10707DBC;
 8003996:	4b1a      	ldr	r3, [pc, #104]	@ (8003a00 <MX_I2C2_Init+0x74>)
 8003998:	4a1b      	ldr	r2, [pc, #108]	@ (8003a08 <MX_I2C2_Init+0x7c>)
 800399a:	605a      	str	r2, [r3, #4]
	hi2c2.Init.OwnAddress1 = 0;
 800399c:	4b18      	ldr	r3, [pc, #96]	@ (8003a00 <MX_I2C2_Init+0x74>)
 800399e:	2200      	movs	r2, #0
 80039a0:	609a      	str	r2, [r3, #8]
	hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80039a2:	4b17      	ldr	r3, [pc, #92]	@ (8003a00 <MX_I2C2_Init+0x74>)
 80039a4:	2201      	movs	r2, #1
 80039a6:	60da      	str	r2, [r3, #12]
	hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80039a8:	4b15      	ldr	r3, [pc, #84]	@ (8003a00 <MX_I2C2_Init+0x74>)
 80039aa:	2200      	movs	r2, #0
 80039ac:	611a      	str	r2, [r3, #16]
	hi2c2.Init.OwnAddress2 = 0;
 80039ae:	4b14      	ldr	r3, [pc, #80]	@ (8003a00 <MX_I2C2_Init+0x74>)
 80039b0:	2200      	movs	r2, #0
 80039b2:	615a      	str	r2, [r3, #20]
	hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80039b4:	4b12      	ldr	r3, [pc, #72]	@ (8003a00 <MX_I2C2_Init+0x74>)
 80039b6:	2200      	movs	r2, #0
 80039b8:	619a      	str	r2, [r3, #24]
	hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80039ba:	4b11      	ldr	r3, [pc, #68]	@ (8003a00 <MX_I2C2_Init+0x74>)
 80039bc:	2200      	movs	r2, #0
 80039be:	61da      	str	r2, [r3, #28]
	hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80039c0:	4b0f      	ldr	r3, [pc, #60]	@ (8003a00 <MX_I2C2_Init+0x74>)
 80039c2:	2200      	movs	r2, #0
 80039c4:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80039c6:	480e      	ldr	r0, [pc, #56]	@ (8003a00 <MX_I2C2_Init+0x74>)
 80039c8:	f001 f946 	bl	8004c58 <HAL_I2C_Init>
 80039cc:	4603      	mov	r3, r0
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d001      	beq.n	80039d6 <MX_I2C2_Init+0x4a>
	{
		Error_Handler();
 80039d2:	f000 f973 	bl	8003cbc <Error_Handler>
	}

	/** Configure Analogue filter
	 */
	if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80039d6:	2100      	movs	r1, #0
 80039d8:	4809      	ldr	r0, [pc, #36]	@ (8003a00 <MX_I2C2_Init+0x74>)
 80039da:	f001 fed5 	bl	8005788 <HAL_I2CEx_ConfigAnalogFilter>
 80039de:	4603      	mov	r3, r0
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	d001      	beq.n	80039e8 <MX_I2C2_Init+0x5c>
	{
		Error_Handler();
 80039e4:	f000 f96a 	bl	8003cbc <Error_Handler>
	}

	/** Configure Digital filter
	 */
	if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 80039e8:	2100      	movs	r1, #0
 80039ea:	4805      	ldr	r0, [pc, #20]	@ (8003a00 <MX_I2C2_Init+0x74>)
 80039ec:	f001 ff17 	bl	800581e <HAL_I2CEx_ConfigDigitalFilter>
 80039f0:	4603      	mov	r3, r0
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d001      	beq.n	80039fa <MX_I2C2_Init+0x6e>
	{
		Error_Handler();
 80039f6:	f000 f961 	bl	8003cbc <Error_Handler>
	}
	/* USER CODE BEGIN I2C2_Init 2 */

	/* USER CODE END I2C2_Init 2 */

}
 80039fa:	bf00      	nop
 80039fc:	bd80      	pop	{r7, pc}
 80039fe:	bf00      	nop
 8003a00:	24000248 	.word	0x24000248
 8003a04:	40005800 	.word	0x40005800
 8003a08:	10707dbc 	.word	0x10707dbc

08003a0c <MX_USART3_UART_Init>:
 * @brief USART3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART3_UART_Init(void)
{
 8003a0c:	b580      	push	{r7, lr}
 8003a0e:	af00      	add	r7, sp, #0
	/* USER CODE END USART3_Init 0 */

	/* USER CODE BEGIN USART3_Init 1 */

	/* USER CODE END USART3_Init 1 */
	huart3.Instance = USART3;
 8003a10:	4b25      	ldr	r3, [pc, #148]	@ (8003aa8 <MX_USART3_UART_Init+0x9c>)
 8003a12:	4a26      	ldr	r2, [pc, #152]	@ (8003aac <MX_USART3_UART_Init+0xa0>)
 8003a14:	601a      	str	r2, [r3, #0]
	huart3.Init.BaudRate = 115200;
 8003a16:	4b24      	ldr	r3, [pc, #144]	@ (8003aa8 <MX_USART3_UART_Init+0x9c>)
 8003a18:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8003a1c:	605a      	str	r2, [r3, #4]
	huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8003a1e:	4b22      	ldr	r3, [pc, #136]	@ (8003aa8 <MX_USART3_UART_Init+0x9c>)
 8003a20:	2200      	movs	r2, #0
 8003a22:	609a      	str	r2, [r3, #8]
	huart3.Init.StopBits = UART_STOPBITS_1;
 8003a24:	4b20      	ldr	r3, [pc, #128]	@ (8003aa8 <MX_USART3_UART_Init+0x9c>)
 8003a26:	2200      	movs	r2, #0
 8003a28:	60da      	str	r2, [r3, #12]
	huart3.Init.Parity = UART_PARITY_NONE;
 8003a2a:	4b1f      	ldr	r3, [pc, #124]	@ (8003aa8 <MX_USART3_UART_Init+0x9c>)
 8003a2c:	2200      	movs	r2, #0
 8003a2e:	611a      	str	r2, [r3, #16]
	huart3.Init.Mode = UART_MODE_TX_RX;
 8003a30:	4b1d      	ldr	r3, [pc, #116]	@ (8003aa8 <MX_USART3_UART_Init+0x9c>)
 8003a32:	220c      	movs	r2, #12
 8003a34:	615a      	str	r2, [r3, #20]
	huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003a36:	4b1c      	ldr	r3, [pc, #112]	@ (8003aa8 <MX_USART3_UART_Init+0x9c>)
 8003a38:	2200      	movs	r2, #0
 8003a3a:	619a      	str	r2, [r3, #24]
	huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8003a3c:	4b1a      	ldr	r3, [pc, #104]	@ (8003aa8 <MX_USART3_UART_Init+0x9c>)
 8003a3e:	2200      	movs	r2, #0
 8003a40:	61da      	str	r2, [r3, #28]
	huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003a42:	4b19      	ldr	r3, [pc, #100]	@ (8003aa8 <MX_USART3_UART_Init+0x9c>)
 8003a44:	2200      	movs	r2, #0
 8003a46:	621a      	str	r2, [r3, #32]
	huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8003a48:	4b17      	ldr	r3, [pc, #92]	@ (8003aa8 <MX_USART3_UART_Init+0x9c>)
 8003a4a:	2200      	movs	r2, #0
 8003a4c:	625a      	str	r2, [r3, #36]	@ 0x24
	huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003a4e:	4b16      	ldr	r3, [pc, #88]	@ (8003aa8 <MX_USART3_UART_Init+0x9c>)
 8003a50:	2200      	movs	r2, #0
 8003a52:	629a      	str	r2, [r3, #40]	@ 0x28
	if (HAL_UART_Init(&huart3) != HAL_OK)
 8003a54:	4814      	ldr	r0, [pc, #80]	@ (8003aa8 <MX_USART3_UART_Init+0x9c>)
 8003a56:	f004 fd7b 	bl	8008550 <HAL_UART_Init>
 8003a5a:	4603      	mov	r3, r0
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	d001      	beq.n	8003a64 <MX_USART3_UART_Init+0x58>
	{
		Error_Handler();
 8003a60:	f000 f92c 	bl	8003cbc <Error_Handler>
	}
	if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8003a64:	2100      	movs	r1, #0
 8003a66:	4810      	ldr	r0, [pc, #64]	@ (8003aa8 <MX_USART3_UART_Init+0x9c>)
 8003a68:	f005 fed9 	bl	800981e <HAL_UARTEx_SetTxFifoThreshold>
 8003a6c:	4603      	mov	r3, r0
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d001      	beq.n	8003a76 <MX_USART3_UART_Init+0x6a>
	{
		Error_Handler();
 8003a72:	f000 f923 	bl	8003cbc <Error_Handler>
	}
	if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8003a76:	2100      	movs	r1, #0
 8003a78:	480b      	ldr	r0, [pc, #44]	@ (8003aa8 <MX_USART3_UART_Init+0x9c>)
 8003a7a:	f005 ff0e 	bl	800989a <HAL_UARTEx_SetRxFifoThreshold>
 8003a7e:	4603      	mov	r3, r0
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	d001      	beq.n	8003a88 <MX_USART3_UART_Init+0x7c>
	{
		Error_Handler();
 8003a84:	f000 f91a 	bl	8003cbc <Error_Handler>
	}
	if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8003a88:	4807      	ldr	r0, [pc, #28]	@ (8003aa8 <MX_USART3_UART_Init+0x9c>)
 8003a8a:	f005 fe8f 	bl	80097ac <HAL_UARTEx_DisableFifoMode>
 8003a8e:	4603      	mov	r3, r0
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	d001      	beq.n	8003a98 <MX_USART3_UART_Init+0x8c>
	{
		Error_Handler();
 8003a94:	f000 f912 	bl	8003cbc <Error_Handler>
	}
	/* USER CODE BEGIN USART3_Init 2 */
	extern void retarget_init(UART_HandleTypeDef *huart);
	retarget_init(&huart3);
 8003a98:	4803      	ldr	r0, [pc, #12]	@ (8003aa8 <MX_USART3_UART_Init+0x9c>)
 8003a9a:	f000 f915 	bl	8003cc8 <retarget_init>
	printf("boot ok\n");
 8003a9e:	4804      	ldr	r0, [pc, #16]	@ (8003ab0 <MX_USART3_UART_Init+0xa4>)
 8003aa0:	f007 fd02 	bl	800b4a8 <puts>
	/* USER CODE END USART3_Init 2 */

}
 8003aa4:	bf00      	nop
 8003aa6:	bd80      	pop	{r7, pc}
 8003aa8:	2400029c 	.word	0x2400029c
 8003aac:	40004800 	.word	0x40004800
 8003ab0:	0800dfe8 	.word	0x0800dfe8

08003ab4 <MX_USART6_UART_Init>:
 * @brief USART6 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART6_UART_Init(void)
{
 8003ab4:	b580      	push	{r7, lr}
 8003ab6:	af00      	add	r7, sp, #0
	/* USER CODE END USART6_Init 0 */

	/* USER CODE BEGIN USART6_Init 1 */

	/* USER CODE END USART6_Init 1 */
	huart6.Instance = USART6;
 8003ab8:	4b24      	ldr	r3, [pc, #144]	@ (8003b4c <MX_USART6_UART_Init+0x98>)
 8003aba:	4a25      	ldr	r2, [pc, #148]	@ (8003b50 <MX_USART6_UART_Init+0x9c>)
 8003abc:	601a      	str	r2, [r3, #0]
	huart6.Init.BaudRate = 9600;
 8003abe:	4b23      	ldr	r3, [pc, #140]	@ (8003b4c <MX_USART6_UART_Init+0x98>)
 8003ac0:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8003ac4:	605a      	str	r2, [r3, #4]
	huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8003ac6:	4b21      	ldr	r3, [pc, #132]	@ (8003b4c <MX_USART6_UART_Init+0x98>)
 8003ac8:	2200      	movs	r2, #0
 8003aca:	609a      	str	r2, [r3, #8]
	huart6.Init.StopBits = UART_STOPBITS_1;
 8003acc:	4b1f      	ldr	r3, [pc, #124]	@ (8003b4c <MX_USART6_UART_Init+0x98>)
 8003ace:	2200      	movs	r2, #0
 8003ad0:	60da      	str	r2, [r3, #12]
	huart6.Init.Parity = UART_PARITY_NONE;
 8003ad2:	4b1e      	ldr	r3, [pc, #120]	@ (8003b4c <MX_USART6_UART_Init+0x98>)
 8003ad4:	2200      	movs	r2, #0
 8003ad6:	611a      	str	r2, [r3, #16]
	huart6.Init.Mode = UART_MODE_TX_RX;
 8003ad8:	4b1c      	ldr	r3, [pc, #112]	@ (8003b4c <MX_USART6_UART_Init+0x98>)
 8003ada:	220c      	movs	r2, #12
 8003adc:	615a      	str	r2, [r3, #20]
	huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003ade:	4b1b      	ldr	r3, [pc, #108]	@ (8003b4c <MX_USART6_UART_Init+0x98>)
 8003ae0:	2200      	movs	r2, #0
 8003ae2:	619a      	str	r2, [r3, #24]
	huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8003ae4:	4b19      	ldr	r3, [pc, #100]	@ (8003b4c <MX_USART6_UART_Init+0x98>)
 8003ae6:	2200      	movs	r2, #0
 8003ae8:	61da      	str	r2, [r3, #28]
	huart6.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003aea:	4b18      	ldr	r3, [pc, #96]	@ (8003b4c <MX_USART6_UART_Init+0x98>)
 8003aec:	2200      	movs	r2, #0
 8003aee:	621a      	str	r2, [r3, #32]
	huart6.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8003af0:	4b16      	ldr	r3, [pc, #88]	@ (8003b4c <MX_USART6_UART_Init+0x98>)
 8003af2:	2200      	movs	r2, #0
 8003af4:	625a      	str	r2, [r3, #36]	@ 0x24
	huart6.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_DMADISABLEONERROR_INIT;
 8003af6:	4b15      	ldr	r3, [pc, #84]	@ (8003b4c <MX_USART6_UART_Init+0x98>)
 8003af8:	2220      	movs	r2, #32
 8003afa:	629a      	str	r2, [r3, #40]	@ 0x28
	huart6.AdvancedInit.DMADisableonRxError = UART_ADVFEATURE_DMA_DISABLEONRXERROR;
 8003afc:	4b13      	ldr	r3, [pc, #76]	@ (8003b4c <MX_USART6_UART_Init+0x98>)
 8003afe:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8003b02:	641a      	str	r2, [r3, #64]	@ 0x40
	if (HAL_UART_Init(&huart6) != HAL_OK)
 8003b04:	4811      	ldr	r0, [pc, #68]	@ (8003b4c <MX_USART6_UART_Init+0x98>)
 8003b06:	f004 fd23 	bl	8008550 <HAL_UART_Init>
 8003b0a:	4603      	mov	r3, r0
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	d001      	beq.n	8003b14 <MX_USART6_UART_Init+0x60>
	{
		Error_Handler();
 8003b10:	f000 f8d4 	bl	8003cbc <Error_Handler>
	}
	if (HAL_UARTEx_SetTxFifoThreshold(&huart6, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8003b14:	2100      	movs	r1, #0
 8003b16:	480d      	ldr	r0, [pc, #52]	@ (8003b4c <MX_USART6_UART_Init+0x98>)
 8003b18:	f005 fe81 	bl	800981e <HAL_UARTEx_SetTxFifoThreshold>
 8003b1c:	4603      	mov	r3, r0
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d001      	beq.n	8003b26 <MX_USART6_UART_Init+0x72>
	{
		Error_Handler();
 8003b22:	f000 f8cb 	bl	8003cbc <Error_Handler>
	}
	if (HAL_UARTEx_SetRxFifoThreshold(&huart6, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8003b26:	2100      	movs	r1, #0
 8003b28:	4808      	ldr	r0, [pc, #32]	@ (8003b4c <MX_USART6_UART_Init+0x98>)
 8003b2a:	f005 feb6 	bl	800989a <HAL_UARTEx_SetRxFifoThreshold>
 8003b2e:	4603      	mov	r3, r0
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	d001      	beq.n	8003b38 <MX_USART6_UART_Init+0x84>
	{
		Error_Handler();
 8003b34:	f000 f8c2 	bl	8003cbc <Error_Handler>
	}
	if (HAL_UARTEx_DisableFifoMode(&huart6) != HAL_OK)
 8003b38:	4804      	ldr	r0, [pc, #16]	@ (8003b4c <MX_USART6_UART_Init+0x98>)
 8003b3a:	f005 fe37 	bl	80097ac <HAL_UARTEx_DisableFifoMode>
 8003b3e:	4603      	mov	r3, r0
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	d001      	beq.n	8003b48 <MX_USART6_UART_Init+0x94>
	{
		Error_Handler();
 8003b44:	f000 f8ba 	bl	8003cbc <Error_Handler>
	}
	/* USER CODE BEGIN USART6_Init 2 */

	/* USER CODE END USART6_Init 2 */

}
 8003b48:	bf00      	nop
 8003b4a:	bd80      	pop	{r7, pc}
 8003b4c:	24000330 	.word	0x24000330
 8003b50:	40011400 	.word	0x40011400

08003b54 <MX_GPIO_Init>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 8003b54:	b580      	push	{r7, lr}
 8003b56:	b08a      	sub	sp, #40	@ 0x28
 8003b58:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003b5a:	f107 0314 	add.w	r3, r7, #20
 8003b5e:	2200      	movs	r2, #0
 8003b60:	601a      	str	r2, [r3, #0]
 8003b62:	605a      	str	r2, [r3, #4]
 8003b64:	609a      	str	r2, [r3, #8]
 8003b66:	60da      	str	r2, [r3, #12]
 8003b68:	611a      	str	r2, [r3, #16]
	/* USER CODE BEGIN MX_GPIO_Init_1 */

	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOF_CLK_ENABLE();
 8003b6a:	4b3b      	ldr	r3, [pc, #236]	@ (8003c58 <MX_GPIO_Init+0x104>)
 8003b6c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003b70:	4a39      	ldr	r2, [pc, #228]	@ (8003c58 <MX_GPIO_Init+0x104>)
 8003b72:	f043 0320 	orr.w	r3, r3, #32
 8003b76:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8003b7a:	4b37      	ldr	r3, [pc, #220]	@ (8003c58 <MX_GPIO_Init+0x104>)
 8003b7c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003b80:	f003 0320 	and.w	r3, r3, #32
 8003b84:	613b      	str	r3, [r7, #16]
 8003b86:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8003b88:	4b33      	ldr	r3, [pc, #204]	@ (8003c58 <MX_GPIO_Init+0x104>)
 8003b8a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003b8e:	4a32      	ldr	r2, [pc, #200]	@ (8003c58 <MX_GPIO_Init+0x104>)
 8003b90:	f043 0302 	orr.w	r3, r3, #2
 8003b94:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8003b98:	4b2f      	ldr	r3, [pc, #188]	@ (8003c58 <MX_GPIO_Init+0x104>)
 8003b9a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003b9e:	f003 0302 	and.w	r3, r3, #2
 8003ba2:	60fb      	str	r3, [r7, #12]
 8003ba4:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 8003ba6:	4b2c      	ldr	r3, [pc, #176]	@ (8003c58 <MX_GPIO_Init+0x104>)
 8003ba8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003bac:	4a2a      	ldr	r2, [pc, #168]	@ (8003c58 <MX_GPIO_Init+0x104>)
 8003bae:	f043 0308 	orr.w	r3, r3, #8
 8003bb2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8003bb6:	4b28      	ldr	r3, [pc, #160]	@ (8003c58 <MX_GPIO_Init+0x104>)
 8003bb8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003bbc:	f003 0308 	and.w	r3, r3, #8
 8003bc0:	60bb      	str	r3, [r7, #8]
 8003bc2:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8003bc4:	4b24      	ldr	r3, [pc, #144]	@ (8003c58 <MX_GPIO_Init+0x104>)
 8003bc6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003bca:	4a23      	ldr	r2, [pc, #140]	@ (8003c58 <MX_GPIO_Init+0x104>)
 8003bcc:	f043 0304 	orr.w	r3, r3, #4
 8003bd0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8003bd4:	4b20      	ldr	r3, [pc, #128]	@ (8003c58 <MX_GPIO_Init+0x104>)
 8003bd6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003bda:	f003 0304 	and.w	r3, r3, #4
 8003bde:	607b      	str	r3, [r7, #4]
 8003be0:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOE_CLK_ENABLE();
 8003be2:	4b1d      	ldr	r3, [pc, #116]	@ (8003c58 <MX_GPIO_Init+0x104>)
 8003be4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003be8:	4a1b      	ldr	r2, [pc, #108]	@ (8003c58 <MX_GPIO_Init+0x104>)
 8003bea:	f043 0310 	orr.w	r3, r3, #16
 8003bee:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8003bf2:	4b19      	ldr	r3, [pc, #100]	@ (8003c58 <MX_GPIO_Init+0x104>)
 8003bf4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003bf8:	f003 0310 	and.w	r3, r3, #16
 8003bfc:	603b      	str	r3, [r7, #0]
 8003bfe:	683b      	ldr	r3, [r7, #0]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB, Green_LED_Pin|Yellow_LED_Pin, GPIO_PIN_RESET);
 8003c00:	2200      	movs	r2, #0
 8003c02:	f244 0101 	movw	r1, #16385	@ 0x4001
 8003c06:	4815      	ldr	r0, [pc, #84]	@ (8003c5c <MX_GPIO_Init+0x108>)
 8003c08:	f000 fff2 	bl	8004bf0 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(Red_LED_GPIO_Port, Red_LED_Pin, GPIO_PIN_RESET);
 8003c0c:	2200      	movs	r2, #0
 8003c0e:	2102      	movs	r1, #2
 8003c10:	4813      	ldr	r0, [pc, #76]	@ (8003c60 <MX_GPIO_Init+0x10c>)
 8003c12:	f000 ffed 	bl	8004bf0 <HAL_GPIO_WritePin>

	/*Configure GPIO pins : Green_LED_Pin Yellow_LED_Pin */
	GPIO_InitStruct.Pin = Green_LED_Pin|Yellow_LED_Pin;
 8003c16:	f244 0301 	movw	r3, #16385	@ 0x4001
 8003c1a:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003c1c:	2301      	movs	r3, #1
 8003c1e:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c20:	2300      	movs	r3, #0
 8003c22:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003c24:	2300      	movs	r3, #0
 8003c26:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003c28:	f107 0314 	add.w	r3, r7, #20
 8003c2c:	4619      	mov	r1, r3
 8003c2e:	480b      	ldr	r0, [pc, #44]	@ (8003c5c <MX_GPIO_Init+0x108>)
 8003c30:	f000 fe2e 	bl	8004890 <HAL_GPIO_Init>

	/*Configure GPIO pin : Red_LED_Pin */
	GPIO_InitStruct.Pin = Red_LED_Pin;
 8003c34:	2302      	movs	r3, #2
 8003c36:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003c38:	2301      	movs	r3, #1
 8003c3a:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c3c:	2300      	movs	r3, #0
 8003c3e:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003c40:	2300      	movs	r3, #0
 8003c42:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(Red_LED_GPIO_Port, &GPIO_InitStruct);
 8003c44:	f107 0314 	add.w	r3, r7, #20
 8003c48:	4619      	mov	r1, r3
 8003c4a:	4805      	ldr	r0, [pc, #20]	@ (8003c60 <MX_GPIO_Init+0x10c>)
 8003c4c:	f000 fe20 	bl	8004890 <HAL_GPIO_Init>

	/* USER CODE BEGIN MX_GPIO_Init_2 */

	/* USER CODE END MX_GPIO_Init_2 */
}
 8003c50:	bf00      	nop
 8003c52:	3728      	adds	r7, #40	@ 0x28
 8003c54:	46bd      	mov	sp, r7
 8003c56:	bd80      	pop	{r7, pc}
 8003c58:	58024400 	.word	0x58024400
 8003c5c:	58020400 	.word	0x58020400
 8003c60:	58021000 	.word	0x58021000

08003c64 <MPU_Config>:
/* USER CODE END 4 */

/* MPU Configuration */

void MPU_Config(void)
{
 8003c64:	b580      	push	{r7, lr}
 8003c66:	b084      	sub	sp, #16
 8003c68:	af00      	add	r7, sp, #0
	MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8003c6a:	463b      	mov	r3, r7
 8003c6c:	2200      	movs	r2, #0
 8003c6e:	601a      	str	r2, [r3, #0]
 8003c70:	605a      	str	r2, [r3, #4]
 8003c72:	609a      	str	r2, [r3, #8]
 8003c74:	60da      	str	r2, [r3, #12]

	/* Disables the MPU */
	HAL_MPU_Disable();
 8003c76:	f000 fd93 	bl	80047a0 <HAL_MPU_Disable>

	/** Initializes and configures the Region and the memory to be protected
	 */
	MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8003c7a:	2301      	movs	r3, #1
 8003c7c:	703b      	strb	r3, [r7, #0]
	MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 8003c7e:	2300      	movs	r3, #0
 8003c80:	707b      	strb	r3, [r7, #1]
	MPU_InitStruct.BaseAddress = 0x0;
 8003c82:	2300      	movs	r3, #0
 8003c84:	607b      	str	r3, [r7, #4]
	MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 8003c86:	231f      	movs	r3, #31
 8003c88:	723b      	strb	r3, [r7, #8]
	MPU_InitStruct.SubRegionDisable = 0x87;
 8003c8a:	2387      	movs	r3, #135	@ 0x87
 8003c8c:	727b      	strb	r3, [r7, #9]
	MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8003c8e:	2300      	movs	r3, #0
 8003c90:	72bb      	strb	r3, [r7, #10]
	MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 8003c92:	2300      	movs	r3, #0
 8003c94:	72fb      	strb	r3, [r7, #11]
	MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 8003c96:	2301      	movs	r3, #1
 8003c98:	733b      	strb	r3, [r7, #12]
	MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8003c9a:	2301      	movs	r3, #1
 8003c9c:	737b      	strb	r3, [r7, #13]
	MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8003c9e:	2300      	movs	r3, #0
 8003ca0:	73bb      	strb	r3, [r7, #14]
	MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 8003ca2:	2300      	movs	r3, #0
 8003ca4:	73fb      	strb	r3, [r7, #15]

	HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8003ca6:	463b      	mov	r3, r7
 8003ca8:	4618      	mov	r0, r3
 8003caa:	f000 fdb1 	bl	8004810 <HAL_MPU_ConfigRegion>
	/* Enables the MPU */
	HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8003cae:	2004      	movs	r0, #4
 8003cb0:	f000 fd8e 	bl	80047d0 <HAL_MPU_Enable>

}
 8003cb4:	bf00      	nop
 8003cb6:	3710      	adds	r7, #16
 8003cb8:	46bd      	mov	sp, r7
 8003cba:	bd80      	pop	{r7, pc}

08003cbc <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8003cbc:	b480      	push	{r7}
 8003cbe:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003cc0:	b672      	cpsid	i
}
 8003cc2:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8003cc4:	bf00      	nop
 8003cc6:	e7fd      	b.n	8003cc4 <Error_Handler+0x8>

08003cc8 <retarget_init>:
#include <stdio.h>        // FILE, setvbuf, stdout/stderr
#include <errno.h>

static UART_HandleTypeDef *s_huart = NULL;

void retarget_init(UART_HandleTypeDef *huart) {
 8003cc8:	b580      	push	{r7, lr}
 8003cca:	b082      	sub	sp, #8
 8003ccc:	af00      	add	r7, sp, #0
 8003cce:	6078      	str	r0, [r7, #4]
    s_huart = huart;
 8003cd0:	4a0b      	ldr	r2, [pc, #44]	@ (8003d00 <retarget_init+0x38>)
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	6013      	str	r3, [r2, #0]
    setvbuf(stdout, NULL, _IONBF, 0);
 8003cd6:	4b0b      	ldr	r3, [pc, #44]	@ (8003d04 <retarget_init+0x3c>)
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	6898      	ldr	r0, [r3, #8]
 8003cdc:	2300      	movs	r3, #0
 8003cde:	2202      	movs	r2, #2
 8003ce0:	2100      	movs	r1, #0
 8003ce2:	f007 fbe9 	bl	800b4b8 <setvbuf>
    setvbuf(stderr, NULL, _IONBF, 0);
 8003ce6:	4b07      	ldr	r3, [pc, #28]	@ (8003d04 <retarget_init+0x3c>)
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	68d8      	ldr	r0, [r3, #12]
 8003cec:	2300      	movs	r3, #0
 8003cee:	2202      	movs	r2, #2
 8003cf0:	2100      	movs	r1, #0
 8003cf2:	f007 fbe1 	bl	800b4b8 <setvbuf>
}
 8003cf6:	bf00      	nop
 8003cf8:	3708      	adds	r7, #8
 8003cfa:	46bd      	mov	sp, r7
 8003cfc:	bd80      	pop	{r7, pc}
 8003cfe:	bf00      	nop
 8003d00:	240004dc 	.word	0x240004dc
 8003d04:	24000188 	.word	0x24000188

08003d08 <uart_tx_blocking>:

static void uart_tx_blocking(const uint8_t *buf, uint16_t len) {
 8003d08:	b580      	push	{r7, lr}
 8003d0a:	b084      	sub	sp, #16
 8003d0c:	af00      	add	r7, sp, #0
 8003d0e:	6078      	str	r0, [r7, #4]
 8003d10:	460b      	mov	r3, r1
 8003d12:	807b      	strh	r3, [r7, #2]
    if (!s_huart) return;
 8003d14:	4b18      	ldr	r3, [pc, #96]	@ (8003d78 <uart_tx_blocking+0x70>)
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	d028      	beq.n	8003d6e <uart_tx_blocking+0x66>
    for (uint16_t i = 0; i < len; i++) {
 8003d1c:	2300      	movs	r3, #0
 8003d1e:	81fb      	strh	r3, [r7, #14]
 8003d20:	e020      	b.n	8003d64 <uart_tx_blocking+0x5c>
        uint8_t ch = buf[i];
 8003d22:	89fb      	ldrh	r3, [r7, #14]
 8003d24:	687a      	ldr	r2, [r7, #4]
 8003d26:	4413      	add	r3, r2
 8003d28:	781b      	ldrb	r3, [r3, #0]
 8003d2a:	737b      	strb	r3, [r7, #13]
        if (ch == '\n') {
 8003d2c:	7b7b      	ldrb	r3, [r7, #13]
 8003d2e:	2b0a      	cmp	r3, #10
 8003d30:	d10c      	bne.n	8003d4c <uart_tx_blocking+0x44>
            const uint8_t crlf[2] = {'\r','\n'};
 8003d32:	f640 230d 	movw	r3, #2573	@ 0xa0d
 8003d36:	813b      	strh	r3, [r7, #8]
            HAL_UART_Transmit(s_huart, (uint8_t*)crlf, 2, HAL_MAX_DELAY);
 8003d38:	4b0f      	ldr	r3, [pc, #60]	@ (8003d78 <uart_tx_blocking+0x70>)
 8003d3a:	6818      	ldr	r0, [r3, #0]
 8003d3c:	f107 0108 	add.w	r1, r7, #8
 8003d40:	f04f 33ff 	mov.w	r3, #4294967295
 8003d44:	2202      	movs	r2, #2
 8003d46:	f004 fc53 	bl	80085f0 <HAL_UART_Transmit>
 8003d4a:	e008      	b.n	8003d5e <uart_tx_blocking+0x56>
        } else {
            HAL_UART_Transmit(s_huart, &ch, 1, HAL_MAX_DELAY);
 8003d4c:	4b0a      	ldr	r3, [pc, #40]	@ (8003d78 <uart_tx_blocking+0x70>)
 8003d4e:	6818      	ldr	r0, [r3, #0]
 8003d50:	f107 010d 	add.w	r1, r7, #13
 8003d54:	f04f 33ff 	mov.w	r3, #4294967295
 8003d58:	2201      	movs	r2, #1
 8003d5a:	f004 fc49 	bl	80085f0 <HAL_UART_Transmit>
    for (uint16_t i = 0; i < len; i++) {
 8003d5e:	89fb      	ldrh	r3, [r7, #14]
 8003d60:	3301      	adds	r3, #1
 8003d62:	81fb      	strh	r3, [r7, #14]
 8003d64:	89fa      	ldrh	r2, [r7, #14]
 8003d66:	887b      	ldrh	r3, [r7, #2]
 8003d68:	429a      	cmp	r2, r3
 8003d6a:	d3da      	bcc.n	8003d22 <uart_tx_blocking+0x1a>
 8003d6c:	e000      	b.n	8003d70 <uart_tx_blocking+0x68>
    if (!s_huart) return;
 8003d6e:	bf00      	nop
        }
    }
}
 8003d70:	3710      	adds	r7, #16
 8003d72:	46bd      	mov	sp, r7
 8003d74:	bd80      	pop	{r7, pc}
 8003d76:	bf00      	nop
 8003d78:	240004dc 	.word	0x240004dc

08003d7c <_write>:

// Provide ONLY _write here. Let syscalls.c own _close/_fstat/_isatty/_lseek/_read.
int _write(int file, char *ptr, int len) {
 8003d7c:	b580      	push	{r7, lr}
 8003d7e:	b084      	sub	sp, #16
 8003d80:	af00      	add	r7, sp, #0
 8003d82:	60f8      	str	r0, [r7, #12]
 8003d84:	60b9      	str	r1, [r7, #8]
 8003d86:	607a      	str	r2, [r7, #4]
    if (file == STDOUT_FILENO || file == STDERR_FILENO) {
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	2b01      	cmp	r3, #1
 8003d8c:	d002      	beq.n	8003d94 <_write+0x18>
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	2b02      	cmp	r3, #2
 8003d92:	d107      	bne.n	8003da4 <_write+0x28>
        uart_tx_blocking((uint8_t*)ptr, (uint16_t)len);
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	b29b      	uxth	r3, r3
 8003d98:	4619      	mov	r1, r3
 8003d9a:	68b8      	ldr	r0, [r7, #8]
 8003d9c:	f7ff ffb4 	bl	8003d08 <uart_tx_blocking>
        return len;
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	e006      	b.n	8003db2 <_write+0x36>
    }
    errno = EBADF;
 8003da4:	f007 fd78 	bl	800b898 <__errno>
 8003da8:	4603      	mov	r3, r0
 8003daa:	2209      	movs	r2, #9
 8003dac:	601a      	str	r2, [r3, #0]
    return -1;
 8003dae:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003db2:	4618      	mov	r0, r3
 8003db4:	3710      	adds	r7, #16
 8003db6:	46bd      	mov	sp, r7
 8003db8:	bd80      	pop	{r7, pc}
	...

08003dbc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003dbc:	b480      	push	{r7}
 8003dbe:	b083      	sub	sp, #12
 8003dc0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003dc2:	4b0a      	ldr	r3, [pc, #40]	@ (8003dec <HAL_MspInit+0x30>)
 8003dc4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8003dc8:	4a08      	ldr	r2, [pc, #32]	@ (8003dec <HAL_MspInit+0x30>)
 8003dca:	f043 0302 	orr.w	r3, r3, #2
 8003dce:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8003dd2:	4b06      	ldr	r3, [pc, #24]	@ (8003dec <HAL_MspInit+0x30>)
 8003dd4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8003dd8:	f003 0302 	and.w	r3, r3, #2
 8003ddc:	607b      	str	r3, [r7, #4]
 8003dde:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003de0:	bf00      	nop
 8003de2:	370c      	adds	r7, #12
 8003de4:	46bd      	mov	sp, r7
 8003de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dea:	4770      	bx	lr
 8003dec:	58024400 	.word	0x58024400

08003df0 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8003df0:	b580      	push	{r7, lr}
 8003df2:	b0bc      	sub	sp, #240	@ 0xf0
 8003df4:	af00      	add	r7, sp, #0
 8003df6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003df8:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8003dfc:	2200      	movs	r2, #0
 8003dfe:	601a      	str	r2, [r3, #0]
 8003e00:	605a      	str	r2, [r3, #4]
 8003e02:	609a      	str	r2, [r3, #8]
 8003e04:	60da      	str	r2, [r3, #12]
 8003e06:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003e08:	f107 0318 	add.w	r3, r7, #24
 8003e0c:	22c0      	movs	r2, #192	@ 0xc0
 8003e0e:	2100      	movs	r1, #0
 8003e10:	4618      	mov	r0, r3
 8003e12:	f007 fcdd 	bl	800b7d0 <memset>
  if(hi2c->Instance==I2C1)
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	4a4d      	ldr	r2, [pc, #308]	@ (8003f50 <HAL_I2C_MspInit+0x160>)
 8003e1c:	4293      	cmp	r3, r2
 8003e1e:	d147      	bne.n	8003eb0 <HAL_I2C_MspInit+0xc0>

    /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8003e20:	f04f 0208 	mov.w	r2, #8
 8003e24:	f04f 0300 	mov.w	r3, #0
 8003e28:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 8003e2c:	2300      	movs	r3, #0
 8003e2e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003e32:	f107 0318 	add.w	r3, r7, #24
 8003e36:	4618      	mov	r0, r3
 8003e38:	f002 fd5e 	bl	80068f8 <HAL_RCCEx_PeriphCLKConfig>
 8003e3c:	4603      	mov	r3, r0
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d001      	beq.n	8003e46 <HAL_I2C_MspInit+0x56>
    {
      Error_Handler();
 8003e42:	f7ff ff3b 	bl	8003cbc <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003e46:	4b43      	ldr	r3, [pc, #268]	@ (8003f54 <HAL_I2C_MspInit+0x164>)
 8003e48:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003e4c:	4a41      	ldr	r2, [pc, #260]	@ (8003f54 <HAL_I2C_MspInit+0x164>)
 8003e4e:	f043 0302 	orr.w	r3, r3, #2
 8003e52:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8003e56:	4b3f      	ldr	r3, [pc, #252]	@ (8003f54 <HAL_I2C_MspInit+0x164>)
 8003e58:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003e5c:	f003 0302 	and.w	r3, r3, #2
 8003e60:	617b      	str	r3, [r7, #20]
 8003e62:	697b      	ldr	r3, [r7, #20]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = i2c1_scl_Pin|i2c1_sclB9_Pin;
 8003e64:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8003e68:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003e6c:	2312      	movs	r3, #18
 8003e6e:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e72:	2300      	movs	r3, #0
 8003e74:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003e78:	2300      	movs	r3, #0
 8003e7a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8003e7e:	2304      	movs	r3, #4
 8003e80:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003e84:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8003e88:	4619      	mov	r1, r3
 8003e8a:	4833      	ldr	r0, [pc, #204]	@ (8003f58 <HAL_I2C_MspInit+0x168>)
 8003e8c:	f000 fd00 	bl	8004890 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8003e90:	4b30      	ldr	r3, [pc, #192]	@ (8003f54 <HAL_I2C_MspInit+0x164>)
 8003e92:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8003e96:	4a2f      	ldr	r2, [pc, #188]	@ (8003f54 <HAL_I2C_MspInit+0x164>)
 8003e98:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8003e9c:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8003ea0:	4b2c      	ldr	r3, [pc, #176]	@ (8003f54 <HAL_I2C_MspInit+0x164>)
 8003ea2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8003ea6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003eaa:	613b      	str	r3, [r7, #16]
 8003eac:	693b      	ldr	r3, [r7, #16]
    /* USER CODE BEGIN I2C2_MspInit 1 */

    /* USER CODE END I2C2_MspInit 1 */
  }

}
 8003eae:	e04a      	b.n	8003f46 <HAL_I2C_MspInit+0x156>
  else if(hi2c->Instance==I2C2)
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	4a29      	ldr	r2, [pc, #164]	@ (8003f5c <HAL_I2C_MspInit+0x16c>)
 8003eb6:	4293      	cmp	r3, r2
 8003eb8:	d145      	bne.n	8003f46 <HAL_I2C_MspInit+0x156>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8003eba:	f04f 0208 	mov.w	r2, #8
 8003ebe:	f04f 0300 	mov.w	r3, #0
 8003ec2:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 8003ec6:	2300      	movs	r3, #0
 8003ec8:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003ecc:	f107 0318 	add.w	r3, r7, #24
 8003ed0:	4618      	mov	r0, r3
 8003ed2:	f002 fd11 	bl	80068f8 <HAL_RCCEx_PeriphCLKConfig>
 8003ed6:	4603      	mov	r3, r0
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	d001      	beq.n	8003ee0 <HAL_I2C_MspInit+0xf0>
      Error_Handler();
 8003edc:	f7ff feee 	bl	8003cbc <Error_Handler>
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8003ee0:	4b1c      	ldr	r3, [pc, #112]	@ (8003f54 <HAL_I2C_MspInit+0x164>)
 8003ee2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003ee6:	4a1b      	ldr	r2, [pc, #108]	@ (8003f54 <HAL_I2C_MspInit+0x164>)
 8003ee8:	f043 0320 	orr.w	r3, r3, #32
 8003eec:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8003ef0:	4b18      	ldr	r3, [pc, #96]	@ (8003f54 <HAL_I2C_MspInit+0x164>)
 8003ef2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003ef6:	f003 0320 	and.w	r3, r3, #32
 8003efa:	60fb      	str	r3, [r7, #12]
 8003efc:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = i2c2_sda_Pin|i2c2_scl_Pin;
 8003efe:	2303      	movs	r3, #3
 8003f00:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003f04:	2312      	movs	r3, #18
 8003f06:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003f0a:	2300      	movs	r3, #0
 8003f0c:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003f10:	2300      	movs	r3, #0
 8003f12:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8003f16:	2304      	movs	r3, #4
 8003f18:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8003f1c:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8003f20:	4619      	mov	r1, r3
 8003f22:	480f      	ldr	r0, [pc, #60]	@ (8003f60 <HAL_I2C_MspInit+0x170>)
 8003f24:	f000 fcb4 	bl	8004890 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8003f28:	4b0a      	ldr	r3, [pc, #40]	@ (8003f54 <HAL_I2C_MspInit+0x164>)
 8003f2a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8003f2e:	4a09      	ldr	r2, [pc, #36]	@ (8003f54 <HAL_I2C_MspInit+0x164>)
 8003f30:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8003f34:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8003f38:	4b06      	ldr	r3, [pc, #24]	@ (8003f54 <HAL_I2C_MspInit+0x164>)
 8003f3a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8003f3e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003f42:	60bb      	str	r3, [r7, #8]
 8003f44:	68bb      	ldr	r3, [r7, #8]
}
 8003f46:	bf00      	nop
 8003f48:	37f0      	adds	r7, #240	@ 0xf0
 8003f4a:	46bd      	mov	sp, r7
 8003f4c:	bd80      	pop	{r7, pc}
 8003f4e:	bf00      	nop
 8003f50:	40005400 	.word	0x40005400
 8003f54:	58024400 	.word	0x58024400
 8003f58:	58020400 	.word	0x58020400
 8003f5c:	40005800 	.word	0x40005800
 8003f60:	58021400 	.word	0x58021400

08003f64 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003f64:	b580      	push	{r7, lr}
 8003f66:	b0bc      	sub	sp, #240	@ 0xf0
 8003f68:	af00      	add	r7, sp, #0
 8003f6a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003f6c:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8003f70:	2200      	movs	r2, #0
 8003f72:	601a      	str	r2, [r3, #0]
 8003f74:	605a      	str	r2, [r3, #4]
 8003f76:	609a      	str	r2, [r3, #8]
 8003f78:	60da      	str	r2, [r3, #12]
 8003f7a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003f7c:	f107 0318 	add.w	r3, r7, #24
 8003f80:	22c0      	movs	r2, #192	@ 0xc0
 8003f82:	2100      	movs	r1, #0
 8003f84:	4618      	mov	r0, r3
 8003f86:	f007 fc23 	bl	800b7d0 <memset>
  if(huart->Instance==USART3)
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	4a4d      	ldr	r2, [pc, #308]	@ (80040c4 <HAL_UART_MspInit+0x160>)
 8003f90:	4293      	cmp	r3, r2
 8003f92:	d147      	bne.n	8004024 <HAL_UART_MspInit+0xc0>

    /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8003f94:	f04f 0202 	mov.w	r2, #2
 8003f98:	f04f 0300 	mov.w	r3, #0
 8003f9c:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8003fa0:	2300      	movs	r3, #0
 8003fa2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003fa6:	f107 0318 	add.w	r3, r7, #24
 8003faa:	4618      	mov	r0, r3
 8003fac:	f002 fca4 	bl	80068f8 <HAL_RCCEx_PeriphCLKConfig>
 8003fb0:	4603      	mov	r3, r0
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d001      	beq.n	8003fba <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8003fb6:	f7ff fe81 	bl	8003cbc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8003fba:	4b43      	ldr	r3, [pc, #268]	@ (80040c8 <HAL_UART_MspInit+0x164>)
 8003fbc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8003fc0:	4a41      	ldr	r2, [pc, #260]	@ (80040c8 <HAL_UART_MspInit+0x164>)
 8003fc2:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003fc6:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8003fca:	4b3f      	ldr	r3, [pc, #252]	@ (80040c8 <HAL_UART_MspInit+0x164>)
 8003fcc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8003fd0:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003fd4:	617b      	str	r3, [r7, #20]
 8003fd6:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003fd8:	4b3b      	ldr	r3, [pc, #236]	@ (80040c8 <HAL_UART_MspInit+0x164>)
 8003fda:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003fde:	4a3a      	ldr	r2, [pc, #232]	@ (80040c8 <HAL_UART_MspInit+0x164>)
 8003fe0:	f043 0308 	orr.w	r3, r3, #8
 8003fe4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8003fe8:	4b37      	ldr	r3, [pc, #220]	@ (80040c8 <HAL_UART_MspInit+0x164>)
 8003fea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003fee:	f003 0308 	and.w	r3, r3, #8
 8003ff2:	613b      	str	r3, [r7, #16]
 8003ff4:	693b      	ldr	r3, [r7, #16]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8003ff6:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8003ffa:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003ffe:	2302      	movs	r3, #2
 8004000:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004004:	2300      	movs	r3, #0
 8004006:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800400a:	2300      	movs	r3, #0
 800400c:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8004010:	2307      	movs	r3, #7
 8004012:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8004016:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 800401a:	4619      	mov	r1, r3
 800401c:	482b      	ldr	r0, [pc, #172]	@ (80040cc <HAL_UART_MspInit+0x168>)
 800401e:	f000 fc37 	bl	8004890 <HAL_GPIO_Init>
    /* USER CODE BEGIN USART6_MspInit 1 */

    /* USER CODE END USART6_MspInit 1 */
  }

}
 8004022:	e04a      	b.n	80040ba <HAL_UART_MspInit+0x156>
  else if(huart->Instance==USART6)
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	4a29      	ldr	r2, [pc, #164]	@ (80040d0 <HAL_UART_MspInit+0x16c>)
 800402a:	4293      	cmp	r3, r2
 800402c:	d145      	bne.n	80040ba <HAL_UART_MspInit+0x156>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART6;
 800402e:	f04f 0201 	mov.w	r2, #1
 8004032:	f04f 0300 	mov.w	r3, #0
 8004036:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16CLKSOURCE_D2PCLK2;
 800403a:	2300      	movs	r3, #0
 800403c:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8004040:	f107 0318 	add.w	r3, r7, #24
 8004044:	4618      	mov	r0, r3
 8004046:	f002 fc57 	bl	80068f8 <HAL_RCCEx_PeriphCLKConfig>
 800404a:	4603      	mov	r3, r0
 800404c:	2b00      	cmp	r3, #0
 800404e:	d001      	beq.n	8004054 <HAL_UART_MspInit+0xf0>
      Error_Handler();
 8004050:	f7ff fe34 	bl	8003cbc <Error_Handler>
    __HAL_RCC_USART6_CLK_ENABLE();
 8004054:	4b1c      	ldr	r3, [pc, #112]	@ (80040c8 <HAL_UART_MspInit+0x164>)
 8004056:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800405a:	4a1b      	ldr	r2, [pc, #108]	@ (80040c8 <HAL_UART_MspInit+0x164>)
 800405c:	f043 0320 	orr.w	r3, r3, #32
 8004060:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8004064:	4b18      	ldr	r3, [pc, #96]	@ (80040c8 <HAL_UART_MspInit+0x164>)
 8004066:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800406a:	f003 0320 	and.w	r3, r3, #32
 800406e:	60fb      	str	r3, [r7, #12]
 8004070:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004072:	4b15      	ldr	r3, [pc, #84]	@ (80040c8 <HAL_UART_MspInit+0x164>)
 8004074:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004078:	4a13      	ldr	r2, [pc, #76]	@ (80040c8 <HAL_UART_MspInit+0x164>)
 800407a:	f043 0304 	orr.w	r3, r3, #4
 800407e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8004082:	4b11      	ldr	r3, [pc, #68]	@ (80040c8 <HAL_UART_MspInit+0x164>)
 8004084:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004088:	f003 0304 	and.w	r3, r3, #4
 800408c:	60bb      	str	r3, [r7, #8]
 800408e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8004090:	23c0      	movs	r3, #192	@ 0xc0
 8004092:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004096:	2302      	movs	r3, #2
 8004098:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800409c:	2300      	movs	r3, #0
 800409e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80040a2:	2300      	movs	r3, #0
 80040a4:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART6;
 80040a8:	2307      	movs	r3, #7
 80040aa:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80040ae:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 80040b2:	4619      	mov	r1, r3
 80040b4:	4807      	ldr	r0, [pc, #28]	@ (80040d4 <HAL_UART_MspInit+0x170>)
 80040b6:	f000 fbeb 	bl	8004890 <HAL_GPIO_Init>
}
 80040ba:	bf00      	nop
 80040bc:	37f0      	adds	r7, #240	@ 0xf0
 80040be:	46bd      	mov	sp, r7
 80040c0:	bd80      	pop	{r7, pc}
 80040c2:	bf00      	nop
 80040c4:	40004800 	.word	0x40004800
 80040c8:	58024400 	.word	0x58024400
 80040cc:	58020c00 	.word	0x58020c00
 80040d0:	40011400 	.word	0x40011400
 80040d4:	58020800 	.word	0x58020800

080040d8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80040d8:	b480      	push	{r7}
 80040da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80040dc:	bf00      	nop
 80040de:	e7fd      	b.n	80040dc <NMI_Handler+0x4>

080040e0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80040e0:	b480      	push	{r7}
 80040e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80040e4:	bf00      	nop
 80040e6:	e7fd      	b.n	80040e4 <HardFault_Handler+0x4>

080040e8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80040e8:	b480      	push	{r7}
 80040ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80040ec:	bf00      	nop
 80040ee:	e7fd      	b.n	80040ec <MemManage_Handler+0x4>

080040f0 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80040f0:	b480      	push	{r7}
 80040f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80040f4:	bf00      	nop
 80040f6:	e7fd      	b.n	80040f4 <BusFault_Handler+0x4>

080040f8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80040f8:	b480      	push	{r7}
 80040fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80040fc:	bf00      	nop
 80040fe:	e7fd      	b.n	80040fc <UsageFault_Handler+0x4>

08004100 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8004100:	b480      	push	{r7}
 8004102:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8004104:	bf00      	nop
 8004106:	46bd      	mov	sp, r7
 8004108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800410c:	4770      	bx	lr

0800410e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800410e:	b480      	push	{r7}
 8004110:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004112:	bf00      	nop
 8004114:	46bd      	mov	sp, r7
 8004116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800411a:	4770      	bx	lr

0800411c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800411c:	b480      	push	{r7}
 800411e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8004120:	bf00      	nop
 8004122:	46bd      	mov	sp, r7
 8004124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004128:	4770      	bx	lr

0800412a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800412a:	b580      	push	{r7, lr}
 800412c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800412e:	f000 fa03 	bl	8004538 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8004132:	bf00      	nop
 8004134:	bd80      	pop	{r7, pc}

08004136 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8004136:	b480      	push	{r7}
 8004138:	af00      	add	r7, sp, #0
  return 1;
 800413a:	2301      	movs	r3, #1
}
 800413c:	4618      	mov	r0, r3
 800413e:	46bd      	mov	sp, r7
 8004140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004144:	4770      	bx	lr

08004146 <_kill>:

int _kill(int pid, int sig)
{
 8004146:	b580      	push	{r7, lr}
 8004148:	b082      	sub	sp, #8
 800414a:	af00      	add	r7, sp, #0
 800414c:	6078      	str	r0, [r7, #4]
 800414e:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8004150:	f007 fba2 	bl	800b898 <__errno>
 8004154:	4603      	mov	r3, r0
 8004156:	2216      	movs	r2, #22
 8004158:	601a      	str	r2, [r3, #0]
  return -1;
 800415a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800415e:	4618      	mov	r0, r3
 8004160:	3708      	adds	r7, #8
 8004162:	46bd      	mov	sp, r7
 8004164:	bd80      	pop	{r7, pc}

08004166 <_exit>:

void _exit (int status)
{
 8004166:	b580      	push	{r7, lr}
 8004168:	b082      	sub	sp, #8
 800416a:	af00      	add	r7, sp, #0
 800416c:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800416e:	f04f 31ff 	mov.w	r1, #4294967295
 8004172:	6878      	ldr	r0, [r7, #4]
 8004174:	f7ff ffe7 	bl	8004146 <_kill>
  while (1) {}    /* Make sure we hang here */
 8004178:	bf00      	nop
 800417a:	e7fd      	b.n	8004178 <_exit+0x12>

0800417c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800417c:	b580      	push	{r7, lr}
 800417e:	b086      	sub	sp, #24
 8004180:	af00      	add	r7, sp, #0
 8004182:	60f8      	str	r0, [r7, #12]
 8004184:	60b9      	str	r1, [r7, #8]
 8004186:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004188:	2300      	movs	r3, #0
 800418a:	617b      	str	r3, [r7, #20]
 800418c:	e00a      	b.n	80041a4 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800418e:	f3af 8000 	nop.w
 8004192:	4601      	mov	r1, r0
 8004194:	68bb      	ldr	r3, [r7, #8]
 8004196:	1c5a      	adds	r2, r3, #1
 8004198:	60ba      	str	r2, [r7, #8]
 800419a:	b2ca      	uxtb	r2, r1
 800419c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800419e:	697b      	ldr	r3, [r7, #20]
 80041a0:	3301      	adds	r3, #1
 80041a2:	617b      	str	r3, [r7, #20]
 80041a4:	697a      	ldr	r2, [r7, #20]
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	429a      	cmp	r2, r3
 80041aa:	dbf0      	blt.n	800418e <_read+0x12>
  }

  return len;
 80041ac:	687b      	ldr	r3, [r7, #4]
}
 80041ae:	4618      	mov	r0, r3
 80041b0:	3718      	adds	r7, #24
 80041b2:	46bd      	mov	sp, r7
 80041b4:	bd80      	pop	{r7, pc}

080041b6 <_close>:
  }
  return len;
}

int _close(int file)
{
 80041b6:	b480      	push	{r7}
 80041b8:	b083      	sub	sp, #12
 80041ba:	af00      	add	r7, sp, #0
 80041bc:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80041be:	f04f 33ff 	mov.w	r3, #4294967295
}
 80041c2:	4618      	mov	r0, r3
 80041c4:	370c      	adds	r7, #12
 80041c6:	46bd      	mov	sp, r7
 80041c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041cc:	4770      	bx	lr

080041ce <_fstat>:


int _fstat(int file, struct stat *st)
{
 80041ce:	b480      	push	{r7}
 80041d0:	b083      	sub	sp, #12
 80041d2:	af00      	add	r7, sp, #0
 80041d4:	6078      	str	r0, [r7, #4]
 80041d6:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80041d8:	683b      	ldr	r3, [r7, #0]
 80041da:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80041de:	605a      	str	r2, [r3, #4]
  return 0;
 80041e0:	2300      	movs	r3, #0
}
 80041e2:	4618      	mov	r0, r3
 80041e4:	370c      	adds	r7, #12
 80041e6:	46bd      	mov	sp, r7
 80041e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ec:	4770      	bx	lr

080041ee <_isatty>:

int _isatty(int file)
{
 80041ee:	b480      	push	{r7}
 80041f0:	b083      	sub	sp, #12
 80041f2:	af00      	add	r7, sp, #0
 80041f4:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80041f6:	2301      	movs	r3, #1
}
 80041f8:	4618      	mov	r0, r3
 80041fa:	370c      	adds	r7, #12
 80041fc:	46bd      	mov	sp, r7
 80041fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004202:	4770      	bx	lr

08004204 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8004204:	b480      	push	{r7}
 8004206:	b085      	sub	sp, #20
 8004208:	af00      	add	r7, sp, #0
 800420a:	60f8      	str	r0, [r7, #12]
 800420c:	60b9      	str	r1, [r7, #8]
 800420e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8004210:	2300      	movs	r3, #0
}
 8004212:	4618      	mov	r0, r3
 8004214:	3714      	adds	r7, #20
 8004216:	46bd      	mov	sp, r7
 8004218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800421c:	4770      	bx	lr
	...

08004220 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8004220:	b580      	push	{r7, lr}
 8004222:	b086      	sub	sp, #24
 8004224:	af00      	add	r7, sp, #0
 8004226:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8004228:	4a14      	ldr	r2, [pc, #80]	@ (800427c <_sbrk+0x5c>)
 800422a:	4b15      	ldr	r3, [pc, #84]	@ (8004280 <_sbrk+0x60>)
 800422c:	1ad3      	subs	r3, r2, r3
 800422e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8004230:	697b      	ldr	r3, [r7, #20]
 8004232:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8004234:	4b13      	ldr	r3, [pc, #76]	@ (8004284 <_sbrk+0x64>)
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	2b00      	cmp	r3, #0
 800423a:	d102      	bne.n	8004242 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800423c:	4b11      	ldr	r3, [pc, #68]	@ (8004284 <_sbrk+0x64>)
 800423e:	4a12      	ldr	r2, [pc, #72]	@ (8004288 <_sbrk+0x68>)
 8004240:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8004242:	4b10      	ldr	r3, [pc, #64]	@ (8004284 <_sbrk+0x64>)
 8004244:	681a      	ldr	r2, [r3, #0]
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	4413      	add	r3, r2
 800424a:	693a      	ldr	r2, [r7, #16]
 800424c:	429a      	cmp	r2, r3
 800424e:	d207      	bcs.n	8004260 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8004250:	f007 fb22 	bl	800b898 <__errno>
 8004254:	4603      	mov	r3, r0
 8004256:	220c      	movs	r2, #12
 8004258:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800425a:	f04f 33ff 	mov.w	r3, #4294967295
 800425e:	e009      	b.n	8004274 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8004260:	4b08      	ldr	r3, [pc, #32]	@ (8004284 <_sbrk+0x64>)
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8004266:	4b07      	ldr	r3, [pc, #28]	@ (8004284 <_sbrk+0x64>)
 8004268:	681a      	ldr	r2, [r3, #0]
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	4413      	add	r3, r2
 800426e:	4a05      	ldr	r2, [pc, #20]	@ (8004284 <_sbrk+0x64>)
 8004270:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8004272:	68fb      	ldr	r3, [r7, #12]
}
 8004274:	4618      	mov	r0, r3
 8004276:	3718      	adds	r7, #24
 8004278:	46bd      	mov	sp, r7
 800427a:	bd80      	pop	{r7, pc}
 800427c:	24080000 	.word	0x24080000
 8004280:	00000400 	.word	0x00000400
 8004284:	240004e0 	.word	0x240004e0
 8004288:	24000638 	.word	0x24000638

0800428c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800428c:	b480      	push	{r7}
 800428e:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8004290:	4b43      	ldr	r3, [pc, #268]	@ (80043a0 <SystemInit+0x114>)
 8004292:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004296:	4a42      	ldr	r2, [pc, #264]	@ (80043a0 <SystemInit+0x114>)
 8004298:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800429c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80042a0:	4b40      	ldr	r3, [pc, #256]	@ (80043a4 <SystemInit+0x118>)
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	f003 030f 	and.w	r3, r3, #15
 80042a8:	2b06      	cmp	r3, #6
 80042aa:	d807      	bhi.n	80042bc <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80042ac:	4b3d      	ldr	r3, [pc, #244]	@ (80043a4 <SystemInit+0x118>)
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	f023 030f 	bic.w	r3, r3, #15
 80042b4:	4a3b      	ldr	r2, [pc, #236]	@ (80043a4 <SystemInit+0x118>)
 80042b6:	f043 0307 	orr.w	r3, r3, #7
 80042ba:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80042bc:	4b3a      	ldr	r3, [pc, #232]	@ (80043a8 <SystemInit+0x11c>)
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	4a39      	ldr	r2, [pc, #228]	@ (80043a8 <SystemInit+0x11c>)
 80042c2:	f043 0301 	orr.w	r3, r3, #1
 80042c6:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80042c8:	4b37      	ldr	r3, [pc, #220]	@ (80043a8 <SystemInit+0x11c>)
 80042ca:	2200      	movs	r2, #0
 80042cc:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80042ce:	4b36      	ldr	r3, [pc, #216]	@ (80043a8 <SystemInit+0x11c>)
 80042d0:	681a      	ldr	r2, [r3, #0]
 80042d2:	4935      	ldr	r1, [pc, #212]	@ (80043a8 <SystemInit+0x11c>)
 80042d4:	4b35      	ldr	r3, [pc, #212]	@ (80043ac <SystemInit+0x120>)
 80042d6:	4013      	ands	r3, r2
 80042d8:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80042da:	4b32      	ldr	r3, [pc, #200]	@ (80043a4 <SystemInit+0x118>)
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	f003 0308 	and.w	r3, r3, #8
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d007      	beq.n	80042f6 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80042e6:	4b2f      	ldr	r3, [pc, #188]	@ (80043a4 <SystemInit+0x118>)
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	f023 030f 	bic.w	r3, r3, #15
 80042ee:	4a2d      	ldr	r2, [pc, #180]	@ (80043a4 <SystemInit+0x118>)
 80042f0:	f043 0307 	orr.w	r3, r3, #7
 80042f4:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 80042f6:	4b2c      	ldr	r3, [pc, #176]	@ (80043a8 <SystemInit+0x11c>)
 80042f8:	2200      	movs	r2, #0
 80042fa:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 80042fc:	4b2a      	ldr	r3, [pc, #168]	@ (80043a8 <SystemInit+0x11c>)
 80042fe:	2200      	movs	r2, #0
 8004300:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8004302:	4b29      	ldr	r3, [pc, #164]	@ (80043a8 <SystemInit+0x11c>)
 8004304:	2200      	movs	r2, #0
 8004306:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8004308:	4b27      	ldr	r3, [pc, #156]	@ (80043a8 <SystemInit+0x11c>)
 800430a:	4a29      	ldr	r2, [pc, #164]	@ (80043b0 <SystemInit+0x124>)
 800430c:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800430e:	4b26      	ldr	r3, [pc, #152]	@ (80043a8 <SystemInit+0x11c>)
 8004310:	4a28      	ldr	r2, [pc, #160]	@ (80043b4 <SystemInit+0x128>)
 8004312:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8004314:	4b24      	ldr	r3, [pc, #144]	@ (80043a8 <SystemInit+0x11c>)
 8004316:	4a28      	ldr	r2, [pc, #160]	@ (80043b8 <SystemInit+0x12c>)
 8004318:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800431a:	4b23      	ldr	r3, [pc, #140]	@ (80043a8 <SystemInit+0x11c>)
 800431c:	2200      	movs	r2, #0
 800431e:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8004320:	4b21      	ldr	r3, [pc, #132]	@ (80043a8 <SystemInit+0x11c>)
 8004322:	4a25      	ldr	r2, [pc, #148]	@ (80043b8 <SystemInit+0x12c>)
 8004324:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8004326:	4b20      	ldr	r3, [pc, #128]	@ (80043a8 <SystemInit+0x11c>)
 8004328:	2200      	movs	r2, #0
 800432a:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 800432c:	4b1e      	ldr	r3, [pc, #120]	@ (80043a8 <SystemInit+0x11c>)
 800432e:	4a22      	ldr	r2, [pc, #136]	@ (80043b8 <SystemInit+0x12c>)
 8004330:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8004332:	4b1d      	ldr	r3, [pc, #116]	@ (80043a8 <SystemInit+0x11c>)
 8004334:	2200      	movs	r2, #0
 8004336:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8004338:	4b1b      	ldr	r3, [pc, #108]	@ (80043a8 <SystemInit+0x11c>)
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	4a1a      	ldr	r2, [pc, #104]	@ (80043a8 <SystemInit+0x11c>)
 800433e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004342:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8004344:	4b18      	ldr	r3, [pc, #96]	@ (80043a8 <SystemInit+0x11c>)
 8004346:	2200      	movs	r2, #0
 8004348:	661a      	str	r2, [r3, #96]	@ 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 800434a:	4b1c      	ldr	r3, [pc, #112]	@ (80043bc <SystemInit+0x130>)
 800434c:	681a      	ldr	r2, [r3, #0]
 800434e:	4b1c      	ldr	r3, [pc, #112]	@ (80043c0 <SystemInit+0x134>)
 8004350:	4013      	ands	r3, r2
 8004352:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004356:	d202      	bcs.n	800435e <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8004358:	4b1a      	ldr	r3, [pc, #104]	@ (80043c4 <SystemInit+0x138>)
 800435a:	2201      	movs	r2, #1
 800435c:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D2 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#else
  if(READ_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN) == 0U)
 800435e:	4b12      	ldr	r3, [pc, #72]	@ (80043a8 <SystemInit+0x11c>)
 8004360:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8004364:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004368:	2b00      	cmp	r3, #0
 800436a:	d113      	bne.n	8004394 <SystemInit+0x108>
  {
    /* Enable the FMC interface clock */
    SET_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 800436c:	4b0e      	ldr	r3, [pc, #56]	@ (80043a8 <SystemInit+0x11c>)
 800436e:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8004372:	4a0d      	ldr	r2, [pc, #52]	@ (80043a8 <SystemInit+0x11c>)
 8004374:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8004378:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
    /*
     * Disable the FMC bank1 (enabled after reset).
     * This, prevents CPU speculation access on this bank which blocks the use of FMC during
     * 24us. During this time the others FMC master (such as LTDC) cannot use it!
     */
    FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800437c:	4b12      	ldr	r3, [pc, #72]	@ (80043c8 <SystemInit+0x13c>)
 800437e:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8004382:	601a      	str	r2, [r3, #0]

    /* Disable the FMC interface clock */
    CLEAR_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 8004384:	4b08      	ldr	r3, [pc, #32]	@ (80043a8 <SystemInit+0x11c>)
 8004386:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 800438a:	4a07      	ldr	r2, [pc, #28]	@ (80043a8 <SystemInit+0x11c>)
 800438c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004390:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8004394:	bf00      	nop
 8004396:	46bd      	mov	sp, r7
 8004398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800439c:	4770      	bx	lr
 800439e:	bf00      	nop
 80043a0:	e000ed00 	.word	0xe000ed00
 80043a4:	52002000 	.word	0x52002000
 80043a8:	58024400 	.word	0x58024400
 80043ac:	eaf6ed7f 	.word	0xeaf6ed7f
 80043b0:	02020200 	.word	0x02020200
 80043b4:	01ff0000 	.word	0x01ff0000
 80043b8:	01010280 	.word	0x01010280
 80043bc:	5c001000 	.word	0x5c001000
 80043c0:	ffff0000 	.word	0xffff0000
 80043c4:	51008108 	.word	0x51008108
 80043c8:	52004000 	.word	0x52004000

080043cc <ExitRun0Mode>:
  *
  * @param  None
  * @retval None
  */
void ExitRun0Mode(void)
{
 80043cc:	b480      	push	{r7}
 80043ce:	af00      	add	r7, sp, #0
  #if defined(SMPS)
    /* Exit Run* mode by disabling SMPS and enabling LDO */
    PWR->CR3 = (PWR->CR3 & ~PWR_CR3_SMPSEN) | PWR_CR3_LDOEN;
  #else
    /* Enable LDO mode */
    PWR->CR3 |= PWR_CR3_LDOEN;
 80043d0:	4b09      	ldr	r3, [pc, #36]	@ (80043f8 <ExitRun0Mode+0x2c>)
 80043d2:	68db      	ldr	r3, [r3, #12]
 80043d4:	4a08      	ldr	r2, [pc, #32]	@ (80043f8 <ExitRun0Mode+0x2c>)
 80043d6:	f043 0302 	orr.w	r3, r3, #2
 80043da:	60d3      	str	r3, [r2, #12]
  #endif /* SMPS */
  /* Wait till voltage level flag is set */
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
 80043dc:	bf00      	nop
 80043de:	4b06      	ldr	r3, [pc, #24]	@ (80043f8 <ExitRun0Mode+0x2c>)
 80043e0:	685b      	ldr	r3, [r3, #4]
 80043e2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	d0f9      	beq.n	80043de <ExitRun0Mode+0x12>
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
  {}
#else
  /* No system power supply configuration is selected at exit Run* mode */
#endif /* USE_PWR_LDO_SUPPLY */
}
 80043ea:	bf00      	nop
 80043ec:	bf00      	nop
 80043ee:	46bd      	mov	sp, r7
 80043f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043f4:	4770      	bx	lr
 80043f6:	bf00      	nop
 80043f8:	58024800 	.word	0x58024800

080043fc <Reset_Handler>:
*/

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
	Reset_Handler:  ldr   sp, =_estack      /* set stack pointer */
 80043fc:	f8df d038 	ldr.w	sp, [pc, #56]	@ 8004438 <LoopFillZerobss+0xe>

/* Call the ExitRun0Mode function to configure the power supply */
  bl  ExitRun0Mode
 8004400:	f7ff ffe4 	bl	80043cc <ExitRun0Mode>
/* Call the clock system initialization function.*/
  bl  SystemInit
 8004404:	f7ff ff42 	bl	800428c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8004408:	480c      	ldr	r0, [pc, #48]	@ (800443c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800440a:	490d      	ldr	r1, [pc, #52]	@ (8004440 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800440c:	4a0d      	ldr	r2, [pc, #52]	@ (8004444 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800440e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004410:	e002      	b.n	8004418 <LoopCopyDataInit>

08004412 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8004412:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004414:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004416:	3304      	adds	r3, #4

08004418 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004418:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800441a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800441c:	d3f9      	bcc.n	8004412 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800441e:	4a0a      	ldr	r2, [pc, #40]	@ (8004448 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8004420:	4c0a      	ldr	r4, [pc, #40]	@ (800444c <LoopFillZerobss+0x22>)
  movs r3, #0
 8004422:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004424:	e001      	b.n	800442a <LoopFillZerobss>

08004426 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8004426:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004428:	3204      	adds	r2, #4

0800442a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800442a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800442c:	d3fb      	bcc.n	8004426 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800442e:	f007 fa39 	bl	800b8a4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8004432:	f7ff f8fd 	bl	8003630 <main>
  bx  lr
 8004436:	4770      	bx	lr
	Reset_Handler:  ldr   sp, =_estack      /* set stack pointer */
 8004438:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 800443c:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8004440:	240001d8 	.word	0x240001d8
  ldr r2, =_sidata
 8004444:	0800e720 	.word	0x0800e720
  ldr r2, =_sbss
 8004448:	240001d8 	.word	0x240001d8
  ldr r4, =_ebss
 800444c:	24000634 	.word	0x24000634

08004450 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8004450:	e7fe      	b.n	8004450 <ADC3_IRQHandler>
	...

08004454 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004454:	b580      	push	{r7, lr}
 8004456:	b082      	sub	sp, #8
 8004458:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800445a:	2003      	movs	r0, #3
 800445c:	f000 f96e 	bl	800473c <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8004460:	f002 f874 	bl	800654c <HAL_RCC_GetSysClockFreq>
 8004464:	4602      	mov	r2, r0
 8004466:	4b15      	ldr	r3, [pc, #84]	@ (80044bc <HAL_Init+0x68>)
 8004468:	699b      	ldr	r3, [r3, #24]
 800446a:	0a1b      	lsrs	r3, r3, #8
 800446c:	f003 030f 	and.w	r3, r3, #15
 8004470:	4913      	ldr	r1, [pc, #76]	@ (80044c0 <HAL_Init+0x6c>)
 8004472:	5ccb      	ldrb	r3, [r1, r3]
 8004474:	f003 031f 	and.w	r3, r3, #31
 8004478:	fa22 f303 	lsr.w	r3, r2, r3
 800447c:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800447e:	4b0f      	ldr	r3, [pc, #60]	@ (80044bc <HAL_Init+0x68>)
 8004480:	699b      	ldr	r3, [r3, #24]
 8004482:	f003 030f 	and.w	r3, r3, #15
 8004486:	4a0e      	ldr	r2, [pc, #56]	@ (80044c0 <HAL_Init+0x6c>)
 8004488:	5cd3      	ldrb	r3, [r2, r3]
 800448a:	f003 031f 	and.w	r3, r3, #31
 800448e:	687a      	ldr	r2, [r7, #4]
 8004490:	fa22 f303 	lsr.w	r3, r2, r3
 8004494:	4a0b      	ldr	r2, [pc, #44]	@ (80044c4 <HAL_Init+0x70>)
 8004496:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8004498:	4a0b      	ldr	r2, [pc, #44]	@ (80044c8 <HAL_Init+0x74>)
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800449e:	200f      	movs	r0, #15
 80044a0:	f000 f814 	bl	80044cc <HAL_InitTick>
 80044a4:	4603      	mov	r3, r0
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d001      	beq.n	80044ae <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80044aa:	2301      	movs	r3, #1
 80044ac:	e002      	b.n	80044b4 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80044ae:	f7ff fc85 	bl	8003dbc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80044b2:	2300      	movs	r3, #0
}
 80044b4:	4618      	mov	r0, r3
 80044b6:	3708      	adds	r7, #8
 80044b8:	46bd      	mov	sp, r7
 80044ba:	bd80      	pop	{r7, pc}
 80044bc:	58024400 	.word	0x58024400
 80044c0:	0800e040 	.word	0x0800e040
 80044c4:	24000004 	.word	0x24000004
 80044c8:	24000000 	.word	0x24000000

080044cc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80044cc:	b580      	push	{r7, lr}
 80044ce:	b082      	sub	sp, #8
 80044d0:	af00      	add	r7, sp, #0
 80044d2:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 80044d4:	4b15      	ldr	r3, [pc, #84]	@ (800452c <HAL_InitTick+0x60>)
 80044d6:	781b      	ldrb	r3, [r3, #0]
 80044d8:	2b00      	cmp	r3, #0
 80044da:	d101      	bne.n	80044e0 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 80044dc:	2301      	movs	r3, #1
 80044de:	e021      	b.n	8004524 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 80044e0:	4b13      	ldr	r3, [pc, #76]	@ (8004530 <HAL_InitTick+0x64>)
 80044e2:	681a      	ldr	r2, [r3, #0]
 80044e4:	4b11      	ldr	r3, [pc, #68]	@ (800452c <HAL_InitTick+0x60>)
 80044e6:	781b      	ldrb	r3, [r3, #0]
 80044e8:	4619      	mov	r1, r3
 80044ea:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80044ee:	fbb3 f3f1 	udiv	r3, r3, r1
 80044f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80044f6:	4618      	mov	r0, r3
 80044f8:	f000 f945 	bl	8004786 <HAL_SYSTICK_Config>
 80044fc:	4603      	mov	r3, r0
 80044fe:	2b00      	cmp	r3, #0
 8004500:	d001      	beq.n	8004506 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8004502:	2301      	movs	r3, #1
 8004504:	e00e      	b.n	8004524 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	2b0f      	cmp	r3, #15
 800450a:	d80a      	bhi.n	8004522 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800450c:	2200      	movs	r2, #0
 800450e:	6879      	ldr	r1, [r7, #4]
 8004510:	f04f 30ff 	mov.w	r0, #4294967295
 8004514:	f000 f91d 	bl	8004752 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8004518:	4a06      	ldr	r2, [pc, #24]	@ (8004534 <HAL_InitTick+0x68>)
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800451e:	2300      	movs	r3, #0
 8004520:	e000      	b.n	8004524 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8004522:	2301      	movs	r3, #1
}
 8004524:	4618      	mov	r0, r3
 8004526:	3708      	adds	r7, #8
 8004528:	46bd      	mov	sp, r7
 800452a:	bd80      	pop	{r7, pc}
 800452c:	2400000c 	.word	0x2400000c
 8004530:	24000000 	.word	0x24000000
 8004534:	24000008 	.word	0x24000008

08004538 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004538:	b480      	push	{r7}
 800453a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800453c:	4b06      	ldr	r3, [pc, #24]	@ (8004558 <HAL_IncTick+0x20>)
 800453e:	781b      	ldrb	r3, [r3, #0]
 8004540:	461a      	mov	r2, r3
 8004542:	4b06      	ldr	r3, [pc, #24]	@ (800455c <HAL_IncTick+0x24>)
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	4413      	add	r3, r2
 8004548:	4a04      	ldr	r2, [pc, #16]	@ (800455c <HAL_IncTick+0x24>)
 800454a:	6013      	str	r3, [r2, #0]
}
 800454c:	bf00      	nop
 800454e:	46bd      	mov	sp, r7
 8004550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004554:	4770      	bx	lr
 8004556:	bf00      	nop
 8004558:	2400000c 	.word	0x2400000c
 800455c:	240004e4 	.word	0x240004e4

08004560 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004560:	b480      	push	{r7}
 8004562:	af00      	add	r7, sp, #0
  return uwTick;
 8004564:	4b03      	ldr	r3, [pc, #12]	@ (8004574 <HAL_GetTick+0x14>)
 8004566:	681b      	ldr	r3, [r3, #0]
}
 8004568:	4618      	mov	r0, r3
 800456a:	46bd      	mov	sp, r7
 800456c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004570:	4770      	bx	lr
 8004572:	bf00      	nop
 8004574:	240004e4 	.word	0x240004e4

08004578 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004578:	b580      	push	{r7, lr}
 800457a:	b084      	sub	sp, #16
 800457c:	af00      	add	r7, sp, #0
 800457e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004580:	f7ff ffee 	bl	8004560 <HAL_GetTick>
 8004584:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004590:	d005      	beq.n	800459e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8004592:	4b0a      	ldr	r3, [pc, #40]	@ (80045bc <HAL_Delay+0x44>)
 8004594:	781b      	ldrb	r3, [r3, #0]
 8004596:	461a      	mov	r2, r3
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	4413      	add	r3, r2
 800459c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800459e:	bf00      	nop
 80045a0:	f7ff ffde 	bl	8004560 <HAL_GetTick>
 80045a4:	4602      	mov	r2, r0
 80045a6:	68bb      	ldr	r3, [r7, #8]
 80045a8:	1ad3      	subs	r3, r2, r3
 80045aa:	68fa      	ldr	r2, [r7, #12]
 80045ac:	429a      	cmp	r2, r3
 80045ae:	d8f7      	bhi.n	80045a0 <HAL_Delay+0x28>
  {
  }
}
 80045b0:	bf00      	nop
 80045b2:	bf00      	nop
 80045b4:	3710      	adds	r7, #16
 80045b6:	46bd      	mov	sp, r7
 80045b8:	bd80      	pop	{r7, pc}
 80045ba:	bf00      	nop
 80045bc:	2400000c 	.word	0x2400000c

080045c0 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 80045c0:	b480      	push	{r7}
 80045c2:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 80045c4:	4b03      	ldr	r3, [pc, #12]	@ (80045d4 <HAL_GetREVID+0x14>)
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	0c1b      	lsrs	r3, r3, #16
}
 80045ca:	4618      	mov	r0, r3
 80045cc:	46bd      	mov	sp, r7
 80045ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045d2:	4770      	bx	lr
 80045d4:	5c001000 	.word	0x5c001000

080045d8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80045d8:	b480      	push	{r7}
 80045da:	b085      	sub	sp, #20
 80045dc:	af00      	add	r7, sp, #0
 80045de:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	f003 0307 	and.w	r3, r3, #7
 80045e6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80045e8:	4b0b      	ldr	r3, [pc, #44]	@ (8004618 <__NVIC_SetPriorityGrouping+0x40>)
 80045ea:	68db      	ldr	r3, [r3, #12]
 80045ec:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80045ee:	68ba      	ldr	r2, [r7, #8]
 80045f0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80045f4:	4013      	ands	r3, r2
 80045f6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80045fc:	68bb      	ldr	r3, [r7, #8]
 80045fe:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8004600:	4b06      	ldr	r3, [pc, #24]	@ (800461c <__NVIC_SetPriorityGrouping+0x44>)
 8004602:	4313      	orrs	r3, r2
 8004604:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004606:	4a04      	ldr	r2, [pc, #16]	@ (8004618 <__NVIC_SetPriorityGrouping+0x40>)
 8004608:	68bb      	ldr	r3, [r7, #8]
 800460a:	60d3      	str	r3, [r2, #12]
}
 800460c:	bf00      	nop
 800460e:	3714      	adds	r7, #20
 8004610:	46bd      	mov	sp, r7
 8004612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004616:	4770      	bx	lr
 8004618:	e000ed00 	.word	0xe000ed00
 800461c:	05fa0000 	.word	0x05fa0000

08004620 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004620:	b480      	push	{r7}
 8004622:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004624:	4b04      	ldr	r3, [pc, #16]	@ (8004638 <__NVIC_GetPriorityGrouping+0x18>)
 8004626:	68db      	ldr	r3, [r3, #12]
 8004628:	0a1b      	lsrs	r3, r3, #8
 800462a:	f003 0307 	and.w	r3, r3, #7
}
 800462e:	4618      	mov	r0, r3
 8004630:	46bd      	mov	sp, r7
 8004632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004636:	4770      	bx	lr
 8004638:	e000ed00 	.word	0xe000ed00

0800463c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800463c:	b480      	push	{r7}
 800463e:	b083      	sub	sp, #12
 8004640:	af00      	add	r7, sp, #0
 8004642:	4603      	mov	r3, r0
 8004644:	6039      	str	r1, [r7, #0]
 8004646:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8004648:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800464c:	2b00      	cmp	r3, #0
 800464e:	db0a      	blt.n	8004666 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004650:	683b      	ldr	r3, [r7, #0]
 8004652:	b2da      	uxtb	r2, r3
 8004654:	490c      	ldr	r1, [pc, #48]	@ (8004688 <__NVIC_SetPriority+0x4c>)
 8004656:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800465a:	0112      	lsls	r2, r2, #4
 800465c:	b2d2      	uxtb	r2, r2
 800465e:	440b      	add	r3, r1
 8004660:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004664:	e00a      	b.n	800467c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004666:	683b      	ldr	r3, [r7, #0]
 8004668:	b2da      	uxtb	r2, r3
 800466a:	4908      	ldr	r1, [pc, #32]	@ (800468c <__NVIC_SetPriority+0x50>)
 800466c:	88fb      	ldrh	r3, [r7, #6]
 800466e:	f003 030f 	and.w	r3, r3, #15
 8004672:	3b04      	subs	r3, #4
 8004674:	0112      	lsls	r2, r2, #4
 8004676:	b2d2      	uxtb	r2, r2
 8004678:	440b      	add	r3, r1
 800467a:	761a      	strb	r2, [r3, #24]
}
 800467c:	bf00      	nop
 800467e:	370c      	adds	r7, #12
 8004680:	46bd      	mov	sp, r7
 8004682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004686:	4770      	bx	lr
 8004688:	e000e100 	.word	0xe000e100
 800468c:	e000ed00 	.word	0xe000ed00

08004690 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004690:	b480      	push	{r7}
 8004692:	b089      	sub	sp, #36	@ 0x24
 8004694:	af00      	add	r7, sp, #0
 8004696:	60f8      	str	r0, [r7, #12]
 8004698:	60b9      	str	r1, [r7, #8]
 800469a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	f003 0307 	and.w	r3, r3, #7
 80046a2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80046a4:	69fb      	ldr	r3, [r7, #28]
 80046a6:	f1c3 0307 	rsb	r3, r3, #7
 80046aa:	2b04      	cmp	r3, #4
 80046ac:	bf28      	it	cs
 80046ae:	2304      	movcs	r3, #4
 80046b0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80046b2:	69fb      	ldr	r3, [r7, #28]
 80046b4:	3304      	adds	r3, #4
 80046b6:	2b06      	cmp	r3, #6
 80046b8:	d902      	bls.n	80046c0 <NVIC_EncodePriority+0x30>
 80046ba:	69fb      	ldr	r3, [r7, #28]
 80046bc:	3b03      	subs	r3, #3
 80046be:	e000      	b.n	80046c2 <NVIC_EncodePriority+0x32>
 80046c0:	2300      	movs	r3, #0
 80046c2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80046c4:	f04f 32ff 	mov.w	r2, #4294967295
 80046c8:	69bb      	ldr	r3, [r7, #24]
 80046ca:	fa02 f303 	lsl.w	r3, r2, r3
 80046ce:	43da      	mvns	r2, r3
 80046d0:	68bb      	ldr	r3, [r7, #8]
 80046d2:	401a      	ands	r2, r3
 80046d4:	697b      	ldr	r3, [r7, #20]
 80046d6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80046d8:	f04f 31ff 	mov.w	r1, #4294967295
 80046dc:	697b      	ldr	r3, [r7, #20]
 80046de:	fa01 f303 	lsl.w	r3, r1, r3
 80046e2:	43d9      	mvns	r1, r3
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80046e8:	4313      	orrs	r3, r2
         );
}
 80046ea:	4618      	mov	r0, r3
 80046ec:	3724      	adds	r7, #36	@ 0x24
 80046ee:	46bd      	mov	sp, r7
 80046f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046f4:	4770      	bx	lr
	...

080046f8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80046f8:	b580      	push	{r7, lr}
 80046fa:	b082      	sub	sp, #8
 80046fc:	af00      	add	r7, sp, #0
 80046fe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	3b01      	subs	r3, #1
 8004704:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004708:	d301      	bcc.n	800470e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800470a:	2301      	movs	r3, #1
 800470c:	e00f      	b.n	800472e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800470e:	4a0a      	ldr	r2, [pc, #40]	@ (8004738 <SysTick_Config+0x40>)
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	3b01      	subs	r3, #1
 8004714:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004716:	210f      	movs	r1, #15
 8004718:	f04f 30ff 	mov.w	r0, #4294967295
 800471c:	f7ff ff8e 	bl	800463c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004720:	4b05      	ldr	r3, [pc, #20]	@ (8004738 <SysTick_Config+0x40>)
 8004722:	2200      	movs	r2, #0
 8004724:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004726:	4b04      	ldr	r3, [pc, #16]	@ (8004738 <SysTick_Config+0x40>)
 8004728:	2207      	movs	r2, #7
 800472a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800472c:	2300      	movs	r3, #0
}
 800472e:	4618      	mov	r0, r3
 8004730:	3708      	adds	r7, #8
 8004732:	46bd      	mov	sp, r7
 8004734:	bd80      	pop	{r7, pc}
 8004736:	bf00      	nop
 8004738:	e000e010 	.word	0xe000e010

0800473c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800473c:	b580      	push	{r7, lr}
 800473e:	b082      	sub	sp, #8
 8004740:	af00      	add	r7, sp, #0
 8004742:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004744:	6878      	ldr	r0, [r7, #4]
 8004746:	f7ff ff47 	bl	80045d8 <__NVIC_SetPriorityGrouping>
}
 800474a:	bf00      	nop
 800474c:	3708      	adds	r7, #8
 800474e:	46bd      	mov	sp, r7
 8004750:	bd80      	pop	{r7, pc}

08004752 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004752:	b580      	push	{r7, lr}
 8004754:	b086      	sub	sp, #24
 8004756:	af00      	add	r7, sp, #0
 8004758:	4603      	mov	r3, r0
 800475a:	60b9      	str	r1, [r7, #8]
 800475c:	607a      	str	r2, [r7, #4]
 800475e:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8004760:	f7ff ff5e 	bl	8004620 <__NVIC_GetPriorityGrouping>
 8004764:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004766:	687a      	ldr	r2, [r7, #4]
 8004768:	68b9      	ldr	r1, [r7, #8]
 800476a:	6978      	ldr	r0, [r7, #20]
 800476c:	f7ff ff90 	bl	8004690 <NVIC_EncodePriority>
 8004770:	4602      	mov	r2, r0
 8004772:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8004776:	4611      	mov	r1, r2
 8004778:	4618      	mov	r0, r3
 800477a:	f7ff ff5f 	bl	800463c <__NVIC_SetPriority>
}
 800477e:	bf00      	nop
 8004780:	3718      	adds	r7, #24
 8004782:	46bd      	mov	sp, r7
 8004784:	bd80      	pop	{r7, pc}

08004786 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004786:	b580      	push	{r7, lr}
 8004788:	b082      	sub	sp, #8
 800478a:	af00      	add	r7, sp, #0
 800478c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800478e:	6878      	ldr	r0, [r7, #4]
 8004790:	f7ff ffb2 	bl	80046f8 <SysTick_Config>
 8004794:	4603      	mov	r3, r0
}
 8004796:	4618      	mov	r0, r3
 8004798:	3708      	adds	r7, #8
 800479a:	46bd      	mov	sp, r7
 800479c:	bd80      	pop	{r7, pc}
	...

080047a0 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 80047a0:	b480      	push	{r7}
 80047a2:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 80047a4:	f3bf 8f5f 	dmb	sy
}
 80047a8:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 80047aa:	4b07      	ldr	r3, [pc, #28]	@ (80047c8 <HAL_MPU_Disable+0x28>)
 80047ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80047ae:	4a06      	ldr	r2, [pc, #24]	@ (80047c8 <HAL_MPU_Disable+0x28>)
 80047b0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80047b4:	6253      	str	r3, [r2, #36]	@ 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 80047b6:	4b05      	ldr	r3, [pc, #20]	@ (80047cc <HAL_MPU_Disable+0x2c>)
 80047b8:	2200      	movs	r2, #0
 80047ba:	605a      	str	r2, [r3, #4]
}
 80047bc:	bf00      	nop
 80047be:	46bd      	mov	sp, r7
 80047c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047c4:	4770      	bx	lr
 80047c6:	bf00      	nop
 80047c8:	e000ed00 	.word	0xe000ed00
 80047cc:	e000ed90 	.word	0xe000ed90

080047d0 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 80047d0:	b480      	push	{r7}
 80047d2:	b083      	sub	sp, #12
 80047d4:	af00      	add	r7, sp, #0
 80047d6:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 80047d8:	4a0b      	ldr	r2, [pc, #44]	@ (8004808 <HAL_MPU_Enable+0x38>)
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	f043 0301 	orr.w	r3, r3, #1
 80047e0:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 80047e2:	4b0a      	ldr	r3, [pc, #40]	@ (800480c <HAL_MPU_Enable+0x3c>)
 80047e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80047e6:	4a09      	ldr	r2, [pc, #36]	@ (800480c <HAL_MPU_Enable+0x3c>)
 80047e8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80047ec:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 80047ee:	f3bf 8f4f 	dsb	sy
}
 80047f2:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80047f4:	f3bf 8f6f 	isb	sy
}
 80047f8:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 80047fa:	bf00      	nop
 80047fc:	370c      	adds	r7, #12
 80047fe:	46bd      	mov	sp, r7
 8004800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004804:	4770      	bx	lr
 8004806:	bf00      	nop
 8004808:	e000ed90 	.word	0xe000ed90
 800480c:	e000ed00 	.word	0xe000ed00

08004810 <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(const MPU_Region_InitTypeDef *MPU_Init)
{
 8004810:	b480      	push	{r7}
 8004812:	b083      	sub	sp, #12
 8004814:	af00      	add	r7, sp, #0
 8004816:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	785a      	ldrb	r2, [r3, #1]
 800481c:	4b1b      	ldr	r3, [pc, #108]	@ (800488c <HAL_MPU_ConfigRegion+0x7c>)
 800481e:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 8004820:	4b1a      	ldr	r3, [pc, #104]	@ (800488c <HAL_MPU_ConfigRegion+0x7c>)
 8004822:	691b      	ldr	r3, [r3, #16]
 8004824:	4a19      	ldr	r2, [pc, #100]	@ (800488c <HAL_MPU_ConfigRegion+0x7c>)
 8004826:	f023 0301 	bic.w	r3, r3, #1
 800482a:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 800482c:	4a17      	ldr	r2, [pc, #92]	@ (800488c <HAL_MPU_ConfigRegion+0x7c>)
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	685b      	ldr	r3, [r3, #4]
 8004832:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	7b1b      	ldrb	r3, [r3, #12]
 8004838:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	7adb      	ldrb	r3, [r3, #11]
 800483e:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8004840:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	7a9b      	ldrb	r3, [r3, #10]
 8004846:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8004848:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	7b5b      	ldrb	r3, [r3, #13]
 800484e:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8004850:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	7b9b      	ldrb	r3, [r3, #14]
 8004856:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8004858:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	7bdb      	ldrb	r3, [r3, #15]
 800485e:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8004860:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	7a5b      	ldrb	r3, [r3, #9]
 8004866:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8004868:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	7a1b      	ldrb	r3, [r3, #8]
 800486e:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8004870:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 8004872:	687a      	ldr	r2, [r7, #4]
 8004874:	7812      	ldrb	r2, [r2, #0]
 8004876:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8004878:	4a04      	ldr	r2, [pc, #16]	@ (800488c <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 800487a:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 800487c:	6113      	str	r3, [r2, #16]
}
 800487e:	bf00      	nop
 8004880:	370c      	adds	r7, #12
 8004882:	46bd      	mov	sp, r7
 8004884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004888:	4770      	bx	lr
 800488a:	bf00      	nop
 800488c:	e000ed90 	.word	0xe000ed90

08004890 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *GPIO_Init)
{
 8004890:	b480      	push	{r7}
 8004892:	b089      	sub	sp, #36	@ 0x24
 8004894:	af00      	add	r7, sp, #0
 8004896:	6078      	str	r0, [r7, #4]
 8004898:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800489a:	2300      	movs	r3, #0
 800489c:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800489e:	4b89      	ldr	r3, [pc, #548]	@ (8004ac4 <HAL_GPIO_Init+0x234>)
 80048a0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80048a2:	e194      	b.n	8004bce <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80048a4:	683b      	ldr	r3, [r7, #0]
 80048a6:	681a      	ldr	r2, [r3, #0]
 80048a8:	2101      	movs	r1, #1
 80048aa:	69fb      	ldr	r3, [r7, #28]
 80048ac:	fa01 f303 	lsl.w	r3, r1, r3
 80048b0:	4013      	ands	r3, r2
 80048b2:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 80048b4:	693b      	ldr	r3, [r7, #16]
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	f000 8186 	beq.w	8004bc8 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80048bc:	683b      	ldr	r3, [r7, #0]
 80048be:	685b      	ldr	r3, [r3, #4]
 80048c0:	f003 0303 	and.w	r3, r3, #3
 80048c4:	2b01      	cmp	r3, #1
 80048c6:	d005      	beq.n	80048d4 <HAL_GPIO_Init+0x44>
 80048c8:	683b      	ldr	r3, [r7, #0]
 80048ca:	685b      	ldr	r3, [r3, #4]
 80048cc:	f003 0303 	and.w	r3, r3, #3
 80048d0:	2b02      	cmp	r3, #2
 80048d2:	d130      	bne.n	8004936 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	689b      	ldr	r3, [r3, #8]
 80048d8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80048da:	69fb      	ldr	r3, [r7, #28]
 80048dc:	005b      	lsls	r3, r3, #1
 80048de:	2203      	movs	r2, #3
 80048e0:	fa02 f303 	lsl.w	r3, r2, r3
 80048e4:	43db      	mvns	r3, r3
 80048e6:	69ba      	ldr	r2, [r7, #24]
 80048e8:	4013      	ands	r3, r2
 80048ea:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80048ec:	683b      	ldr	r3, [r7, #0]
 80048ee:	68da      	ldr	r2, [r3, #12]
 80048f0:	69fb      	ldr	r3, [r7, #28]
 80048f2:	005b      	lsls	r3, r3, #1
 80048f4:	fa02 f303 	lsl.w	r3, r2, r3
 80048f8:	69ba      	ldr	r2, [r7, #24]
 80048fa:	4313      	orrs	r3, r2
 80048fc:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	69ba      	ldr	r2, [r7, #24]
 8004902:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	685b      	ldr	r3, [r3, #4]
 8004908:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800490a:	2201      	movs	r2, #1
 800490c:	69fb      	ldr	r3, [r7, #28]
 800490e:	fa02 f303 	lsl.w	r3, r2, r3
 8004912:	43db      	mvns	r3, r3
 8004914:	69ba      	ldr	r2, [r7, #24]
 8004916:	4013      	ands	r3, r2
 8004918:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800491a:	683b      	ldr	r3, [r7, #0]
 800491c:	685b      	ldr	r3, [r3, #4]
 800491e:	091b      	lsrs	r3, r3, #4
 8004920:	f003 0201 	and.w	r2, r3, #1
 8004924:	69fb      	ldr	r3, [r7, #28]
 8004926:	fa02 f303 	lsl.w	r3, r2, r3
 800492a:	69ba      	ldr	r2, [r7, #24]
 800492c:	4313      	orrs	r3, r2
 800492e:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	69ba      	ldr	r2, [r7, #24]
 8004934:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004936:	683b      	ldr	r3, [r7, #0]
 8004938:	685b      	ldr	r3, [r3, #4]
 800493a:	f003 0303 	and.w	r3, r3, #3
 800493e:	2b03      	cmp	r3, #3
 8004940:	d017      	beq.n	8004972 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	68db      	ldr	r3, [r3, #12]
 8004946:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004948:	69fb      	ldr	r3, [r7, #28]
 800494a:	005b      	lsls	r3, r3, #1
 800494c:	2203      	movs	r2, #3
 800494e:	fa02 f303 	lsl.w	r3, r2, r3
 8004952:	43db      	mvns	r3, r3
 8004954:	69ba      	ldr	r2, [r7, #24]
 8004956:	4013      	ands	r3, r2
 8004958:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800495a:	683b      	ldr	r3, [r7, #0]
 800495c:	689a      	ldr	r2, [r3, #8]
 800495e:	69fb      	ldr	r3, [r7, #28]
 8004960:	005b      	lsls	r3, r3, #1
 8004962:	fa02 f303 	lsl.w	r3, r2, r3
 8004966:	69ba      	ldr	r2, [r7, #24]
 8004968:	4313      	orrs	r3, r2
 800496a:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	69ba      	ldr	r2, [r7, #24]
 8004970:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004972:	683b      	ldr	r3, [r7, #0]
 8004974:	685b      	ldr	r3, [r3, #4]
 8004976:	f003 0303 	and.w	r3, r3, #3
 800497a:	2b02      	cmp	r3, #2
 800497c:	d123      	bne.n	80049c6 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800497e:	69fb      	ldr	r3, [r7, #28]
 8004980:	08da      	lsrs	r2, r3, #3
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	3208      	adds	r2, #8
 8004986:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800498a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800498c:	69fb      	ldr	r3, [r7, #28]
 800498e:	f003 0307 	and.w	r3, r3, #7
 8004992:	009b      	lsls	r3, r3, #2
 8004994:	220f      	movs	r2, #15
 8004996:	fa02 f303 	lsl.w	r3, r2, r3
 800499a:	43db      	mvns	r3, r3
 800499c:	69ba      	ldr	r2, [r7, #24]
 800499e:	4013      	ands	r3, r2
 80049a0:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80049a2:	683b      	ldr	r3, [r7, #0]
 80049a4:	691a      	ldr	r2, [r3, #16]
 80049a6:	69fb      	ldr	r3, [r7, #28]
 80049a8:	f003 0307 	and.w	r3, r3, #7
 80049ac:	009b      	lsls	r3, r3, #2
 80049ae:	fa02 f303 	lsl.w	r3, r2, r3
 80049b2:	69ba      	ldr	r2, [r7, #24]
 80049b4:	4313      	orrs	r3, r2
 80049b6:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80049b8:	69fb      	ldr	r3, [r7, #28]
 80049ba:	08da      	lsrs	r2, r3, #3
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	3208      	adds	r2, #8
 80049c0:	69b9      	ldr	r1, [r7, #24]
 80049c2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80049cc:	69fb      	ldr	r3, [r7, #28]
 80049ce:	005b      	lsls	r3, r3, #1
 80049d0:	2203      	movs	r2, #3
 80049d2:	fa02 f303 	lsl.w	r3, r2, r3
 80049d6:	43db      	mvns	r3, r3
 80049d8:	69ba      	ldr	r2, [r7, #24]
 80049da:	4013      	ands	r3, r2
 80049dc:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80049de:	683b      	ldr	r3, [r7, #0]
 80049e0:	685b      	ldr	r3, [r3, #4]
 80049e2:	f003 0203 	and.w	r2, r3, #3
 80049e6:	69fb      	ldr	r3, [r7, #28]
 80049e8:	005b      	lsls	r3, r3, #1
 80049ea:	fa02 f303 	lsl.w	r3, r2, r3
 80049ee:	69ba      	ldr	r2, [r7, #24]
 80049f0:	4313      	orrs	r3, r2
 80049f2:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	69ba      	ldr	r2, [r7, #24]
 80049f8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80049fa:	683b      	ldr	r3, [r7, #0]
 80049fc:	685b      	ldr	r3, [r3, #4]
 80049fe:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	f000 80e0 	beq.w	8004bc8 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004a08:	4b2f      	ldr	r3, [pc, #188]	@ (8004ac8 <HAL_GPIO_Init+0x238>)
 8004a0a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8004a0e:	4a2e      	ldr	r2, [pc, #184]	@ (8004ac8 <HAL_GPIO_Init+0x238>)
 8004a10:	f043 0302 	orr.w	r3, r3, #2
 8004a14:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8004a18:	4b2b      	ldr	r3, [pc, #172]	@ (8004ac8 <HAL_GPIO_Init+0x238>)
 8004a1a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8004a1e:	f003 0302 	and.w	r3, r3, #2
 8004a22:	60fb      	str	r3, [r7, #12]
 8004a24:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004a26:	4a29      	ldr	r2, [pc, #164]	@ (8004acc <HAL_GPIO_Init+0x23c>)
 8004a28:	69fb      	ldr	r3, [r7, #28]
 8004a2a:	089b      	lsrs	r3, r3, #2
 8004a2c:	3302      	adds	r3, #2
 8004a2e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004a32:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8004a34:	69fb      	ldr	r3, [r7, #28]
 8004a36:	f003 0303 	and.w	r3, r3, #3
 8004a3a:	009b      	lsls	r3, r3, #2
 8004a3c:	220f      	movs	r2, #15
 8004a3e:	fa02 f303 	lsl.w	r3, r2, r3
 8004a42:	43db      	mvns	r3, r3
 8004a44:	69ba      	ldr	r2, [r7, #24]
 8004a46:	4013      	ands	r3, r2
 8004a48:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	4a20      	ldr	r2, [pc, #128]	@ (8004ad0 <HAL_GPIO_Init+0x240>)
 8004a4e:	4293      	cmp	r3, r2
 8004a50:	d052      	beq.n	8004af8 <HAL_GPIO_Init+0x268>
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	4a1f      	ldr	r2, [pc, #124]	@ (8004ad4 <HAL_GPIO_Init+0x244>)
 8004a56:	4293      	cmp	r3, r2
 8004a58:	d031      	beq.n	8004abe <HAL_GPIO_Init+0x22e>
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	4a1e      	ldr	r2, [pc, #120]	@ (8004ad8 <HAL_GPIO_Init+0x248>)
 8004a5e:	4293      	cmp	r3, r2
 8004a60:	d02b      	beq.n	8004aba <HAL_GPIO_Init+0x22a>
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	4a1d      	ldr	r2, [pc, #116]	@ (8004adc <HAL_GPIO_Init+0x24c>)
 8004a66:	4293      	cmp	r3, r2
 8004a68:	d025      	beq.n	8004ab6 <HAL_GPIO_Init+0x226>
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	4a1c      	ldr	r2, [pc, #112]	@ (8004ae0 <HAL_GPIO_Init+0x250>)
 8004a6e:	4293      	cmp	r3, r2
 8004a70:	d01f      	beq.n	8004ab2 <HAL_GPIO_Init+0x222>
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	4a1b      	ldr	r2, [pc, #108]	@ (8004ae4 <HAL_GPIO_Init+0x254>)
 8004a76:	4293      	cmp	r3, r2
 8004a78:	d019      	beq.n	8004aae <HAL_GPIO_Init+0x21e>
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	4a1a      	ldr	r2, [pc, #104]	@ (8004ae8 <HAL_GPIO_Init+0x258>)
 8004a7e:	4293      	cmp	r3, r2
 8004a80:	d013      	beq.n	8004aaa <HAL_GPIO_Init+0x21a>
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	4a19      	ldr	r2, [pc, #100]	@ (8004aec <HAL_GPIO_Init+0x25c>)
 8004a86:	4293      	cmp	r3, r2
 8004a88:	d00d      	beq.n	8004aa6 <HAL_GPIO_Init+0x216>
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	4a18      	ldr	r2, [pc, #96]	@ (8004af0 <HAL_GPIO_Init+0x260>)
 8004a8e:	4293      	cmp	r3, r2
 8004a90:	d007      	beq.n	8004aa2 <HAL_GPIO_Init+0x212>
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	4a17      	ldr	r2, [pc, #92]	@ (8004af4 <HAL_GPIO_Init+0x264>)
 8004a96:	4293      	cmp	r3, r2
 8004a98:	d101      	bne.n	8004a9e <HAL_GPIO_Init+0x20e>
 8004a9a:	2309      	movs	r3, #9
 8004a9c:	e02d      	b.n	8004afa <HAL_GPIO_Init+0x26a>
 8004a9e:	230a      	movs	r3, #10
 8004aa0:	e02b      	b.n	8004afa <HAL_GPIO_Init+0x26a>
 8004aa2:	2308      	movs	r3, #8
 8004aa4:	e029      	b.n	8004afa <HAL_GPIO_Init+0x26a>
 8004aa6:	2307      	movs	r3, #7
 8004aa8:	e027      	b.n	8004afa <HAL_GPIO_Init+0x26a>
 8004aaa:	2306      	movs	r3, #6
 8004aac:	e025      	b.n	8004afa <HAL_GPIO_Init+0x26a>
 8004aae:	2305      	movs	r3, #5
 8004ab0:	e023      	b.n	8004afa <HAL_GPIO_Init+0x26a>
 8004ab2:	2304      	movs	r3, #4
 8004ab4:	e021      	b.n	8004afa <HAL_GPIO_Init+0x26a>
 8004ab6:	2303      	movs	r3, #3
 8004ab8:	e01f      	b.n	8004afa <HAL_GPIO_Init+0x26a>
 8004aba:	2302      	movs	r3, #2
 8004abc:	e01d      	b.n	8004afa <HAL_GPIO_Init+0x26a>
 8004abe:	2301      	movs	r3, #1
 8004ac0:	e01b      	b.n	8004afa <HAL_GPIO_Init+0x26a>
 8004ac2:	bf00      	nop
 8004ac4:	58000080 	.word	0x58000080
 8004ac8:	58024400 	.word	0x58024400
 8004acc:	58000400 	.word	0x58000400
 8004ad0:	58020000 	.word	0x58020000
 8004ad4:	58020400 	.word	0x58020400
 8004ad8:	58020800 	.word	0x58020800
 8004adc:	58020c00 	.word	0x58020c00
 8004ae0:	58021000 	.word	0x58021000
 8004ae4:	58021400 	.word	0x58021400
 8004ae8:	58021800 	.word	0x58021800
 8004aec:	58021c00 	.word	0x58021c00
 8004af0:	58022000 	.word	0x58022000
 8004af4:	58022400 	.word	0x58022400
 8004af8:	2300      	movs	r3, #0
 8004afa:	69fa      	ldr	r2, [r7, #28]
 8004afc:	f002 0203 	and.w	r2, r2, #3
 8004b00:	0092      	lsls	r2, r2, #2
 8004b02:	4093      	lsls	r3, r2
 8004b04:	69ba      	ldr	r2, [r7, #24]
 8004b06:	4313      	orrs	r3, r2
 8004b08:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004b0a:	4938      	ldr	r1, [pc, #224]	@ (8004bec <HAL_GPIO_Init+0x35c>)
 8004b0c:	69fb      	ldr	r3, [r7, #28]
 8004b0e:	089b      	lsrs	r3, r3, #2
 8004b10:	3302      	adds	r3, #2
 8004b12:	69ba      	ldr	r2, [r7, #24]
 8004b14:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004b18:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004b20:	693b      	ldr	r3, [r7, #16]
 8004b22:	43db      	mvns	r3, r3
 8004b24:	69ba      	ldr	r2, [r7, #24]
 8004b26:	4013      	ands	r3, r2
 8004b28:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004b2a:	683b      	ldr	r3, [r7, #0]
 8004b2c:	685b      	ldr	r3, [r3, #4]
 8004b2e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	d003      	beq.n	8004b3e <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8004b36:	69ba      	ldr	r2, [r7, #24]
 8004b38:	693b      	ldr	r3, [r7, #16]
 8004b3a:	4313      	orrs	r3, r2
 8004b3c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8004b3e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004b42:	69bb      	ldr	r3, [r7, #24]
 8004b44:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8004b46:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004b4a:	685b      	ldr	r3, [r3, #4]
 8004b4c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004b4e:	693b      	ldr	r3, [r7, #16]
 8004b50:	43db      	mvns	r3, r3
 8004b52:	69ba      	ldr	r2, [r7, #24]
 8004b54:	4013      	ands	r3, r2
 8004b56:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004b58:	683b      	ldr	r3, [r7, #0]
 8004b5a:	685b      	ldr	r3, [r3, #4]
 8004b5c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004b60:	2b00      	cmp	r3, #0
 8004b62:	d003      	beq.n	8004b6c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8004b64:	69ba      	ldr	r2, [r7, #24]
 8004b66:	693b      	ldr	r3, [r7, #16]
 8004b68:	4313      	orrs	r3, r2
 8004b6a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8004b6c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004b70:	69bb      	ldr	r3, [r7, #24]
 8004b72:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8004b74:	697b      	ldr	r3, [r7, #20]
 8004b76:	685b      	ldr	r3, [r3, #4]
 8004b78:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004b7a:	693b      	ldr	r3, [r7, #16]
 8004b7c:	43db      	mvns	r3, r3
 8004b7e:	69ba      	ldr	r2, [r7, #24]
 8004b80:	4013      	ands	r3, r2
 8004b82:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004b84:	683b      	ldr	r3, [r7, #0]
 8004b86:	685b      	ldr	r3, [r3, #4]
 8004b88:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004b8c:	2b00      	cmp	r3, #0
 8004b8e:	d003      	beq.n	8004b98 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8004b90:	69ba      	ldr	r2, [r7, #24]
 8004b92:	693b      	ldr	r3, [r7, #16]
 8004b94:	4313      	orrs	r3, r2
 8004b96:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8004b98:	697b      	ldr	r3, [r7, #20]
 8004b9a:	69ba      	ldr	r2, [r7, #24]
 8004b9c:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8004b9e:	697b      	ldr	r3, [r7, #20]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004ba4:	693b      	ldr	r3, [r7, #16]
 8004ba6:	43db      	mvns	r3, r3
 8004ba8:	69ba      	ldr	r2, [r7, #24]
 8004baa:	4013      	ands	r3, r2
 8004bac:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004bae:	683b      	ldr	r3, [r7, #0]
 8004bb0:	685b      	ldr	r3, [r3, #4]
 8004bb2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	d003      	beq.n	8004bc2 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8004bba:	69ba      	ldr	r2, [r7, #24]
 8004bbc:	693b      	ldr	r3, [r7, #16]
 8004bbe:	4313      	orrs	r3, r2
 8004bc0:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8004bc2:	697b      	ldr	r3, [r7, #20]
 8004bc4:	69ba      	ldr	r2, [r7, #24]
 8004bc6:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8004bc8:	69fb      	ldr	r3, [r7, #28]
 8004bca:	3301      	adds	r3, #1
 8004bcc:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8004bce:	683b      	ldr	r3, [r7, #0]
 8004bd0:	681a      	ldr	r2, [r3, #0]
 8004bd2:	69fb      	ldr	r3, [r7, #28]
 8004bd4:	fa22 f303 	lsr.w	r3, r2, r3
 8004bd8:	2b00      	cmp	r3, #0
 8004bda:	f47f ae63 	bne.w	80048a4 <HAL_GPIO_Init+0x14>
  }
}
 8004bde:	bf00      	nop
 8004be0:	bf00      	nop
 8004be2:	3724      	adds	r7, #36	@ 0x24
 8004be4:	46bd      	mov	sp, r7
 8004be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bea:	4770      	bx	lr
 8004bec:	58000400 	.word	0x58000400

08004bf0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004bf0:	b480      	push	{r7}
 8004bf2:	b083      	sub	sp, #12
 8004bf4:	af00      	add	r7, sp, #0
 8004bf6:	6078      	str	r0, [r7, #4]
 8004bf8:	460b      	mov	r3, r1
 8004bfa:	807b      	strh	r3, [r7, #2]
 8004bfc:	4613      	mov	r3, r2
 8004bfe:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004c00:	787b      	ldrb	r3, [r7, #1]
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	d003      	beq.n	8004c0e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004c06:	887a      	ldrh	r2, [r7, #2]
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8004c0c:	e003      	b.n	8004c16 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8004c0e:	887b      	ldrh	r3, [r7, #2]
 8004c10:	041a      	lsls	r2, r3, #16
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	619a      	str	r2, [r3, #24]
}
 8004c16:	bf00      	nop
 8004c18:	370c      	adds	r7, #12
 8004c1a:	46bd      	mov	sp, r7
 8004c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c20:	4770      	bx	lr

08004c22 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8004c22:	b480      	push	{r7}
 8004c24:	b085      	sub	sp, #20
 8004c26:	af00      	add	r7, sp, #0
 8004c28:	6078      	str	r0, [r7, #4]
 8004c2a:	460b      	mov	r3, r1
 8004c2c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	695b      	ldr	r3, [r3, #20]
 8004c32:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8004c34:	887a      	ldrh	r2, [r7, #2]
 8004c36:	68fb      	ldr	r3, [r7, #12]
 8004c38:	4013      	ands	r3, r2
 8004c3a:	041a      	lsls	r2, r3, #16
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	43d9      	mvns	r1, r3
 8004c40:	887b      	ldrh	r3, [r7, #2]
 8004c42:	400b      	ands	r3, r1
 8004c44:	431a      	orrs	r2, r3
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	619a      	str	r2, [r3, #24]
}
 8004c4a:	bf00      	nop
 8004c4c:	3714      	adds	r7, #20
 8004c4e:	46bd      	mov	sp, r7
 8004c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c54:	4770      	bx	lr
	...

08004c58 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004c58:	b580      	push	{r7, lr}
 8004c5a:	b082      	sub	sp, #8
 8004c5c:	af00      	add	r7, sp, #0
 8004c5e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	2b00      	cmp	r3, #0
 8004c64:	d101      	bne.n	8004c6a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004c66:	2301      	movs	r3, #1
 8004c68:	e08b      	b.n	8004d82 <HAL_I2C_Init+0x12a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004c70:	b2db      	uxtb	r3, r3
 8004c72:	2b00      	cmp	r3, #0
 8004c74:	d106      	bne.n	8004c84 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	2200      	movs	r2, #0
 8004c7a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8004c7e:	6878      	ldr	r0, [r7, #4]
 8004c80:	f7ff f8b6 	bl	8003df0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	2224      	movs	r2, #36	@ 0x24
 8004c88:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	681a      	ldr	r2, [r3, #0]
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	f022 0201 	bic.w	r2, r2, #1
 8004c9a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	685a      	ldr	r2, [r3, #4]
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8004ca8:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	689a      	ldr	r2, [r3, #8]
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8004cb8:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	68db      	ldr	r3, [r3, #12]
 8004cbe:	2b01      	cmp	r3, #1
 8004cc0:	d107      	bne.n	8004cd2 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	689a      	ldr	r2, [r3, #8]
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004cce:	609a      	str	r2, [r3, #8]
 8004cd0:	e006      	b.n	8004ce0 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	689a      	ldr	r2, [r3, #8]
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8004cde:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	68db      	ldr	r3, [r3, #12]
 8004ce4:	2b02      	cmp	r3, #2
 8004ce6:	d108      	bne.n	8004cfa <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	685a      	ldr	r2, [r3, #4]
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004cf6:	605a      	str	r2, [r3, #4]
 8004cf8:	e007      	b.n	8004d0a <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	685a      	ldr	r2, [r3, #4]
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004d08:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	6859      	ldr	r1, [r3, #4]
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	681a      	ldr	r2, [r3, #0]
 8004d14:	4b1d      	ldr	r3, [pc, #116]	@ (8004d8c <HAL_I2C_Init+0x134>)
 8004d16:	430b      	orrs	r3, r1
 8004d18:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	68da      	ldr	r2, [r3, #12]
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8004d28:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	691a      	ldr	r2, [r3, #16]
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	695b      	ldr	r3, [r3, #20]
 8004d32:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	699b      	ldr	r3, [r3, #24]
 8004d3a:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	430a      	orrs	r2, r1
 8004d42:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	69d9      	ldr	r1, [r3, #28]
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	6a1a      	ldr	r2, [r3, #32]
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	430a      	orrs	r2, r1
 8004d52:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	681a      	ldr	r2, [r3, #0]
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	f042 0201 	orr.w	r2, r2, #1
 8004d62:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	2200      	movs	r2, #0
 8004d68:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	2220      	movs	r2, #32
 8004d6e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	2200      	movs	r2, #0
 8004d76:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	2200      	movs	r2, #0
 8004d7c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8004d80:	2300      	movs	r3, #0
}
 8004d82:	4618      	mov	r0, r3
 8004d84:	3708      	adds	r7, #8
 8004d86:	46bd      	mov	sp, r7
 8004d88:	bd80      	pop	{r7, pc}
 8004d8a:	bf00      	nop
 8004d8c:	02008000 	.word	0x02008000

08004d90 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004d90:	b580      	push	{r7, lr}
 8004d92:	b088      	sub	sp, #32
 8004d94:	af02      	add	r7, sp, #8
 8004d96:	60f8      	str	r0, [r7, #12]
 8004d98:	4608      	mov	r0, r1
 8004d9a:	4611      	mov	r1, r2
 8004d9c:	461a      	mov	r2, r3
 8004d9e:	4603      	mov	r3, r0
 8004da0:	817b      	strh	r3, [r7, #10]
 8004da2:	460b      	mov	r3, r1
 8004da4:	813b      	strh	r3, [r7, #8]
 8004da6:	4613      	mov	r3, r2
 8004da8:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004daa:	68fb      	ldr	r3, [r7, #12]
 8004dac:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004db0:	b2db      	uxtb	r3, r3
 8004db2:	2b20      	cmp	r3, #32
 8004db4:	f040 80f9 	bne.w	8004faa <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004db8:	6a3b      	ldr	r3, [r7, #32]
 8004dba:	2b00      	cmp	r3, #0
 8004dbc:	d002      	beq.n	8004dc4 <HAL_I2C_Mem_Write+0x34>
 8004dbe:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8004dc0:	2b00      	cmp	r3, #0
 8004dc2:	d105      	bne.n	8004dd0 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004dca:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8004dcc:	2301      	movs	r3, #1
 8004dce:	e0ed      	b.n	8004fac <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004dd6:	2b01      	cmp	r3, #1
 8004dd8:	d101      	bne.n	8004dde <HAL_I2C_Mem_Write+0x4e>
 8004dda:	2302      	movs	r3, #2
 8004ddc:	e0e6      	b.n	8004fac <HAL_I2C_Mem_Write+0x21c>
 8004dde:	68fb      	ldr	r3, [r7, #12]
 8004de0:	2201      	movs	r2, #1
 8004de2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8004de6:	f7ff fbbb 	bl	8004560 <HAL_GetTick>
 8004dea:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8004dec:	697b      	ldr	r3, [r7, #20]
 8004dee:	9300      	str	r3, [sp, #0]
 8004df0:	2319      	movs	r3, #25
 8004df2:	2201      	movs	r2, #1
 8004df4:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8004df8:	68f8      	ldr	r0, [r7, #12]
 8004dfa:	f000 facf 	bl	800539c <I2C_WaitOnFlagUntilTimeout>
 8004dfe:	4603      	mov	r3, r0
 8004e00:	2b00      	cmp	r3, #0
 8004e02:	d001      	beq.n	8004e08 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8004e04:	2301      	movs	r3, #1
 8004e06:	e0d1      	b.n	8004fac <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004e08:	68fb      	ldr	r3, [r7, #12]
 8004e0a:	2221      	movs	r2, #33	@ 0x21
 8004e0c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004e10:	68fb      	ldr	r3, [r7, #12]
 8004e12:	2240      	movs	r2, #64	@ 0x40
 8004e14:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	2200      	movs	r2, #0
 8004e1c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8004e1e:	68fb      	ldr	r3, [r7, #12]
 8004e20:	6a3a      	ldr	r2, [r7, #32]
 8004e22:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8004e28:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8004e2a:	68fb      	ldr	r3, [r7, #12]
 8004e2c:	2200      	movs	r2, #0
 8004e2e:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004e30:	88f8      	ldrh	r0, [r7, #6]
 8004e32:	893a      	ldrh	r2, [r7, #8]
 8004e34:	8979      	ldrh	r1, [r7, #10]
 8004e36:	697b      	ldr	r3, [r7, #20]
 8004e38:	9301      	str	r3, [sp, #4]
 8004e3a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004e3c:	9300      	str	r3, [sp, #0]
 8004e3e:	4603      	mov	r3, r0
 8004e40:	68f8      	ldr	r0, [r7, #12]
 8004e42:	f000 f9df 	bl	8005204 <I2C_RequestMemoryWrite>
 8004e46:	4603      	mov	r3, r0
 8004e48:	2b00      	cmp	r3, #0
 8004e4a:	d005      	beq.n	8004e58 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004e4c:	68fb      	ldr	r3, [r7, #12]
 8004e4e:	2200      	movs	r2, #0
 8004e50:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8004e54:	2301      	movs	r3, #1
 8004e56:	e0a9      	b.n	8004fac <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004e5c:	b29b      	uxth	r3, r3
 8004e5e:	2bff      	cmp	r3, #255	@ 0xff
 8004e60:	d90e      	bls.n	8004e80 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8004e62:	68fb      	ldr	r3, [r7, #12]
 8004e64:	22ff      	movs	r2, #255	@ 0xff
 8004e66:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004e6c:	b2da      	uxtb	r2, r3
 8004e6e:	8979      	ldrh	r1, [r7, #10]
 8004e70:	2300      	movs	r3, #0
 8004e72:	9300      	str	r3, [sp, #0]
 8004e74:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8004e78:	68f8      	ldr	r0, [r7, #12]
 8004e7a:	f000 fc53 	bl	8005724 <I2C_TransferConfig>
 8004e7e:	e00f      	b.n	8004ea0 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004e84:	b29a      	uxth	r2, r3
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004e8e:	b2da      	uxtb	r2, r3
 8004e90:	8979      	ldrh	r1, [r7, #10]
 8004e92:	2300      	movs	r3, #0
 8004e94:	9300      	str	r3, [sp, #0]
 8004e96:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004e9a:	68f8      	ldr	r0, [r7, #12]
 8004e9c:	f000 fc42 	bl	8005724 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004ea0:	697a      	ldr	r2, [r7, #20]
 8004ea2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004ea4:	68f8      	ldr	r0, [r7, #12]
 8004ea6:	f000 fad2 	bl	800544e <I2C_WaitOnTXISFlagUntilTimeout>
 8004eaa:	4603      	mov	r3, r0
 8004eac:	2b00      	cmp	r3, #0
 8004eae:	d001      	beq.n	8004eb4 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8004eb0:	2301      	movs	r3, #1
 8004eb2:	e07b      	b.n	8004fac <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8004eb4:	68fb      	ldr	r3, [r7, #12]
 8004eb6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004eb8:	781a      	ldrb	r2, [r3, #0]
 8004eba:	68fb      	ldr	r3, [r7, #12]
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004ec0:	68fb      	ldr	r3, [r7, #12]
 8004ec2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ec4:	1c5a      	adds	r2, r3, #1
 8004ec6:	68fb      	ldr	r3, [r7, #12]
 8004ec8:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8004eca:	68fb      	ldr	r3, [r7, #12]
 8004ecc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004ece:	b29b      	uxth	r3, r3
 8004ed0:	3b01      	subs	r3, #1
 8004ed2:	b29a      	uxth	r2, r3
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004edc:	3b01      	subs	r3, #1
 8004ede:	b29a      	uxth	r2, r3
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004ee4:	68fb      	ldr	r3, [r7, #12]
 8004ee6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004ee8:	b29b      	uxth	r3, r3
 8004eea:	2b00      	cmp	r3, #0
 8004eec:	d034      	beq.n	8004f58 <HAL_I2C_Mem_Write+0x1c8>
 8004eee:	68fb      	ldr	r3, [r7, #12]
 8004ef0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004ef2:	2b00      	cmp	r3, #0
 8004ef4:	d130      	bne.n	8004f58 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8004ef6:	697b      	ldr	r3, [r7, #20]
 8004ef8:	9300      	str	r3, [sp, #0]
 8004efa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004efc:	2200      	movs	r2, #0
 8004efe:	2180      	movs	r1, #128	@ 0x80
 8004f00:	68f8      	ldr	r0, [r7, #12]
 8004f02:	f000 fa4b 	bl	800539c <I2C_WaitOnFlagUntilTimeout>
 8004f06:	4603      	mov	r3, r0
 8004f08:	2b00      	cmp	r3, #0
 8004f0a:	d001      	beq.n	8004f10 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8004f0c:	2301      	movs	r3, #1
 8004f0e:	e04d      	b.n	8004fac <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004f10:	68fb      	ldr	r3, [r7, #12]
 8004f12:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004f14:	b29b      	uxth	r3, r3
 8004f16:	2bff      	cmp	r3, #255	@ 0xff
 8004f18:	d90e      	bls.n	8004f38 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8004f1a:	68fb      	ldr	r3, [r7, #12]
 8004f1c:	22ff      	movs	r2, #255	@ 0xff
 8004f1e:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004f24:	b2da      	uxtb	r2, r3
 8004f26:	8979      	ldrh	r1, [r7, #10]
 8004f28:	2300      	movs	r3, #0
 8004f2a:	9300      	str	r3, [sp, #0]
 8004f2c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8004f30:	68f8      	ldr	r0, [r7, #12]
 8004f32:	f000 fbf7 	bl	8005724 <I2C_TransferConfig>
 8004f36:	e00f      	b.n	8004f58 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8004f38:	68fb      	ldr	r3, [r7, #12]
 8004f3a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004f3c:	b29a      	uxth	r2, r3
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004f42:	68fb      	ldr	r3, [r7, #12]
 8004f44:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004f46:	b2da      	uxtb	r2, r3
 8004f48:	8979      	ldrh	r1, [r7, #10]
 8004f4a:	2300      	movs	r3, #0
 8004f4c:	9300      	str	r3, [sp, #0]
 8004f4e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004f52:	68f8      	ldr	r0, [r7, #12]
 8004f54:	f000 fbe6 	bl	8005724 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004f5c:	b29b      	uxth	r3, r3
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	d19e      	bne.n	8004ea0 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004f62:	697a      	ldr	r2, [r7, #20]
 8004f64:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004f66:	68f8      	ldr	r0, [r7, #12]
 8004f68:	f000 fab8 	bl	80054dc <I2C_WaitOnSTOPFlagUntilTimeout>
 8004f6c:	4603      	mov	r3, r0
 8004f6e:	2b00      	cmp	r3, #0
 8004f70:	d001      	beq.n	8004f76 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8004f72:	2301      	movs	r3, #1
 8004f74:	e01a      	b.n	8004fac <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004f76:	68fb      	ldr	r3, [r7, #12]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	2220      	movs	r2, #32
 8004f7c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004f7e:	68fb      	ldr	r3, [r7, #12]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	6859      	ldr	r1, [r3, #4]
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	681a      	ldr	r2, [r3, #0]
 8004f88:	4b0a      	ldr	r3, [pc, #40]	@ (8004fb4 <HAL_I2C_Mem_Write+0x224>)
 8004f8a:	400b      	ands	r3, r1
 8004f8c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8004f8e:	68fb      	ldr	r3, [r7, #12]
 8004f90:	2220      	movs	r2, #32
 8004f92:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8004f96:	68fb      	ldr	r3, [r7, #12]
 8004f98:	2200      	movs	r2, #0
 8004f9a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004f9e:	68fb      	ldr	r3, [r7, #12]
 8004fa0:	2200      	movs	r2, #0
 8004fa2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8004fa6:	2300      	movs	r3, #0
 8004fa8:	e000      	b.n	8004fac <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8004faa:	2302      	movs	r3, #2
  }
}
 8004fac:	4618      	mov	r0, r3
 8004fae:	3718      	adds	r7, #24
 8004fb0:	46bd      	mov	sp, r7
 8004fb2:	bd80      	pop	{r7, pc}
 8004fb4:	fe00e800 	.word	0xfe00e800

08004fb8 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004fb8:	b580      	push	{r7, lr}
 8004fba:	b088      	sub	sp, #32
 8004fbc:	af02      	add	r7, sp, #8
 8004fbe:	60f8      	str	r0, [r7, #12]
 8004fc0:	4608      	mov	r0, r1
 8004fc2:	4611      	mov	r1, r2
 8004fc4:	461a      	mov	r2, r3
 8004fc6:	4603      	mov	r3, r0
 8004fc8:	817b      	strh	r3, [r7, #10]
 8004fca:	460b      	mov	r3, r1
 8004fcc:	813b      	strh	r3, [r7, #8]
 8004fce:	4613      	mov	r3, r2
 8004fd0:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004fd2:	68fb      	ldr	r3, [r7, #12]
 8004fd4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004fd8:	b2db      	uxtb	r3, r3
 8004fda:	2b20      	cmp	r3, #32
 8004fdc:	f040 80fd 	bne.w	80051da <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8004fe0:	6a3b      	ldr	r3, [r7, #32]
 8004fe2:	2b00      	cmp	r3, #0
 8004fe4:	d002      	beq.n	8004fec <HAL_I2C_Mem_Read+0x34>
 8004fe6:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8004fe8:	2b00      	cmp	r3, #0
 8004fea:	d105      	bne.n	8004ff8 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8004fec:	68fb      	ldr	r3, [r7, #12]
 8004fee:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004ff2:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8004ff4:	2301      	movs	r3, #1
 8004ff6:	e0f1      	b.n	80051dc <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004ffe:	2b01      	cmp	r3, #1
 8005000:	d101      	bne.n	8005006 <HAL_I2C_Mem_Read+0x4e>
 8005002:	2302      	movs	r3, #2
 8005004:	e0ea      	b.n	80051dc <HAL_I2C_Mem_Read+0x224>
 8005006:	68fb      	ldr	r3, [r7, #12]
 8005008:	2201      	movs	r2, #1
 800500a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800500e:	f7ff faa7 	bl	8004560 <HAL_GetTick>
 8005012:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8005014:	697b      	ldr	r3, [r7, #20]
 8005016:	9300      	str	r3, [sp, #0]
 8005018:	2319      	movs	r3, #25
 800501a:	2201      	movs	r2, #1
 800501c:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8005020:	68f8      	ldr	r0, [r7, #12]
 8005022:	f000 f9bb 	bl	800539c <I2C_WaitOnFlagUntilTimeout>
 8005026:	4603      	mov	r3, r0
 8005028:	2b00      	cmp	r3, #0
 800502a:	d001      	beq.n	8005030 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 800502c:	2301      	movs	r3, #1
 800502e:	e0d5      	b.n	80051dc <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8005030:	68fb      	ldr	r3, [r7, #12]
 8005032:	2222      	movs	r2, #34	@ 0x22
 8005034:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	2240      	movs	r2, #64	@ 0x40
 800503c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005040:	68fb      	ldr	r3, [r7, #12]
 8005042:	2200      	movs	r2, #0
 8005044:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	6a3a      	ldr	r2, [r7, #32]
 800504a:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 800504c:	68fb      	ldr	r3, [r7, #12]
 800504e:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8005050:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8005052:	68fb      	ldr	r3, [r7, #12]
 8005054:	2200      	movs	r2, #0
 8005056:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005058:	88f8      	ldrh	r0, [r7, #6]
 800505a:	893a      	ldrh	r2, [r7, #8]
 800505c:	8979      	ldrh	r1, [r7, #10]
 800505e:	697b      	ldr	r3, [r7, #20]
 8005060:	9301      	str	r3, [sp, #4]
 8005062:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005064:	9300      	str	r3, [sp, #0]
 8005066:	4603      	mov	r3, r0
 8005068:	68f8      	ldr	r0, [r7, #12]
 800506a:	f000 f91f 	bl	80052ac <I2C_RequestMemoryRead>
 800506e:	4603      	mov	r3, r0
 8005070:	2b00      	cmp	r3, #0
 8005072:	d005      	beq.n	8005080 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	2200      	movs	r2, #0
 8005078:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 800507c:	2301      	movs	r3, #1
 800507e:	e0ad      	b.n	80051dc <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005080:	68fb      	ldr	r3, [r7, #12]
 8005082:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005084:	b29b      	uxth	r3, r3
 8005086:	2bff      	cmp	r3, #255	@ 0xff
 8005088:	d90e      	bls.n	80050a8 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800508a:	68fb      	ldr	r3, [r7, #12]
 800508c:	22ff      	movs	r2, #255	@ 0xff
 800508e:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005094:	b2da      	uxtb	r2, r3
 8005096:	8979      	ldrh	r1, [r7, #10]
 8005098:	4b52      	ldr	r3, [pc, #328]	@ (80051e4 <HAL_I2C_Mem_Read+0x22c>)
 800509a:	9300      	str	r3, [sp, #0]
 800509c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80050a0:	68f8      	ldr	r0, [r7, #12]
 80050a2:	f000 fb3f 	bl	8005724 <I2C_TransferConfig>
 80050a6:	e00f      	b.n	80050c8 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80050a8:	68fb      	ldr	r3, [r7, #12]
 80050aa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80050ac:	b29a      	uxth	r2, r3
 80050ae:	68fb      	ldr	r3, [r7, #12]
 80050b0:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80050b2:	68fb      	ldr	r3, [r7, #12]
 80050b4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80050b6:	b2da      	uxtb	r2, r3
 80050b8:	8979      	ldrh	r1, [r7, #10]
 80050ba:	4b4a      	ldr	r3, [pc, #296]	@ (80051e4 <HAL_I2C_Mem_Read+0x22c>)
 80050bc:	9300      	str	r3, [sp, #0]
 80050be:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80050c2:	68f8      	ldr	r0, [r7, #12]
 80050c4:	f000 fb2e 	bl	8005724 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 80050c8:	697b      	ldr	r3, [r7, #20]
 80050ca:	9300      	str	r3, [sp, #0]
 80050cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80050ce:	2200      	movs	r2, #0
 80050d0:	2104      	movs	r1, #4
 80050d2:	68f8      	ldr	r0, [r7, #12]
 80050d4:	f000 f962 	bl	800539c <I2C_WaitOnFlagUntilTimeout>
 80050d8:	4603      	mov	r3, r0
 80050da:	2b00      	cmp	r3, #0
 80050dc:	d001      	beq.n	80050e2 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 80050de:	2301      	movs	r3, #1
 80050e0:	e07c      	b.n	80051dc <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80050e2:	68fb      	ldr	r3, [r7, #12]
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80050e8:	68fb      	ldr	r3, [r7, #12]
 80050ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80050ec:	b2d2      	uxtb	r2, r2
 80050ee:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80050f0:	68fb      	ldr	r3, [r7, #12]
 80050f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80050f4:	1c5a      	adds	r2, r3, #1
 80050f6:	68fb      	ldr	r3, [r7, #12]
 80050f8:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 80050fa:	68fb      	ldr	r3, [r7, #12]
 80050fc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80050fe:	3b01      	subs	r3, #1
 8005100:	b29a      	uxth	r2, r3
 8005102:	68fb      	ldr	r3, [r7, #12]
 8005104:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8005106:	68fb      	ldr	r3, [r7, #12]
 8005108:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800510a:	b29b      	uxth	r3, r3
 800510c:	3b01      	subs	r3, #1
 800510e:	b29a      	uxth	r2, r3
 8005110:	68fb      	ldr	r3, [r7, #12]
 8005112:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8005114:	68fb      	ldr	r3, [r7, #12]
 8005116:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005118:	b29b      	uxth	r3, r3
 800511a:	2b00      	cmp	r3, #0
 800511c:	d034      	beq.n	8005188 <HAL_I2C_Mem_Read+0x1d0>
 800511e:	68fb      	ldr	r3, [r7, #12]
 8005120:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005122:	2b00      	cmp	r3, #0
 8005124:	d130      	bne.n	8005188 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8005126:	697b      	ldr	r3, [r7, #20]
 8005128:	9300      	str	r3, [sp, #0]
 800512a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800512c:	2200      	movs	r2, #0
 800512e:	2180      	movs	r1, #128	@ 0x80
 8005130:	68f8      	ldr	r0, [r7, #12]
 8005132:	f000 f933 	bl	800539c <I2C_WaitOnFlagUntilTimeout>
 8005136:	4603      	mov	r3, r0
 8005138:	2b00      	cmp	r3, #0
 800513a:	d001      	beq.n	8005140 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 800513c:	2301      	movs	r3, #1
 800513e:	e04d      	b.n	80051dc <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005144:	b29b      	uxth	r3, r3
 8005146:	2bff      	cmp	r3, #255	@ 0xff
 8005148:	d90e      	bls.n	8005168 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800514a:	68fb      	ldr	r3, [r7, #12]
 800514c:	22ff      	movs	r2, #255	@ 0xff
 800514e:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8005150:	68fb      	ldr	r3, [r7, #12]
 8005152:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005154:	b2da      	uxtb	r2, r3
 8005156:	8979      	ldrh	r1, [r7, #10]
 8005158:	2300      	movs	r3, #0
 800515a:	9300      	str	r3, [sp, #0]
 800515c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8005160:	68f8      	ldr	r0, [r7, #12]
 8005162:	f000 fadf 	bl	8005724 <I2C_TransferConfig>
 8005166:	e00f      	b.n	8005188 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8005168:	68fb      	ldr	r3, [r7, #12]
 800516a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800516c:	b29a      	uxth	r2, r3
 800516e:	68fb      	ldr	r3, [r7, #12]
 8005170:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005172:	68fb      	ldr	r3, [r7, #12]
 8005174:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005176:	b2da      	uxtb	r2, r3
 8005178:	8979      	ldrh	r1, [r7, #10]
 800517a:	2300      	movs	r3, #0
 800517c:	9300      	str	r3, [sp, #0]
 800517e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8005182:	68f8      	ldr	r0, [r7, #12]
 8005184:	f000 face 	bl	8005724 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800518c:	b29b      	uxth	r3, r3
 800518e:	2b00      	cmp	r3, #0
 8005190:	d19a      	bne.n	80050c8 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005192:	697a      	ldr	r2, [r7, #20]
 8005194:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005196:	68f8      	ldr	r0, [r7, #12]
 8005198:	f000 f9a0 	bl	80054dc <I2C_WaitOnSTOPFlagUntilTimeout>
 800519c:	4603      	mov	r3, r0
 800519e:	2b00      	cmp	r3, #0
 80051a0:	d001      	beq.n	80051a6 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 80051a2:	2301      	movs	r3, #1
 80051a4:	e01a      	b.n	80051dc <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80051a6:	68fb      	ldr	r3, [r7, #12]
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	2220      	movs	r2, #32
 80051ac:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80051ae:	68fb      	ldr	r3, [r7, #12]
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	6859      	ldr	r1, [r3, #4]
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	681a      	ldr	r2, [r3, #0]
 80051b8:	4b0b      	ldr	r3, [pc, #44]	@ (80051e8 <HAL_I2C_Mem_Read+0x230>)
 80051ba:	400b      	ands	r3, r1
 80051bc:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80051be:	68fb      	ldr	r3, [r7, #12]
 80051c0:	2220      	movs	r2, #32
 80051c2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80051c6:	68fb      	ldr	r3, [r7, #12]
 80051c8:	2200      	movs	r2, #0
 80051ca:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80051ce:	68fb      	ldr	r3, [r7, #12]
 80051d0:	2200      	movs	r2, #0
 80051d2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80051d6:	2300      	movs	r3, #0
 80051d8:	e000      	b.n	80051dc <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 80051da:	2302      	movs	r3, #2
  }
}
 80051dc:	4618      	mov	r0, r3
 80051de:	3718      	adds	r7, #24
 80051e0:	46bd      	mov	sp, r7
 80051e2:	bd80      	pop	{r7, pc}
 80051e4:	80002400 	.word	0x80002400
 80051e8:	fe00e800 	.word	0xfe00e800

080051ec <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
  * @retval I2C Error Code
  */
uint32_t HAL_I2C_GetError(const I2C_HandleTypeDef *hi2c)
{
 80051ec:	b480      	push	{r7}
 80051ee:	b083      	sub	sp, #12
 80051f0:	af00      	add	r7, sp, #0
 80051f2:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
}
 80051f8:	4618      	mov	r0, r3
 80051fa:	370c      	adds	r7, #12
 80051fc:	46bd      	mov	sp, r7
 80051fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005202:	4770      	bx	lr

08005204 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8005204:	b580      	push	{r7, lr}
 8005206:	b086      	sub	sp, #24
 8005208:	af02      	add	r7, sp, #8
 800520a:	60f8      	str	r0, [r7, #12]
 800520c:	4608      	mov	r0, r1
 800520e:	4611      	mov	r1, r2
 8005210:	461a      	mov	r2, r3
 8005212:	4603      	mov	r3, r0
 8005214:	817b      	strh	r3, [r7, #10]
 8005216:	460b      	mov	r3, r1
 8005218:	813b      	strh	r3, [r7, #8]
 800521a:	4613      	mov	r3, r2
 800521c:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800521e:	88fb      	ldrh	r3, [r7, #6]
 8005220:	b2da      	uxtb	r2, r3
 8005222:	8979      	ldrh	r1, [r7, #10]
 8005224:	4b20      	ldr	r3, [pc, #128]	@ (80052a8 <I2C_RequestMemoryWrite+0xa4>)
 8005226:	9300      	str	r3, [sp, #0]
 8005228:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800522c:	68f8      	ldr	r0, [r7, #12]
 800522e:	f000 fa79 	bl	8005724 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005232:	69fa      	ldr	r2, [r7, #28]
 8005234:	69b9      	ldr	r1, [r7, #24]
 8005236:	68f8      	ldr	r0, [r7, #12]
 8005238:	f000 f909 	bl	800544e <I2C_WaitOnTXISFlagUntilTimeout>
 800523c:	4603      	mov	r3, r0
 800523e:	2b00      	cmp	r3, #0
 8005240:	d001      	beq.n	8005246 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8005242:	2301      	movs	r3, #1
 8005244:	e02c      	b.n	80052a0 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005246:	88fb      	ldrh	r3, [r7, #6]
 8005248:	2b01      	cmp	r3, #1
 800524a:	d105      	bne.n	8005258 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800524c:	893b      	ldrh	r3, [r7, #8]
 800524e:	b2da      	uxtb	r2, r3
 8005250:	68fb      	ldr	r3, [r7, #12]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	629a      	str	r2, [r3, #40]	@ 0x28
 8005256:	e015      	b.n	8005284 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8005258:	893b      	ldrh	r3, [r7, #8]
 800525a:	0a1b      	lsrs	r3, r3, #8
 800525c:	b29b      	uxth	r3, r3
 800525e:	b2da      	uxtb	r2, r3
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005266:	69fa      	ldr	r2, [r7, #28]
 8005268:	69b9      	ldr	r1, [r7, #24]
 800526a:	68f8      	ldr	r0, [r7, #12]
 800526c:	f000 f8ef 	bl	800544e <I2C_WaitOnTXISFlagUntilTimeout>
 8005270:	4603      	mov	r3, r0
 8005272:	2b00      	cmp	r3, #0
 8005274:	d001      	beq.n	800527a <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8005276:	2301      	movs	r3, #1
 8005278:	e012      	b.n	80052a0 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800527a:	893b      	ldrh	r3, [r7, #8]
 800527c:	b2da      	uxtb	r2, r3
 800527e:	68fb      	ldr	r3, [r7, #12]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8005284:	69fb      	ldr	r3, [r7, #28]
 8005286:	9300      	str	r3, [sp, #0]
 8005288:	69bb      	ldr	r3, [r7, #24]
 800528a:	2200      	movs	r2, #0
 800528c:	2180      	movs	r1, #128	@ 0x80
 800528e:	68f8      	ldr	r0, [r7, #12]
 8005290:	f000 f884 	bl	800539c <I2C_WaitOnFlagUntilTimeout>
 8005294:	4603      	mov	r3, r0
 8005296:	2b00      	cmp	r3, #0
 8005298:	d001      	beq.n	800529e <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 800529a:	2301      	movs	r3, #1
 800529c:	e000      	b.n	80052a0 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 800529e:	2300      	movs	r3, #0
}
 80052a0:	4618      	mov	r0, r3
 80052a2:	3710      	adds	r7, #16
 80052a4:	46bd      	mov	sp, r7
 80052a6:	bd80      	pop	{r7, pc}
 80052a8:	80002000 	.word	0x80002000

080052ac <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 80052ac:	b580      	push	{r7, lr}
 80052ae:	b086      	sub	sp, #24
 80052b0:	af02      	add	r7, sp, #8
 80052b2:	60f8      	str	r0, [r7, #12]
 80052b4:	4608      	mov	r0, r1
 80052b6:	4611      	mov	r1, r2
 80052b8:	461a      	mov	r2, r3
 80052ba:	4603      	mov	r3, r0
 80052bc:	817b      	strh	r3, [r7, #10]
 80052be:	460b      	mov	r3, r1
 80052c0:	813b      	strh	r3, [r7, #8]
 80052c2:	4613      	mov	r3, r2
 80052c4:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 80052c6:	88fb      	ldrh	r3, [r7, #6]
 80052c8:	b2da      	uxtb	r2, r3
 80052ca:	8979      	ldrh	r1, [r7, #10]
 80052cc:	4b20      	ldr	r3, [pc, #128]	@ (8005350 <I2C_RequestMemoryRead+0xa4>)
 80052ce:	9300      	str	r3, [sp, #0]
 80052d0:	2300      	movs	r3, #0
 80052d2:	68f8      	ldr	r0, [r7, #12]
 80052d4:	f000 fa26 	bl	8005724 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80052d8:	69fa      	ldr	r2, [r7, #28]
 80052da:	69b9      	ldr	r1, [r7, #24]
 80052dc:	68f8      	ldr	r0, [r7, #12]
 80052de:	f000 f8b6 	bl	800544e <I2C_WaitOnTXISFlagUntilTimeout>
 80052e2:	4603      	mov	r3, r0
 80052e4:	2b00      	cmp	r3, #0
 80052e6:	d001      	beq.n	80052ec <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 80052e8:	2301      	movs	r3, #1
 80052ea:	e02c      	b.n	8005346 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80052ec:	88fb      	ldrh	r3, [r7, #6]
 80052ee:	2b01      	cmp	r3, #1
 80052f0:	d105      	bne.n	80052fe <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80052f2:	893b      	ldrh	r3, [r7, #8]
 80052f4:	b2da      	uxtb	r2, r3
 80052f6:	68fb      	ldr	r3, [r7, #12]
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	629a      	str	r2, [r3, #40]	@ 0x28
 80052fc:	e015      	b.n	800532a <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80052fe:	893b      	ldrh	r3, [r7, #8]
 8005300:	0a1b      	lsrs	r3, r3, #8
 8005302:	b29b      	uxth	r3, r3
 8005304:	b2da      	uxtb	r2, r3
 8005306:	68fb      	ldr	r3, [r7, #12]
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800530c:	69fa      	ldr	r2, [r7, #28]
 800530e:	69b9      	ldr	r1, [r7, #24]
 8005310:	68f8      	ldr	r0, [r7, #12]
 8005312:	f000 f89c 	bl	800544e <I2C_WaitOnTXISFlagUntilTimeout>
 8005316:	4603      	mov	r3, r0
 8005318:	2b00      	cmp	r3, #0
 800531a:	d001      	beq.n	8005320 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 800531c:	2301      	movs	r3, #1
 800531e:	e012      	b.n	8005346 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8005320:	893b      	ldrh	r3, [r7, #8]
 8005322:	b2da      	uxtb	r2, r3
 8005324:	68fb      	ldr	r3, [r7, #12]
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 800532a:	69fb      	ldr	r3, [r7, #28]
 800532c:	9300      	str	r3, [sp, #0]
 800532e:	69bb      	ldr	r3, [r7, #24]
 8005330:	2200      	movs	r2, #0
 8005332:	2140      	movs	r1, #64	@ 0x40
 8005334:	68f8      	ldr	r0, [r7, #12]
 8005336:	f000 f831 	bl	800539c <I2C_WaitOnFlagUntilTimeout>
 800533a:	4603      	mov	r3, r0
 800533c:	2b00      	cmp	r3, #0
 800533e:	d001      	beq.n	8005344 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8005340:	2301      	movs	r3, #1
 8005342:	e000      	b.n	8005346 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8005344:	2300      	movs	r3, #0
}
 8005346:	4618      	mov	r0, r3
 8005348:	3710      	adds	r7, #16
 800534a:	46bd      	mov	sp, r7
 800534c:	bd80      	pop	{r7, pc}
 800534e:	bf00      	nop
 8005350:	80002000 	.word	0x80002000

08005354 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8005354:	b480      	push	{r7}
 8005356:	b083      	sub	sp, #12
 8005358:	af00      	add	r7, sp, #0
 800535a:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	699b      	ldr	r3, [r3, #24]
 8005362:	f003 0302 	and.w	r3, r3, #2
 8005366:	2b02      	cmp	r3, #2
 8005368:	d103      	bne.n	8005372 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	2200      	movs	r2, #0
 8005370:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	699b      	ldr	r3, [r3, #24]
 8005378:	f003 0301 	and.w	r3, r3, #1
 800537c:	2b01      	cmp	r3, #1
 800537e:	d007      	beq.n	8005390 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	699a      	ldr	r2, [r3, #24]
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	f042 0201 	orr.w	r2, r2, #1
 800538e:	619a      	str	r2, [r3, #24]
  }
}
 8005390:	bf00      	nop
 8005392:	370c      	adds	r7, #12
 8005394:	46bd      	mov	sp, r7
 8005396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800539a:	4770      	bx	lr

0800539c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800539c:	b580      	push	{r7, lr}
 800539e:	b084      	sub	sp, #16
 80053a0:	af00      	add	r7, sp, #0
 80053a2:	60f8      	str	r0, [r7, #12]
 80053a4:	60b9      	str	r1, [r7, #8]
 80053a6:	603b      	str	r3, [r7, #0]
 80053a8:	4613      	mov	r3, r2
 80053aa:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80053ac:	e03b      	b.n	8005426 <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80053ae:	69ba      	ldr	r2, [r7, #24]
 80053b0:	6839      	ldr	r1, [r7, #0]
 80053b2:	68f8      	ldr	r0, [r7, #12]
 80053b4:	f000 f8d6 	bl	8005564 <I2C_IsErrorOccurred>
 80053b8:	4603      	mov	r3, r0
 80053ba:	2b00      	cmp	r3, #0
 80053bc:	d001      	beq.n	80053c2 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 80053be:	2301      	movs	r3, #1
 80053c0:	e041      	b.n	8005446 <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80053c2:	683b      	ldr	r3, [r7, #0]
 80053c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80053c8:	d02d      	beq.n	8005426 <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80053ca:	f7ff f8c9 	bl	8004560 <HAL_GetTick>
 80053ce:	4602      	mov	r2, r0
 80053d0:	69bb      	ldr	r3, [r7, #24]
 80053d2:	1ad3      	subs	r3, r2, r3
 80053d4:	683a      	ldr	r2, [r7, #0]
 80053d6:	429a      	cmp	r2, r3
 80053d8:	d302      	bcc.n	80053e0 <I2C_WaitOnFlagUntilTimeout+0x44>
 80053da:	683b      	ldr	r3, [r7, #0]
 80053dc:	2b00      	cmp	r3, #0
 80053de:	d122      	bne.n	8005426 <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80053e0:	68fb      	ldr	r3, [r7, #12]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	699a      	ldr	r2, [r3, #24]
 80053e6:	68bb      	ldr	r3, [r7, #8]
 80053e8:	4013      	ands	r3, r2
 80053ea:	68ba      	ldr	r2, [r7, #8]
 80053ec:	429a      	cmp	r2, r3
 80053ee:	bf0c      	ite	eq
 80053f0:	2301      	moveq	r3, #1
 80053f2:	2300      	movne	r3, #0
 80053f4:	b2db      	uxtb	r3, r3
 80053f6:	461a      	mov	r2, r3
 80053f8:	79fb      	ldrb	r3, [r7, #7]
 80053fa:	429a      	cmp	r2, r3
 80053fc:	d113      	bne.n	8005426 <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80053fe:	68fb      	ldr	r3, [r7, #12]
 8005400:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005402:	f043 0220 	orr.w	r2, r3, #32
 8005406:	68fb      	ldr	r3, [r7, #12]
 8005408:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800540a:	68fb      	ldr	r3, [r7, #12]
 800540c:	2220      	movs	r2, #32
 800540e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8005412:	68fb      	ldr	r3, [r7, #12]
 8005414:	2200      	movs	r2, #0
 8005416:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800541a:	68fb      	ldr	r3, [r7, #12]
 800541c:	2200      	movs	r2, #0
 800541e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 8005422:	2301      	movs	r3, #1
 8005424:	e00f      	b.n	8005446 <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005426:	68fb      	ldr	r3, [r7, #12]
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	699a      	ldr	r2, [r3, #24]
 800542c:	68bb      	ldr	r3, [r7, #8]
 800542e:	4013      	ands	r3, r2
 8005430:	68ba      	ldr	r2, [r7, #8]
 8005432:	429a      	cmp	r2, r3
 8005434:	bf0c      	ite	eq
 8005436:	2301      	moveq	r3, #1
 8005438:	2300      	movne	r3, #0
 800543a:	b2db      	uxtb	r3, r3
 800543c:	461a      	mov	r2, r3
 800543e:	79fb      	ldrb	r3, [r7, #7]
 8005440:	429a      	cmp	r2, r3
 8005442:	d0b4      	beq.n	80053ae <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005444:	2300      	movs	r3, #0
}
 8005446:	4618      	mov	r0, r3
 8005448:	3710      	adds	r7, #16
 800544a:	46bd      	mov	sp, r7
 800544c:	bd80      	pop	{r7, pc}

0800544e <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800544e:	b580      	push	{r7, lr}
 8005450:	b084      	sub	sp, #16
 8005452:	af00      	add	r7, sp, #0
 8005454:	60f8      	str	r0, [r7, #12]
 8005456:	60b9      	str	r1, [r7, #8]
 8005458:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800545a:	e033      	b.n	80054c4 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800545c:	687a      	ldr	r2, [r7, #4]
 800545e:	68b9      	ldr	r1, [r7, #8]
 8005460:	68f8      	ldr	r0, [r7, #12]
 8005462:	f000 f87f 	bl	8005564 <I2C_IsErrorOccurred>
 8005466:	4603      	mov	r3, r0
 8005468:	2b00      	cmp	r3, #0
 800546a:	d001      	beq.n	8005470 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800546c:	2301      	movs	r3, #1
 800546e:	e031      	b.n	80054d4 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005470:	68bb      	ldr	r3, [r7, #8]
 8005472:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005476:	d025      	beq.n	80054c4 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005478:	f7ff f872 	bl	8004560 <HAL_GetTick>
 800547c:	4602      	mov	r2, r0
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	1ad3      	subs	r3, r2, r3
 8005482:	68ba      	ldr	r2, [r7, #8]
 8005484:	429a      	cmp	r2, r3
 8005486:	d302      	bcc.n	800548e <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8005488:	68bb      	ldr	r3, [r7, #8]
 800548a:	2b00      	cmp	r3, #0
 800548c:	d11a      	bne.n	80054c4 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 800548e:	68fb      	ldr	r3, [r7, #12]
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	699b      	ldr	r3, [r3, #24]
 8005494:	f003 0302 	and.w	r3, r3, #2
 8005498:	2b02      	cmp	r3, #2
 800549a:	d013      	beq.n	80054c4 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80054a0:	f043 0220 	orr.w	r2, r3, #32
 80054a4:	68fb      	ldr	r3, [r7, #12]
 80054a6:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80054a8:	68fb      	ldr	r3, [r7, #12]
 80054aa:	2220      	movs	r2, #32
 80054ac:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80054b0:	68fb      	ldr	r3, [r7, #12]
 80054b2:	2200      	movs	r2, #0
 80054b4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	2200      	movs	r2, #0
 80054bc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80054c0:	2301      	movs	r3, #1
 80054c2:	e007      	b.n	80054d4 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80054c4:	68fb      	ldr	r3, [r7, #12]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	699b      	ldr	r3, [r3, #24]
 80054ca:	f003 0302 	and.w	r3, r3, #2
 80054ce:	2b02      	cmp	r3, #2
 80054d0:	d1c4      	bne.n	800545c <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80054d2:	2300      	movs	r3, #0
}
 80054d4:	4618      	mov	r0, r3
 80054d6:	3710      	adds	r7, #16
 80054d8:	46bd      	mov	sp, r7
 80054da:	bd80      	pop	{r7, pc}

080054dc <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80054dc:	b580      	push	{r7, lr}
 80054de:	b084      	sub	sp, #16
 80054e0:	af00      	add	r7, sp, #0
 80054e2:	60f8      	str	r0, [r7, #12]
 80054e4:	60b9      	str	r1, [r7, #8]
 80054e6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80054e8:	e02f      	b.n	800554a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80054ea:	687a      	ldr	r2, [r7, #4]
 80054ec:	68b9      	ldr	r1, [r7, #8]
 80054ee:	68f8      	ldr	r0, [r7, #12]
 80054f0:	f000 f838 	bl	8005564 <I2C_IsErrorOccurred>
 80054f4:	4603      	mov	r3, r0
 80054f6:	2b00      	cmp	r3, #0
 80054f8:	d001      	beq.n	80054fe <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80054fa:	2301      	movs	r3, #1
 80054fc:	e02d      	b.n	800555a <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80054fe:	f7ff f82f 	bl	8004560 <HAL_GetTick>
 8005502:	4602      	mov	r2, r0
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	1ad3      	subs	r3, r2, r3
 8005508:	68ba      	ldr	r2, [r7, #8]
 800550a:	429a      	cmp	r2, r3
 800550c:	d302      	bcc.n	8005514 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800550e:	68bb      	ldr	r3, [r7, #8]
 8005510:	2b00      	cmp	r3, #0
 8005512:	d11a      	bne.n	800554a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8005514:	68fb      	ldr	r3, [r7, #12]
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	699b      	ldr	r3, [r3, #24]
 800551a:	f003 0320 	and.w	r3, r3, #32
 800551e:	2b20      	cmp	r3, #32
 8005520:	d013      	beq.n	800554a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005522:	68fb      	ldr	r3, [r7, #12]
 8005524:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005526:	f043 0220 	orr.w	r2, r3, #32
 800552a:	68fb      	ldr	r3, [r7, #12]
 800552c:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800552e:	68fb      	ldr	r3, [r7, #12]
 8005530:	2220      	movs	r2, #32
 8005532:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005536:	68fb      	ldr	r3, [r7, #12]
 8005538:	2200      	movs	r2, #0
 800553a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800553e:	68fb      	ldr	r3, [r7, #12]
 8005540:	2200      	movs	r2, #0
 8005542:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8005546:	2301      	movs	r3, #1
 8005548:	e007      	b.n	800555a <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800554a:	68fb      	ldr	r3, [r7, #12]
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	699b      	ldr	r3, [r3, #24]
 8005550:	f003 0320 	and.w	r3, r3, #32
 8005554:	2b20      	cmp	r3, #32
 8005556:	d1c8      	bne.n	80054ea <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005558:	2300      	movs	r3, #0
}
 800555a:	4618      	mov	r0, r3
 800555c:	3710      	adds	r7, #16
 800555e:	46bd      	mov	sp, r7
 8005560:	bd80      	pop	{r7, pc}
	...

08005564 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005564:	b580      	push	{r7, lr}
 8005566:	b08a      	sub	sp, #40	@ 0x28
 8005568:	af00      	add	r7, sp, #0
 800556a:	60f8      	str	r0, [r7, #12]
 800556c:	60b9      	str	r1, [r7, #8]
 800556e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005570:	2300      	movs	r3, #0
 8005572:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8005576:	68fb      	ldr	r3, [r7, #12]
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	699b      	ldr	r3, [r3, #24]
 800557c:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 800557e:	2300      	movs	r3, #0
 8005580:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8005586:	69bb      	ldr	r3, [r7, #24]
 8005588:	f003 0310 	and.w	r3, r3, #16
 800558c:	2b00      	cmp	r3, #0
 800558e:	d068      	beq.n	8005662 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005590:	68fb      	ldr	r3, [r7, #12]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	2210      	movs	r2, #16
 8005596:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8005598:	e049      	b.n	800562e <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800559a:	68bb      	ldr	r3, [r7, #8]
 800559c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80055a0:	d045      	beq.n	800562e <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80055a2:	f7fe ffdd 	bl	8004560 <HAL_GetTick>
 80055a6:	4602      	mov	r2, r0
 80055a8:	69fb      	ldr	r3, [r7, #28]
 80055aa:	1ad3      	subs	r3, r2, r3
 80055ac:	68ba      	ldr	r2, [r7, #8]
 80055ae:	429a      	cmp	r2, r3
 80055b0:	d302      	bcc.n	80055b8 <I2C_IsErrorOccurred+0x54>
 80055b2:	68bb      	ldr	r3, [r7, #8]
 80055b4:	2b00      	cmp	r3, #0
 80055b6:	d13a      	bne.n	800562e <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80055b8:	68fb      	ldr	r3, [r7, #12]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	685b      	ldr	r3, [r3, #4]
 80055be:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80055c2:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 80055c4:	68fb      	ldr	r3, [r7, #12]
 80055c6:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80055ca:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80055cc:	68fb      	ldr	r3, [r7, #12]
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	699b      	ldr	r3, [r3, #24]
 80055d2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80055d6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80055da:	d121      	bne.n	8005620 <I2C_IsErrorOccurred+0xbc>
 80055dc:	697b      	ldr	r3, [r7, #20]
 80055de:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80055e2:	d01d      	beq.n	8005620 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 80055e4:	7cfb      	ldrb	r3, [r7, #19]
 80055e6:	2b20      	cmp	r3, #32
 80055e8:	d01a      	beq.n	8005620 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80055ea:	68fb      	ldr	r3, [r7, #12]
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	685a      	ldr	r2, [r3, #4]
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80055f8:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80055fa:	f7fe ffb1 	bl	8004560 <HAL_GetTick>
 80055fe:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005600:	e00e      	b.n	8005620 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8005602:	f7fe ffad 	bl	8004560 <HAL_GetTick>
 8005606:	4602      	mov	r2, r0
 8005608:	69fb      	ldr	r3, [r7, #28]
 800560a:	1ad3      	subs	r3, r2, r3
 800560c:	2b19      	cmp	r3, #25
 800560e:	d907      	bls.n	8005620 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8005610:	6a3b      	ldr	r3, [r7, #32]
 8005612:	f043 0320 	orr.w	r3, r3, #32
 8005616:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8005618:	2301      	movs	r3, #1
 800561a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 800561e:	e006      	b.n	800562e <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005620:	68fb      	ldr	r3, [r7, #12]
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	699b      	ldr	r3, [r3, #24]
 8005626:	f003 0320 	and.w	r3, r3, #32
 800562a:	2b20      	cmp	r3, #32
 800562c:	d1e9      	bne.n	8005602 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800562e:	68fb      	ldr	r3, [r7, #12]
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	699b      	ldr	r3, [r3, #24]
 8005634:	f003 0320 	and.w	r3, r3, #32
 8005638:	2b20      	cmp	r3, #32
 800563a:	d003      	beq.n	8005644 <I2C_IsErrorOccurred+0xe0>
 800563c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005640:	2b00      	cmp	r3, #0
 8005642:	d0aa      	beq.n	800559a <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8005644:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005648:	2b00      	cmp	r3, #0
 800564a:	d103      	bne.n	8005654 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800564c:	68fb      	ldr	r3, [r7, #12]
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	2220      	movs	r2, #32
 8005652:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8005654:	6a3b      	ldr	r3, [r7, #32]
 8005656:	f043 0304 	orr.w	r3, r3, #4
 800565a:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 800565c:	2301      	movs	r3, #1
 800565e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8005662:	68fb      	ldr	r3, [r7, #12]
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	699b      	ldr	r3, [r3, #24]
 8005668:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800566a:	69bb      	ldr	r3, [r7, #24]
 800566c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005670:	2b00      	cmp	r3, #0
 8005672:	d00b      	beq.n	800568c <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8005674:	6a3b      	ldr	r3, [r7, #32]
 8005676:	f043 0301 	orr.w	r3, r3, #1
 800567a:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800567c:	68fb      	ldr	r3, [r7, #12]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8005684:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8005686:	2301      	movs	r3, #1
 8005688:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 800568c:	69bb      	ldr	r3, [r7, #24]
 800568e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005692:	2b00      	cmp	r3, #0
 8005694:	d00b      	beq.n	80056ae <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8005696:	6a3b      	ldr	r3, [r7, #32]
 8005698:	f043 0308 	orr.w	r3, r3, #8
 800569c:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800569e:	68fb      	ldr	r3, [r7, #12]
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80056a6:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80056a8:	2301      	movs	r3, #1
 80056aa:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80056ae:	69bb      	ldr	r3, [r7, #24]
 80056b0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80056b4:	2b00      	cmp	r3, #0
 80056b6:	d00b      	beq.n	80056d0 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80056b8:	6a3b      	ldr	r3, [r7, #32]
 80056ba:	f043 0302 	orr.w	r3, r3, #2
 80056be:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80056c0:	68fb      	ldr	r3, [r7, #12]
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80056c8:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80056ca:	2301      	movs	r3, #1
 80056cc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 80056d0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80056d4:	2b00      	cmp	r3, #0
 80056d6:	d01c      	beq.n	8005712 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80056d8:	68f8      	ldr	r0, [r7, #12]
 80056da:	f7ff fe3b 	bl	8005354 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80056de:	68fb      	ldr	r3, [r7, #12]
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	6859      	ldr	r1, [r3, #4]
 80056e4:	68fb      	ldr	r3, [r7, #12]
 80056e6:	681a      	ldr	r2, [r3, #0]
 80056e8:	4b0d      	ldr	r3, [pc, #52]	@ (8005720 <I2C_IsErrorOccurred+0x1bc>)
 80056ea:	400b      	ands	r3, r1
 80056ec:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 80056ee:	68fb      	ldr	r3, [r7, #12]
 80056f0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80056f2:	6a3b      	ldr	r3, [r7, #32]
 80056f4:	431a      	orrs	r2, r3
 80056f6:	68fb      	ldr	r3, [r7, #12]
 80056f8:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80056fa:	68fb      	ldr	r3, [r7, #12]
 80056fc:	2220      	movs	r2, #32
 80056fe:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005702:	68fb      	ldr	r3, [r7, #12]
 8005704:	2200      	movs	r2, #0
 8005706:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800570a:	68fb      	ldr	r3, [r7, #12]
 800570c:	2200      	movs	r2, #0
 800570e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 8005712:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8005716:	4618      	mov	r0, r3
 8005718:	3728      	adds	r7, #40	@ 0x28
 800571a:	46bd      	mov	sp, r7
 800571c:	bd80      	pop	{r7, pc}
 800571e:	bf00      	nop
 8005720:	fe00e800 	.word	0xfe00e800

08005724 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8005724:	b480      	push	{r7}
 8005726:	b087      	sub	sp, #28
 8005728:	af00      	add	r7, sp, #0
 800572a:	60f8      	str	r0, [r7, #12]
 800572c:	607b      	str	r3, [r7, #4]
 800572e:	460b      	mov	r3, r1
 8005730:	817b      	strh	r3, [r7, #10]
 8005732:	4613      	mov	r3, r2
 8005734:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8005736:	897b      	ldrh	r3, [r7, #10]
 8005738:	f3c3 0209 	ubfx	r2, r3, #0, #10
                    (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800573c:	7a7b      	ldrb	r3, [r7, #9]
 800573e:	041b      	lsls	r3, r3, #16
 8005740:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8005744:	431a      	orrs	r2, r3
                    (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	431a      	orrs	r2, r3
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800574a:	6a3b      	ldr	r3, [r7, #32]
 800574c:	4313      	orrs	r3, r2
 800574e:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8005752:	617b      	str	r3, [r7, #20]
                    (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8005754:	68fb      	ldr	r3, [r7, #12]
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	685a      	ldr	r2, [r3, #4]
 800575a:	6a3b      	ldr	r3, [r7, #32]
 800575c:	0d5b      	lsrs	r3, r3, #21
 800575e:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8005762:	4b08      	ldr	r3, [pc, #32]	@ (8005784 <I2C_TransferConfig+0x60>)
 8005764:	430b      	orrs	r3, r1
 8005766:	43db      	mvns	r3, r3
 8005768:	ea02 0103 	and.w	r1, r2, r3
 800576c:	68fb      	ldr	r3, [r7, #12]
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	697a      	ldr	r2, [r7, #20]
 8005772:	430a      	orrs	r2, r1
 8005774:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8005776:	bf00      	nop
 8005778:	371c      	adds	r7, #28
 800577a:	46bd      	mov	sp, r7
 800577c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005780:	4770      	bx	lr
 8005782:	bf00      	nop
 8005784:	03ff63ff 	.word	0x03ff63ff

08005788 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8005788:	b480      	push	{r7}
 800578a:	b083      	sub	sp, #12
 800578c:	af00      	add	r7, sp, #0
 800578e:	6078      	str	r0, [r7, #4]
 8005790:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005798:	b2db      	uxtb	r3, r3
 800579a:	2b20      	cmp	r3, #32
 800579c:	d138      	bne.n	8005810 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80057a4:	2b01      	cmp	r3, #1
 80057a6:	d101      	bne.n	80057ac <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80057a8:	2302      	movs	r3, #2
 80057aa:	e032      	b.n	8005812 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	2201      	movs	r2, #1
 80057b0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	2224      	movs	r2, #36	@ 0x24
 80057b8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	681a      	ldr	r2, [r3, #0]
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	f022 0201 	bic.w	r2, r2, #1
 80057ca:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	681a      	ldr	r2, [r3, #0]
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80057da:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	6819      	ldr	r1, [r3, #0]
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	683a      	ldr	r2, [r7, #0]
 80057e8:	430a      	orrs	r2, r1
 80057ea:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	681a      	ldr	r2, [r3, #0]
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	f042 0201 	orr.w	r2, r2, #1
 80057fa:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	2220      	movs	r2, #32
 8005800:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	2200      	movs	r2, #0
 8005808:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800580c:	2300      	movs	r3, #0
 800580e:	e000      	b.n	8005812 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8005810:	2302      	movs	r3, #2
  }
}
 8005812:	4618      	mov	r0, r3
 8005814:	370c      	adds	r7, #12
 8005816:	46bd      	mov	sp, r7
 8005818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800581c:	4770      	bx	lr

0800581e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800581e:	b480      	push	{r7}
 8005820:	b085      	sub	sp, #20
 8005822:	af00      	add	r7, sp, #0
 8005824:	6078      	str	r0, [r7, #4]
 8005826:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800582e:	b2db      	uxtb	r3, r3
 8005830:	2b20      	cmp	r3, #32
 8005832:	d139      	bne.n	80058a8 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800583a:	2b01      	cmp	r3, #1
 800583c:	d101      	bne.n	8005842 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800583e:	2302      	movs	r3, #2
 8005840:	e033      	b.n	80058aa <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	2201      	movs	r2, #1
 8005846:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	2224      	movs	r2, #36	@ 0x24
 800584e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	681a      	ldr	r2, [r3, #0]
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	f022 0201 	bic.w	r2, r2, #1
 8005860:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800586a:	68fb      	ldr	r3, [r7, #12]
 800586c:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8005870:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8005872:	683b      	ldr	r3, [r7, #0]
 8005874:	021b      	lsls	r3, r3, #8
 8005876:	68fa      	ldr	r2, [r7, #12]
 8005878:	4313      	orrs	r3, r2
 800587a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	68fa      	ldr	r2, [r7, #12]
 8005882:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	681a      	ldr	r2, [r3, #0]
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	f042 0201 	orr.w	r2, r2, #1
 8005892:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	2220      	movs	r2, #32
 8005898:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	2200      	movs	r2, #0
 80058a0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80058a4:	2300      	movs	r3, #0
 80058a6:	e000      	b.n	80058aa <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80058a8:	2302      	movs	r3, #2
  }
}
 80058aa:	4618      	mov	r0, r3
 80058ac:	3714      	adds	r7, #20
 80058ae:	46bd      	mov	sp, r7
 80058b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058b4:	4770      	bx	lr
	...

080058b8 <HAL_PWREx_ConfigSupply>:
  *         process during startup.
  *         For more details, please refer to the power control chapter in the reference manual
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80058b8:	b580      	push	{r7, lr}
 80058ba:	b084      	sub	sp, #16
 80058bc:	af00      	add	r7, sp, #0
 80058be:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 80058c0:	4b19      	ldr	r3, [pc, #100]	@ (8005928 <HAL_PWREx_ConfigSupply+0x70>)
 80058c2:	68db      	ldr	r3, [r3, #12]
 80058c4:	f003 0304 	and.w	r3, r3, #4
 80058c8:	2b04      	cmp	r3, #4
 80058ca:	d00a      	beq.n	80058e2 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80058cc:	4b16      	ldr	r3, [pc, #88]	@ (8005928 <HAL_PWREx_ConfigSupply+0x70>)
 80058ce:	68db      	ldr	r3, [r3, #12]
 80058d0:	f003 0307 	and.w	r3, r3, #7
 80058d4:	687a      	ldr	r2, [r7, #4]
 80058d6:	429a      	cmp	r2, r3
 80058d8:	d001      	beq.n	80058de <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80058da:	2301      	movs	r3, #1
 80058dc:	e01f      	b.n	800591e <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80058de:	2300      	movs	r3, #0
 80058e0:	e01d      	b.n	800591e <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80058e2:	4b11      	ldr	r3, [pc, #68]	@ (8005928 <HAL_PWREx_ConfigSupply+0x70>)
 80058e4:	68db      	ldr	r3, [r3, #12]
 80058e6:	f023 0207 	bic.w	r2, r3, #7
 80058ea:	490f      	ldr	r1, [pc, #60]	@ (8005928 <HAL_PWREx_ConfigSupply+0x70>)
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	4313      	orrs	r3, r2
 80058f0:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 80058f2:	f7fe fe35 	bl	8004560 <HAL_GetTick>
 80058f6:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80058f8:	e009      	b.n	800590e <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80058fa:	f7fe fe31 	bl	8004560 <HAL_GetTick>
 80058fe:	4602      	mov	r2, r0
 8005900:	68fb      	ldr	r3, [r7, #12]
 8005902:	1ad3      	subs	r3, r2, r3
 8005904:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8005908:	d901      	bls.n	800590e <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800590a:	2301      	movs	r3, #1
 800590c:	e007      	b.n	800591e <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800590e:	4b06      	ldr	r3, [pc, #24]	@ (8005928 <HAL_PWREx_ConfigSupply+0x70>)
 8005910:	685b      	ldr	r3, [r3, #4]
 8005912:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005916:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800591a:	d1ee      	bne.n	80058fa <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 800591c:	2300      	movs	r3, #0
}
 800591e:	4618      	mov	r0, r3
 8005920:	3710      	adds	r7, #16
 8005922:	46bd      	mov	sp, r7
 8005924:	bd80      	pop	{r7, pc}
 8005926:	bf00      	nop
 8005928:	58024800 	.word	0x58024800

0800592c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800592c:	b580      	push	{r7, lr}
 800592e:	b08c      	sub	sp, #48	@ 0x30
 8005930:	af00      	add	r7, sp, #0
 8005932:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	2b00      	cmp	r3, #0
 8005938:	d102      	bne.n	8005940 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800593a:	2301      	movs	r3, #1
 800593c:	f000 bc48 	b.w	80061d0 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	f003 0301 	and.w	r3, r3, #1
 8005948:	2b00      	cmp	r3, #0
 800594a:	f000 8088 	beq.w	8005a5e <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800594e:	4b99      	ldr	r3, [pc, #612]	@ (8005bb4 <HAL_RCC_OscConfig+0x288>)
 8005950:	691b      	ldr	r3, [r3, #16]
 8005952:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005956:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8005958:	4b96      	ldr	r3, [pc, #600]	@ (8005bb4 <HAL_RCC_OscConfig+0x288>)
 800595a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800595c:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800595e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005960:	2b10      	cmp	r3, #16
 8005962:	d007      	beq.n	8005974 <HAL_RCC_OscConfig+0x48>
 8005964:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005966:	2b18      	cmp	r3, #24
 8005968:	d111      	bne.n	800598e <HAL_RCC_OscConfig+0x62>
 800596a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800596c:	f003 0303 	and.w	r3, r3, #3
 8005970:	2b02      	cmp	r3, #2
 8005972:	d10c      	bne.n	800598e <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005974:	4b8f      	ldr	r3, [pc, #572]	@ (8005bb4 <HAL_RCC_OscConfig+0x288>)
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800597c:	2b00      	cmp	r3, #0
 800597e:	d06d      	beq.n	8005a5c <HAL_RCC_OscConfig+0x130>
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	685b      	ldr	r3, [r3, #4]
 8005984:	2b00      	cmp	r3, #0
 8005986:	d169      	bne.n	8005a5c <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8005988:	2301      	movs	r3, #1
 800598a:	f000 bc21 	b.w	80061d0 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	685b      	ldr	r3, [r3, #4]
 8005992:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005996:	d106      	bne.n	80059a6 <HAL_RCC_OscConfig+0x7a>
 8005998:	4b86      	ldr	r3, [pc, #536]	@ (8005bb4 <HAL_RCC_OscConfig+0x288>)
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	4a85      	ldr	r2, [pc, #532]	@ (8005bb4 <HAL_RCC_OscConfig+0x288>)
 800599e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80059a2:	6013      	str	r3, [r2, #0]
 80059a4:	e02e      	b.n	8005a04 <HAL_RCC_OscConfig+0xd8>
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	685b      	ldr	r3, [r3, #4]
 80059aa:	2b00      	cmp	r3, #0
 80059ac:	d10c      	bne.n	80059c8 <HAL_RCC_OscConfig+0x9c>
 80059ae:	4b81      	ldr	r3, [pc, #516]	@ (8005bb4 <HAL_RCC_OscConfig+0x288>)
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	4a80      	ldr	r2, [pc, #512]	@ (8005bb4 <HAL_RCC_OscConfig+0x288>)
 80059b4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80059b8:	6013      	str	r3, [r2, #0]
 80059ba:	4b7e      	ldr	r3, [pc, #504]	@ (8005bb4 <HAL_RCC_OscConfig+0x288>)
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	4a7d      	ldr	r2, [pc, #500]	@ (8005bb4 <HAL_RCC_OscConfig+0x288>)
 80059c0:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80059c4:	6013      	str	r3, [r2, #0]
 80059c6:	e01d      	b.n	8005a04 <HAL_RCC_OscConfig+0xd8>
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	685b      	ldr	r3, [r3, #4]
 80059cc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80059d0:	d10c      	bne.n	80059ec <HAL_RCC_OscConfig+0xc0>
 80059d2:	4b78      	ldr	r3, [pc, #480]	@ (8005bb4 <HAL_RCC_OscConfig+0x288>)
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	4a77      	ldr	r2, [pc, #476]	@ (8005bb4 <HAL_RCC_OscConfig+0x288>)
 80059d8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80059dc:	6013      	str	r3, [r2, #0]
 80059de:	4b75      	ldr	r3, [pc, #468]	@ (8005bb4 <HAL_RCC_OscConfig+0x288>)
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	4a74      	ldr	r2, [pc, #464]	@ (8005bb4 <HAL_RCC_OscConfig+0x288>)
 80059e4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80059e8:	6013      	str	r3, [r2, #0]
 80059ea:	e00b      	b.n	8005a04 <HAL_RCC_OscConfig+0xd8>
 80059ec:	4b71      	ldr	r3, [pc, #452]	@ (8005bb4 <HAL_RCC_OscConfig+0x288>)
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	4a70      	ldr	r2, [pc, #448]	@ (8005bb4 <HAL_RCC_OscConfig+0x288>)
 80059f2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80059f6:	6013      	str	r3, [r2, #0]
 80059f8:	4b6e      	ldr	r3, [pc, #440]	@ (8005bb4 <HAL_RCC_OscConfig+0x288>)
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	4a6d      	ldr	r2, [pc, #436]	@ (8005bb4 <HAL_RCC_OscConfig+0x288>)
 80059fe:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005a02:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	685b      	ldr	r3, [r3, #4]
 8005a08:	2b00      	cmp	r3, #0
 8005a0a:	d013      	beq.n	8005a34 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005a0c:	f7fe fda8 	bl	8004560 <HAL_GetTick>
 8005a10:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005a12:	e008      	b.n	8005a26 <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005a14:	f7fe fda4 	bl	8004560 <HAL_GetTick>
 8005a18:	4602      	mov	r2, r0
 8005a1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a1c:	1ad3      	subs	r3, r2, r3
 8005a1e:	2b64      	cmp	r3, #100	@ 0x64
 8005a20:	d901      	bls.n	8005a26 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005a22:	2303      	movs	r3, #3
 8005a24:	e3d4      	b.n	80061d0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005a26:	4b63      	ldr	r3, [pc, #396]	@ (8005bb4 <HAL_RCC_OscConfig+0x288>)
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005a2e:	2b00      	cmp	r3, #0
 8005a30:	d0f0      	beq.n	8005a14 <HAL_RCC_OscConfig+0xe8>
 8005a32:	e014      	b.n	8005a5e <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005a34:	f7fe fd94 	bl	8004560 <HAL_GetTick>
 8005a38:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8005a3a:	e008      	b.n	8005a4e <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005a3c:	f7fe fd90 	bl	8004560 <HAL_GetTick>
 8005a40:	4602      	mov	r2, r0
 8005a42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a44:	1ad3      	subs	r3, r2, r3
 8005a46:	2b64      	cmp	r3, #100	@ 0x64
 8005a48:	d901      	bls.n	8005a4e <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8005a4a:	2303      	movs	r3, #3
 8005a4c:	e3c0      	b.n	80061d0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8005a4e:	4b59      	ldr	r3, [pc, #356]	@ (8005bb4 <HAL_RCC_OscConfig+0x288>)
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005a56:	2b00      	cmp	r3, #0
 8005a58:	d1f0      	bne.n	8005a3c <HAL_RCC_OscConfig+0x110>
 8005a5a:	e000      	b.n	8005a5e <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005a5c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	f003 0302 	and.w	r3, r3, #2
 8005a66:	2b00      	cmp	r3, #0
 8005a68:	f000 80ca 	beq.w	8005c00 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005a6c:	4b51      	ldr	r3, [pc, #324]	@ (8005bb4 <HAL_RCC_OscConfig+0x288>)
 8005a6e:	691b      	ldr	r3, [r3, #16]
 8005a70:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005a74:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8005a76:	4b4f      	ldr	r3, [pc, #316]	@ (8005bb4 <HAL_RCC_OscConfig+0x288>)
 8005a78:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005a7a:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8005a7c:	6a3b      	ldr	r3, [r7, #32]
 8005a7e:	2b00      	cmp	r3, #0
 8005a80:	d007      	beq.n	8005a92 <HAL_RCC_OscConfig+0x166>
 8005a82:	6a3b      	ldr	r3, [r7, #32]
 8005a84:	2b18      	cmp	r3, #24
 8005a86:	d156      	bne.n	8005b36 <HAL_RCC_OscConfig+0x20a>
 8005a88:	69fb      	ldr	r3, [r7, #28]
 8005a8a:	f003 0303 	and.w	r3, r3, #3
 8005a8e:	2b00      	cmp	r3, #0
 8005a90:	d151      	bne.n	8005b36 <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005a92:	4b48      	ldr	r3, [pc, #288]	@ (8005bb4 <HAL_RCC_OscConfig+0x288>)
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	f003 0304 	and.w	r3, r3, #4
 8005a9a:	2b00      	cmp	r3, #0
 8005a9c:	d005      	beq.n	8005aaa <HAL_RCC_OscConfig+0x17e>
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	68db      	ldr	r3, [r3, #12]
 8005aa2:	2b00      	cmp	r3, #0
 8005aa4:	d101      	bne.n	8005aaa <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8005aa6:	2301      	movs	r3, #1
 8005aa8:	e392      	b.n	80061d0 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8005aaa:	4b42      	ldr	r3, [pc, #264]	@ (8005bb4 <HAL_RCC_OscConfig+0x288>)
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	f023 0219 	bic.w	r2, r3, #25
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	68db      	ldr	r3, [r3, #12]
 8005ab6:	493f      	ldr	r1, [pc, #252]	@ (8005bb4 <HAL_RCC_OscConfig+0x288>)
 8005ab8:	4313      	orrs	r3, r2
 8005aba:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005abc:	f7fe fd50 	bl	8004560 <HAL_GetTick>
 8005ac0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005ac2:	e008      	b.n	8005ad6 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005ac4:	f7fe fd4c 	bl	8004560 <HAL_GetTick>
 8005ac8:	4602      	mov	r2, r0
 8005aca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005acc:	1ad3      	subs	r3, r2, r3
 8005ace:	2b02      	cmp	r3, #2
 8005ad0:	d901      	bls.n	8005ad6 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8005ad2:	2303      	movs	r3, #3
 8005ad4:	e37c      	b.n	80061d0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005ad6:	4b37      	ldr	r3, [pc, #220]	@ (8005bb4 <HAL_RCC_OscConfig+0x288>)
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	f003 0304 	and.w	r3, r3, #4
 8005ade:	2b00      	cmp	r3, #0
 8005ae0:	d0f0      	beq.n	8005ac4 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005ae2:	f7fe fd6d 	bl	80045c0 <HAL_GetREVID>
 8005ae6:	4603      	mov	r3, r0
 8005ae8:	f241 0203 	movw	r2, #4099	@ 0x1003
 8005aec:	4293      	cmp	r3, r2
 8005aee:	d817      	bhi.n	8005b20 <HAL_RCC_OscConfig+0x1f4>
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	691b      	ldr	r3, [r3, #16]
 8005af4:	2b40      	cmp	r3, #64	@ 0x40
 8005af6:	d108      	bne.n	8005b0a <HAL_RCC_OscConfig+0x1de>
 8005af8:	4b2e      	ldr	r3, [pc, #184]	@ (8005bb4 <HAL_RCC_OscConfig+0x288>)
 8005afa:	685b      	ldr	r3, [r3, #4]
 8005afc:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8005b00:	4a2c      	ldr	r2, [pc, #176]	@ (8005bb4 <HAL_RCC_OscConfig+0x288>)
 8005b02:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005b06:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005b08:	e07a      	b.n	8005c00 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005b0a:	4b2a      	ldr	r3, [pc, #168]	@ (8005bb4 <HAL_RCC_OscConfig+0x288>)
 8005b0c:	685b      	ldr	r3, [r3, #4]
 8005b0e:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	691b      	ldr	r3, [r3, #16]
 8005b16:	031b      	lsls	r3, r3, #12
 8005b18:	4926      	ldr	r1, [pc, #152]	@ (8005bb4 <HAL_RCC_OscConfig+0x288>)
 8005b1a:	4313      	orrs	r3, r2
 8005b1c:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005b1e:	e06f      	b.n	8005c00 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005b20:	4b24      	ldr	r3, [pc, #144]	@ (8005bb4 <HAL_RCC_OscConfig+0x288>)
 8005b22:	685b      	ldr	r3, [r3, #4]
 8005b24:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	691b      	ldr	r3, [r3, #16]
 8005b2c:	061b      	lsls	r3, r3, #24
 8005b2e:	4921      	ldr	r1, [pc, #132]	@ (8005bb4 <HAL_RCC_OscConfig+0x288>)
 8005b30:	4313      	orrs	r3, r2
 8005b32:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005b34:	e064      	b.n	8005c00 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	68db      	ldr	r3, [r3, #12]
 8005b3a:	2b00      	cmp	r3, #0
 8005b3c:	d047      	beq.n	8005bce <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8005b3e:	4b1d      	ldr	r3, [pc, #116]	@ (8005bb4 <HAL_RCC_OscConfig+0x288>)
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	f023 0219 	bic.w	r2, r3, #25
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	68db      	ldr	r3, [r3, #12]
 8005b4a:	491a      	ldr	r1, [pc, #104]	@ (8005bb4 <HAL_RCC_OscConfig+0x288>)
 8005b4c:	4313      	orrs	r3, r2
 8005b4e:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005b50:	f7fe fd06 	bl	8004560 <HAL_GetTick>
 8005b54:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005b56:	e008      	b.n	8005b6a <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005b58:	f7fe fd02 	bl	8004560 <HAL_GetTick>
 8005b5c:	4602      	mov	r2, r0
 8005b5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b60:	1ad3      	subs	r3, r2, r3
 8005b62:	2b02      	cmp	r3, #2
 8005b64:	d901      	bls.n	8005b6a <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8005b66:	2303      	movs	r3, #3
 8005b68:	e332      	b.n	80061d0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005b6a:	4b12      	ldr	r3, [pc, #72]	@ (8005bb4 <HAL_RCC_OscConfig+0x288>)
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	f003 0304 	and.w	r3, r3, #4
 8005b72:	2b00      	cmp	r3, #0
 8005b74:	d0f0      	beq.n	8005b58 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005b76:	f7fe fd23 	bl	80045c0 <HAL_GetREVID>
 8005b7a:	4603      	mov	r3, r0
 8005b7c:	f241 0203 	movw	r2, #4099	@ 0x1003
 8005b80:	4293      	cmp	r3, r2
 8005b82:	d819      	bhi.n	8005bb8 <HAL_RCC_OscConfig+0x28c>
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	691b      	ldr	r3, [r3, #16]
 8005b88:	2b40      	cmp	r3, #64	@ 0x40
 8005b8a:	d108      	bne.n	8005b9e <HAL_RCC_OscConfig+0x272>
 8005b8c:	4b09      	ldr	r3, [pc, #36]	@ (8005bb4 <HAL_RCC_OscConfig+0x288>)
 8005b8e:	685b      	ldr	r3, [r3, #4]
 8005b90:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8005b94:	4a07      	ldr	r2, [pc, #28]	@ (8005bb4 <HAL_RCC_OscConfig+0x288>)
 8005b96:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005b9a:	6053      	str	r3, [r2, #4]
 8005b9c:	e030      	b.n	8005c00 <HAL_RCC_OscConfig+0x2d4>
 8005b9e:	4b05      	ldr	r3, [pc, #20]	@ (8005bb4 <HAL_RCC_OscConfig+0x288>)
 8005ba0:	685b      	ldr	r3, [r3, #4]
 8005ba2:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	691b      	ldr	r3, [r3, #16]
 8005baa:	031b      	lsls	r3, r3, #12
 8005bac:	4901      	ldr	r1, [pc, #4]	@ (8005bb4 <HAL_RCC_OscConfig+0x288>)
 8005bae:	4313      	orrs	r3, r2
 8005bb0:	604b      	str	r3, [r1, #4]
 8005bb2:	e025      	b.n	8005c00 <HAL_RCC_OscConfig+0x2d4>
 8005bb4:	58024400 	.word	0x58024400
 8005bb8:	4b9a      	ldr	r3, [pc, #616]	@ (8005e24 <HAL_RCC_OscConfig+0x4f8>)
 8005bba:	685b      	ldr	r3, [r3, #4]
 8005bbc:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	691b      	ldr	r3, [r3, #16]
 8005bc4:	061b      	lsls	r3, r3, #24
 8005bc6:	4997      	ldr	r1, [pc, #604]	@ (8005e24 <HAL_RCC_OscConfig+0x4f8>)
 8005bc8:	4313      	orrs	r3, r2
 8005bca:	604b      	str	r3, [r1, #4]
 8005bcc:	e018      	b.n	8005c00 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005bce:	4b95      	ldr	r3, [pc, #596]	@ (8005e24 <HAL_RCC_OscConfig+0x4f8>)
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	4a94      	ldr	r2, [pc, #592]	@ (8005e24 <HAL_RCC_OscConfig+0x4f8>)
 8005bd4:	f023 0301 	bic.w	r3, r3, #1
 8005bd8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005bda:	f7fe fcc1 	bl	8004560 <HAL_GetTick>
 8005bde:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8005be0:	e008      	b.n	8005bf4 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005be2:	f7fe fcbd 	bl	8004560 <HAL_GetTick>
 8005be6:	4602      	mov	r2, r0
 8005be8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005bea:	1ad3      	subs	r3, r2, r3
 8005bec:	2b02      	cmp	r3, #2
 8005bee:	d901      	bls.n	8005bf4 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8005bf0:	2303      	movs	r3, #3
 8005bf2:	e2ed      	b.n	80061d0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8005bf4:	4b8b      	ldr	r3, [pc, #556]	@ (8005e24 <HAL_RCC_OscConfig+0x4f8>)
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	f003 0304 	and.w	r3, r3, #4
 8005bfc:	2b00      	cmp	r3, #0
 8005bfe:	d1f0      	bne.n	8005be2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	f003 0310 	and.w	r3, r3, #16
 8005c08:	2b00      	cmp	r3, #0
 8005c0a:	f000 80a9 	beq.w	8005d60 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005c0e:	4b85      	ldr	r3, [pc, #532]	@ (8005e24 <HAL_RCC_OscConfig+0x4f8>)
 8005c10:	691b      	ldr	r3, [r3, #16]
 8005c12:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005c16:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8005c18:	4b82      	ldr	r3, [pc, #520]	@ (8005e24 <HAL_RCC_OscConfig+0x4f8>)
 8005c1a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005c1c:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8005c1e:	69bb      	ldr	r3, [r7, #24]
 8005c20:	2b08      	cmp	r3, #8
 8005c22:	d007      	beq.n	8005c34 <HAL_RCC_OscConfig+0x308>
 8005c24:	69bb      	ldr	r3, [r7, #24]
 8005c26:	2b18      	cmp	r3, #24
 8005c28:	d13a      	bne.n	8005ca0 <HAL_RCC_OscConfig+0x374>
 8005c2a:	697b      	ldr	r3, [r7, #20]
 8005c2c:	f003 0303 	and.w	r3, r3, #3
 8005c30:	2b01      	cmp	r3, #1
 8005c32:	d135      	bne.n	8005ca0 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8005c34:	4b7b      	ldr	r3, [pc, #492]	@ (8005e24 <HAL_RCC_OscConfig+0x4f8>)
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005c3c:	2b00      	cmp	r3, #0
 8005c3e:	d005      	beq.n	8005c4c <HAL_RCC_OscConfig+0x320>
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	69db      	ldr	r3, [r3, #28]
 8005c44:	2b80      	cmp	r3, #128	@ 0x80
 8005c46:	d001      	beq.n	8005c4c <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8005c48:	2301      	movs	r3, #1
 8005c4a:	e2c1      	b.n	80061d0 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8005c4c:	f7fe fcb8 	bl	80045c0 <HAL_GetREVID>
 8005c50:	4603      	mov	r3, r0
 8005c52:	f241 0203 	movw	r2, #4099	@ 0x1003
 8005c56:	4293      	cmp	r3, r2
 8005c58:	d817      	bhi.n	8005c8a <HAL_RCC_OscConfig+0x35e>
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	6a1b      	ldr	r3, [r3, #32]
 8005c5e:	2b20      	cmp	r3, #32
 8005c60:	d108      	bne.n	8005c74 <HAL_RCC_OscConfig+0x348>
 8005c62:	4b70      	ldr	r3, [pc, #448]	@ (8005e24 <HAL_RCC_OscConfig+0x4f8>)
 8005c64:	685b      	ldr	r3, [r3, #4]
 8005c66:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8005c6a:	4a6e      	ldr	r2, [pc, #440]	@ (8005e24 <HAL_RCC_OscConfig+0x4f8>)
 8005c6c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8005c70:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8005c72:	e075      	b.n	8005d60 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8005c74:	4b6b      	ldr	r3, [pc, #428]	@ (8005e24 <HAL_RCC_OscConfig+0x4f8>)
 8005c76:	685b      	ldr	r3, [r3, #4]
 8005c78:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	6a1b      	ldr	r3, [r3, #32]
 8005c80:	069b      	lsls	r3, r3, #26
 8005c82:	4968      	ldr	r1, [pc, #416]	@ (8005e24 <HAL_RCC_OscConfig+0x4f8>)
 8005c84:	4313      	orrs	r3, r2
 8005c86:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8005c88:	e06a      	b.n	8005d60 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8005c8a:	4b66      	ldr	r3, [pc, #408]	@ (8005e24 <HAL_RCC_OscConfig+0x4f8>)
 8005c8c:	68db      	ldr	r3, [r3, #12]
 8005c8e:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	6a1b      	ldr	r3, [r3, #32]
 8005c96:	061b      	lsls	r3, r3, #24
 8005c98:	4962      	ldr	r1, [pc, #392]	@ (8005e24 <HAL_RCC_OscConfig+0x4f8>)
 8005c9a:	4313      	orrs	r3, r2
 8005c9c:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8005c9e:	e05f      	b.n	8005d60 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	69db      	ldr	r3, [r3, #28]
 8005ca4:	2b00      	cmp	r3, #0
 8005ca6:	d042      	beq.n	8005d2e <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8005ca8:	4b5e      	ldr	r3, [pc, #376]	@ (8005e24 <HAL_RCC_OscConfig+0x4f8>)
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	4a5d      	ldr	r2, [pc, #372]	@ (8005e24 <HAL_RCC_OscConfig+0x4f8>)
 8005cae:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005cb2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005cb4:	f7fe fc54 	bl	8004560 <HAL_GetTick>
 8005cb8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8005cba:	e008      	b.n	8005cce <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8005cbc:	f7fe fc50 	bl	8004560 <HAL_GetTick>
 8005cc0:	4602      	mov	r2, r0
 8005cc2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005cc4:	1ad3      	subs	r3, r2, r3
 8005cc6:	2b02      	cmp	r3, #2
 8005cc8:	d901      	bls.n	8005cce <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8005cca:	2303      	movs	r3, #3
 8005ccc:	e280      	b.n	80061d0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8005cce:	4b55      	ldr	r3, [pc, #340]	@ (8005e24 <HAL_RCC_OscConfig+0x4f8>)
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005cd6:	2b00      	cmp	r3, #0
 8005cd8:	d0f0      	beq.n	8005cbc <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8005cda:	f7fe fc71 	bl	80045c0 <HAL_GetREVID>
 8005cde:	4603      	mov	r3, r0
 8005ce0:	f241 0203 	movw	r2, #4099	@ 0x1003
 8005ce4:	4293      	cmp	r3, r2
 8005ce6:	d817      	bhi.n	8005d18 <HAL_RCC_OscConfig+0x3ec>
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	6a1b      	ldr	r3, [r3, #32]
 8005cec:	2b20      	cmp	r3, #32
 8005cee:	d108      	bne.n	8005d02 <HAL_RCC_OscConfig+0x3d6>
 8005cf0:	4b4c      	ldr	r3, [pc, #304]	@ (8005e24 <HAL_RCC_OscConfig+0x4f8>)
 8005cf2:	685b      	ldr	r3, [r3, #4]
 8005cf4:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8005cf8:	4a4a      	ldr	r2, [pc, #296]	@ (8005e24 <HAL_RCC_OscConfig+0x4f8>)
 8005cfa:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8005cfe:	6053      	str	r3, [r2, #4]
 8005d00:	e02e      	b.n	8005d60 <HAL_RCC_OscConfig+0x434>
 8005d02:	4b48      	ldr	r3, [pc, #288]	@ (8005e24 <HAL_RCC_OscConfig+0x4f8>)
 8005d04:	685b      	ldr	r3, [r3, #4]
 8005d06:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	6a1b      	ldr	r3, [r3, #32]
 8005d0e:	069b      	lsls	r3, r3, #26
 8005d10:	4944      	ldr	r1, [pc, #272]	@ (8005e24 <HAL_RCC_OscConfig+0x4f8>)
 8005d12:	4313      	orrs	r3, r2
 8005d14:	604b      	str	r3, [r1, #4]
 8005d16:	e023      	b.n	8005d60 <HAL_RCC_OscConfig+0x434>
 8005d18:	4b42      	ldr	r3, [pc, #264]	@ (8005e24 <HAL_RCC_OscConfig+0x4f8>)
 8005d1a:	68db      	ldr	r3, [r3, #12]
 8005d1c:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	6a1b      	ldr	r3, [r3, #32]
 8005d24:	061b      	lsls	r3, r3, #24
 8005d26:	493f      	ldr	r1, [pc, #252]	@ (8005e24 <HAL_RCC_OscConfig+0x4f8>)
 8005d28:	4313      	orrs	r3, r2
 8005d2a:	60cb      	str	r3, [r1, #12]
 8005d2c:	e018      	b.n	8005d60 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8005d2e:	4b3d      	ldr	r3, [pc, #244]	@ (8005e24 <HAL_RCC_OscConfig+0x4f8>)
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	4a3c      	ldr	r2, [pc, #240]	@ (8005e24 <HAL_RCC_OscConfig+0x4f8>)
 8005d34:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005d38:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005d3a:	f7fe fc11 	bl	8004560 <HAL_GetTick>
 8005d3e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8005d40:	e008      	b.n	8005d54 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8005d42:	f7fe fc0d 	bl	8004560 <HAL_GetTick>
 8005d46:	4602      	mov	r2, r0
 8005d48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d4a:	1ad3      	subs	r3, r2, r3
 8005d4c:	2b02      	cmp	r3, #2
 8005d4e:	d901      	bls.n	8005d54 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8005d50:	2303      	movs	r3, #3
 8005d52:	e23d      	b.n	80061d0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8005d54:	4b33      	ldr	r3, [pc, #204]	@ (8005e24 <HAL_RCC_OscConfig+0x4f8>)
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005d5c:	2b00      	cmp	r3, #0
 8005d5e:	d1f0      	bne.n	8005d42 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	f003 0308 	and.w	r3, r3, #8
 8005d68:	2b00      	cmp	r3, #0
 8005d6a:	d036      	beq.n	8005dda <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	695b      	ldr	r3, [r3, #20]
 8005d70:	2b00      	cmp	r3, #0
 8005d72:	d019      	beq.n	8005da8 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005d74:	4b2b      	ldr	r3, [pc, #172]	@ (8005e24 <HAL_RCC_OscConfig+0x4f8>)
 8005d76:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005d78:	4a2a      	ldr	r2, [pc, #168]	@ (8005e24 <HAL_RCC_OscConfig+0x4f8>)
 8005d7a:	f043 0301 	orr.w	r3, r3, #1
 8005d7e:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005d80:	f7fe fbee 	bl	8004560 <HAL_GetTick>
 8005d84:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8005d86:	e008      	b.n	8005d9a <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005d88:	f7fe fbea 	bl	8004560 <HAL_GetTick>
 8005d8c:	4602      	mov	r2, r0
 8005d8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d90:	1ad3      	subs	r3, r2, r3
 8005d92:	2b02      	cmp	r3, #2
 8005d94:	d901      	bls.n	8005d9a <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8005d96:	2303      	movs	r3, #3
 8005d98:	e21a      	b.n	80061d0 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8005d9a:	4b22      	ldr	r3, [pc, #136]	@ (8005e24 <HAL_RCC_OscConfig+0x4f8>)
 8005d9c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005d9e:	f003 0302 	and.w	r3, r3, #2
 8005da2:	2b00      	cmp	r3, #0
 8005da4:	d0f0      	beq.n	8005d88 <HAL_RCC_OscConfig+0x45c>
 8005da6:	e018      	b.n	8005dda <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005da8:	4b1e      	ldr	r3, [pc, #120]	@ (8005e24 <HAL_RCC_OscConfig+0x4f8>)
 8005daa:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005dac:	4a1d      	ldr	r2, [pc, #116]	@ (8005e24 <HAL_RCC_OscConfig+0x4f8>)
 8005dae:	f023 0301 	bic.w	r3, r3, #1
 8005db2:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005db4:	f7fe fbd4 	bl	8004560 <HAL_GetTick>
 8005db8:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8005dba:	e008      	b.n	8005dce <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005dbc:	f7fe fbd0 	bl	8004560 <HAL_GetTick>
 8005dc0:	4602      	mov	r2, r0
 8005dc2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005dc4:	1ad3      	subs	r3, r2, r3
 8005dc6:	2b02      	cmp	r3, #2
 8005dc8:	d901      	bls.n	8005dce <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8005dca:	2303      	movs	r3, #3
 8005dcc:	e200      	b.n	80061d0 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8005dce:	4b15      	ldr	r3, [pc, #84]	@ (8005e24 <HAL_RCC_OscConfig+0x4f8>)
 8005dd0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005dd2:	f003 0302 	and.w	r3, r3, #2
 8005dd6:	2b00      	cmp	r3, #0
 8005dd8:	d1f0      	bne.n	8005dbc <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	f003 0320 	and.w	r3, r3, #32
 8005de2:	2b00      	cmp	r3, #0
 8005de4:	d039      	beq.n	8005e5a <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	699b      	ldr	r3, [r3, #24]
 8005dea:	2b00      	cmp	r3, #0
 8005dec:	d01c      	beq.n	8005e28 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8005dee:	4b0d      	ldr	r3, [pc, #52]	@ (8005e24 <HAL_RCC_OscConfig+0x4f8>)
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	4a0c      	ldr	r2, [pc, #48]	@ (8005e24 <HAL_RCC_OscConfig+0x4f8>)
 8005df4:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8005df8:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8005dfa:	f7fe fbb1 	bl	8004560 <HAL_GetTick>
 8005dfe:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8005e00:	e008      	b.n	8005e14 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005e02:	f7fe fbad 	bl	8004560 <HAL_GetTick>
 8005e06:	4602      	mov	r2, r0
 8005e08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e0a:	1ad3      	subs	r3, r2, r3
 8005e0c:	2b02      	cmp	r3, #2
 8005e0e:	d901      	bls.n	8005e14 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8005e10:	2303      	movs	r3, #3
 8005e12:	e1dd      	b.n	80061d0 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8005e14:	4b03      	ldr	r3, [pc, #12]	@ (8005e24 <HAL_RCC_OscConfig+0x4f8>)
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005e1c:	2b00      	cmp	r3, #0
 8005e1e:	d0f0      	beq.n	8005e02 <HAL_RCC_OscConfig+0x4d6>
 8005e20:	e01b      	b.n	8005e5a <HAL_RCC_OscConfig+0x52e>
 8005e22:	bf00      	nop
 8005e24:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8005e28:	4b9b      	ldr	r3, [pc, #620]	@ (8006098 <HAL_RCC_OscConfig+0x76c>)
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	4a9a      	ldr	r2, [pc, #616]	@ (8006098 <HAL_RCC_OscConfig+0x76c>)
 8005e2e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005e32:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8005e34:	f7fe fb94 	bl	8004560 <HAL_GetTick>
 8005e38:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8005e3a:	e008      	b.n	8005e4e <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005e3c:	f7fe fb90 	bl	8004560 <HAL_GetTick>
 8005e40:	4602      	mov	r2, r0
 8005e42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e44:	1ad3      	subs	r3, r2, r3
 8005e46:	2b02      	cmp	r3, #2
 8005e48:	d901      	bls.n	8005e4e <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8005e4a:	2303      	movs	r3, #3
 8005e4c:	e1c0      	b.n	80061d0 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8005e4e:	4b92      	ldr	r3, [pc, #584]	@ (8006098 <HAL_RCC_OscConfig+0x76c>)
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005e56:	2b00      	cmp	r3, #0
 8005e58:	d1f0      	bne.n	8005e3c <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	f003 0304 	and.w	r3, r3, #4
 8005e62:	2b00      	cmp	r3, #0
 8005e64:	f000 8081 	beq.w	8005f6a <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8005e68:	4b8c      	ldr	r3, [pc, #560]	@ (800609c <HAL_RCC_OscConfig+0x770>)
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	4a8b      	ldr	r2, [pc, #556]	@ (800609c <HAL_RCC_OscConfig+0x770>)
 8005e6e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005e72:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005e74:	f7fe fb74 	bl	8004560 <HAL_GetTick>
 8005e78:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005e7a:	e008      	b.n	8005e8e <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005e7c:	f7fe fb70 	bl	8004560 <HAL_GetTick>
 8005e80:	4602      	mov	r2, r0
 8005e82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e84:	1ad3      	subs	r3, r2, r3
 8005e86:	2b64      	cmp	r3, #100	@ 0x64
 8005e88:	d901      	bls.n	8005e8e <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8005e8a:	2303      	movs	r3, #3
 8005e8c:	e1a0      	b.n	80061d0 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005e8e:	4b83      	ldr	r3, [pc, #524]	@ (800609c <HAL_RCC_OscConfig+0x770>)
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005e96:	2b00      	cmp	r3, #0
 8005e98:	d0f0      	beq.n	8005e7c <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	689b      	ldr	r3, [r3, #8]
 8005e9e:	2b01      	cmp	r3, #1
 8005ea0:	d106      	bne.n	8005eb0 <HAL_RCC_OscConfig+0x584>
 8005ea2:	4b7d      	ldr	r3, [pc, #500]	@ (8006098 <HAL_RCC_OscConfig+0x76c>)
 8005ea4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005ea6:	4a7c      	ldr	r2, [pc, #496]	@ (8006098 <HAL_RCC_OscConfig+0x76c>)
 8005ea8:	f043 0301 	orr.w	r3, r3, #1
 8005eac:	6713      	str	r3, [r2, #112]	@ 0x70
 8005eae:	e02d      	b.n	8005f0c <HAL_RCC_OscConfig+0x5e0>
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	689b      	ldr	r3, [r3, #8]
 8005eb4:	2b00      	cmp	r3, #0
 8005eb6:	d10c      	bne.n	8005ed2 <HAL_RCC_OscConfig+0x5a6>
 8005eb8:	4b77      	ldr	r3, [pc, #476]	@ (8006098 <HAL_RCC_OscConfig+0x76c>)
 8005eba:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005ebc:	4a76      	ldr	r2, [pc, #472]	@ (8006098 <HAL_RCC_OscConfig+0x76c>)
 8005ebe:	f023 0301 	bic.w	r3, r3, #1
 8005ec2:	6713      	str	r3, [r2, #112]	@ 0x70
 8005ec4:	4b74      	ldr	r3, [pc, #464]	@ (8006098 <HAL_RCC_OscConfig+0x76c>)
 8005ec6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005ec8:	4a73      	ldr	r2, [pc, #460]	@ (8006098 <HAL_RCC_OscConfig+0x76c>)
 8005eca:	f023 0304 	bic.w	r3, r3, #4
 8005ece:	6713      	str	r3, [r2, #112]	@ 0x70
 8005ed0:	e01c      	b.n	8005f0c <HAL_RCC_OscConfig+0x5e0>
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	689b      	ldr	r3, [r3, #8]
 8005ed6:	2b05      	cmp	r3, #5
 8005ed8:	d10c      	bne.n	8005ef4 <HAL_RCC_OscConfig+0x5c8>
 8005eda:	4b6f      	ldr	r3, [pc, #444]	@ (8006098 <HAL_RCC_OscConfig+0x76c>)
 8005edc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005ede:	4a6e      	ldr	r2, [pc, #440]	@ (8006098 <HAL_RCC_OscConfig+0x76c>)
 8005ee0:	f043 0304 	orr.w	r3, r3, #4
 8005ee4:	6713      	str	r3, [r2, #112]	@ 0x70
 8005ee6:	4b6c      	ldr	r3, [pc, #432]	@ (8006098 <HAL_RCC_OscConfig+0x76c>)
 8005ee8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005eea:	4a6b      	ldr	r2, [pc, #428]	@ (8006098 <HAL_RCC_OscConfig+0x76c>)
 8005eec:	f043 0301 	orr.w	r3, r3, #1
 8005ef0:	6713      	str	r3, [r2, #112]	@ 0x70
 8005ef2:	e00b      	b.n	8005f0c <HAL_RCC_OscConfig+0x5e0>
 8005ef4:	4b68      	ldr	r3, [pc, #416]	@ (8006098 <HAL_RCC_OscConfig+0x76c>)
 8005ef6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005ef8:	4a67      	ldr	r2, [pc, #412]	@ (8006098 <HAL_RCC_OscConfig+0x76c>)
 8005efa:	f023 0301 	bic.w	r3, r3, #1
 8005efe:	6713      	str	r3, [r2, #112]	@ 0x70
 8005f00:	4b65      	ldr	r3, [pc, #404]	@ (8006098 <HAL_RCC_OscConfig+0x76c>)
 8005f02:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005f04:	4a64      	ldr	r2, [pc, #400]	@ (8006098 <HAL_RCC_OscConfig+0x76c>)
 8005f06:	f023 0304 	bic.w	r3, r3, #4
 8005f0a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	689b      	ldr	r3, [r3, #8]
 8005f10:	2b00      	cmp	r3, #0
 8005f12:	d015      	beq.n	8005f40 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005f14:	f7fe fb24 	bl	8004560 <HAL_GetTick>
 8005f18:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005f1a:	e00a      	b.n	8005f32 <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005f1c:	f7fe fb20 	bl	8004560 <HAL_GetTick>
 8005f20:	4602      	mov	r2, r0
 8005f22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f24:	1ad3      	subs	r3, r2, r3
 8005f26:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005f2a:	4293      	cmp	r3, r2
 8005f2c:	d901      	bls.n	8005f32 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8005f2e:	2303      	movs	r3, #3
 8005f30:	e14e      	b.n	80061d0 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005f32:	4b59      	ldr	r3, [pc, #356]	@ (8006098 <HAL_RCC_OscConfig+0x76c>)
 8005f34:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005f36:	f003 0302 	and.w	r3, r3, #2
 8005f3a:	2b00      	cmp	r3, #0
 8005f3c:	d0ee      	beq.n	8005f1c <HAL_RCC_OscConfig+0x5f0>
 8005f3e:	e014      	b.n	8005f6a <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005f40:	f7fe fb0e 	bl	8004560 <HAL_GetTick>
 8005f44:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8005f46:	e00a      	b.n	8005f5e <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005f48:	f7fe fb0a 	bl	8004560 <HAL_GetTick>
 8005f4c:	4602      	mov	r2, r0
 8005f4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f50:	1ad3      	subs	r3, r2, r3
 8005f52:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005f56:	4293      	cmp	r3, r2
 8005f58:	d901      	bls.n	8005f5e <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8005f5a:	2303      	movs	r3, #3
 8005f5c:	e138      	b.n	80061d0 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8005f5e:	4b4e      	ldr	r3, [pc, #312]	@ (8006098 <HAL_RCC_OscConfig+0x76c>)
 8005f60:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005f62:	f003 0302 	and.w	r3, r3, #2
 8005f66:	2b00      	cmp	r3, #0
 8005f68:	d1ee      	bne.n	8005f48 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005f6e:	2b00      	cmp	r3, #0
 8005f70:	f000 812d 	beq.w	80061ce <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8005f74:	4b48      	ldr	r3, [pc, #288]	@ (8006098 <HAL_RCC_OscConfig+0x76c>)
 8005f76:	691b      	ldr	r3, [r3, #16]
 8005f78:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005f7c:	2b18      	cmp	r3, #24
 8005f7e:	f000 80bd 	beq.w	80060fc <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005f86:	2b02      	cmp	r3, #2
 8005f88:	f040 809e 	bne.w	80060c8 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005f8c:	4b42      	ldr	r3, [pc, #264]	@ (8006098 <HAL_RCC_OscConfig+0x76c>)
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	4a41      	ldr	r2, [pc, #260]	@ (8006098 <HAL_RCC_OscConfig+0x76c>)
 8005f92:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005f96:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005f98:	f7fe fae2 	bl	8004560 <HAL_GetTick>
 8005f9c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005f9e:	e008      	b.n	8005fb2 <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005fa0:	f7fe fade 	bl	8004560 <HAL_GetTick>
 8005fa4:	4602      	mov	r2, r0
 8005fa6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005fa8:	1ad3      	subs	r3, r2, r3
 8005faa:	2b02      	cmp	r3, #2
 8005fac:	d901      	bls.n	8005fb2 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8005fae:	2303      	movs	r3, #3
 8005fb0:	e10e      	b.n	80061d0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005fb2:	4b39      	ldr	r3, [pc, #228]	@ (8006098 <HAL_RCC_OscConfig+0x76c>)
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005fba:	2b00      	cmp	r3, #0
 8005fbc:	d1f0      	bne.n	8005fa0 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005fbe:	4b36      	ldr	r3, [pc, #216]	@ (8006098 <HAL_RCC_OscConfig+0x76c>)
 8005fc0:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8005fc2:	4b37      	ldr	r3, [pc, #220]	@ (80060a0 <HAL_RCC_OscConfig+0x774>)
 8005fc4:	4013      	ands	r3, r2
 8005fc6:	687a      	ldr	r2, [r7, #4]
 8005fc8:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 8005fca:	687a      	ldr	r2, [r7, #4]
 8005fcc:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8005fce:	0112      	lsls	r2, r2, #4
 8005fd0:	430a      	orrs	r2, r1
 8005fd2:	4931      	ldr	r1, [pc, #196]	@ (8006098 <HAL_RCC_OscConfig+0x76c>)
 8005fd4:	4313      	orrs	r3, r2
 8005fd6:	628b      	str	r3, [r1, #40]	@ 0x28
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005fdc:	3b01      	subs	r3, #1
 8005fde:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005fe6:	3b01      	subs	r3, #1
 8005fe8:	025b      	lsls	r3, r3, #9
 8005fea:	b29b      	uxth	r3, r3
 8005fec:	431a      	orrs	r2, r3
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005ff2:	3b01      	subs	r3, #1
 8005ff4:	041b      	lsls	r3, r3, #16
 8005ff6:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8005ffa:	431a      	orrs	r2, r3
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006000:	3b01      	subs	r3, #1
 8006002:	061b      	lsls	r3, r3, #24
 8006004:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8006008:	4923      	ldr	r1, [pc, #140]	@ (8006098 <HAL_RCC_OscConfig+0x76c>)
 800600a:	4313      	orrs	r3, r2
 800600c:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 800600e:	4b22      	ldr	r3, [pc, #136]	@ (8006098 <HAL_RCC_OscConfig+0x76c>)
 8006010:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006012:	4a21      	ldr	r2, [pc, #132]	@ (8006098 <HAL_RCC_OscConfig+0x76c>)
 8006014:	f023 0301 	bic.w	r3, r3, #1
 8006018:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800601a:	4b1f      	ldr	r3, [pc, #124]	@ (8006098 <HAL_RCC_OscConfig+0x76c>)
 800601c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800601e:	4b21      	ldr	r3, [pc, #132]	@ (80060a4 <HAL_RCC_OscConfig+0x778>)
 8006020:	4013      	ands	r3, r2
 8006022:	687a      	ldr	r2, [r7, #4]
 8006024:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8006026:	00d2      	lsls	r2, r2, #3
 8006028:	491b      	ldr	r1, [pc, #108]	@ (8006098 <HAL_RCC_OscConfig+0x76c>)
 800602a:	4313      	orrs	r3, r2
 800602c:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800602e:	4b1a      	ldr	r3, [pc, #104]	@ (8006098 <HAL_RCC_OscConfig+0x76c>)
 8006030:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006032:	f023 020c 	bic.w	r2, r3, #12
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800603a:	4917      	ldr	r1, [pc, #92]	@ (8006098 <HAL_RCC_OscConfig+0x76c>)
 800603c:	4313      	orrs	r3, r2
 800603e:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8006040:	4b15      	ldr	r3, [pc, #84]	@ (8006098 <HAL_RCC_OscConfig+0x76c>)
 8006042:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006044:	f023 0202 	bic.w	r2, r3, #2
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800604c:	4912      	ldr	r1, [pc, #72]	@ (8006098 <HAL_RCC_OscConfig+0x76c>)
 800604e:	4313      	orrs	r3, r2
 8006050:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8006052:	4b11      	ldr	r3, [pc, #68]	@ (8006098 <HAL_RCC_OscConfig+0x76c>)
 8006054:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006056:	4a10      	ldr	r2, [pc, #64]	@ (8006098 <HAL_RCC_OscConfig+0x76c>)
 8006058:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800605c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800605e:	4b0e      	ldr	r3, [pc, #56]	@ (8006098 <HAL_RCC_OscConfig+0x76c>)
 8006060:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006062:	4a0d      	ldr	r2, [pc, #52]	@ (8006098 <HAL_RCC_OscConfig+0x76c>)
 8006064:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006068:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800606a:	4b0b      	ldr	r3, [pc, #44]	@ (8006098 <HAL_RCC_OscConfig+0x76c>)
 800606c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800606e:	4a0a      	ldr	r2, [pc, #40]	@ (8006098 <HAL_RCC_OscConfig+0x76c>)
 8006070:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8006074:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8006076:	4b08      	ldr	r3, [pc, #32]	@ (8006098 <HAL_RCC_OscConfig+0x76c>)
 8006078:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800607a:	4a07      	ldr	r2, [pc, #28]	@ (8006098 <HAL_RCC_OscConfig+0x76c>)
 800607c:	f043 0301 	orr.w	r3, r3, #1
 8006080:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006082:	4b05      	ldr	r3, [pc, #20]	@ (8006098 <HAL_RCC_OscConfig+0x76c>)
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	4a04      	ldr	r2, [pc, #16]	@ (8006098 <HAL_RCC_OscConfig+0x76c>)
 8006088:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800608c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800608e:	f7fe fa67 	bl	8004560 <HAL_GetTick>
 8006092:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8006094:	e011      	b.n	80060ba <HAL_RCC_OscConfig+0x78e>
 8006096:	bf00      	nop
 8006098:	58024400 	.word	0x58024400
 800609c:	58024800 	.word	0x58024800
 80060a0:	fffffc0c 	.word	0xfffffc0c
 80060a4:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80060a8:	f7fe fa5a 	bl	8004560 <HAL_GetTick>
 80060ac:	4602      	mov	r2, r0
 80060ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80060b0:	1ad3      	subs	r3, r2, r3
 80060b2:	2b02      	cmp	r3, #2
 80060b4:	d901      	bls.n	80060ba <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 80060b6:	2303      	movs	r3, #3
 80060b8:	e08a      	b.n	80061d0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80060ba:	4b47      	ldr	r3, [pc, #284]	@ (80061d8 <HAL_RCC_OscConfig+0x8ac>)
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80060c2:	2b00      	cmp	r3, #0
 80060c4:	d0f0      	beq.n	80060a8 <HAL_RCC_OscConfig+0x77c>
 80060c6:	e082      	b.n	80061ce <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80060c8:	4b43      	ldr	r3, [pc, #268]	@ (80061d8 <HAL_RCC_OscConfig+0x8ac>)
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	4a42      	ldr	r2, [pc, #264]	@ (80061d8 <HAL_RCC_OscConfig+0x8ac>)
 80060ce:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80060d2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80060d4:	f7fe fa44 	bl	8004560 <HAL_GetTick>
 80060d8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80060da:	e008      	b.n	80060ee <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80060dc:	f7fe fa40 	bl	8004560 <HAL_GetTick>
 80060e0:	4602      	mov	r2, r0
 80060e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80060e4:	1ad3      	subs	r3, r2, r3
 80060e6:	2b02      	cmp	r3, #2
 80060e8:	d901      	bls.n	80060ee <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 80060ea:	2303      	movs	r3, #3
 80060ec:	e070      	b.n	80061d0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80060ee:	4b3a      	ldr	r3, [pc, #232]	@ (80061d8 <HAL_RCC_OscConfig+0x8ac>)
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80060f6:	2b00      	cmp	r3, #0
 80060f8:	d1f0      	bne.n	80060dc <HAL_RCC_OscConfig+0x7b0>
 80060fa:	e068      	b.n	80061ce <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 80060fc:	4b36      	ldr	r3, [pc, #216]	@ (80061d8 <HAL_RCC_OscConfig+0x8ac>)
 80060fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006100:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8006102:	4b35      	ldr	r3, [pc, #212]	@ (80061d8 <HAL_RCC_OscConfig+0x8ac>)
 8006104:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006106:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800610c:	2b01      	cmp	r3, #1
 800610e:	d031      	beq.n	8006174 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006110:	693b      	ldr	r3, [r7, #16]
 8006112:	f003 0203 	and.w	r2, r3, #3
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800611a:	429a      	cmp	r2, r3
 800611c:	d12a      	bne.n	8006174 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800611e:	693b      	ldr	r3, [r7, #16]
 8006120:	091b      	lsrs	r3, r3, #4
 8006122:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800612a:	429a      	cmp	r2, r3
 800612c:	d122      	bne.n	8006174 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800612e:	68fb      	ldr	r3, [r7, #12]
 8006130:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006138:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800613a:	429a      	cmp	r2, r3
 800613c:	d11a      	bne.n	8006174 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800613e:	68fb      	ldr	r3, [r7, #12]
 8006140:	0a5b      	lsrs	r3, r3, #9
 8006142:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800614a:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800614c:	429a      	cmp	r2, r3
 800614e:	d111      	bne.n	8006174 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8006150:	68fb      	ldr	r3, [r7, #12]
 8006152:	0c1b      	lsrs	r3, r3, #16
 8006154:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800615c:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800615e:	429a      	cmp	r2, r3
 8006160:	d108      	bne.n	8006174 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8006162:	68fb      	ldr	r3, [r7, #12]
 8006164:	0e1b      	lsrs	r3, r3, #24
 8006166:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800616e:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8006170:	429a      	cmp	r2, r3
 8006172:	d001      	beq.n	8006178 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8006174:	2301      	movs	r3, #1
 8006176:	e02b      	b.n	80061d0 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8006178:	4b17      	ldr	r3, [pc, #92]	@ (80061d8 <HAL_RCC_OscConfig+0x8ac>)
 800617a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800617c:	08db      	lsrs	r3, r3, #3
 800617e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006182:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006188:	693a      	ldr	r2, [r7, #16]
 800618a:	429a      	cmp	r2, r3
 800618c:	d01f      	beq.n	80061ce <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 800618e:	4b12      	ldr	r3, [pc, #72]	@ (80061d8 <HAL_RCC_OscConfig+0x8ac>)
 8006190:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006192:	4a11      	ldr	r2, [pc, #68]	@ (80061d8 <HAL_RCC_OscConfig+0x8ac>)
 8006194:	f023 0301 	bic.w	r3, r3, #1
 8006198:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800619a:	f7fe f9e1 	bl	8004560 <HAL_GetTick>
 800619e:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 80061a0:	bf00      	nop
 80061a2:	f7fe f9dd 	bl	8004560 <HAL_GetTick>
 80061a6:	4602      	mov	r2, r0
 80061a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80061aa:	4293      	cmp	r3, r2
 80061ac:	d0f9      	beq.n	80061a2 <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80061ae:	4b0a      	ldr	r3, [pc, #40]	@ (80061d8 <HAL_RCC_OscConfig+0x8ac>)
 80061b0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80061b2:	4b0a      	ldr	r3, [pc, #40]	@ (80061dc <HAL_RCC_OscConfig+0x8b0>)
 80061b4:	4013      	ands	r3, r2
 80061b6:	687a      	ldr	r2, [r7, #4]
 80061b8:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80061ba:	00d2      	lsls	r2, r2, #3
 80061bc:	4906      	ldr	r1, [pc, #24]	@ (80061d8 <HAL_RCC_OscConfig+0x8ac>)
 80061be:	4313      	orrs	r3, r2
 80061c0:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 80061c2:	4b05      	ldr	r3, [pc, #20]	@ (80061d8 <HAL_RCC_OscConfig+0x8ac>)
 80061c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80061c6:	4a04      	ldr	r2, [pc, #16]	@ (80061d8 <HAL_RCC_OscConfig+0x8ac>)
 80061c8:	f043 0301 	orr.w	r3, r3, #1
 80061cc:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 80061ce:	2300      	movs	r3, #0
}
 80061d0:	4618      	mov	r0, r3
 80061d2:	3730      	adds	r7, #48	@ 0x30
 80061d4:	46bd      	mov	sp, r7
 80061d6:	bd80      	pop	{r7, pc}
 80061d8:	58024400 	.word	0x58024400
 80061dc:	ffff0007 	.word	0xffff0007

080061e0 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80061e0:	b580      	push	{r7, lr}
 80061e2:	b086      	sub	sp, #24
 80061e4:	af00      	add	r7, sp, #0
 80061e6:	6078      	str	r0, [r7, #4]
 80061e8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	2b00      	cmp	r3, #0
 80061ee:	d101      	bne.n	80061f4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80061f0:	2301      	movs	r3, #1
 80061f2:	e19c      	b.n	800652e <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80061f4:	4b8a      	ldr	r3, [pc, #552]	@ (8006420 <HAL_RCC_ClockConfig+0x240>)
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	f003 030f 	and.w	r3, r3, #15
 80061fc:	683a      	ldr	r2, [r7, #0]
 80061fe:	429a      	cmp	r2, r3
 8006200:	d910      	bls.n	8006224 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006202:	4b87      	ldr	r3, [pc, #540]	@ (8006420 <HAL_RCC_ClockConfig+0x240>)
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	f023 020f 	bic.w	r2, r3, #15
 800620a:	4985      	ldr	r1, [pc, #532]	@ (8006420 <HAL_RCC_ClockConfig+0x240>)
 800620c:	683b      	ldr	r3, [r7, #0]
 800620e:	4313      	orrs	r3, r2
 8006210:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006212:	4b83      	ldr	r3, [pc, #524]	@ (8006420 <HAL_RCC_ClockConfig+0x240>)
 8006214:	681b      	ldr	r3, [r3, #0]
 8006216:	f003 030f 	and.w	r3, r3, #15
 800621a:	683a      	ldr	r2, [r7, #0]
 800621c:	429a      	cmp	r2, r3
 800621e:	d001      	beq.n	8006224 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8006220:	2301      	movs	r3, #1
 8006222:	e184      	b.n	800652e <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	f003 0304 	and.w	r3, r3, #4
 800622c:	2b00      	cmp	r3, #0
 800622e:	d010      	beq.n	8006252 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	691a      	ldr	r2, [r3, #16]
 8006234:	4b7b      	ldr	r3, [pc, #492]	@ (8006424 <HAL_RCC_ClockConfig+0x244>)
 8006236:	699b      	ldr	r3, [r3, #24]
 8006238:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800623c:	429a      	cmp	r2, r3
 800623e:	d908      	bls.n	8006252 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8006240:	4b78      	ldr	r3, [pc, #480]	@ (8006424 <HAL_RCC_ClockConfig+0x244>)
 8006242:	699b      	ldr	r3, [r3, #24]
 8006244:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	691b      	ldr	r3, [r3, #16]
 800624c:	4975      	ldr	r1, [pc, #468]	@ (8006424 <HAL_RCC_ClockConfig+0x244>)
 800624e:	4313      	orrs	r3, r2
 8006250:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	f003 0308 	and.w	r3, r3, #8
 800625a:	2b00      	cmp	r3, #0
 800625c:	d010      	beq.n	8006280 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	695a      	ldr	r2, [r3, #20]
 8006262:	4b70      	ldr	r3, [pc, #448]	@ (8006424 <HAL_RCC_ClockConfig+0x244>)
 8006264:	69db      	ldr	r3, [r3, #28]
 8006266:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800626a:	429a      	cmp	r2, r3
 800626c:	d908      	bls.n	8006280 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800626e:	4b6d      	ldr	r3, [pc, #436]	@ (8006424 <HAL_RCC_ClockConfig+0x244>)
 8006270:	69db      	ldr	r3, [r3, #28]
 8006272:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	695b      	ldr	r3, [r3, #20]
 800627a:	496a      	ldr	r1, [pc, #424]	@ (8006424 <HAL_RCC_ClockConfig+0x244>)
 800627c:	4313      	orrs	r3, r2
 800627e:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	f003 0310 	and.w	r3, r3, #16
 8006288:	2b00      	cmp	r3, #0
 800628a:	d010      	beq.n	80062ae <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	699a      	ldr	r2, [r3, #24]
 8006290:	4b64      	ldr	r3, [pc, #400]	@ (8006424 <HAL_RCC_ClockConfig+0x244>)
 8006292:	69db      	ldr	r3, [r3, #28]
 8006294:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8006298:	429a      	cmp	r2, r3
 800629a:	d908      	bls.n	80062ae <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800629c:	4b61      	ldr	r3, [pc, #388]	@ (8006424 <HAL_RCC_ClockConfig+0x244>)
 800629e:	69db      	ldr	r3, [r3, #28]
 80062a0:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	699b      	ldr	r3, [r3, #24]
 80062a8:	495e      	ldr	r1, [pc, #376]	@ (8006424 <HAL_RCC_ClockConfig+0x244>)
 80062aa:	4313      	orrs	r3, r2
 80062ac:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	f003 0320 	and.w	r3, r3, #32
 80062b6:	2b00      	cmp	r3, #0
 80062b8:	d010      	beq.n	80062dc <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	69da      	ldr	r2, [r3, #28]
 80062be:	4b59      	ldr	r3, [pc, #356]	@ (8006424 <HAL_RCC_ClockConfig+0x244>)
 80062c0:	6a1b      	ldr	r3, [r3, #32]
 80062c2:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80062c6:	429a      	cmp	r2, r3
 80062c8:	d908      	bls.n	80062dc <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80062ca:	4b56      	ldr	r3, [pc, #344]	@ (8006424 <HAL_RCC_ClockConfig+0x244>)
 80062cc:	6a1b      	ldr	r3, [r3, #32]
 80062ce:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	69db      	ldr	r3, [r3, #28]
 80062d6:	4953      	ldr	r1, [pc, #332]	@ (8006424 <HAL_RCC_ClockConfig+0x244>)
 80062d8:	4313      	orrs	r3, r2
 80062da:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	f003 0302 	and.w	r3, r3, #2
 80062e4:	2b00      	cmp	r3, #0
 80062e6:	d010      	beq.n	800630a <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	68da      	ldr	r2, [r3, #12]
 80062ec:	4b4d      	ldr	r3, [pc, #308]	@ (8006424 <HAL_RCC_ClockConfig+0x244>)
 80062ee:	699b      	ldr	r3, [r3, #24]
 80062f0:	f003 030f 	and.w	r3, r3, #15
 80062f4:	429a      	cmp	r2, r3
 80062f6:	d908      	bls.n	800630a <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80062f8:	4b4a      	ldr	r3, [pc, #296]	@ (8006424 <HAL_RCC_ClockConfig+0x244>)
 80062fa:	699b      	ldr	r3, [r3, #24]
 80062fc:	f023 020f 	bic.w	r2, r3, #15
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	68db      	ldr	r3, [r3, #12]
 8006304:	4947      	ldr	r1, [pc, #284]	@ (8006424 <HAL_RCC_ClockConfig+0x244>)
 8006306:	4313      	orrs	r3, r2
 8006308:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	f003 0301 	and.w	r3, r3, #1
 8006312:	2b00      	cmp	r3, #0
 8006314:	d055      	beq.n	80063c2 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8006316:	4b43      	ldr	r3, [pc, #268]	@ (8006424 <HAL_RCC_ClockConfig+0x244>)
 8006318:	699b      	ldr	r3, [r3, #24]
 800631a:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	689b      	ldr	r3, [r3, #8]
 8006322:	4940      	ldr	r1, [pc, #256]	@ (8006424 <HAL_RCC_ClockConfig+0x244>)
 8006324:	4313      	orrs	r3, r2
 8006326:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	685b      	ldr	r3, [r3, #4]
 800632c:	2b02      	cmp	r3, #2
 800632e:	d107      	bne.n	8006340 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8006330:	4b3c      	ldr	r3, [pc, #240]	@ (8006424 <HAL_RCC_ClockConfig+0x244>)
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006338:	2b00      	cmp	r3, #0
 800633a:	d121      	bne.n	8006380 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800633c:	2301      	movs	r3, #1
 800633e:	e0f6      	b.n	800652e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	685b      	ldr	r3, [r3, #4]
 8006344:	2b03      	cmp	r3, #3
 8006346:	d107      	bne.n	8006358 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8006348:	4b36      	ldr	r3, [pc, #216]	@ (8006424 <HAL_RCC_ClockConfig+0x244>)
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006350:	2b00      	cmp	r3, #0
 8006352:	d115      	bne.n	8006380 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8006354:	2301      	movs	r3, #1
 8006356:	e0ea      	b.n	800652e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	685b      	ldr	r3, [r3, #4]
 800635c:	2b01      	cmp	r3, #1
 800635e:	d107      	bne.n	8006370 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8006360:	4b30      	ldr	r3, [pc, #192]	@ (8006424 <HAL_RCC_ClockConfig+0x244>)
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006368:	2b00      	cmp	r3, #0
 800636a:	d109      	bne.n	8006380 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800636c:	2301      	movs	r3, #1
 800636e:	e0de      	b.n	800652e <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006370:	4b2c      	ldr	r3, [pc, #176]	@ (8006424 <HAL_RCC_ClockConfig+0x244>)
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	f003 0304 	and.w	r3, r3, #4
 8006378:	2b00      	cmp	r3, #0
 800637a:	d101      	bne.n	8006380 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800637c:	2301      	movs	r3, #1
 800637e:	e0d6      	b.n	800652e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8006380:	4b28      	ldr	r3, [pc, #160]	@ (8006424 <HAL_RCC_ClockConfig+0x244>)
 8006382:	691b      	ldr	r3, [r3, #16]
 8006384:	f023 0207 	bic.w	r2, r3, #7
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	685b      	ldr	r3, [r3, #4]
 800638c:	4925      	ldr	r1, [pc, #148]	@ (8006424 <HAL_RCC_ClockConfig+0x244>)
 800638e:	4313      	orrs	r3, r2
 8006390:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006392:	f7fe f8e5 	bl	8004560 <HAL_GetTick>
 8006396:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006398:	e00a      	b.n	80063b0 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800639a:	f7fe f8e1 	bl	8004560 <HAL_GetTick>
 800639e:	4602      	mov	r2, r0
 80063a0:	697b      	ldr	r3, [r7, #20]
 80063a2:	1ad3      	subs	r3, r2, r3
 80063a4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80063a8:	4293      	cmp	r3, r2
 80063aa:	d901      	bls.n	80063b0 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 80063ac:	2303      	movs	r3, #3
 80063ae:	e0be      	b.n	800652e <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80063b0:	4b1c      	ldr	r3, [pc, #112]	@ (8006424 <HAL_RCC_ClockConfig+0x244>)
 80063b2:	691b      	ldr	r3, [r3, #16]
 80063b4:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	685b      	ldr	r3, [r3, #4]
 80063bc:	00db      	lsls	r3, r3, #3
 80063be:	429a      	cmp	r2, r3
 80063c0:	d1eb      	bne.n	800639a <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	681b      	ldr	r3, [r3, #0]
 80063c6:	f003 0302 	and.w	r3, r3, #2
 80063ca:	2b00      	cmp	r3, #0
 80063cc:	d010      	beq.n	80063f0 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	68da      	ldr	r2, [r3, #12]
 80063d2:	4b14      	ldr	r3, [pc, #80]	@ (8006424 <HAL_RCC_ClockConfig+0x244>)
 80063d4:	699b      	ldr	r3, [r3, #24]
 80063d6:	f003 030f 	and.w	r3, r3, #15
 80063da:	429a      	cmp	r2, r3
 80063dc:	d208      	bcs.n	80063f0 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80063de:	4b11      	ldr	r3, [pc, #68]	@ (8006424 <HAL_RCC_ClockConfig+0x244>)
 80063e0:	699b      	ldr	r3, [r3, #24]
 80063e2:	f023 020f 	bic.w	r2, r3, #15
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	68db      	ldr	r3, [r3, #12]
 80063ea:	490e      	ldr	r1, [pc, #56]	@ (8006424 <HAL_RCC_ClockConfig+0x244>)
 80063ec:	4313      	orrs	r3, r2
 80063ee:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80063f0:	4b0b      	ldr	r3, [pc, #44]	@ (8006420 <HAL_RCC_ClockConfig+0x240>)
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	f003 030f 	and.w	r3, r3, #15
 80063f8:	683a      	ldr	r2, [r7, #0]
 80063fa:	429a      	cmp	r2, r3
 80063fc:	d214      	bcs.n	8006428 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80063fe:	4b08      	ldr	r3, [pc, #32]	@ (8006420 <HAL_RCC_ClockConfig+0x240>)
 8006400:	681b      	ldr	r3, [r3, #0]
 8006402:	f023 020f 	bic.w	r2, r3, #15
 8006406:	4906      	ldr	r1, [pc, #24]	@ (8006420 <HAL_RCC_ClockConfig+0x240>)
 8006408:	683b      	ldr	r3, [r7, #0]
 800640a:	4313      	orrs	r3, r2
 800640c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800640e:	4b04      	ldr	r3, [pc, #16]	@ (8006420 <HAL_RCC_ClockConfig+0x240>)
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	f003 030f 	and.w	r3, r3, #15
 8006416:	683a      	ldr	r2, [r7, #0]
 8006418:	429a      	cmp	r2, r3
 800641a:	d005      	beq.n	8006428 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 800641c:	2301      	movs	r3, #1
 800641e:	e086      	b.n	800652e <HAL_RCC_ClockConfig+0x34e>
 8006420:	52002000 	.word	0x52002000
 8006424:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	f003 0304 	and.w	r3, r3, #4
 8006430:	2b00      	cmp	r3, #0
 8006432:	d010      	beq.n	8006456 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	691a      	ldr	r2, [r3, #16]
 8006438:	4b3f      	ldr	r3, [pc, #252]	@ (8006538 <HAL_RCC_ClockConfig+0x358>)
 800643a:	699b      	ldr	r3, [r3, #24]
 800643c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8006440:	429a      	cmp	r2, r3
 8006442:	d208      	bcs.n	8006456 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8006444:	4b3c      	ldr	r3, [pc, #240]	@ (8006538 <HAL_RCC_ClockConfig+0x358>)
 8006446:	699b      	ldr	r3, [r3, #24]
 8006448:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	691b      	ldr	r3, [r3, #16]
 8006450:	4939      	ldr	r1, [pc, #228]	@ (8006538 <HAL_RCC_ClockConfig+0x358>)
 8006452:	4313      	orrs	r3, r2
 8006454:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	f003 0308 	and.w	r3, r3, #8
 800645e:	2b00      	cmp	r3, #0
 8006460:	d010      	beq.n	8006484 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	695a      	ldr	r2, [r3, #20]
 8006466:	4b34      	ldr	r3, [pc, #208]	@ (8006538 <HAL_RCC_ClockConfig+0x358>)
 8006468:	69db      	ldr	r3, [r3, #28]
 800646a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800646e:	429a      	cmp	r2, r3
 8006470:	d208      	bcs.n	8006484 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8006472:	4b31      	ldr	r3, [pc, #196]	@ (8006538 <HAL_RCC_ClockConfig+0x358>)
 8006474:	69db      	ldr	r3, [r3, #28]
 8006476:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	695b      	ldr	r3, [r3, #20]
 800647e:	492e      	ldr	r1, [pc, #184]	@ (8006538 <HAL_RCC_ClockConfig+0x358>)
 8006480:	4313      	orrs	r3, r2
 8006482:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	f003 0310 	and.w	r3, r3, #16
 800648c:	2b00      	cmp	r3, #0
 800648e:	d010      	beq.n	80064b2 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	699a      	ldr	r2, [r3, #24]
 8006494:	4b28      	ldr	r3, [pc, #160]	@ (8006538 <HAL_RCC_ClockConfig+0x358>)
 8006496:	69db      	ldr	r3, [r3, #28]
 8006498:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800649c:	429a      	cmp	r2, r3
 800649e:	d208      	bcs.n	80064b2 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80064a0:	4b25      	ldr	r3, [pc, #148]	@ (8006538 <HAL_RCC_ClockConfig+0x358>)
 80064a2:	69db      	ldr	r3, [r3, #28]
 80064a4:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	699b      	ldr	r3, [r3, #24]
 80064ac:	4922      	ldr	r1, [pc, #136]	@ (8006538 <HAL_RCC_ClockConfig+0x358>)
 80064ae:	4313      	orrs	r3, r2
 80064b0:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	f003 0320 	and.w	r3, r3, #32
 80064ba:	2b00      	cmp	r3, #0
 80064bc:	d010      	beq.n	80064e0 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	69da      	ldr	r2, [r3, #28]
 80064c2:	4b1d      	ldr	r3, [pc, #116]	@ (8006538 <HAL_RCC_ClockConfig+0x358>)
 80064c4:	6a1b      	ldr	r3, [r3, #32]
 80064c6:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80064ca:	429a      	cmp	r2, r3
 80064cc:	d208      	bcs.n	80064e0 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80064ce:	4b1a      	ldr	r3, [pc, #104]	@ (8006538 <HAL_RCC_ClockConfig+0x358>)
 80064d0:	6a1b      	ldr	r3, [r3, #32]
 80064d2:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	69db      	ldr	r3, [r3, #28]
 80064da:	4917      	ldr	r1, [pc, #92]	@ (8006538 <HAL_RCC_ClockConfig+0x358>)
 80064dc:	4313      	orrs	r3, r2
 80064de:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80064e0:	f000 f834 	bl	800654c <HAL_RCC_GetSysClockFreq>
 80064e4:	4602      	mov	r2, r0
 80064e6:	4b14      	ldr	r3, [pc, #80]	@ (8006538 <HAL_RCC_ClockConfig+0x358>)
 80064e8:	699b      	ldr	r3, [r3, #24]
 80064ea:	0a1b      	lsrs	r3, r3, #8
 80064ec:	f003 030f 	and.w	r3, r3, #15
 80064f0:	4912      	ldr	r1, [pc, #72]	@ (800653c <HAL_RCC_ClockConfig+0x35c>)
 80064f2:	5ccb      	ldrb	r3, [r1, r3]
 80064f4:	f003 031f 	and.w	r3, r3, #31
 80064f8:	fa22 f303 	lsr.w	r3, r2, r3
 80064fc:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80064fe:	4b0e      	ldr	r3, [pc, #56]	@ (8006538 <HAL_RCC_ClockConfig+0x358>)
 8006500:	699b      	ldr	r3, [r3, #24]
 8006502:	f003 030f 	and.w	r3, r3, #15
 8006506:	4a0d      	ldr	r2, [pc, #52]	@ (800653c <HAL_RCC_ClockConfig+0x35c>)
 8006508:	5cd3      	ldrb	r3, [r2, r3]
 800650a:	f003 031f 	and.w	r3, r3, #31
 800650e:	693a      	ldr	r2, [r7, #16]
 8006510:	fa22 f303 	lsr.w	r3, r2, r3
 8006514:	4a0a      	ldr	r2, [pc, #40]	@ (8006540 <HAL_RCC_ClockConfig+0x360>)
 8006516:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8006518:	4a0a      	ldr	r2, [pc, #40]	@ (8006544 <HAL_RCC_ClockConfig+0x364>)
 800651a:	693b      	ldr	r3, [r7, #16]
 800651c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 800651e:	4b0a      	ldr	r3, [pc, #40]	@ (8006548 <HAL_RCC_ClockConfig+0x368>)
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	4618      	mov	r0, r3
 8006524:	f7fd ffd2 	bl	80044cc <HAL_InitTick>
 8006528:	4603      	mov	r3, r0
 800652a:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 800652c:	7bfb      	ldrb	r3, [r7, #15]
}
 800652e:	4618      	mov	r0, r3
 8006530:	3718      	adds	r7, #24
 8006532:	46bd      	mov	sp, r7
 8006534:	bd80      	pop	{r7, pc}
 8006536:	bf00      	nop
 8006538:	58024400 	.word	0x58024400
 800653c:	0800e040 	.word	0x0800e040
 8006540:	24000004 	.word	0x24000004
 8006544:	24000000 	.word	0x24000000
 8006548:	24000008 	.word	0x24000008

0800654c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800654c:	b480      	push	{r7}
 800654e:	b089      	sub	sp, #36	@ 0x24
 8006550:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006552:	4bb3      	ldr	r3, [pc, #716]	@ (8006820 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006554:	691b      	ldr	r3, [r3, #16]
 8006556:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800655a:	2b18      	cmp	r3, #24
 800655c:	f200 8155 	bhi.w	800680a <HAL_RCC_GetSysClockFreq+0x2be>
 8006560:	a201      	add	r2, pc, #4	@ (adr r2, 8006568 <HAL_RCC_GetSysClockFreq+0x1c>)
 8006562:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006566:	bf00      	nop
 8006568:	080065cd 	.word	0x080065cd
 800656c:	0800680b 	.word	0x0800680b
 8006570:	0800680b 	.word	0x0800680b
 8006574:	0800680b 	.word	0x0800680b
 8006578:	0800680b 	.word	0x0800680b
 800657c:	0800680b 	.word	0x0800680b
 8006580:	0800680b 	.word	0x0800680b
 8006584:	0800680b 	.word	0x0800680b
 8006588:	080065f3 	.word	0x080065f3
 800658c:	0800680b 	.word	0x0800680b
 8006590:	0800680b 	.word	0x0800680b
 8006594:	0800680b 	.word	0x0800680b
 8006598:	0800680b 	.word	0x0800680b
 800659c:	0800680b 	.word	0x0800680b
 80065a0:	0800680b 	.word	0x0800680b
 80065a4:	0800680b 	.word	0x0800680b
 80065a8:	080065f9 	.word	0x080065f9
 80065ac:	0800680b 	.word	0x0800680b
 80065b0:	0800680b 	.word	0x0800680b
 80065b4:	0800680b 	.word	0x0800680b
 80065b8:	0800680b 	.word	0x0800680b
 80065bc:	0800680b 	.word	0x0800680b
 80065c0:	0800680b 	.word	0x0800680b
 80065c4:	0800680b 	.word	0x0800680b
 80065c8:	080065ff 	.word	0x080065ff
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80065cc:	4b94      	ldr	r3, [pc, #592]	@ (8006820 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	f003 0320 	and.w	r3, r3, #32
 80065d4:	2b00      	cmp	r3, #0
 80065d6:	d009      	beq.n	80065ec <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80065d8:	4b91      	ldr	r3, [pc, #580]	@ (8006820 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	08db      	lsrs	r3, r3, #3
 80065de:	f003 0303 	and.w	r3, r3, #3
 80065e2:	4a90      	ldr	r2, [pc, #576]	@ (8006824 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80065e4:	fa22 f303 	lsr.w	r3, r2, r3
 80065e8:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 80065ea:	e111      	b.n	8006810 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 80065ec:	4b8d      	ldr	r3, [pc, #564]	@ (8006824 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80065ee:	61bb      	str	r3, [r7, #24]
      break;
 80065f0:	e10e      	b.n	8006810 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 80065f2:	4b8d      	ldr	r3, [pc, #564]	@ (8006828 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80065f4:	61bb      	str	r3, [r7, #24]
      break;
 80065f6:	e10b      	b.n	8006810 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 80065f8:	4b8c      	ldr	r3, [pc, #560]	@ (800682c <HAL_RCC_GetSysClockFreq+0x2e0>)
 80065fa:	61bb      	str	r3, [r7, #24]
      break;
 80065fc:	e108      	b.n	8006810 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80065fe:	4b88      	ldr	r3, [pc, #544]	@ (8006820 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006600:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006602:	f003 0303 	and.w	r3, r3, #3
 8006606:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8006608:	4b85      	ldr	r3, [pc, #532]	@ (8006820 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800660a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800660c:	091b      	lsrs	r3, r3, #4
 800660e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006612:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8006614:	4b82      	ldr	r3, [pc, #520]	@ (8006820 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006616:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006618:	f003 0301 	and.w	r3, r3, #1
 800661c:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800661e:	4b80      	ldr	r3, [pc, #512]	@ (8006820 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006620:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006622:	08db      	lsrs	r3, r3, #3
 8006624:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006628:	68fa      	ldr	r2, [r7, #12]
 800662a:	fb02 f303 	mul.w	r3, r2, r3
 800662e:	ee07 3a90 	vmov	s15, r3
 8006632:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006636:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 800663a:	693b      	ldr	r3, [r7, #16]
 800663c:	2b00      	cmp	r3, #0
 800663e:	f000 80e1 	beq.w	8006804 <HAL_RCC_GetSysClockFreq+0x2b8>
      {
        switch (pllsource)
 8006642:	697b      	ldr	r3, [r7, #20]
 8006644:	2b02      	cmp	r3, #2
 8006646:	f000 8083 	beq.w	8006750 <HAL_RCC_GetSysClockFreq+0x204>
 800664a:	697b      	ldr	r3, [r7, #20]
 800664c:	2b02      	cmp	r3, #2
 800664e:	f200 80a1 	bhi.w	8006794 <HAL_RCC_GetSysClockFreq+0x248>
 8006652:	697b      	ldr	r3, [r7, #20]
 8006654:	2b00      	cmp	r3, #0
 8006656:	d003      	beq.n	8006660 <HAL_RCC_GetSysClockFreq+0x114>
 8006658:	697b      	ldr	r3, [r7, #20]
 800665a:	2b01      	cmp	r3, #1
 800665c:	d056      	beq.n	800670c <HAL_RCC_GetSysClockFreq+0x1c0>
 800665e:	e099      	b.n	8006794 <HAL_RCC_GetSysClockFreq+0x248>
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006660:	4b6f      	ldr	r3, [pc, #444]	@ (8006820 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	f003 0320 	and.w	r3, r3, #32
 8006668:	2b00      	cmp	r3, #0
 800666a:	d02d      	beq.n	80066c8 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800666c:	4b6c      	ldr	r3, [pc, #432]	@ (8006820 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	08db      	lsrs	r3, r3, #3
 8006672:	f003 0303 	and.w	r3, r3, #3
 8006676:	4a6b      	ldr	r2, [pc, #428]	@ (8006824 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8006678:	fa22 f303 	lsr.w	r3, r2, r3
 800667c:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	ee07 3a90 	vmov	s15, r3
 8006684:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006688:	693b      	ldr	r3, [r7, #16]
 800668a:	ee07 3a90 	vmov	s15, r3
 800668e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006692:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006696:	4b62      	ldr	r3, [pc, #392]	@ (8006820 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006698:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800669a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800669e:	ee07 3a90 	vmov	s15, r3
 80066a2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80066a6:	ed97 6a02 	vldr	s12, [r7, #8]
 80066aa:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8006830 <HAL_RCC_GetSysClockFreq+0x2e4>
 80066ae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80066b2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80066b6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80066ba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80066be:	ee67 7a27 	vmul.f32	s15, s14, s15
 80066c2:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 80066c6:	e087      	b.n	80067d8 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80066c8:	693b      	ldr	r3, [r7, #16]
 80066ca:	ee07 3a90 	vmov	s15, r3
 80066ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80066d2:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8006834 <HAL_RCC_GetSysClockFreq+0x2e8>
 80066d6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80066da:	4b51      	ldr	r3, [pc, #324]	@ (8006820 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80066dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80066de:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80066e2:	ee07 3a90 	vmov	s15, r3
 80066e6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80066ea:	ed97 6a02 	vldr	s12, [r7, #8]
 80066ee:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8006830 <HAL_RCC_GetSysClockFreq+0x2e4>
 80066f2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80066f6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80066fa:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80066fe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006702:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006706:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800670a:	e065      	b.n	80067d8 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800670c:	693b      	ldr	r3, [r7, #16]
 800670e:	ee07 3a90 	vmov	s15, r3
 8006712:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006716:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8006838 <HAL_RCC_GetSysClockFreq+0x2ec>
 800671a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800671e:	4b40      	ldr	r3, [pc, #256]	@ (8006820 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006720:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006722:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006726:	ee07 3a90 	vmov	s15, r3
 800672a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800672e:	ed97 6a02 	vldr	s12, [r7, #8]
 8006732:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8006830 <HAL_RCC_GetSysClockFreq+0x2e4>
 8006736:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800673a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800673e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006742:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006746:	ee67 7a27 	vmul.f32	s15, s14, s15
 800674a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800674e:	e043      	b.n	80067d8 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006750:	693b      	ldr	r3, [r7, #16]
 8006752:	ee07 3a90 	vmov	s15, r3
 8006756:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800675a:	eddf 6a38 	vldr	s13, [pc, #224]	@ 800683c <HAL_RCC_GetSysClockFreq+0x2f0>
 800675e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006762:	4b2f      	ldr	r3, [pc, #188]	@ (8006820 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006764:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006766:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800676a:	ee07 3a90 	vmov	s15, r3
 800676e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006772:	ed97 6a02 	vldr	s12, [r7, #8]
 8006776:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8006830 <HAL_RCC_GetSysClockFreq+0x2e4>
 800677a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800677e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006782:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006786:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800678a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800678e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8006792:	e021      	b.n	80067d8 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006794:	693b      	ldr	r3, [r7, #16]
 8006796:	ee07 3a90 	vmov	s15, r3
 800679a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800679e:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8006838 <HAL_RCC_GetSysClockFreq+0x2ec>
 80067a2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80067a6:	4b1e      	ldr	r3, [pc, #120]	@ (8006820 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80067a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80067aa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80067ae:	ee07 3a90 	vmov	s15, r3
 80067b2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80067b6:	ed97 6a02 	vldr	s12, [r7, #8]
 80067ba:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8006830 <HAL_RCC_GetSysClockFreq+0x2e4>
 80067be:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80067c2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80067c6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80067ca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80067ce:	ee67 7a27 	vmul.f32	s15, s14, s15
 80067d2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80067d6:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 80067d8:	4b11      	ldr	r3, [pc, #68]	@ (8006820 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80067da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80067dc:	0a5b      	lsrs	r3, r3, #9
 80067de:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80067e2:	3301      	adds	r3, #1
 80067e4:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 80067e6:	683b      	ldr	r3, [r7, #0]
 80067e8:	ee07 3a90 	vmov	s15, r3
 80067ec:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80067f0:	edd7 6a07 	vldr	s13, [r7, #28]
 80067f4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80067f8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80067fc:	ee17 3a90 	vmov	r3, s15
 8006800:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8006802:	e005      	b.n	8006810 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8006804:	2300      	movs	r3, #0
 8006806:	61bb      	str	r3, [r7, #24]
      break;
 8006808:	e002      	b.n	8006810 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 800680a:	4b07      	ldr	r3, [pc, #28]	@ (8006828 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800680c:	61bb      	str	r3, [r7, #24]
      break;
 800680e:	bf00      	nop
  }

  return sysclockfreq;
 8006810:	69bb      	ldr	r3, [r7, #24]
}
 8006812:	4618      	mov	r0, r3
 8006814:	3724      	adds	r7, #36	@ 0x24
 8006816:	46bd      	mov	sp, r7
 8006818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800681c:	4770      	bx	lr
 800681e:	bf00      	nop
 8006820:	58024400 	.word	0x58024400
 8006824:	03d09000 	.word	0x03d09000
 8006828:	003d0900 	.word	0x003d0900
 800682c:	017d7840 	.word	0x017d7840
 8006830:	46000000 	.word	0x46000000
 8006834:	4c742400 	.word	0x4c742400
 8006838:	4a742400 	.word	0x4a742400
 800683c:	4bbebc20 	.word	0x4bbebc20

08006840 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006840:	b580      	push	{r7, lr}
 8006842:	b082      	sub	sp, #8
 8006844:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8006846:	f7ff fe81 	bl	800654c <HAL_RCC_GetSysClockFreq>
 800684a:	4602      	mov	r2, r0
 800684c:	4b10      	ldr	r3, [pc, #64]	@ (8006890 <HAL_RCC_GetHCLKFreq+0x50>)
 800684e:	699b      	ldr	r3, [r3, #24]
 8006850:	0a1b      	lsrs	r3, r3, #8
 8006852:	f003 030f 	and.w	r3, r3, #15
 8006856:	490f      	ldr	r1, [pc, #60]	@ (8006894 <HAL_RCC_GetHCLKFreq+0x54>)
 8006858:	5ccb      	ldrb	r3, [r1, r3]
 800685a:	f003 031f 	and.w	r3, r3, #31
 800685e:	fa22 f303 	lsr.w	r3, r2, r3
 8006862:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8006864:	4b0a      	ldr	r3, [pc, #40]	@ (8006890 <HAL_RCC_GetHCLKFreq+0x50>)
 8006866:	699b      	ldr	r3, [r3, #24]
 8006868:	f003 030f 	and.w	r3, r3, #15
 800686c:	4a09      	ldr	r2, [pc, #36]	@ (8006894 <HAL_RCC_GetHCLKFreq+0x54>)
 800686e:	5cd3      	ldrb	r3, [r2, r3]
 8006870:	f003 031f 	and.w	r3, r3, #31
 8006874:	687a      	ldr	r2, [r7, #4]
 8006876:	fa22 f303 	lsr.w	r3, r2, r3
 800687a:	4a07      	ldr	r2, [pc, #28]	@ (8006898 <HAL_RCC_GetHCLKFreq+0x58>)
 800687c:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800687e:	4a07      	ldr	r2, [pc, #28]	@ (800689c <HAL_RCC_GetHCLKFreq+0x5c>)
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8006884:	4b04      	ldr	r3, [pc, #16]	@ (8006898 <HAL_RCC_GetHCLKFreq+0x58>)
 8006886:	681b      	ldr	r3, [r3, #0]
}
 8006888:	4618      	mov	r0, r3
 800688a:	3708      	adds	r7, #8
 800688c:	46bd      	mov	sp, r7
 800688e:	bd80      	pop	{r7, pc}
 8006890:	58024400 	.word	0x58024400
 8006894:	0800e040 	.word	0x0800e040
 8006898:	24000004 	.word	0x24000004
 800689c:	24000000 	.word	0x24000000

080068a0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80068a0:	b580      	push	{r7, lr}
 80068a2:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 80068a4:	f7ff ffcc 	bl	8006840 <HAL_RCC_GetHCLKFreq>
 80068a8:	4602      	mov	r2, r0
 80068aa:	4b06      	ldr	r3, [pc, #24]	@ (80068c4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80068ac:	69db      	ldr	r3, [r3, #28]
 80068ae:	091b      	lsrs	r3, r3, #4
 80068b0:	f003 0307 	and.w	r3, r3, #7
 80068b4:	4904      	ldr	r1, [pc, #16]	@ (80068c8 <HAL_RCC_GetPCLK1Freq+0x28>)
 80068b6:	5ccb      	ldrb	r3, [r1, r3]
 80068b8:	f003 031f 	and.w	r3, r3, #31
 80068bc:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 80068c0:	4618      	mov	r0, r3
 80068c2:	bd80      	pop	{r7, pc}
 80068c4:	58024400 	.word	0x58024400
 80068c8:	0800e040 	.word	0x0800e040

080068cc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80068cc:	b580      	push	{r7, lr}
 80068ce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 80068d0:	f7ff ffb6 	bl	8006840 <HAL_RCC_GetHCLKFreq>
 80068d4:	4602      	mov	r2, r0
 80068d6:	4b06      	ldr	r3, [pc, #24]	@ (80068f0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80068d8:	69db      	ldr	r3, [r3, #28]
 80068da:	0a1b      	lsrs	r3, r3, #8
 80068dc:	f003 0307 	and.w	r3, r3, #7
 80068e0:	4904      	ldr	r1, [pc, #16]	@ (80068f4 <HAL_RCC_GetPCLK2Freq+0x28>)
 80068e2:	5ccb      	ldrb	r3, [r1, r3]
 80068e4:	f003 031f 	and.w	r3, r3, #31
 80068e8:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 80068ec:	4618      	mov	r0, r3
 80068ee:	bd80      	pop	{r7, pc}
 80068f0:	58024400 	.word	0x58024400
 80068f4:	0800e040 	.word	0x0800e040

080068f8 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80068f8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80068fc:	b0ca      	sub	sp, #296	@ 0x128
 80068fe:	af00      	add	r7, sp, #0
 8006900:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8006904:	2300      	movs	r3, #0
 8006906:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800690a:	2300      	movs	r3, #0
 800690c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8006910:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006914:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006918:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 800691c:	2500      	movs	r5, #0
 800691e:	ea54 0305 	orrs.w	r3, r4, r5
 8006922:	d049      	beq.n	80069b8 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8006924:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006928:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800692a:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800692e:	d02f      	beq.n	8006990 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8006930:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8006934:	d828      	bhi.n	8006988 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8006936:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800693a:	d01a      	beq.n	8006972 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 800693c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006940:	d822      	bhi.n	8006988 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8006942:	2b00      	cmp	r3, #0
 8006944:	d003      	beq.n	800694e <HAL_RCCEx_PeriphCLKConfig+0x56>
 8006946:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800694a:	d007      	beq.n	800695c <HAL_RCCEx_PeriphCLKConfig+0x64>
 800694c:	e01c      	b.n	8006988 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800694e:	4bb8      	ldr	r3, [pc, #736]	@ (8006c30 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006950:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006952:	4ab7      	ldr	r2, [pc, #732]	@ (8006c30 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006954:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006958:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800695a:	e01a      	b.n	8006992 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800695c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006960:	3308      	adds	r3, #8
 8006962:	2102      	movs	r1, #2
 8006964:	4618      	mov	r0, r3
 8006966:	f001 fc8f 	bl	8008288 <RCCEx_PLL2_Config>
 800696a:	4603      	mov	r3, r0
 800696c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8006970:	e00f      	b.n	8006992 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006972:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006976:	3328      	adds	r3, #40	@ 0x28
 8006978:	2102      	movs	r1, #2
 800697a:	4618      	mov	r0, r3
 800697c:	f001 fd36 	bl	80083ec <RCCEx_PLL3_Config>
 8006980:	4603      	mov	r3, r0
 8006982:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8006986:	e004      	b.n	8006992 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006988:	2301      	movs	r3, #1
 800698a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800698e:	e000      	b.n	8006992 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8006990:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006992:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006996:	2b00      	cmp	r3, #0
 8006998:	d10a      	bne.n	80069b0 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800699a:	4ba5      	ldr	r3, [pc, #660]	@ (8006c30 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800699c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800699e:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 80069a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80069a6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80069a8:	4aa1      	ldr	r2, [pc, #644]	@ (8006c30 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80069aa:	430b      	orrs	r3, r1
 80069ac:	6513      	str	r3, [r2, #80]	@ 0x50
 80069ae:	e003      	b.n	80069b8 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80069b0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80069b4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80069b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80069bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80069c0:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 80069c4:	f04f 0900 	mov.w	r9, #0
 80069c8:	ea58 0309 	orrs.w	r3, r8, r9
 80069cc:	d047      	beq.n	8006a5e <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 80069ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80069d2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80069d4:	2b04      	cmp	r3, #4
 80069d6:	d82a      	bhi.n	8006a2e <HAL_RCCEx_PeriphCLKConfig+0x136>
 80069d8:	a201      	add	r2, pc, #4	@ (adr r2, 80069e0 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 80069da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80069de:	bf00      	nop
 80069e0:	080069f5 	.word	0x080069f5
 80069e4:	08006a03 	.word	0x08006a03
 80069e8:	08006a19 	.word	0x08006a19
 80069ec:	08006a37 	.word	0x08006a37
 80069f0:	08006a37 	.word	0x08006a37
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80069f4:	4b8e      	ldr	r3, [pc, #568]	@ (8006c30 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80069f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80069f8:	4a8d      	ldr	r2, [pc, #564]	@ (8006c30 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80069fa:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80069fe:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006a00:	e01a      	b.n	8006a38 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006a02:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006a06:	3308      	adds	r3, #8
 8006a08:	2100      	movs	r1, #0
 8006a0a:	4618      	mov	r0, r3
 8006a0c:	f001 fc3c 	bl	8008288 <RCCEx_PLL2_Config>
 8006a10:	4603      	mov	r3, r0
 8006a12:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006a16:	e00f      	b.n	8006a38 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006a18:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006a1c:	3328      	adds	r3, #40	@ 0x28
 8006a1e:	2100      	movs	r1, #0
 8006a20:	4618      	mov	r0, r3
 8006a22:	f001 fce3 	bl	80083ec <RCCEx_PLL3_Config>
 8006a26:	4603      	mov	r3, r0
 8006a28:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006a2c:	e004      	b.n	8006a38 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006a2e:	2301      	movs	r3, #1
 8006a30:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006a34:	e000      	b.n	8006a38 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8006a36:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006a38:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006a3c:	2b00      	cmp	r3, #0
 8006a3e:	d10a      	bne.n	8006a56 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8006a40:	4b7b      	ldr	r3, [pc, #492]	@ (8006c30 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006a42:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006a44:	f023 0107 	bic.w	r1, r3, #7
 8006a48:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006a4c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006a4e:	4a78      	ldr	r2, [pc, #480]	@ (8006c30 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006a50:	430b      	orrs	r3, r1
 8006a52:	6513      	str	r3, [r2, #80]	@ 0x50
 8006a54:	e003      	b.n	8006a5e <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006a56:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006a5a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8006a5e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006a62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a66:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 8006a6a:	f04f 0b00 	mov.w	fp, #0
 8006a6e:	ea5a 030b 	orrs.w	r3, sl, fp
 8006a72:	d04c      	beq.n	8006b0e <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 8006a74:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006a78:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006a7a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006a7e:	d030      	beq.n	8006ae2 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 8006a80:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006a84:	d829      	bhi.n	8006ada <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8006a86:	2bc0      	cmp	r3, #192	@ 0xc0
 8006a88:	d02d      	beq.n	8006ae6 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8006a8a:	2bc0      	cmp	r3, #192	@ 0xc0
 8006a8c:	d825      	bhi.n	8006ada <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8006a8e:	2b80      	cmp	r3, #128	@ 0x80
 8006a90:	d018      	beq.n	8006ac4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8006a92:	2b80      	cmp	r3, #128	@ 0x80
 8006a94:	d821      	bhi.n	8006ada <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8006a96:	2b00      	cmp	r3, #0
 8006a98:	d002      	beq.n	8006aa0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 8006a9a:	2b40      	cmp	r3, #64	@ 0x40
 8006a9c:	d007      	beq.n	8006aae <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 8006a9e:	e01c      	b.n	8006ada <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006aa0:	4b63      	ldr	r3, [pc, #396]	@ (8006c30 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006aa2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006aa4:	4a62      	ldr	r2, [pc, #392]	@ (8006c30 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006aa6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006aaa:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8006aac:	e01c      	b.n	8006ae8 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006aae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006ab2:	3308      	adds	r3, #8
 8006ab4:	2100      	movs	r1, #0
 8006ab6:	4618      	mov	r0, r3
 8006ab8:	f001 fbe6 	bl	8008288 <RCCEx_PLL2_Config>
 8006abc:	4603      	mov	r3, r0
 8006abe:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8006ac2:	e011      	b.n	8006ae8 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006ac4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006ac8:	3328      	adds	r3, #40	@ 0x28
 8006aca:	2100      	movs	r1, #0
 8006acc:	4618      	mov	r0, r3
 8006ace:	f001 fc8d 	bl	80083ec <RCCEx_PLL3_Config>
 8006ad2:	4603      	mov	r3, r0
 8006ad4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8006ad8:	e006      	b.n	8006ae8 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006ada:	2301      	movs	r3, #1
 8006adc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006ae0:	e002      	b.n	8006ae8 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8006ae2:	bf00      	nop
 8006ae4:	e000      	b.n	8006ae8 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8006ae6:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006ae8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006aec:	2b00      	cmp	r3, #0
 8006aee:	d10a      	bne.n	8006b06 <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8006af0:	4b4f      	ldr	r3, [pc, #316]	@ (8006c30 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006af2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006af4:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 8006af8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006afc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006afe:	4a4c      	ldr	r2, [pc, #304]	@ (8006c30 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006b00:	430b      	orrs	r3, r1
 8006b02:	6513      	str	r3, [r2, #80]	@ 0x50
 8006b04:	e003      	b.n	8006b0e <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006b06:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006b0a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8006b0e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006b12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b16:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 8006b1a:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 8006b1e:	2300      	movs	r3, #0
 8006b20:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 8006b24:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 8006b28:	460b      	mov	r3, r1
 8006b2a:	4313      	orrs	r3, r2
 8006b2c:	d053      	beq.n	8006bd6 <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8006b2e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006b32:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8006b36:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8006b3a:	d035      	beq.n	8006ba8 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8006b3c:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8006b40:	d82e      	bhi.n	8006ba0 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8006b42:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8006b46:	d031      	beq.n	8006bac <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8006b48:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8006b4c:	d828      	bhi.n	8006ba0 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8006b4e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006b52:	d01a      	beq.n	8006b8a <HAL_RCCEx_PeriphCLKConfig+0x292>
 8006b54:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006b58:	d822      	bhi.n	8006ba0 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8006b5a:	2b00      	cmp	r3, #0
 8006b5c:	d003      	beq.n	8006b66 <HAL_RCCEx_PeriphCLKConfig+0x26e>
 8006b5e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006b62:	d007      	beq.n	8006b74 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8006b64:	e01c      	b.n	8006ba0 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006b66:	4b32      	ldr	r3, [pc, #200]	@ (8006c30 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006b68:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006b6a:	4a31      	ldr	r2, [pc, #196]	@ (8006c30 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006b6c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006b70:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006b72:	e01c      	b.n	8006bae <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006b74:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006b78:	3308      	adds	r3, #8
 8006b7a:	2100      	movs	r1, #0
 8006b7c:	4618      	mov	r0, r3
 8006b7e:	f001 fb83 	bl	8008288 <RCCEx_PLL2_Config>
 8006b82:	4603      	mov	r3, r0
 8006b84:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8006b88:	e011      	b.n	8006bae <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006b8a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006b8e:	3328      	adds	r3, #40	@ 0x28
 8006b90:	2100      	movs	r1, #0
 8006b92:	4618      	mov	r0, r3
 8006b94:	f001 fc2a 	bl	80083ec <RCCEx_PLL3_Config>
 8006b98:	4603      	mov	r3, r0
 8006b9a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006b9e:	e006      	b.n	8006bae <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8006ba0:	2301      	movs	r3, #1
 8006ba2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006ba6:	e002      	b.n	8006bae <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8006ba8:	bf00      	nop
 8006baa:	e000      	b.n	8006bae <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8006bac:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006bae:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006bb2:	2b00      	cmp	r3, #0
 8006bb4:	d10b      	bne.n	8006bce <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8006bb6:	4b1e      	ldr	r3, [pc, #120]	@ (8006c30 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006bb8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006bba:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 8006bbe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006bc2:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8006bc6:	4a1a      	ldr	r2, [pc, #104]	@ (8006c30 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006bc8:	430b      	orrs	r3, r1
 8006bca:	6593      	str	r3, [r2, #88]	@ 0x58
 8006bcc:	e003      	b.n	8006bd6 <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006bce:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006bd2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8006bd6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006bda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006bde:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8006be2:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8006be6:	2300      	movs	r3, #0
 8006be8:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8006bec:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 8006bf0:	460b      	mov	r3, r1
 8006bf2:	4313      	orrs	r3, r2
 8006bf4:	d056      	beq.n	8006ca4 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8006bf6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006bfa:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8006bfe:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8006c02:	d038      	beq.n	8006c76 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8006c04:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8006c08:	d831      	bhi.n	8006c6e <HAL_RCCEx_PeriphCLKConfig+0x376>
 8006c0a:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8006c0e:	d034      	beq.n	8006c7a <HAL_RCCEx_PeriphCLKConfig+0x382>
 8006c10:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8006c14:	d82b      	bhi.n	8006c6e <HAL_RCCEx_PeriphCLKConfig+0x376>
 8006c16:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006c1a:	d01d      	beq.n	8006c58 <HAL_RCCEx_PeriphCLKConfig+0x360>
 8006c1c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006c20:	d825      	bhi.n	8006c6e <HAL_RCCEx_PeriphCLKConfig+0x376>
 8006c22:	2b00      	cmp	r3, #0
 8006c24:	d006      	beq.n	8006c34 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8006c26:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8006c2a:	d00a      	beq.n	8006c42 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8006c2c:	e01f      	b.n	8006c6e <HAL_RCCEx_PeriphCLKConfig+0x376>
 8006c2e:	bf00      	nop
 8006c30:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006c34:	4ba2      	ldr	r3, [pc, #648]	@ (8006ec0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006c36:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006c38:	4aa1      	ldr	r2, [pc, #644]	@ (8006ec0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006c3a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006c3e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006c40:	e01c      	b.n	8006c7c <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006c42:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006c46:	3308      	adds	r3, #8
 8006c48:	2100      	movs	r1, #0
 8006c4a:	4618      	mov	r0, r3
 8006c4c:	f001 fb1c 	bl	8008288 <RCCEx_PLL2_Config>
 8006c50:	4603      	mov	r3, r0
 8006c52:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8006c56:	e011      	b.n	8006c7c <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006c58:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006c5c:	3328      	adds	r3, #40	@ 0x28
 8006c5e:	2100      	movs	r1, #0
 8006c60:	4618      	mov	r0, r3
 8006c62:	f001 fbc3 	bl	80083ec <RCCEx_PLL3_Config>
 8006c66:	4603      	mov	r3, r0
 8006c68:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006c6c:	e006      	b.n	8006c7c <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8006c6e:	2301      	movs	r3, #1
 8006c70:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006c74:	e002      	b.n	8006c7c <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8006c76:	bf00      	nop
 8006c78:	e000      	b.n	8006c7c <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8006c7a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006c7c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006c80:	2b00      	cmp	r3, #0
 8006c82:	d10b      	bne.n	8006c9c <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8006c84:	4b8e      	ldr	r3, [pc, #568]	@ (8006ec0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006c86:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006c88:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8006c8c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006c90:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8006c94:	4a8a      	ldr	r2, [pc, #552]	@ (8006ec0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006c96:	430b      	orrs	r3, r1
 8006c98:	6593      	str	r3, [r2, #88]	@ 0x58
 8006c9a:	e003      	b.n	8006ca4 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006c9c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006ca0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8006ca4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006ca8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006cac:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8006cb0:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8006cb4:	2300      	movs	r3, #0
 8006cb6:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8006cba:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 8006cbe:	460b      	mov	r3, r1
 8006cc0:	4313      	orrs	r3, r2
 8006cc2:	d03a      	beq.n	8006d3a <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 8006cc4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006cc8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006cca:	2b30      	cmp	r3, #48	@ 0x30
 8006ccc:	d01f      	beq.n	8006d0e <HAL_RCCEx_PeriphCLKConfig+0x416>
 8006cce:	2b30      	cmp	r3, #48	@ 0x30
 8006cd0:	d819      	bhi.n	8006d06 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8006cd2:	2b20      	cmp	r3, #32
 8006cd4:	d00c      	beq.n	8006cf0 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 8006cd6:	2b20      	cmp	r3, #32
 8006cd8:	d815      	bhi.n	8006d06 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8006cda:	2b00      	cmp	r3, #0
 8006cdc:	d019      	beq.n	8006d12 <HAL_RCCEx_PeriphCLKConfig+0x41a>
 8006cde:	2b10      	cmp	r3, #16
 8006ce0:	d111      	bne.n	8006d06 <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006ce2:	4b77      	ldr	r3, [pc, #476]	@ (8006ec0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006ce4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006ce6:	4a76      	ldr	r2, [pc, #472]	@ (8006ec0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006ce8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006cec:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8006cee:	e011      	b.n	8006d14 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8006cf0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006cf4:	3308      	adds	r3, #8
 8006cf6:	2102      	movs	r1, #2
 8006cf8:	4618      	mov	r0, r3
 8006cfa:	f001 fac5 	bl	8008288 <RCCEx_PLL2_Config>
 8006cfe:	4603      	mov	r3, r0
 8006d00:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8006d04:	e006      	b.n	8006d14 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8006d06:	2301      	movs	r3, #1
 8006d08:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006d0c:	e002      	b.n	8006d14 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8006d0e:	bf00      	nop
 8006d10:	e000      	b.n	8006d14 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8006d12:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006d14:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006d18:	2b00      	cmp	r3, #0
 8006d1a:	d10a      	bne.n	8006d32 <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8006d1c:	4b68      	ldr	r3, [pc, #416]	@ (8006ec0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006d1e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006d20:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8006d24:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006d28:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006d2a:	4a65      	ldr	r2, [pc, #404]	@ (8006ec0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006d2c:	430b      	orrs	r3, r1
 8006d2e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8006d30:	e003      	b.n	8006d3a <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006d32:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006d36:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8006d3a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006d3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d42:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 8006d46:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8006d4a:	2300      	movs	r3, #0
 8006d4c:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8006d50:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8006d54:	460b      	mov	r3, r1
 8006d56:	4313      	orrs	r3, r2
 8006d58:	d051      	beq.n	8006dfe <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8006d5a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006d5e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006d60:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006d64:	d035      	beq.n	8006dd2 <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8006d66:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006d6a:	d82e      	bhi.n	8006dca <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8006d6c:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8006d70:	d031      	beq.n	8006dd6 <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8006d72:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8006d76:	d828      	bhi.n	8006dca <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8006d78:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006d7c:	d01a      	beq.n	8006db4 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 8006d7e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006d82:	d822      	bhi.n	8006dca <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8006d84:	2b00      	cmp	r3, #0
 8006d86:	d003      	beq.n	8006d90 <HAL_RCCEx_PeriphCLKConfig+0x498>
 8006d88:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006d8c:	d007      	beq.n	8006d9e <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 8006d8e:	e01c      	b.n	8006dca <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006d90:	4b4b      	ldr	r3, [pc, #300]	@ (8006ec0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006d92:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006d94:	4a4a      	ldr	r2, [pc, #296]	@ (8006ec0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006d96:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006d9a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8006d9c:	e01c      	b.n	8006dd8 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006d9e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006da2:	3308      	adds	r3, #8
 8006da4:	2100      	movs	r1, #0
 8006da6:	4618      	mov	r0, r3
 8006da8:	f001 fa6e 	bl	8008288 <RCCEx_PLL2_Config>
 8006dac:	4603      	mov	r3, r0
 8006dae:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8006db2:	e011      	b.n	8006dd8 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006db4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006db8:	3328      	adds	r3, #40	@ 0x28
 8006dba:	2100      	movs	r1, #0
 8006dbc:	4618      	mov	r0, r3
 8006dbe:	f001 fb15 	bl	80083ec <RCCEx_PLL3_Config>
 8006dc2:	4603      	mov	r3, r0
 8006dc4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8006dc8:	e006      	b.n	8006dd8 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006dca:	2301      	movs	r3, #1
 8006dcc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006dd0:	e002      	b.n	8006dd8 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8006dd2:	bf00      	nop
 8006dd4:	e000      	b.n	8006dd8 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8006dd6:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006dd8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006ddc:	2b00      	cmp	r3, #0
 8006dde:	d10a      	bne.n	8006df6 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8006de0:	4b37      	ldr	r3, [pc, #220]	@ (8006ec0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006de2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006de4:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8006de8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006dec:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006dee:	4a34      	ldr	r2, [pc, #208]	@ (8006ec0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006df0:	430b      	orrs	r3, r1
 8006df2:	6513      	str	r3, [r2, #80]	@ 0x50
 8006df4:	e003      	b.n	8006dfe <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006df6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006dfa:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8006dfe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006e02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e06:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8006e0a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8006e0e:	2300      	movs	r3, #0
 8006e10:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8006e14:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8006e18:	460b      	mov	r3, r1
 8006e1a:	4313      	orrs	r3, r2
 8006e1c:	d056      	beq.n	8006ecc <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8006e1e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006e22:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006e24:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8006e28:	d033      	beq.n	8006e92 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8006e2a:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8006e2e:	d82c      	bhi.n	8006e8a <HAL_RCCEx_PeriphCLKConfig+0x592>
 8006e30:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8006e34:	d02f      	beq.n	8006e96 <HAL_RCCEx_PeriphCLKConfig+0x59e>
 8006e36:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8006e3a:	d826      	bhi.n	8006e8a <HAL_RCCEx_PeriphCLKConfig+0x592>
 8006e3c:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8006e40:	d02b      	beq.n	8006e9a <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 8006e42:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8006e46:	d820      	bhi.n	8006e8a <HAL_RCCEx_PeriphCLKConfig+0x592>
 8006e48:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006e4c:	d012      	beq.n	8006e74 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 8006e4e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006e52:	d81a      	bhi.n	8006e8a <HAL_RCCEx_PeriphCLKConfig+0x592>
 8006e54:	2b00      	cmp	r3, #0
 8006e56:	d022      	beq.n	8006e9e <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8006e58:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006e5c:	d115      	bne.n	8006e8a <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006e5e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006e62:	3308      	adds	r3, #8
 8006e64:	2101      	movs	r1, #1
 8006e66:	4618      	mov	r0, r3
 8006e68:	f001 fa0e 	bl	8008288 <RCCEx_PLL2_Config>
 8006e6c:	4603      	mov	r3, r0
 8006e6e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8006e72:	e015      	b.n	8006ea0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006e74:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006e78:	3328      	adds	r3, #40	@ 0x28
 8006e7a:	2101      	movs	r1, #1
 8006e7c:	4618      	mov	r0, r3
 8006e7e:	f001 fab5 	bl	80083ec <RCCEx_PLL3_Config>
 8006e82:	4603      	mov	r3, r0
 8006e84:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8006e88:	e00a      	b.n	8006ea0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006e8a:	2301      	movs	r3, #1
 8006e8c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006e90:	e006      	b.n	8006ea0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8006e92:	bf00      	nop
 8006e94:	e004      	b.n	8006ea0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8006e96:	bf00      	nop
 8006e98:	e002      	b.n	8006ea0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8006e9a:	bf00      	nop
 8006e9c:	e000      	b.n	8006ea0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8006e9e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006ea0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006ea4:	2b00      	cmp	r3, #0
 8006ea6:	d10d      	bne.n	8006ec4 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8006ea8:	4b05      	ldr	r3, [pc, #20]	@ (8006ec0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006eaa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006eac:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8006eb0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006eb4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006eb6:	4a02      	ldr	r2, [pc, #8]	@ (8006ec0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006eb8:	430b      	orrs	r3, r1
 8006eba:	6513      	str	r3, [r2, #80]	@ 0x50
 8006ebc:	e006      	b.n	8006ecc <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8006ebe:	bf00      	nop
 8006ec0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006ec4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006ec8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8006ecc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006ed0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ed4:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8006ed8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8006edc:	2300      	movs	r3, #0
 8006ede:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8006ee2:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 8006ee6:	460b      	mov	r3, r1
 8006ee8:	4313      	orrs	r3, r2
 8006eea:	d055      	beq.n	8006f98 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8006eec:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006ef0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8006ef4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8006ef8:	d033      	beq.n	8006f62 <HAL_RCCEx_PeriphCLKConfig+0x66a>
 8006efa:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8006efe:	d82c      	bhi.n	8006f5a <HAL_RCCEx_PeriphCLKConfig+0x662>
 8006f00:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006f04:	d02f      	beq.n	8006f66 <HAL_RCCEx_PeriphCLKConfig+0x66e>
 8006f06:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006f0a:	d826      	bhi.n	8006f5a <HAL_RCCEx_PeriphCLKConfig+0x662>
 8006f0c:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8006f10:	d02b      	beq.n	8006f6a <HAL_RCCEx_PeriphCLKConfig+0x672>
 8006f12:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8006f16:	d820      	bhi.n	8006f5a <HAL_RCCEx_PeriphCLKConfig+0x662>
 8006f18:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006f1c:	d012      	beq.n	8006f44 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 8006f1e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006f22:	d81a      	bhi.n	8006f5a <HAL_RCCEx_PeriphCLKConfig+0x662>
 8006f24:	2b00      	cmp	r3, #0
 8006f26:	d022      	beq.n	8006f6e <HAL_RCCEx_PeriphCLKConfig+0x676>
 8006f28:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006f2c:	d115      	bne.n	8006f5a <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006f2e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006f32:	3308      	adds	r3, #8
 8006f34:	2101      	movs	r1, #1
 8006f36:	4618      	mov	r0, r3
 8006f38:	f001 f9a6 	bl	8008288 <RCCEx_PLL2_Config>
 8006f3c:	4603      	mov	r3, r0
 8006f3e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8006f42:	e015      	b.n	8006f70 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006f44:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006f48:	3328      	adds	r3, #40	@ 0x28
 8006f4a:	2101      	movs	r1, #1
 8006f4c:	4618      	mov	r0, r3
 8006f4e:	f001 fa4d 	bl	80083ec <RCCEx_PLL3_Config>
 8006f52:	4603      	mov	r3, r0
 8006f54:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8006f58:	e00a      	b.n	8006f70 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8006f5a:	2301      	movs	r3, #1
 8006f5c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006f60:	e006      	b.n	8006f70 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8006f62:	bf00      	nop
 8006f64:	e004      	b.n	8006f70 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8006f66:	bf00      	nop
 8006f68:	e002      	b.n	8006f70 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8006f6a:	bf00      	nop
 8006f6c:	e000      	b.n	8006f70 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8006f6e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006f70:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006f74:	2b00      	cmp	r3, #0
 8006f76:	d10b      	bne.n	8006f90 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8006f78:	4ba3      	ldr	r3, [pc, #652]	@ (8007208 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006f7a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006f7c:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8006f80:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006f84:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8006f88:	4a9f      	ldr	r2, [pc, #636]	@ (8007208 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006f8a:	430b      	orrs	r3, r1
 8006f8c:	6593      	str	r3, [r2, #88]	@ 0x58
 8006f8e:	e003      	b.n	8006f98 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006f90:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006f94:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8006f98:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006f9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006fa0:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8006fa4:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8006fa8:	2300      	movs	r3, #0
 8006faa:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8006fae:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8006fb2:	460b      	mov	r3, r1
 8006fb4:	4313      	orrs	r3, r2
 8006fb6:	d037      	beq.n	8007028 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8006fb8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006fbc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006fbe:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006fc2:	d00e      	beq.n	8006fe2 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 8006fc4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006fc8:	d816      	bhi.n	8006ff8 <HAL_RCCEx_PeriphCLKConfig+0x700>
 8006fca:	2b00      	cmp	r3, #0
 8006fcc:	d018      	beq.n	8007000 <HAL_RCCEx_PeriphCLKConfig+0x708>
 8006fce:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006fd2:	d111      	bne.n	8006ff8 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006fd4:	4b8c      	ldr	r3, [pc, #560]	@ (8007208 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006fd6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006fd8:	4a8b      	ldr	r2, [pc, #556]	@ (8007208 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006fda:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006fde:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8006fe0:	e00f      	b.n	8007002 <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006fe2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006fe6:	3308      	adds	r3, #8
 8006fe8:	2101      	movs	r1, #1
 8006fea:	4618      	mov	r0, r3
 8006fec:	f001 f94c 	bl	8008288 <RCCEx_PLL2_Config>
 8006ff0:	4603      	mov	r3, r0
 8006ff2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8006ff6:	e004      	b.n	8007002 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006ff8:	2301      	movs	r3, #1
 8006ffa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006ffe:	e000      	b.n	8007002 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 8007000:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007002:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007006:	2b00      	cmp	r3, #0
 8007008:	d10a      	bne.n	8007020 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800700a:	4b7f      	ldr	r3, [pc, #508]	@ (8007208 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800700c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800700e:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8007012:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007016:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007018:	4a7b      	ldr	r2, [pc, #492]	@ (8007208 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800701a:	430b      	orrs	r3, r1
 800701c:	6513      	str	r3, [r2, #80]	@ 0x50
 800701e:	e003      	b.n	8007028 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007020:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007024:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8007028:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800702c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007030:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8007034:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8007038:	2300      	movs	r3, #0
 800703a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800703e:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 8007042:	460b      	mov	r3, r1
 8007044:	4313      	orrs	r3, r2
 8007046:	d039      	beq.n	80070bc <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8007048:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800704c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800704e:	2b03      	cmp	r3, #3
 8007050:	d81c      	bhi.n	800708c <HAL_RCCEx_PeriphCLKConfig+0x794>
 8007052:	a201      	add	r2, pc, #4	@ (adr r2, 8007058 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 8007054:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007058:	08007095 	.word	0x08007095
 800705c:	08007069 	.word	0x08007069
 8007060:	08007077 	.word	0x08007077
 8007064:	08007095 	.word	0x08007095
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007068:	4b67      	ldr	r3, [pc, #412]	@ (8007208 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800706a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800706c:	4a66      	ldr	r2, [pc, #408]	@ (8007208 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800706e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007072:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8007074:	e00f      	b.n	8007096 <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8007076:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800707a:	3308      	adds	r3, #8
 800707c:	2102      	movs	r1, #2
 800707e:	4618      	mov	r0, r3
 8007080:	f001 f902 	bl	8008288 <RCCEx_PLL2_Config>
 8007084:	4603      	mov	r3, r0
 8007086:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 800708a:	e004      	b.n	8007096 <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800708c:	2301      	movs	r3, #1
 800708e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007092:	e000      	b.n	8007096 <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 8007094:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007096:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800709a:	2b00      	cmp	r3, #0
 800709c:	d10a      	bne.n	80070b4 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800709e:	4b5a      	ldr	r3, [pc, #360]	@ (8007208 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80070a0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80070a2:	f023 0103 	bic.w	r1, r3, #3
 80070a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80070aa:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80070ac:	4a56      	ldr	r2, [pc, #344]	@ (8007208 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80070ae:	430b      	orrs	r3, r1
 80070b0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80070b2:	e003      	b.n	80070bc <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80070b4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80070b8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80070bc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80070c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80070c4:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 80070c8:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80070cc:	2300      	movs	r3, #0
 80070ce:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80070d2:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 80070d6:	460b      	mov	r3, r1
 80070d8:	4313      	orrs	r3, r2
 80070da:	f000 809f 	beq.w	800721c <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80070de:	4b4b      	ldr	r3, [pc, #300]	@ (800720c <HAL_RCCEx_PeriphCLKConfig+0x914>)
 80070e0:	681b      	ldr	r3, [r3, #0]
 80070e2:	4a4a      	ldr	r2, [pc, #296]	@ (800720c <HAL_RCCEx_PeriphCLKConfig+0x914>)
 80070e4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80070e8:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80070ea:	f7fd fa39 	bl	8004560 <HAL_GetTick>
 80070ee:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80070f2:	e00b      	b.n	800710c <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80070f4:	f7fd fa34 	bl	8004560 <HAL_GetTick>
 80070f8:	4602      	mov	r2, r0
 80070fa:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 80070fe:	1ad3      	subs	r3, r2, r3
 8007100:	2b64      	cmp	r3, #100	@ 0x64
 8007102:	d903      	bls.n	800710c <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 8007104:	2303      	movs	r3, #3
 8007106:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800710a:	e005      	b.n	8007118 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800710c:	4b3f      	ldr	r3, [pc, #252]	@ (800720c <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800710e:	681b      	ldr	r3, [r3, #0]
 8007110:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007114:	2b00      	cmp	r3, #0
 8007116:	d0ed      	beq.n	80070f4 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 8007118:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800711c:	2b00      	cmp	r3, #0
 800711e:	d179      	bne.n	8007214 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8007120:	4b39      	ldr	r3, [pc, #228]	@ (8007208 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007122:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8007124:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007128:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800712c:	4053      	eors	r3, r2
 800712e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007132:	2b00      	cmp	r3, #0
 8007134:	d015      	beq.n	8007162 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8007136:	4b34      	ldr	r3, [pc, #208]	@ (8007208 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007138:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800713a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800713e:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8007142:	4b31      	ldr	r3, [pc, #196]	@ (8007208 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007144:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007146:	4a30      	ldr	r2, [pc, #192]	@ (8007208 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007148:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800714c:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800714e:	4b2e      	ldr	r3, [pc, #184]	@ (8007208 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007150:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007152:	4a2d      	ldr	r2, [pc, #180]	@ (8007208 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007154:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007158:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800715a:	4a2b      	ldr	r2, [pc, #172]	@ (8007208 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800715c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8007160:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8007162:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007166:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800716a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800716e:	d118      	bne.n	80071a2 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007170:	f7fd f9f6 	bl	8004560 <HAL_GetTick>
 8007174:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8007178:	e00d      	b.n	8007196 <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800717a:	f7fd f9f1 	bl	8004560 <HAL_GetTick>
 800717e:	4602      	mov	r2, r0
 8007180:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8007184:	1ad2      	subs	r2, r2, r3
 8007186:	f241 3388 	movw	r3, #5000	@ 0x1388
 800718a:	429a      	cmp	r2, r3
 800718c:	d903      	bls.n	8007196 <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 800718e:	2303      	movs	r3, #3
 8007190:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
            break;
 8007194:	e005      	b.n	80071a2 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8007196:	4b1c      	ldr	r3, [pc, #112]	@ (8007208 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007198:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800719a:	f003 0302 	and.w	r3, r3, #2
 800719e:	2b00      	cmp	r3, #0
 80071a0:	d0eb      	beq.n	800717a <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 80071a2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80071a6:	2b00      	cmp	r3, #0
 80071a8:	d129      	bne.n	80071fe <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80071aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80071ae:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80071b2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80071b6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80071ba:	d10e      	bne.n	80071da <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 80071bc:	4b12      	ldr	r3, [pc, #72]	@ (8007208 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80071be:	691b      	ldr	r3, [r3, #16]
 80071c0:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 80071c4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80071c8:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80071cc:	091a      	lsrs	r2, r3, #4
 80071ce:	4b10      	ldr	r3, [pc, #64]	@ (8007210 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 80071d0:	4013      	ands	r3, r2
 80071d2:	4a0d      	ldr	r2, [pc, #52]	@ (8007208 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80071d4:	430b      	orrs	r3, r1
 80071d6:	6113      	str	r3, [r2, #16]
 80071d8:	e005      	b.n	80071e6 <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 80071da:	4b0b      	ldr	r3, [pc, #44]	@ (8007208 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80071dc:	691b      	ldr	r3, [r3, #16]
 80071de:	4a0a      	ldr	r2, [pc, #40]	@ (8007208 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80071e0:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 80071e4:	6113      	str	r3, [r2, #16]
 80071e6:	4b08      	ldr	r3, [pc, #32]	@ (8007208 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80071e8:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 80071ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80071ee:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80071f2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80071f6:	4a04      	ldr	r2, [pc, #16]	@ (8007208 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80071f8:	430b      	orrs	r3, r1
 80071fa:	6713      	str	r3, [r2, #112]	@ 0x70
 80071fc:	e00e      	b.n	800721c <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80071fe:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007202:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 8007206:	e009      	b.n	800721c <HAL_RCCEx_PeriphCLKConfig+0x924>
 8007208:	58024400 	.word	0x58024400
 800720c:	58024800 	.word	0x58024800
 8007210:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007214:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007218:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800721c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007220:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007224:	f002 0301 	and.w	r3, r2, #1
 8007228:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800722c:	2300      	movs	r3, #0
 800722e:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8007232:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8007236:	460b      	mov	r3, r1
 8007238:	4313      	orrs	r3, r2
 800723a:	f000 8089 	beq.w	8007350 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 800723e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007242:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8007244:	2b28      	cmp	r3, #40	@ 0x28
 8007246:	d86b      	bhi.n	8007320 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 8007248:	a201      	add	r2, pc, #4	@ (adr r2, 8007250 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800724a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800724e:	bf00      	nop
 8007250:	08007329 	.word	0x08007329
 8007254:	08007321 	.word	0x08007321
 8007258:	08007321 	.word	0x08007321
 800725c:	08007321 	.word	0x08007321
 8007260:	08007321 	.word	0x08007321
 8007264:	08007321 	.word	0x08007321
 8007268:	08007321 	.word	0x08007321
 800726c:	08007321 	.word	0x08007321
 8007270:	080072f5 	.word	0x080072f5
 8007274:	08007321 	.word	0x08007321
 8007278:	08007321 	.word	0x08007321
 800727c:	08007321 	.word	0x08007321
 8007280:	08007321 	.word	0x08007321
 8007284:	08007321 	.word	0x08007321
 8007288:	08007321 	.word	0x08007321
 800728c:	08007321 	.word	0x08007321
 8007290:	0800730b 	.word	0x0800730b
 8007294:	08007321 	.word	0x08007321
 8007298:	08007321 	.word	0x08007321
 800729c:	08007321 	.word	0x08007321
 80072a0:	08007321 	.word	0x08007321
 80072a4:	08007321 	.word	0x08007321
 80072a8:	08007321 	.word	0x08007321
 80072ac:	08007321 	.word	0x08007321
 80072b0:	08007329 	.word	0x08007329
 80072b4:	08007321 	.word	0x08007321
 80072b8:	08007321 	.word	0x08007321
 80072bc:	08007321 	.word	0x08007321
 80072c0:	08007321 	.word	0x08007321
 80072c4:	08007321 	.word	0x08007321
 80072c8:	08007321 	.word	0x08007321
 80072cc:	08007321 	.word	0x08007321
 80072d0:	08007329 	.word	0x08007329
 80072d4:	08007321 	.word	0x08007321
 80072d8:	08007321 	.word	0x08007321
 80072dc:	08007321 	.word	0x08007321
 80072e0:	08007321 	.word	0x08007321
 80072e4:	08007321 	.word	0x08007321
 80072e8:	08007321 	.word	0x08007321
 80072ec:	08007321 	.word	0x08007321
 80072f0:	08007329 	.word	0x08007329
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80072f4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80072f8:	3308      	adds	r3, #8
 80072fa:	2101      	movs	r1, #1
 80072fc:	4618      	mov	r0, r3
 80072fe:	f000 ffc3 	bl	8008288 <RCCEx_PLL2_Config>
 8007302:	4603      	mov	r3, r0
 8007304:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8007308:	e00f      	b.n	800732a <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800730a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800730e:	3328      	adds	r3, #40	@ 0x28
 8007310:	2101      	movs	r1, #1
 8007312:	4618      	mov	r0, r3
 8007314:	f001 f86a 	bl	80083ec <RCCEx_PLL3_Config>
 8007318:	4603      	mov	r3, r0
 800731a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800731e:	e004      	b.n	800732a <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007320:	2301      	movs	r3, #1
 8007322:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007326:	e000      	b.n	800732a <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 8007328:	bf00      	nop
    }

    if (ret == HAL_OK)
 800732a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800732e:	2b00      	cmp	r3, #0
 8007330:	d10a      	bne.n	8007348 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8007332:	4bbf      	ldr	r3, [pc, #764]	@ (8007630 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007334:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007336:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 800733a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800733e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8007340:	4abb      	ldr	r2, [pc, #748]	@ (8007630 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007342:	430b      	orrs	r3, r1
 8007344:	6553      	str	r3, [r2, #84]	@ 0x54
 8007346:	e003      	b.n	8007350 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007348:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800734c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8007350:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007354:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007358:	f002 0302 	and.w	r3, r2, #2
 800735c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8007360:	2300      	movs	r3, #0
 8007362:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8007366:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 800736a:	460b      	mov	r3, r1
 800736c:	4313      	orrs	r3, r2
 800736e:	d041      	beq.n	80073f4 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8007370:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007374:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8007376:	2b05      	cmp	r3, #5
 8007378:	d824      	bhi.n	80073c4 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 800737a:	a201      	add	r2, pc, #4	@ (adr r2, 8007380 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 800737c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007380:	080073cd 	.word	0x080073cd
 8007384:	08007399 	.word	0x08007399
 8007388:	080073af 	.word	0x080073af
 800738c:	080073cd 	.word	0x080073cd
 8007390:	080073cd 	.word	0x080073cd
 8007394:	080073cd 	.word	0x080073cd
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007398:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800739c:	3308      	adds	r3, #8
 800739e:	2101      	movs	r1, #1
 80073a0:	4618      	mov	r0, r3
 80073a2:	f000 ff71 	bl	8008288 <RCCEx_PLL2_Config>
 80073a6:	4603      	mov	r3, r0
 80073a8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 80073ac:	e00f      	b.n	80073ce <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80073ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80073b2:	3328      	adds	r3, #40	@ 0x28
 80073b4:	2101      	movs	r1, #1
 80073b6:	4618      	mov	r0, r3
 80073b8:	f001 f818 	bl	80083ec <RCCEx_PLL3_Config>
 80073bc:	4603      	mov	r3, r0
 80073be:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 80073c2:	e004      	b.n	80073ce <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80073c4:	2301      	movs	r3, #1
 80073c6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80073ca:	e000      	b.n	80073ce <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 80073cc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80073ce:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80073d2:	2b00      	cmp	r3, #0
 80073d4:	d10a      	bne.n	80073ec <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 80073d6:	4b96      	ldr	r3, [pc, #600]	@ (8007630 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80073d8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80073da:	f023 0107 	bic.w	r1, r3, #7
 80073de:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80073e2:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80073e4:	4a92      	ldr	r2, [pc, #584]	@ (8007630 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80073e6:	430b      	orrs	r3, r1
 80073e8:	6553      	str	r3, [r2, #84]	@ 0x54
 80073ea:	e003      	b.n	80073f4 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80073ec:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80073f0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80073f4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80073f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80073fc:	f002 0304 	and.w	r3, r2, #4
 8007400:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8007404:	2300      	movs	r3, #0
 8007406:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800740a:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 800740e:	460b      	mov	r3, r1
 8007410:	4313      	orrs	r3, r2
 8007412:	d044      	beq.n	800749e <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8007414:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007418:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800741c:	2b05      	cmp	r3, #5
 800741e:	d825      	bhi.n	800746c <HAL_RCCEx_PeriphCLKConfig+0xb74>
 8007420:	a201      	add	r2, pc, #4	@ (adr r2, 8007428 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 8007422:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007426:	bf00      	nop
 8007428:	08007475 	.word	0x08007475
 800742c:	08007441 	.word	0x08007441
 8007430:	08007457 	.word	0x08007457
 8007434:	08007475 	.word	0x08007475
 8007438:	08007475 	.word	0x08007475
 800743c:	08007475 	.word	0x08007475
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007440:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007444:	3308      	adds	r3, #8
 8007446:	2101      	movs	r1, #1
 8007448:	4618      	mov	r0, r3
 800744a:	f000 ff1d 	bl	8008288 <RCCEx_PLL2_Config>
 800744e:	4603      	mov	r3, r0
 8007450:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8007454:	e00f      	b.n	8007476 <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007456:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800745a:	3328      	adds	r3, #40	@ 0x28
 800745c:	2101      	movs	r1, #1
 800745e:	4618      	mov	r0, r3
 8007460:	f000 ffc4 	bl	80083ec <RCCEx_PLL3_Config>
 8007464:	4603      	mov	r3, r0
 8007466:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800746a:	e004      	b.n	8007476 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800746c:	2301      	movs	r3, #1
 800746e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007472:	e000      	b.n	8007476 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 8007474:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007476:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800747a:	2b00      	cmp	r3, #0
 800747c:	d10b      	bne.n	8007496 <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800747e:	4b6c      	ldr	r3, [pc, #432]	@ (8007630 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007480:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007482:	f023 0107 	bic.w	r1, r3, #7
 8007486:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800748a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800748e:	4a68      	ldr	r2, [pc, #416]	@ (8007630 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007490:	430b      	orrs	r3, r1
 8007492:	6593      	str	r3, [r2, #88]	@ 0x58
 8007494:	e003      	b.n	800749e <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007496:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800749a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800749e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80074a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80074a6:	f002 0320 	and.w	r3, r2, #32
 80074aa:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80074ae:	2300      	movs	r3, #0
 80074b0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80074b4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80074b8:	460b      	mov	r3, r1
 80074ba:	4313      	orrs	r3, r2
 80074bc:	d055      	beq.n	800756a <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 80074be:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80074c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80074c6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80074ca:	d033      	beq.n	8007534 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 80074cc:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80074d0:	d82c      	bhi.n	800752c <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80074d2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80074d6:	d02f      	beq.n	8007538 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 80074d8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80074dc:	d826      	bhi.n	800752c <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80074de:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80074e2:	d02b      	beq.n	800753c <HAL_RCCEx_PeriphCLKConfig+0xc44>
 80074e4:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80074e8:	d820      	bhi.n	800752c <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80074ea:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80074ee:	d012      	beq.n	8007516 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 80074f0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80074f4:	d81a      	bhi.n	800752c <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80074f6:	2b00      	cmp	r3, #0
 80074f8:	d022      	beq.n	8007540 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 80074fa:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80074fe:	d115      	bne.n	800752c <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007500:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007504:	3308      	adds	r3, #8
 8007506:	2100      	movs	r1, #0
 8007508:	4618      	mov	r0, r3
 800750a:	f000 febd 	bl	8008288 <RCCEx_PLL2_Config>
 800750e:	4603      	mov	r3, r0
 8007510:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8007514:	e015      	b.n	8007542 <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8007516:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800751a:	3328      	adds	r3, #40	@ 0x28
 800751c:	2102      	movs	r1, #2
 800751e:	4618      	mov	r0, r3
 8007520:	f000 ff64 	bl	80083ec <RCCEx_PLL3_Config>
 8007524:	4603      	mov	r3, r0
 8007526:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800752a:	e00a      	b.n	8007542 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800752c:	2301      	movs	r3, #1
 800752e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007532:	e006      	b.n	8007542 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8007534:	bf00      	nop
 8007536:	e004      	b.n	8007542 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8007538:	bf00      	nop
 800753a:	e002      	b.n	8007542 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800753c:	bf00      	nop
 800753e:	e000      	b.n	8007542 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8007540:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007542:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007546:	2b00      	cmp	r3, #0
 8007548:	d10b      	bne.n	8007562 <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800754a:	4b39      	ldr	r3, [pc, #228]	@ (8007630 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800754c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800754e:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8007552:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007556:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800755a:	4a35      	ldr	r2, [pc, #212]	@ (8007630 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800755c:	430b      	orrs	r3, r1
 800755e:	6553      	str	r3, [r2, #84]	@ 0x54
 8007560:	e003      	b.n	800756a <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007562:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007566:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800756a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800756e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007572:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 8007576:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800757a:	2300      	movs	r3, #0
 800757c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8007580:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8007584:	460b      	mov	r3, r1
 8007586:	4313      	orrs	r3, r2
 8007588:	d058      	beq.n	800763c <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 800758a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800758e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8007592:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8007596:	d033      	beq.n	8007600 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 8007598:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 800759c:	d82c      	bhi.n	80075f8 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800759e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80075a2:	d02f      	beq.n	8007604 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 80075a4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80075a8:	d826      	bhi.n	80075f8 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80075aa:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80075ae:	d02b      	beq.n	8007608 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 80075b0:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80075b4:	d820      	bhi.n	80075f8 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80075b6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80075ba:	d012      	beq.n	80075e2 <HAL_RCCEx_PeriphCLKConfig+0xcea>
 80075bc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80075c0:	d81a      	bhi.n	80075f8 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80075c2:	2b00      	cmp	r3, #0
 80075c4:	d022      	beq.n	800760c <HAL_RCCEx_PeriphCLKConfig+0xd14>
 80075c6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80075ca:	d115      	bne.n	80075f8 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80075cc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80075d0:	3308      	adds	r3, #8
 80075d2:	2100      	movs	r1, #0
 80075d4:	4618      	mov	r0, r3
 80075d6:	f000 fe57 	bl	8008288 <RCCEx_PLL2_Config>
 80075da:	4603      	mov	r3, r0
 80075dc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 80075e0:	e015      	b.n	800760e <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80075e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80075e6:	3328      	adds	r3, #40	@ 0x28
 80075e8:	2102      	movs	r1, #2
 80075ea:	4618      	mov	r0, r3
 80075ec:	f000 fefe 	bl	80083ec <RCCEx_PLL3_Config>
 80075f0:	4603      	mov	r3, r0
 80075f2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 80075f6:	e00a      	b.n	800760e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80075f8:	2301      	movs	r3, #1
 80075fa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80075fe:	e006      	b.n	800760e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8007600:	bf00      	nop
 8007602:	e004      	b.n	800760e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8007604:	bf00      	nop
 8007606:	e002      	b.n	800760e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8007608:	bf00      	nop
 800760a:	e000      	b.n	800760e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800760c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800760e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007612:	2b00      	cmp	r3, #0
 8007614:	d10e      	bne.n	8007634 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8007616:	4b06      	ldr	r3, [pc, #24]	@ (8007630 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007618:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800761a:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 800761e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007622:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8007626:	4a02      	ldr	r2, [pc, #8]	@ (8007630 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007628:	430b      	orrs	r3, r1
 800762a:	6593      	str	r3, [r2, #88]	@ 0x58
 800762c:	e006      	b.n	800763c <HAL_RCCEx_PeriphCLKConfig+0xd44>
 800762e:	bf00      	nop
 8007630:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007634:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007638:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800763c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007640:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007644:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8007648:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800764c:	2300      	movs	r3, #0
 800764e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8007652:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8007656:	460b      	mov	r3, r1
 8007658:	4313      	orrs	r3, r2
 800765a:	d055      	beq.n	8007708 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 800765c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007660:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8007664:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8007668:	d033      	beq.n	80076d2 <HAL_RCCEx_PeriphCLKConfig+0xdda>
 800766a:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 800766e:	d82c      	bhi.n	80076ca <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8007670:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007674:	d02f      	beq.n	80076d6 <HAL_RCCEx_PeriphCLKConfig+0xdde>
 8007676:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800767a:	d826      	bhi.n	80076ca <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800767c:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8007680:	d02b      	beq.n	80076da <HAL_RCCEx_PeriphCLKConfig+0xde2>
 8007682:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8007686:	d820      	bhi.n	80076ca <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8007688:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800768c:	d012      	beq.n	80076b4 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 800768e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007692:	d81a      	bhi.n	80076ca <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8007694:	2b00      	cmp	r3, #0
 8007696:	d022      	beq.n	80076de <HAL_RCCEx_PeriphCLKConfig+0xde6>
 8007698:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800769c:	d115      	bne.n	80076ca <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800769e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80076a2:	3308      	adds	r3, #8
 80076a4:	2100      	movs	r1, #0
 80076a6:	4618      	mov	r0, r3
 80076a8:	f000 fdee 	bl	8008288 <RCCEx_PLL2_Config>
 80076ac:	4603      	mov	r3, r0
 80076ae:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80076b2:	e015      	b.n	80076e0 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80076b4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80076b8:	3328      	adds	r3, #40	@ 0x28
 80076ba:	2102      	movs	r1, #2
 80076bc:	4618      	mov	r0, r3
 80076be:	f000 fe95 	bl	80083ec <RCCEx_PLL3_Config>
 80076c2:	4603      	mov	r3, r0
 80076c4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80076c8:	e00a      	b.n	80076e0 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80076ca:	2301      	movs	r3, #1
 80076cc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80076d0:	e006      	b.n	80076e0 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80076d2:	bf00      	nop
 80076d4:	e004      	b.n	80076e0 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80076d6:	bf00      	nop
 80076d8:	e002      	b.n	80076e0 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80076da:	bf00      	nop
 80076dc:	e000      	b.n	80076e0 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80076de:	bf00      	nop
    }

    if (ret == HAL_OK)
 80076e0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80076e4:	2b00      	cmp	r3, #0
 80076e6:	d10b      	bne.n	8007700 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 80076e8:	4ba1      	ldr	r3, [pc, #644]	@ (8007970 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80076ea:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80076ec:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 80076f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80076f4:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80076f8:	4a9d      	ldr	r2, [pc, #628]	@ (8007970 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80076fa:	430b      	orrs	r3, r1
 80076fc:	6593      	str	r3, [r2, #88]	@ 0x58
 80076fe:	e003      	b.n	8007708 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007700:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007704:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8007708:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800770c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007710:	f002 0308 	and.w	r3, r2, #8
 8007714:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8007718:	2300      	movs	r3, #0
 800771a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800771e:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8007722:	460b      	mov	r3, r1
 8007724:	4313      	orrs	r3, r2
 8007726:	d01e      	beq.n	8007766 <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8007728:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800772c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007730:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007734:	d10c      	bne.n	8007750 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8007736:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800773a:	3328      	adds	r3, #40	@ 0x28
 800773c:	2102      	movs	r1, #2
 800773e:	4618      	mov	r0, r3
 8007740:	f000 fe54 	bl	80083ec <RCCEx_PLL3_Config>
 8007744:	4603      	mov	r3, r0
 8007746:	2b00      	cmp	r3, #0
 8007748:	d002      	beq.n	8007750 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 800774a:	2301      	movs	r3, #1
 800774c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8007750:	4b87      	ldr	r3, [pc, #540]	@ (8007970 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007752:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007754:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8007758:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800775c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007760:	4a83      	ldr	r2, [pc, #524]	@ (8007970 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007762:	430b      	orrs	r3, r1
 8007764:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8007766:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800776a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800776e:	f002 0310 	and.w	r3, r2, #16
 8007772:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8007776:	2300      	movs	r3, #0
 8007778:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800777c:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8007780:	460b      	mov	r3, r1
 8007782:	4313      	orrs	r3, r2
 8007784:	d01e      	beq.n	80077c4 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8007786:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800778a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800778e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007792:	d10c      	bne.n	80077ae <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8007794:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007798:	3328      	adds	r3, #40	@ 0x28
 800779a:	2102      	movs	r1, #2
 800779c:	4618      	mov	r0, r3
 800779e:	f000 fe25 	bl	80083ec <RCCEx_PLL3_Config>
 80077a2:	4603      	mov	r3, r0
 80077a4:	2b00      	cmp	r3, #0
 80077a6:	d002      	beq.n	80077ae <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 80077a8:	2301      	movs	r3, #1
 80077aa:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80077ae:	4b70      	ldr	r3, [pc, #448]	@ (8007970 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80077b0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80077b2:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80077b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80077ba:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80077be:	4a6c      	ldr	r2, [pc, #432]	@ (8007970 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80077c0:	430b      	orrs	r3, r1
 80077c2:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80077c4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80077c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80077cc:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 80077d0:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80077d4:	2300      	movs	r3, #0
 80077d6:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80077da:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 80077de:	460b      	mov	r3, r1
 80077e0:	4313      	orrs	r3, r2
 80077e2:	d03e      	beq.n	8007862 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 80077e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80077e8:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80077ec:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80077f0:	d022      	beq.n	8007838 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 80077f2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80077f6:	d81b      	bhi.n	8007830 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 80077f8:	2b00      	cmp	r3, #0
 80077fa:	d003      	beq.n	8007804 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 80077fc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007800:	d00b      	beq.n	800781a <HAL_RCCEx_PeriphCLKConfig+0xf22>
 8007802:	e015      	b.n	8007830 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007804:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007808:	3308      	adds	r3, #8
 800780a:	2100      	movs	r1, #0
 800780c:	4618      	mov	r0, r3
 800780e:	f000 fd3b 	bl	8008288 <RCCEx_PLL2_Config>
 8007812:	4603      	mov	r3, r0
 8007814:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8007818:	e00f      	b.n	800783a <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800781a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800781e:	3328      	adds	r3, #40	@ 0x28
 8007820:	2102      	movs	r1, #2
 8007822:	4618      	mov	r0, r3
 8007824:	f000 fde2 	bl	80083ec <RCCEx_PLL3_Config>
 8007828:	4603      	mov	r3, r0
 800782a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 800782e:	e004      	b.n	800783a <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007830:	2301      	movs	r3, #1
 8007832:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007836:	e000      	b.n	800783a <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 8007838:	bf00      	nop
    }

    if (ret == HAL_OK)
 800783a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800783e:	2b00      	cmp	r3, #0
 8007840:	d10b      	bne.n	800785a <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8007842:	4b4b      	ldr	r3, [pc, #300]	@ (8007970 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007844:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007846:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 800784a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800784e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8007852:	4a47      	ldr	r2, [pc, #284]	@ (8007970 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007854:	430b      	orrs	r3, r1
 8007856:	6593      	str	r3, [r2, #88]	@ 0x58
 8007858:	e003      	b.n	8007862 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800785a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800785e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8007862:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007866:	e9d3 2300 	ldrd	r2, r3, [r3]
 800786a:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 800786e:	67bb      	str	r3, [r7, #120]	@ 0x78
 8007870:	2300      	movs	r3, #0
 8007872:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8007874:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8007878:	460b      	mov	r3, r1
 800787a:	4313      	orrs	r3, r2
 800787c:	d03b      	beq.n	80078f6 <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 800787e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007882:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007886:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800788a:	d01f      	beq.n	80078cc <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 800788c:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8007890:	d818      	bhi.n	80078c4 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 8007892:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007896:	d003      	beq.n	80078a0 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 8007898:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800789c:	d007      	beq.n	80078ae <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 800789e:	e011      	b.n	80078c4 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80078a0:	4b33      	ldr	r3, [pc, #204]	@ (8007970 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80078a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80078a4:	4a32      	ldr	r2, [pc, #200]	@ (8007970 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80078a6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80078aa:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 80078ac:	e00f      	b.n	80078ce <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80078ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80078b2:	3328      	adds	r3, #40	@ 0x28
 80078b4:	2101      	movs	r1, #1
 80078b6:	4618      	mov	r0, r3
 80078b8:	f000 fd98 	bl	80083ec <RCCEx_PLL3_Config>
 80078bc:	4603      	mov	r3, r0
 80078be:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 80078c2:	e004      	b.n	80078ce <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80078c4:	2301      	movs	r3, #1
 80078c6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80078ca:	e000      	b.n	80078ce <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 80078cc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80078ce:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80078d2:	2b00      	cmp	r3, #0
 80078d4:	d10b      	bne.n	80078ee <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80078d6:	4b26      	ldr	r3, [pc, #152]	@ (8007970 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80078d8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80078da:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 80078de:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80078e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80078e6:	4a22      	ldr	r2, [pc, #136]	@ (8007970 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80078e8:	430b      	orrs	r3, r1
 80078ea:	6553      	str	r3, [r2, #84]	@ 0x54
 80078ec:	e003      	b.n	80078f6 <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80078ee:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80078f2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 80078f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80078fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80078fe:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8007902:	673b      	str	r3, [r7, #112]	@ 0x70
 8007904:	2300      	movs	r3, #0
 8007906:	677b      	str	r3, [r7, #116]	@ 0x74
 8007908:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 800790c:	460b      	mov	r3, r1
 800790e:	4313      	orrs	r3, r2
 8007910:	d034      	beq.n	800797c <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8007912:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007916:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007918:	2b00      	cmp	r3, #0
 800791a:	d003      	beq.n	8007924 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 800791c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007920:	d007      	beq.n	8007932 <HAL_RCCEx_PeriphCLKConfig+0x103a>
 8007922:	e011      	b.n	8007948 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007924:	4b12      	ldr	r3, [pc, #72]	@ (8007970 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007926:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007928:	4a11      	ldr	r2, [pc, #68]	@ (8007970 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800792a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800792e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8007930:	e00e      	b.n	8007950 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8007932:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007936:	3308      	adds	r3, #8
 8007938:	2102      	movs	r1, #2
 800793a:	4618      	mov	r0, r3
 800793c:	f000 fca4 	bl	8008288 <RCCEx_PLL2_Config>
 8007940:	4603      	mov	r3, r0
 8007942:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8007946:	e003      	b.n	8007950 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 8007948:	2301      	movs	r3, #1
 800794a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800794e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007950:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007954:	2b00      	cmp	r3, #0
 8007956:	d10d      	bne.n	8007974 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8007958:	4b05      	ldr	r3, [pc, #20]	@ (8007970 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800795a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800795c:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8007960:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007964:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007966:	4a02      	ldr	r2, [pc, #8]	@ (8007970 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007968:	430b      	orrs	r3, r1
 800796a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800796c:	e006      	b.n	800797c <HAL_RCCEx_PeriphCLKConfig+0x1084>
 800796e:	bf00      	nop
 8007970:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007974:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007978:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800797c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007980:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007984:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8007988:	66bb      	str	r3, [r7, #104]	@ 0x68
 800798a:	2300      	movs	r3, #0
 800798c:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800798e:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8007992:	460b      	mov	r3, r1
 8007994:	4313      	orrs	r3, r2
 8007996:	d00c      	beq.n	80079b2 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8007998:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800799c:	3328      	adds	r3, #40	@ 0x28
 800799e:	2102      	movs	r1, #2
 80079a0:	4618      	mov	r0, r3
 80079a2:	f000 fd23 	bl	80083ec <RCCEx_PLL3_Config>
 80079a6:	4603      	mov	r3, r0
 80079a8:	2b00      	cmp	r3, #0
 80079aa:	d002      	beq.n	80079b2 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 80079ac:	2301      	movs	r3, #1
 80079ae:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80079b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80079b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80079ba:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 80079be:	663b      	str	r3, [r7, #96]	@ 0x60
 80079c0:	2300      	movs	r3, #0
 80079c2:	667b      	str	r3, [r7, #100]	@ 0x64
 80079c4:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 80079c8:	460b      	mov	r3, r1
 80079ca:	4313      	orrs	r3, r2
 80079cc:	d038      	beq.n	8007a40 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 80079ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80079d2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80079d6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80079da:	d018      	beq.n	8007a0e <HAL_RCCEx_PeriphCLKConfig+0x1116>
 80079dc:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80079e0:	d811      	bhi.n	8007a06 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 80079e2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80079e6:	d014      	beq.n	8007a12 <HAL_RCCEx_PeriphCLKConfig+0x111a>
 80079e8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80079ec:	d80b      	bhi.n	8007a06 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 80079ee:	2b00      	cmp	r3, #0
 80079f0:	d011      	beq.n	8007a16 <HAL_RCCEx_PeriphCLKConfig+0x111e>
 80079f2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80079f6:	d106      	bne.n	8007a06 <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80079f8:	4bc3      	ldr	r3, [pc, #780]	@ (8007d08 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80079fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80079fc:	4ac2      	ldr	r2, [pc, #776]	@ (8007d08 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80079fe:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007a02:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8007a04:	e008      	b.n	8007a18 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007a06:	2301      	movs	r3, #1
 8007a08:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007a0c:	e004      	b.n	8007a18 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8007a0e:	bf00      	nop
 8007a10:	e002      	b.n	8007a18 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8007a12:	bf00      	nop
 8007a14:	e000      	b.n	8007a18 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8007a16:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007a18:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007a1c:	2b00      	cmp	r3, #0
 8007a1e:	d10b      	bne.n	8007a38 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8007a20:	4bb9      	ldr	r3, [pc, #740]	@ (8007d08 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007a22:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007a24:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8007a28:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007a2c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007a30:	4ab5      	ldr	r2, [pc, #724]	@ (8007d08 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007a32:	430b      	orrs	r3, r1
 8007a34:	6553      	str	r3, [r2, #84]	@ 0x54
 8007a36:	e003      	b.n	8007a40 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007a38:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007a3c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8007a40:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007a44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a48:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8007a4c:	65bb      	str	r3, [r7, #88]	@ 0x58
 8007a4e:	2300      	movs	r3, #0
 8007a50:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8007a52:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8007a56:	460b      	mov	r3, r1
 8007a58:	4313      	orrs	r3, r2
 8007a5a:	d009      	beq.n	8007a70 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8007a5c:	4baa      	ldr	r3, [pc, #680]	@ (8007d08 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007a5e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007a60:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8007a64:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007a68:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007a6a:	4aa7      	ldr	r2, [pc, #668]	@ (8007d08 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007a6c:	430b      	orrs	r3, r1
 8007a6e:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8007a70:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007a74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a78:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 8007a7c:	653b      	str	r3, [r7, #80]	@ 0x50
 8007a7e:	2300      	movs	r3, #0
 8007a80:	657b      	str	r3, [r7, #84]	@ 0x54
 8007a82:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8007a86:	460b      	mov	r3, r1
 8007a88:	4313      	orrs	r3, r2
 8007a8a:	d00a      	beq.n	8007aa2 <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8007a8c:	4b9e      	ldr	r3, [pc, #632]	@ (8007d08 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007a8e:	691b      	ldr	r3, [r3, #16]
 8007a90:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 8007a94:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007a98:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8007a9c:	4a9a      	ldr	r2, [pc, #616]	@ (8007d08 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007a9e:	430b      	orrs	r3, r1
 8007aa0:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8007aa2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007aa6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007aaa:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8007aae:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007ab0:	2300      	movs	r3, #0
 8007ab2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007ab4:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8007ab8:	460b      	mov	r3, r1
 8007aba:	4313      	orrs	r3, r2
 8007abc:	d009      	beq.n	8007ad2 <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8007abe:	4b92      	ldr	r3, [pc, #584]	@ (8007d08 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007ac0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007ac2:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 8007ac6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007aca:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007acc:	4a8e      	ldr	r2, [pc, #568]	@ (8007d08 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007ace:	430b      	orrs	r3, r1
 8007ad0:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8007ad2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007ad6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ada:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 8007ade:	643b      	str	r3, [r7, #64]	@ 0x40
 8007ae0:	2300      	movs	r3, #0
 8007ae2:	647b      	str	r3, [r7, #68]	@ 0x44
 8007ae4:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8007ae8:	460b      	mov	r3, r1
 8007aea:	4313      	orrs	r3, r2
 8007aec:	d00e      	beq.n	8007b0c <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8007aee:	4b86      	ldr	r3, [pc, #536]	@ (8007d08 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007af0:	691b      	ldr	r3, [r3, #16]
 8007af2:	4a85      	ldr	r2, [pc, #532]	@ (8007d08 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007af4:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8007af8:	6113      	str	r3, [r2, #16]
 8007afa:	4b83      	ldr	r3, [pc, #524]	@ (8007d08 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007afc:	6919      	ldr	r1, [r3, #16]
 8007afe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007b02:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8007b06:	4a80      	ldr	r2, [pc, #512]	@ (8007d08 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007b08:	430b      	orrs	r3, r1
 8007b0a:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8007b0c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007b10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b14:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 8007b18:	63bb      	str	r3, [r7, #56]	@ 0x38
 8007b1a:	2300      	movs	r3, #0
 8007b1c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007b1e:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8007b22:	460b      	mov	r3, r1
 8007b24:	4313      	orrs	r3, r2
 8007b26:	d009      	beq.n	8007b3c <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8007b28:	4b77      	ldr	r3, [pc, #476]	@ (8007d08 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007b2a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007b2c:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8007b30:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007b34:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007b36:	4a74      	ldr	r2, [pc, #464]	@ (8007d08 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007b38:	430b      	orrs	r3, r1
 8007b3a:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8007b3c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007b40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b44:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8007b48:	633b      	str	r3, [r7, #48]	@ 0x30
 8007b4a:	2300      	movs	r3, #0
 8007b4c:	637b      	str	r3, [r7, #52]	@ 0x34
 8007b4e:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8007b52:	460b      	mov	r3, r1
 8007b54:	4313      	orrs	r3, r2
 8007b56:	d00a      	beq.n	8007b6e <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8007b58:	4b6b      	ldr	r3, [pc, #428]	@ (8007d08 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007b5a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007b5c:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 8007b60:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007b64:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007b68:	4a67      	ldr	r2, [pc, #412]	@ (8007d08 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007b6a:	430b      	orrs	r3, r1
 8007b6c:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8007b6e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007b72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b76:	2100      	movs	r1, #0
 8007b78:	62b9      	str	r1, [r7, #40]	@ 0x28
 8007b7a:	f003 0301 	and.w	r3, r3, #1
 8007b7e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007b80:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8007b84:	460b      	mov	r3, r1
 8007b86:	4313      	orrs	r3, r2
 8007b88:	d011      	beq.n	8007bae <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007b8a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007b8e:	3308      	adds	r3, #8
 8007b90:	2100      	movs	r1, #0
 8007b92:	4618      	mov	r0, r3
 8007b94:	f000 fb78 	bl	8008288 <RCCEx_PLL2_Config>
 8007b98:	4603      	mov	r3, r0
 8007b9a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8007b9e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007ba2:	2b00      	cmp	r3, #0
 8007ba4:	d003      	beq.n	8007bae <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007ba6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007baa:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8007bae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007bb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007bb6:	2100      	movs	r1, #0
 8007bb8:	6239      	str	r1, [r7, #32]
 8007bba:	f003 0302 	and.w	r3, r3, #2
 8007bbe:	627b      	str	r3, [r7, #36]	@ 0x24
 8007bc0:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8007bc4:	460b      	mov	r3, r1
 8007bc6:	4313      	orrs	r3, r2
 8007bc8:	d011      	beq.n	8007bee <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007bca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007bce:	3308      	adds	r3, #8
 8007bd0:	2101      	movs	r1, #1
 8007bd2:	4618      	mov	r0, r3
 8007bd4:	f000 fb58 	bl	8008288 <RCCEx_PLL2_Config>
 8007bd8:	4603      	mov	r3, r0
 8007bda:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8007bde:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007be2:	2b00      	cmp	r3, #0
 8007be4:	d003      	beq.n	8007bee <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007be6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007bea:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8007bee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007bf2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007bf6:	2100      	movs	r1, #0
 8007bf8:	61b9      	str	r1, [r7, #24]
 8007bfa:	f003 0304 	and.w	r3, r3, #4
 8007bfe:	61fb      	str	r3, [r7, #28]
 8007c00:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8007c04:	460b      	mov	r3, r1
 8007c06:	4313      	orrs	r3, r2
 8007c08:	d011      	beq.n	8007c2e <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8007c0a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007c0e:	3308      	adds	r3, #8
 8007c10:	2102      	movs	r1, #2
 8007c12:	4618      	mov	r0, r3
 8007c14:	f000 fb38 	bl	8008288 <RCCEx_PLL2_Config>
 8007c18:	4603      	mov	r3, r0
 8007c1a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8007c1e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007c22:	2b00      	cmp	r3, #0
 8007c24:	d003      	beq.n	8007c2e <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007c26:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007c2a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8007c2e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007c32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c36:	2100      	movs	r1, #0
 8007c38:	6139      	str	r1, [r7, #16]
 8007c3a:	f003 0308 	and.w	r3, r3, #8
 8007c3e:	617b      	str	r3, [r7, #20]
 8007c40:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8007c44:	460b      	mov	r3, r1
 8007c46:	4313      	orrs	r3, r2
 8007c48:	d011      	beq.n	8007c6e <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8007c4a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007c4e:	3328      	adds	r3, #40	@ 0x28
 8007c50:	2100      	movs	r1, #0
 8007c52:	4618      	mov	r0, r3
 8007c54:	f000 fbca 	bl	80083ec <RCCEx_PLL3_Config>
 8007c58:	4603      	mov	r3, r0
 8007c5a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  
    if (ret == HAL_OK)
 8007c5e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007c62:	2b00      	cmp	r3, #0
 8007c64:	d003      	beq.n	8007c6e <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007c66:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007c6a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8007c6e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007c72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c76:	2100      	movs	r1, #0
 8007c78:	60b9      	str	r1, [r7, #8]
 8007c7a:	f003 0310 	and.w	r3, r3, #16
 8007c7e:	60fb      	str	r3, [r7, #12]
 8007c80:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8007c84:	460b      	mov	r3, r1
 8007c86:	4313      	orrs	r3, r2
 8007c88:	d011      	beq.n	8007cae <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007c8a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007c8e:	3328      	adds	r3, #40	@ 0x28
 8007c90:	2101      	movs	r1, #1
 8007c92:	4618      	mov	r0, r3
 8007c94:	f000 fbaa 	bl	80083ec <RCCEx_PLL3_Config>
 8007c98:	4603      	mov	r3, r0
 8007c9a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8007c9e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007ca2:	2b00      	cmp	r3, #0
 8007ca4:	d003      	beq.n	8007cae <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007ca6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007caa:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8007cae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007cb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007cb6:	2100      	movs	r1, #0
 8007cb8:	6039      	str	r1, [r7, #0]
 8007cba:	f003 0320 	and.w	r3, r3, #32
 8007cbe:	607b      	str	r3, [r7, #4]
 8007cc0:	e9d7 1200 	ldrd	r1, r2, [r7]
 8007cc4:	460b      	mov	r3, r1
 8007cc6:	4313      	orrs	r3, r2
 8007cc8:	d011      	beq.n	8007cee <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8007cca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007cce:	3328      	adds	r3, #40	@ 0x28
 8007cd0:	2102      	movs	r1, #2
 8007cd2:	4618      	mov	r0, r3
 8007cd4:	f000 fb8a 	bl	80083ec <RCCEx_PLL3_Config>
 8007cd8:	4603      	mov	r3, r0
 8007cda:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8007cde:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007ce2:	2b00      	cmp	r3, #0
 8007ce4:	d003      	beq.n	8007cee <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007ce6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007cea:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }

  if (status == HAL_OK)
 8007cee:	f897 3126 	ldrb.w	r3, [r7, #294]	@ 0x126
 8007cf2:	2b00      	cmp	r3, #0
 8007cf4:	d101      	bne.n	8007cfa <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 8007cf6:	2300      	movs	r3, #0
 8007cf8:	e000      	b.n	8007cfc <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 8007cfa:	2301      	movs	r3, #1
}
 8007cfc:	4618      	mov	r0, r3
 8007cfe:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 8007d02:	46bd      	mov	sp, r7
 8007d04:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007d08:	58024400 	.word	0x58024400

08007d0c <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8007d0c:	b580      	push	{r7, lr}
 8007d0e:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8007d10:	f7fe fd96 	bl	8006840 <HAL_RCC_GetHCLKFreq>
 8007d14:	4602      	mov	r2, r0
 8007d16:	4b06      	ldr	r3, [pc, #24]	@ (8007d30 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8007d18:	6a1b      	ldr	r3, [r3, #32]
 8007d1a:	091b      	lsrs	r3, r3, #4
 8007d1c:	f003 0307 	and.w	r3, r3, #7
 8007d20:	4904      	ldr	r1, [pc, #16]	@ (8007d34 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8007d22:	5ccb      	ldrb	r3, [r1, r3]
 8007d24:	f003 031f 	and.w	r3, r3, #31
 8007d28:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8007d2c:	4618      	mov	r0, r3
 8007d2e:	bd80      	pop	{r7, pc}
 8007d30:	58024400 	.word	0x58024400
 8007d34:	0800e040 	.word	0x0800e040

08007d38 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8007d38:	b480      	push	{r7}
 8007d3a:	b089      	sub	sp, #36	@ 0x24
 8007d3c:	af00      	add	r7, sp, #0
 8007d3e:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007d40:	4ba1      	ldr	r3, [pc, #644]	@ (8007fc8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007d42:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007d44:	f003 0303 	and.w	r3, r3, #3
 8007d48:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8007d4a:	4b9f      	ldr	r3, [pc, #636]	@ (8007fc8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007d4c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007d4e:	0b1b      	lsrs	r3, r3, #12
 8007d50:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007d54:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8007d56:	4b9c      	ldr	r3, [pc, #624]	@ (8007fc8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007d58:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007d5a:	091b      	lsrs	r3, r3, #4
 8007d5c:	f003 0301 	and.w	r3, r3, #1
 8007d60:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8007d62:	4b99      	ldr	r3, [pc, #612]	@ (8007fc8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007d64:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007d66:	08db      	lsrs	r3, r3, #3
 8007d68:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007d6c:	693a      	ldr	r2, [r7, #16]
 8007d6e:	fb02 f303 	mul.w	r3, r2, r3
 8007d72:	ee07 3a90 	vmov	s15, r3
 8007d76:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007d7a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8007d7e:	697b      	ldr	r3, [r7, #20]
 8007d80:	2b00      	cmp	r3, #0
 8007d82:	f000 8111 	beq.w	8007fa8 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8007d86:	69bb      	ldr	r3, [r7, #24]
 8007d88:	2b02      	cmp	r3, #2
 8007d8a:	f000 8083 	beq.w	8007e94 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8007d8e:	69bb      	ldr	r3, [r7, #24]
 8007d90:	2b02      	cmp	r3, #2
 8007d92:	f200 80a1 	bhi.w	8007ed8 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8007d96:	69bb      	ldr	r3, [r7, #24]
 8007d98:	2b00      	cmp	r3, #0
 8007d9a:	d003      	beq.n	8007da4 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8007d9c:	69bb      	ldr	r3, [r7, #24]
 8007d9e:	2b01      	cmp	r3, #1
 8007da0:	d056      	beq.n	8007e50 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8007da2:	e099      	b.n	8007ed8 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007da4:	4b88      	ldr	r3, [pc, #544]	@ (8007fc8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007da6:	681b      	ldr	r3, [r3, #0]
 8007da8:	f003 0320 	and.w	r3, r3, #32
 8007dac:	2b00      	cmp	r3, #0
 8007dae:	d02d      	beq.n	8007e0c <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007db0:	4b85      	ldr	r3, [pc, #532]	@ (8007fc8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007db2:	681b      	ldr	r3, [r3, #0]
 8007db4:	08db      	lsrs	r3, r3, #3
 8007db6:	f003 0303 	and.w	r3, r3, #3
 8007dba:	4a84      	ldr	r2, [pc, #528]	@ (8007fcc <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8007dbc:	fa22 f303 	lsr.w	r3, r2, r3
 8007dc0:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8007dc2:	68bb      	ldr	r3, [r7, #8]
 8007dc4:	ee07 3a90 	vmov	s15, r3
 8007dc8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007dcc:	697b      	ldr	r3, [r7, #20]
 8007dce:	ee07 3a90 	vmov	s15, r3
 8007dd2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007dd6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007dda:	4b7b      	ldr	r3, [pc, #492]	@ (8007fc8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007ddc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007dde:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007de2:	ee07 3a90 	vmov	s15, r3
 8007de6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007dea:	ed97 6a03 	vldr	s12, [r7, #12]
 8007dee:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8007fd0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007df2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007df6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007dfa:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007dfe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007e02:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007e06:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8007e0a:	e087      	b.n	8007f1c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8007e0c:	697b      	ldr	r3, [r7, #20]
 8007e0e:	ee07 3a90 	vmov	s15, r3
 8007e12:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007e16:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8007fd4 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8007e1a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007e1e:	4b6a      	ldr	r3, [pc, #424]	@ (8007fc8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007e20:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007e22:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007e26:	ee07 3a90 	vmov	s15, r3
 8007e2a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007e2e:	ed97 6a03 	vldr	s12, [r7, #12]
 8007e32:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8007fd0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007e36:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007e3a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007e3e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007e42:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007e46:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007e4a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007e4e:	e065      	b.n	8007f1c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8007e50:	697b      	ldr	r3, [r7, #20]
 8007e52:	ee07 3a90 	vmov	s15, r3
 8007e56:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007e5a:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8007fd8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8007e5e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007e62:	4b59      	ldr	r3, [pc, #356]	@ (8007fc8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007e64:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007e66:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007e6a:	ee07 3a90 	vmov	s15, r3
 8007e6e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007e72:	ed97 6a03 	vldr	s12, [r7, #12]
 8007e76:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8007fd0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007e7a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007e7e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007e82:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007e86:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007e8a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007e8e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007e92:	e043      	b.n	8007f1c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8007e94:	697b      	ldr	r3, [r7, #20]
 8007e96:	ee07 3a90 	vmov	s15, r3
 8007e9a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007e9e:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8007fdc <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8007ea2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007ea6:	4b48      	ldr	r3, [pc, #288]	@ (8007fc8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007ea8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007eaa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007eae:	ee07 3a90 	vmov	s15, r3
 8007eb2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007eb6:	ed97 6a03 	vldr	s12, [r7, #12]
 8007eba:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8007fd0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007ebe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007ec2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007ec6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007eca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007ece:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007ed2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007ed6:	e021      	b.n	8007f1c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8007ed8:	697b      	ldr	r3, [r7, #20]
 8007eda:	ee07 3a90 	vmov	s15, r3
 8007ede:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007ee2:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8007fd8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8007ee6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007eea:	4b37      	ldr	r3, [pc, #220]	@ (8007fc8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007eec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007eee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007ef2:	ee07 3a90 	vmov	s15, r3
 8007ef6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007efa:	ed97 6a03 	vldr	s12, [r7, #12]
 8007efe:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8007fd0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007f02:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007f06:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007f0a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007f0e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007f12:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007f16:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007f1a:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8007f1c:	4b2a      	ldr	r3, [pc, #168]	@ (8007fc8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007f1e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007f20:	0a5b      	lsrs	r3, r3, #9
 8007f22:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007f26:	ee07 3a90 	vmov	s15, r3
 8007f2a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007f2e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007f32:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007f36:	edd7 6a07 	vldr	s13, [r7, #28]
 8007f3a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007f3e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007f42:	ee17 2a90 	vmov	r2, s15
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8007f4a:	4b1f      	ldr	r3, [pc, #124]	@ (8007fc8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007f4c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007f4e:	0c1b      	lsrs	r3, r3, #16
 8007f50:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007f54:	ee07 3a90 	vmov	s15, r3
 8007f58:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007f5c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007f60:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007f64:	edd7 6a07 	vldr	s13, [r7, #28]
 8007f68:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007f6c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007f70:	ee17 2a90 	vmov	r2, s15
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8007f78:	4b13      	ldr	r3, [pc, #76]	@ (8007fc8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007f7a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007f7c:	0e1b      	lsrs	r3, r3, #24
 8007f7e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007f82:	ee07 3a90 	vmov	s15, r3
 8007f86:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007f8a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007f8e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007f92:	edd7 6a07 	vldr	s13, [r7, #28]
 8007f96:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007f9a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007f9e:	ee17 2a90 	vmov	r2, s15
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8007fa6:	e008      	b.n	8007fba <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	2200      	movs	r2, #0
 8007fac:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	2200      	movs	r2, #0
 8007fb2:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	2200      	movs	r2, #0
 8007fb8:	609a      	str	r2, [r3, #8]
}
 8007fba:	bf00      	nop
 8007fbc:	3724      	adds	r7, #36	@ 0x24
 8007fbe:	46bd      	mov	sp, r7
 8007fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fc4:	4770      	bx	lr
 8007fc6:	bf00      	nop
 8007fc8:	58024400 	.word	0x58024400
 8007fcc:	03d09000 	.word	0x03d09000
 8007fd0:	46000000 	.word	0x46000000
 8007fd4:	4c742400 	.word	0x4c742400
 8007fd8:	4a742400 	.word	0x4a742400
 8007fdc:	4bbebc20 	.word	0x4bbebc20

08007fe0 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8007fe0:	b480      	push	{r7}
 8007fe2:	b089      	sub	sp, #36	@ 0x24
 8007fe4:	af00      	add	r7, sp, #0
 8007fe6:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007fe8:	4ba1      	ldr	r3, [pc, #644]	@ (8008270 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007fea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007fec:	f003 0303 	and.w	r3, r3, #3
 8007ff0:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8007ff2:	4b9f      	ldr	r3, [pc, #636]	@ (8008270 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007ff4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007ff6:	0d1b      	lsrs	r3, r3, #20
 8007ff8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007ffc:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8007ffe:	4b9c      	ldr	r3, [pc, #624]	@ (8008270 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008000:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008002:	0a1b      	lsrs	r3, r3, #8
 8008004:	f003 0301 	and.w	r3, r3, #1
 8008008:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800800a:	4b99      	ldr	r3, [pc, #612]	@ (8008270 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800800c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800800e:	08db      	lsrs	r3, r3, #3
 8008010:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008014:	693a      	ldr	r2, [r7, #16]
 8008016:	fb02 f303 	mul.w	r3, r2, r3
 800801a:	ee07 3a90 	vmov	s15, r3
 800801e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008022:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8008026:	697b      	ldr	r3, [r7, #20]
 8008028:	2b00      	cmp	r3, #0
 800802a:	f000 8111 	beq.w	8008250 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800802e:	69bb      	ldr	r3, [r7, #24]
 8008030:	2b02      	cmp	r3, #2
 8008032:	f000 8083 	beq.w	800813c <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8008036:	69bb      	ldr	r3, [r7, #24]
 8008038:	2b02      	cmp	r3, #2
 800803a:	f200 80a1 	bhi.w	8008180 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800803e:	69bb      	ldr	r3, [r7, #24]
 8008040:	2b00      	cmp	r3, #0
 8008042:	d003      	beq.n	800804c <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8008044:	69bb      	ldr	r3, [r7, #24]
 8008046:	2b01      	cmp	r3, #1
 8008048:	d056      	beq.n	80080f8 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800804a:	e099      	b.n	8008180 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800804c:	4b88      	ldr	r3, [pc, #544]	@ (8008270 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800804e:	681b      	ldr	r3, [r3, #0]
 8008050:	f003 0320 	and.w	r3, r3, #32
 8008054:	2b00      	cmp	r3, #0
 8008056:	d02d      	beq.n	80080b4 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008058:	4b85      	ldr	r3, [pc, #532]	@ (8008270 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800805a:	681b      	ldr	r3, [r3, #0]
 800805c:	08db      	lsrs	r3, r3, #3
 800805e:	f003 0303 	and.w	r3, r3, #3
 8008062:	4a84      	ldr	r2, [pc, #528]	@ (8008274 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8008064:	fa22 f303 	lsr.w	r3, r2, r3
 8008068:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800806a:	68bb      	ldr	r3, [r7, #8]
 800806c:	ee07 3a90 	vmov	s15, r3
 8008070:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008074:	697b      	ldr	r3, [r7, #20]
 8008076:	ee07 3a90 	vmov	s15, r3
 800807a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800807e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008082:	4b7b      	ldr	r3, [pc, #492]	@ (8008270 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008084:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008086:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800808a:	ee07 3a90 	vmov	s15, r3
 800808e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008092:	ed97 6a03 	vldr	s12, [r7, #12]
 8008096:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8008278 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800809a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800809e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80080a2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80080a6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80080aa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80080ae:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 80080b2:	e087      	b.n	80081c4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80080b4:	697b      	ldr	r3, [r7, #20]
 80080b6:	ee07 3a90 	vmov	s15, r3
 80080ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80080be:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 800827c <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 80080c2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80080c6:	4b6a      	ldr	r3, [pc, #424]	@ (8008270 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80080c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80080ca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80080ce:	ee07 3a90 	vmov	s15, r3
 80080d2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80080d6:	ed97 6a03 	vldr	s12, [r7, #12]
 80080da:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8008278 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80080de:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80080e2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80080e6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80080ea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80080ee:	ee67 7a27 	vmul.f32	s15, s14, s15
 80080f2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80080f6:	e065      	b.n	80081c4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80080f8:	697b      	ldr	r3, [r7, #20]
 80080fa:	ee07 3a90 	vmov	s15, r3
 80080fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008102:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8008280 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8008106:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800810a:	4b59      	ldr	r3, [pc, #356]	@ (8008270 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800810c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800810e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008112:	ee07 3a90 	vmov	s15, r3
 8008116:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800811a:	ed97 6a03 	vldr	s12, [r7, #12]
 800811e:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8008278 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8008122:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008126:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800812a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800812e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008132:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008136:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800813a:	e043      	b.n	80081c4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800813c:	697b      	ldr	r3, [r7, #20]
 800813e:	ee07 3a90 	vmov	s15, r3
 8008142:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008146:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8008284 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800814a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800814e:	4b48      	ldr	r3, [pc, #288]	@ (8008270 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008150:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008152:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008156:	ee07 3a90 	vmov	s15, r3
 800815a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800815e:	ed97 6a03 	vldr	s12, [r7, #12]
 8008162:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8008278 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8008166:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800816a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800816e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008172:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008176:	ee67 7a27 	vmul.f32	s15, s14, s15
 800817a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800817e:	e021      	b.n	80081c4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8008180:	697b      	ldr	r3, [r7, #20]
 8008182:	ee07 3a90 	vmov	s15, r3
 8008186:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800818a:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8008280 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800818e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008192:	4b37      	ldr	r3, [pc, #220]	@ (8008270 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008194:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008196:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800819a:	ee07 3a90 	vmov	s15, r3
 800819e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80081a2:	ed97 6a03 	vldr	s12, [r7, #12]
 80081a6:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8008278 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80081aa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80081ae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80081b2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80081b6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80081ba:	ee67 7a27 	vmul.f32	s15, s14, s15
 80081be:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80081c2:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 80081c4:	4b2a      	ldr	r3, [pc, #168]	@ (8008270 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80081c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80081c8:	0a5b      	lsrs	r3, r3, #9
 80081ca:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80081ce:	ee07 3a90 	vmov	s15, r3
 80081d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80081d6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80081da:	ee37 7a87 	vadd.f32	s14, s15, s14
 80081de:	edd7 6a07 	vldr	s13, [r7, #28]
 80081e2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80081e6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80081ea:	ee17 2a90 	vmov	r2, s15
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 80081f2:	4b1f      	ldr	r3, [pc, #124]	@ (8008270 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80081f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80081f6:	0c1b      	lsrs	r3, r3, #16
 80081f8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80081fc:	ee07 3a90 	vmov	s15, r3
 8008200:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008204:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8008208:	ee37 7a87 	vadd.f32	s14, s15, s14
 800820c:	edd7 6a07 	vldr	s13, [r7, #28]
 8008210:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008214:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008218:	ee17 2a90 	vmov	r2, s15
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8008220:	4b13      	ldr	r3, [pc, #76]	@ (8008270 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008222:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008224:	0e1b      	lsrs	r3, r3, #24
 8008226:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800822a:	ee07 3a90 	vmov	s15, r3
 800822e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008232:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8008236:	ee37 7a87 	vadd.f32	s14, s15, s14
 800823a:	edd7 6a07 	vldr	s13, [r7, #28]
 800823e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008242:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008246:	ee17 2a90 	vmov	r2, s15
 800824a:	687b      	ldr	r3, [r7, #4]
 800824c:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800824e:	e008      	b.n	8008262 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	2200      	movs	r2, #0
 8008254:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	2200      	movs	r2, #0
 800825a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	2200      	movs	r2, #0
 8008260:	609a      	str	r2, [r3, #8]
}
 8008262:	bf00      	nop
 8008264:	3724      	adds	r7, #36	@ 0x24
 8008266:	46bd      	mov	sp, r7
 8008268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800826c:	4770      	bx	lr
 800826e:	bf00      	nop
 8008270:	58024400 	.word	0x58024400
 8008274:	03d09000 	.word	0x03d09000
 8008278:	46000000 	.word	0x46000000
 800827c:	4c742400 	.word	0x4c742400
 8008280:	4a742400 	.word	0x4a742400
 8008284:	4bbebc20 	.word	0x4bbebc20

08008288 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8008288:	b580      	push	{r7, lr}
 800828a:	b084      	sub	sp, #16
 800828c:	af00      	add	r7, sp, #0
 800828e:	6078      	str	r0, [r7, #4]
 8008290:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8008292:	2300      	movs	r3, #0
 8008294:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8008296:	4b53      	ldr	r3, [pc, #332]	@ (80083e4 <RCCEx_PLL2_Config+0x15c>)
 8008298:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800829a:	f003 0303 	and.w	r3, r3, #3
 800829e:	2b03      	cmp	r3, #3
 80082a0:	d101      	bne.n	80082a6 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 80082a2:	2301      	movs	r3, #1
 80082a4:	e099      	b.n	80083da <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 80082a6:	4b4f      	ldr	r3, [pc, #316]	@ (80083e4 <RCCEx_PLL2_Config+0x15c>)
 80082a8:	681b      	ldr	r3, [r3, #0]
 80082aa:	4a4e      	ldr	r2, [pc, #312]	@ (80083e4 <RCCEx_PLL2_Config+0x15c>)
 80082ac:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80082b0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80082b2:	f7fc f955 	bl	8004560 <HAL_GetTick>
 80082b6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80082b8:	e008      	b.n	80082cc <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80082ba:	f7fc f951 	bl	8004560 <HAL_GetTick>
 80082be:	4602      	mov	r2, r0
 80082c0:	68bb      	ldr	r3, [r7, #8]
 80082c2:	1ad3      	subs	r3, r2, r3
 80082c4:	2b02      	cmp	r3, #2
 80082c6:	d901      	bls.n	80082cc <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 80082c8:	2303      	movs	r3, #3
 80082ca:	e086      	b.n	80083da <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80082cc:	4b45      	ldr	r3, [pc, #276]	@ (80083e4 <RCCEx_PLL2_Config+0x15c>)
 80082ce:	681b      	ldr	r3, [r3, #0]
 80082d0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80082d4:	2b00      	cmp	r3, #0
 80082d6:	d1f0      	bne.n	80082ba <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 80082d8:	4b42      	ldr	r3, [pc, #264]	@ (80083e4 <RCCEx_PLL2_Config+0x15c>)
 80082da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80082dc:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	681b      	ldr	r3, [r3, #0]
 80082e4:	031b      	lsls	r3, r3, #12
 80082e6:	493f      	ldr	r1, [pc, #252]	@ (80083e4 <RCCEx_PLL2_Config+0x15c>)
 80082e8:	4313      	orrs	r3, r2
 80082ea:	628b      	str	r3, [r1, #40]	@ 0x28
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	685b      	ldr	r3, [r3, #4]
 80082f0:	3b01      	subs	r3, #1
 80082f2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80082f6:	687b      	ldr	r3, [r7, #4]
 80082f8:	689b      	ldr	r3, [r3, #8]
 80082fa:	3b01      	subs	r3, #1
 80082fc:	025b      	lsls	r3, r3, #9
 80082fe:	b29b      	uxth	r3, r3
 8008300:	431a      	orrs	r2, r3
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	68db      	ldr	r3, [r3, #12]
 8008306:	3b01      	subs	r3, #1
 8008308:	041b      	lsls	r3, r3, #16
 800830a:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800830e:	431a      	orrs	r2, r3
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	691b      	ldr	r3, [r3, #16]
 8008314:	3b01      	subs	r3, #1
 8008316:	061b      	lsls	r3, r3, #24
 8008318:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800831c:	4931      	ldr	r1, [pc, #196]	@ (80083e4 <RCCEx_PLL2_Config+0x15c>)
 800831e:	4313      	orrs	r3, r2
 8008320:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8008322:	4b30      	ldr	r3, [pc, #192]	@ (80083e4 <RCCEx_PLL2_Config+0x15c>)
 8008324:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008326:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	695b      	ldr	r3, [r3, #20]
 800832e:	492d      	ldr	r1, [pc, #180]	@ (80083e4 <RCCEx_PLL2_Config+0x15c>)
 8008330:	4313      	orrs	r3, r2
 8008332:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8008334:	4b2b      	ldr	r3, [pc, #172]	@ (80083e4 <RCCEx_PLL2_Config+0x15c>)
 8008336:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008338:	f023 0220 	bic.w	r2, r3, #32
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	699b      	ldr	r3, [r3, #24]
 8008340:	4928      	ldr	r1, [pc, #160]	@ (80083e4 <RCCEx_PLL2_Config+0x15c>)
 8008342:	4313      	orrs	r3, r2
 8008344:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8008346:	4b27      	ldr	r3, [pc, #156]	@ (80083e4 <RCCEx_PLL2_Config+0x15c>)
 8008348:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800834a:	4a26      	ldr	r2, [pc, #152]	@ (80083e4 <RCCEx_PLL2_Config+0x15c>)
 800834c:	f023 0310 	bic.w	r3, r3, #16
 8008350:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8008352:	4b24      	ldr	r3, [pc, #144]	@ (80083e4 <RCCEx_PLL2_Config+0x15c>)
 8008354:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8008356:	4b24      	ldr	r3, [pc, #144]	@ (80083e8 <RCCEx_PLL2_Config+0x160>)
 8008358:	4013      	ands	r3, r2
 800835a:	687a      	ldr	r2, [r7, #4]
 800835c:	69d2      	ldr	r2, [r2, #28]
 800835e:	00d2      	lsls	r2, r2, #3
 8008360:	4920      	ldr	r1, [pc, #128]	@ (80083e4 <RCCEx_PLL2_Config+0x15c>)
 8008362:	4313      	orrs	r3, r2
 8008364:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8008366:	4b1f      	ldr	r3, [pc, #124]	@ (80083e4 <RCCEx_PLL2_Config+0x15c>)
 8008368:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800836a:	4a1e      	ldr	r2, [pc, #120]	@ (80083e4 <RCCEx_PLL2_Config+0x15c>)
 800836c:	f043 0310 	orr.w	r3, r3, #16
 8008370:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8008372:	683b      	ldr	r3, [r7, #0]
 8008374:	2b00      	cmp	r3, #0
 8008376:	d106      	bne.n	8008386 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8008378:	4b1a      	ldr	r3, [pc, #104]	@ (80083e4 <RCCEx_PLL2_Config+0x15c>)
 800837a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800837c:	4a19      	ldr	r2, [pc, #100]	@ (80083e4 <RCCEx_PLL2_Config+0x15c>)
 800837e:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8008382:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8008384:	e00f      	b.n	80083a6 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8008386:	683b      	ldr	r3, [r7, #0]
 8008388:	2b01      	cmp	r3, #1
 800838a:	d106      	bne.n	800839a <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800838c:	4b15      	ldr	r3, [pc, #84]	@ (80083e4 <RCCEx_PLL2_Config+0x15c>)
 800838e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008390:	4a14      	ldr	r2, [pc, #80]	@ (80083e4 <RCCEx_PLL2_Config+0x15c>)
 8008392:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8008396:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8008398:	e005      	b.n	80083a6 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800839a:	4b12      	ldr	r3, [pc, #72]	@ (80083e4 <RCCEx_PLL2_Config+0x15c>)
 800839c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800839e:	4a11      	ldr	r2, [pc, #68]	@ (80083e4 <RCCEx_PLL2_Config+0x15c>)
 80083a0:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80083a4:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 80083a6:	4b0f      	ldr	r3, [pc, #60]	@ (80083e4 <RCCEx_PLL2_Config+0x15c>)
 80083a8:	681b      	ldr	r3, [r3, #0]
 80083aa:	4a0e      	ldr	r2, [pc, #56]	@ (80083e4 <RCCEx_PLL2_Config+0x15c>)
 80083ac:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80083b0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80083b2:	f7fc f8d5 	bl	8004560 <HAL_GetTick>
 80083b6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80083b8:	e008      	b.n	80083cc <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80083ba:	f7fc f8d1 	bl	8004560 <HAL_GetTick>
 80083be:	4602      	mov	r2, r0
 80083c0:	68bb      	ldr	r3, [r7, #8]
 80083c2:	1ad3      	subs	r3, r2, r3
 80083c4:	2b02      	cmp	r3, #2
 80083c6:	d901      	bls.n	80083cc <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 80083c8:	2303      	movs	r3, #3
 80083ca:	e006      	b.n	80083da <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80083cc:	4b05      	ldr	r3, [pc, #20]	@ (80083e4 <RCCEx_PLL2_Config+0x15c>)
 80083ce:	681b      	ldr	r3, [r3, #0]
 80083d0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80083d4:	2b00      	cmp	r3, #0
 80083d6:	d0f0      	beq.n	80083ba <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 80083d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80083da:	4618      	mov	r0, r3
 80083dc:	3710      	adds	r7, #16
 80083de:	46bd      	mov	sp, r7
 80083e0:	bd80      	pop	{r7, pc}
 80083e2:	bf00      	nop
 80083e4:	58024400 	.word	0x58024400
 80083e8:	ffff0007 	.word	0xffff0007

080083ec <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 80083ec:	b580      	push	{r7, lr}
 80083ee:	b084      	sub	sp, #16
 80083f0:	af00      	add	r7, sp, #0
 80083f2:	6078      	str	r0, [r7, #4]
 80083f4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80083f6:	2300      	movs	r3, #0
 80083f8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80083fa:	4b53      	ldr	r3, [pc, #332]	@ (8008548 <RCCEx_PLL3_Config+0x15c>)
 80083fc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80083fe:	f003 0303 	and.w	r3, r3, #3
 8008402:	2b03      	cmp	r3, #3
 8008404:	d101      	bne.n	800840a <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8008406:	2301      	movs	r3, #1
 8008408:	e099      	b.n	800853e <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800840a:	4b4f      	ldr	r3, [pc, #316]	@ (8008548 <RCCEx_PLL3_Config+0x15c>)
 800840c:	681b      	ldr	r3, [r3, #0]
 800840e:	4a4e      	ldr	r2, [pc, #312]	@ (8008548 <RCCEx_PLL3_Config+0x15c>)
 8008410:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8008414:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008416:	f7fc f8a3 	bl	8004560 <HAL_GetTick>
 800841a:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800841c:	e008      	b.n	8008430 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800841e:	f7fc f89f 	bl	8004560 <HAL_GetTick>
 8008422:	4602      	mov	r2, r0
 8008424:	68bb      	ldr	r3, [r7, #8]
 8008426:	1ad3      	subs	r3, r2, r3
 8008428:	2b02      	cmp	r3, #2
 800842a:	d901      	bls.n	8008430 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800842c:	2303      	movs	r3, #3
 800842e:	e086      	b.n	800853e <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8008430:	4b45      	ldr	r3, [pc, #276]	@ (8008548 <RCCEx_PLL3_Config+0x15c>)
 8008432:	681b      	ldr	r3, [r3, #0]
 8008434:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008438:	2b00      	cmp	r3, #0
 800843a:	d1f0      	bne.n	800841e <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800843c:	4b42      	ldr	r3, [pc, #264]	@ (8008548 <RCCEx_PLL3_Config+0x15c>)
 800843e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008440:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	681b      	ldr	r3, [r3, #0]
 8008448:	051b      	lsls	r3, r3, #20
 800844a:	493f      	ldr	r1, [pc, #252]	@ (8008548 <RCCEx_PLL3_Config+0x15c>)
 800844c:	4313      	orrs	r3, r2
 800844e:	628b      	str	r3, [r1, #40]	@ 0x28
 8008450:	687b      	ldr	r3, [r7, #4]
 8008452:	685b      	ldr	r3, [r3, #4]
 8008454:	3b01      	subs	r3, #1
 8008456:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	689b      	ldr	r3, [r3, #8]
 800845e:	3b01      	subs	r3, #1
 8008460:	025b      	lsls	r3, r3, #9
 8008462:	b29b      	uxth	r3, r3
 8008464:	431a      	orrs	r2, r3
 8008466:	687b      	ldr	r3, [r7, #4]
 8008468:	68db      	ldr	r3, [r3, #12]
 800846a:	3b01      	subs	r3, #1
 800846c:	041b      	lsls	r3, r3, #16
 800846e:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8008472:	431a      	orrs	r2, r3
 8008474:	687b      	ldr	r3, [r7, #4]
 8008476:	691b      	ldr	r3, [r3, #16]
 8008478:	3b01      	subs	r3, #1
 800847a:	061b      	lsls	r3, r3, #24
 800847c:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8008480:	4931      	ldr	r1, [pc, #196]	@ (8008548 <RCCEx_PLL3_Config+0x15c>)
 8008482:	4313      	orrs	r3, r2
 8008484:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8008486:	4b30      	ldr	r3, [pc, #192]	@ (8008548 <RCCEx_PLL3_Config+0x15c>)
 8008488:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800848a:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800848e:	687b      	ldr	r3, [r7, #4]
 8008490:	695b      	ldr	r3, [r3, #20]
 8008492:	492d      	ldr	r1, [pc, #180]	@ (8008548 <RCCEx_PLL3_Config+0x15c>)
 8008494:	4313      	orrs	r3, r2
 8008496:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8008498:	4b2b      	ldr	r3, [pc, #172]	@ (8008548 <RCCEx_PLL3_Config+0x15c>)
 800849a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800849c:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	699b      	ldr	r3, [r3, #24]
 80084a4:	4928      	ldr	r1, [pc, #160]	@ (8008548 <RCCEx_PLL3_Config+0x15c>)
 80084a6:	4313      	orrs	r3, r2
 80084a8:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 80084aa:	4b27      	ldr	r3, [pc, #156]	@ (8008548 <RCCEx_PLL3_Config+0x15c>)
 80084ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80084ae:	4a26      	ldr	r2, [pc, #152]	@ (8008548 <RCCEx_PLL3_Config+0x15c>)
 80084b0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80084b4:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 80084b6:	4b24      	ldr	r3, [pc, #144]	@ (8008548 <RCCEx_PLL3_Config+0x15c>)
 80084b8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80084ba:	4b24      	ldr	r3, [pc, #144]	@ (800854c <RCCEx_PLL3_Config+0x160>)
 80084bc:	4013      	ands	r3, r2
 80084be:	687a      	ldr	r2, [r7, #4]
 80084c0:	69d2      	ldr	r2, [r2, #28]
 80084c2:	00d2      	lsls	r2, r2, #3
 80084c4:	4920      	ldr	r1, [pc, #128]	@ (8008548 <RCCEx_PLL3_Config+0x15c>)
 80084c6:	4313      	orrs	r3, r2
 80084c8:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 80084ca:	4b1f      	ldr	r3, [pc, #124]	@ (8008548 <RCCEx_PLL3_Config+0x15c>)
 80084cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80084ce:	4a1e      	ldr	r2, [pc, #120]	@ (8008548 <RCCEx_PLL3_Config+0x15c>)
 80084d0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80084d4:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 80084d6:	683b      	ldr	r3, [r7, #0]
 80084d8:	2b00      	cmp	r3, #0
 80084da:	d106      	bne.n	80084ea <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 80084dc:	4b1a      	ldr	r3, [pc, #104]	@ (8008548 <RCCEx_PLL3_Config+0x15c>)
 80084de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80084e0:	4a19      	ldr	r2, [pc, #100]	@ (8008548 <RCCEx_PLL3_Config+0x15c>)
 80084e2:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80084e6:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80084e8:	e00f      	b.n	800850a <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 80084ea:	683b      	ldr	r3, [r7, #0]
 80084ec:	2b01      	cmp	r3, #1
 80084ee:	d106      	bne.n	80084fe <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 80084f0:	4b15      	ldr	r3, [pc, #84]	@ (8008548 <RCCEx_PLL3_Config+0x15c>)
 80084f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80084f4:	4a14      	ldr	r2, [pc, #80]	@ (8008548 <RCCEx_PLL3_Config+0x15c>)
 80084f6:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80084fa:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80084fc:	e005      	b.n	800850a <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 80084fe:	4b12      	ldr	r3, [pc, #72]	@ (8008548 <RCCEx_PLL3_Config+0x15c>)
 8008500:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008502:	4a11      	ldr	r2, [pc, #68]	@ (8008548 <RCCEx_PLL3_Config+0x15c>)
 8008504:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8008508:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800850a:	4b0f      	ldr	r3, [pc, #60]	@ (8008548 <RCCEx_PLL3_Config+0x15c>)
 800850c:	681b      	ldr	r3, [r3, #0]
 800850e:	4a0e      	ldr	r2, [pc, #56]	@ (8008548 <RCCEx_PLL3_Config+0x15c>)
 8008510:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008514:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008516:	f7fc f823 	bl	8004560 <HAL_GetTick>
 800851a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800851c:	e008      	b.n	8008530 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800851e:	f7fc f81f 	bl	8004560 <HAL_GetTick>
 8008522:	4602      	mov	r2, r0
 8008524:	68bb      	ldr	r3, [r7, #8]
 8008526:	1ad3      	subs	r3, r2, r3
 8008528:	2b02      	cmp	r3, #2
 800852a:	d901      	bls.n	8008530 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800852c:	2303      	movs	r3, #3
 800852e:	e006      	b.n	800853e <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8008530:	4b05      	ldr	r3, [pc, #20]	@ (8008548 <RCCEx_PLL3_Config+0x15c>)
 8008532:	681b      	ldr	r3, [r3, #0]
 8008534:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008538:	2b00      	cmp	r3, #0
 800853a:	d0f0      	beq.n	800851e <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800853c:	7bfb      	ldrb	r3, [r7, #15]
}
 800853e:	4618      	mov	r0, r3
 8008540:	3710      	adds	r7, #16
 8008542:	46bd      	mov	sp, r7
 8008544:	bd80      	pop	{r7, pc}
 8008546:	bf00      	nop
 8008548:	58024400 	.word	0x58024400
 800854c:	ffff0007 	.word	0xffff0007

08008550 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008550:	b580      	push	{r7, lr}
 8008552:	b082      	sub	sp, #8
 8008554:	af00      	add	r7, sp, #0
 8008556:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008558:	687b      	ldr	r3, [r7, #4]
 800855a:	2b00      	cmp	r3, #0
 800855c:	d101      	bne.n	8008562 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800855e:	2301      	movs	r3, #1
 8008560:	e042      	b.n	80085e8 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8008562:	687b      	ldr	r3, [r7, #4]
 8008564:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008568:	2b00      	cmp	r3, #0
 800856a:	d106      	bne.n	800857a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	2200      	movs	r2, #0
 8008570:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008574:	6878      	ldr	r0, [r7, #4]
 8008576:	f7fb fcf5 	bl	8003f64 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800857a:	687b      	ldr	r3, [r7, #4]
 800857c:	2224      	movs	r2, #36	@ 0x24
 800857e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	681b      	ldr	r3, [r3, #0]
 8008586:	681a      	ldr	r2, [r3, #0]
 8008588:	687b      	ldr	r3, [r7, #4]
 800858a:	681b      	ldr	r3, [r3, #0]
 800858c:	f022 0201 	bic.w	r2, r2, #1
 8008590:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8008592:	687b      	ldr	r3, [r7, #4]
 8008594:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008596:	2b00      	cmp	r3, #0
 8008598:	d002      	beq.n	80085a0 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800859a:	6878      	ldr	r0, [r7, #4]
 800859c:	f000 fee6 	bl	800936c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80085a0:	6878      	ldr	r0, [r7, #4]
 80085a2:	f000 f97b 	bl	800889c <UART_SetConfig>
 80085a6:	4603      	mov	r3, r0
 80085a8:	2b01      	cmp	r3, #1
 80085aa:	d101      	bne.n	80085b0 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 80085ac:	2301      	movs	r3, #1
 80085ae:	e01b      	b.n	80085e8 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80085b0:	687b      	ldr	r3, [r7, #4]
 80085b2:	681b      	ldr	r3, [r3, #0]
 80085b4:	685a      	ldr	r2, [r3, #4]
 80085b6:	687b      	ldr	r3, [r7, #4]
 80085b8:	681b      	ldr	r3, [r3, #0]
 80085ba:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80085be:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	681b      	ldr	r3, [r3, #0]
 80085c4:	689a      	ldr	r2, [r3, #8]
 80085c6:	687b      	ldr	r3, [r7, #4]
 80085c8:	681b      	ldr	r3, [r3, #0]
 80085ca:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80085ce:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80085d0:	687b      	ldr	r3, [r7, #4]
 80085d2:	681b      	ldr	r3, [r3, #0]
 80085d4:	681a      	ldr	r2, [r3, #0]
 80085d6:	687b      	ldr	r3, [r7, #4]
 80085d8:	681b      	ldr	r3, [r3, #0]
 80085da:	f042 0201 	orr.w	r2, r2, #1
 80085de:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80085e0:	6878      	ldr	r0, [r7, #4]
 80085e2:	f000 ff65 	bl	80094b0 <UART_CheckIdleState>
 80085e6:	4603      	mov	r3, r0
}
 80085e8:	4618      	mov	r0, r3
 80085ea:	3708      	adds	r7, #8
 80085ec:	46bd      	mov	sp, r7
 80085ee:	bd80      	pop	{r7, pc}

080085f0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80085f0:	b580      	push	{r7, lr}
 80085f2:	b08a      	sub	sp, #40	@ 0x28
 80085f4:	af02      	add	r7, sp, #8
 80085f6:	60f8      	str	r0, [r7, #12]
 80085f8:	60b9      	str	r1, [r7, #8]
 80085fa:	603b      	str	r3, [r7, #0]
 80085fc:	4613      	mov	r3, r2
 80085fe:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008600:	68fb      	ldr	r3, [r7, #12]
 8008602:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008606:	2b20      	cmp	r3, #32
 8008608:	d17b      	bne.n	8008702 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 800860a:	68bb      	ldr	r3, [r7, #8]
 800860c:	2b00      	cmp	r3, #0
 800860e:	d002      	beq.n	8008616 <HAL_UART_Transmit+0x26>
 8008610:	88fb      	ldrh	r3, [r7, #6]
 8008612:	2b00      	cmp	r3, #0
 8008614:	d101      	bne.n	800861a <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8008616:	2301      	movs	r3, #1
 8008618:	e074      	b.n	8008704 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800861a:	68fb      	ldr	r3, [r7, #12]
 800861c:	2200      	movs	r2, #0
 800861e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008622:	68fb      	ldr	r3, [r7, #12]
 8008624:	2221      	movs	r2, #33	@ 0x21
 8008626:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800862a:	f7fb ff99 	bl	8004560 <HAL_GetTick>
 800862e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8008630:	68fb      	ldr	r3, [r7, #12]
 8008632:	88fa      	ldrh	r2, [r7, #6]
 8008634:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8008638:	68fb      	ldr	r3, [r7, #12]
 800863a:	88fa      	ldrh	r2, [r7, #6]
 800863c:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008640:	68fb      	ldr	r3, [r7, #12]
 8008642:	689b      	ldr	r3, [r3, #8]
 8008644:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008648:	d108      	bne.n	800865c <HAL_UART_Transmit+0x6c>
 800864a:	68fb      	ldr	r3, [r7, #12]
 800864c:	691b      	ldr	r3, [r3, #16]
 800864e:	2b00      	cmp	r3, #0
 8008650:	d104      	bne.n	800865c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8008652:	2300      	movs	r3, #0
 8008654:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8008656:	68bb      	ldr	r3, [r7, #8]
 8008658:	61bb      	str	r3, [r7, #24]
 800865a:	e003      	b.n	8008664 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800865c:	68bb      	ldr	r3, [r7, #8]
 800865e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8008660:	2300      	movs	r3, #0
 8008662:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8008664:	e030      	b.n	80086c8 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8008666:	683b      	ldr	r3, [r7, #0]
 8008668:	9300      	str	r3, [sp, #0]
 800866a:	697b      	ldr	r3, [r7, #20]
 800866c:	2200      	movs	r2, #0
 800866e:	2180      	movs	r1, #128	@ 0x80
 8008670:	68f8      	ldr	r0, [r7, #12]
 8008672:	f000 ffc7 	bl	8009604 <UART_WaitOnFlagUntilTimeout>
 8008676:	4603      	mov	r3, r0
 8008678:	2b00      	cmp	r3, #0
 800867a:	d005      	beq.n	8008688 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 800867c:	68fb      	ldr	r3, [r7, #12]
 800867e:	2220      	movs	r2, #32
 8008680:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 8008684:	2303      	movs	r3, #3
 8008686:	e03d      	b.n	8008704 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8008688:	69fb      	ldr	r3, [r7, #28]
 800868a:	2b00      	cmp	r3, #0
 800868c:	d10b      	bne.n	80086a6 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800868e:	69bb      	ldr	r3, [r7, #24]
 8008690:	881b      	ldrh	r3, [r3, #0]
 8008692:	461a      	mov	r2, r3
 8008694:	68fb      	ldr	r3, [r7, #12]
 8008696:	681b      	ldr	r3, [r3, #0]
 8008698:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800869c:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800869e:	69bb      	ldr	r3, [r7, #24]
 80086a0:	3302      	adds	r3, #2
 80086a2:	61bb      	str	r3, [r7, #24]
 80086a4:	e007      	b.n	80086b6 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80086a6:	69fb      	ldr	r3, [r7, #28]
 80086a8:	781a      	ldrb	r2, [r3, #0]
 80086aa:	68fb      	ldr	r3, [r7, #12]
 80086ac:	681b      	ldr	r3, [r3, #0]
 80086ae:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 80086b0:	69fb      	ldr	r3, [r7, #28]
 80086b2:	3301      	adds	r3, #1
 80086b4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80086b6:	68fb      	ldr	r3, [r7, #12]
 80086b8:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 80086bc:	b29b      	uxth	r3, r3
 80086be:	3b01      	subs	r3, #1
 80086c0:	b29a      	uxth	r2, r3
 80086c2:	68fb      	ldr	r3, [r7, #12]
 80086c4:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 80086c8:	68fb      	ldr	r3, [r7, #12]
 80086ca:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 80086ce:	b29b      	uxth	r3, r3
 80086d0:	2b00      	cmp	r3, #0
 80086d2:	d1c8      	bne.n	8008666 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80086d4:	683b      	ldr	r3, [r7, #0]
 80086d6:	9300      	str	r3, [sp, #0]
 80086d8:	697b      	ldr	r3, [r7, #20]
 80086da:	2200      	movs	r2, #0
 80086dc:	2140      	movs	r1, #64	@ 0x40
 80086de:	68f8      	ldr	r0, [r7, #12]
 80086e0:	f000 ff90 	bl	8009604 <UART_WaitOnFlagUntilTimeout>
 80086e4:	4603      	mov	r3, r0
 80086e6:	2b00      	cmp	r3, #0
 80086e8:	d005      	beq.n	80086f6 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 80086ea:	68fb      	ldr	r3, [r7, #12]
 80086ec:	2220      	movs	r2, #32
 80086ee:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 80086f2:	2303      	movs	r3, #3
 80086f4:	e006      	b.n	8008704 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80086f6:	68fb      	ldr	r3, [r7, #12]
 80086f8:	2220      	movs	r2, #32
 80086fa:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 80086fe:	2300      	movs	r3, #0
 8008700:	e000      	b.n	8008704 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8008702:	2302      	movs	r3, #2
  }
}
 8008704:	4618      	mov	r0, r3
 8008706:	3720      	adds	r7, #32
 8008708:	46bd      	mov	sp, r7
 800870a:	bd80      	pop	{r7, pc}

0800870c <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800870c:	b580      	push	{r7, lr}
 800870e:	b08a      	sub	sp, #40	@ 0x28
 8008710:	af02      	add	r7, sp, #8
 8008712:	60f8      	str	r0, [r7, #12]
 8008714:	60b9      	str	r1, [r7, #8]
 8008716:	603b      	str	r3, [r7, #0]
 8008718:	4613      	mov	r3, r2
 800871a:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800871c:	68fb      	ldr	r3, [r7, #12]
 800871e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008722:	2b20      	cmp	r3, #32
 8008724:	f040 80b5 	bne.w	8008892 <HAL_UART_Receive+0x186>
  {
    if ((pData == NULL) || (Size == 0U))
 8008728:	68bb      	ldr	r3, [r7, #8]
 800872a:	2b00      	cmp	r3, #0
 800872c:	d002      	beq.n	8008734 <HAL_UART_Receive+0x28>
 800872e:	88fb      	ldrh	r3, [r7, #6]
 8008730:	2b00      	cmp	r3, #0
 8008732:	d101      	bne.n	8008738 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 8008734:	2301      	movs	r3, #1
 8008736:	e0ad      	b.n	8008894 <HAL_UART_Receive+0x188>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008738:	68fb      	ldr	r3, [r7, #12]
 800873a:	2200      	movs	r2, #0
 800873c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8008740:	68fb      	ldr	r3, [r7, #12]
 8008742:	2222      	movs	r2, #34	@ 0x22
 8008744:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008748:	68fb      	ldr	r3, [r7, #12]
 800874a:	2200      	movs	r2, #0
 800874c:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800874e:	f7fb ff07 	bl	8004560 <HAL_GetTick>
 8008752:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8008754:	68fb      	ldr	r3, [r7, #12]
 8008756:	88fa      	ldrh	r2, [r7, #6]
 8008758:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
    huart->RxXferCount = Size;
 800875c:	68fb      	ldr	r3, [r7, #12]
 800875e:	88fa      	ldrh	r2, [r7, #6]
 8008760:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8008764:	68fb      	ldr	r3, [r7, #12]
 8008766:	689b      	ldr	r3, [r3, #8]
 8008768:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800876c:	d10e      	bne.n	800878c <HAL_UART_Receive+0x80>
 800876e:	68fb      	ldr	r3, [r7, #12]
 8008770:	691b      	ldr	r3, [r3, #16]
 8008772:	2b00      	cmp	r3, #0
 8008774:	d105      	bne.n	8008782 <HAL_UART_Receive+0x76>
 8008776:	68fb      	ldr	r3, [r7, #12]
 8008778:	f240 12ff 	movw	r2, #511	@ 0x1ff
 800877c:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8008780:	e02d      	b.n	80087de <HAL_UART_Receive+0xd2>
 8008782:	68fb      	ldr	r3, [r7, #12]
 8008784:	22ff      	movs	r2, #255	@ 0xff
 8008786:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800878a:	e028      	b.n	80087de <HAL_UART_Receive+0xd2>
 800878c:	68fb      	ldr	r3, [r7, #12]
 800878e:	689b      	ldr	r3, [r3, #8]
 8008790:	2b00      	cmp	r3, #0
 8008792:	d10d      	bne.n	80087b0 <HAL_UART_Receive+0xa4>
 8008794:	68fb      	ldr	r3, [r7, #12]
 8008796:	691b      	ldr	r3, [r3, #16]
 8008798:	2b00      	cmp	r3, #0
 800879a:	d104      	bne.n	80087a6 <HAL_UART_Receive+0x9a>
 800879c:	68fb      	ldr	r3, [r7, #12]
 800879e:	22ff      	movs	r2, #255	@ 0xff
 80087a0:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80087a4:	e01b      	b.n	80087de <HAL_UART_Receive+0xd2>
 80087a6:	68fb      	ldr	r3, [r7, #12]
 80087a8:	227f      	movs	r2, #127	@ 0x7f
 80087aa:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80087ae:	e016      	b.n	80087de <HAL_UART_Receive+0xd2>
 80087b0:	68fb      	ldr	r3, [r7, #12]
 80087b2:	689b      	ldr	r3, [r3, #8]
 80087b4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80087b8:	d10d      	bne.n	80087d6 <HAL_UART_Receive+0xca>
 80087ba:	68fb      	ldr	r3, [r7, #12]
 80087bc:	691b      	ldr	r3, [r3, #16]
 80087be:	2b00      	cmp	r3, #0
 80087c0:	d104      	bne.n	80087cc <HAL_UART_Receive+0xc0>
 80087c2:	68fb      	ldr	r3, [r7, #12]
 80087c4:	227f      	movs	r2, #127	@ 0x7f
 80087c6:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80087ca:	e008      	b.n	80087de <HAL_UART_Receive+0xd2>
 80087cc:	68fb      	ldr	r3, [r7, #12]
 80087ce:	223f      	movs	r2, #63	@ 0x3f
 80087d0:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80087d4:	e003      	b.n	80087de <HAL_UART_Receive+0xd2>
 80087d6:	68fb      	ldr	r3, [r7, #12]
 80087d8:	2200      	movs	r2, #0
 80087da:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
    uhMask = huart->Mask;
 80087de:	68fb      	ldr	r3, [r7, #12]
 80087e0:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 80087e4:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80087e6:	68fb      	ldr	r3, [r7, #12]
 80087e8:	689b      	ldr	r3, [r3, #8]
 80087ea:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80087ee:	d108      	bne.n	8008802 <HAL_UART_Receive+0xf6>
 80087f0:	68fb      	ldr	r3, [r7, #12]
 80087f2:	691b      	ldr	r3, [r3, #16]
 80087f4:	2b00      	cmp	r3, #0
 80087f6:	d104      	bne.n	8008802 <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 80087f8:	2300      	movs	r3, #0
 80087fa:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80087fc:	68bb      	ldr	r3, [r7, #8]
 80087fe:	61bb      	str	r3, [r7, #24]
 8008800:	e003      	b.n	800880a <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 8008802:	68bb      	ldr	r3, [r7, #8]
 8008804:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8008806:	2300      	movs	r3, #0
 8008808:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 800880a:	e036      	b.n	800887a <HAL_UART_Receive+0x16e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800880c:	683b      	ldr	r3, [r7, #0]
 800880e:	9300      	str	r3, [sp, #0]
 8008810:	697b      	ldr	r3, [r7, #20]
 8008812:	2200      	movs	r2, #0
 8008814:	2120      	movs	r1, #32
 8008816:	68f8      	ldr	r0, [r7, #12]
 8008818:	f000 fef4 	bl	8009604 <UART_WaitOnFlagUntilTimeout>
 800881c:	4603      	mov	r3, r0
 800881e:	2b00      	cmp	r3, #0
 8008820:	d005      	beq.n	800882e <HAL_UART_Receive+0x122>
      {
        huart->RxState = HAL_UART_STATE_READY;
 8008822:	68fb      	ldr	r3, [r7, #12]
 8008824:	2220      	movs	r2, #32
 8008826:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        return HAL_TIMEOUT;
 800882a:	2303      	movs	r3, #3
 800882c:	e032      	b.n	8008894 <HAL_UART_Receive+0x188>
      }
      if (pdata8bits == NULL)
 800882e:	69fb      	ldr	r3, [r7, #28]
 8008830:	2b00      	cmp	r3, #0
 8008832:	d10c      	bne.n	800884e <HAL_UART_Receive+0x142>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8008834:	68fb      	ldr	r3, [r7, #12]
 8008836:	681b      	ldr	r3, [r3, #0]
 8008838:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800883a:	b29a      	uxth	r2, r3
 800883c:	8a7b      	ldrh	r3, [r7, #18]
 800883e:	4013      	ands	r3, r2
 8008840:	b29a      	uxth	r2, r3
 8008842:	69bb      	ldr	r3, [r7, #24]
 8008844:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8008846:	69bb      	ldr	r3, [r7, #24]
 8008848:	3302      	adds	r3, #2
 800884a:	61bb      	str	r3, [r7, #24]
 800884c:	e00c      	b.n	8008868 <HAL_UART_Receive+0x15c>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 800884e:	68fb      	ldr	r3, [r7, #12]
 8008850:	681b      	ldr	r3, [r3, #0]
 8008852:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008854:	b2da      	uxtb	r2, r3
 8008856:	8a7b      	ldrh	r3, [r7, #18]
 8008858:	b2db      	uxtb	r3, r3
 800885a:	4013      	ands	r3, r2
 800885c:	b2da      	uxtb	r2, r3
 800885e:	69fb      	ldr	r3, [r7, #28]
 8008860:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8008862:	69fb      	ldr	r3, [r7, #28]
 8008864:	3301      	adds	r3, #1
 8008866:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8008868:	68fb      	ldr	r3, [r7, #12]
 800886a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800886e:	b29b      	uxth	r3, r3
 8008870:	3b01      	subs	r3, #1
 8008872:	b29a      	uxth	r2, r3
 8008874:	68fb      	ldr	r3, [r7, #12]
 8008876:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    while (huart->RxXferCount > 0U)
 800887a:	68fb      	ldr	r3, [r7, #12]
 800887c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8008880:	b29b      	uxth	r3, r3
 8008882:	2b00      	cmp	r3, #0
 8008884:	d1c2      	bne.n	800880c <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8008886:	68fb      	ldr	r3, [r7, #12]
 8008888:	2220      	movs	r2, #32
 800888a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

    return HAL_OK;
 800888e:	2300      	movs	r3, #0
 8008890:	e000      	b.n	8008894 <HAL_UART_Receive+0x188>
  }
  else
  {
    return HAL_BUSY;
 8008892:	2302      	movs	r3, #2
  }
}
 8008894:	4618      	mov	r0, r3
 8008896:	3720      	adds	r7, #32
 8008898:	46bd      	mov	sp, r7
 800889a:	bd80      	pop	{r7, pc}

0800889c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800889c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80088a0:	b092      	sub	sp, #72	@ 0x48
 80088a2:	af00      	add	r7, sp, #0
 80088a4:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80088a6:	2300      	movs	r3, #0
 80088a8:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80088ac:	697b      	ldr	r3, [r7, #20]
 80088ae:	689a      	ldr	r2, [r3, #8]
 80088b0:	697b      	ldr	r3, [r7, #20]
 80088b2:	691b      	ldr	r3, [r3, #16]
 80088b4:	431a      	orrs	r2, r3
 80088b6:	697b      	ldr	r3, [r7, #20]
 80088b8:	695b      	ldr	r3, [r3, #20]
 80088ba:	431a      	orrs	r2, r3
 80088bc:	697b      	ldr	r3, [r7, #20]
 80088be:	69db      	ldr	r3, [r3, #28]
 80088c0:	4313      	orrs	r3, r2
 80088c2:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80088c4:	697b      	ldr	r3, [r7, #20]
 80088c6:	681b      	ldr	r3, [r3, #0]
 80088c8:	681a      	ldr	r2, [r3, #0]
 80088ca:	4bbe      	ldr	r3, [pc, #760]	@ (8008bc4 <UART_SetConfig+0x328>)
 80088cc:	4013      	ands	r3, r2
 80088ce:	697a      	ldr	r2, [r7, #20]
 80088d0:	6812      	ldr	r2, [r2, #0]
 80088d2:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80088d4:	430b      	orrs	r3, r1
 80088d6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80088d8:	697b      	ldr	r3, [r7, #20]
 80088da:	681b      	ldr	r3, [r3, #0]
 80088dc:	685b      	ldr	r3, [r3, #4]
 80088de:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80088e2:	697b      	ldr	r3, [r7, #20]
 80088e4:	68da      	ldr	r2, [r3, #12]
 80088e6:	697b      	ldr	r3, [r7, #20]
 80088e8:	681b      	ldr	r3, [r3, #0]
 80088ea:	430a      	orrs	r2, r1
 80088ec:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80088ee:	697b      	ldr	r3, [r7, #20]
 80088f0:	699b      	ldr	r3, [r3, #24]
 80088f2:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80088f4:	697b      	ldr	r3, [r7, #20]
 80088f6:	681b      	ldr	r3, [r3, #0]
 80088f8:	4ab3      	ldr	r2, [pc, #716]	@ (8008bc8 <UART_SetConfig+0x32c>)
 80088fa:	4293      	cmp	r3, r2
 80088fc:	d004      	beq.n	8008908 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80088fe:	697b      	ldr	r3, [r7, #20]
 8008900:	6a1b      	ldr	r3, [r3, #32]
 8008902:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008904:	4313      	orrs	r3, r2
 8008906:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8008908:	697b      	ldr	r3, [r7, #20]
 800890a:	681b      	ldr	r3, [r3, #0]
 800890c:	689a      	ldr	r2, [r3, #8]
 800890e:	4baf      	ldr	r3, [pc, #700]	@ (8008bcc <UART_SetConfig+0x330>)
 8008910:	4013      	ands	r3, r2
 8008912:	697a      	ldr	r2, [r7, #20]
 8008914:	6812      	ldr	r2, [r2, #0]
 8008916:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8008918:	430b      	orrs	r3, r1
 800891a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800891c:	697b      	ldr	r3, [r7, #20]
 800891e:	681b      	ldr	r3, [r3, #0]
 8008920:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008922:	f023 010f 	bic.w	r1, r3, #15
 8008926:	697b      	ldr	r3, [r7, #20]
 8008928:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800892a:	697b      	ldr	r3, [r7, #20]
 800892c:	681b      	ldr	r3, [r3, #0]
 800892e:	430a      	orrs	r2, r1
 8008930:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8008932:	697b      	ldr	r3, [r7, #20]
 8008934:	681b      	ldr	r3, [r3, #0]
 8008936:	4aa6      	ldr	r2, [pc, #664]	@ (8008bd0 <UART_SetConfig+0x334>)
 8008938:	4293      	cmp	r3, r2
 800893a:	d177      	bne.n	8008a2c <UART_SetConfig+0x190>
 800893c:	4ba5      	ldr	r3, [pc, #660]	@ (8008bd4 <UART_SetConfig+0x338>)
 800893e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008940:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8008944:	2b28      	cmp	r3, #40	@ 0x28
 8008946:	d86d      	bhi.n	8008a24 <UART_SetConfig+0x188>
 8008948:	a201      	add	r2, pc, #4	@ (adr r2, 8008950 <UART_SetConfig+0xb4>)
 800894a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800894e:	bf00      	nop
 8008950:	080089f5 	.word	0x080089f5
 8008954:	08008a25 	.word	0x08008a25
 8008958:	08008a25 	.word	0x08008a25
 800895c:	08008a25 	.word	0x08008a25
 8008960:	08008a25 	.word	0x08008a25
 8008964:	08008a25 	.word	0x08008a25
 8008968:	08008a25 	.word	0x08008a25
 800896c:	08008a25 	.word	0x08008a25
 8008970:	080089fd 	.word	0x080089fd
 8008974:	08008a25 	.word	0x08008a25
 8008978:	08008a25 	.word	0x08008a25
 800897c:	08008a25 	.word	0x08008a25
 8008980:	08008a25 	.word	0x08008a25
 8008984:	08008a25 	.word	0x08008a25
 8008988:	08008a25 	.word	0x08008a25
 800898c:	08008a25 	.word	0x08008a25
 8008990:	08008a05 	.word	0x08008a05
 8008994:	08008a25 	.word	0x08008a25
 8008998:	08008a25 	.word	0x08008a25
 800899c:	08008a25 	.word	0x08008a25
 80089a0:	08008a25 	.word	0x08008a25
 80089a4:	08008a25 	.word	0x08008a25
 80089a8:	08008a25 	.word	0x08008a25
 80089ac:	08008a25 	.word	0x08008a25
 80089b0:	08008a0d 	.word	0x08008a0d
 80089b4:	08008a25 	.word	0x08008a25
 80089b8:	08008a25 	.word	0x08008a25
 80089bc:	08008a25 	.word	0x08008a25
 80089c0:	08008a25 	.word	0x08008a25
 80089c4:	08008a25 	.word	0x08008a25
 80089c8:	08008a25 	.word	0x08008a25
 80089cc:	08008a25 	.word	0x08008a25
 80089d0:	08008a15 	.word	0x08008a15
 80089d4:	08008a25 	.word	0x08008a25
 80089d8:	08008a25 	.word	0x08008a25
 80089dc:	08008a25 	.word	0x08008a25
 80089e0:	08008a25 	.word	0x08008a25
 80089e4:	08008a25 	.word	0x08008a25
 80089e8:	08008a25 	.word	0x08008a25
 80089ec:	08008a25 	.word	0x08008a25
 80089f0:	08008a1d 	.word	0x08008a1d
 80089f4:	2301      	movs	r3, #1
 80089f6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80089fa:	e222      	b.n	8008e42 <UART_SetConfig+0x5a6>
 80089fc:	2304      	movs	r3, #4
 80089fe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008a02:	e21e      	b.n	8008e42 <UART_SetConfig+0x5a6>
 8008a04:	2308      	movs	r3, #8
 8008a06:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008a0a:	e21a      	b.n	8008e42 <UART_SetConfig+0x5a6>
 8008a0c:	2310      	movs	r3, #16
 8008a0e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008a12:	e216      	b.n	8008e42 <UART_SetConfig+0x5a6>
 8008a14:	2320      	movs	r3, #32
 8008a16:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008a1a:	e212      	b.n	8008e42 <UART_SetConfig+0x5a6>
 8008a1c:	2340      	movs	r3, #64	@ 0x40
 8008a1e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008a22:	e20e      	b.n	8008e42 <UART_SetConfig+0x5a6>
 8008a24:	2380      	movs	r3, #128	@ 0x80
 8008a26:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008a2a:	e20a      	b.n	8008e42 <UART_SetConfig+0x5a6>
 8008a2c:	697b      	ldr	r3, [r7, #20]
 8008a2e:	681b      	ldr	r3, [r3, #0]
 8008a30:	4a69      	ldr	r2, [pc, #420]	@ (8008bd8 <UART_SetConfig+0x33c>)
 8008a32:	4293      	cmp	r3, r2
 8008a34:	d130      	bne.n	8008a98 <UART_SetConfig+0x1fc>
 8008a36:	4b67      	ldr	r3, [pc, #412]	@ (8008bd4 <UART_SetConfig+0x338>)
 8008a38:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008a3a:	f003 0307 	and.w	r3, r3, #7
 8008a3e:	2b05      	cmp	r3, #5
 8008a40:	d826      	bhi.n	8008a90 <UART_SetConfig+0x1f4>
 8008a42:	a201      	add	r2, pc, #4	@ (adr r2, 8008a48 <UART_SetConfig+0x1ac>)
 8008a44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008a48:	08008a61 	.word	0x08008a61
 8008a4c:	08008a69 	.word	0x08008a69
 8008a50:	08008a71 	.word	0x08008a71
 8008a54:	08008a79 	.word	0x08008a79
 8008a58:	08008a81 	.word	0x08008a81
 8008a5c:	08008a89 	.word	0x08008a89
 8008a60:	2300      	movs	r3, #0
 8008a62:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008a66:	e1ec      	b.n	8008e42 <UART_SetConfig+0x5a6>
 8008a68:	2304      	movs	r3, #4
 8008a6a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008a6e:	e1e8      	b.n	8008e42 <UART_SetConfig+0x5a6>
 8008a70:	2308      	movs	r3, #8
 8008a72:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008a76:	e1e4      	b.n	8008e42 <UART_SetConfig+0x5a6>
 8008a78:	2310      	movs	r3, #16
 8008a7a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008a7e:	e1e0      	b.n	8008e42 <UART_SetConfig+0x5a6>
 8008a80:	2320      	movs	r3, #32
 8008a82:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008a86:	e1dc      	b.n	8008e42 <UART_SetConfig+0x5a6>
 8008a88:	2340      	movs	r3, #64	@ 0x40
 8008a8a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008a8e:	e1d8      	b.n	8008e42 <UART_SetConfig+0x5a6>
 8008a90:	2380      	movs	r3, #128	@ 0x80
 8008a92:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008a96:	e1d4      	b.n	8008e42 <UART_SetConfig+0x5a6>
 8008a98:	697b      	ldr	r3, [r7, #20]
 8008a9a:	681b      	ldr	r3, [r3, #0]
 8008a9c:	4a4f      	ldr	r2, [pc, #316]	@ (8008bdc <UART_SetConfig+0x340>)
 8008a9e:	4293      	cmp	r3, r2
 8008aa0:	d130      	bne.n	8008b04 <UART_SetConfig+0x268>
 8008aa2:	4b4c      	ldr	r3, [pc, #304]	@ (8008bd4 <UART_SetConfig+0x338>)
 8008aa4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008aa6:	f003 0307 	and.w	r3, r3, #7
 8008aaa:	2b05      	cmp	r3, #5
 8008aac:	d826      	bhi.n	8008afc <UART_SetConfig+0x260>
 8008aae:	a201      	add	r2, pc, #4	@ (adr r2, 8008ab4 <UART_SetConfig+0x218>)
 8008ab0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008ab4:	08008acd 	.word	0x08008acd
 8008ab8:	08008ad5 	.word	0x08008ad5
 8008abc:	08008add 	.word	0x08008add
 8008ac0:	08008ae5 	.word	0x08008ae5
 8008ac4:	08008aed 	.word	0x08008aed
 8008ac8:	08008af5 	.word	0x08008af5
 8008acc:	2300      	movs	r3, #0
 8008ace:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008ad2:	e1b6      	b.n	8008e42 <UART_SetConfig+0x5a6>
 8008ad4:	2304      	movs	r3, #4
 8008ad6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008ada:	e1b2      	b.n	8008e42 <UART_SetConfig+0x5a6>
 8008adc:	2308      	movs	r3, #8
 8008ade:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008ae2:	e1ae      	b.n	8008e42 <UART_SetConfig+0x5a6>
 8008ae4:	2310      	movs	r3, #16
 8008ae6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008aea:	e1aa      	b.n	8008e42 <UART_SetConfig+0x5a6>
 8008aec:	2320      	movs	r3, #32
 8008aee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008af2:	e1a6      	b.n	8008e42 <UART_SetConfig+0x5a6>
 8008af4:	2340      	movs	r3, #64	@ 0x40
 8008af6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008afa:	e1a2      	b.n	8008e42 <UART_SetConfig+0x5a6>
 8008afc:	2380      	movs	r3, #128	@ 0x80
 8008afe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008b02:	e19e      	b.n	8008e42 <UART_SetConfig+0x5a6>
 8008b04:	697b      	ldr	r3, [r7, #20]
 8008b06:	681b      	ldr	r3, [r3, #0]
 8008b08:	4a35      	ldr	r2, [pc, #212]	@ (8008be0 <UART_SetConfig+0x344>)
 8008b0a:	4293      	cmp	r3, r2
 8008b0c:	d130      	bne.n	8008b70 <UART_SetConfig+0x2d4>
 8008b0e:	4b31      	ldr	r3, [pc, #196]	@ (8008bd4 <UART_SetConfig+0x338>)
 8008b10:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008b12:	f003 0307 	and.w	r3, r3, #7
 8008b16:	2b05      	cmp	r3, #5
 8008b18:	d826      	bhi.n	8008b68 <UART_SetConfig+0x2cc>
 8008b1a:	a201      	add	r2, pc, #4	@ (adr r2, 8008b20 <UART_SetConfig+0x284>)
 8008b1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008b20:	08008b39 	.word	0x08008b39
 8008b24:	08008b41 	.word	0x08008b41
 8008b28:	08008b49 	.word	0x08008b49
 8008b2c:	08008b51 	.word	0x08008b51
 8008b30:	08008b59 	.word	0x08008b59
 8008b34:	08008b61 	.word	0x08008b61
 8008b38:	2300      	movs	r3, #0
 8008b3a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008b3e:	e180      	b.n	8008e42 <UART_SetConfig+0x5a6>
 8008b40:	2304      	movs	r3, #4
 8008b42:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008b46:	e17c      	b.n	8008e42 <UART_SetConfig+0x5a6>
 8008b48:	2308      	movs	r3, #8
 8008b4a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008b4e:	e178      	b.n	8008e42 <UART_SetConfig+0x5a6>
 8008b50:	2310      	movs	r3, #16
 8008b52:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008b56:	e174      	b.n	8008e42 <UART_SetConfig+0x5a6>
 8008b58:	2320      	movs	r3, #32
 8008b5a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008b5e:	e170      	b.n	8008e42 <UART_SetConfig+0x5a6>
 8008b60:	2340      	movs	r3, #64	@ 0x40
 8008b62:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008b66:	e16c      	b.n	8008e42 <UART_SetConfig+0x5a6>
 8008b68:	2380      	movs	r3, #128	@ 0x80
 8008b6a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008b6e:	e168      	b.n	8008e42 <UART_SetConfig+0x5a6>
 8008b70:	697b      	ldr	r3, [r7, #20]
 8008b72:	681b      	ldr	r3, [r3, #0]
 8008b74:	4a1b      	ldr	r2, [pc, #108]	@ (8008be4 <UART_SetConfig+0x348>)
 8008b76:	4293      	cmp	r3, r2
 8008b78:	d142      	bne.n	8008c00 <UART_SetConfig+0x364>
 8008b7a:	4b16      	ldr	r3, [pc, #88]	@ (8008bd4 <UART_SetConfig+0x338>)
 8008b7c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008b7e:	f003 0307 	and.w	r3, r3, #7
 8008b82:	2b05      	cmp	r3, #5
 8008b84:	d838      	bhi.n	8008bf8 <UART_SetConfig+0x35c>
 8008b86:	a201      	add	r2, pc, #4	@ (adr r2, 8008b8c <UART_SetConfig+0x2f0>)
 8008b88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008b8c:	08008ba5 	.word	0x08008ba5
 8008b90:	08008bad 	.word	0x08008bad
 8008b94:	08008bb5 	.word	0x08008bb5
 8008b98:	08008bbd 	.word	0x08008bbd
 8008b9c:	08008be9 	.word	0x08008be9
 8008ba0:	08008bf1 	.word	0x08008bf1
 8008ba4:	2300      	movs	r3, #0
 8008ba6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008baa:	e14a      	b.n	8008e42 <UART_SetConfig+0x5a6>
 8008bac:	2304      	movs	r3, #4
 8008bae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008bb2:	e146      	b.n	8008e42 <UART_SetConfig+0x5a6>
 8008bb4:	2308      	movs	r3, #8
 8008bb6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008bba:	e142      	b.n	8008e42 <UART_SetConfig+0x5a6>
 8008bbc:	2310      	movs	r3, #16
 8008bbe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008bc2:	e13e      	b.n	8008e42 <UART_SetConfig+0x5a6>
 8008bc4:	cfff69f3 	.word	0xcfff69f3
 8008bc8:	58000c00 	.word	0x58000c00
 8008bcc:	11fff4ff 	.word	0x11fff4ff
 8008bd0:	40011000 	.word	0x40011000
 8008bd4:	58024400 	.word	0x58024400
 8008bd8:	40004400 	.word	0x40004400
 8008bdc:	40004800 	.word	0x40004800
 8008be0:	40004c00 	.word	0x40004c00
 8008be4:	40005000 	.word	0x40005000
 8008be8:	2320      	movs	r3, #32
 8008bea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008bee:	e128      	b.n	8008e42 <UART_SetConfig+0x5a6>
 8008bf0:	2340      	movs	r3, #64	@ 0x40
 8008bf2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008bf6:	e124      	b.n	8008e42 <UART_SetConfig+0x5a6>
 8008bf8:	2380      	movs	r3, #128	@ 0x80
 8008bfa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008bfe:	e120      	b.n	8008e42 <UART_SetConfig+0x5a6>
 8008c00:	697b      	ldr	r3, [r7, #20]
 8008c02:	681b      	ldr	r3, [r3, #0]
 8008c04:	4acb      	ldr	r2, [pc, #812]	@ (8008f34 <UART_SetConfig+0x698>)
 8008c06:	4293      	cmp	r3, r2
 8008c08:	d176      	bne.n	8008cf8 <UART_SetConfig+0x45c>
 8008c0a:	4bcb      	ldr	r3, [pc, #812]	@ (8008f38 <UART_SetConfig+0x69c>)
 8008c0c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008c0e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8008c12:	2b28      	cmp	r3, #40	@ 0x28
 8008c14:	d86c      	bhi.n	8008cf0 <UART_SetConfig+0x454>
 8008c16:	a201      	add	r2, pc, #4	@ (adr r2, 8008c1c <UART_SetConfig+0x380>)
 8008c18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008c1c:	08008cc1 	.word	0x08008cc1
 8008c20:	08008cf1 	.word	0x08008cf1
 8008c24:	08008cf1 	.word	0x08008cf1
 8008c28:	08008cf1 	.word	0x08008cf1
 8008c2c:	08008cf1 	.word	0x08008cf1
 8008c30:	08008cf1 	.word	0x08008cf1
 8008c34:	08008cf1 	.word	0x08008cf1
 8008c38:	08008cf1 	.word	0x08008cf1
 8008c3c:	08008cc9 	.word	0x08008cc9
 8008c40:	08008cf1 	.word	0x08008cf1
 8008c44:	08008cf1 	.word	0x08008cf1
 8008c48:	08008cf1 	.word	0x08008cf1
 8008c4c:	08008cf1 	.word	0x08008cf1
 8008c50:	08008cf1 	.word	0x08008cf1
 8008c54:	08008cf1 	.word	0x08008cf1
 8008c58:	08008cf1 	.word	0x08008cf1
 8008c5c:	08008cd1 	.word	0x08008cd1
 8008c60:	08008cf1 	.word	0x08008cf1
 8008c64:	08008cf1 	.word	0x08008cf1
 8008c68:	08008cf1 	.word	0x08008cf1
 8008c6c:	08008cf1 	.word	0x08008cf1
 8008c70:	08008cf1 	.word	0x08008cf1
 8008c74:	08008cf1 	.word	0x08008cf1
 8008c78:	08008cf1 	.word	0x08008cf1
 8008c7c:	08008cd9 	.word	0x08008cd9
 8008c80:	08008cf1 	.word	0x08008cf1
 8008c84:	08008cf1 	.word	0x08008cf1
 8008c88:	08008cf1 	.word	0x08008cf1
 8008c8c:	08008cf1 	.word	0x08008cf1
 8008c90:	08008cf1 	.word	0x08008cf1
 8008c94:	08008cf1 	.word	0x08008cf1
 8008c98:	08008cf1 	.word	0x08008cf1
 8008c9c:	08008ce1 	.word	0x08008ce1
 8008ca0:	08008cf1 	.word	0x08008cf1
 8008ca4:	08008cf1 	.word	0x08008cf1
 8008ca8:	08008cf1 	.word	0x08008cf1
 8008cac:	08008cf1 	.word	0x08008cf1
 8008cb0:	08008cf1 	.word	0x08008cf1
 8008cb4:	08008cf1 	.word	0x08008cf1
 8008cb8:	08008cf1 	.word	0x08008cf1
 8008cbc:	08008ce9 	.word	0x08008ce9
 8008cc0:	2301      	movs	r3, #1
 8008cc2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008cc6:	e0bc      	b.n	8008e42 <UART_SetConfig+0x5a6>
 8008cc8:	2304      	movs	r3, #4
 8008cca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008cce:	e0b8      	b.n	8008e42 <UART_SetConfig+0x5a6>
 8008cd0:	2308      	movs	r3, #8
 8008cd2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008cd6:	e0b4      	b.n	8008e42 <UART_SetConfig+0x5a6>
 8008cd8:	2310      	movs	r3, #16
 8008cda:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008cde:	e0b0      	b.n	8008e42 <UART_SetConfig+0x5a6>
 8008ce0:	2320      	movs	r3, #32
 8008ce2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008ce6:	e0ac      	b.n	8008e42 <UART_SetConfig+0x5a6>
 8008ce8:	2340      	movs	r3, #64	@ 0x40
 8008cea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008cee:	e0a8      	b.n	8008e42 <UART_SetConfig+0x5a6>
 8008cf0:	2380      	movs	r3, #128	@ 0x80
 8008cf2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008cf6:	e0a4      	b.n	8008e42 <UART_SetConfig+0x5a6>
 8008cf8:	697b      	ldr	r3, [r7, #20]
 8008cfa:	681b      	ldr	r3, [r3, #0]
 8008cfc:	4a8f      	ldr	r2, [pc, #572]	@ (8008f3c <UART_SetConfig+0x6a0>)
 8008cfe:	4293      	cmp	r3, r2
 8008d00:	d130      	bne.n	8008d64 <UART_SetConfig+0x4c8>
 8008d02:	4b8d      	ldr	r3, [pc, #564]	@ (8008f38 <UART_SetConfig+0x69c>)
 8008d04:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008d06:	f003 0307 	and.w	r3, r3, #7
 8008d0a:	2b05      	cmp	r3, #5
 8008d0c:	d826      	bhi.n	8008d5c <UART_SetConfig+0x4c0>
 8008d0e:	a201      	add	r2, pc, #4	@ (adr r2, 8008d14 <UART_SetConfig+0x478>)
 8008d10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008d14:	08008d2d 	.word	0x08008d2d
 8008d18:	08008d35 	.word	0x08008d35
 8008d1c:	08008d3d 	.word	0x08008d3d
 8008d20:	08008d45 	.word	0x08008d45
 8008d24:	08008d4d 	.word	0x08008d4d
 8008d28:	08008d55 	.word	0x08008d55
 8008d2c:	2300      	movs	r3, #0
 8008d2e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008d32:	e086      	b.n	8008e42 <UART_SetConfig+0x5a6>
 8008d34:	2304      	movs	r3, #4
 8008d36:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008d3a:	e082      	b.n	8008e42 <UART_SetConfig+0x5a6>
 8008d3c:	2308      	movs	r3, #8
 8008d3e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008d42:	e07e      	b.n	8008e42 <UART_SetConfig+0x5a6>
 8008d44:	2310      	movs	r3, #16
 8008d46:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008d4a:	e07a      	b.n	8008e42 <UART_SetConfig+0x5a6>
 8008d4c:	2320      	movs	r3, #32
 8008d4e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008d52:	e076      	b.n	8008e42 <UART_SetConfig+0x5a6>
 8008d54:	2340      	movs	r3, #64	@ 0x40
 8008d56:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008d5a:	e072      	b.n	8008e42 <UART_SetConfig+0x5a6>
 8008d5c:	2380      	movs	r3, #128	@ 0x80
 8008d5e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008d62:	e06e      	b.n	8008e42 <UART_SetConfig+0x5a6>
 8008d64:	697b      	ldr	r3, [r7, #20]
 8008d66:	681b      	ldr	r3, [r3, #0]
 8008d68:	4a75      	ldr	r2, [pc, #468]	@ (8008f40 <UART_SetConfig+0x6a4>)
 8008d6a:	4293      	cmp	r3, r2
 8008d6c:	d130      	bne.n	8008dd0 <UART_SetConfig+0x534>
 8008d6e:	4b72      	ldr	r3, [pc, #456]	@ (8008f38 <UART_SetConfig+0x69c>)
 8008d70:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008d72:	f003 0307 	and.w	r3, r3, #7
 8008d76:	2b05      	cmp	r3, #5
 8008d78:	d826      	bhi.n	8008dc8 <UART_SetConfig+0x52c>
 8008d7a:	a201      	add	r2, pc, #4	@ (adr r2, 8008d80 <UART_SetConfig+0x4e4>)
 8008d7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008d80:	08008d99 	.word	0x08008d99
 8008d84:	08008da1 	.word	0x08008da1
 8008d88:	08008da9 	.word	0x08008da9
 8008d8c:	08008db1 	.word	0x08008db1
 8008d90:	08008db9 	.word	0x08008db9
 8008d94:	08008dc1 	.word	0x08008dc1
 8008d98:	2300      	movs	r3, #0
 8008d9a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008d9e:	e050      	b.n	8008e42 <UART_SetConfig+0x5a6>
 8008da0:	2304      	movs	r3, #4
 8008da2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008da6:	e04c      	b.n	8008e42 <UART_SetConfig+0x5a6>
 8008da8:	2308      	movs	r3, #8
 8008daa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008dae:	e048      	b.n	8008e42 <UART_SetConfig+0x5a6>
 8008db0:	2310      	movs	r3, #16
 8008db2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008db6:	e044      	b.n	8008e42 <UART_SetConfig+0x5a6>
 8008db8:	2320      	movs	r3, #32
 8008dba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008dbe:	e040      	b.n	8008e42 <UART_SetConfig+0x5a6>
 8008dc0:	2340      	movs	r3, #64	@ 0x40
 8008dc2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008dc6:	e03c      	b.n	8008e42 <UART_SetConfig+0x5a6>
 8008dc8:	2380      	movs	r3, #128	@ 0x80
 8008dca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008dce:	e038      	b.n	8008e42 <UART_SetConfig+0x5a6>
 8008dd0:	697b      	ldr	r3, [r7, #20]
 8008dd2:	681b      	ldr	r3, [r3, #0]
 8008dd4:	4a5b      	ldr	r2, [pc, #364]	@ (8008f44 <UART_SetConfig+0x6a8>)
 8008dd6:	4293      	cmp	r3, r2
 8008dd8:	d130      	bne.n	8008e3c <UART_SetConfig+0x5a0>
 8008dda:	4b57      	ldr	r3, [pc, #348]	@ (8008f38 <UART_SetConfig+0x69c>)
 8008ddc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008dde:	f003 0307 	and.w	r3, r3, #7
 8008de2:	2b05      	cmp	r3, #5
 8008de4:	d826      	bhi.n	8008e34 <UART_SetConfig+0x598>
 8008de6:	a201      	add	r2, pc, #4	@ (adr r2, 8008dec <UART_SetConfig+0x550>)
 8008de8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008dec:	08008e05 	.word	0x08008e05
 8008df0:	08008e0d 	.word	0x08008e0d
 8008df4:	08008e15 	.word	0x08008e15
 8008df8:	08008e1d 	.word	0x08008e1d
 8008dfc:	08008e25 	.word	0x08008e25
 8008e00:	08008e2d 	.word	0x08008e2d
 8008e04:	2302      	movs	r3, #2
 8008e06:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008e0a:	e01a      	b.n	8008e42 <UART_SetConfig+0x5a6>
 8008e0c:	2304      	movs	r3, #4
 8008e0e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008e12:	e016      	b.n	8008e42 <UART_SetConfig+0x5a6>
 8008e14:	2308      	movs	r3, #8
 8008e16:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008e1a:	e012      	b.n	8008e42 <UART_SetConfig+0x5a6>
 8008e1c:	2310      	movs	r3, #16
 8008e1e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008e22:	e00e      	b.n	8008e42 <UART_SetConfig+0x5a6>
 8008e24:	2320      	movs	r3, #32
 8008e26:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008e2a:	e00a      	b.n	8008e42 <UART_SetConfig+0x5a6>
 8008e2c:	2340      	movs	r3, #64	@ 0x40
 8008e2e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008e32:	e006      	b.n	8008e42 <UART_SetConfig+0x5a6>
 8008e34:	2380      	movs	r3, #128	@ 0x80
 8008e36:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008e3a:	e002      	b.n	8008e42 <UART_SetConfig+0x5a6>
 8008e3c:	2380      	movs	r3, #128	@ 0x80
 8008e3e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8008e42:	697b      	ldr	r3, [r7, #20]
 8008e44:	681b      	ldr	r3, [r3, #0]
 8008e46:	4a3f      	ldr	r2, [pc, #252]	@ (8008f44 <UART_SetConfig+0x6a8>)
 8008e48:	4293      	cmp	r3, r2
 8008e4a:	f040 80f8 	bne.w	800903e <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8008e4e:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8008e52:	2b20      	cmp	r3, #32
 8008e54:	dc46      	bgt.n	8008ee4 <UART_SetConfig+0x648>
 8008e56:	2b02      	cmp	r3, #2
 8008e58:	f2c0 8082 	blt.w	8008f60 <UART_SetConfig+0x6c4>
 8008e5c:	3b02      	subs	r3, #2
 8008e5e:	2b1e      	cmp	r3, #30
 8008e60:	d87e      	bhi.n	8008f60 <UART_SetConfig+0x6c4>
 8008e62:	a201      	add	r2, pc, #4	@ (adr r2, 8008e68 <UART_SetConfig+0x5cc>)
 8008e64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008e68:	08008eeb 	.word	0x08008eeb
 8008e6c:	08008f61 	.word	0x08008f61
 8008e70:	08008ef3 	.word	0x08008ef3
 8008e74:	08008f61 	.word	0x08008f61
 8008e78:	08008f61 	.word	0x08008f61
 8008e7c:	08008f61 	.word	0x08008f61
 8008e80:	08008f03 	.word	0x08008f03
 8008e84:	08008f61 	.word	0x08008f61
 8008e88:	08008f61 	.word	0x08008f61
 8008e8c:	08008f61 	.word	0x08008f61
 8008e90:	08008f61 	.word	0x08008f61
 8008e94:	08008f61 	.word	0x08008f61
 8008e98:	08008f61 	.word	0x08008f61
 8008e9c:	08008f61 	.word	0x08008f61
 8008ea0:	08008f13 	.word	0x08008f13
 8008ea4:	08008f61 	.word	0x08008f61
 8008ea8:	08008f61 	.word	0x08008f61
 8008eac:	08008f61 	.word	0x08008f61
 8008eb0:	08008f61 	.word	0x08008f61
 8008eb4:	08008f61 	.word	0x08008f61
 8008eb8:	08008f61 	.word	0x08008f61
 8008ebc:	08008f61 	.word	0x08008f61
 8008ec0:	08008f61 	.word	0x08008f61
 8008ec4:	08008f61 	.word	0x08008f61
 8008ec8:	08008f61 	.word	0x08008f61
 8008ecc:	08008f61 	.word	0x08008f61
 8008ed0:	08008f61 	.word	0x08008f61
 8008ed4:	08008f61 	.word	0x08008f61
 8008ed8:	08008f61 	.word	0x08008f61
 8008edc:	08008f61 	.word	0x08008f61
 8008ee0:	08008f53 	.word	0x08008f53
 8008ee4:	2b40      	cmp	r3, #64	@ 0x40
 8008ee6:	d037      	beq.n	8008f58 <UART_SetConfig+0x6bc>
 8008ee8:	e03a      	b.n	8008f60 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8008eea:	f7fe ff0f 	bl	8007d0c <HAL_RCCEx_GetD3PCLK1Freq>
 8008eee:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8008ef0:	e03c      	b.n	8008f6c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008ef2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8008ef6:	4618      	mov	r0, r3
 8008ef8:	f7fe ff1e 	bl	8007d38 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8008efc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008efe:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008f00:	e034      	b.n	8008f6c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008f02:	f107 0318 	add.w	r3, r7, #24
 8008f06:	4618      	mov	r0, r3
 8008f08:	f7ff f86a 	bl	8007fe0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8008f0c:	69fb      	ldr	r3, [r7, #28]
 8008f0e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008f10:	e02c      	b.n	8008f6c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008f12:	4b09      	ldr	r3, [pc, #36]	@ (8008f38 <UART_SetConfig+0x69c>)
 8008f14:	681b      	ldr	r3, [r3, #0]
 8008f16:	f003 0320 	and.w	r3, r3, #32
 8008f1a:	2b00      	cmp	r3, #0
 8008f1c:	d016      	beq.n	8008f4c <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8008f1e:	4b06      	ldr	r3, [pc, #24]	@ (8008f38 <UART_SetConfig+0x69c>)
 8008f20:	681b      	ldr	r3, [r3, #0]
 8008f22:	08db      	lsrs	r3, r3, #3
 8008f24:	f003 0303 	and.w	r3, r3, #3
 8008f28:	4a07      	ldr	r2, [pc, #28]	@ (8008f48 <UART_SetConfig+0x6ac>)
 8008f2a:	fa22 f303 	lsr.w	r3, r2, r3
 8008f2e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8008f30:	e01c      	b.n	8008f6c <UART_SetConfig+0x6d0>
 8008f32:	bf00      	nop
 8008f34:	40011400 	.word	0x40011400
 8008f38:	58024400 	.word	0x58024400
 8008f3c:	40007800 	.word	0x40007800
 8008f40:	40007c00 	.word	0x40007c00
 8008f44:	58000c00 	.word	0x58000c00
 8008f48:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 8008f4c:	4b9d      	ldr	r3, [pc, #628]	@ (80091c4 <UART_SetConfig+0x928>)
 8008f4e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008f50:	e00c      	b.n	8008f6c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8008f52:	4b9d      	ldr	r3, [pc, #628]	@ (80091c8 <UART_SetConfig+0x92c>)
 8008f54:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008f56:	e009      	b.n	8008f6c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008f58:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008f5c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008f5e:	e005      	b.n	8008f6c <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 8008f60:	2300      	movs	r3, #0
 8008f62:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8008f64:	2301      	movs	r3, #1
 8008f66:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8008f6a:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8008f6c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008f6e:	2b00      	cmp	r3, #0
 8008f70:	f000 81de 	beq.w	8009330 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8008f74:	697b      	ldr	r3, [r7, #20]
 8008f76:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008f78:	4a94      	ldr	r2, [pc, #592]	@ (80091cc <UART_SetConfig+0x930>)
 8008f7a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008f7e:	461a      	mov	r2, r3
 8008f80:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008f82:	fbb3 f3f2 	udiv	r3, r3, r2
 8008f86:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008f88:	697b      	ldr	r3, [r7, #20]
 8008f8a:	685a      	ldr	r2, [r3, #4]
 8008f8c:	4613      	mov	r3, r2
 8008f8e:	005b      	lsls	r3, r3, #1
 8008f90:	4413      	add	r3, r2
 8008f92:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008f94:	429a      	cmp	r2, r3
 8008f96:	d305      	bcc.n	8008fa4 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8008f98:	697b      	ldr	r3, [r7, #20]
 8008f9a:	685b      	ldr	r3, [r3, #4]
 8008f9c:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008f9e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008fa0:	429a      	cmp	r2, r3
 8008fa2:	d903      	bls.n	8008fac <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 8008fa4:	2301      	movs	r3, #1
 8008fa6:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8008faa:	e1c1      	b.n	8009330 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008fac:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008fae:	2200      	movs	r2, #0
 8008fb0:	60bb      	str	r3, [r7, #8]
 8008fb2:	60fa      	str	r2, [r7, #12]
 8008fb4:	697b      	ldr	r3, [r7, #20]
 8008fb6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008fb8:	4a84      	ldr	r2, [pc, #528]	@ (80091cc <UART_SetConfig+0x930>)
 8008fba:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008fbe:	b29b      	uxth	r3, r3
 8008fc0:	2200      	movs	r2, #0
 8008fc2:	603b      	str	r3, [r7, #0]
 8008fc4:	607a      	str	r2, [r7, #4]
 8008fc6:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008fca:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8008fce:	f7f7 fb9b 	bl	8000708 <__aeabi_uldivmod>
 8008fd2:	4602      	mov	r2, r0
 8008fd4:	460b      	mov	r3, r1
 8008fd6:	4610      	mov	r0, r2
 8008fd8:	4619      	mov	r1, r3
 8008fda:	f04f 0200 	mov.w	r2, #0
 8008fde:	f04f 0300 	mov.w	r3, #0
 8008fe2:	020b      	lsls	r3, r1, #8
 8008fe4:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8008fe8:	0202      	lsls	r2, r0, #8
 8008fea:	6979      	ldr	r1, [r7, #20]
 8008fec:	6849      	ldr	r1, [r1, #4]
 8008fee:	0849      	lsrs	r1, r1, #1
 8008ff0:	2000      	movs	r0, #0
 8008ff2:	460c      	mov	r4, r1
 8008ff4:	4605      	mov	r5, r0
 8008ff6:	eb12 0804 	adds.w	r8, r2, r4
 8008ffa:	eb43 0905 	adc.w	r9, r3, r5
 8008ffe:	697b      	ldr	r3, [r7, #20]
 8009000:	685b      	ldr	r3, [r3, #4]
 8009002:	2200      	movs	r2, #0
 8009004:	469a      	mov	sl, r3
 8009006:	4693      	mov	fp, r2
 8009008:	4652      	mov	r2, sl
 800900a:	465b      	mov	r3, fp
 800900c:	4640      	mov	r0, r8
 800900e:	4649      	mov	r1, r9
 8009010:	f7f7 fb7a 	bl	8000708 <__aeabi_uldivmod>
 8009014:	4602      	mov	r2, r0
 8009016:	460b      	mov	r3, r1
 8009018:	4613      	mov	r3, r2
 800901a:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800901c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800901e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8009022:	d308      	bcc.n	8009036 <UART_SetConfig+0x79a>
 8009024:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009026:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800902a:	d204      	bcs.n	8009036 <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 800902c:	697b      	ldr	r3, [r7, #20]
 800902e:	681b      	ldr	r3, [r3, #0]
 8009030:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8009032:	60da      	str	r2, [r3, #12]
 8009034:	e17c      	b.n	8009330 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 8009036:	2301      	movs	r3, #1
 8009038:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800903c:	e178      	b.n	8009330 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800903e:	697b      	ldr	r3, [r7, #20]
 8009040:	69db      	ldr	r3, [r3, #28]
 8009042:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009046:	f040 80c5 	bne.w	80091d4 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 800904a:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800904e:	2b20      	cmp	r3, #32
 8009050:	dc48      	bgt.n	80090e4 <UART_SetConfig+0x848>
 8009052:	2b00      	cmp	r3, #0
 8009054:	db7b      	blt.n	800914e <UART_SetConfig+0x8b2>
 8009056:	2b20      	cmp	r3, #32
 8009058:	d879      	bhi.n	800914e <UART_SetConfig+0x8b2>
 800905a:	a201      	add	r2, pc, #4	@ (adr r2, 8009060 <UART_SetConfig+0x7c4>)
 800905c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009060:	080090eb 	.word	0x080090eb
 8009064:	080090f3 	.word	0x080090f3
 8009068:	0800914f 	.word	0x0800914f
 800906c:	0800914f 	.word	0x0800914f
 8009070:	080090fb 	.word	0x080090fb
 8009074:	0800914f 	.word	0x0800914f
 8009078:	0800914f 	.word	0x0800914f
 800907c:	0800914f 	.word	0x0800914f
 8009080:	0800910b 	.word	0x0800910b
 8009084:	0800914f 	.word	0x0800914f
 8009088:	0800914f 	.word	0x0800914f
 800908c:	0800914f 	.word	0x0800914f
 8009090:	0800914f 	.word	0x0800914f
 8009094:	0800914f 	.word	0x0800914f
 8009098:	0800914f 	.word	0x0800914f
 800909c:	0800914f 	.word	0x0800914f
 80090a0:	0800911b 	.word	0x0800911b
 80090a4:	0800914f 	.word	0x0800914f
 80090a8:	0800914f 	.word	0x0800914f
 80090ac:	0800914f 	.word	0x0800914f
 80090b0:	0800914f 	.word	0x0800914f
 80090b4:	0800914f 	.word	0x0800914f
 80090b8:	0800914f 	.word	0x0800914f
 80090bc:	0800914f 	.word	0x0800914f
 80090c0:	0800914f 	.word	0x0800914f
 80090c4:	0800914f 	.word	0x0800914f
 80090c8:	0800914f 	.word	0x0800914f
 80090cc:	0800914f 	.word	0x0800914f
 80090d0:	0800914f 	.word	0x0800914f
 80090d4:	0800914f 	.word	0x0800914f
 80090d8:	0800914f 	.word	0x0800914f
 80090dc:	0800914f 	.word	0x0800914f
 80090e0:	08009141 	.word	0x08009141
 80090e4:	2b40      	cmp	r3, #64	@ 0x40
 80090e6:	d02e      	beq.n	8009146 <UART_SetConfig+0x8aa>
 80090e8:	e031      	b.n	800914e <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80090ea:	f7fd fbd9 	bl	80068a0 <HAL_RCC_GetPCLK1Freq>
 80090ee:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80090f0:	e033      	b.n	800915a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80090f2:	f7fd fbeb 	bl	80068cc <HAL_RCC_GetPCLK2Freq>
 80090f6:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80090f8:	e02f      	b.n	800915a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80090fa:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80090fe:	4618      	mov	r0, r3
 8009100:	f7fe fe1a 	bl	8007d38 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8009104:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009106:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009108:	e027      	b.n	800915a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800910a:	f107 0318 	add.w	r3, r7, #24
 800910e:	4618      	mov	r0, r3
 8009110:	f7fe ff66 	bl	8007fe0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8009114:	69fb      	ldr	r3, [r7, #28]
 8009116:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009118:	e01f      	b.n	800915a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800911a:	4b2d      	ldr	r3, [pc, #180]	@ (80091d0 <UART_SetConfig+0x934>)
 800911c:	681b      	ldr	r3, [r3, #0]
 800911e:	f003 0320 	and.w	r3, r3, #32
 8009122:	2b00      	cmp	r3, #0
 8009124:	d009      	beq.n	800913a <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8009126:	4b2a      	ldr	r3, [pc, #168]	@ (80091d0 <UART_SetConfig+0x934>)
 8009128:	681b      	ldr	r3, [r3, #0]
 800912a:	08db      	lsrs	r3, r3, #3
 800912c:	f003 0303 	and.w	r3, r3, #3
 8009130:	4a24      	ldr	r2, [pc, #144]	@ (80091c4 <UART_SetConfig+0x928>)
 8009132:	fa22 f303 	lsr.w	r3, r2, r3
 8009136:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8009138:	e00f      	b.n	800915a <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800913a:	4b22      	ldr	r3, [pc, #136]	@ (80091c4 <UART_SetConfig+0x928>)
 800913c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800913e:	e00c      	b.n	800915a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8009140:	4b21      	ldr	r3, [pc, #132]	@ (80091c8 <UART_SetConfig+0x92c>)
 8009142:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009144:	e009      	b.n	800915a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009146:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800914a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800914c:	e005      	b.n	800915a <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800914e:	2300      	movs	r3, #0
 8009150:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8009152:	2301      	movs	r3, #1
 8009154:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8009158:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800915a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800915c:	2b00      	cmp	r3, #0
 800915e:	f000 80e7 	beq.w	8009330 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009162:	697b      	ldr	r3, [r7, #20]
 8009164:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009166:	4a19      	ldr	r2, [pc, #100]	@ (80091cc <UART_SetConfig+0x930>)
 8009168:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800916c:	461a      	mov	r2, r3
 800916e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009170:	fbb3 f3f2 	udiv	r3, r3, r2
 8009174:	005a      	lsls	r2, r3, #1
 8009176:	697b      	ldr	r3, [r7, #20]
 8009178:	685b      	ldr	r3, [r3, #4]
 800917a:	085b      	lsrs	r3, r3, #1
 800917c:	441a      	add	r2, r3
 800917e:	697b      	ldr	r3, [r7, #20]
 8009180:	685b      	ldr	r3, [r3, #4]
 8009182:	fbb2 f3f3 	udiv	r3, r2, r3
 8009186:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009188:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800918a:	2b0f      	cmp	r3, #15
 800918c:	d916      	bls.n	80091bc <UART_SetConfig+0x920>
 800918e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009190:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009194:	d212      	bcs.n	80091bc <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8009196:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009198:	b29b      	uxth	r3, r3
 800919a:	f023 030f 	bic.w	r3, r3, #15
 800919e:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80091a0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80091a2:	085b      	lsrs	r3, r3, #1
 80091a4:	b29b      	uxth	r3, r3
 80091a6:	f003 0307 	and.w	r3, r3, #7
 80091aa:	b29a      	uxth	r2, r3
 80091ac:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80091ae:	4313      	orrs	r3, r2
 80091b0:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 80091b2:	697b      	ldr	r3, [r7, #20]
 80091b4:	681b      	ldr	r3, [r3, #0]
 80091b6:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 80091b8:	60da      	str	r2, [r3, #12]
 80091ba:	e0b9      	b.n	8009330 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 80091bc:	2301      	movs	r3, #1
 80091be:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 80091c2:	e0b5      	b.n	8009330 <UART_SetConfig+0xa94>
 80091c4:	03d09000 	.word	0x03d09000
 80091c8:	003d0900 	.word	0x003d0900
 80091cc:	0800e050 	.word	0x0800e050
 80091d0:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 80091d4:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 80091d8:	2b20      	cmp	r3, #32
 80091da:	dc49      	bgt.n	8009270 <UART_SetConfig+0x9d4>
 80091dc:	2b00      	cmp	r3, #0
 80091de:	db7c      	blt.n	80092da <UART_SetConfig+0xa3e>
 80091e0:	2b20      	cmp	r3, #32
 80091e2:	d87a      	bhi.n	80092da <UART_SetConfig+0xa3e>
 80091e4:	a201      	add	r2, pc, #4	@ (adr r2, 80091ec <UART_SetConfig+0x950>)
 80091e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80091ea:	bf00      	nop
 80091ec:	08009277 	.word	0x08009277
 80091f0:	0800927f 	.word	0x0800927f
 80091f4:	080092db 	.word	0x080092db
 80091f8:	080092db 	.word	0x080092db
 80091fc:	08009287 	.word	0x08009287
 8009200:	080092db 	.word	0x080092db
 8009204:	080092db 	.word	0x080092db
 8009208:	080092db 	.word	0x080092db
 800920c:	08009297 	.word	0x08009297
 8009210:	080092db 	.word	0x080092db
 8009214:	080092db 	.word	0x080092db
 8009218:	080092db 	.word	0x080092db
 800921c:	080092db 	.word	0x080092db
 8009220:	080092db 	.word	0x080092db
 8009224:	080092db 	.word	0x080092db
 8009228:	080092db 	.word	0x080092db
 800922c:	080092a7 	.word	0x080092a7
 8009230:	080092db 	.word	0x080092db
 8009234:	080092db 	.word	0x080092db
 8009238:	080092db 	.word	0x080092db
 800923c:	080092db 	.word	0x080092db
 8009240:	080092db 	.word	0x080092db
 8009244:	080092db 	.word	0x080092db
 8009248:	080092db 	.word	0x080092db
 800924c:	080092db 	.word	0x080092db
 8009250:	080092db 	.word	0x080092db
 8009254:	080092db 	.word	0x080092db
 8009258:	080092db 	.word	0x080092db
 800925c:	080092db 	.word	0x080092db
 8009260:	080092db 	.word	0x080092db
 8009264:	080092db 	.word	0x080092db
 8009268:	080092db 	.word	0x080092db
 800926c:	080092cd 	.word	0x080092cd
 8009270:	2b40      	cmp	r3, #64	@ 0x40
 8009272:	d02e      	beq.n	80092d2 <UART_SetConfig+0xa36>
 8009274:	e031      	b.n	80092da <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009276:	f7fd fb13 	bl	80068a0 <HAL_RCC_GetPCLK1Freq>
 800927a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800927c:	e033      	b.n	80092e6 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800927e:	f7fd fb25 	bl	80068cc <HAL_RCC_GetPCLK2Freq>
 8009282:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8009284:	e02f      	b.n	80092e6 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009286:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800928a:	4618      	mov	r0, r3
 800928c:	f7fe fd54 	bl	8007d38 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8009290:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009292:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009294:	e027      	b.n	80092e6 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009296:	f107 0318 	add.w	r3, r7, #24
 800929a:	4618      	mov	r0, r3
 800929c:	f7fe fea0 	bl	8007fe0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80092a0:	69fb      	ldr	r3, [r7, #28]
 80092a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80092a4:	e01f      	b.n	80092e6 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80092a6:	4b2d      	ldr	r3, [pc, #180]	@ (800935c <UART_SetConfig+0xac0>)
 80092a8:	681b      	ldr	r3, [r3, #0]
 80092aa:	f003 0320 	and.w	r3, r3, #32
 80092ae:	2b00      	cmp	r3, #0
 80092b0:	d009      	beq.n	80092c6 <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80092b2:	4b2a      	ldr	r3, [pc, #168]	@ (800935c <UART_SetConfig+0xac0>)
 80092b4:	681b      	ldr	r3, [r3, #0]
 80092b6:	08db      	lsrs	r3, r3, #3
 80092b8:	f003 0303 	and.w	r3, r3, #3
 80092bc:	4a28      	ldr	r2, [pc, #160]	@ (8009360 <UART_SetConfig+0xac4>)
 80092be:	fa22 f303 	lsr.w	r3, r2, r3
 80092c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80092c4:	e00f      	b.n	80092e6 <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 80092c6:	4b26      	ldr	r3, [pc, #152]	@ (8009360 <UART_SetConfig+0xac4>)
 80092c8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80092ca:	e00c      	b.n	80092e6 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80092cc:	4b25      	ldr	r3, [pc, #148]	@ (8009364 <UART_SetConfig+0xac8>)
 80092ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80092d0:	e009      	b.n	80092e6 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80092d2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80092d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80092d8:	e005      	b.n	80092e6 <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 80092da:	2300      	movs	r3, #0
 80092dc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 80092de:	2301      	movs	r3, #1
 80092e0:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 80092e4:	bf00      	nop
    }

    if (pclk != 0U)
 80092e6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80092e8:	2b00      	cmp	r3, #0
 80092ea:	d021      	beq.n	8009330 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80092ec:	697b      	ldr	r3, [r7, #20]
 80092ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80092f0:	4a1d      	ldr	r2, [pc, #116]	@ (8009368 <UART_SetConfig+0xacc>)
 80092f2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80092f6:	461a      	mov	r2, r3
 80092f8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80092fa:	fbb3 f2f2 	udiv	r2, r3, r2
 80092fe:	697b      	ldr	r3, [r7, #20]
 8009300:	685b      	ldr	r3, [r3, #4]
 8009302:	085b      	lsrs	r3, r3, #1
 8009304:	441a      	add	r2, r3
 8009306:	697b      	ldr	r3, [r7, #20]
 8009308:	685b      	ldr	r3, [r3, #4]
 800930a:	fbb2 f3f3 	udiv	r3, r2, r3
 800930e:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009310:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009312:	2b0f      	cmp	r3, #15
 8009314:	d909      	bls.n	800932a <UART_SetConfig+0xa8e>
 8009316:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009318:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800931c:	d205      	bcs.n	800932a <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800931e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009320:	b29a      	uxth	r2, r3
 8009322:	697b      	ldr	r3, [r7, #20]
 8009324:	681b      	ldr	r3, [r3, #0]
 8009326:	60da      	str	r2, [r3, #12]
 8009328:	e002      	b.n	8009330 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800932a:	2301      	movs	r3, #1
 800932c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8009330:	697b      	ldr	r3, [r7, #20]
 8009332:	2201      	movs	r2, #1
 8009334:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8009338:	697b      	ldr	r3, [r7, #20]
 800933a:	2201      	movs	r2, #1
 800933c:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8009340:	697b      	ldr	r3, [r7, #20]
 8009342:	2200      	movs	r2, #0
 8009344:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8009346:	697b      	ldr	r3, [r7, #20]
 8009348:	2200      	movs	r2, #0
 800934a:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800934c:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 8009350:	4618      	mov	r0, r3
 8009352:	3748      	adds	r7, #72	@ 0x48
 8009354:	46bd      	mov	sp, r7
 8009356:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800935a:	bf00      	nop
 800935c:	58024400 	.word	0x58024400
 8009360:	03d09000 	.word	0x03d09000
 8009364:	003d0900 	.word	0x003d0900
 8009368:	0800e050 	.word	0x0800e050

0800936c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800936c:	b480      	push	{r7}
 800936e:	b083      	sub	sp, #12
 8009370:	af00      	add	r7, sp, #0
 8009372:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8009374:	687b      	ldr	r3, [r7, #4]
 8009376:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009378:	f003 0308 	and.w	r3, r3, #8
 800937c:	2b00      	cmp	r3, #0
 800937e:	d00a      	beq.n	8009396 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8009380:	687b      	ldr	r3, [r7, #4]
 8009382:	681b      	ldr	r3, [r3, #0]
 8009384:	685b      	ldr	r3, [r3, #4]
 8009386:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800938a:	687b      	ldr	r3, [r7, #4]
 800938c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800938e:	687b      	ldr	r3, [r7, #4]
 8009390:	681b      	ldr	r3, [r3, #0]
 8009392:	430a      	orrs	r2, r1
 8009394:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8009396:	687b      	ldr	r3, [r7, #4]
 8009398:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800939a:	f003 0301 	and.w	r3, r3, #1
 800939e:	2b00      	cmp	r3, #0
 80093a0:	d00a      	beq.n	80093b8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80093a2:	687b      	ldr	r3, [r7, #4]
 80093a4:	681b      	ldr	r3, [r3, #0]
 80093a6:	685b      	ldr	r3, [r3, #4]
 80093a8:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80093ac:	687b      	ldr	r3, [r7, #4]
 80093ae:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80093b0:	687b      	ldr	r3, [r7, #4]
 80093b2:	681b      	ldr	r3, [r3, #0]
 80093b4:	430a      	orrs	r2, r1
 80093b6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80093b8:	687b      	ldr	r3, [r7, #4]
 80093ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80093bc:	f003 0302 	and.w	r3, r3, #2
 80093c0:	2b00      	cmp	r3, #0
 80093c2:	d00a      	beq.n	80093da <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80093c4:	687b      	ldr	r3, [r7, #4]
 80093c6:	681b      	ldr	r3, [r3, #0]
 80093c8:	685b      	ldr	r3, [r3, #4]
 80093ca:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80093ce:	687b      	ldr	r3, [r7, #4]
 80093d0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80093d2:	687b      	ldr	r3, [r7, #4]
 80093d4:	681b      	ldr	r3, [r3, #0]
 80093d6:	430a      	orrs	r2, r1
 80093d8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80093da:	687b      	ldr	r3, [r7, #4]
 80093dc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80093de:	f003 0304 	and.w	r3, r3, #4
 80093e2:	2b00      	cmp	r3, #0
 80093e4:	d00a      	beq.n	80093fc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80093e6:	687b      	ldr	r3, [r7, #4]
 80093e8:	681b      	ldr	r3, [r3, #0]
 80093ea:	685b      	ldr	r3, [r3, #4]
 80093ec:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80093f0:	687b      	ldr	r3, [r7, #4]
 80093f2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80093f4:	687b      	ldr	r3, [r7, #4]
 80093f6:	681b      	ldr	r3, [r3, #0]
 80093f8:	430a      	orrs	r2, r1
 80093fa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80093fc:	687b      	ldr	r3, [r7, #4]
 80093fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009400:	f003 0310 	and.w	r3, r3, #16
 8009404:	2b00      	cmp	r3, #0
 8009406:	d00a      	beq.n	800941e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8009408:	687b      	ldr	r3, [r7, #4]
 800940a:	681b      	ldr	r3, [r3, #0]
 800940c:	689b      	ldr	r3, [r3, #8]
 800940e:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8009412:	687b      	ldr	r3, [r7, #4]
 8009414:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8009416:	687b      	ldr	r3, [r7, #4]
 8009418:	681b      	ldr	r3, [r3, #0]
 800941a:	430a      	orrs	r2, r1
 800941c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800941e:	687b      	ldr	r3, [r7, #4]
 8009420:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009422:	f003 0320 	and.w	r3, r3, #32
 8009426:	2b00      	cmp	r3, #0
 8009428:	d00a      	beq.n	8009440 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800942a:	687b      	ldr	r3, [r7, #4]
 800942c:	681b      	ldr	r3, [r3, #0]
 800942e:	689b      	ldr	r3, [r3, #8]
 8009430:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8009434:	687b      	ldr	r3, [r7, #4]
 8009436:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8009438:	687b      	ldr	r3, [r7, #4]
 800943a:	681b      	ldr	r3, [r3, #0]
 800943c:	430a      	orrs	r2, r1
 800943e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8009440:	687b      	ldr	r3, [r7, #4]
 8009442:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009444:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009448:	2b00      	cmp	r3, #0
 800944a:	d01a      	beq.n	8009482 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800944c:	687b      	ldr	r3, [r7, #4]
 800944e:	681b      	ldr	r3, [r3, #0]
 8009450:	685b      	ldr	r3, [r3, #4]
 8009452:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8009456:	687b      	ldr	r3, [r7, #4]
 8009458:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800945a:	687b      	ldr	r3, [r7, #4]
 800945c:	681b      	ldr	r3, [r3, #0]
 800945e:	430a      	orrs	r2, r1
 8009460:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8009462:	687b      	ldr	r3, [r7, #4]
 8009464:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009466:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800946a:	d10a      	bne.n	8009482 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800946c:	687b      	ldr	r3, [r7, #4]
 800946e:	681b      	ldr	r3, [r3, #0]
 8009470:	685b      	ldr	r3, [r3, #4]
 8009472:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8009476:	687b      	ldr	r3, [r7, #4]
 8009478:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800947a:	687b      	ldr	r3, [r7, #4]
 800947c:	681b      	ldr	r3, [r3, #0]
 800947e:	430a      	orrs	r2, r1
 8009480:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8009482:	687b      	ldr	r3, [r7, #4]
 8009484:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009486:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800948a:	2b00      	cmp	r3, #0
 800948c:	d00a      	beq.n	80094a4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800948e:	687b      	ldr	r3, [r7, #4]
 8009490:	681b      	ldr	r3, [r3, #0]
 8009492:	685b      	ldr	r3, [r3, #4]
 8009494:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8009498:	687b      	ldr	r3, [r7, #4]
 800949a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800949c:	687b      	ldr	r3, [r7, #4]
 800949e:	681b      	ldr	r3, [r3, #0]
 80094a0:	430a      	orrs	r2, r1
 80094a2:	605a      	str	r2, [r3, #4]
  }
}
 80094a4:	bf00      	nop
 80094a6:	370c      	adds	r7, #12
 80094a8:	46bd      	mov	sp, r7
 80094aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094ae:	4770      	bx	lr

080094b0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80094b0:	b580      	push	{r7, lr}
 80094b2:	b098      	sub	sp, #96	@ 0x60
 80094b4:	af02      	add	r7, sp, #8
 80094b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80094b8:	687b      	ldr	r3, [r7, #4]
 80094ba:	2200      	movs	r2, #0
 80094bc:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80094c0:	f7fb f84e 	bl	8004560 <HAL_GetTick>
 80094c4:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80094c6:	687b      	ldr	r3, [r7, #4]
 80094c8:	681b      	ldr	r3, [r3, #0]
 80094ca:	681b      	ldr	r3, [r3, #0]
 80094cc:	f003 0308 	and.w	r3, r3, #8
 80094d0:	2b08      	cmp	r3, #8
 80094d2:	d12f      	bne.n	8009534 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80094d4:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80094d8:	9300      	str	r3, [sp, #0]
 80094da:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80094dc:	2200      	movs	r2, #0
 80094de:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80094e2:	6878      	ldr	r0, [r7, #4]
 80094e4:	f000 f88e 	bl	8009604 <UART_WaitOnFlagUntilTimeout>
 80094e8:	4603      	mov	r3, r0
 80094ea:	2b00      	cmp	r3, #0
 80094ec:	d022      	beq.n	8009534 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80094ee:	687b      	ldr	r3, [r7, #4]
 80094f0:	681b      	ldr	r3, [r3, #0]
 80094f2:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80094f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80094f6:	e853 3f00 	ldrex	r3, [r3]
 80094fa:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80094fc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80094fe:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8009502:	653b      	str	r3, [r7, #80]	@ 0x50
 8009504:	687b      	ldr	r3, [r7, #4]
 8009506:	681b      	ldr	r3, [r3, #0]
 8009508:	461a      	mov	r2, r3
 800950a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800950c:	647b      	str	r3, [r7, #68]	@ 0x44
 800950e:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009510:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8009512:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009514:	e841 2300 	strex	r3, r2, [r1]
 8009518:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800951a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800951c:	2b00      	cmp	r3, #0
 800951e:	d1e6      	bne.n	80094ee <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8009520:	687b      	ldr	r3, [r7, #4]
 8009522:	2220      	movs	r2, #32
 8009524:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8009528:	687b      	ldr	r3, [r7, #4]
 800952a:	2200      	movs	r2, #0
 800952c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009530:	2303      	movs	r3, #3
 8009532:	e063      	b.n	80095fc <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8009534:	687b      	ldr	r3, [r7, #4]
 8009536:	681b      	ldr	r3, [r3, #0]
 8009538:	681b      	ldr	r3, [r3, #0]
 800953a:	f003 0304 	and.w	r3, r3, #4
 800953e:	2b04      	cmp	r3, #4
 8009540:	d149      	bne.n	80095d6 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009542:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8009546:	9300      	str	r3, [sp, #0]
 8009548:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800954a:	2200      	movs	r2, #0
 800954c:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8009550:	6878      	ldr	r0, [r7, #4]
 8009552:	f000 f857 	bl	8009604 <UART_WaitOnFlagUntilTimeout>
 8009556:	4603      	mov	r3, r0
 8009558:	2b00      	cmp	r3, #0
 800955a:	d03c      	beq.n	80095d6 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800955c:	687b      	ldr	r3, [r7, #4]
 800955e:	681b      	ldr	r3, [r3, #0]
 8009560:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009562:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009564:	e853 3f00 	ldrex	r3, [r3]
 8009568:	623b      	str	r3, [r7, #32]
   return(result);
 800956a:	6a3b      	ldr	r3, [r7, #32]
 800956c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8009570:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009572:	687b      	ldr	r3, [r7, #4]
 8009574:	681b      	ldr	r3, [r3, #0]
 8009576:	461a      	mov	r2, r3
 8009578:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800957a:	633b      	str	r3, [r7, #48]	@ 0x30
 800957c:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800957e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009580:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009582:	e841 2300 	strex	r3, r2, [r1]
 8009586:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8009588:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800958a:	2b00      	cmp	r3, #0
 800958c:	d1e6      	bne.n	800955c <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800958e:	687b      	ldr	r3, [r7, #4]
 8009590:	681b      	ldr	r3, [r3, #0]
 8009592:	3308      	adds	r3, #8
 8009594:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009596:	693b      	ldr	r3, [r7, #16]
 8009598:	e853 3f00 	ldrex	r3, [r3]
 800959c:	60fb      	str	r3, [r7, #12]
   return(result);
 800959e:	68fb      	ldr	r3, [r7, #12]
 80095a0:	f023 0301 	bic.w	r3, r3, #1
 80095a4:	64bb      	str	r3, [r7, #72]	@ 0x48
 80095a6:	687b      	ldr	r3, [r7, #4]
 80095a8:	681b      	ldr	r3, [r3, #0]
 80095aa:	3308      	adds	r3, #8
 80095ac:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80095ae:	61fa      	str	r2, [r7, #28]
 80095b0:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80095b2:	69b9      	ldr	r1, [r7, #24]
 80095b4:	69fa      	ldr	r2, [r7, #28]
 80095b6:	e841 2300 	strex	r3, r2, [r1]
 80095ba:	617b      	str	r3, [r7, #20]
   return(result);
 80095bc:	697b      	ldr	r3, [r7, #20]
 80095be:	2b00      	cmp	r3, #0
 80095c0:	d1e5      	bne.n	800958e <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 80095c2:	687b      	ldr	r3, [r7, #4]
 80095c4:	2220      	movs	r2, #32
 80095c6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 80095ca:	687b      	ldr	r3, [r7, #4]
 80095cc:	2200      	movs	r2, #0
 80095ce:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80095d2:	2303      	movs	r3, #3
 80095d4:	e012      	b.n	80095fc <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80095d6:	687b      	ldr	r3, [r7, #4]
 80095d8:	2220      	movs	r2, #32
 80095da:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 80095de:	687b      	ldr	r3, [r7, #4]
 80095e0:	2220      	movs	r2, #32
 80095e2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80095e6:	687b      	ldr	r3, [r7, #4]
 80095e8:	2200      	movs	r2, #0
 80095ea:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80095ec:	687b      	ldr	r3, [r7, #4]
 80095ee:	2200      	movs	r2, #0
 80095f0:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 80095f2:	687b      	ldr	r3, [r7, #4]
 80095f4:	2200      	movs	r2, #0
 80095f6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80095fa:	2300      	movs	r3, #0
}
 80095fc:	4618      	mov	r0, r3
 80095fe:	3758      	adds	r7, #88	@ 0x58
 8009600:	46bd      	mov	sp, r7
 8009602:	bd80      	pop	{r7, pc}

08009604 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8009604:	b580      	push	{r7, lr}
 8009606:	b084      	sub	sp, #16
 8009608:	af00      	add	r7, sp, #0
 800960a:	60f8      	str	r0, [r7, #12]
 800960c:	60b9      	str	r1, [r7, #8]
 800960e:	603b      	str	r3, [r7, #0]
 8009610:	4613      	mov	r3, r2
 8009612:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009614:	e04f      	b.n	80096b6 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009616:	69bb      	ldr	r3, [r7, #24]
 8009618:	f1b3 3fff 	cmp.w	r3, #4294967295
 800961c:	d04b      	beq.n	80096b6 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800961e:	f7fa ff9f 	bl	8004560 <HAL_GetTick>
 8009622:	4602      	mov	r2, r0
 8009624:	683b      	ldr	r3, [r7, #0]
 8009626:	1ad3      	subs	r3, r2, r3
 8009628:	69ba      	ldr	r2, [r7, #24]
 800962a:	429a      	cmp	r2, r3
 800962c:	d302      	bcc.n	8009634 <UART_WaitOnFlagUntilTimeout+0x30>
 800962e:	69bb      	ldr	r3, [r7, #24]
 8009630:	2b00      	cmp	r3, #0
 8009632:	d101      	bne.n	8009638 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8009634:	2303      	movs	r3, #3
 8009636:	e04e      	b.n	80096d6 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8009638:	68fb      	ldr	r3, [r7, #12]
 800963a:	681b      	ldr	r3, [r3, #0]
 800963c:	681b      	ldr	r3, [r3, #0]
 800963e:	f003 0304 	and.w	r3, r3, #4
 8009642:	2b00      	cmp	r3, #0
 8009644:	d037      	beq.n	80096b6 <UART_WaitOnFlagUntilTimeout+0xb2>
 8009646:	68bb      	ldr	r3, [r7, #8]
 8009648:	2b80      	cmp	r3, #128	@ 0x80
 800964a:	d034      	beq.n	80096b6 <UART_WaitOnFlagUntilTimeout+0xb2>
 800964c:	68bb      	ldr	r3, [r7, #8]
 800964e:	2b40      	cmp	r3, #64	@ 0x40
 8009650:	d031      	beq.n	80096b6 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8009652:	68fb      	ldr	r3, [r7, #12]
 8009654:	681b      	ldr	r3, [r3, #0]
 8009656:	69db      	ldr	r3, [r3, #28]
 8009658:	f003 0308 	and.w	r3, r3, #8
 800965c:	2b08      	cmp	r3, #8
 800965e:	d110      	bne.n	8009682 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8009660:	68fb      	ldr	r3, [r7, #12]
 8009662:	681b      	ldr	r3, [r3, #0]
 8009664:	2208      	movs	r2, #8
 8009666:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8009668:	68f8      	ldr	r0, [r7, #12]
 800966a:	f000 f839 	bl	80096e0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800966e:	68fb      	ldr	r3, [r7, #12]
 8009670:	2208      	movs	r2, #8
 8009672:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8009676:	68fb      	ldr	r3, [r7, #12]
 8009678:	2200      	movs	r2, #0
 800967a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800967e:	2301      	movs	r3, #1
 8009680:	e029      	b.n	80096d6 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8009682:	68fb      	ldr	r3, [r7, #12]
 8009684:	681b      	ldr	r3, [r3, #0]
 8009686:	69db      	ldr	r3, [r3, #28]
 8009688:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800968c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8009690:	d111      	bne.n	80096b6 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009692:	68fb      	ldr	r3, [r7, #12]
 8009694:	681b      	ldr	r3, [r3, #0]
 8009696:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800969a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800969c:	68f8      	ldr	r0, [r7, #12]
 800969e:	f000 f81f 	bl	80096e0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80096a2:	68fb      	ldr	r3, [r7, #12]
 80096a4:	2220      	movs	r2, #32
 80096a6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80096aa:	68fb      	ldr	r3, [r7, #12]
 80096ac:	2200      	movs	r2, #0
 80096ae:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 80096b2:	2303      	movs	r3, #3
 80096b4:	e00f      	b.n	80096d6 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80096b6:	68fb      	ldr	r3, [r7, #12]
 80096b8:	681b      	ldr	r3, [r3, #0]
 80096ba:	69da      	ldr	r2, [r3, #28]
 80096bc:	68bb      	ldr	r3, [r7, #8]
 80096be:	4013      	ands	r3, r2
 80096c0:	68ba      	ldr	r2, [r7, #8]
 80096c2:	429a      	cmp	r2, r3
 80096c4:	bf0c      	ite	eq
 80096c6:	2301      	moveq	r3, #1
 80096c8:	2300      	movne	r3, #0
 80096ca:	b2db      	uxtb	r3, r3
 80096cc:	461a      	mov	r2, r3
 80096ce:	79fb      	ldrb	r3, [r7, #7]
 80096d0:	429a      	cmp	r2, r3
 80096d2:	d0a0      	beq.n	8009616 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80096d4:	2300      	movs	r3, #0
}
 80096d6:	4618      	mov	r0, r3
 80096d8:	3710      	adds	r7, #16
 80096da:	46bd      	mov	sp, r7
 80096dc:	bd80      	pop	{r7, pc}
	...

080096e0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80096e0:	b480      	push	{r7}
 80096e2:	b095      	sub	sp, #84	@ 0x54
 80096e4:	af00      	add	r7, sp, #0
 80096e6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80096e8:	687b      	ldr	r3, [r7, #4]
 80096ea:	681b      	ldr	r3, [r3, #0]
 80096ec:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80096ee:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80096f0:	e853 3f00 	ldrex	r3, [r3]
 80096f4:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80096f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80096f8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80096fc:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80096fe:	687b      	ldr	r3, [r7, #4]
 8009700:	681b      	ldr	r3, [r3, #0]
 8009702:	461a      	mov	r2, r3
 8009704:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009706:	643b      	str	r3, [r7, #64]	@ 0x40
 8009708:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800970a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800970c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800970e:	e841 2300 	strex	r3, r2, [r1]
 8009712:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8009714:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009716:	2b00      	cmp	r3, #0
 8009718:	d1e6      	bne.n	80096e8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800971a:	687b      	ldr	r3, [r7, #4]
 800971c:	681b      	ldr	r3, [r3, #0]
 800971e:	3308      	adds	r3, #8
 8009720:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009722:	6a3b      	ldr	r3, [r7, #32]
 8009724:	e853 3f00 	ldrex	r3, [r3]
 8009728:	61fb      	str	r3, [r7, #28]
   return(result);
 800972a:	69fa      	ldr	r2, [r7, #28]
 800972c:	4b1e      	ldr	r3, [pc, #120]	@ (80097a8 <UART_EndRxTransfer+0xc8>)
 800972e:	4013      	ands	r3, r2
 8009730:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009732:	687b      	ldr	r3, [r7, #4]
 8009734:	681b      	ldr	r3, [r3, #0]
 8009736:	3308      	adds	r3, #8
 8009738:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800973a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800973c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800973e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8009740:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009742:	e841 2300 	strex	r3, r2, [r1]
 8009746:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8009748:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800974a:	2b00      	cmp	r3, #0
 800974c:	d1e5      	bne.n	800971a <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800974e:	687b      	ldr	r3, [r7, #4]
 8009750:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009752:	2b01      	cmp	r3, #1
 8009754:	d118      	bne.n	8009788 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009756:	687b      	ldr	r3, [r7, #4]
 8009758:	681b      	ldr	r3, [r3, #0]
 800975a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800975c:	68fb      	ldr	r3, [r7, #12]
 800975e:	e853 3f00 	ldrex	r3, [r3]
 8009762:	60bb      	str	r3, [r7, #8]
   return(result);
 8009764:	68bb      	ldr	r3, [r7, #8]
 8009766:	f023 0310 	bic.w	r3, r3, #16
 800976a:	647b      	str	r3, [r7, #68]	@ 0x44
 800976c:	687b      	ldr	r3, [r7, #4]
 800976e:	681b      	ldr	r3, [r3, #0]
 8009770:	461a      	mov	r2, r3
 8009772:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009774:	61bb      	str	r3, [r7, #24]
 8009776:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009778:	6979      	ldr	r1, [r7, #20]
 800977a:	69ba      	ldr	r2, [r7, #24]
 800977c:	e841 2300 	strex	r3, r2, [r1]
 8009780:	613b      	str	r3, [r7, #16]
   return(result);
 8009782:	693b      	ldr	r3, [r7, #16]
 8009784:	2b00      	cmp	r3, #0
 8009786:	d1e6      	bne.n	8009756 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8009788:	687b      	ldr	r3, [r7, #4]
 800978a:	2220      	movs	r2, #32
 800978c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009790:	687b      	ldr	r3, [r7, #4]
 8009792:	2200      	movs	r2, #0
 8009794:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8009796:	687b      	ldr	r3, [r7, #4]
 8009798:	2200      	movs	r2, #0
 800979a:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800979c:	bf00      	nop
 800979e:	3754      	adds	r7, #84	@ 0x54
 80097a0:	46bd      	mov	sp, r7
 80097a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097a6:	4770      	bx	lr
 80097a8:	effffffe 	.word	0xeffffffe

080097ac <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80097ac:	b480      	push	{r7}
 80097ae:	b085      	sub	sp, #20
 80097b0:	af00      	add	r7, sp, #0
 80097b2:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80097b4:	687b      	ldr	r3, [r7, #4]
 80097b6:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80097ba:	2b01      	cmp	r3, #1
 80097bc:	d101      	bne.n	80097c2 <HAL_UARTEx_DisableFifoMode+0x16>
 80097be:	2302      	movs	r3, #2
 80097c0:	e027      	b.n	8009812 <HAL_UARTEx_DisableFifoMode+0x66>
 80097c2:	687b      	ldr	r3, [r7, #4]
 80097c4:	2201      	movs	r2, #1
 80097c6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80097ca:	687b      	ldr	r3, [r7, #4]
 80097cc:	2224      	movs	r2, #36	@ 0x24
 80097ce:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80097d2:	687b      	ldr	r3, [r7, #4]
 80097d4:	681b      	ldr	r3, [r3, #0]
 80097d6:	681b      	ldr	r3, [r3, #0]
 80097d8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80097da:	687b      	ldr	r3, [r7, #4]
 80097dc:	681b      	ldr	r3, [r3, #0]
 80097de:	681a      	ldr	r2, [r3, #0]
 80097e0:	687b      	ldr	r3, [r7, #4]
 80097e2:	681b      	ldr	r3, [r3, #0]
 80097e4:	f022 0201 	bic.w	r2, r2, #1
 80097e8:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80097ea:	68fb      	ldr	r3, [r7, #12]
 80097ec:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 80097f0:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80097f2:	687b      	ldr	r3, [r7, #4]
 80097f4:	2200      	movs	r2, #0
 80097f6:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80097f8:	687b      	ldr	r3, [r7, #4]
 80097fa:	681b      	ldr	r3, [r3, #0]
 80097fc:	68fa      	ldr	r2, [r7, #12]
 80097fe:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009800:	687b      	ldr	r3, [r7, #4]
 8009802:	2220      	movs	r2, #32
 8009804:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009808:	687b      	ldr	r3, [r7, #4]
 800980a:	2200      	movs	r2, #0
 800980c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8009810:	2300      	movs	r3, #0
}
 8009812:	4618      	mov	r0, r3
 8009814:	3714      	adds	r7, #20
 8009816:	46bd      	mov	sp, r7
 8009818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800981c:	4770      	bx	lr

0800981e <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800981e:	b580      	push	{r7, lr}
 8009820:	b084      	sub	sp, #16
 8009822:	af00      	add	r7, sp, #0
 8009824:	6078      	str	r0, [r7, #4]
 8009826:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009828:	687b      	ldr	r3, [r7, #4]
 800982a:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800982e:	2b01      	cmp	r3, #1
 8009830:	d101      	bne.n	8009836 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8009832:	2302      	movs	r3, #2
 8009834:	e02d      	b.n	8009892 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8009836:	687b      	ldr	r3, [r7, #4]
 8009838:	2201      	movs	r2, #1
 800983a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800983e:	687b      	ldr	r3, [r7, #4]
 8009840:	2224      	movs	r2, #36	@ 0x24
 8009842:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009846:	687b      	ldr	r3, [r7, #4]
 8009848:	681b      	ldr	r3, [r3, #0]
 800984a:	681b      	ldr	r3, [r3, #0]
 800984c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800984e:	687b      	ldr	r3, [r7, #4]
 8009850:	681b      	ldr	r3, [r3, #0]
 8009852:	681a      	ldr	r2, [r3, #0]
 8009854:	687b      	ldr	r3, [r7, #4]
 8009856:	681b      	ldr	r3, [r3, #0]
 8009858:	f022 0201 	bic.w	r2, r2, #1
 800985c:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800985e:	687b      	ldr	r3, [r7, #4]
 8009860:	681b      	ldr	r3, [r3, #0]
 8009862:	689b      	ldr	r3, [r3, #8]
 8009864:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8009868:	687b      	ldr	r3, [r7, #4]
 800986a:	681b      	ldr	r3, [r3, #0]
 800986c:	683a      	ldr	r2, [r7, #0]
 800986e:	430a      	orrs	r2, r1
 8009870:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8009872:	6878      	ldr	r0, [r7, #4]
 8009874:	f000 f850 	bl	8009918 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009878:	687b      	ldr	r3, [r7, #4]
 800987a:	681b      	ldr	r3, [r3, #0]
 800987c:	68fa      	ldr	r2, [r7, #12]
 800987e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009880:	687b      	ldr	r3, [r7, #4]
 8009882:	2220      	movs	r2, #32
 8009884:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009888:	687b      	ldr	r3, [r7, #4]
 800988a:	2200      	movs	r2, #0
 800988c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8009890:	2300      	movs	r3, #0
}
 8009892:	4618      	mov	r0, r3
 8009894:	3710      	adds	r7, #16
 8009896:	46bd      	mov	sp, r7
 8009898:	bd80      	pop	{r7, pc}

0800989a <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800989a:	b580      	push	{r7, lr}
 800989c:	b084      	sub	sp, #16
 800989e:	af00      	add	r7, sp, #0
 80098a0:	6078      	str	r0, [r7, #4]
 80098a2:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80098a4:	687b      	ldr	r3, [r7, #4]
 80098a6:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80098aa:	2b01      	cmp	r3, #1
 80098ac:	d101      	bne.n	80098b2 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80098ae:	2302      	movs	r3, #2
 80098b0:	e02d      	b.n	800990e <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80098b2:	687b      	ldr	r3, [r7, #4]
 80098b4:	2201      	movs	r2, #1
 80098b6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80098ba:	687b      	ldr	r3, [r7, #4]
 80098bc:	2224      	movs	r2, #36	@ 0x24
 80098be:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80098c2:	687b      	ldr	r3, [r7, #4]
 80098c4:	681b      	ldr	r3, [r3, #0]
 80098c6:	681b      	ldr	r3, [r3, #0]
 80098c8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80098ca:	687b      	ldr	r3, [r7, #4]
 80098cc:	681b      	ldr	r3, [r3, #0]
 80098ce:	681a      	ldr	r2, [r3, #0]
 80098d0:	687b      	ldr	r3, [r7, #4]
 80098d2:	681b      	ldr	r3, [r3, #0]
 80098d4:	f022 0201 	bic.w	r2, r2, #1
 80098d8:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80098da:	687b      	ldr	r3, [r7, #4]
 80098dc:	681b      	ldr	r3, [r3, #0]
 80098de:	689b      	ldr	r3, [r3, #8]
 80098e0:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 80098e4:	687b      	ldr	r3, [r7, #4]
 80098e6:	681b      	ldr	r3, [r3, #0]
 80098e8:	683a      	ldr	r2, [r7, #0]
 80098ea:	430a      	orrs	r2, r1
 80098ec:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80098ee:	6878      	ldr	r0, [r7, #4]
 80098f0:	f000 f812 	bl	8009918 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80098f4:	687b      	ldr	r3, [r7, #4]
 80098f6:	681b      	ldr	r3, [r3, #0]
 80098f8:	68fa      	ldr	r2, [r7, #12]
 80098fa:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80098fc:	687b      	ldr	r3, [r7, #4]
 80098fe:	2220      	movs	r2, #32
 8009900:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009904:	687b      	ldr	r3, [r7, #4]
 8009906:	2200      	movs	r2, #0
 8009908:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800990c:	2300      	movs	r3, #0
}
 800990e:	4618      	mov	r0, r3
 8009910:	3710      	adds	r7, #16
 8009912:	46bd      	mov	sp, r7
 8009914:	bd80      	pop	{r7, pc}
	...

08009918 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8009918:	b480      	push	{r7}
 800991a:	b085      	sub	sp, #20
 800991c:	af00      	add	r7, sp, #0
 800991e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8009920:	687b      	ldr	r3, [r7, #4]
 8009922:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009924:	2b00      	cmp	r3, #0
 8009926:	d108      	bne.n	800993a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8009928:	687b      	ldr	r3, [r7, #4]
 800992a:	2201      	movs	r2, #1
 800992c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8009930:	687b      	ldr	r3, [r7, #4]
 8009932:	2201      	movs	r2, #1
 8009934:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8009938:	e031      	b.n	800999e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800993a:	2310      	movs	r3, #16
 800993c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800993e:	2310      	movs	r3, #16
 8009940:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8009942:	687b      	ldr	r3, [r7, #4]
 8009944:	681b      	ldr	r3, [r3, #0]
 8009946:	689b      	ldr	r3, [r3, #8]
 8009948:	0e5b      	lsrs	r3, r3, #25
 800994a:	b2db      	uxtb	r3, r3
 800994c:	f003 0307 	and.w	r3, r3, #7
 8009950:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8009952:	687b      	ldr	r3, [r7, #4]
 8009954:	681b      	ldr	r3, [r3, #0]
 8009956:	689b      	ldr	r3, [r3, #8]
 8009958:	0f5b      	lsrs	r3, r3, #29
 800995a:	b2db      	uxtb	r3, r3
 800995c:	f003 0307 	and.w	r3, r3, #7
 8009960:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8009962:	7bbb      	ldrb	r3, [r7, #14]
 8009964:	7b3a      	ldrb	r2, [r7, #12]
 8009966:	4911      	ldr	r1, [pc, #68]	@ (80099ac <UARTEx_SetNbDataToProcess+0x94>)
 8009968:	5c8a      	ldrb	r2, [r1, r2]
 800996a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800996e:	7b3a      	ldrb	r2, [r7, #12]
 8009970:	490f      	ldr	r1, [pc, #60]	@ (80099b0 <UARTEx_SetNbDataToProcess+0x98>)
 8009972:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8009974:	fb93 f3f2 	sdiv	r3, r3, r2
 8009978:	b29a      	uxth	r2, r3
 800997a:	687b      	ldr	r3, [r7, #4]
 800997c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009980:	7bfb      	ldrb	r3, [r7, #15]
 8009982:	7b7a      	ldrb	r2, [r7, #13]
 8009984:	4909      	ldr	r1, [pc, #36]	@ (80099ac <UARTEx_SetNbDataToProcess+0x94>)
 8009986:	5c8a      	ldrb	r2, [r1, r2]
 8009988:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800998c:	7b7a      	ldrb	r2, [r7, #13]
 800998e:	4908      	ldr	r1, [pc, #32]	@ (80099b0 <UARTEx_SetNbDataToProcess+0x98>)
 8009990:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009992:	fb93 f3f2 	sdiv	r3, r3, r2
 8009996:	b29a      	uxth	r2, r3
 8009998:	687b      	ldr	r3, [r7, #4]
 800999a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800999e:	bf00      	nop
 80099a0:	3714      	adds	r7, #20
 80099a2:	46bd      	mov	sp, r7
 80099a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099a8:	4770      	bx	lr
 80099aa:	bf00      	nop
 80099ac:	0800e068 	.word	0x0800e068
 80099b0:	0800e070 	.word	0x0800e070

080099b4 <checkint>:
 80099b4:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 80099b8:	2b7e      	cmp	r3, #126	@ 0x7e
 80099ba:	d910      	bls.n	80099de <checkint+0x2a>
 80099bc:	2b96      	cmp	r3, #150	@ 0x96
 80099be:	d80c      	bhi.n	80099da <checkint+0x26>
 80099c0:	2201      	movs	r2, #1
 80099c2:	f1c3 0396 	rsb	r3, r3, #150	@ 0x96
 80099c6:	fa02 f303 	lsl.w	r3, r2, r3
 80099ca:	1e5a      	subs	r2, r3, #1
 80099cc:	4202      	tst	r2, r0
 80099ce:	d106      	bne.n	80099de <checkint+0x2a>
 80099d0:	4203      	tst	r3, r0
 80099d2:	bf14      	ite	ne
 80099d4:	2001      	movne	r0, #1
 80099d6:	2002      	moveq	r0, #2
 80099d8:	4770      	bx	lr
 80099da:	2002      	movs	r0, #2
 80099dc:	4770      	bx	lr
 80099de:	2000      	movs	r0, #0
 80099e0:	4770      	bx	lr
 80099e2:	0000      	movs	r0, r0
 80099e4:	0000      	movs	r0, r0
	...

080099e8 <powf>:
 80099e8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80099ea:	ee10 1a10 	vmov	r1, s0
 80099ee:	ee10 4a90 	vmov	r4, s1
 80099f2:	f5a1 0200 	sub.w	r2, r1, #8388608	@ 0x800000
 80099f6:	0063      	lsls	r3, r4, #1
 80099f8:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 80099fc:	eef0 7a40 	vmov.f32	s15, s0
 8009a00:	eeb0 7a60 	vmov.f32	s14, s1
 8009a04:	f103 30ff 	add.w	r0, r3, #4294967295
 8009a08:	f06f 7280 	mvn.w	r2, #16777216	@ 0x1000000
 8009a0c:	d252      	bcs.n	8009ab4 <powf+0xcc>
 8009a0e:	4290      	cmp	r0, r2
 8009a10:	d258      	bcs.n	8009ac4 <powf+0xdc>
 8009a12:	2000      	movs	r0, #0
 8009a14:	f101 4340 	add.w	r3, r1, #3221225472	@ 0xc0000000
 8009a18:	f503 034d 	add.w	r3, r3, #13434880	@ 0xcd0000
 8009a1c:	4a9e      	ldr	r2, [pc, #632]	@ (8009c98 <powf+0x2b0>)
 8009a1e:	eebf 2b00 	vmov.f64	d2, #240	@ 0xbf800000 -1.0
 8009a22:	f3c3 44c3 	ubfx	r4, r3, #19, #4
 8009a26:	f36f 0316 	bfc	r3, #0, #23
 8009a2a:	1ac9      	subs	r1, r1, r3
 8009a2c:	eb02 1404 	add.w	r4, r2, r4, lsl #4
 8009a30:	ee07 1a90 	vmov	s15, r1
 8009a34:	ed94 5b02 	vldr	d5, [r4, #8]
 8009a38:	ed94 4b00 	vldr	d4, [r4]
 8009a3c:	15db      	asrs	r3, r3, #23
 8009a3e:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8009a42:	ee07 3a90 	vmov	s15, r3
 8009a46:	eea4 2b06 	vfma.f64	d2, d4, d6
 8009a4a:	ed92 1b42 	vldr	d1, [r2, #264]	@ 0x108
 8009a4e:	ee22 4b02 	vmul.f64	d4, d2, d2
 8009a52:	ee24 0b04 	vmul.f64	d0, d4, d4
 8009a56:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8009a5a:	ee36 6b05 	vadd.f64	d6, d6, d5
 8009a5e:	ed92 5b40 	vldr	d5, [r2, #256]	@ 0x100
 8009a62:	ed92 3b44 	vldr	d3, [r2, #272]	@ 0x110
 8009a66:	eea2 1b05 	vfma.f64	d1, d2, d5
 8009a6a:	ed92 5b46 	vldr	d5, [r2, #280]	@ 0x118
 8009a6e:	eea2 5b03 	vfma.f64	d5, d2, d3
 8009a72:	ed92 3b48 	vldr	d3, [r2, #288]	@ 0x120
 8009a76:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
 8009a7a:	eea2 6b03 	vfma.f64	d6, d2, d3
 8009a7e:	eea4 6b05 	vfma.f64	d6, d4, d5
 8009a82:	eea1 6b00 	vfma.f64	d6, d1, d0
 8009a86:	ee27 7b06 	vmul.f64	d7, d7, d6
 8009a8a:	ee17 3a90 	vmov	r3, s15
 8009a8e:	f3c3 32cf 	ubfx	r2, r3, #15, #16
 8009a92:	f248 03bf 	movw	r3, #32959	@ 0x80bf
 8009a96:	429a      	cmp	r2, r3
 8009a98:	f0c0 8098 	bcc.w	8009bcc <powf+0x1e4>
 8009a9c:	ed9f 6b76 	vldr	d6, [pc, #472]	@ 8009c78 <powf+0x290>
 8009aa0:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8009aa4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009aa8:	dd79      	ble.n	8009b9e <powf+0x1b6>
 8009aaa:	b003      	add	sp, #12
 8009aac:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009ab0:	f000 b920 	b.w	8009cf4 <__math_oflowf>
 8009ab4:	4290      	cmp	r0, r2
 8009ab6:	d330      	bcc.n	8009b1a <powf+0x132>
 8009ab8:	b12b      	cbz	r3, 8009ac6 <powf+0xde>
 8009aba:	0049      	lsls	r1, r1, #1
 8009abc:	f1b1 4f7f 	cmp.w	r1, #4278190080	@ 0xff000000
 8009ac0:	d808      	bhi.n	8009ad4 <powf+0xec>
 8009ac2:	e015      	b.n	8009af0 <powf+0x108>
 8009ac4:	b953      	cbnz	r3, 8009adc <powf+0xf4>
 8009ac6:	f481 0180 	eor.w	r1, r1, #4194304	@ 0x400000
 8009aca:	0049      	lsls	r1, r1, #1
 8009acc:	f511 0f00 	cmn.w	r1, #8388608	@ 0x800000
 8009ad0:	f240 80ca 	bls.w	8009c68 <powf+0x280>
 8009ad4:	ee37 0a87 	vadd.f32	s0, s15, s14
 8009ad8:	b003      	add	sp, #12
 8009ada:	bd30      	pop	{r4, r5, pc}
 8009adc:	f1b1 5f7e 	cmp.w	r1, #1065353216	@ 0x3f800000
 8009ae0:	d105      	bne.n	8009aee <powf+0x106>
 8009ae2:	f484 0480 	eor.w	r4, r4, #4194304	@ 0x400000
 8009ae6:	0064      	lsls	r4, r4, #1
 8009ae8:	f514 0f00 	cmn.w	r4, #8388608	@ 0x800000
 8009aec:	e7f0      	b.n	8009ad0 <powf+0xe8>
 8009aee:	0049      	lsls	r1, r1, #1
 8009af0:	f1b3 4f7f 	cmp.w	r3, #4278190080	@ 0xff000000
 8009af4:	d1ee      	bne.n	8009ad4 <powf+0xec>
 8009af6:	f1b1 4ffe 	cmp.w	r1, #2130706432	@ 0x7f000000
 8009afa:	f000 80b5 	beq.w	8009c68 <powf+0x280>
 8009afe:	f1b1 4ffe 	cmp.w	r1, #2130706432	@ 0x7f000000
 8009b02:	ea6f 0404 	mvn.w	r4, r4
 8009b06:	bf34      	ite	cc
 8009b08:	2100      	movcc	r1, #0
 8009b0a:	2101      	movcs	r1, #1
 8009b0c:	0fe4      	lsrs	r4, r4, #31
 8009b0e:	42a1      	cmp	r1, r4
 8009b10:	f040 80ad 	bne.w	8009c6e <powf+0x286>
 8009b14:	ee27 0a07 	vmul.f32	s0, s14, s14
 8009b18:	e7de      	b.n	8009ad8 <powf+0xf0>
 8009b1a:	004d      	lsls	r5, r1, #1
 8009b1c:	1e6b      	subs	r3, r5, #1
 8009b1e:	4293      	cmp	r3, r2
 8009b20:	d31b      	bcc.n	8009b5a <powf+0x172>
 8009b22:	2900      	cmp	r1, #0
 8009b24:	ee20 0a00 	vmul.f32	s0, s0, s0
 8009b28:	da0e      	bge.n	8009b48 <powf+0x160>
 8009b2a:	4620      	mov	r0, r4
 8009b2c:	f7ff ff42 	bl	80099b4 <checkint>
 8009b30:	2801      	cmp	r0, #1
 8009b32:	d109      	bne.n	8009b48 <powf+0x160>
 8009b34:	eeb1 0a40 	vneg.f32	s0, s0
 8009b38:	b945      	cbnz	r5, 8009b4c <powf+0x164>
 8009b3a:	2c00      	cmp	r4, #0
 8009b3c:	dacc      	bge.n	8009ad8 <powf+0xf0>
 8009b3e:	b003      	add	sp, #12
 8009b40:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009b44:	f000 b8dc 	b.w	8009d00 <__math_divzerof>
 8009b48:	2000      	movs	r0, #0
 8009b4a:	e7f5      	b.n	8009b38 <powf+0x150>
 8009b4c:	2c00      	cmp	r4, #0
 8009b4e:	dac3      	bge.n	8009ad8 <powf+0xf0>
 8009b50:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 8009b54:	ee87 0a80 	vdiv.f32	s0, s15, s0
 8009b58:	e7be      	b.n	8009ad8 <powf+0xf0>
 8009b5a:	2900      	cmp	r1, #0
 8009b5c:	da1d      	bge.n	8009b9a <powf+0x1b2>
 8009b5e:	4620      	mov	r0, r4
 8009b60:	f7ff ff28 	bl	80099b4 <checkint>
 8009b64:	b920      	cbnz	r0, 8009b70 <powf+0x188>
 8009b66:	b003      	add	sp, #12
 8009b68:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009b6c:	f000 b8da 	b.w	8009d24 <__math_invalidf>
 8009b70:	1e43      	subs	r3, r0, #1
 8009b72:	4258      	negs	r0, r3
 8009b74:	4158      	adcs	r0, r3
 8009b76:	0400      	lsls	r0, r0, #16
 8009b78:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8009b7c:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 8009b80:	f4bf af48 	bcs.w	8009a14 <powf+0x2c>
 8009b84:	eddf 6a45 	vldr	s13, [pc, #276]	@ 8009c9c <powf+0x2b4>
 8009b88:	ee27 0aa6 	vmul.f32	s0, s15, s13
 8009b8c:	ee10 3a10 	vmov	r3, s0
 8009b90:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8009b94:	f1a3 6138 	sub.w	r1, r3, #192937984	@ 0xb800000
 8009b98:	e73c      	b.n	8009a14 <powf+0x2c>
 8009b9a:	2000      	movs	r0, #0
 8009b9c:	e7ee      	b.n	8009b7c <powf+0x194>
 8009b9e:	ed9f 6b38 	vldr	d6, [pc, #224]	@ 8009c80 <powf+0x298>
 8009ba2:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8009ba6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009baa:	dd45      	ble.n	8009c38 <powf+0x250>
 8009bac:	f04f 534c 	mov.w	r3, #855638016	@ 0x33000000
 8009bb0:	b3d0      	cbz	r0, 8009c28 <powf+0x240>
 8009bb2:	9301      	str	r3, [sp, #4]
 8009bb4:	eddd 6a01 	vldr	s13, [sp, #4]
 8009bb8:	eebf 6a00 	vmov.f32	s12, #240	@ 0xbf800000 -1.0
 8009bbc:	ee76 6a66 	vsub.f32	s13, s12, s13
 8009bc0:	eef4 6a46 	vcmp.f32	s13, s12
 8009bc4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009bc8:	f47f af6f 	bne.w	8009aaa <powf+0xc2>
 8009bcc:	eeb7 0b00 	vmov.f64	d0, #112	@ 0x3f800000  1.0
 8009bd0:	4b33      	ldr	r3, [pc, #204]	@ (8009ca0 <powf+0x2b8>)
 8009bd2:	ed93 5b40 	vldr	d5, [r3, #256]	@ 0x100
 8009bd6:	ee37 6b05 	vadd.f64	d6, d7, d5
 8009bda:	ee16 2a10 	vmov	r2, s12
 8009bde:	ee36 6b45 	vsub.f64	d6, d6, d5
 8009be2:	f002 011f 	and.w	r1, r2, #31
 8009be6:	ee37 7b46 	vsub.f64	d7, d7, d6
 8009bea:	ed93 5b42 	vldr	d5, [r3, #264]	@ 0x108
 8009bee:	ee27 4b07 	vmul.f64	d4, d7, d7
 8009bf2:	ed93 6b44 	vldr	d6, [r3, #272]	@ 0x110
 8009bf6:	eb03 05c1 	add.w	r5, r3, r1, lsl #3
 8009bfa:	f853 4031 	ldr.w	r4, [r3, r1, lsl #3]
 8009bfe:	eea7 6b05 	vfma.f64	d6, d7, d5
 8009c02:	686d      	ldr	r5, [r5, #4]
 8009c04:	ed93 5b46 	vldr	d5, [r3, #280]	@ 0x118
 8009c08:	1880      	adds	r0, r0, r2
 8009c0a:	2100      	movs	r1, #0
 8009c0c:	190a      	adds	r2, r1, r4
 8009c0e:	eb05 33c0 	add.w	r3, r5, r0, lsl #15
 8009c12:	eea7 0b05 	vfma.f64	d0, d7, d5
 8009c16:	ec43 2b17 	vmov	d7, r2, r3
 8009c1a:	eea6 0b04 	vfma.f64	d0, d6, d4
 8009c1e:	ee20 0b07 	vmul.f64	d0, d0, d7
 8009c22:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 8009c26:	e757      	b.n	8009ad8 <powf+0xf0>
 8009c28:	9300      	str	r3, [sp, #0]
 8009c2a:	eddd 6a00 	vldr	s13, [sp]
 8009c2e:	eeb7 6a00 	vmov.f32	s12, #112	@ 0x3f800000  1.0
 8009c32:	ee76 6a86 	vadd.f32	s13, s13, s12
 8009c36:	e7c3      	b.n	8009bc0 <powf+0x1d8>
 8009c38:	ed9f 6b13 	vldr	d6, [pc, #76]	@ 8009c88 <powf+0x2a0>
 8009c3c:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8009c40:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009c44:	d804      	bhi.n	8009c50 <powf+0x268>
 8009c46:	b003      	add	sp, #12
 8009c48:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009c4c:	f000 b846 	b.w	8009cdc <__math_uflowf>
 8009c50:	ed9f 6b0f 	vldr	d6, [pc, #60]	@ 8009c90 <powf+0x2a8>
 8009c54:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8009c58:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009c5c:	d5b6      	bpl.n	8009bcc <powf+0x1e4>
 8009c5e:	b003      	add	sp, #12
 8009c60:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009c64:	f000 b840 	b.w	8009ce8 <__math_may_uflowf>
 8009c68:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8009c6c:	e734      	b.n	8009ad8 <powf+0xf0>
 8009c6e:	ed9f 0a0d 	vldr	s0, [pc, #52]	@ 8009ca4 <powf+0x2bc>
 8009c72:	e731      	b.n	8009ad8 <powf+0xf0>
 8009c74:	f3af 8000 	nop.w
 8009c78:	ffd1d571 	.word	0xffd1d571
 8009c7c:	405fffff 	.word	0x405fffff
 8009c80:	ffa3aae2 	.word	0xffa3aae2
 8009c84:	405fffff 	.word	0x405fffff
 8009c88:	00000000 	.word	0x00000000
 8009c8c:	c062c000 	.word	0xc062c000
 8009c90:	00000000 	.word	0x00000000
 8009c94:	c062a000 	.word	0xc062a000
 8009c98:	0800e1c0 	.word	0x0800e1c0
 8009c9c:	4b000000 	.word	0x4b000000
 8009ca0:	0800e078 	.word	0x0800e078
 8009ca4:	00000000 	.word	0x00000000

08009ca8 <with_errnof>:
 8009ca8:	b510      	push	{r4, lr}
 8009caa:	ed2d 8b02 	vpush	{d8}
 8009cae:	eeb0 8a40 	vmov.f32	s16, s0
 8009cb2:	4604      	mov	r4, r0
 8009cb4:	f001 fdf0 	bl	800b898 <__errno>
 8009cb8:	eeb0 0a48 	vmov.f32	s0, s16
 8009cbc:	ecbd 8b02 	vpop	{d8}
 8009cc0:	6004      	str	r4, [r0, #0]
 8009cc2:	bd10      	pop	{r4, pc}

08009cc4 <xflowf>:
 8009cc4:	b130      	cbz	r0, 8009cd4 <xflowf+0x10>
 8009cc6:	eef1 7a40 	vneg.f32	s15, s0
 8009cca:	ee27 0a80 	vmul.f32	s0, s15, s0
 8009cce:	2022      	movs	r0, #34	@ 0x22
 8009cd0:	f7ff bfea 	b.w	8009ca8 <with_errnof>
 8009cd4:	eef0 7a40 	vmov.f32	s15, s0
 8009cd8:	e7f7      	b.n	8009cca <xflowf+0x6>
	...

08009cdc <__math_uflowf>:
 8009cdc:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 8009ce4 <__math_uflowf+0x8>
 8009ce0:	f7ff bff0 	b.w	8009cc4 <xflowf>
 8009ce4:	10000000 	.word	0x10000000

08009ce8 <__math_may_uflowf>:
 8009ce8:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 8009cf0 <__math_may_uflowf+0x8>
 8009cec:	f7ff bfea 	b.w	8009cc4 <xflowf>
 8009cf0:	1a200000 	.word	0x1a200000

08009cf4 <__math_oflowf>:
 8009cf4:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 8009cfc <__math_oflowf+0x8>
 8009cf8:	f7ff bfe4 	b.w	8009cc4 <xflowf>
 8009cfc:	70000000 	.word	0x70000000

08009d00 <__math_divzerof>:
 8009d00:	ed9f 0a07 	vldr	s0, [pc, #28]	@ 8009d20 <__math_divzerof+0x20>
 8009d04:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 8009d08:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 8009d0c:	2800      	cmp	r0, #0
 8009d0e:	f04f 0022 	mov.w	r0, #34	@ 0x22
 8009d12:	fe47 7a87 	vseleq.f32	s15, s15, s14
 8009d16:	ee87 0a80 	vdiv.f32	s0, s15, s0
 8009d1a:	f7ff bfc5 	b.w	8009ca8 <with_errnof>
 8009d1e:	bf00      	nop
 8009d20:	00000000 	.word	0x00000000

08009d24 <__math_invalidf>:
 8009d24:	eef0 7a40 	vmov.f32	s15, s0
 8009d28:	ee30 7a40 	vsub.f32	s14, s0, s0
 8009d2c:	eef4 7a67 	vcmp.f32	s15, s15
 8009d30:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009d34:	ee87 0a07 	vdiv.f32	s0, s14, s14
 8009d38:	d602      	bvs.n	8009d40 <__math_invalidf+0x1c>
 8009d3a:	2021      	movs	r0, #33	@ 0x21
 8009d3c:	f7ff bfb4 	b.w	8009ca8 <with_errnof>
 8009d40:	4770      	bx	lr

08009d42 <atof>:
 8009d42:	2100      	movs	r1, #0
 8009d44:	f000 bdba 	b.w	800a8bc <strtod>

08009d48 <atoi>:
 8009d48:	220a      	movs	r2, #10
 8009d4a:	2100      	movs	r1, #0
 8009d4c:	f000 be3c 	b.w	800a9c8 <strtol>

08009d50 <sulp>:
 8009d50:	b570      	push	{r4, r5, r6, lr}
 8009d52:	4604      	mov	r4, r0
 8009d54:	460d      	mov	r5, r1
 8009d56:	4616      	mov	r6, r2
 8009d58:	ec45 4b10 	vmov	d0, r4, r5
 8009d5c:	f003 fb7e 	bl	800d45c <__ulp>
 8009d60:	b17e      	cbz	r6, 8009d82 <sulp+0x32>
 8009d62:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8009d66:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8009d6a:	2b00      	cmp	r3, #0
 8009d6c:	dd09      	ble.n	8009d82 <sulp+0x32>
 8009d6e:	051b      	lsls	r3, r3, #20
 8009d70:	f103 517f 	add.w	r1, r3, #1069547520	@ 0x3fc00000
 8009d74:	2000      	movs	r0, #0
 8009d76:	f501 1140 	add.w	r1, r1, #3145728	@ 0x300000
 8009d7a:	ec41 0b17 	vmov	d7, r0, r1
 8009d7e:	ee20 0b07 	vmul.f64	d0, d0, d7
 8009d82:	bd70      	pop	{r4, r5, r6, pc}
 8009d84:	0000      	movs	r0, r0
	...

08009d88 <_strtod_l>:
 8009d88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009d8c:	ed2d 8b0a 	vpush	{d8-d12}
 8009d90:	b097      	sub	sp, #92	@ 0x5c
 8009d92:	4688      	mov	r8, r1
 8009d94:	920e      	str	r2, [sp, #56]	@ 0x38
 8009d96:	2200      	movs	r2, #0
 8009d98:	9212      	str	r2, [sp, #72]	@ 0x48
 8009d9a:	9005      	str	r0, [sp, #20]
 8009d9c:	f04f 0a00 	mov.w	sl, #0
 8009da0:	f04f 0b00 	mov.w	fp, #0
 8009da4:	460a      	mov	r2, r1
 8009da6:	9211      	str	r2, [sp, #68]	@ 0x44
 8009da8:	7811      	ldrb	r1, [r2, #0]
 8009daa:	292b      	cmp	r1, #43	@ 0x2b
 8009dac:	d04c      	beq.n	8009e48 <_strtod_l+0xc0>
 8009dae:	d839      	bhi.n	8009e24 <_strtod_l+0x9c>
 8009db0:	290d      	cmp	r1, #13
 8009db2:	d833      	bhi.n	8009e1c <_strtod_l+0x94>
 8009db4:	2908      	cmp	r1, #8
 8009db6:	d833      	bhi.n	8009e20 <_strtod_l+0x98>
 8009db8:	2900      	cmp	r1, #0
 8009dba:	d03c      	beq.n	8009e36 <_strtod_l+0xae>
 8009dbc:	2200      	movs	r2, #0
 8009dbe:	9208      	str	r2, [sp, #32]
 8009dc0:	9d11      	ldr	r5, [sp, #68]	@ 0x44
 8009dc2:	782a      	ldrb	r2, [r5, #0]
 8009dc4:	2a30      	cmp	r2, #48	@ 0x30
 8009dc6:	f040 80b7 	bne.w	8009f38 <_strtod_l+0x1b0>
 8009dca:	786a      	ldrb	r2, [r5, #1]
 8009dcc:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8009dd0:	2a58      	cmp	r2, #88	@ 0x58
 8009dd2:	d170      	bne.n	8009eb6 <_strtod_l+0x12e>
 8009dd4:	9302      	str	r3, [sp, #8]
 8009dd6:	9b08      	ldr	r3, [sp, #32]
 8009dd8:	9301      	str	r3, [sp, #4]
 8009dda:	ab12      	add	r3, sp, #72	@ 0x48
 8009ddc:	9300      	str	r3, [sp, #0]
 8009dde:	4a90      	ldr	r2, [pc, #576]	@ (800a020 <_strtod_l+0x298>)
 8009de0:	9805      	ldr	r0, [sp, #20]
 8009de2:	ab13      	add	r3, sp, #76	@ 0x4c
 8009de4:	a911      	add	r1, sp, #68	@ 0x44
 8009de6:	f002 fc33 	bl	800c650 <__gethex>
 8009dea:	f010 060f 	ands.w	r6, r0, #15
 8009dee:	4604      	mov	r4, r0
 8009df0:	d005      	beq.n	8009dfe <_strtod_l+0x76>
 8009df2:	2e06      	cmp	r6, #6
 8009df4:	d12a      	bne.n	8009e4c <_strtod_l+0xc4>
 8009df6:	3501      	adds	r5, #1
 8009df8:	2300      	movs	r3, #0
 8009dfa:	9511      	str	r5, [sp, #68]	@ 0x44
 8009dfc:	9308      	str	r3, [sp, #32]
 8009dfe:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009e00:	2b00      	cmp	r3, #0
 8009e02:	f040 8537 	bne.w	800a874 <_strtod_l+0xaec>
 8009e06:	9b08      	ldr	r3, [sp, #32]
 8009e08:	ec4b ab10 	vmov	d0, sl, fp
 8009e0c:	b1cb      	cbz	r3, 8009e42 <_strtod_l+0xba>
 8009e0e:	eeb1 0b40 	vneg.f64	d0, d0
 8009e12:	b017      	add	sp, #92	@ 0x5c
 8009e14:	ecbd 8b0a 	vpop	{d8-d12}
 8009e18:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009e1c:	2920      	cmp	r1, #32
 8009e1e:	d1cd      	bne.n	8009dbc <_strtod_l+0x34>
 8009e20:	3201      	adds	r2, #1
 8009e22:	e7c0      	b.n	8009da6 <_strtod_l+0x1e>
 8009e24:	292d      	cmp	r1, #45	@ 0x2d
 8009e26:	d1c9      	bne.n	8009dbc <_strtod_l+0x34>
 8009e28:	2101      	movs	r1, #1
 8009e2a:	9108      	str	r1, [sp, #32]
 8009e2c:	1c51      	adds	r1, r2, #1
 8009e2e:	9111      	str	r1, [sp, #68]	@ 0x44
 8009e30:	7852      	ldrb	r2, [r2, #1]
 8009e32:	2a00      	cmp	r2, #0
 8009e34:	d1c4      	bne.n	8009dc0 <_strtod_l+0x38>
 8009e36:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009e38:	f8cd 8044 	str.w	r8, [sp, #68]	@ 0x44
 8009e3c:	2b00      	cmp	r3, #0
 8009e3e:	f040 8517 	bne.w	800a870 <_strtod_l+0xae8>
 8009e42:	ec4b ab10 	vmov	d0, sl, fp
 8009e46:	e7e4      	b.n	8009e12 <_strtod_l+0x8a>
 8009e48:	2100      	movs	r1, #0
 8009e4a:	e7ee      	b.n	8009e2a <_strtod_l+0xa2>
 8009e4c:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8009e4e:	b13a      	cbz	r2, 8009e60 <_strtod_l+0xd8>
 8009e50:	2135      	movs	r1, #53	@ 0x35
 8009e52:	a814      	add	r0, sp, #80	@ 0x50
 8009e54:	f003 fbf9 	bl	800d64a <__copybits>
 8009e58:	9912      	ldr	r1, [sp, #72]	@ 0x48
 8009e5a:	9805      	ldr	r0, [sp, #20]
 8009e5c:	f002 ffd2 	bl	800ce04 <_Bfree>
 8009e60:	1e73      	subs	r3, r6, #1
 8009e62:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8009e64:	2b04      	cmp	r3, #4
 8009e66:	d806      	bhi.n	8009e76 <_strtod_l+0xee>
 8009e68:	e8df f003 	tbb	[pc, r3]
 8009e6c:	201d0314 	.word	0x201d0314
 8009e70:	14          	.byte	0x14
 8009e71:	00          	.byte	0x00
 8009e72:	e9dd ab14 	ldrd	sl, fp, [sp, #80]	@ 0x50
 8009e76:	05e3      	lsls	r3, r4, #23
 8009e78:	bf48      	it	mi
 8009e7a:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 8009e7e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8009e82:	0d1b      	lsrs	r3, r3, #20
 8009e84:	051b      	lsls	r3, r3, #20
 8009e86:	2b00      	cmp	r3, #0
 8009e88:	d1b9      	bne.n	8009dfe <_strtod_l+0x76>
 8009e8a:	f001 fd05 	bl	800b898 <__errno>
 8009e8e:	2322      	movs	r3, #34	@ 0x22
 8009e90:	6003      	str	r3, [r0, #0]
 8009e92:	e7b4      	b.n	8009dfe <_strtod_l+0x76>
 8009e94:	e9dd a314 	ldrd	sl, r3, [sp, #80]	@ 0x50
 8009e98:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 8009e9c:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8009ea0:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8009ea4:	e7e7      	b.n	8009e76 <_strtod_l+0xee>
 8009ea6:	f8df b180 	ldr.w	fp, [pc, #384]	@ 800a028 <_strtod_l+0x2a0>
 8009eaa:	e7e4      	b.n	8009e76 <_strtod_l+0xee>
 8009eac:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 8009eb0:	f04f 3aff 	mov.w	sl, #4294967295
 8009eb4:	e7df      	b.n	8009e76 <_strtod_l+0xee>
 8009eb6:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8009eb8:	1c5a      	adds	r2, r3, #1
 8009eba:	9211      	str	r2, [sp, #68]	@ 0x44
 8009ebc:	785b      	ldrb	r3, [r3, #1]
 8009ebe:	2b30      	cmp	r3, #48	@ 0x30
 8009ec0:	d0f9      	beq.n	8009eb6 <_strtod_l+0x12e>
 8009ec2:	2b00      	cmp	r3, #0
 8009ec4:	d09b      	beq.n	8009dfe <_strtod_l+0x76>
 8009ec6:	2301      	movs	r3, #1
 8009ec8:	9307      	str	r3, [sp, #28]
 8009eca:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8009ecc:	930a      	str	r3, [sp, #40]	@ 0x28
 8009ece:	2300      	movs	r3, #0
 8009ed0:	9306      	str	r3, [sp, #24]
 8009ed2:	4699      	mov	r9, r3
 8009ed4:	461d      	mov	r5, r3
 8009ed6:	220a      	movs	r2, #10
 8009ed8:	9811      	ldr	r0, [sp, #68]	@ 0x44
 8009eda:	7804      	ldrb	r4, [r0, #0]
 8009edc:	f1a4 0330 	sub.w	r3, r4, #48	@ 0x30
 8009ee0:	b2d9      	uxtb	r1, r3
 8009ee2:	2909      	cmp	r1, #9
 8009ee4:	d92a      	bls.n	8009f3c <_strtod_l+0x1b4>
 8009ee6:	494f      	ldr	r1, [pc, #316]	@ (800a024 <_strtod_l+0x29c>)
 8009ee8:	2201      	movs	r2, #1
 8009eea:	f001 fc79 	bl	800b7e0 <strncmp>
 8009eee:	b398      	cbz	r0, 8009f58 <_strtod_l+0x1d0>
 8009ef0:	2000      	movs	r0, #0
 8009ef2:	4622      	mov	r2, r4
 8009ef4:	462b      	mov	r3, r5
 8009ef6:	4607      	mov	r7, r0
 8009ef8:	4601      	mov	r1, r0
 8009efa:	2a65      	cmp	r2, #101	@ 0x65
 8009efc:	d001      	beq.n	8009f02 <_strtod_l+0x17a>
 8009efe:	2a45      	cmp	r2, #69	@ 0x45
 8009f00:	d118      	bne.n	8009f34 <_strtod_l+0x1ac>
 8009f02:	b91b      	cbnz	r3, 8009f0c <_strtod_l+0x184>
 8009f04:	9b07      	ldr	r3, [sp, #28]
 8009f06:	4303      	orrs	r3, r0
 8009f08:	d095      	beq.n	8009e36 <_strtod_l+0xae>
 8009f0a:	2300      	movs	r3, #0
 8009f0c:	f8dd 8044 	ldr.w	r8, [sp, #68]	@ 0x44
 8009f10:	f108 0201 	add.w	r2, r8, #1
 8009f14:	9211      	str	r2, [sp, #68]	@ 0x44
 8009f16:	f898 2001 	ldrb.w	r2, [r8, #1]
 8009f1a:	2a2b      	cmp	r2, #43	@ 0x2b
 8009f1c:	d074      	beq.n	800a008 <_strtod_l+0x280>
 8009f1e:	2a2d      	cmp	r2, #45	@ 0x2d
 8009f20:	d07a      	beq.n	800a018 <_strtod_l+0x290>
 8009f22:	f04f 0e00 	mov.w	lr, #0
 8009f26:	f1a2 0430 	sub.w	r4, r2, #48	@ 0x30
 8009f2a:	2c09      	cmp	r4, #9
 8009f2c:	f240 8082 	bls.w	800a034 <_strtod_l+0x2ac>
 8009f30:	f8cd 8044 	str.w	r8, [sp, #68]	@ 0x44
 8009f34:	2400      	movs	r4, #0
 8009f36:	e09d      	b.n	800a074 <_strtod_l+0x2ec>
 8009f38:	2300      	movs	r3, #0
 8009f3a:	e7c5      	b.n	8009ec8 <_strtod_l+0x140>
 8009f3c:	2d08      	cmp	r5, #8
 8009f3e:	bfc8      	it	gt
 8009f40:	9906      	ldrgt	r1, [sp, #24]
 8009f42:	f100 0001 	add.w	r0, r0, #1
 8009f46:	bfca      	itet	gt
 8009f48:	fb02 3301 	mlagt	r3, r2, r1, r3
 8009f4c:	fb02 3909 	mlale	r9, r2, r9, r3
 8009f50:	9306      	strgt	r3, [sp, #24]
 8009f52:	3501      	adds	r5, #1
 8009f54:	9011      	str	r0, [sp, #68]	@ 0x44
 8009f56:	e7bf      	b.n	8009ed8 <_strtod_l+0x150>
 8009f58:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8009f5a:	1c5a      	adds	r2, r3, #1
 8009f5c:	9211      	str	r2, [sp, #68]	@ 0x44
 8009f5e:	785a      	ldrb	r2, [r3, #1]
 8009f60:	b3bd      	cbz	r5, 8009fd2 <_strtod_l+0x24a>
 8009f62:	4607      	mov	r7, r0
 8009f64:	462b      	mov	r3, r5
 8009f66:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 8009f6a:	2909      	cmp	r1, #9
 8009f6c:	d912      	bls.n	8009f94 <_strtod_l+0x20c>
 8009f6e:	2101      	movs	r1, #1
 8009f70:	e7c3      	b.n	8009efa <_strtod_l+0x172>
 8009f72:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8009f74:	1c5a      	adds	r2, r3, #1
 8009f76:	9211      	str	r2, [sp, #68]	@ 0x44
 8009f78:	785a      	ldrb	r2, [r3, #1]
 8009f7a:	3001      	adds	r0, #1
 8009f7c:	2a30      	cmp	r2, #48	@ 0x30
 8009f7e:	d0f8      	beq.n	8009f72 <_strtod_l+0x1ea>
 8009f80:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 8009f84:	2b08      	cmp	r3, #8
 8009f86:	f200 847a 	bhi.w	800a87e <_strtod_l+0xaf6>
 8009f8a:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8009f8c:	930a      	str	r3, [sp, #40]	@ 0x28
 8009f8e:	4607      	mov	r7, r0
 8009f90:	2000      	movs	r0, #0
 8009f92:	4603      	mov	r3, r0
 8009f94:	3a30      	subs	r2, #48	@ 0x30
 8009f96:	f100 0101 	add.w	r1, r0, #1
 8009f9a:	d014      	beq.n	8009fc6 <_strtod_l+0x23e>
 8009f9c:	440f      	add	r7, r1
 8009f9e:	469c      	mov	ip, r3
 8009fa0:	f04f 0e0a 	mov.w	lr, #10
 8009fa4:	f10c 0401 	add.w	r4, ip, #1
 8009fa8:	1ae6      	subs	r6, r4, r3
 8009faa:	42b1      	cmp	r1, r6
 8009fac:	dc13      	bgt.n	8009fd6 <_strtod_l+0x24e>
 8009fae:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 8009fb2:	1819      	adds	r1, r3, r0
 8009fb4:	2908      	cmp	r1, #8
 8009fb6:	f103 0301 	add.w	r3, r3, #1
 8009fba:	4403      	add	r3, r0
 8009fbc:	dc19      	bgt.n	8009ff2 <_strtod_l+0x26a>
 8009fbe:	210a      	movs	r1, #10
 8009fc0:	fb01 2909 	mla	r9, r1, r9, r2
 8009fc4:	2100      	movs	r1, #0
 8009fc6:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8009fc8:	1c50      	adds	r0, r2, #1
 8009fca:	9011      	str	r0, [sp, #68]	@ 0x44
 8009fcc:	7852      	ldrb	r2, [r2, #1]
 8009fce:	4608      	mov	r0, r1
 8009fd0:	e7c9      	b.n	8009f66 <_strtod_l+0x1de>
 8009fd2:	4628      	mov	r0, r5
 8009fd4:	e7d2      	b.n	8009f7c <_strtod_l+0x1f4>
 8009fd6:	f1bc 0f08 	cmp.w	ip, #8
 8009fda:	dc03      	bgt.n	8009fe4 <_strtod_l+0x25c>
 8009fdc:	fb0e f909 	mul.w	r9, lr, r9
 8009fe0:	46a4      	mov	ip, r4
 8009fe2:	e7df      	b.n	8009fa4 <_strtod_l+0x21c>
 8009fe4:	2c10      	cmp	r4, #16
 8009fe6:	bfde      	ittt	le
 8009fe8:	9e06      	ldrle	r6, [sp, #24]
 8009fea:	fb0e f606 	mulle.w	r6, lr, r6
 8009fee:	9606      	strle	r6, [sp, #24]
 8009ff0:	e7f6      	b.n	8009fe0 <_strtod_l+0x258>
 8009ff2:	290f      	cmp	r1, #15
 8009ff4:	bfdf      	itttt	le
 8009ff6:	9806      	ldrle	r0, [sp, #24]
 8009ff8:	210a      	movle	r1, #10
 8009ffa:	fb01 2200 	mlale	r2, r1, r0, r2
 8009ffe:	9206      	strle	r2, [sp, #24]
 800a000:	e7e0      	b.n	8009fc4 <_strtod_l+0x23c>
 800a002:	2700      	movs	r7, #0
 800a004:	2101      	movs	r1, #1
 800a006:	e77d      	b.n	8009f04 <_strtod_l+0x17c>
 800a008:	f04f 0e00 	mov.w	lr, #0
 800a00c:	f108 0202 	add.w	r2, r8, #2
 800a010:	9211      	str	r2, [sp, #68]	@ 0x44
 800a012:	f898 2002 	ldrb.w	r2, [r8, #2]
 800a016:	e786      	b.n	8009f26 <_strtod_l+0x19e>
 800a018:	f04f 0e01 	mov.w	lr, #1
 800a01c:	e7f6      	b.n	800a00c <_strtod_l+0x284>
 800a01e:	bf00      	nop
 800a020:	0800e4d0 	.word	0x0800e4d0
 800a024:	0800e2e8 	.word	0x0800e2e8
 800a028:	7ff00000 	.word	0x7ff00000
 800a02c:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800a02e:	1c54      	adds	r4, r2, #1
 800a030:	9411      	str	r4, [sp, #68]	@ 0x44
 800a032:	7852      	ldrb	r2, [r2, #1]
 800a034:	2a30      	cmp	r2, #48	@ 0x30
 800a036:	d0f9      	beq.n	800a02c <_strtod_l+0x2a4>
 800a038:	f1a2 0431 	sub.w	r4, r2, #49	@ 0x31
 800a03c:	2c08      	cmp	r4, #8
 800a03e:	f63f af79 	bhi.w	8009f34 <_strtod_l+0x1ac>
 800a042:	f1a2 0c30 	sub.w	ip, r2, #48	@ 0x30
 800a046:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800a048:	9209      	str	r2, [sp, #36]	@ 0x24
 800a04a:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800a04c:	1c54      	adds	r4, r2, #1
 800a04e:	9411      	str	r4, [sp, #68]	@ 0x44
 800a050:	7852      	ldrb	r2, [r2, #1]
 800a052:	f1a2 0630 	sub.w	r6, r2, #48	@ 0x30
 800a056:	2e09      	cmp	r6, #9
 800a058:	d937      	bls.n	800a0ca <_strtod_l+0x342>
 800a05a:	9e09      	ldr	r6, [sp, #36]	@ 0x24
 800a05c:	1ba4      	subs	r4, r4, r6
 800a05e:	2c08      	cmp	r4, #8
 800a060:	f644 641f 	movw	r4, #19999	@ 0x4e1f
 800a064:	dc02      	bgt.n	800a06c <_strtod_l+0x2e4>
 800a066:	4564      	cmp	r4, ip
 800a068:	bfa8      	it	ge
 800a06a:	4664      	movge	r4, ip
 800a06c:	f1be 0f00 	cmp.w	lr, #0
 800a070:	d000      	beq.n	800a074 <_strtod_l+0x2ec>
 800a072:	4264      	negs	r4, r4
 800a074:	2b00      	cmp	r3, #0
 800a076:	d14d      	bne.n	800a114 <_strtod_l+0x38c>
 800a078:	9b07      	ldr	r3, [sp, #28]
 800a07a:	4318      	orrs	r0, r3
 800a07c:	f47f aebf 	bne.w	8009dfe <_strtod_l+0x76>
 800a080:	2900      	cmp	r1, #0
 800a082:	f47f aed8 	bne.w	8009e36 <_strtod_l+0xae>
 800a086:	2a69      	cmp	r2, #105	@ 0x69
 800a088:	d027      	beq.n	800a0da <_strtod_l+0x352>
 800a08a:	dc24      	bgt.n	800a0d6 <_strtod_l+0x34e>
 800a08c:	2a49      	cmp	r2, #73	@ 0x49
 800a08e:	d024      	beq.n	800a0da <_strtod_l+0x352>
 800a090:	2a4e      	cmp	r2, #78	@ 0x4e
 800a092:	f47f aed0 	bne.w	8009e36 <_strtod_l+0xae>
 800a096:	4997      	ldr	r1, [pc, #604]	@ (800a2f4 <_strtod_l+0x56c>)
 800a098:	a811      	add	r0, sp, #68	@ 0x44
 800a09a:	f002 fcfb 	bl	800ca94 <__match>
 800a09e:	2800      	cmp	r0, #0
 800a0a0:	f43f aec9 	beq.w	8009e36 <_strtod_l+0xae>
 800a0a4:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800a0a6:	781b      	ldrb	r3, [r3, #0]
 800a0a8:	2b28      	cmp	r3, #40	@ 0x28
 800a0aa:	d12d      	bne.n	800a108 <_strtod_l+0x380>
 800a0ac:	4992      	ldr	r1, [pc, #584]	@ (800a2f8 <_strtod_l+0x570>)
 800a0ae:	aa14      	add	r2, sp, #80	@ 0x50
 800a0b0:	a811      	add	r0, sp, #68	@ 0x44
 800a0b2:	f002 fd03 	bl	800cabc <__hexnan>
 800a0b6:	2805      	cmp	r0, #5
 800a0b8:	d126      	bne.n	800a108 <_strtod_l+0x380>
 800a0ba:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800a0bc:	f8dd a050 	ldr.w	sl, [sp, #80]	@ 0x50
 800a0c0:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 800a0c4:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 800a0c8:	e699      	b.n	8009dfe <_strtod_l+0x76>
 800a0ca:	240a      	movs	r4, #10
 800a0cc:	fb04 2c0c 	mla	ip, r4, ip, r2
 800a0d0:	f1ac 0c30 	sub.w	ip, ip, #48	@ 0x30
 800a0d4:	e7b9      	b.n	800a04a <_strtod_l+0x2c2>
 800a0d6:	2a6e      	cmp	r2, #110	@ 0x6e
 800a0d8:	e7db      	b.n	800a092 <_strtod_l+0x30a>
 800a0da:	4988      	ldr	r1, [pc, #544]	@ (800a2fc <_strtod_l+0x574>)
 800a0dc:	a811      	add	r0, sp, #68	@ 0x44
 800a0de:	f002 fcd9 	bl	800ca94 <__match>
 800a0e2:	2800      	cmp	r0, #0
 800a0e4:	f43f aea7 	beq.w	8009e36 <_strtod_l+0xae>
 800a0e8:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800a0ea:	4985      	ldr	r1, [pc, #532]	@ (800a300 <_strtod_l+0x578>)
 800a0ec:	3b01      	subs	r3, #1
 800a0ee:	a811      	add	r0, sp, #68	@ 0x44
 800a0f0:	9311      	str	r3, [sp, #68]	@ 0x44
 800a0f2:	f002 fccf 	bl	800ca94 <__match>
 800a0f6:	b910      	cbnz	r0, 800a0fe <_strtod_l+0x376>
 800a0f8:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800a0fa:	3301      	adds	r3, #1
 800a0fc:	9311      	str	r3, [sp, #68]	@ 0x44
 800a0fe:	f8df b214 	ldr.w	fp, [pc, #532]	@ 800a314 <_strtod_l+0x58c>
 800a102:	f04f 0a00 	mov.w	sl, #0
 800a106:	e67a      	b.n	8009dfe <_strtod_l+0x76>
 800a108:	487e      	ldr	r0, [pc, #504]	@ (800a304 <_strtod_l+0x57c>)
 800a10a:	f001 fc01 	bl	800b910 <nan>
 800a10e:	ec5b ab10 	vmov	sl, fp, d0
 800a112:	e674      	b.n	8009dfe <_strtod_l+0x76>
 800a114:	ee07 9a90 	vmov	s15, r9
 800a118:	1be2      	subs	r2, r4, r7
 800a11a:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800a11e:	2d00      	cmp	r5, #0
 800a120:	bf08      	it	eq
 800a122:	461d      	moveq	r5, r3
 800a124:	2b10      	cmp	r3, #16
 800a126:	9209      	str	r2, [sp, #36]	@ 0x24
 800a128:	461a      	mov	r2, r3
 800a12a:	bfa8      	it	ge
 800a12c:	2210      	movge	r2, #16
 800a12e:	2b09      	cmp	r3, #9
 800a130:	ec5b ab17 	vmov	sl, fp, d7
 800a134:	dc15      	bgt.n	800a162 <_strtod_l+0x3da>
 800a136:	1be1      	subs	r1, r4, r7
 800a138:	2900      	cmp	r1, #0
 800a13a:	f43f ae60 	beq.w	8009dfe <_strtod_l+0x76>
 800a13e:	eba4 0107 	sub.w	r1, r4, r7
 800a142:	dd72      	ble.n	800a22a <_strtod_l+0x4a2>
 800a144:	2916      	cmp	r1, #22
 800a146:	dc59      	bgt.n	800a1fc <_strtod_l+0x474>
 800a148:	4b6f      	ldr	r3, [pc, #444]	@ (800a308 <_strtod_l+0x580>)
 800a14a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a14c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a150:	ed93 7b00 	vldr	d7, [r3]
 800a154:	ec4b ab16 	vmov	d6, sl, fp
 800a158:	ee27 7b06 	vmul.f64	d7, d7, d6
 800a15c:	ec5b ab17 	vmov	sl, fp, d7
 800a160:	e64d      	b.n	8009dfe <_strtod_l+0x76>
 800a162:	4969      	ldr	r1, [pc, #420]	@ (800a308 <_strtod_l+0x580>)
 800a164:	eddd 6a06 	vldr	s13, [sp, #24]
 800a168:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 800a16c:	ed11 5b12 	vldr	d5, [r1, #-72]	@ 0xffffffb8
 800a170:	2b0f      	cmp	r3, #15
 800a172:	eeb8 6b66 	vcvt.f64.u32	d6, s13
 800a176:	eea7 6b05 	vfma.f64	d6, d7, d5
 800a17a:	ec5b ab16 	vmov	sl, fp, d6
 800a17e:	ddda      	ble.n	800a136 <_strtod_l+0x3ae>
 800a180:	1a9a      	subs	r2, r3, r2
 800a182:	1be1      	subs	r1, r4, r7
 800a184:	440a      	add	r2, r1
 800a186:	2a00      	cmp	r2, #0
 800a188:	f340 8094 	ble.w	800a2b4 <_strtod_l+0x52c>
 800a18c:	f012 000f 	ands.w	r0, r2, #15
 800a190:	d00a      	beq.n	800a1a8 <_strtod_l+0x420>
 800a192:	495d      	ldr	r1, [pc, #372]	@ (800a308 <_strtod_l+0x580>)
 800a194:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 800a198:	ed91 7b00 	vldr	d7, [r1]
 800a19c:	ec4b ab16 	vmov	d6, sl, fp
 800a1a0:	ee27 7b06 	vmul.f64	d7, d7, d6
 800a1a4:	ec5b ab17 	vmov	sl, fp, d7
 800a1a8:	f032 020f 	bics.w	r2, r2, #15
 800a1ac:	d073      	beq.n	800a296 <_strtod_l+0x50e>
 800a1ae:	f5b2 7f9a 	cmp.w	r2, #308	@ 0x134
 800a1b2:	dd47      	ble.n	800a244 <_strtod_l+0x4bc>
 800a1b4:	2400      	movs	r4, #0
 800a1b6:	4625      	mov	r5, r4
 800a1b8:	9407      	str	r4, [sp, #28]
 800a1ba:	4626      	mov	r6, r4
 800a1bc:	9a05      	ldr	r2, [sp, #20]
 800a1be:	f8df b154 	ldr.w	fp, [pc, #340]	@ 800a314 <_strtod_l+0x58c>
 800a1c2:	2322      	movs	r3, #34	@ 0x22
 800a1c4:	6013      	str	r3, [r2, #0]
 800a1c6:	f04f 0a00 	mov.w	sl, #0
 800a1ca:	9b07      	ldr	r3, [sp, #28]
 800a1cc:	2b00      	cmp	r3, #0
 800a1ce:	f43f ae16 	beq.w	8009dfe <_strtod_l+0x76>
 800a1d2:	9912      	ldr	r1, [sp, #72]	@ 0x48
 800a1d4:	9805      	ldr	r0, [sp, #20]
 800a1d6:	f002 fe15 	bl	800ce04 <_Bfree>
 800a1da:	9805      	ldr	r0, [sp, #20]
 800a1dc:	4631      	mov	r1, r6
 800a1de:	f002 fe11 	bl	800ce04 <_Bfree>
 800a1e2:	9805      	ldr	r0, [sp, #20]
 800a1e4:	4629      	mov	r1, r5
 800a1e6:	f002 fe0d 	bl	800ce04 <_Bfree>
 800a1ea:	9907      	ldr	r1, [sp, #28]
 800a1ec:	9805      	ldr	r0, [sp, #20]
 800a1ee:	f002 fe09 	bl	800ce04 <_Bfree>
 800a1f2:	9805      	ldr	r0, [sp, #20]
 800a1f4:	4621      	mov	r1, r4
 800a1f6:	f002 fe05 	bl	800ce04 <_Bfree>
 800a1fa:	e600      	b.n	8009dfe <_strtod_l+0x76>
 800a1fc:	f1c3 0125 	rsb	r1, r3, #37	@ 0x25
 800a200:	1be0      	subs	r0, r4, r7
 800a202:	4281      	cmp	r1, r0
 800a204:	dbbc      	blt.n	800a180 <_strtod_l+0x3f8>
 800a206:	4a40      	ldr	r2, [pc, #256]	@ (800a308 <_strtod_l+0x580>)
 800a208:	f1c3 030f 	rsb	r3, r3, #15
 800a20c:	eb02 01c3 	add.w	r1, r2, r3, lsl #3
 800a210:	ed91 7b00 	vldr	d7, [r1]
 800a214:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800a216:	ec4b ab16 	vmov	d6, sl, fp
 800a21a:	1acb      	subs	r3, r1, r3
 800a21c:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 800a220:	ee27 7b06 	vmul.f64	d7, d7, d6
 800a224:	ed92 6b00 	vldr	d6, [r2]
 800a228:	e796      	b.n	800a158 <_strtod_l+0x3d0>
 800a22a:	3116      	adds	r1, #22
 800a22c:	dba8      	blt.n	800a180 <_strtod_l+0x3f8>
 800a22e:	4b36      	ldr	r3, [pc, #216]	@ (800a308 <_strtod_l+0x580>)
 800a230:	1b3c      	subs	r4, r7, r4
 800a232:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
 800a236:	ed94 7b00 	vldr	d7, [r4]
 800a23a:	ec4b ab16 	vmov	d6, sl, fp
 800a23e:	ee86 7b07 	vdiv.f64	d7, d6, d7
 800a242:	e78b      	b.n	800a15c <_strtod_l+0x3d4>
 800a244:	2000      	movs	r0, #0
 800a246:	ec4b ab17 	vmov	d7, sl, fp
 800a24a:	4e30      	ldr	r6, [pc, #192]	@ (800a30c <_strtod_l+0x584>)
 800a24c:	1112      	asrs	r2, r2, #4
 800a24e:	4601      	mov	r1, r0
 800a250:	2a01      	cmp	r2, #1
 800a252:	dc23      	bgt.n	800a29c <_strtod_l+0x514>
 800a254:	b108      	cbz	r0, 800a25a <_strtod_l+0x4d2>
 800a256:	ec5b ab17 	vmov	sl, fp, d7
 800a25a:	4a2c      	ldr	r2, [pc, #176]	@ (800a30c <_strtod_l+0x584>)
 800a25c:	482c      	ldr	r0, [pc, #176]	@ (800a310 <_strtod_l+0x588>)
 800a25e:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 800a262:	ed92 7b00 	vldr	d7, [r2]
 800a266:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 800a26a:	ec4b ab16 	vmov	d6, sl, fp
 800a26e:	4a29      	ldr	r2, [pc, #164]	@ (800a314 <_strtod_l+0x58c>)
 800a270:	ee27 7b06 	vmul.f64	d7, d7, d6
 800a274:	ee17 1a90 	vmov	r1, s15
 800a278:	400a      	ands	r2, r1
 800a27a:	4282      	cmp	r2, r0
 800a27c:	ec5b ab17 	vmov	sl, fp, d7
 800a280:	d898      	bhi.n	800a1b4 <_strtod_l+0x42c>
 800a282:	f5a0 1080 	sub.w	r0, r0, #1048576	@ 0x100000
 800a286:	4282      	cmp	r2, r0
 800a288:	bf86      	itte	hi
 800a28a:	f8df b08c 	ldrhi.w	fp, [pc, #140]	@ 800a318 <_strtod_l+0x590>
 800a28e:	f04f 3aff 	movhi.w	sl, #4294967295
 800a292:	f101 7b54 	addls.w	fp, r1, #55574528	@ 0x3500000
 800a296:	2200      	movs	r2, #0
 800a298:	9206      	str	r2, [sp, #24]
 800a29a:	e076      	b.n	800a38a <_strtod_l+0x602>
 800a29c:	f012 0f01 	tst.w	r2, #1
 800a2a0:	d004      	beq.n	800a2ac <_strtod_l+0x524>
 800a2a2:	ed96 6b00 	vldr	d6, [r6]
 800a2a6:	2001      	movs	r0, #1
 800a2a8:	ee27 7b06 	vmul.f64	d7, d7, d6
 800a2ac:	3101      	adds	r1, #1
 800a2ae:	1052      	asrs	r2, r2, #1
 800a2b0:	3608      	adds	r6, #8
 800a2b2:	e7cd      	b.n	800a250 <_strtod_l+0x4c8>
 800a2b4:	d0ef      	beq.n	800a296 <_strtod_l+0x50e>
 800a2b6:	4252      	negs	r2, r2
 800a2b8:	f012 000f 	ands.w	r0, r2, #15
 800a2bc:	d00a      	beq.n	800a2d4 <_strtod_l+0x54c>
 800a2be:	4912      	ldr	r1, [pc, #72]	@ (800a308 <_strtod_l+0x580>)
 800a2c0:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 800a2c4:	ed91 7b00 	vldr	d7, [r1]
 800a2c8:	ec4b ab16 	vmov	d6, sl, fp
 800a2cc:	ee86 7b07 	vdiv.f64	d7, d6, d7
 800a2d0:	ec5b ab17 	vmov	sl, fp, d7
 800a2d4:	1112      	asrs	r2, r2, #4
 800a2d6:	d0de      	beq.n	800a296 <_strtod_l+0x50e>
 800a2d8:	2a1f      	cmp	r2, #31
 800a2da:	dd1f      	ble.n	800a31c <_strtod_l+0x594>
 800a2dc:	2400      	movs	r4, #0
 800a2de:	4625      	mov	r5, r4
 800a2e0:	9407      	str	r4, [sp, #28]
 800a2e2:	4626      	mov	r6, r4
 800a2e4:	9a05      	ldr	r2, [sp, #20]
 800a2e6:	2322      	movs	r3, #34	@ 0x22
 800a2e8:	f04f 0a00 	mov.w	sl, #0
 800a2ec:	f04f 0b00 	mov.w	fp, #0
 800a2f0:	6013      	str	r3, [r2, #0]
 800a2f2:	e76a      	b.n	800a1ca <_strtod_l+0x442>
 800a2f4:	0800e2f7 	.word	0x0800e2f7
 800a2f8:	0800e4bc 	.word	0x0800e4bc
 800a2fc:	0800e2ef 	.word	0x0800e2ef
 800a300:	0800e329 	.word	0x0800e329
 800a304:	0800e4b8 	.word	0x0800e4b8
 800a308:	0800e648 	.word	0x0800e648
 800a30c:	0800e620 	.word	0x0800e620
 800a310:	7ca00000 	.word	0x7ca00000
 800a314:	7ff00000 	.word	0x7ff00000
 800a318:	7fefffff 	.word	0x7fefffff
 800a31c:	f012 0110 	ands.w	r1, r2, #16
 800a320:	bf18      	it	ne
 800a322:	216a      	movne	r1, #106	@ 0x6a
 800a324:	9106      	str	r1, [sp, #24]
 800a326:	ec4b ab17 	vmov	d7, sl, fp
 800a32a:	49af      	ldr	r1, [pc, #700]	@ (800a5e8 <_strtod_l+0x860>)
 800a32c:	2000      	movs	r0, #0
 800a32e:	07d6      	lsls	r6, r2, #31
 800a330:	d504      	bpl.n	800a33c <_strtod_l+0x5b4>
 800a332:	ed91 6b00 	vldr	d6, [r1]
 800a336:	2001      	movs	r0, #1
 800a338:	ee27 7b06 	vmul.f64	d7, d7, d6
 800a33c:	1052      	asrs	r2, r2, #1
 800a33e:	f101 0108 	add.w	r1, r1, #8
 800a342:	d1f4      	bne.n	800a32e <_strtod_l+0x5a6>
 800a344:	b108      	cbz	r0, 800a34a <_strtod_l+0x5c2>
 800a346:	ec5b ab17 	vmov	sl, fp, d7
 800a34a:	9a06      	ldr	r2, [sp, #24]
 800a34c:	b1b2      	cbz	r2, 800a37c <_strtod_l+0x5f4>
 800a34e:	f3cb 510a 	ubfx	r1, fp, #20, #11
 800a352:	f1c1 026b 	rsb	r2, r1, #107	@ 0x6b
 800a356:	2a00      	cmp	r2, #0
 800a358:	4658      	mov	r0, fp
 800a35a:	dd0f      	ble.n	800a37c <_strtod_l+0x5f4>
 800a35c:	2a1f      	cmp	r2, #31
 800a35e:	dd55      	ble.n	800a40c <_strtod_l+0x684>
 800a360:	2a34      	cmp	r2, #52	@ 0x34
 800a362:	bfde      	ittt	le
 800a364:	f04f 32ff 	movle.w	r2, #4294967295
 800a368:	f1c1 014b 	rsble	r1, r1, #75	@ 0x4b
 800a36c:	408a      	lslle	r2, r1
 800a36e:	f04f 0a00 	mov.w	sl, #0
 800a372:	bfcc      	ite	gt
 800a374:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 800a378:	ea02 0b00 	andle.w	fp, r2, r0
 800a37c:	ec4b ab17 	vmov	d7, sl, fp
 800a380:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800a384:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a388:	d0a8      	beq.n	800a2dc <_strtod_l+0x554>
 800a38a:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800a38c:	9805      	ldr	r0, [sp, #20]
 800a38e:	f8cd 9000 	str.w	r9, [sp]
 800a392:	462a      	mov	r2, r5
 800a394:	f002 fd9e 	bl	800ced4 <__s2b>
 800a398:	9007      	str	r0, [sp, #28]
 800a39a:	2800      	cmp	r0, #0
 800a39c:	f43f af0a 	beq.w	800a1b4 <_strtod_l+0x42c>
 800a3a0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a3a2:	1b3f      	subs	r7, r7, r4
 800a3a4:	2b00      	cmp	r3, #0
 800a3a6:	bfb4      	ite	lt
 800a3a8:	463b      	movlt	r3, r7
 800a3aa:	2300      	movge	r3, #0
 800a3ac:	930a      	str	r3, [sp, #40]	@ 0x28
 800a3ae:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a3b0:	ed9f bb89 	vldr	d11, [pc, #548]	@ 800a5d8 <_strtod_l+0x850>
 800a3b4:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800a3b8:	2400      	movs	r4, #0
 800a3ba:	930d      	str	r3, [sp, #52]	@ 0x34
 800a3bc:	4625      	mov	r5, r4
 800a3be:	9b07      	ldr	r3, [sp, #28]
 800a3c0:	9805      	ldr	r0, [sp, #20]
 800a3c2:	6859      	ldr	r1, [r3, #4]
 800a3c4:	f002 fcde 	bl	800cd84 <_Balloc>
 800a3c8:	4606      	mov	r6, r0
 800a3ca:	2800      	cmp	r0, #0
 800a3cc:	f43f aef6 	beq.w	800a1bc <_strtod_l+0x434>
 800a3d0:	9b07      	ldr	r3, [sp, #28]
 800a3d2:	691a      	ldr	r2, [r3, #16]
 800a3d4:	ec4b ab19 	vmov	d9, sl, fp
 800a3d8:	3202      	adds	r2, #2
 800a3da:	f103 010c 	add.w	r1, r3, #12
 800a3de:	0092      	lsls	r2, r2, #2
 800a3e0:	300c      	adds	r0, #12
 800a3e2:	f001 fa86 	bl	800b8f2 <memcpy>
 800a3e6:	eeb0 0b49 	vmov.f64	d0, d9
 800a3ea:	9805      	ldr	r0, [sp, #20]
 800a3ec:	aa14      	add	r2, sp, #80	@ 0x50
 800a3ee:	a913      	add	r1, sp, #76	@ 0x4c
 800a3f0:	f003 f8a4 	bl	800d53c <__d2b>
 800a3f4:	9012      	str	r0, [sp, #72]	@ 0x48
 800a3f6:	2800      	cmp	r0, #0
 800a3f8:	f43f aee0 	beq.w	800a1bc <_strtod_l+0x434>
 800a3fc:	9805      	ldr	r0, [sp, #20]
 800a3fe:	2101      	movs	r1, #1
 800a400:	f002 fdfe 	bl	800d000 <__i2b>
 800a404:	4605      	mov	r5, r0
 800a406:	b940      	cbnz	r0, 800a41a <_strtod_l+0x692>
 800a408:	2500      	movs	r5, #0
 800a40a:	e6d7      	b.n	800a1bc <_strtod_l+0x434>
 800a40c:	f04f 31ff 	mov.w	r1, #4294967295
 800a410:	fa01 f202 	lsl.w	r2, r1, r2
 800a414:	ea02 0a0a 	and.w	sl, r2, sl
 800a418:	e7b0      	b.n	800a37c <_strtod_l+0x5f4>
 800a41a:	9f13      	ldr	r7, [sp, #76]	@ 0x4c
 800a41c:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 800a41e:	2f00      	cmp	r7, #0
 800a420:	bfab      	itete	ge
 800a422:	9b0a      	ldrge	r3, [sp, #40]	@ 0x28
 800a424:	9b0d      	ldrlt	r3, [sp, #52]	@ 0x34
 800a426:	f8dd 8034 	ldrge.w	r8, [sp, #52]	@ 0x34
 800a42a:	f8dd 9028 	ldrlt.w	r9, [sp, #40]	@ 0x28
 800a42e:	bfac      	ite	ge
 800a430:	eb07 0903 	addge.w	r9, r7, r3
 800a434:	eba3 0807 	sublt.w	r8, r3, r7
 800a438:	9b06      	ldr	r3, [sp, #24]
 800a43a:	1aff      	subs	r7, r7, r3
 800a43c:	4417      	add	r7, r2
 800a43e:	f1c2 0336 	rsb	r3, r2, #54	@ 0x36
 800a442:	4a6a      	ldr	r2, [pc, #424]	@ (800a5ec <_strtod_l+0x864>)
 800a444:	3f01      	subs	r7, #1
 800a446:	4297      	cmp	r7, r2
 800a448:	da51      	bge.n	800a4ee <_strtod_l+0x766>
 800a44a:	1bd1      	subs	r1, r2, r7
 800a44c:	291f      	cmp	r1, #31
 800a44e:	eba3 0301 	sub.w	r3, r3, r1
 800a452:	f04f 0201 	mov.w	r2, #1
 800a456:	dc3e      	bgt.n	800a4d6 <_strtod_l+0x74e>
 800a458:	408a      	lsls	r2, r1
 800a45a:	920c      	str	r2, [sp, #48]	@ 0x30
 800a45c:	2200      	movs	r2, #0
 800a45e:	920b      	str	r2, [sp, #44]	@ 0x2c
 800a460:	eb09 0703 	add.w	r7, r9, r3
 800a464:	4498      	add	r8, r3
 800a466:	9b06      	ldr	r3, [sp, #24]
 800a468:	45b9      	cmp	r9, r7
 800a46a:	4498      	add	r8, r3
 800a46c:	464b      	mov	r3, r9
 800a46e:	bfa8      	it	ge
 800a470:	463b      	movge	r3, r7
 800a472:	4543      	cmp	r3, r8
 800a474:	bfa8      	it	ge
 800a476:	4643      	movge	r3, r8
 800a478:	2b00      	cmp	r3, #0
 800a47a:	bfc2      	ittt	gt
 800a47c:	1aff      	subgt	r7, r7, r3
 800a47e:	eba8 0803 	subgt.w	r8, r8, r3
 800a482:	eba9 0903 	subgt.w	r9, r9, r3
 800a486:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a488:	2b00      	cmp	r3, #0
 800a48a:	dd16      	ble.n	800a4ba <_strtod_l+0x732>
 800a48c:	4629      	mov	r1, r5
 800a48e:	9805      	ldr	r0, [sp, #20]
 800a490:	461a      	mov	r2, r3
 800a492:	f002 fe6d 	bl	800d170 <__pow5mult>
 800a496:	4605      	mov	r5, r0
 800a498:	2800      	cmp	r0, #0
 800a49a:	d0b5      	beq.n	800a408 <_strtod_l+0x680>
 800a49c:	4601      	mov	r1, r0
 800a49e:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800a4a0:	9805      	ldr	r0, [sp, #20]
 800a4a2:	f002 fdc3 	bl	800d02c <__multiply>
 800a4a6:	900f      	str	r0, [sp, #60]	@ 0x3c
 800a4a8:	2800      	cmp	r0, #0
 800a4aa:	f43f ae87 	beq.w	800a1bc <_strtod_l+0x434>
 800a4ae:	9912      	ldr	r1, [sp, #72]	@ 0x48
 800a4b0:	9805      	ldr	r0, [sp, #20]
 800a4b2:	f002 fca7 	bl	800ce04 <_Bfree>
 800a4b6:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a4b8:	9312      	str	r3, [sp, #72]	@ 0x48
 800a4ba:	2f00      	cmp	r7, #0
 800a4bc:	dc1b      	bgt.n	800a4f6 <_strtod_l+0x76e>
 800a4be:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a4c0:	2b00      	cmp	r3, #0
 800a4c2:	dd21      	ble.n	800a508 <_strtod_l+0x780>
 800a4c4:	4631      	mov	r1, r6
 800a4c6:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800a4c8:	9805      	ldr	r0, [sp, #20]
 800a4ca:	f002 fe51 	bl	800d170 <__pow5mult>
 800a4ce:	4606      	mov	r6, r0
 800a4d0:	b9d0      	cbnz	r0, 800a508 <_strtod_l+0x780>
 800a4d2:	2600      	movs	r6, #0
 800a4d4:	e672      	b.n	800a1bc <_strtod_l+0x434>
 800a4d6:	f1c7 477f 	rsb	r7, r7, #4278190080	@ 0xff000000
 800a4da:	f507 077f 	add.w	r7, r7, #16711680	@ 0xff0000
 800a4de:	f507 477b 	add.w	r7, r7, #64256	@ 0xfb00
 800a4e2:	37e2      	adds	r7, #226	@ 0xe2
 800a4e4:	fa02 f107 	lsl.w	r1, r2, r7
 800a4e8:	910b      	str	r1, [sp, #44]	@ 0x2c
 800a4ea:	920c      	str	r2, [sp, #48]	@ 0x30
 800a4ec:	e7b8      	b.n	800a460 <_strtod_l+0x6d8>
 800a4ee:	2200      	movs	r2, #0
 800a4f0:	920b      	str	r2, [sp, #44]	@ 0x2c
 800a4f2:	2201      	movs	r2, #1
 800a4f4:	e7f9      	b.n	800a4ea <_strtod_l+0x762>
 800a4f6:	9912      	ldr	r1, [sp, #72]	@ 0x48
 800a4f8:	9805      	ldr	r0, [sp, #20]
 800a4fa:	463a      	mov	r2, r7
 800a4fc:	f002 fe92 	bl	800d224 <__lshift>
 800a500:	9012      	str	r0, [sp, #72]	@ 0x48
 800a502:	2800      	cmp	r0, #0
 800a504:	d1db      	bne.n	800a4be <_strtod_l+0x736>
 800a506:	e659      	b.n	800a1bc <_strtod_l+0x434>
 800a508:	f1b8 0f00 	cmp.w	r8, #0
 800a50c:	dd07      	ble.n	800a51e <_strtod_l+0x796>
 800a50e:	4631      	mov	r1, r6
 800a510:	9805      	ldr	r0, [sp, #20]
 800a512:	4642      	mov	r2, r8
 800a514:	f002 fe86 	bl	800d224 <__lshift>
 800a518:	4606      	mov	r6, r0
 800a51a:	2800      	cmp	r0, #0
 800a51c:	d0d9      	beq.n	800a4d2 <_strtod_l+0x74a>
 800a51e:	f1b9 0f00 	cmp.w	r9, #0
 800a522:	dd08      	ble.n	800a536 <_strtod_l+0x7ae>
 800a524:	4629      	mov	r1, r5
 800a526:	9805      	ldr	r0, [sp, #20]
 800a528:	464a      	mov	r2, r9
 800a52a:	f002 fe7b 	bl	800d224 <__lshift>
 800a52e:	4605      	mov	r5, r0
 800a530:	2800      	cmp	r0, #0
 800a532:	f43f ae43 	beq.w	800a1bc <_strtod_l+0x434>
 800a536:	9912      	ldr	r1, [sp, #72]	@ 0x48
 800a538:	9805      	ldr	r0, [sp, #20]
 800a53a:	4632      	mov	r2, r6
 800a53c:	f002 fefa 	bl	800d334 <__mdiff>
 800a540:	4604      	mov	r4, r0
 800a542:	2800      	cmp	r0, #0
 800a544:	f43f ae3a 	beq.w	800a1bc <_strtod_l+0x434>
 800a548:	2300      	movs	r3, #0
 800a54a:	f8d0 800c 	ldr.w	r8, [r0, #12]
 800a54e:	60c3      	str	r3, [r0, #12]
 800a550:	4629      	mov	r1, r5
 800a552:	f002 fed3 	bl	800d2fc <__mcmp>
 800a556:	2800      	cmp	r0, #0
 800a558:	da4c      	bge.n	800a5f4 <_strtod_l+0x86c>
 800a55a:	ea58 080a 	orrs.w	r8, r8, sl
 800a55e:	d172      	bne.n	800a646 <_strtod_l+0x8be>
 800a560:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800a564:	2b00      	cmp	r3, #0
 800a566:	d16e      	bne.n	800a646 <_strtod_l+0x8be>
 800a568:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800a56c:	0d1b      	lsrs	r3, r3, #20
 800a56e:	051b      	lsls	r3, r3, #20
 800a570:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800a574:	d967      	bls.n	800a646 <_strtod_l+0x8be>
 800a576:	6963      	ldr	r3, [r4, #20]
 800a578:	b913      	cbnz	r3, 800a580 <_strtod_l+0x7f8>
 800a57a:	6923      	ldr	r3, [r4, #16]
 800a57c:	2b01      	cmp	r3, #1
 800a57e:	dd62      	ble.n	800a646 <_strtod_l+0x8be>
 800a580:	4621      	mov	r1, r4
 800a582:	2201      	movs	r2, #1
 800a584:	9805      	ldr	r0, [sp, #20]
 800a586:	f002 fe4d 	bl	800d224 <__lshift>
 800a58a:	4629      	mov	r1, r5
 800a58c:	4604      	mov	r4, r0
 800a58e:	f002 feb5 	bl	800d2fc <__mcmp>
 800a592:	2800      	cmp	r0, #0
 800a594:	dd57      	ble.n	800a646 <_strtod_l+0x8be>
 800a596:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800a59a:	9a06      	ldr	r2, [sp, #24]
 800a59c:	0d1b      	lsrs	r3, r3, #20
 800a59e:	051b      	lsls	r3, r3, #20
 800a5a0:	2a00      	cmp	r2, #0
 800a5a2:	d06e      	beq.n	800a682 <_strtod_l+0x8fa>
 800a5a4:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800a5a8:	d86b      	bhi.n	800a682 <_strtod_l+0x8fa>
 800a5aa:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 800a5ae:	f67f ae99 	bls.w	800a2e4 <_strtod_l+0x55c>
 800a5b2:	ed9f 7b0b 	vldr	d7, [pc, #44]	@ 800a5e0 <_strtod_l+0x858>
 800a5b6:	ec4b ab16 	vmov	d6, sl, fp
 800a5ba:	4b0d      	ldr	r3, [pc, #52]	@ (800a5f0 <_strtod_l+0x868>)
 800a5bc:	ee26 7b07 	vmul.f64	d7, d6, d7
 800a5c0:	ee17 2a90 	vmov	r2, s15
 800a5c4:	4013      	ands	r3, r2
 800a5c6:	ec5b ab17 	vmov	sl, fp, d7
 800a5ca:	2b00      	cmp	r3, #0
 800a5cc:	f47f ae01 	bne.w	800a1d2 <_strtod_l+0x44a>
 800a5d0:	9a05      	ldr	r2, [sp, #20]
 800a5d2:	2322      	movs	r3, #34	@ 0x22
 800a5d4:	6013      	str	r3, [r2, #0]
 800a5d6:	e5fc      	b.n	800a1d2 <_strtod_l+0x44a>
 800a5d8:	ffc00000 	.word	0xffc00000
 800a5dc:	41dfffff 	.word	0x41dfffff
 800a5e0:	00000000 	.word	0x00000000
 800a5e4:	39500000 	.word	0x39500000
 800a5e8:	0800e4e8 	.word	0x0800e4e8
 800a5ec:	fffffc02 	.word	0xfffffc02
 800a5f0:	7ff00000 	.word	0x7ff00000
 800a5f4:	46d9      	mov	r9, fp
 800a5f6:	d15d      	bne.n	800a6b4 <_strtod_l+0x92c>
 800a5f8:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800a5fc:	f1b8 0f00 	cmp.w	r8, #0
 800a600:	d02a      	beq.n	800a658 <_strtod_l+0x8d0>
 800a602:	4aa9      	ldr	r2, [pc, #676]	@ (800a8a8 <_strtod_l+0xb20>)
 800a604:	4293      	cmp	r3, r2
 800a606:	d12a      	bne.n	800a65e <_strtod_l+0x8d6>
 800a608:	9b06      	ldr	r3, [sp, #24]
 800a60a:	4652      	mov	r2, sl
 800a60c:	b1fb      	cbz	r3, 800a64e <_strtod_l+0x8c6>
 800a60e:	4ba7      	ldr	r3, [pc, #668]	@ (800a8ac <_strtod_l+0xb24>)
 800a610:	ea0b 0303 	and.w	r3, fp, r3
 800a614:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 800a618:	f04f 31ff 	mov.w	r1, #4294967295
 800a61c:	d81a      	bhi.n	800a654 <_strtod_l+0x8cc>
 800a61e:	0d1b      	lsrs	r3, r3, #20
 800a620:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800a624:	fa01 f303 	lsl.w	r3, r1, r3
 800a628:	429a      	cmp	r2, r3
 800a62a:	d118      	bne.n	800a65e <_strtod_l+0x8d6>
 800a62c:	4ba0      	ldr	r3, [pc, #640]	@ (800a8b0 <_strtod_l+0xb28>)
 800a62e:	4599      	cmp	r9, r3
 800a630:	d102      	bne.n	800a638 <_strtod_l+0x8b0>
 800a632:	3201      	adds	r2, #1
 800a634:	f43f adc2 	beq.w	800a1bc <_strtod_l+0x434>
 800a638:	4b9c      	ldr	r3, [pc, #624]	@ (800a8ac <_strtod_l+0xb24>)
 800a63a:	ea09 0303 	and.w	r3, r9, r3
 800a63e:	f503 1b80 	add.w	fp, r3, #1048576	@ 0x100000
 800a642:	f04f 0a00 	mov.w	sl, #0
 800a646:	9b06      	ldr	r3, [sp, #24]
 800a648:	2b00      	cmp	r3, #0
 800a64a:	d1b2      	bne.n	800a5b2 <_strtod_l+0x82a>
 800a64c:	e5c1      	b.n	800a1d2 <_strtod_l+0x44a>
 800a64e:	f04f 33ff 	mov.w	r3, #4294967295
 800a652:	e7e9      	b.n	800a628 <_strtod_l+0x8a0>
 800a654:	460b      	mov	r3, r1
 800a656:	e7e7      	b.n	800a628 <_strtod_l+0x8a0>
 800a658:	ea53 030a 	orrs.w	r3, r3, sl
 800a65c:	d09b      	beq.n	800a596 <_strtod_l+0x80e>
 800a65e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a660:	b1c3      	cbz	r3, 800a694 <_strtod_l+0x90c>
 800a662:	ea13 0f09 	tst.w	r3, r9
 800a666:	d0ee      	beq.n	800a646 <_strtod_l+0x8be>
 800a668:	9a06      	ldr	r2, [sp, #24]
 800a66a:	4650      	mov	r0, sl
 800a66c:	4659      	mov	r1, fp
 800a66e:	f1b8 0f00 	cmp.w	r8, #0
 800a672:	d013      	beq.n	800a69c <_strtod_l+0x914>
 800a674:	f7ff fb6c 	bl	8009d50 <sulp>
 800a678:	ee39 7b00 	vadd.f64	d7, d9, d0
 800a67c:	ec5b ab17 	vmov	sl, fp, d7
 800a680:	e7e1      	b.n	800a646 <_strtod_l+0x8be>
 800a682:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 800a686:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800a68a:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800a68e:	f04f 3aff 	mov.w	sl, #4294967295
 800a692:	e7d8      	b.n	800a646 <_strtod_l+0x8be>
 800a694:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800a696:	ea13 0f0a 	tst.w	r3, sl
 800a69a:	e7e4      	b.n	800a666 <_strtod_l+0x8de>
 800a69c:	f7ff fb58 	bl	8009d50 <sulp>
 800a6a0:	ee39 0b40 	vsub.f64	d0, d9, d0
 800a6a4:	eeb5 0b40 	vcmp.f64	d0, #0.0
 800a6a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a6ac:	ec5b ab10 	vmov	sl, fp, d0
 800a6b0:	d1c9      	bne.n	800a646 <_strtod_l+0x8be>
 800a6b2:	e617      	b.n	800a2e4 <_strtod_l+0x55c>
 800a6b4:	4629      	mov	r1, r5
 800a6b6:	4620      	mov	r0, r4
 800a6b8:	f002 ff98 	bl	800d5ec <__ratio>
 800a6bc:	eeb0 7b00 	vmov.f64	d7, #0	@ 0x40000000  2.0
 800a6c0:	eeb4 0bc7 	vcmpe.f64	d0, d7
 800a6c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a6c8:	d85d      	bhi.n	800a786 <_strtod_l+0x9fe>
 800a6ca:	f1b8 0f00 	cmp.w	r8, #0
 800a6ce:	d164      	bne.n	800a79a <_strtod_l+0xa12>
 800a6d0:	f1ba 0f00 	cmp.w	sl, #0
 800a6d4:	d14b      	bne.n	800a76e <_strtod_l+0x9e6>
 800a6d6:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800a6da:	eeb7 8b00 	vmov.f64	d8, #112	@ 0x3f800000  1.0
 800a6de:	2b00      	cmp	r3, #0
 800a6e0:	d160      	bne.n	800a7a4 <_strtod_l+0xa1c>
 800a6e2:	eeb4 0bc8 	vcmpe.f64	d0, d8
 800a6e6:	eeb6 8b00 	vmov.f64	d8, #96	@ 0x3f000000  0.5
 800a6ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a6ee:	d401      	bmi.n	800a6f4 <_strtod_l+0x96c>
 800a6f0:	ee20 8b08 	vmul.f64	d8, d0, d8
 800a6f4:	eeb1 ab48 	vneg.f64	d10, d8
 800a6f8:	486c      	ldr	r0, [pc, #432]	@ (800a8ac <_strtod_l+0xb24>)
 800a6fa:	496e      	ldr	r1, [pc, #440]	@ (800a8b4 <_strtod_l+0xb2c>)
 800a6fc:	ea09 0700 	and.w	r7, r9, r0
 800a700:	428f      	cmp	r7, r1
 800a702:	ec53 2b1a 	vmov	r2, r3, d10
 800a706:	d17d      	bne.n	800a804 <_strtod_l+0xa7c>
 800a708:	f1a9 7b54 	sub.w	fp, r9, #55574528	@ 0x3500000
 800a70c:	ec4b ab1c 	vmov	d12, sl, fp
 800a710:	eeb0 0b4c 	vmov.f64	d0, d12
 800a714:	f002 fea2 	bl	800d45c <__ulp>
 800a718:	4864      	ldr	r0, [pc, #400]	@ (800a8ac <_strtod_l+0xb24>)
 800a71a:	eea0 cb0a 	vfma.f64	d12, d0, d10
 800a71e:	ee1c 3a90 	vmov	r3, s25
 800a722:	4a65      	ldr	r2, [pc, #404]	@ (800a8b8 <_strtod_l+0xb30>)
 800a724:	ea03 0100 	and.w	r1, r3, r0
 800a728:	4291      	cmp	r1, r2
 800a72a:	ec5b ab1c 	vmov	sl, fp, d12
 800a72e:	d93c      	bls.n	800a7aa <_strtod_l+0xa22>
 800a730:	ee19 2a90 	vmov	r2, s19
 800a734:	4b5e      	ldr	r3, [pc, #376]	@ (800a8b0 <_strtod_l+0xb28>)
 800a736:	429a      	cmp	r2, r3
 800a738:	d104      	bne.n	800a744 <_strtod_l+0x9bc>
 800a73a:	ee19 3a10 	vmov	r3, s18
 800a73e:	3301      	adds	r3, #1
 800a740:	f43f ad3c 	beq.w	800a1bc <_strtod_l+0x434>
 800a744:	f8df b168 	ldr.w	fp, [pc, #360]	@ 800a8b0 <_strtod_l+0xb28>
 800a748:	f04f 3aff 	mov.w	sl, #4294967295
 800a74c:	9912      	ldr	r1, [sp, #72]	@ 0x48
 800a74e:	9805      	ldr	r0, [sp, #20]
 800a750:	f002 fb58 	bl	800ce04 <_Bfree>
 800a754:	9805      	ldr	r0, [sp, #20]
 800a756:	4631      	mov	r1, r6
 800a758:	f002 fb54 	bl	800ce04 <_Bfree>
 800a75c:	9805      	ldr	r0, [sp, #20]
 800a75e:	4629      	mov	r1, r5
 800a760:	f002 fb50 	bl	800ce04 <_Bfree>
 800a764:	9805      	ldr	r0, [sp, #20]
 800a766:	4621      	mov	r1, r4
 800a768:	f002 fb4c 	bl	800ce04 <_Bfree>
 800a76c:	e627      	b.n	800a3be <_strtod_l+0x636>
 800a76e:	f1ba 0f01 	cmp.w	sl, #1
 800a772:	d103      	bne.n	800a77c <_strtod_l+0x9f4>
 800a774:	f1bb 0f00 	cmp.w	fp, #0
 800a778:	f43f adb4 	beq.w	800a2e4 <_strtod_l+0x55c>
 800a77c:	eebf ab00 	vmov.f64	d10, #240	@ 0xbf800000 -1.0
 800a780:	eeb7 8b00 	vmov.f64	d8, #112	@ 0x3f800000  1.0
 800a784:	e7b8      	b.n	800a6f8 <_strtod_l+0x970>
 800a786:	eeb6 8b00 	vmov.f64	d8, #96	@ 0x3f000000  0.5
 800a78a:	ee20 8b08 	vmul.f64	d8, d0, d8
 800a78e:	f1b8 0f00 	cmp.w	r8, #0
 800a792:	d0af      	beq.n	800a6f4 <_strtod_l+0x96c>
 800a794:	eeb0 ab48 	vmov.f64	d10, d8
 800a798:	e7ae      	b.n	800a6f8 <_strtod_l+0x970>
 800a79a:	eeb7 ab00 	vmov.f64	d10, #112	@ 0x3f800000  1.0
 800a79e:	eeb0 8b4a 	vmov.f64	d8, d10
 800a7a2:	e7a9      	b.n	800a6f8 <_strtod_l+0x970>
 800a7a4:	eebf ab00 	vmov.f64	d10, #240	@ 0xbf800000 -1.0
 800a7a8:	e7a6      	b.n	800a6f8 <_strtod_l+0x970>
 800a7aa:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 800a7ae:	9b06      	ldr	r3, [sp, #24]
 800a7b0:	46d9      	mov	r9, fp
 800a7b2:	2b00      	cmp	r3, #0
 800a7b4:	d1ca      	bne.n	800a74c <_strtod_l+0x9c4>
 800a7b6:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800a7ba:	0d1b      	lsrs	r3, r3, #20
 800a7bc:	051b      	lsls	r3, r3, #20
 800a7be:	429f      	cmp	r7, r3
 800a7c0:	d1c4      	bne.n	800a74c <_strtod_l+0x9c4>
 800a7c2:	ec51 0b18 	vmov	r0, r1, d8
 800a7c6:	f7f5 ffb7 	bl	8000738 <__aeabi_d2lz>
 800a7ca:	f7f5 ff6f 	bl	80006ac <__aeabi_l2d>
 800a7ce:	f3cb 0913 	ubfx	r9, fp, #0, #20
 800a7d2:	ec41 0b17 	vmov	d7, r0, r1
 800a7d6:	ea49 090a 	orr.w	r9, r9, sl
 800a7da:	ea59 0908 	orrs.w	r9, r9, r8
 800a7de:	ee38 8b47 	vsub.f64	d8, d8, d7
 800a7e2:	d03c      	beq.n	800a85e <_strtod_l+0xad6>
 800a7e4:	ed9f 7b2a 	vldr	d7, [pc, #168]	@ 800a890 <_strtod_l+0xb08>
 800a7e8:	eeb4 8bc7 	vcmpe.f64	d8, d7
 800a7ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a7f0:	f53f acef 	bmi.w	800a1d2 <_strtod_l+0x44a>
 800a7f4:	ed9f 7b28 	vldr	d7, [pc, #160]	@ 800a898 <_strtod_l+0xb10>
 800a7f8:	eeb4 8bc7 	vcmpe.f64	d8, d7
 800a7fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a800:	dda4      	ble.n	800a74c <_strtod_l+0x9c4>
 800a802:	e4e6      	b.n	800a1d2 <_strtod_l+0x44a>
 800a804:	9906      	ldr	r1, [sp, #24]
 800a806:	b1e1      	cbz	r1, 800a842 <_strtod_l+0xaba>
 800a808:	f1b7 6fd4 	cmp.w	r7, #111149056	@ 0x6a00000
 800a80c:	d819      	bhi.n	800a842 <_strtod_l+0xaba>
 800a80e:	eeb4 8bcb 	vcmpe.f64	d8, d11
 800a812:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a816:	d811      	bhi.n	800a83c <_strtod_l+0xab4>
 800a818:	eebc 8bc8 	vcvt.u32.f64	s16, d8
 800a81c:	ee18 3a10 	vmov	r3, s16
 800a820:	2b01      	cmp	r3, #1
 800a822:	bf38      	it	cc
 800a824:	2301      	movcc	r3, #1
 800a826:	ee08 3a10 	vmov	s16, r3
 800a82a:	eeb8 8b48 	vcvt.f64.u32	d8, s16
 800a82e:	f1b8 0f00 	cmp.w	r8, #0
 800a832:	d111      	bne.n	800a858 <_strtod_l+0xad0>
 800a834:	eeb1 7b48 	vneg.f64	d7, d8
 800a838:	ec53 2b17 	vmov	r2, r3, d7
 800a83c:	f103 61d6 	add.w	r1, r3, #112197632	@ 0x6b00000
 800a840:	1bcb      	subs	r3, r1, r7
 800a842:	eeb0 0b49 	vmov.f64	d0, d9
 800a846:	ec43 2b1a 	vmov	d10, r2, r3
 800a84a:	f002 fe07 	bl	800d45c <__ulp>
 800a84e:	eeaa 9b00 	vfma.f64	d9, d10, d0
 800a852:	ec5b ab19 	vmov	sl, fp, d9
 800a856:	e7aa      	b.n	800a7ae <_strtod_l+0xa26>
 800a858:	eeb0 7b48 	vmov.f64	d7, d8
 800a85c:	e7ec      	b.n	800a838 <_strtod_l+0xab0>
 800a85e:	ed9f 7b10 	vldr	d7, [pc, #64]	@ 800a8a0 <_strtod_l+0xb18>
 800a862:	eeb4 8bc7 	vcmpe.f64	d8, d7
 800a866:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a86a:	f57f af6f 	bpl.w	800a74c <_strtod_l+0x9c4>
 800a86e:	e4b0      	b.n	800a1d2 <_strtod_l+0x44a>
 800a870:	2300      	movs	r3, #0
 800a872:	9308      	str	r3, [sp, #32]
 800a874:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800a876:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800a878:	6013      	str	r3, [r2, #0]
 800a87a:	f7ff bac4 	b.w	8009e06 <_strtod_l+0x7e>
 800a87e:	2a65      	cmp	r2, #101	@ 0x65
 800a880:	f43f abbf 	beq.w	800a002 <_strtod_l+0x27a>
 800a884:	2a45      	cmp	r2, #69	@ 0x45
 800a886:	f43f abbc 	beq.w	800a002 <_strtod_l+0x27a>
 800a88a:	2101      	movs	r1, #1
 800a88c:	f7ff bbf4 	b.w	800a078 <_strtod_l+0x2f0>
 800a890:	94a03595 	.word	0x94a03595
 800a894:	3fdfffff 	.word	0x3fdfffff
 800a898:	35afe535 	.word	0x35afe535
 800a89c:	3fe00000 	.word	0x3fe00000
 800a8a0:	94a03595 	.word	0x94a03595
 800a8a4:	3fcfffff 	.word	0x3fcfffff
 800a8a8:	000fffff 	.word	0x000fffff
 800a8ac:	7ff00000 	.word	0x7ff00000
 800a8b0:	7fefffff 	.word	0x7fefffff
 800a8b4:	7fe00000 	.word	0x7fe00000
 800a8b8:	7c9fffff 	.word	0x7c9fffff

0800a8bc <strtod>:
 800a8bc:	460a      	mov	r2, r1
 800a8be:	4601      	mov	r1, r0
 800a8c0:	4802      	ldr	r0, [pc, #8]	@ (800a8cc <strtod+0x10>)
 800a8c2:	4b03      	ldr	r3, [pc, #12]	@ (800a8d0 <strtod+0x14>)
 800a8c4:	6800      	ldr	r0, [r0, #0]
 800a8c6:	f7ff ba5f 	b.w	8009d88 <_strtod_l>
 800a8ca:	bf00      	nop
 800a8cc:	24000188 	.word	0x24000188
 800a8d0:	2400001c 	.word	0x2400001c

0800a8d4 <_strtol_l.isra.0>:
 800a8d4:	2b24      	cmp	r3, #36	@ 0x24
 800a8d6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a8da:	4686      	mov	lr, r0
 800a8dc:	4690      	mov	r8, r2
 800a8de:	d801      	bhi.n	800a8e4 <_strtol_l.isra.0+0x10>
 800a8e0:	2b01      	cmp	r3, #1
 800a8e2:	d106      	bne.n	800a8f2 <_strtol_l.isra.0+0x1e>
 800a8e4:	f000 ffd8 	bl	800b898 <__errno>
 800a8e8:	2316      	movs	r3, #22
 800a8ea:	6003      	str	r3, [r0, #0]
 800a8ec:	2000      	movs	r0, #0
 800a8ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a8f2:	4834      	ldr	r0, [pc, #208]	@ (800a9c4 <_strtol_l.isra.0+0xf0>)
 800a8f4:	460d      	mov	r5, r1
 800a8f6:	462a      	mov	r2, r5
 800a8f8:	f815 4b01 	ldrb.w	r4, [r5], #1
 800a8fc:	5d06      	ldrb	r6, [r0, r4]
 800a8fe:	f016 0608 	ands.w	r6, r6, #8
 800a902:	d1f8      	bne.n	800a8f6 <_strtol_l.isra.0+0x22>
 800a904:	2c2d      	cmp	r4, #45	@ 0x2d
 800a906:	d110      	bne.n	800a92a <_strtol_l.isra.0+0x56>
 800a908:	782c      	ldrb	r4, [r5, #0]
 800a90a:	2601      	movs	r6, #1
 800a90c:	1c95      	adds	r5, r2, #2
 800a90e:	f033 0210 	bics.w	r2, r3, #16
 800a912:	d115      	bne.n	800a940 <_strtol_l.isra.0+0x6c>
 800a914:	2c30      	cmp	r4, #48	@ 0x30
 800a916:	d10d      	bne.n	800a934 <_strtol_l.isra.0+0x60>
 800a918:	782a      	ldrb	r2, [r5, #0]
 800a91a:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800a91e:	2a58      	cmp	r2, #88	@ 0x58
 800a920:	d108      	bne.n	800a934 <_strtol_l.isra.0+0x60>
 800a922:	786c      	ldrb	r4, [r5, #1]
 800a924:	3502      	adds	r5, #2
 800a926:	2310      	movs	r3, #16
 800a928:	e00a      	b.n	800a940 <_strtol_l.isra.0+0x6c>
 800a92a:	2c2b      	cmp	r4, #43	@ 0x2b
 800a92c:	bf04      	itt	eq
 800a92e:	782c      	ldrbeq	r4, [r5, #0]
 800a930:	1c95      	addeq	r5, r2, #2
 800a932:	e7ec      	b.n	800a90e <_strtol_l.isra.0+0x3a>
 800a934:	2b00      	cmp	r3, #0
 800a936:	d1f6      	bne.n	800a926 <_strtol_l.isra.0+0x52>
 800a938:	2c30      	cmp	r4, #48	@ 0x30
 800a93a:	bf14      	ite	ne
 800a93c:	230a      	movne	r3, #10
 800a93e:	2308      	moveq	r3, #8
 800a940:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800a944:	f10c 3cff 	add.w	ip, ip, #4294967295
 800a948:	2200      	movs	r2, #0
 800a94a:	fbbc f9f3 	udiv	r9, ip, r3
 800a94e:	4610      	mov	r0, r2
 800a950:	fb03 ca19 	mls	sl, r3, r9, ip
 800a954:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 800a958:	2f09      	cmp	r7, #9
 800a95a:	d80f      	bhi.n	800a97c <_strtol_l.isra.0+0xa8>
 800a95c:	463c      	mov	r4, r7
 800a95e:	42a3      	cmp	r3, r4
 800a960:	dd1b      	ble.n	800a99a <_strtol_l.isra.0+0xc6>
 800a962:	1c57      	adds	r7, r2, #1
 800a964:	d007      	beq.n	800a976 <_strtol_l.isra.0+0xa2>
 800a966:	4581      	cmp	r9, r0
 800a968:	d314      	bcc.n	800a994 <_strtol_l.isra.0+0xc0>
 800a96a:	d101      	bne.n	800a970 <_strtol_l.isra.0+0x9c>
 800a96c:	45a2      	cmp	sl, r4
 800a96e:	db11      	blt.n	800a994 <_strtol_l.isra.0+0xc0>
 800a970:	fb00 4003 	mla	r0, r0, r3, r4
 800a974:	2201      	movs	r2, #1
 800a976:	f815 4b01 	ldrb.w	r4, [r5], #1
 800a97a:	e7eb      	b.n	800a954 <_strtol_l.isra.0+0x80>
 800a97c:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 800a980:	2f19      	cmp	r7, #25
 800a982:	d801      	bhi.n	800a988 <_strtol_l.isra.0+0xb4>
 800a984:	3c37      	subs	r4, #55	@ 0x37
 800a986:	e7ea      	b.n	800a95e <_strtol_l.isra.0+0x8a>
 800a988:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800a98c:	2f19      	cmp	r7, #25
 800a98e:	d804      	bhi.n	800a99a <_strtol_l.isra.0+0xc6>
 800a990:	3c57      	subs	r4, #87	@ 0x57
 800a992:	e7e4      	b.n	800a95e <_strtol_l.isra.0+0x8a>
 800a994:	f04f 32ff 	mov.w	r2, #4294967295
 800a998:	e7ed      	b.n	800a976 <_strtol_l.isra.0+0xa2>
 800a99a:	1c53      	adds	r3, r2, #1
 800a99c:	d108      	bne.n	800a9b0 <_strtol_l.isra.0+0xdc>
 800a99e:	2322      	movs	r3, #34	@ 0x22
 800a9a0:	f8ce 3000 	str.w	r3, [lr]
 800a9a4:	4660      	mov	r0, ip
 800a9a6:	f1b8 0f00 	cmp.w	r8, #0
 800a9aa:	d0a0      	beq.n	800a8ee <_strtol_l.isra.0+0x1a>
 800a9ac:	1e69      	subs	r1, r5, #1
 800a9ae:	e006      	b.n	800a9be <_strtol_l.isra.0+0xea>
 800a9b0:	b106      	cbz	r6, 800a9b4 <_strtol_l.isra.0+0xe0>
 800a9b2:	4240      	negs	r0, r0
 800a9b4:	f1b8 0f00 	cmp.w	r8, #0
 800a9b8:	d099      	beq.n	800a8ee <_strtol_l.isra.0+0x1a>
 800a9ba:	2a00      	cmp	r2, #0
 800a9bc:	d1f6      	bne.n	800a9ac <_strtol_l.isra.0+0xd8>
 800a9be:	f8c8 1000 	str.w	r1, [r8]
 800a9c2:	e794      	b.n	800a8ee <_strtol_l.isra.0+0x1a>
 800a9c4:	0800e511 	.word	0x0800e511

0800a9c8 <strtol>:
 800a9c8:	4613      	mov	r3, r2
 800a9ca:	460a      	mov	r2, r1
 800a9cc:	4601      	mov	r1, r0
 800a9ce:	4802      	ldr	r0, [pc, #8]	@ (800a9d8 <strtol+0x10>)
 800a9d0:	6800      	ldr	r0, [r0, #0]
 800a9d2:	f7ff bf7f 	b.w	800a8d4 <_strtol_l.isra.0>
 800a9d6:	bf00      	nop
 800a9d8:	24000188 	.word	0x24000188

0800a9dc <__cvt>:
 800a9dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a9de:	ed2d 8b02 	vpush	{d8}
 800a9e2:	eeb0 8b40 	vmov.f64	d8, d0
 800a9e6:	b085      	sub	sp, #20
 800a9e8:	4617      	mov	r7, r2
 800a9ea:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
 800a9ec:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800a9ee:	ee18 2a90 	vmov	r2, s17
 800a9f2:	f025 0520 	bic.w	r5, r5, #32
 800a9f6:	2a00      	cmp	r2, #0
 800a9f8:	bfb6      	itet	lt
 800a9fa:	222d      	movlt	r2, #45	@ 0x2d
 800a9fc:	2200      	movge	r2, #0
 800a9fe:	eeb1 8b40 	vneglt.f64	d8, d0
 800aa02:	2d46      	cmp	r5, #70	@ 0x46
 800aa04:	460c      	mov	r4, r1
 800aa06:	701a      	strb	r2, [r3, #0]
 800aa08:	d004      	beq.n	800aa14 <__cvt+0x38>
 800aa0a:	2d45      	cmp	r5, #69	@ 0x45
 800aa0c:	d100      	bne.n	800aa10 <__cvt+0x34>
 800aa0e:	3401      	adds	r4, #1
 800aa10:	2102      	movs	r1, #2
 800aa12:	e000      	b.n	800aa16 <__cvt+0x3a>
 800aa14:	2103      	movs	r1, #3
 800aa16:	ab03      	add	r3, sp, #12
 800aa18:	9301      	str	r3, [sp, #4]
 800aa1a:	ab02      	add	r3, sp, #8
 800aa1c:	9300      	str	r3, [sp, #0]
 800aa1e:	4622      	mov	r2, r4
 800aa20:	4633      	mov	r3, r6
 800aa22:	eeb0 0b48 	vmov.f64	d0, d8
 800aa26:	f001 f803 	bl	800ba30 <_dtoa_r>
 800aa2a:	2d47      	cmp	r5, #71	@ 0x47
 800aa2c:	d114      	bne.n	800aa58 <__cvt+0x7c>
 800aa2e:	07fb      	lsls	r3, r7, #31
 800aa30:	d50a      	bpl.n	800aa48 <__cvt+0x6c>
 800aa32:	1902      	adds	r2, r0, r4
 800aa34:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800aa38:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800aa3c:	bf08      	it	eq
 800aa3e:	9203      	streq	r2, [sp, #12]
 800aa40:	2130      	movs	r1, #48	@ 0x30
 800aa42:	9b03      	ldr	r3, [sp, #12]
 800aa44:	4293      	cmp	r3, r2
 800aa46:	d319      	bcc.n	800aa7c <__cvt+0xa0>
 800aa48:	9b03      	ldr	r3, [sp, #12]
 800aa4a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800aa4c:	1a1b      	subs	r3, r3, r0
 800aa4e:	6013      	str	r3, [r2, #0]
 800aa50:	b005      	add	sp, #20
 800aa52:	ecbd 8b02 	vpop	{d8}
 800aa56:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800aa58:	2d46      	cmp	r5, #70	@ 0x46
 800aa5a:	eb00 0204 	add.w	r2, r0, r4
 800aa5e:	d1e9      	bne.n	800aa34 <__cvt+0x58>
 800aa60:	7803      	ldrb	r3, [r0, #0]
 800aa62:	2b30      	cmp	r3, #48	@ 0x30
 800aa64:	d107      	bne.n	800aa76 <__cvt+0x9a>
 800aa66:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800aa6a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800aa6e:	bf1c      	itt	ne
 800aa70:	f1c4 0401 	rsbne	r4, r4, #1
 800aa74:	6034      	strne	r4, [r6, #0]
 800aa76:	6833      	ldr	r3, [r6, #0]
 800aa78:	441a      	add	r2, r3
 800aa7a:	e7db      	b.n	800aa34 <__cvt+0x58>
 800aa7c:	1c5c      	adds	r4, r3, #1
 800aa7e:	9403      	str	r4, [sp, #12]
 800aa80:	7019      	strb	r1, [r3, #0]
 800aa82:	e7de      	b.n	800aa42 <__cvt+0x66>

0800aa84 <__exponent>:
 800aa84:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800aa86:	2900      	cmp	r1, #0
 800aa88:	bfba      	itte	lt
 800aa8a:	4249      	neglt	r1, r1
 800aa8c:	232d      	movlt	r3, #45	@ 0x2d
 800aa8e:	232b      	movge	r3, #43	@ 0x2b
 800aa90:	2909      	cmp	r1, #9
 800aa92:	7002      	strb	r2, [r0, #0]
 800aa94:	7043      	strb	r3, [r0, #1]
 800aa96:	dd29      	ble.n	800aaec <__exponent+0x68>
 800aa98:	f10d 0307 	add.w	r3, sp, #7
 800aa9c:	461d      	mov	r5, r3
 800aa9e:	270a      	movs	r7, #10
 800aaa0:	461a      	mov	r2, r3
 800aaa2:	fbb1 f6f7 	udiv	r6, r1, r7
 800aaa6:	fb07 1416 	mls	r4, r7, r6, r1
 800aaaa:	3430      	adds	r4, #48	@ 0x30
 800aaac:	f802 4c01 	strb.w	r4, [r2, #-1]
 800aab0:	460c      	mov	r4, r1
 800aab2:	2c63      	cmp	r4, #99	@ 0x63
 800aab4:	f103 33ff 	add.w	r3, r3, #4294967295
 800aab8:	4631      	mov	r1, r6
 800aaba:	dcf1      	bgt.n	800aaa0 <__exponent+0x1c>
 800aabc:	3130      	adds	r1, #48	@ 0x30
 800aabe:	1e94      	subs	r4, r2, #2
 800aac0:	f803 1c01 	strb.w	r1, [r3, #-1]
 800aac4:	1c41      	adds	r1, r0, #1
 800aac6:	4623      	mov	r3, r4
 800aac8:	42ab      	cmp	r3, r5
 800aaca:	d30a      	bcc.n	800aae2 <__exponent+0x5e>
 800aacc:	f10d 0309 	add.w	r3, sp, #9
 800aad0:	1a9b      	subs	r3, r3, r2
 800aad2:	42ac      	cmp	r4, r5
 800aad4:	bf88      	it	hi
 800aad6:	2300      	movhi	r3, #0
 800aad8:	3302      	adds	r3, #2
 800aada:	4403      	add	r3, r0
 800aadc:	1a18      	subs	r0, r3, r0
 800aade:	b003      	add	sp, #12
 800aae0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800aae2:	f813 6b01 	ldrb.w	r6, [r3], #1
 800aae6:	f801 6f01 	strb.w	r6, [r1, #1]!
 800aaea:	e7ed      	b.n	800aac8 <__exponent+0x44>
 800aaec:	2330      	movs	r3, #48	@ 0x30
 800aaee:	3130      	adds	r1, #48	@ 0x30
 800aaf0:	7083      	strb	r3, [r0, #2]
 800aaf2:	70c1      	strb	r1, [r0, #3]
 800aaf4:	1d03      	adds	r3, r0, #4
 800aaf6:	e7f1      	b.n	800aadc <__exponent+0x58>

0800aaf8 <_printf_float>:
 800aaf8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aafc:	b08d      	sub	sp, #52	@ 0x34
 800aafe:	460c      	mov	r4, r1
 800ab00:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800ab04:	4616      	mov	r6, r2
 800ab06:	461f      	mov	r7, r3
 800ab08:	4605      	mov	r5, r0
 800ab0a:	f000 fe7b 	bl	800b804 <_localeconv_r>
 800ab0e:	f8d0 b000 	ldr.w	fp, [r0]
 800ab12:	4658      	mov	r0, fp
 800ab14:	f7f5 fc34 	bl	8000380 <strlen>
 800ab18:	2300      	movs	r3, #0
 800ab1a:	930a      	str	r3, [sp, #40]	@ 0x28
 800ab1c:	f8d8 3000 	ldr.w	r3, [r8]
 800ab20:	f894 9018 	ldrb.w	r9, [r4, #24]
 800ab24:	6822      	ldr	r2, [r4, #0]
 800ab26:	9005      	str	r0, [sp, #20]
 800ab28:	3307      	adds	r3, #7
 800ab2a:	f023 0307 	bic.w	r3, r3, #7
 800ab2e:	f103 0108 	add.w	r1, r3, #8
 800ab32:	f8c8 1000 	str.w	r1, [r8]
 800ab36:	ed93 0b00 	vldr	d0, [r3]
 800ab3a:	ed9f 6b97 	vldr	d6, [pc, #604]	@ 800ad98 <_printf_float+0x2a0>
 800ab3e:	eeb0 7bc0 	vabs.f64	d7, d0
 800ab42:	eeb4 7b46 	vcmp.f64	d7, d6
 800ab46:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ab4a:	ed84 0b12 	vstr	d0, [r4, #72]	@ 0x48
 800ab4e:	dd24      	ble.n	800ab9a <_printf_float+0xa2>
 800ab50:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 800ab54:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ab58:	d502      	bpl.n	800ab60 <_printf_float+0x68>
 800ab5a:	232d      	movs	r3, #45	@ 0x2d
 800ab5c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800ab60:	498f      	ldr	r1, [pc, #572]	@ (800ada0 <_printf_float+0x2a8>)
 800ab62:	4b90      	ldr	r3, [pc, #576]	@ (800ada4 <_printf_float+0x2ac>)
 800ab64:	f1b9 0f47 	cmp.w	r9, #71	@ 0x47
 800ab68:	bf8c      	ite	hi
 800ab6a:	4688      	movhi	r8, r1
 800ab6c:	4698      	movls	r8, r3
 800ab6e:	f022 0204 	bic.w	r2, r2, #4
 800ab72:	2303      	movs	r3, #3
 800ab74:	6123      	str	r3, [r4, #16]
 800ab76:	6022      	str	r2, [r4, #0]
 800ab78:	f04f 0a00 	mov.w	sl, #0
 800ab7c:	9700      	str	r7, [sp, #0]
 800ab7e:	4633      	mov	r3, r6
 800ab80:	aa0b      	add	r2, sp, #44	@ 0x2c
 800ab82:	4621      	mov	r1, r4
 800ab84:	4628      	mov	r0, r5
 800ab86:	f000 f9d1 	bl	800af2c <_printf_common>
 800ab8a:	3001      	adds	r0, #1
 800ab8c:	f040 8089 	bne.w	800aca2 <_printf_float+0x1aa>
 800ab90:	f04f 30ff 	mov.w	r0, #4294967295
 800ab94:	b00d      	add	sp, #52	@ 0x34
 800ab96:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ab9a:	eeb4 0b40 	vcmp.f64	d0, d0
 800ab9e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800aba2:	d709      	bvc.n	800abb8 <_printf_float+0xc0>
 800aba4:	ee10 3a90 	vmov	r3, s1
 800aba8:	2b00      	cmp	r3, #0
 800abaa:	bfbc      	itt	lt
 800abac:	232d      	movlt	r3, #45	@ 0x2d
 800abae:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800abb2:	497d      	ldr	r1, [pc, #500]	@ (800ada8 <_printf_float+0x2b0>)
 800abb4:	4b7d      	ldr	r3, [pc, #500]	@ (800adac <_printf_float+0x2b4>)
 800abb6:	e7d5      	b.n	800ab64 <_printf_float+0x6c>
 800abb8:	6863      	ldr	r3, [r4, #4]
 800abba:	1c59      	adds	r1, r3, #1
 800abbc:	f009 0adf 	and.w	sl, r9, #223	@ 0xdf
 800abc0:	d139      	bne.n	800ac36 <_printf_float+0x13e>
 800abc2:	2306      	movs	r3, #6
 800abc4:	6063      	str	r3, [r4, #4]
 800abc6:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800abca:	2300      	movs	r3, #0
 800abcc:	6022      	str	r2, [r4, #0]
 800abce:	9303      	str	r3, [sp, #12]
 800abd0:	ab0a      	add	r3, sp, #40	@ 0x28
 800abd2:	e9cd 9301 	strd	r9, r3, [sp, #4]
 800abd6:	ab09      	add	r3, sp, #36	@ 0x24
 800abd8:	9300      	str	r3, [sp, #0]
 800abda:	6861      	ldr	r1, [r4, #4]
 800abdc:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800abe0:	4628      	mov	r0, r5
 800abe2:	f7ff fefb 	bl	800a9dc <__cvt>
 800abe6:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800abea:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800abec:	4680      	mov	r8, r0
 800abee:	d129      	bne.n	800ac44 <_printf_float+0x14c>
 800abf0:	1cc8      	adds	r0, r1, #3
 800abf2:	db02      	blt.n	800abfa <_printf_float+0x102>
 800abf4:	6863      	ldr	r3, [r4, #4]
 800abf6:	4299      	cmp	r1, r3
 800abf8:	dd41      	ble.n	800ac7e <_printf_float+0x186>
 800abfa:	f1a9 0902 	sub.w	r9, r9, #2
 800abfe:	fa5f f989 	uxtb.w	r9, r9
 800ac02:	3901      	subs	r1, #1
 800ac04:	464a      	mov	r2, r9
 800ac06:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800ac0a:	9109      	str	r1, [sp, #36]	@ 0x24
 800ac0c:	f7ff ff3a 	bl	800aa84 <__exponent>
 800ac10:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800ac12:	1813      	adds	r3, r2, r0
 800ac14:	2a01      	cmp	r2, #1
 800ac16:	4682      	mov	sl, r0
 800ac18:	6123      	str	r3, [r4, #16]
 800ac1a:	dc02      	bgt.n	800ac22 <_printf_float+0x12a>
 800ac1c:	6822      	ldr	r2, [r4, #0]
 800ac1e:	07d2      	lsls	r2, r2, #31
 800ac20:	d501      	bpl.n	800ac26 <_printf_float+0x12e>
 800ac22:	3301      	adds	r3, #1
 800ac24:	6123      	str	r3, [r4, #16]
 800ac26:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800ac2a:	2b00      	cmp	r3, #0
 800ac2c:	d0a6      	beq.n	800ab7c <_printf_float+0x84>
 800ac2e:	232d      	movs	r3, #45	@ 0x2d
 800ac30:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800ac34:	e7a2      	b.n	800ab7c <_printf_float+0x84>
 800ac36:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800ac3a:	d1c4      	bne.n	800abc6 <_printf_float+0xce>
 800ac3c:	2b00      	cmp	r3, #0
 800ac3e:	d1c2      	bne.n	800abc6 <_printf_float+0xce>
 800ac40:	2301      	movs	r3, #1
 800ac42:	e7bf      	b.n	800abc4 <_printf_float+0xcc>
 800ac44:	f1b9 0f65 	cmp.w	r9, #101	@ 0x65
 800ac48:	d9db      	bls.n	800ac02 <_printf_float+0x10a>
 800ac4a:	f1b9 0f66 	cmp.w	r9, #102	@ 0x66
 800ac4e:	d118      	bne.n	800ac82 <_printf_float+0x18a>
 800ac50:	2900      	cmp	r1, #0
 800ac52:	6863      	ldr	r3, [r4, #4]
 800ac54:	dd0b      	ble.n	800ac6e <_printf_float+0x176>
 800ac56:	6121      	str	r1, [r4, #16]
 800ac58:	b913      	cbnz	r3, 800ac60 <_printf_float+0x168>
 800ac5a:	6822      	ldr	r2, [r4, #0]
 800ac5c:	07d0      	lsls	r0, r2, #31
 800ac5e:	d502      	bpl.n	800ac66 <_printf_float+0x16e>
 800ac60:	3301      	adds	r3, #1
 800ac62:	440b      	add	r3, r1
 800ac64:	6123      	str	r3, [r4, #16]
 800ac66:	65a1      	str	r1, [r4, #88]	@ 0x58
 800ac68:	f04f 0a00 	mov.w	sl, #0
 800ac6c:	e7db      	b.n	800ac26 <_printf_float+0x12e>
 800ac6e:	b913      	cbnz	r3, 800ac76 <_printf_float+0x17e>
 800ac70:	6822      	ldr	r2, [r4, #0]
 800ac72:	07d2      	lsls	r2, r2, #31
 800ac74:	d501      	bpl.n	800ac7a <_printf_float+0x182>
 800ac76:	3302      	adds	r3, #2
 800ac78:	e7f4      	b.n	800ac64 <_printf_float+0x16c>
 800ac7a:	2301      	movs	r3, #1
 800ac7c:	e7f2      	b.n	800ac64 <_printf_float+0x16c>
 800ac7e:	f04f 0967 	mov.w	r9, #103	@ 0x67
 800ac82:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ac84:	4299      	cmp	r1, r3
 800ac86:	db05      	blt.n	800ac94 <_printf_float+0x19c>
 800ac88:	6823      	ldr	r3, [r4, #0]
 800ac8a:	6121      	str	r1, [r4, #16]
 800ac8c:	07d8      	lsls	r0, r3, #31
 800ac8e:	d5ea      	bpl.n	800ac66 <_printf_float+0x16e>
 800ac90:	1c4b      	adds	r3, r1, #1
 800ac92:	e7e7      	b.n	800ac64 <_printf_float+0x16c>
 800ac94:	2900      	cmp	r1, #0
 800ac96:	bfd4      	ite	le
 800ac98:	f1c1 0202 	rsble	r2, r1, #2
 800ac9c:	2201      	movgt	r2, #1
 800ac9e:	4413      	add	r3, r2
 800aca0:	e7e0      	b.n	800ac64 <_printf_float+0x16c>
 800aca2:	6823      	ldr	r3, [r4, #0]
 800aca4:	055a      	lsls	r2, r3, #21
 800aca6:	d407      	bmi.n	800acb8 <_printf_float+0x1c0>
 800aca8:	6923      	ldr	r3, [r4, #16]
 800acaa:	4642      	mov	r2, r8
 800acac:	4631      	mov	r1, r6
 800acae:	4628      	mov	r0, r5
 800acb0:	47b8      	blx	r7
 800acb2:	3001      	adds	r0, #1
 800acb4:	d12a      	bne.n	800ad0c <_printf_float+0x214>
 800acb6:	e76b      	b.n	800ab90 <_printf_float+0x98>
 800acb8:	f1b9 0f65 	cmp.w	r9, #101	@ 0x65
 800acbc:	f240 80e0 	bls.w	800ae80 <_printf_float+0x388>
 800acc0:	ed94 7b12 	vldr	d7, [r4, #72]	@ 0x48
 800acc4:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800acc8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800accc:	d133      	bne.n	800ad36 <_printf_float+0x23e>
 800acce:	4a38      	ldr	r2, [pc, #224]	@ (800adb0 <_printf_float+0x2b8>)
 800acd0:	2301      	movs	r3, #1
 800acd2:	4631      	mov	r1, r6
 800acd4:	4628      	mov	r0, r5
 800acd6:	47b8      	blx	r7
 800acd8:	3001      	adds	r0, #1
 800acda:	f43f af59 	beq.w	800ab90 <_printf_float+0x98>
 800acde:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800ace2:	4543      	cmp	r3, r8
 800ace4:	db02      	blt.n	800acec <_printf_float+0x1f4>
 800ace6:	6823      	ldr	r3, [r4, #0]
 800ace8:	07d8      	lsls	r0, r3, #31
 800acea:	d50f      	bpl.n	800ad0c <_printf_float+0x214>
 800acec:	9b05      	ldr	r3, [sp, #20]
 800acee:	465a      	mov	r2, fp
 800acf0:	4631      	mov	r1, r6
 800acf2:	4628      	mov	r0, r5
 800acf4:	47b8      	blx	r7
 800acf6:	3001      	adds	r0, #1
 800acf8:	f43f af4a 	beq.w	800ab90 <_printf_float+0x98>
 800acfc:	f04f 0900 	mov.w	r9, #0
 800ad00:	f108 38ff 	add.w	r8, r8, #4294967295
 800ad04:	f104 0a1a 	add.w	sl, r4, #26
 800ad08:	45c8      	cmp	r8, r9
 800ad0a:	dc09      	bgt.n	800ad20 <_printf_float+0x228>
 800ad0c:	6823      	ldr	r3, [r4, #0]
 800ad0e:	079b      	lsls	r3, r3, #30
 800ad10:	f100 8107 	bmi.w	800af22 <_printf_float+0x42a>
 800ad14:	68e0      	ldr	r0, [r4, #12]
 800ad16:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800ad18:	4298      	cmp	r0, r3
 800ad1a:	bfb8      	it	lt
 800ad1c:	4618      	movlt	r0, r3
 800ad1e:	e739      	b.n	800ab94 <_printf_float+0x9c>
 800ad20:	2301      	movs	r3, #1
 800ad22:	4652      	mov	r2, sl
 800ad24:	4631      	mov	r1, r6
 800ad26:	4628      	mov	r0, r5
 800ad28:	47b8      	blx	r7
 800ad2a:	3001      	adds	r0, #1
 800ad2c:	f43f af30 	beq.w	800ab90 <_printf_float+0x98>
 800ad30:	f109 0901 	add.w	r9, r9, #1
 800ad34:	e7e8      	b.n	800ad08 <_printf_float+0x210>
 800ad36:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ad38:	2b00      	cmp	r3, #0
 800ad3a:	dc3b      	bgt.n	800adb4 <_printf_float+0x2bc>
 800ad3c:	4a1c      	ldr	r2, [pc, #112]	@ (800adb0 <_printf_float+0x2b8>)
 800ad3e:	2301      	movs	r3, #1
 800ad40:	4631      	mov	r1, r6
 800ad42:	4628      	mov	r0, r5
 800ad44:	47b8      	blx	r7
 800ad46:	3001      	adds	r0, #1
 800ad48:	f43f af22 	beq.w	800ab90 <_printf_float+0x98>
 800ad4c:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800ad50:	ea59 0303 	orrs.w	r3, r9, r3
 800ad54:	d102      	bne.n	800ad5c <_printf_float+0x264>
 800ad56:	6823      	ldr	r3, [r4, #0]
 800ad58:	07d9      	lsls	r1, r3, #31
 800ad5a:	d5d7      	bpl.n	800ad0c <_printf_float+0x214>
 800ad5c:	9b05      	ldr	r3, [sp, #20]
 800ad5e:	465a      	mov	r2, fp
 800ad60:	4631      	mov	r1, r6
 800ad62:	4628      	mov	r0, r5
 800ad64:	47b8      	blx	r7
 800ad66:	3001      	adds	r0, #1
 800ad68:	f43f af12 	beq.w	800ab90 <_printf_float+0x98>
 800ad6c:	f04f 0a00 	mov.w	sl, #0
 800ad70:	f104 0b1a 	add.w	fp, r4, #26
 800ad74:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ad76:	425b      	negs	r3, r3
 800ad78:	4553      	cmp	r3, sl
 800ad7a:	dc01      	bgt.n	800ad80 <_printf_float+0x288>
 800ad7c:	464b      	mov	r3, r9
 800ad7e:	e794      	b.n	800acaa <_printf_float+0x1b2>
 800ad80:	2301      	movs	r3, #1
 800ad82:	465a      	mov	r2, fp
 800ad84:	4631      	mov	r1, r6
 800ad86:	4628      	mov	r0, r5
 800ad88:	47b8      	blx	r7
 800ad8a:	3001      	adds	r0, #1
 800ad8c:	f43f af00 	beq.w	800ab90 <_printf_float+0x98>
 800ad90:	f10a 0a01 	add.w	sl, sl, #1
 800ad94:	e7ee      	b.n	800ad74 <_printf_float+0x27c>
 800ad96:	bf00      	nop
 800ad98:	ffffffff 	.word	0xffffffff
 800ad9c:	7fefffff 	.word	0x7fefffff
 800ada0:	0800e2ee 	.word	0x0800e2ee
 800ada4:	0800e2ea 	.word	0x0800e2ea
 800ada8:	0800e2f6 	.word	0x0800e2f6
 800adac:	0800e2f2 	.word	0x0800e2f2
 800adb0:	0800e2fa 	.word	0x0800e2fa
 800adb4:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800adb6:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800adba:	4553      	cmp	r3, sl
 800adbc:	bfa8      	it	ge
 800adbe:	4653      	movge	r3, sl
 800adc0:	2b00      	cmp	r3, #0
 800adc2:	4699      	mov	r9, r3
 800adc4:	dc37      	bgt.n	800ae36 <_printf_float+0x33e>
 800adc6:	2300      	movs	r3, #0
 800adc8:	9307      	str	r3, [sp, #28]
 800adca:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800adce:	f104 021a 	add.w	r2, r4, #26
 800add2:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800add4:	9907      	ldr	r1, [sp, #28]
 800add6:	9306      	str	r3, [sp, #24]
 800add8:	eba3 0309 	sub.w	r3, r3, r9
 800addc:	428b      	cmp	r3, r1
 800adde:	dc31      	bgt.n	800ae44 <_printf_float+0x34c>
 800ade0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ade2:	459a      	cmp	sl, r3
 800ade4:	dc3b      	bgt.n	800ae5e <_printf_float+0x366>
 800ade6:	6823      	ldr	r3, [r4, #0]
 800ade8:	07da      	lsls	r2, r3, #31
 800adea:	d438      	bmi.n	800ae5e <_printf_float+0x366>
 800adec:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800adee:	ebaa 0903 	sub.w	r9, sl, r3
 800adf2:	9b06      	ldr	r3, [sp, #24]
 800adf4:	ebaa 0303 	sub.w	r3, sl, r3
 800adf8:	4599      	cmp	r9, r3
 800adfa:	bfa8      	it	ge
 800adfc:	4699      	movge	r9, r3
 800adfe:	f1b9 0f00 	cmp.w	r9, #0
 800ae02:	dc34      	bgt.n	800ae6e <_printf_float+0x376>
 800ae04:	f04f 0800 	mov.w	r8, #0
 800ae08:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800ae0c:	f104 0b1a 	add.w	fp, r4, #26
 800ae10:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ae12:	ebaa 0303 	sub.w	r3, sl, r3
 800ae16:	eba3 0309 	sub.w	r3, r3, r9
 800ae1a:	4543      	cmp	r3, r8
 800ae1c:	f77f af76 	ble.w	800ad0c <_printf_float+0x214>
 800ae20:	2301      	movs	r3, #1
 800ae22:	465a      	mov	r2, fp
 800ae24:	4631      	mov	r1, r6
 800ae26:	4628      	mov	r0, r5
 800ae28:	47b8      	blx	r7
 800ae2a:	3001      	adds	r0, #1
 800ae2c:	f43f aeb0 	beq.w	800ab90 <_printf_float+0x98>
 800ae30:	f108 0801 	add.w	r8, r8, #1
 800ae34:	e7ec      	b.n	800ae10 <_printf_float+0x318>
 800ae36:	4642      	mov	r2, r8
 800ae38:	4631      	mov	r1, r6
 800ae3a:	4628      	mov	r0, r5
 800ae3c:	47b8      	blx	r7
 800ae3e:	3001      	adds	r0, #1
 800ae40:	d1c1      	bne.n	800adc6 <_printf_float+0x2ce>
 800ae42:	e6a5      	b.n	800ab90 <_printf_float+0x98>
 800ae44:	2301      	movs	r3, #1
 800ae46:	4631      	mov	r1, r6
 800ae48:	4628      	mov	r0, r5
 800ae4a:	9206      	str	r2, [sp, #24]
 800ae4c:	47b8      	blx	r7
 800ae4e:	3001      	adds	r0, #1
 800ae50:	f43f ae9e 	beq.w	800ab90 <_printf_float+0x98>
 800ae54:	9b07      	ldr	r3, [sp, #28]
 800ae56:	9a06      	ldr	r2, [sp, #24]
 800ae58:	3301      	adds	r3, #1
 800ae5a:	9307      	str	r3, [sp, #28]
 800ae5c:	e7b9      	b.n	800add2 <_printf_float+0x2da>
 800ae5e:	9b05      	ldr	r3, [sp, #20]
 800ae60:	465a      	mov	r2, fp
 800ae62:	4631      	mov	r1, r6
 800ae64:	4628      	mov	r0, r5
 800ae66:	47b8      	blx	r7
 800ae68:	3001      	adds	r0, #1
 800ae6a:	d1bf      	bne.n	800adec <_printf_float+0x2f4>
 800ae6c:	e690      	b.n	800ab90 <_printf_float+0x98>
 800ae6e:	9a06      	ldr	r2, [sp, #24]
 800ae70:	464b      	mov	r3, r9
 800ae72:	4442      	add	r2, r8
 800ae74:	4631      	mov	r1, r6
 800ae76:	4628      	mov	r0, r5
 800ae78:	47b8      	blx	r7
 800ae7a:	3001      	adds	r0, #1
 800ae7c:	d1c2      	bne.n	800ae04 <_printf_float+0x30c>
 800ae7e:	e687      	b.n	800ab90 <_printf_float+0x98>
 800ae80:	f8dd 9028 	ldr.w	r9, [sp, #40]	@ 0x28
 800ae84:	f1b9 0f01 	cmp.w	r9, #1
 800ae88:	dc01      	bgt.n	800ae8e <_printf_float+0x396>
 800ae8a:	07db      	lsls	r3, r3, #31
 800ae8c:	d536      	bpl.n	800aefc <_printf_float+0x404>
 800ae8e:	2301      	movs	r3, #1
 800ae90:	4642      	mov	r2, r8
 800ae92:	4631      	mov	r1, r6
 800ae94:	4628      	mov	r0, r5
 800ae96:	47b8      	blx	r7
 800ae98:	3001      	adds	r0, #1
 800ae9a:	f43f ae79 	beq.w	800ab90 <_printf_float+0x98>
 800ae9e:	9b05      	ldr	r3, [sp, #20]
 800aea0:	465a      	mov	r2, fp
 800aea2:	4631      	mov	r1, r6
 800aea4:	4628      	mov	r0, r5
 800aea6:	47b8      	blx	r7
 800aea8:	3001      	adds	r0, #1
 800aeaa:	f43f ae71 	beq.w	800ab90 <_printf_float+0x98>
 800aeae:	ed94 7b12 	vldr	d7, [r4, #72]	@ 0x48
 800aeb2:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800aeb6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800aeba:	f109 39ff 	add.w	r9, r9, #4294967295
 800aebe:	d018      	beq.n	800aef2 <_printf_float+0x3fa>
 800aec0:	464b      	mov	r3, r9
 800aec2:	f108 0201 	add.w	r2, r8, #1
 800aec6:	4631      	mov	r1, r6
 800aec8:	4628      	mov	r0, r5
 800aeca:	47b8      	blx	r7
 800aecc:	3001      	adds	r0, #1
 800aece:	d10c      	bne.n	800aeea <_printf_float+0x3f2>
 800aed0:	e65e      	b.n	800ab90 <_printf_float+0x98>
 800aed2:	2301      	movs	r3, #1
 800aed4:	465a      	mov	r2, fp
 800aed6:	4631      	mov	r1, r6
 800aed8:	4628      	mov	r0, r5
 800aeda:	47b8      	blx	r7
 800aedc:	3001      	adds	r0, #1
 800aede:	f43f ae57 	beq.w	800ab90 <_printf_float+0x98>
 800aee2:	f108 0801 	add.w	r8, r8, #1
 800aee6:	45c8      	cmp	r8, r9
 800aee8:	dbf3      	blt.n	800aed2 <_printf_float+0x3da>
 800aeea:	4653      	mov	r3, sl
 800aeec:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800aef0:	e6dc      	b.n	800acac <_printf_float+0x1b4>
 800aef2:	f04f 0800 	mov.w	r8, #0
 800aef6:	f104 0b1a 	add.w	fp, r4, #26
 800aefa:	e7f4      	b.n	800aee6 <_printf_float+0x3ee>
 800aefc:	2301      	movs	r3, #1
 800aefe:	4642      	mov	r2, r8
 800af00:	e7e1      	b.n	800aec6 <_printf_float+0x3ce>
 800af02:	2301      	movs	r3, #1
 800af04:	464a      	mov	r2, r9
 800af06:	4631      	mov	r1, r6
 800af08:	4628      	mov	r0, r5
 800af0a:	47b8      	blx	r7
 800af0c:	3001      	adds	r0, #1
 800af0e:	f43f ae3f 	beq.w	800ab90 <_printf_float+0x98>
 800af12:	f108 0801 	add.w	r8, r8, #1
 800af16:	68e3      	ldr	r3, [r4, #12]
 800af18:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800af1a:	1a5b      	subs	r3, r3, r1
 800af1c:	4543      	cmp	r3, r8
 800af1e:	dcf0      	bgt.n	800af02 <_printf_float+0x40a>
 800af20:	e6f8      	b.n	800ad14 <_printf_float+0x21c>
 800af22:	f04f 0800 	mov.w	r8, #0
 800af26:	f104 0919 	add.w	r9, r4, #25
 800af2a:	e7f4      	b.n	800af16 <_printf_float+0x41e>

0800af2c <_printf_common>:
 800af2c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800af30:	4616      	mov	r6, r2
 800af32:	4698      	mov	r8, r3
 800af34:	688a      	ldr	r2, [r1, #8]
 800af36:	690b      	ldr	r3, [r1, #16]
 800af38:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800af3c:	4293      	cmp	r3, r2
 800af3e:	bfb8      	it	lt
 800af40:	4613      	movlt	r3, r2
 800af42:	6033      	str	r3, [r6, #0]
 800af44:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800af48:	4607      	mov	r7, r0
 800af4a:	460c      	mov	r4, r1
 800af4c:	b10a      	cbz	r2, 800af52 <_printf_common+0x26>
 800af4e:	3301      	adds	r3, #1
 800af50:	6033      	str	r3, [r6, #0]
 800af52:	6823      	ldr	r3, [r4, #0]
 800af54:	0699      	lsls	r1, r3, #26
 800af56:	bf42      	ittt	mi
 800af58:	6833      	ldrmi	r3, [r6, #0]
 800af5a:	3302      	addmi	r3, #2
 800af5c:	6033      	strmi	r3, [r6, #0]
 800af5e:	6825      	ldr	r5, [r4, #0]
 800af60:	f015 0506 	ands.w	r5, r5, #6
 800af64:	d106      	bne.n	800af74 <_printf_common+0x48>
 800af66:	f104 0a19 	add.w	sl, r4, #25
 800af6a:	68e3      	ldr	r3, [r4, #12]
 800af6c:	6832      	ldr	r2, [r6, #0]
 800af6e:	1a9b      	subs	r3, r3, r2
 800af70:	42ab      	cmp	r3, r5
 800af72:	dc26      	bgt.n	800afc2 <_printf_common+0x96>
 800af74:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800af78:	6822      	ldr	r2, [r4, #0]
 800af7a:	3b00      	subs	r3, #0
 800af7c:	bf18      	it	ne
 800af7e:	2301      	movne	r3, #1
 800af80:	0692      	lsls	r2, r2, #26
 800af82:	d42b      	bmi.n	800afdc <_printf_common+0xb0>
 800af84:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800af88:	4641      	mov	r1, r8
 800af8a:	4638      	mov	r0, r7
 800af8c:	47c8      	blx	r9
 800af8e:	3001      	adds	r0, #1
 800af90:	d01e      	beq.n	800afd0 <_printf_common+0xa4>
 800af92:	6823      	ldr	r3, [r4, #0]
 800af94:	6922      	ldr	r2, [r4, #16]
 800af96:	f003 0306 	and.w	r3, r3, #6
 800af9a:	2b04      	cmp	r3, #4
 800af9c:	bf02      	ittt	eq
 800af9e:	68e5      	ldreq	r5, [r4, #12]
 800afa0:	6833      	ldreq	r3, [r6, #0]
 800afa2:	1aed      	subeq	r5, r5, r3
 800afa4:	68a3      	ldr	r3, [r4, #8]
 800afa6:	bf0c      	ite	eq
 800afa8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800afac:	2500      	movne	r5, #0
 800afae:	4293      	cmp	r3, r2
 800afb0:	bfc4      	itt	gt
 800afb2:	1a9b      	subgt	r3, r3, r2
 800afb4:	18ed      	addgt	r5, r5, r3
 800afb6:	2600      	movs	r6, #0
 800afb8:	341a      	adds	r4, #26
 800afba:	42b5      	cmp	r5, r6
 800afbc:	d11a      	bne.n	800aff4 <_printf_common+0xc8>
 800afbe:	2000      	movs	r0, #0
 800afc0:	e008      	b.n	800afd4 <_printf_common+0xa8>
 800afc2:	2301      	movs	r3, #1
 800afc4:	4652      	mov	r2, sl
 800afc6:	4641      	mov	r1, r8
 800afc8:	4638      	mov	r0, r7
 800afca:	47c8      	blx	r9
 800afcc:	3001      	adds	r0, #1
 800afce:	d103      	bne.n	800afd8 <_printf_common+0xac>
 800afd0:	f04f 30ff 	mov.w	r0, #4294967295
 800afd4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800afd8:	3501      	adds	r5, #1
 800afda:	e7c6      	b.n	800af6a <_printf_common+0x3e>
 800afdc:	18e1      	adds	r1, r4, r3
 800afde:	1c5a      	adds	r2, r3, #1
 800afe0:	2030      	movs	r0, #48	@ 0x30
 800afe2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800afe6:	4422      	add	r2, r4
 800afe8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800afec:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800aff0:	3302      	adds	r3, #2
 800aff2:	e7c7      	b.n	800af84 <_printf_common+0x58>
 800aff4:	2301      	movs	r3, #1
 800aff6:	4622      	mov	r2, r4
 800aff8:	4641      	mov	r1, r8
 800affa:	4638      	mov	r0, r7
 800affc:	47c8      	blx	r9
 800affe:	3001      	adds	r0, #1
 800b000:	d0e6      	beq.n	800afd0 <_printf_common+0xa4>
 800b002:	3601      	adds	r6, #1
 800b004:	e7d9      	b.n	800afba <_printf_common+0x8e>
	...

0800b008 <_printf_i>:
 800b008:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b00c:	7e0f      	ldrb	r7, [r1, #24]
 800b00e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800b010:	2f78      	cmp	r7, #120	@ 0x78
 800b012:	4691      	mov	r9, r2
 800b014:	4680      	mov	r8, r0
 800b016:	460c      	mov	r4, r1
 800b018:	469a      	mov	sl, r3
 800b01a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800b01e:	d807      	bhi.n	800b030 <_printf_i+0x28>
 800b020:	2f62      	cmp	r7, #98	@ 0x62
 800b022:	d80a      	bhi.n	800b03a <_printf_i+0x32>
 800b024:	2f00      	cmp	r7, #0
 800b026:	f000 80d1 	beq.w	800b1cc <_printf_i+0x1c4>
 800b02a:	2f58      	cmp	r7, #88	@ 0x58
 800b02c:	f000 80b8 	beq.w	800b1a0 <_printf_i+0x198>
 800b030:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800b034:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800b038:	e03a      	b.n	800b0b0 <_printf_i+0xa8>
 800b03a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800b03e:	2b15      	cmp	r3, #21
 800b040:	d8f6      	bhi.n	800b030 <_printf_i+0x28>
 800b042:	a101      	add	r1, pc, #4	@ (adr r1, 800b048 <_printf_i+0x40>)
 800b044:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800b048:	0800b0a1 	.word	0x0800b0a1
 800b04c:	0800b0b5 	.word	0x0800b0b5
 800b050:	0800b031 	.word	0x0800b031
 800b054:	0800b031 	.word	0x0800b031
 800b058:	0800b031 	.word	0x0800b031
 800b05c:	0800b031 	.word	0x0800b031
 800b060:	0800b0b5 	.word	0x0800b0b5
 800b064:	0800b031 	.word	0x0800b031
 800b068:	0800b031 	.word	0x0800b031
 800b06c:	0800b031 	.word	0x0800b031
 800b070:	0800b031 	.word	0x0800b031
 800b074:	0800b1b3 	.word	0x0800b1b3
 800b078:	0800b0df 	.word	0x0800b0df
 800b07c:	0800b16d 	.word	0x0800b16d
 800b080:	0800b031 	.word	0x0800b031
 800b084:	0800b031 	.word	0x0800b031
 800b088:	0800b1d5 	.word	0x0800b1d5
 800b08c:	0800b031 	.word	0x0800b031
 800b090:	0800b0df 	.word	0x0800b0df
 800b094:	0800b031 	.word	0x0800b031
 800b098:	0800b031 	.word	0x0800b031
 800b09c:	0800b175 	.word	0x0800b175
 800b0a0:	6833      	ldr	r3, [r6, #0]
 800b0a2:	1d1a      	adds	r2, r3, #4
 800b0a4:	681b      	ldr	r3, [r3, #0]
 800b0a6:	6032      	str	r2, [r6, #0]
 800b0a8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800b0ac:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800b0b0:	2301      	movs	r3, #1
 800b0b2:	e09c      	b.n	800b1ee <_printf_i+0x1e6>
 800b0b4:	6833      	ldr	r3, [r6, #0]
 800b0b6:	6820      	ldr	r0, [r4, #0]
 800b0b8:	1d19      	adds	r1, r3, #4
 800b0ba:	6031      	str	r1, [r6, #0]
 800b0bc:	0606      	lsls	r6, r0, #24
 800b0be:	d501      	bpl.n	800b0c4 <_printf_i+0xbc>
 800b0c0:	681d      	ldr	r5, [r3, #0]
 800b0c2:	e003      	b.n	800b0cc <_printf_i+0xc4>
 800b0c4:	0645      	lsls	r5, r0, #25
 800b0c6:	d5fb      	bpl.n	800b0c0 <_printf_i+0xb8>
 800b0c8:	f9b3 5000 	ldrsh.w	r5, [r3]
 800b0cc:	2d00      	cmp	r5, #0
 800b0ce:	da03      	bge.n	800b0d8 <_printf_i+0xd0>
 800b0d0:	232d      	movs	r3, #45	@ 0x2d
 800b0d2:	426d      	negs	r5, r5
 800b0d4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b0d8:	4858      	ldr	r0, [pc, #352]	@ (800b23c <_printf_i+0x234>)
 800b0da:	230a      	movs	r3, #10
 800b0dc:	e011      	b.n	800b102 <_printf_i+0xfa>
 800b0de:	6821      	ldr	r1, [r4, #0]
 800b0e0:	6833      	ldr	r3, [r6, #0]
 800b0e2:	0608      	lsls	r0, r1, #24
 800b0e4:	f853 5b04 	ldr.w	r5, [r3], #4
 800b0e8:	d402      	bmi.n	800b0f0 <_printf_i+0xe8>
 800b0ea:	0649      	lsls	r1, r1, #25
 800b0ec:	bf48      	it	mi
 800b0ee:	b2ad      	uxthmi	r5, r5
 800b0f0:	2f6f      	cmp	r7, #111	@ 0x6f
 800b0f2:	4852      	ldr	r0, [pc, #328]	@ (800b23c <_printf_i+0x234>)
 800b0f4:	6033      	str	r3, [r6, #0]
 800b0f6:	bf14      	ite	ne
 800b0f8:	230a      	movne	r3, #10
 800b0fa:	2308      	moveq	r3, #8
 800b0fc:	2100      	movs	r1, #0
 800b0fe:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800b102:	6866      	ldr	r6, [r4, #4]
 800b104:	60a6      	str	r6, [r4, #8]
 800b106:	2e00      	cmp	r6, #0
 800b108:	db05      	blt.n	800b116 <_printf_i+0x10e>
 800b10a:	6821      	ldr	r1, [r4, #0]
 800b10c:	432e      	orrs	r6, r5
 800b10e:	f021 0104 	bic.w	r1, r1, #4
 800b112:	6021      	str	r1, [r4, #0]
 800b114:	d04b      	beq.n	800b1ae <_printf_i+0x1a6>
 800b116:	4616      	mov	r6, r2
 800b118:	fbb5 f1f3 	udiv	r1, r5, r3
 800b11c:	fb03 5711 	mls	r7, r3, r1, r5
 800b120:	5dc7      	ldrb	r7, [r0, r7]
 800b122:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800b126:	462f      	mov	r7, r5
 800b128:	42bb      	cmp	r3, r7
 800b12a:	460d      	mov	r5, r1
 800b12c:	d9f4      	bls.n	800b118 <_printf_i+0x110>
 800b12e:	2b08      	cmp	r3, #8
 800b130:	d10b      	bne.n	800b14a <_printf_i+0x142>
 800b132:	6823      	ldr	r3, [r4, #0]
 800b134:	07df      	lsls	r7, r3, #31
 800b136:	d508      	bpl.n	800b14a <_printf_i+0x142>
 800b138:	6923      	ldr	r3, [r4, #16]
 800b13a:	6861      	ldr	r1, [r4, #4]
 800b13c:	4299      	cmp	r1, r3
 800b13e:	bfde      	ittt	le
 800b140:	2330      	movle	r3, #48	@ 0x30
 800b142:	f806 3c01 	strble.w	r3, [r6, #-1]
 800b146:	f106 36ff 	addle.w	r6, r6, #4294967295
 800b14a:	1b92      	subs	r2, r2, r6
 800b14c:	6122      	str	r2, [r4, #16]
 800b14e:	f8cd a000 	str.w	sl, [sp]
 800b152:	464b      	mov	r3, r9
 800b154:	aa03      	add	r2, sp, #12
 800b156:	4621      	mov	r1, r4
 800b158:	4640      	mov	r0, r8
 800b15a:	f7ff fee7 	bl	800af2c <_printf_common>
 800b15e:	3001      	adds	r0, #1
 800b160:	d14a      	bne.n	800b1f8 <_printf_i+0x1f0>
 800b162:	f04f 30ff 	mov.w	r0, #4294967295
 800b166:	b004      	add	sp, #16
 800b168:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b16c:	6823      	ldr	r3, [r4, #0]
 800b16e:	f043 0320 	orr.w	r3, r3, #32
 800b172:	6023      	str	r3, [r4, #0]
 800b174:	4832      	ldr	r0, [pc, #200]	@ (800b240 <_printf_i+0x238>)
 800b176:	2778      	movs	r7, #120	@ 0x78
 800b178:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800b17c:	6823      	ldr	r3, [r4, #0]
 800b17e:	6831      	ldr	r1, [r6, #0]
 800b180:	061f      	lsls	r7, r3, #24
 800b182:	f851 5b04 	ldr.w	r5, [r1], #4
 800b186:	d402      	bmi.n	800b18e <_printf_i+0x186>
 800b188:	065f      	lsls	r7, r3, #25
 800b18a:	bf48      	it	mi
 800b18c:	b2ad      	uxthmi	r5, r5
 800b18e:	6031      	str	r1, [r6, #0]
 800b190:	07d9      	lsls	r1, r3, #31
 800b192:	bf44      	itt	mi
 800b194:	f043 0320 	orrmi.w	r3, r3, #32
 800b198:	6023      	strmi	r3, [r4, #0]
 800b19a:	b11d      	cbz	r5, 800b1a4 <_printf_i+0x19c>
 800b19c:	2310      	movs	r3, #16
 800b19e:	e7ad      	b.n	800b0fc <_printf_i+0xf4>
 800b1a0:	4826      	ldr	r0, [pc, #152]	@ (800b23c <_printf_i+0x234>)
 800b1a2:	e7e9      	b.n	800b178 <_printf_i+0x170>
 800b1a4:	6823      	ldr	r3, [r4, #0]
 800b1a6:	f023 0320 	bic.w	r3, r3, #32
 800b1aa:	6023      	str	r3, [r4, #0]
 800b1ac:	e7f6      	b.n	800b19c <_printf_i+0x194>
 800b1ae:	4616      	mov	r6, r2
 800b1b0:	e7bd      	b.n	800b12e <_printf_i+0x126>
 800b1b2:	6833      	ldr	r3, [r6, #0]
 800b1b4:	6825      	ldr	r5, [r4, #0]
 800b1b6:	6961      	ldr	r1, [r4, #20]
 800b1b8:	1d18      	adds	r0, r3, #4
 800b1ba:	6030      	str	r0, [r6, #0]
 800b1bc:	062e      	lsls	r6, r5, #24
 800b1be:	681b      	ldr	r3, [r3, #0]
 800b1c0:	d501      	bpl.n	800b1c6 <_printf_i+0x1be>
 800b1c2:	6019      	str	r1, [r3, #0]
 800b1c4:	e002      	b.n	800b1cc <_printf_i+0x1c4>
 800b1c6:	0668      	lsls	r0, r5, #25
 800b1c8:	d5fb      	bpl.n	800b1c2 <_printf_i+0x1ba>
 800b1ca:	8019      	strh	r1, [r3, #0]
 800b1cc:	2300      	movs	r3, #0
 800b1ce:	6123      	str	r3, [r4, #16]
 800b1d0:	4616      	mov	r6, r2
 800b1d2:	e7bc      	b.n	800b14e <_printf_i+0x146>
 800b1d4:	6833      	ldr	r3, [r6, #0]
 800b1d6:	1d1a      	adds	r2, r3, #4
 800b1d8:	6032      	str	r2, [r6, #0]
 800b1da:	681e      	ldr	r6, [r3, #0]
 800b1dc:	6862      	ldr	r2, [r4, #4]
 800b1de:	2100      	movs	r1, #0
 800b1e0:	4630      	mov	r0, r6
 800b1e2:	f7f5 f87d 	bl	80002e0 <memchr>
 800b1e6:	b108      	cbz	r0, 800b1ec <_printf_i+0x1e4>
 800b1e8:	1b80      	subs	r0, r0, r6
 800b1ea:	6060      	str	r0, [r4, #4]
 800b1ec:	6863      	ldr	r3, [r4, #4]
 800b1ee:	6123      	str	r3, [r4, #16]
 800b1f0:	2300      	movs	r3, #0
 800b1f2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b1f6:	e7aa      	b.n	800b14e <_printf_i+0x146>
 800b1f8:	6923      	ldr	r3, [r4, #16]
 800b1fa:	4632      	mov	r2, r6
 800b1fc:	4649      	mov	r1, r9
 800b1fe:	4640      	mov	r0, r8
 800b200:	47d0      	blx	sl
 800b202:	3001      	adds	r0, #1
 800b204:	d0ad      	beq.n	800b162 <_printf_i+0x15a>
 800b206:	6823      	ldr	r3, [r4, #0]
 800b208:	079b      	lsls	r3, r3, #30
 800b20a:	d413      	bmi.n	800b234 <_printf_i+0x22c>
 800b20c:	68e0      	ldr	r0, [r4, #12]
 800b20e:	9b03      	ldr	r3, [sp, #12]
 800b210:	4298      	cmp	r0, r3
 800b212:	bfb8      	it	lt
 800b214:	4618      	movlt	r0, r3
 800b216:	e7a6      	b.n	800b166 <_printf_i+0x15e>
 800b218:	2301      	movs	r3, #1
 800b21a:	4632      	mov	r2, r6
 800b21c:	4649      	mov	r1, r9
 800b21e:	4640      	mov	r0, r8
 800b220:	47d0      	blx	sl
 800b222:	3001      	adds	r0, #1
 800b224:	d09d      	beq.n	800b162 <_printf_i+0x15a>
 800b226:	3501      	adds	r5, #1
 800b228:	68e3      	ldr	r3, [r4, #12]
 800b22a:	9903      	ldr	r1, [sp, #12]
 800b22c:	1a5b      	subs	r3, r3, r1
 800b22e:	42ab      	cmp	r3, r5
 800b230:	dcf2      	bgt.n	800b218 <_printf_i+0x210>
 800b232:	e7eb      	b.n	800b20c <_printf_i+0x204>
 800b234:	2500      	movs	r5, #0
 800b236:	f104 0619 	add.w	r6, r4, #25
 800b23a:	e7f5      	b.n	800b228 <_printf_i+0x220>
 800b23c:	0800e2fc 	.word	0x0800e2fc
 800b240:	0800e30d 	.word	0x0800e30d

0800b244 <std>:
 800b244:	2300      	movs	r3, #0
 800b246:	b510      	push	{r4, lr}
 800b248:	4604      	mov	r4, r0
 800b24a:	e9c0 3300 	strd	r3, r3, [r0]
 800b24e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800b252:	6083      	str	r3, [r0, #8]
 800b254:	8181      	strh	r1, [r0, #12]
 800b256:	6643      	str	r3, [r0, #100]	@ 0x64
 800b258:	81c2      	strh	r2, [r0, #14]
 800b25a:	6183      	str	r3, [r0, #24]
 800b25c:	4619      	mov	r1, r3
 800b25e:	2208      	movs	r2, #8
 800b260:	305c      	adds	r0, #92	@ 0x5c
 800b262:	f000 fab5 	bl	800b7d0 <memset>
 800b266:	4b0d      	ldr	r3, [pc, #52]	@ (800b29c <std+0x58>)
 800b268:	6263      	str	r3, [r4, #36]	@ 0x24
 800b26a:	4b0d      	ldr	r3, [pc, #52]	@ (800b2a0 <std+0x5c>)
 800b26c:	62a3      	str	r3, [r4, #40]	@ 0x28
 800b26e:	4b0d      	ldr	r3, [pc, #52]	@ (800b2a4 <std+0x60>)
 800b270:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800b272:	4b0d      	ldr	r3, [pc, #52]	@ (800b2a8 <std+0x64>)
 800b274:	6323      	str	r3, [r4, #48]	@ 0x30
 800b276:	4b0d      	ldr	r3, [pc, #52]	@ (800b2ac <std+0x68>)
 800b278:	6224      	str	r4, [r4, #32]
 800b27a:	429c      	cmp	r4, r3
 800b27c:	d006      	beq.n	800b28c <std+0x48>
 800b27e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800b282:	4294      	cmp	r4, r2
 800b284:	d002      	beq.n	800b28c <std+0x48>
 800b286:	33d0      	adds	r3, #208	@ 0xd0
 800b288:	429c      	cmp	r4, r3
 800b28a:	d105      	bne.n	800b298 <std+0x54>
 800b28c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800b290:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b294:	f000 bb2a 	b.w	800b8ec <__retarget_lock_init_recursive>
 800b298:	bd10      	pop	{r4, pc}
 800b29a:	bf00      	nop
 800b29c:	0800b621 	.word	0x0800b621
 800b2a0:	0800b643 	.word	0x0800b643
 800b2a4:	0800b67b 	.word	0x0800b67b
 800b2a8:	0800b69f 	.word	0x0800b69f
 800b2ac:	240004e8 	.word	0x240004e8

0800b2b0 <stdio_exit_handler>:
 800b2b0:	4a02      	ldr	r2, [pc, #8]	@ (800b2bc <stdio_exit_handler+0xc>)
 800b2b2:	4903      	ldr	r1, [pc, #12]	@ (800b2c0 <stdio_exit_handler+0x10>)
 800b2b4:	4803      	ldr	r0, [pc, #12]	@ (800b2c4 <stdio_exit_handler+0x14>)
 800b2b6:	f000 b869 	b.w	800b38c <_fwalk_sglue>
 800b2ba:	bf00      	nop
 800b2bc:	24000010 	.word	0x24000010
 800b2c0:	0800da79 	.word	0x0800da79
 800b2c4:	2400018c 	.word	0x2400018c

0800b2c8 <cleanup_stdio>:
 800b2c8:	6841      	ldr	r1, [r0, #4]
 800b2ca:	4b0c      	ldr	r3, [pc, #48]	@ (800b2fc <cleanup_stdio+0x34>)
 800b2cc:	4299      	cmp	r1, r3
 800b2ce:	b510      	push	{r4, lr}
 800b2d0:	4604      	mov	r4, r0
 800b2d2:	d001      	beq.n	800b2d8 <cleanup_stdio+0x10>
 800b2d4:	f002 fbd0 	bl	800da78 <_fflush_r>
 800b2d8:	68a1      	ldr	r1, [r4, #8]
 800b2da:	4b09      	ldr	r3, [pc, #36]	@ (800b300 <cleanup_stdio+0x38>)
 800b2dc:	4299      	cmp	r1, r3
 800b2de:	d002      	beq.n	800b2e6 <cleanup_stdio+0x1e>
 800b2e0:	4620      	mov	r0, r4
 800b2e2:	f002 fbc9 	bl	800da78 <_fflush_r>
 800b2e6:	68e1      	ldr	r1, [r4, #12]
 800b2e8:	4b06      	ldr	r3, [pc, #24]	@ (800b304 <cleanup_stdio+0x3c>)
 800b2ea:	4299      	cmp	r1, r3
 800b2ec:	d004      	beq.n	800b2f8 <cleanup_stdio+0x30>
 800b2ee:	4620      	mov	r0, r4
 800b2f0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b2f4:	f002 bbc0 	b.w	800da78 <_fflush_r>
 800b2f8:	bd10      	pop	{r4, pc}
 800b2fa:	bf00      	nop
 800b2fc:	240004e8 	.word	0x240004e8
 800b300:	24000550 	.word	0x24000550
 800b304:	240005b8 	.word	0x240005b8

0800b308 <global_stdio_init.part.0>:
 800b308:	b510      	push	{r4, lr}
 800b30a:	4b0b      	ldr	r3, [pc, #44]	@ (800b338 <global_stdio_init.part.0+0x30>)
 800b30c:	4c0b      	ldr	r4, [pc, #44]	@ (800b33c <global_stdio_init.part.0+0x34>)
 800b30e:	4a0c      	ldr	r2, [pc, #48]	@ (800b340 <global_stdio_init.part.0+0x38>)
 800b310:	601a      	str	r2, [r3, #0]
 800b312:	4620      	mov	r0, r4
 800b314:	2200      	movs	r2, #0
 800b316:	2104      	movs	r1, #4
 800b318:	f7ff ff94 	bl	800b244 <std>
 800b31c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800b320:	2201      	movs	r2, #1
 800b322:	2109      	movs	r1, #9
 800b324:	f7ff ff8e 	bl	800b244 <std>
 800b328:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800b32c:	2202      	movs	r2, #2
 800b32e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b332:	2112      	movs	r1, #18
 800b334:	f7ff bf86 	b.w	800b244 <std>
 800b338:	24000620 	.word	0x24000620
 800b33c:	240004e8 	.word	0x240004e8
 800b340:	0800b2b1 	.word	0x0800b2b1

0800b344 <__sfp_lock_acquire>:
 800b344:	4801      	ldr	r0, [pc, #4]	@ (800b34c <__sfp_lock_acquire+0x8>)
 800b346:	f000 bad2 	b.w	800b8ee <__retarget_lock_acquire_recursive>
 800b34a:	bf00      	nop
 800b34c:	24000629 	.word	0x24000629

0800b350 <__sfp_lock_release>:
 800b350:	4801      	ldr	r0, [pc, #4]	@ (800b358 <__sfp_lock_release+0x8>)
 800b352:	f000 bacd 	b.w	800b8f0 <__retarget_lock_release_recursive>
 800b356:	bf00      	nop
 800b358:	24000629 	.word	0x24000629

0800b35c <__sinit>:
 800b35c:	b510      	push	{r4, lr}
 800b35e:	4604      	mov	r4, r0
 800b360:	f7ff fff0 	bl	800b344 <__sfp_lock_acquire>
 800b364:	6a23      	ldr	r3, [r4, #32]
 800b366:	b11b      	cbz	r3, 800b370 <__sinit+0x14>
 800b368:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b36c:	f7ff bff0 	b.w	800b350 <__sfp_lock_release>
 800b370:	4b04      	ldr	r3, [pc, #16]	@ (800b384 <__sinit+0x28>)
 800b372:	6223      	str	r3, [r4, #32]
 800b374:	4b04      	ldr	r3, [pc, #16]	@ (800b388 <__sinit+0x2c>)
 800b376:	681b      	ldr	r3, [r3, #0]
 800b378:	2b00      	cmp	r3, #0
 800b37a:	d1f5      	bne.n	800b368 <__sinit+0xc>
 800b37c:	f7ff ffc4 	bl	800b308 <global_stdio_init.part.0>
 800b380:	e7f2      	b.n	800b368 <__sinit+0xc>
 800b382:	bf00      	nop
 800b384:	0800b2c9 	.word	0x0800b2c9
 800b388:	24000620 	.word	0x24000620

0800b38c <_fwalk_sglue>:
 800b38c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b390:	4607      	mov	r7, r0
 800b392:	4688      	mov	r8, r1
 800b394:	4614      	mov	r4, r2
 800b396:	2600      	movs	r6, #0
 800b398:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800b39c:	f1b9 0901 	subs.w	r9, r9, #1
 800b3a0:	d505      	bpl.n	800b3ae <_fwalk_sglue+0x22>
 800b3a2:	6824      	ldr	r4, [r4, #0]
 800b3a4:	2c00      	cmp	r4, #0
 800b3a6:	d1f7      	bne.n	800b398 <_fwalk_sglue+0xc>
 800b3a8:	4630      	mov	r0, r6
 800b3aa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b3ae:	89ab      	ldrh	r3, [r5, #12]
 800b3b0:	2b01      	cmp	r3, #1
 800b3b2:	d907      	bls.n	800b3c4 <_fwalk_sglue+0x38>
 800b3b4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800b3b8:	3301      	adds	r3, #1
 800b3ba:	d003      	beq.n	800b3c4 <_fwalk_sglue+0x38>
 800b3bc:	4629      	mov	r1, r5
 800b3be:	4638      	mov	r0, r7
 800b3c0:	47c0      	blx	r8
 800b3c2:	4306      	orrs	r6, r0
 800b3c4:	3568      	adds	r5, #104	@ 0x68
 800b3c6:	e7e9      	b.n	800b39c <_fwalk_sglue+0x10>

0800b3c8 <iprintf>:
 800b3c8:	b40f      	push	{r0, r1, r2, r3}
 800b3ca:	b507      	push	{r0, r1, r2, lr}
 800b3cc:	4906      	ldr	r1, [pc, #24]	@ (800b3e8 <iprintf+0x20>)
 800b3ce:	ab04      	add	r3, sp, #16
 800b3d0:	6808      	ldr	r0, [r1, #0]
 800b3d2:	f853 2b04 	ldr.w	r2, [r3], #4
 800b3d6:	6881      	ldr	r1, [r0, #8]
 800b3d8:	9301      	str	r3, [sp, #4]
 800b3da:	f002 f9b1 	bl	800d740 <_vfiprintf_r>
 800b3de:	b003      	add	sp, #12
 800b3e0:	f85d eb04 	ldr.w	lr, [sp], #4
 800b3e4:	b004      	add	sp, #16
 800b3e6:	4770      	bx	lr
 800b3e8:	24000188 	.word	0x24000188

0800b3ec <putchar>:
 800b3ec:	4b02      	ldr	r3, [pc, #8]	@ (800b3f8 <putchar+0xc>)
 800b3ee:	4601      	mov	r1, r0
 800b3f0:	6818      	ldr	r0, [r3, #0]
 800b3f2:	6882      	ldr	r2, [r0, #8]
 800b3f4:	f002 bbca 	b.w	800db8c <_putc_r>
 800b3f8:	24000188 	.word	0x24000188

0800b3fc <_puts_r>:
 800b3fc:	6a03      	ldr	r3, [r0, #32]
 800b3fe:	b570      	push	{r4, r5, r6, lr}
 800b400:	6884      	ldr	r4, [r0, #8]
 800b402:	4605      	mov	r5, r0
 800b404:	460e      	mov	r6, r1
 800b406:	b90b      	cbnz	r3, 800b40c <_puts_r+0x10>
 800b408:	f7ff ffa8 	bl	800b35c <__sinit>
 800b40c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800b40e:	07db      	lsls	r3, r3, #31
 800b410:	d405      	bmi.n	800b41e <_puts_r+0x22>
 800b412:	89a3      	ldrh	r3, [r4, #12]
 800b414:	0598      	lsls	r0, r3, #22
 800b416:	d402      	bmi.n	800b41e <_puts_r+0x22>
 800b418:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800b41a:	f000 fa68 	bl	800b8ee <__retarget_lock_acquire_recursive>
 800b41e:	89a3      	ldrh	r3, [r4, #12]
 800b420:	0719      	lsls	r1, r3, #28
 800b422:	d502      	bpl.n	800b42a <_puts_r+0x2e>
 800b424:	6923      	ldr	r3, [r4, #16]
 800b426:	2b00      	cmp	r3, #0
 800b428:	d135      	bne.n	800b496 <_puts_r+0x9a>
 800b42a:	4621      	mov	r1, r4
 800b42c:	4628      	mov	r0, r5
 800b42e:	f000 f979 	bl	800b724 <__swsetup_r>
 800b432:	b380      	cbz	r0, 800b496 <_puts_r+0x9a>
 800b434:	f04f 35ff 	mov.w	r5, #4294967295
 800b438:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800b43a:	07da      	lsls	r2, r3, #31
 800b43c:	d405      	bmi.n	800b44a <_puts_r+0x4e>
 800b43e:	89a3      	ldrh	r3, [r4, #12]
 800b440:	059b      	lsls	r3, r3, #22
 800b442:	d402      	bmi.n	800b44a <_puts_r+0x4e>
 800b444:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800b446:	f000 fa53 	bl	800b8f0 <__retarget_lock_release_recursive>
 800b44a:	4628      	mov	r0, r5
 800b44c:	bd70      	pop	{r4, r5, r6, pc}
 800b44e:	2b00      	cmp	r3, #0
 800b450:	da04      	bge.n	800b45c <_puts_r+0x60>
 800b452:	69a2      	ldr	r2, [r4, #24]
 800b454:	429a      	cmp	r2, r3
 800b456:	dc17      	bgt.n	800b488 <_puts_r+0x8c>
 800b458:	290a      	cmp	r1, #10
 800b45a:	d015      	beq.n	800b488 <_puts_r+0x8c>
 800b45c:	6823      	ldr	r3, [r4, #0]
 800b45e:	1c5a      	adds	r2, r3, #1
 800b460:	6022      	str	r2, [r4, #0]
 800b462:	7019      	strb	r1, [r3, #0]
 800b464:	68a3      	ldr	r3, [r4, #8]
 800b466:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800b46a:	3b01      	subs	r3, #1
 800b46c:	60a3      	str	r3, [r4, #8]
 800b46e:	2900      	cmp	r1, #0
 800b470:	d1ed      	bne.n	800b44e <_puts_r+0x52>
 800b472:	2b00      	cmp	r3, #0
 800b474:	da11      	bge.n	800b49a <_puts_r+0x9e>
 800b476:	4622      	mov	r2, r4
 800b478:	210a      	movs	r1, #10
 800b47a:	4628      	mov	r0, r5
 800b47c:	f000 f913 	bl	800b6a6 <__swbuf_r>
 800b480:	3001      	adds	r0, #1
 800b482:	d0d7      	beq.n	800b434 <_puts_r+0x38>
 800b484:	250a      	movs	r5, #10
 800b486:	e7d7      	b.n	800b438 <_puts_r+0x3c>
 800b488:	4622      	mov	r2, r4
 800b48a:	4628      	mov	r0, r5
 800b48c:	f000 f90b 	bl	800b6a6 <__swbuf_r>
 800b490:	3001      	adds	r0, #1
 800b492:	d1e7      	bne.n	800b464 <_puts_r+0x68>
 800b494:	e7ce      	b.n	800b434 <_puts_r+0x38>
 800b496:	3e01      	subs	r6, #1
 800b498:	e7e4      	b.n	800b464 <_puts_r+0x68>
 800b49a:	6823      	ldr	r3, [r4, #0]
 800b49c:	1c5a      	adds	r2, r3, #1
 800b49e:	6022      	str	r2, [r4, #0]
 800b4a0:	220a      	movs	r2, #10
 800b4a2:	701a      	strb	r2, [r3, #0]
 800b4a4:	e7ee      	b.n	800b484 <_puts_r+0x88>
	...

0800b4a8 <puts>:
 800b4a8:	4b02      	ldr	r3, [pc, #8]	@ (800b4b4 <puts+0xc>)
 800b4aa:	4601      	mov	r1, r0
 800b4ac:	6818      	ldr	r0, [r3, #0]
 800b4ae:	f7ff bfa5 	b.w	800b3fc <_puts_r>
 800b4b2:	bf00      	nop
 800b4b4:	24000188 	.word	0x24000188

0800b4b8 <setvbuf>:
 800b4b8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800b4bc:	461d      	mov	r5, r3
 800b4be:	4b57      	ldr	r3, [pc, #348]	@ (800b61c <setvbuf+0x164>)
 800b4c0:	681f      	ldr	r7, [r3, #0]
 800b4c2:	4604      	mov	r4, r0
 800b4c4:	460e      	mov	r6, r1
 800b4c6:	4690      	mov	r8, r2
 800b4c8:	b127      	cbz	r7, 800b4d4 <setvbuf+0x1c>
 800b4ca:	6a3b      	ldr	r3, [r7, #32]
 800b4cc:	b913      	cbnz	r3, 800b4d4 <setvbuf+0x1c>
 800b4ce:	4638      	mov	r0, r7
 800b4d0:	f7ff ff44 	bl	800b35c <__sinit>
 800b4d4:	f1b8 0f02 	cmp.w	r8, #2
 800b4d8:	d006      	beq.n	800b4e8 <setvbuf+0x30>
 800b4da:	f1b8 0f01 	cmp.w	r8, #1
 800b4de:	f200 809a 	bhi.w	800b616 <setvbuf+0x15e>
 800b4e2:	2d00      	cmp	r5, #0
 800b4e4:	f2c0 8097 	blt.w	800b616 <setvbuf+0x15e>
 800b4e8:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800b4ea:	07d9      	lsls	r1, r3, #31
 800b4ec:	d405      	bmi.n	800b4fa <setvbuf+0x42>
 800b4ee:	89a3      	ldrh	r3, [r4, #12]
 800b4f0:	059a      	lsls	r2, r3, #22
 800b4f2:	d402      	bmi.n	800b4fa <setvbuf+0x42>
 800b4f4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800b4f6:	f000 f9fa 	bl	800b8ee <__retarget_lock_acquire_recursive>
 800b4fa:	4621      	mov	r1, r4
 800b4fc:	4638      	mov	r0, r7
 800b4fe:	f002 fabb 	bl	800da78 <_fflush_r>
 800b502:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800b504:	b141      	cbz	r1, 800b518 <setvbuf+0x60>
 800b506:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800b50a:	4299      	cmp	r1, r3
 800b50c:	d002      	beq.n	800b514 <setvbuf+0x5c>
 800b50e:	4638      	mov	r0, r7
 800b510:	f000 ffec 	bl	800c4ec <_free_r>
 800b514:	2300      	movs	r3, #0
 800b516:	6363      	str	r3, [r4, #52]	@ 0x34
 800b518:	2300      	movs	r3, #0
 800b51a:	61a3      	str	r3, [r4, #24]
 800b51c:	6063      	str	r3, [r4, #4]
 800b51e:	89a3      	ldrh	r3, [r4, #12]
 800b520:	061b      	lsls	r3, r3, #24
 800b522:	d503      	bpl.n	800b52c <setvbuf+0x74>
 800b524:	6921      	ldr	r1, [r4, #16]
 800b526:	4638      	mov	r0, r7
 800b528:	f000 ffe0 	bl	800c4ec <_free_r>
 800b52c:	89a3      	ldrh	r3, [r4, #12]
 800b52e:	f423 634a 	bic.w	r3, r3, #3232	@ 0xca0
 800b532:	f023 0303 	bic.w	r3, r3, #3
 800b536:	f1b8 0f02 	cmp.w	r8, #2
 800b53a:	81a3      	strh	r3, [r4, #12]
 800b53c:	d061      	beq.n	800b602 <setvbuf+0x14a>
 800b53e:	ab01      	add	r3, sp, #4
 800b540:	466a      	mov	r2, sp
 800b542:	4621      	mov	r1, r4
 800b544:	4638      	mov	r0, r7
 800b546:	f002 fabf 	bl	800dac8 <__swhatbuf_r>
 800b54a:	89a3      	ldrh	r3, [r4, #12]
 800b54c:	4318      	orrs	r0, r3
 800b54e:	81a0      	strh	r0, [r4, #12]
 800b550:	bb2d      	cbnz	r5, 800b59e <setvbuf+0xe6>
 800b552:	9d00      	ldr	r5, [sp, #0]
 800b554:	4628      	mov	r0, r5
 800b556:	f001 fb4d 	bl	800cbf4 <malloc>
 800b55a:	4606      	mov	r6, r0
 800b55c:	2800      	cmp	r0, #0
 800b55e:	d152      	bne.n	800b606 <setvbuf+0x14e>
 800b560:	f8dd 9000 	ldr.w	r9, [sp]
 800b564:	45a9      	cmp	r9, r5
 800b566:	d140      	bne.n	800b5ea <setvbuf+0x132>
 800b568:	f04f 35ff 	mov.w	r5, #4294967295
 800b56c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b570:	f043 0202 	orr.w	r2, r3, #2
 800b574:	81a2      	strh	r2, [r4, #12]
 800b576:	2200      	movs	r2, #0
 800b578:	60a2      	str	r2, [r4, #8]
 800b57a:	f104 0247 	add.w	r2, r4, #71	@ 0x47
 800b57e:	6022      	str	r2, [r4, #0]
 800b580:	6122      	str	r2, [r4, #16]
 800b582:	2201      	movs	r2, #1
 800b584:	6162      	str	r2, [r4, #20]
 800b586:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800b588:	07d6      	lsls	r6, r2, #31
 800b58a:	d404      	bmi.n	800b596 <setvbuf+0xde>
 800b58c:	0598      	lsls	r0, r3, #22
 800b58e:	d402      	bmi.n	800b596 <setvbuf+0xde>
 800b590:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800b592:	f000 f9ad 	bl	800b8f0 <__retarget_lock_release_recursive>
 800b596:	4628      	mov	r0, r5
 800b598:	b003      	add	sp, #12
 800b59a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b59e:	2e00      	cmp	r6, #0
 800b5a0:	d0d8      	beq.n	800b554 <setvbuf+0x9c>
 800b5a2:	6a3b      	ldr	r3, [r7, #32]
 800b5a4:	b913      	cbnz	r3, 800b5ac <setvbuf+0xf4>
 800b5a6:	4638      	mov	r0, r7
 800b5a8:	f7ff fed8 	bl	800b35c <__sinit>
 800b5ac:	f1b8 0f01 	cmp.w	r8, #1
 800b5b0:	bf08      	it	eq
 800b5b2:	89a3      	ldrheq	r3, [r4, #12]
 800b5b4:	6026      	str	r6, [r4, #0]
 800b5b6:	bf04      	itt	eq
 800b5b8:	f043 0301 	orreq.w	r3, r3, #1
 800b5bc:	81a3      	strheq	r3, [r4, #12]
 800b5be:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b5c2:	f013 0208 	ands.w	r2, r3, #8
 800b5c6:	e9c4 6504 	strd	r6, r5, [r4, #16]
 800b5ca:	d01e      	beq.n	800b60a <setvbuf+0x152>
 800b5cc:	07d9      	lsls	r1, r3, #31
 800b5ce:	bf41      	itttt	mi
 800b5d0:	2200      	movmi	r2, #0
 800b5d2:	426d      	negmi	r5, r5
 800b5d4:	60a2      	strmi	r2, [r4, #8]
 800b5d6:	61a5      	strmi	r5, [r4, #24]
 800b5d8:	bf58      	it	pl
 800b5da:	60a5      	strpl	r5, [r4, #8]
 800b5dc:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800b5de:	07d2      	lsls	r2, r2, #31
 800b5e0:	d401      	bmi.n	800b5e6 <setvbuf+0x12e>
 800b5e2:	059b      	lsls	r3, r3, #22
 800b5e4:	d513      	bpl.n	800b60e <setvbuf+0x156>
 800b5e6:	2500      	movs	r5, #0
 800b5e8:	e7d5      	b.n	800b596 <setvbuf+0xde>
 800b5ea:	4648      	mov	r0, r9
 800b5ec:	f001 fb02 	bl	800cbf4 <malloc>
 800b5f0:	4606      	mov	r6, r0
 800b5f2:	2800      	cmp	r0, #0
 800b5f4:	d0b8      	beq.n	800b568 <setvbuf+0xb0>
 800b5f6:	89a3      	ldrh	r3, [r4, #12]
 800b5f8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b5fc:	81a3      	strh	r3, [r4, #12]
 800b5fe:	464d      	mov	r5, r9
 800b600:	e7cf      	b.n	800b5a2 <setvbuf+0xea>
 800b602:	2500      	movs	r5, #0
 800b604:	e7b2      	b.n	800b56c <setvbuf+0xb4>
 800b606:	46a9      	mov	r9, r5
 800b608:	e7f5      	b.n	800b5f6 <setvbuf+0x13e>
 800b60a:	60a2      	str	r2, [r4, #8]
 800b60c:	e7e6      	b.n	800b5dc <setvbuf+0x124>
 800b60e:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800b610:	f000 f96e 	bl	800b8f0 <__retarget_lock_release_recursive>
 800b614:	e7e7      	b.n	800b5e6 <setvbuf+0x12e>
 800b616:	f04f 35ff 	mov.w	r5, #4294967295
 800b61a:	e7bc      	b.n	800b596 <setvbuf+0xde>
 800b61c:	24000188 	.word	0x24000188

0800b620 <__sread>:
 800b620:	b510      	push	{r4, lr}
 800b622:	460c      	mov	r4, r1
 800b624:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b628:	f000 f912 	bl	800b850 <_read_r>
 800b62c:	2800      	cmp	r0, #0
 800b62e:	bfab      	itete	ge
 800b630:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800b632:	89a3      	ldrhlt	r3, [r4, #12]
 800b634:	181b      	addge	r3, r3, r0
 800b636:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800b63a:	bfac      	ite	ge
 800b63c:	6563      	strge	r3, [r4, #84]	@ 0x54
 800b63e:	81a3      	strhlt	r3, [r4, #12]
 800b640:	bd10      	pop	{r4, pc}

0800b642 <__swrite>:
 800b642:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b646:	461f      	mov	r7, r3
 800b648:	898b      	ldrh	r3, [r1, #12]
 800b64a:	05db      	lsls	r3, r3, #23
 800b64c:	4605      	mov	r5, r0
 800b64e:	460c      	mov	r4, r1
 800b650:	4616      	mov	r6, r2
 800b652:	d505      	bpl.n	800b660 <__swrite+0x1e>
 800b654:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b658:	2302      	movs	r3, #2
 800b65a:	2200      	movs	r2, #0
 800b65c:	f000 f8e6 	bl	800b82c <_lseek_r>
 800b660:	89a3      	ldrh	r3, [r4, #12]
 800b662:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b666:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800b66a:	81a3      	strh	r3, [r4, #12]
 800b66c:	4632      	mov	r2, r6
 800b66e:	463b      	mov	r3, r7
 800b670:	4628      	mov	r0, r5
 800b672:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b676:	f000 b8fd 	b.w	800b874 <_write_r>

0800b67a <__sseek>:
 800b67a:	b510      	push	{r4, lr}
 800b67c:	460c      	mov	r4, r1
 800b67e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b682:	f000 f8d3 	bl	800b82c <_lseek_r>
 800b686:	1c43      	adds	r3, r0, #1
 800b688:	89a3      	ldrh	r3, [r4, #12]
 800b68a:	bf15      	itete	ne
 800b68c:	6560      	strne	r0, [r4, #84]	@ 0x54
 800b68e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800b692:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800b696:	81a3      	strheq	r3, [r4, #12]
 800b698:	bf18      	it	ne
 800b69a:	81a3      	strhne	r3, [r4, #12]
 800b69c:	bd10      	pop	{r4, pc}

0800b69e <__sclose>:
 800b69e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b6a2:	f000 b8b3 	b.w	800b80c <_close_r>

0800b6a6 <__swbuf_r>:
 800b6a6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b6a8:	460e      	mov	r6, r1
 800b6aa:	4614      	mov	r4, r2
 800b6ac:	4605      	mov	r5, r0
 800b6ae:	b118      	cbz	r0, 800b6b8 <__swbuf_r+0x12>
 800b6b0:	6a03      	ldr	r3, [r0, #32]
 800b6b2:	b90b      	cbnz	r3, 800b6b8 <__swbuf_r+0x12>
 800b6b4:	f7ff fe52 	bl	800b35c <__sinit>
 800b6b8:	69a3      	ldr	r3, [r4, #24]
 800b6ba:	60a3      	str	r3, [r4, #8]
 800b6bc:	89a3      	ldrh	r3, [r4, #12]
 800b6be:	071a      	lsls	r2, r3, #28
 800b6c0:	d501      	bpl.n	800b6c6 <__swbuf_r+0x20>
 800b6c2:	6923      	ldr	r3, [r4, #16]
 800b6c4:	b943      	cbnz	r3, 800b6d8 <__swbuf_r+0x32>
 800b6c6:	4621      	mov	r1, r4
 800b6c8:	4628      	mov	r0, r5
 800b6ca:	f000 f82b 	bl	800b724 <__swsetup_r>
 800b6ce:	b118      	cbz	r0, 800b6d8 <__swbuf_r+0x32>
 800b6d0:	f04f 37ff 	mov.w	r7, #4294967295
 800b6d4:	4638      	mov	r0, r7
 800b6d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b6d8:	6823      	ldr	r3, [r4, #0]
 800b6da:	6922      	ldr	r2, [r4, #16]
 800b6dc:	1a98      	subs	r0, r3, r2
 800b6de:	6963      	ldr	r3, [r4, #20]
 800b6e0:	b2f6      	uxtb	r6, r6
 800b6e2:	4283      	cmp	r3, r0
 800b6e4:	4637      	mov	r7, r6
 800b6e6:	dc05      	bgt.n	800b6f4 <__swbuf_r+0x4e>
 800b6e8:	4621      	mov	r1, r4
 800b6ea:	4628      	mov	r0, r5
 800b6ec:	f002 f9c4 	bl	800da78 <_fflush_r>
 800b6f0:	2800      	cmp	r0, #0
 800b6f2:	d1ed      	bne.n	800b6d0 <__swbuf_r+0x2a>
 800b6f4:	68a3      	ldr	r3, [r4, #8]
 800b6f6:	3b01      	subs	r3, #1
 800b6f8:	60a3      	str	r3, [r4, #8]
 800b6fa:	6823      	ldr	r3, [r4, #0]
 800b6fc:	1c5a      	adds	r2, r3, #1
 800b6fe:	6022      	str	r2, [r4, #0]
 800b700:	701e      	strb	r6, [r3, #0]
 800b702:	6962      	ldr	r2, [r4, #20]
 800b704:	1c43      	adds	r3, r0, #1
 800b706:	429a      	cmp	r2, r3
 800b708:	d004      	beq.n	800b714 <__swbuf_r+0x6e>
 800b70a:	89a3      	ldrh	r3, [r4, #12]
 800b70c:	07db      	lsls	r3, r3, #31
 800b70e:	d5e1      	bpl.n	800b6d4 <__swbuf_r+0x2e>
 800b710:	2e0a      	cmp	r6, #10
 800b712:	d1df      	bne.n	800b6d4 <__swbuf_r+0x2e>
 800b714:	4621      	mov	r1, r4
 800b716:	4628      	mov	r0, r5
 800b718:	f002 f9ae 	bl	800da78 <_fflush_r>
 800b71c:	2800      	cmp	r0, #0
 800b71e:	d0d9      	beq.n	800b6d4 <__swbuf_r+0x2e>
 800b720:	e7d6      	b.n	800b6d0 <__swbuf_r+0x2a>
	...

0800b724 <__swsetup_r>:
 800b724:	b538      	push	{r3, r4, r5, lr}
 800b726:	4b29      	ldr	r3, [pc, #164]	@ (800b7cc <__swsetup_r+0xa8>)
 800b728:	4605      	mov	r5, r0
 800b72a:	6818      	ldr	r0, [r3, #0]
 800b72c:	460c      	mov	r4, r1
 800b72e:	b118      	cbz	r0, 800b738 <__swsetup_r+0x14>
 800b730:	6a03      	ldr	r3, [r0, #32]
 800b732:	b90b      	cbnz	r3, 800b738 <__swsetup_r+0x14>
 800b734:	f7ff fe12 	bl	800b35c <__sinit>
 800b738:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b73c:	0719      	lsls	r1, r3, #28
 800b73e:	d422      	bmi.n	800b786 <__swsetup_r+0x62>
 800b740:	06da      	lsls	r2, r3, #27
 800b742:	d407      	bmi.n	800b754 <__swsetup_r+0x30>
 800b744:	2209      	movs	r2, #9
 800b746:	602a      	str	r2, [r5, #0]
 800b748:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b74c:	81a3      	strh	r3, [r4, #12]
 800b74e:	f04f 30ff 	mov.w	r0, #4294967295
 800b752:	e033      	b.n	800b7bc <__swsetup_r+0x98>
 800b754:	0758      	lsls	r0, r3, #29
 800b756:	d512      	bpl.n	800b77e <__swsetup_r+0x5a>
 800b758:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800b75a:	b141      	cbz	r1, 800b76e <__swsetup_r+0x4a>
 800b75c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800b760:	4299      	cmp	r1, r3
 800b762:	d002      	beq.n	800b76a <__swsetup_r+0x46>
 800b764:	4628      	mov	r0, r5
 800b766:	f000 fec1 	bl	800c4ec <_free_r>
 800b76a:	2300      	movs	r3, #0
 800b76c:	6363      	str	r3, [r4, #52]	@ 0x34
 800b76e:	89a3      	ldrh	r3, [r4, #12]
 800b770:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800b774:	81a3      	strh	r3, [r4, #12]
 800b776:	2300      	movs	r3, #0
 800b778:	6063      	str	r3, [r4, #4]
 800b77a:	6923      	ldr	r3, [r4, #16]
 800b77c:	6023      	str	r3, [r4, #0]
 800b77e:	89a3      	ldrh	r3, [r4, #12]
 800b780:	f043 0308 	orr.w	r3, r3, #8
 800b784:	81a3      	strh	r3, [r4, #12]
 800b786:	6923      	ldr	r3, [r4, #16]
 800b788:	b94b      	cbnz	r3, 800b79e <__swsetup_r+0x7a>
 800b78a:	89a3      	ldrh	r3, [r4, #12]
 800b78c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800b790:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b794:	d003      	beq.n	800b79e <__swsetup_r+0x7a>
 800b796:	4621      	mov	r1, r4
 800b798:	4628      	mov	r0, r5
 800b79a:	f002 f9bb 	bl	800db14 <__smakebuf_r>
 800b79e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b7a2:	f013 0201 	ands.w	r2, r3, #1
 800b7a6:	d00a      	beq.n	800b7be <__swsetup_r+0x9a>
 800b7a8:	2200      	movs	r2, #0
 800b7aa:	60a2      	str	r2, [r4, #8]
 800b7ac:	6962      	ldr	r2, [r4, #20]
 800b7ae:	4252      	negs	r2, r2
 800b7b0:	61a2      	str	r2, [r4, #24]
 800b7b2:	6922      	ldr	r2, [r4, #16]
 800b7b4:	b942      	cbnz	r2, 800b7c8 <__swsetup_r+0xa4>
 800b7b6:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800b7ba:	d1c5      	bne.n	800b748 <__swsetup_r+0x24>
 800b7bc:	bd38      	pop	{r3, r4, r5, pc}
 800b7be:	0799      	lsls	r1, r3, #30
 800b7c0:	bf58      	it	pl
 800b7c2:	6962      	ldrpl	r2, [r4, #20]
 800b7c4:	60a2      	str	r2, [r4, #8]
 800b7c6:	e7f4      	b.n	800b7b2 <__swsetup_r+0x8e>
 800b7c8:	2000      	movs	r0, #0
 800b7ca:	e7f7      	b.n	800b7bc <__swsetup_r+0x98>
 800b7cc:	24000188 	.word	0x24000188

0800b7d0 <memset>:
 800b7d0:	4402      	add	r2, r0
 800b7d2:	4603      	mov	r3, r0
 800b7d4:	4293      	cmp	r3, r2
 800b7d6:	d100      	bne.n	800b7da <memset+0xa>
 800b7d8:	4770      	bx	lr
 800b7da:	f803 1b01 	strb.w	r1, [r3], #1
 800b7de:	e7f9      	b.n	800b7d4 <memset+0x4>

0800b7e0 <strncmp>:
 800b7e0:	b510      	push	{r4, lr}
 800b7e2:	b16a      	cbz	r2, 800b800 <strncmp+0x20>
 800b7e4:	3901      	subs	r1, #1
 800b7e6:	1884      	adds	r4, r0, r2
 800b7e8:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b7ec:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800b7f0:	429a      	cmp	r2, r3
 800b7f2:	d103      	bne.n	800b7fc <strncmp+0x1c>
 800b7f4:	42a0      	cmp	r0, r4
 800b7f6:	d001      	beq.n	800b7fc <strncmp+0x1c>
 800b7f8:	2a00      	cmp	r2, #0
 800b7fa:	d1f5      	bne.n	800b7e8 <strncmp+0x8>
 800b7fc:	1ad0      	subs	r0, r2, r3
 800b7fe:	bd10      	pop	{r4, pc}
 800b800:	4610      	mov	r0, r2
 800b802:	e7fc      	b.n	800b7fe <strncmp+0x1e>

0800b804 <_localeconv_r>:
 800b804:	4800      	ldr	r0, [pc, #0]	@ (800b808 <_localeconv_r+0x4>)
 800b806:	4770      	bx	lr
 800b808:	2400010c 	.word	0x2400010c

0800b80c <_close_r>:
 800b80c:	b538      	push	{r3, r4, r5, lr}
 800b80e:	4d06      	ldr	r5, [pc, #24]	@ (800b828 <_close_r+0x1c>)
 800b810:	2300      	movs	r3, #0
 800b812:	4604      	mov	r4, r0
 800b814:	4608      	mov	r0, r1
 800b816:	602b      	str	r3, [r5, #0]
 800b818:	f7f8 fccd 	bl	80041b6 <_close>
 800b81c:	1c43      	adds	r3, r0, #1
 800b81e:	d102      	bne.n	800b826 <_close_r+0x1a>
 800b820:	682b      	ldr	r3, [r5, #0]
 800b822:	b103      	cbz	r3, 800b826 <_close_r+0x1a>
 800b824:	6023      	str	r3, [r4, #0]
 800b826:	bd38      	pop	{r3, r4, r5, pc}
 800b828:	24000624 	.word	0x24000624

0800b82c <_lseek_r>:
 800b82c:	b538      	push	{r3, r4, r5, lr}
 800b82e:	4d07      	ldr	r5, [pc, #28]	@ (800b84c <_lseek_r+0x20>)
 800b830:	4604      	mov	r4, r0
 800b832:	4608      	mov	r0, r1
 800b834:	4611      	mov	r1, r2
 800b836:	2200      	movs	r2, #0
 800b838:	602a      	str	r2, [r5, #0]
 800b83a:	461a      	mov	r2, r3
 800b83c:	f7f8 fce2 	bl	8004204 <_lseek>
 800b840:	1c43      	adds	r3, r0, #1
 800b842:	d102      	bne.n	800b84a <_lseek_r+0x1e>
 800b844:	682b      	ldr	r3, [r5, #0]
 800b846:	b103      	cbz	r3, 800b84a <_lseek_r+0x1e>
 800b848:	6023      	str	r3, [r4, #0]
 800b84a:	bd38      	pop	{r3, r4, r5, pc}
 800b84c:	24000624 	.word	0x24000624

0800b850 <_read_r>:
 800b850:	b538      	push	{r3, r4, r5, lr}
 800b852:	4d07      	ldr	r5, [pc, #28]	@ (800b870 <_read_r+0x20>)
 800b854:	4604      	mov	r4, r0
 800b856:	4608      	mov	r0, r1
 800b858:	4611      	mov	r1, r2
 800b85a:	2200      	movs	r2, #0
 800b85c:	602a      	str	r2, [r5, #0]
 800b85e:	461a      	mov	r2, r3
 800b860:	f7f8 fc8c 	bl	800417c <_read>
 800b864:	1c43      	adds	r3, r0, #1
 800b866:	d102      	bne.n	800b86e <_read_r+0x1e>
 800b868:	682b      	ldr	r3, [r5, #0]
 800b86a:	b103      	cbz	r3, 800b86e <_read_r+0x1e>
 800b86c:	6023      	str	r3, [r4, #0]
 800b86e:	bd38      	pop	{r3, r4, r5, pc}
 800b870:	24000624 	.word	0x24000624

0800b874 <_write_r>:
 800b874:	b538      	push	{r3, r4, r5, lr}
 800b876:	4d07      	ldr	r5, [pc, #28]	@ (800b894 <_write_r+0x20>)
 800b878:	4604      	mov	r4, r0
 800b87a:	4608      	mov	r0, r1
 800b87c:	4611      	mov	r1, r2
 800b87e:	2200      	movs	r2, #0
 800b880:	602a      	str	r2, [r5, #0]
 800b882:	461a      	mov	r2, r3
 800b884:	f7f8 fa7a 	bl	8003d7c <_write>
 800b888:	1c43      	adds	r3, r0, #1
 800b88a:	d102      	bne.n	800b892 <_write_r+0x1e>
 800b88c:	682b      	ldr	r3, [r5, #0]
 800b88e:	b103      	cbz	r3, 800b892 <_write_r+0x1e>
 800b890:	6023      	str	r3, [r4, #0]
 800b892:	bd38      	pop	{r3, r4, r5, pc}
 800b894:	24000624 	.word	0x24000624

0800b898 <__errno>:
 800b898:	4b01      	ldr	r3, [pc, #4]	@ (800b8a0 <__errno+0x8>)
 800b89a:	6818      	ldr	r0, [r3, #0]
 800b89c:	4770      	bx	lr
 800b89e:	bf00      	nop
 800b8a0:	24000188 	.word	0x24000188

0800b8a4 <__libc_init_array>:
 800b8a4:	b570      	push	{r4, r5, r6, lr}
 800b8a6:	4d0d      	ldr	r5, [pc, #52]	@ (800b8dc <__libc_init_array+0x38>)
 800b8a8:	4c0d      	ldr	r4, [pc, #52]	@ (800b8e0 <__libc_init_array+0x3c>)
 800b8aa:	1b64      	subs	r4, r4, r5
 800b8ac:	10a4      	asrs	r4, r4, #2
 800b8ae:	2600      	movs	r6, #0
 800b8b0:	42a6      	cmp	r6, r4
 800b8b2:	d109      	bne.n	800b8c8 <__libc_init_array+0x24>
 800b8b4:	4d0b      	ldr	r5, [pc, #44]	@ (800b8e4 <__libc_init_array+0x40>)
 800b8b6:	4c0c      	ldr	r4, [pc, #48]	@ (800b8e8 <__libc_init_array+0x44>)
 800b8b8:	f002 fa5e 	bl	800dd78 <_init>
 800b8bc:	1b64      	subs	r4, r4, r5
 800b8be:	10a4      	asrs	r4, r4, #2
 800b8c0:	2600      	movs	r6, #0
 800b8c2:	42a6      	cmp	r6, r4
 800b8c4:	d105      	bne.n	800b8d2 <__libc_init_array+0x2e>
 800b8c6:	bd70      	pop	{r4, r5, r6, pc}
 800b8c8:	f855 3b04 	ldr.w	r3, [r5], #4
 800b8cc:	4798      	blx	r3
 800b8ce:	3601      	adds	r6, #1
 800b8d0:	e7ee      	b.n	800b8b0 <__libc_init_array+0xc>
 800b8d2:	f855 3b04 	ldr.w	r3, [r5], #4
 800b8d6:	4798      	blx	r3
 800b8d8:	3601      	adds	r6, #1
 800b8da:	e7f2      	b.n	800b8c2 <__libc_init_array+0x1e>
 800b8dc:	0800e718 	.word	0x0800e718
 800b8e0:	0800e718 	.word	0x0800e718
 800b8e4:	0800e718 	.word	0x0800e718
 800b8e8:	0800e71c 	.word	0x0800e71c

0800b8ec <__retarget_lock_init_recursive>:
 800b8ec:	4770      	bx	lr

0800b8ee <__retarget_lock_acquire_recursive>:
 800b8ee:	4770      	bx	lr

0800b8f0 <__retarget_lock_release_recursive>:
 800b8f0:	4770      	bx	lr

0800b8f2 <memcpy>:
 800b8f2:	440a      	add	r2, r1
 800b8f4:	4291      	cmp	r1, r2
 800b8f6:	f100 33ff 	add.w	r3, r0, #4294967295
 800b8fa:	d100      	bne.n	800b8fe <memcpy+0xc>
 800b8fc:	4770      	bx	lr
 800b8fe:	b510      	push	{r4, lr}
 800b900:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b904:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b908:	4291      	cmp	r1, r2
 800b90a:	d1f9      	bne.n	800b900 <memcpy+0xe>
 800b90c:	bd10      	pop	{r4, pc}
	...

0800b910 <nan>:
 800b910:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800b918 <nan+0x8>
 800b914:	4770      	bx	lr
 800b916:	bf00      	nop
 800b918:	00000000 	.word	0x00000000
 800b91c:	7ff80000 	.word	0x7ff80000

0800b920 <quorem>:
 800b920:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b924:	6903      	ldr	r3, [r0, #16]
 800b926:	690c      	ldr	r4, [r1, #16]
 800b928:	42a3      	cmp	r3, r4
 800b92a:	4607      	mov	r7, r0
 800b92c:	db7e      	blt.n	800ba2c <quorem+0x10c>
 800b92e:	3c01      	subs	r4, #1
 800b930:	f101 0814 	add.w	r8, r1, #20
 800b934:	00a3      	lsls	r3, r4, #2
 800b936:	f100 0514 	add.w	r5, r0, #20
 800b93a:	9300      	str	r3, [sp, #0]
 800b93c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800b940:	9301      	str	r3, [sp, #4]
 800b942:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800b946:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800b94a:	3301      	adds	r3, #1
 800b94c:	429a      	cmp	r2, r3
 800b94e:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800b952:	fbb2 f6f3 	udiv	r6, r2, r3
 800b956:	d32e      	bcc.n	800b9b6 <quorem+0x96>
 800b958:	f04f 0a00 	mov.w	sl, #0
 800b95c:	46c4      	mov	ip, r8
 800b95e:	46ae      	mov	lr, r5
 800b960:	46d3      	mov	fp, sl
 800b962:	f85c 3b04 	ldr.w	r3, [ip], #4
 800b966:	b298      	uxth	r0, r3
 800b968:	fb06 a000 	mla	r0, r6, r0, sl
 800b96c:	0c02      	lsrs	r2, r0, #16
 800b96e:	0c1b      	lsrs	r3, r3, #16
 800b970:	fb06 2303 	mla	r3, r6, r3, r2
 800b974:	f8de 2000 	ldr.w	r2, [lr]
 800b978:	b280      	uxth	r0, r0
 800b97a:	b292      	uxth	r2, r2
 800b97c:	1a12      	subs	r2, r2, r0
 800b97e:	445a      	add	r2, fp
 800b980:	f8de 0000 	ldr.w	r0, [lr]
 800b984:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800b988:	b29b      	uxth	r3, r3
 800b98a:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800b98e:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800b992:	b292      	uxth	r2, r2
 800b994:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800b998:	45e1      	cmp	r9, ip
 800b99a:	f84e 2b04 	str.w	r2, [lr], #4
 800b99e:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800b9a2:	d2de      	bcs.n	800b962 <quorem+0x42>
 800b9a4:	9b00      	ldr	r3, [sp, #0]
 800b9a6:	58eb      	ldr	r3, [r5, r3]
 800b9a8:	b92b      	cbnz	r3, 800b9b6 <quorem+0x96>
 800b9aa:	9b01      	ldr	r3, [sp, #4]
 800b9ac:	3b04      	subs	r3, #4
 800b9ae:	429d      	cmp	r5, r3
 800b9b0:	461a      	mov	r2, r3
 800b9b2:	d32f      	bcc.n	800ba14 <quorem+0xf4>
 800b9b4:	613c      	str	r4, [r7, #16]
 800b9b6:	4638      	mov	r0, r7
 800b9b8:	f001 fca0 	bl	800d2fc <__mcmp>
 800b9bc:	2800      	cmp	r0, #0
 800b9be:	db25      	blt.n	800ba0c <quorem+0xec>
 800b9c0:	4629      	mov	r1, r5
 800b9c2:	2000      	movs	r0, #0
 800b9c4:	f858 2b04 	ldr.w	r2, [r8], #4
 800b9c8:	f8d1 c000 	ldr.w	ip, [r1]
 800b9cc:	fa1f fe82 	uxth.w	lr, r2
 800b9d0:	fa1f f38c 	uxth.w	r3, ip
 800b9d4:	eba3 030e 	sub.w	r3, r3, lr
 800b9d8:	4403      	add	r3, r0
 800b9da:	0c12      	lsrs	r2, r2, #16
 800b9dc:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800b9e0:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800b9e4:	b29b      	uxth	r3, r3
 800b9e6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b9ea:	45c1      	cmp	r9, r8
 800b9ec:	f841 3b04 	str.w	r3, [r1], #4
 800b9f0:	ea4f 4022 	mov.w	r0, r2, asr #16
 800b9f4:	d2e6      	bcs.n	800b9c4 <quorem+0xa4>
 800b9f6:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800b9fa:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800b9fe:	b922      	cbnz	r2, 800ba0a <quorem+0xea>
 800ba00:	3b04      	subs	r3, #4
 800ba02:	429d      	cmp	r5, r3
 800ba04:	461a      	mov	r2, r3
 800ba06:	d30b      	bcc.n	800ba20 <quorem+0x100>
 800ba08:	613c      	str	r4, [r7, #16]
 800ba0a:	3601      	adds	r6, #1
 800ba0c:	4630      	mov	r0, r6
 800ba0e:	b003      	add	sp, #12
 800ba10:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ba14:	6812      	ldr	r2, [r2, #0]
 800ba16:	3b04      	subs	r3, #4
 800ba18:	2a00      	cmp	r2, #0
 800ba1a:	d1cb      	bne.n	800b9b4 <quorem+0x94>
 800ba1c:	3c01      	subs	r4, #1
 800ba1e:	e7c6      	b.n	800b9ae <quorem+0x8e>
 800ba20:	6812      	ldr	r2, [r2, #0]
 800ba22:	3b04      	subs	r3, #4
 800ba24:	2a00      	cmp	r2, #0
 800ba26:	d1ef      	bne.n	800ba08 <quorem+0xe8>
 800ba28:	3c01      	subs	r4, #1
 800ba2a:	e7ea      	b.n	800ba02 <quorem+0xe2>
 800ba2c:	2000      	movs	r0, #0
 800ba2e:	e7ee      	b.n	800ba0e <quorem+0xee>

0800ba30 <_dtoa_r>:
 800ba30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ba34:	ed2d 8b02 	vpush	{d8}
 800ba38:	69c7      	ldr	r7, [r0, #28]
 800ba3a:	b091      	sub	sp, #68	@ 0x44
 800ba3c:	ed8d 0b02 	vstr	d0, [sp, #8]
 800ba40:	ec55 4b10 	vmov	r4, r5, d0
 800ba44:	9e1c      	ldr	r6, [sp, #112]	@ 0x70
 800ba46:	9107      	str	r1, [sp, #28]
 800ba48:	4681      	mov	r9, r0
 800ba4a:	9209      	str	r2, [sp, #36]	@ 0x24
 800ba4c:	930d      	str	r3, [sp, #52]	@ 0x34
 800ba4e:	b97f      	cbnz	r7, 800ba70 <_dtoa_r+0x40>
 800ba50:	2010      	movs	r0, #16
 800ba52:	f001 f8cf 	bl	800cbf4 <malloc>
 800ba56:	4602      	mov	r2, r0
 800ba58:	f8c9 001c 	str.w	r0, [r9, #28]
 800ba5c:	b920      	cbnz	r0, 800ba68 <_dtoa_r+0x38>
 800ba5e:	4ba0      	ldr	r3, [pc, #640]	@ (800bce0 <_dtoa_r+0x2b0>)
 800ba60:	21ef      	movs	r1, #239	@ 0xef
 800ba62:	48a0      	ldr	r0, [pc, #640]	@ (800bce4 <_dtoa_r+0x2b4>)
 800ba64:	f002 f8f8 	bl	800dc58 <__assert_func>
 800ba68:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800ba6c:	6007      	str	r7, [r0, #0]
 800ba6e:	60c7      	str	r7, [r0, #12]
 800ba70:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800ba74:	6819      	ldr	r1, [r3, #0]
 800ba76:	b159      	cbz	r1, 800ba90 <_dtoa_r+0x60>
 800ba78:	685a      	ldr	r2, [r3, #4]
 800ba7a:	604a      	str	r2, [r1, #4]
 800ba7c:	2301      	movs	r3, #1
 800ba7e:	4093      	lsls	r3, r2
 800ba80:	608b      	str	r3, [r1, #8]
 800ba82:	4648      	mov	r0, r9
 800ba84:	f001 f9be 	bl	800ce04 <_Bfree>
 800ba88:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800ba8c:	2200      	movs	r2, #0
 800ba8e:	601a      	str	r2, [r3, #0]
 800ba90:	1e2b      	subs	r3, r5, #0
 800ba92:	bfbb      	ittet	lt
 800ba94:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800ba98:	9303      	strlt	r3, [sp, #12]
 800ba9a:	2300      	movge	r3, #0
 800ba9c:	2201      	movlt	r2, #1
 800ba9e:	bfac      	ite	ge
 800baa0:	6033      	strge	r3, [r6, #0]
 800baa2:	6032      	strlt	r2, [r6, #0]
 800baa4:	4b90      	ldr	r3, [pc, #576]	@ (800bce8 <_dtoa_r+0x2b8>)
 800baa6:	9e03      	ldr	r6, [sp, #12]
 800baa8:	43b3      	bics	r3, r6
 800baaa:	d110      	bne.n	800bace <_dtoa_r+0x9e>
 800baac:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800baae:	f242 730f 	movw	r3, #9999	@ 0x270f
 800bab2:	6013      	str	r3, [r2, #0]
 800bab4:	f3c6 0313 	ubfx	r3, r6, #0, #20
 800bab8:	4323      	orrs	r3, r4
 800baba:	f000 84e6 	beq.w	800c48a <_dtoa_r+0xa5a>
 800babe:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800bac0:	4f8a      	ldr	r7, [pc, #552]	@ (800bcec <_dtoa_r+0x2bc>)
 800bac2:	2b00      	cmp	r3, #0
 800bac4:	f000 84e8 	beq.w	800c498 <_dtoa_r+0xa68>
 800bac8:	1cfb      	adds	r3, r7, #3
 800baca:	f000 bce3 	b.w	800c494 <_dtoa_r+0xa64>
 800bace:	ed9d 8b02 	vldr	d8, [sp, #8]
 800bad2:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800bad6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bada:	d10a      	bne.n	800baf2 <_dtoa_r+0xc2>
 800badc:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800bade:	2301      	movs	r3, #1
 800bae0:	6013      	str	r3, [r2, #0]
 800bae2:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800bae4:	b113      	cbz	r3, 800baec <_dtoa_r+0xbc>
 800bae6:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 800bae8:	4b81      	ldr	r3, [pc, #516]	@ (800bcf0 <_dtoa_r+0x2c0>)
 800baea:	6013      	str	r3, [r2, #0]
 800baec:	4f81      	ldr	r7, [pc, #516]	@ (800bcf4 <_dtoa_r+0x2c4>)
 800baee:	f000 bcd3 	b.w	800c498 <_dtoa_r+0xa68>
 800baf2:	aa0e      	add	r2, sp, #56	@ 0x38
 800baf4:	a90f      	add	r1, sp, #60	@ 0x3c
 800baf6:	4648      	mov	r0, r9
 800baf8:	eeb0 0b48 	vmov.f64	d0, d8
 800bafc:	f001 fd1e 	bl	800d53c <__d2b>
 800bb00:	f3c6 530a 	ubfx	r3, r6, #20, #11
 800bb04:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800bb06:	9001      	str	r0, [sp, #4]
 800bb08:	2b00      	cmp	r3, #0
 800bb0a:	d045      	beq.n	800bb98 <_dtoa_r+0x168>
 800bb0c:	eeb0 7b48 	vmov.f64	d7, d8
 800bb10:	ee18 1a90 	vmov	r1, s17
 800bb14:	f3c1 0113 	ubfx	r1, r1, #0, #20
 800bb18:	f041 517f 	orr.w	r1, r1, #1069547520	@ 0x3fc00000
 800bb1c:	f441 1140 	orr.w	r1, r1, #3145728	@ 0x300000
 800bb20:	f2a3 33ff 	subw	r3, r3, #1023	@ 0x3ff
 800bb24:	2500      	movs	r5, #0
 800bb26:	ee07 1a90 	vmov	s15, r1
 800bb2a:	eeb7 6b08 	vmov.f64	d6, #120	@ 0x3fc00000  1.5
 800bb2e:	ed9f 5b66 	vldr	d5, [pc, #408]	@ 800bcc8 <_dtoa_r+0x298>
 800bb32:	ee37 7b46 	vsub.f64	d7, d7, d6
 800bb36:	ed9f 6b66 	vldr	d6, [pc, #408]	@ 800bcd0 <_dtoa_r+0x2a0>
 800bb3a:	eea7 6b05 	vfma.f64	d6, d7, d5
 800bb3e:	ed9f 5b66 	vldr	d5, [pc, #408]	@ 800bcd8 <_dtoa_r+0x2a8>
 800bb42:	ee07 3a90 	vmov	s15, r3
 800bb46:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 800bb4a:	eeb0 7b46 	vmov.f64	d7, d6
 800bb4e:	eea4 7b05 	vfma.f64	d7, d4, d5
 800bb52:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 800bb56:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 800bb5a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bb5e:	ee16 8a90 	vmov	r8, s13
 800bb62:	d508      	bpl.n	800bb76 <_dtoa_r+0x146>
 800bb64:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 800bb68:	eeb4 6b47 	vcmp.f64	d6, d7
 800bb6c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bb70:	bf18      	it	ne
 800bb72:	f108 38ff 	addne.w	r8, r8, #4294967295
 800bb76:	f1b8 0f16 	cmp.w	r8, #22
 800bb7a:	d82b      	bhi.n	800bbd4 <_dtoa_r+0x1a4>
 800bb7c:	495e      	ldr	r1, [pc, #376]	@ (800bcf8 <_dtoa_r+0x2c8>)
 800bb7e:	eb01 01c8 	add.w	r1, r1, r8, lsl #3
 800bb82:	ed91 7b00 	vldr	d7, [r1]
 800bb86:	eeb4 8bc7 	vcmpe.f64	d8, d7
 800bb8a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bb8e:	d501      	bpl.n	800bb94 <_dtoa_r+0x164>
 800bb90:	f108 38ff 	add.w	r8, r8, #4294967295
 800bb94:	2100      	movs	r1, #0
 800bb96:	e01e      	b.n	800bbd6 <_dtoa_r+0x1a6>
 800bb98:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800bb9a:	4413      	add	r3, r2
 800bb9c:	f203 4132 	addw	r1, r3, #1074	@ 0x432
 800bba0:	2920      	cmp	r1, #32
 800bba2:	bfc1      	itttt	gt
 800bba4:	f1c1 0140 	rsbgt	r1, r1, #64	@ 0x40
 800bba8:	408e      	lslgt	r6, r1
 800bbaa:	f203 4112 	addwgt	r1, r3, #1042	@ 0x412
 800bbae:	fa24 f101 	lsrgt.w	r1, r4, r1
 800bbb2:	bfd6      	itet	le
 800bbb4:	f1c1 0120 	rsble	r1, r1, #32
 800bbb8:	4331      	orrgt	r1, r6
 800bbba:	fa04 f101 	lslle.w	r1, r4, r1
 800bbbe:	ee07 1a90 	vmov	s15, r1
 800bbc2:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800bbc6:	3b01      	subs	r3, #1
 800bbc8:	ee17 1a90 	vmov	r1, s15
 800bbcc:	2501      	movs	r5, #1
 800bbce:	f1a1 71f8 	sub.w	r1, r1, #32505856	@ 0x1f00000
 800bbd2:	e7a8      	b.n	800bb26 <_dtoa_r+0xf6>
 800bbd4:	2101      	movs	r1, #1
 800bbd6:	1ad2      	subs	r2, r2, r3
 800bbd8:	1e53      	subs	r3, r2, #1
 800bbda:	9306      	str	r3, [sp, #24]
 800bbdc:	bf45      	ittet	mi
 800bbde:	f1c2 0301 	rsbmi	r3, r2, #1
 800bbe2:	9304      	strmi	r3, [sp, #16]
 800bbe4:	2300      	movpl	r3, #0
 800bbe6:	2300      	movmi	r3, #0
 800bbe8:	bf4c      	ite	mi
 800bbea:	9306      	strmi	r3, [sp, #24]
 800bbec:	9304      	strpl	r3, [sp, #16]
 800bbee:	f1b8 0f00 	cmp.w	r8, #0
 800bbf2:	910c      	str	r1, [sp, #48]	@ 0x30
 800bbf4:	db18      	blt.n	800bc28 <_dtoa_r+0x1f8>
 800bbf6:	9b06      	ldr	r3, [sp, #24]
 800bbf8:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 800bbfc:	4443      	add	r3, r8
 800bbfe:	9306      	str	r3, [sp, #24]
 800bc00:	2300      	movs	r3, #0
 800bc02:	9a07      	ldr	r2, [sp, #28]
 800bc04:	2a09      	cmp	r2, #9
 800bc06:	d845      	bhi.n	800bc94 <_dtoa_r+0x264>
 800bc08:	2a05      	cmp	r2, #5
 800bc0a:	bfc4      	itt	gt
 800bc0c:	3a04      	subgt	r2, #4
 800bc0e:	9207      	strgt	r2, [sp, #28]
 800bc10:	9a07      	ldr	r2, [sp, #28]
 800bc12:	f1a2 0202 	sub.w	r2, r2, #2
 800bc16:	bfcc      	ite	gt
 800bc18:	2400      	movgt	r4, #0
 800bc1a:	2401      	movle	r4, #1
 800bc1c:	2a03      	cmp	r2, #3
 800bc1e:	d844      	bhi.n	800bcaa <_dtoa_r+0x27a>
 800bc20:	e8df f002 	tbb	[pc, r2]
 800bc24:	0b173634 	.word	0x0b173634
 800bc28:	9b04      	ldr	r3, [sp, #16]
 800bc2a:	2200      	movs	r2, #0
 800bc2c:	eba3 0308 	sub.w	r3, r3, r8
 800bc30:	9304      	str	r3, [sp, #16]
 800bc32:	920a      	str	r2, [sp, #40]	@ 0x28
 800bc34:	f1c8 0300 	rsb	r3, r8, #0
 800bc38:	e7e3      	b.n	800bc02 <_dtoa_r+0x1d2>
 800bc3a:	2201      	movs	r2, #1
 800bc3c:	9208      	str	r2, [sp, #32]
 800bc3e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800bc40:	eb08 0b02 	add.w	fp, r8, r2
 800bc44:	f10b 0a01 	add.w	sl, fp, #1
 800bc48:	4652      	mov	r2, sl
 800bc4a:	2a01      	cmp	r2, #1
 800bc4c:	bfb8      	it	lt
 800bc4e:	2201      	movlt	r2, #1
 800bc50:	e006      	b.n	800bc60 <_dtoa_r+0x230>
 800bc52:	2201      	movs	r2, #1
 800bc54:	9208      	str	r2, [sp, #32]
 800bc56:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800bc58:	2a00      	cmp	r2, #0
 800bc5a:	dd29      	ble.n	800bcb0 <_dtoa_r+0x280>
 800bc5c:	4693      	mov	fp, r2
 800bc5e:	4692      	mov	sl, r2
 800bc60:	f8d9 701c 	ldr.w	r7, [r9, #28]
 800bc64:	2100      	movs	r1, #0
 800bc66:	2004      	movs	r0, #4
 800bc68:	f100 0614 	add.w	r6, r0, #20
 800bc6c:	4296      	cmp	r6, r2
 800bc6e:	d926      	bls.n	800bcbe <_dtoa_r+0x28e>
 800bc70:	6079      	str	r1, [r7, #4]
 800bc72:	4648      	mov	r0, r9
 800bc74:	9305      	str	r3, [sp, #20]
 800bc76:	f001 f885 	bl	800cd84 <_Balloc>
 800bc7a:	9b05      	ldr	r3, [sp, #20]
 800bc7c:	4607      	mov	r7, r0
 800bc7e:	2800      	cmp	r0, #0
 800bc80:	d13e      	bne.n	800bd00 <_dtoa_r+0x2d0>
 800bc82:	4b1e      	ldr	r3, [pc, #120]	@ (800bcfc <_dtoa_r+0x2cc>)
 800bc84:	4602      	mov	r2, r0
 800bc86:	f240 11af 	movw	r1, #431	@ 0x1af
 800bc8a:	e6ea      	b.n	800ba62 <_dtoa_r+0x32>
 800bc8c:	2200      	movs	r2, #0
 800bc8e:	e7e1      	b.n	800bc54 <_dtoa_r+0x224>
 800bc90:	2200      	movs	r2, #0
 800bc92:	e7d3      	b.n	800bc3c <_dtoa_r+0x20c>
 800bc94:	2401      	movs	r4, #1
 800bc96:	2200      	movs	r2, #0
 800bc98:	e9cd 2407 	strd	r2, r4, [sp, #28]
 800bc9c:	f04f 3bff 	mov.w	fp, #4294967295
 800bca0:	2100      	movs	r1, #0
 800bca2:	46da      	mov	sl, fp
 800bca4:	2212      	movs	r2, #18
 800bca6:	9109      	str	r1, [sp, #36]	@ 0x24
 800bca8:	e7da      	b.n	800bc60 <_dtoa_r+0x230>
 800bcaa:	2201      	movs	r2, #1
 800bcac:	9208      	str	r2, [sp, #32]
 800bcae:	e7f5      	b.n	800bc9c <_dtoa_r+0x26c>
 800bcb0:	f04f 0b01 	mov.w	fp, #1
 800bcb4:	46da      	mov	sl, fp
 800bcb6:	465a      	mov	r2, fp
 800bcb8:	f8cd b024 	str.w	fp, [sp, #36]	@ 0x24
 800bcbc:	e7d0      	b.n	800bc60 <_dtoa_r+0x230>
 800bcbe:	3101      	adds	r1, #1
 800bcc0:	0040      	lsls	r0, r0, #1
 800bcc2:	e7d1      	b.n	800bc68 <_dtoa_r+0x238>
 800bcc4:	f3af 8000 	nop.w
 800bcc8:	636f4361 	.word	0x636f4361
 800bccc:	3fd287a7 	.word	0x3fd287a7
 800bcd0:	8b60c8b3 	.word	0x8b60c8b3
 800bcd4:	3fc68a28 	.word	0x3fc68a28
 800bcd8:	509f79fb 	.word	0x509f79fb
 800bcdc:	3fd34413 	.word	0x3fd34413
 800bce0:	0800e333 	.word	0x0800e333
 800bce4:	0800e34a 	.word	0x0800e34a
 800bce8:	7ff00000 	.word	0x7ff00000
 800bcec:	0800e32f 	.word	0x0800e32f
 800bcf0:	0800e2fb 	.word	0x0800e2fb
 800bcf4:	0800e2fa 	.word	0x0800e2fa
 800bcf8:	0800e648 	.word	0x0800e648
 800bcfc:	0800e3a2 	.word	0x0800e3a2
 800bd00:	f8d9 201c 	ldr.w	r2, [r9, #28]
 800bd04:	f1ba 0f0e 	cmp.w	sl, #14
 800bd08:	6010      	str	r0, [r2, #0]
 800bd0a:	d86e      	bhi.n	800bdea <_dtoa_r+0x3ba>
 800bd0c:	2c00      	cmp	r4, #0
 800bd0e:	d06c      	beq.n	800bdea <_dtoa_r+0x3ba>
 800bd10:	f1b8 0f00 	cmp.w	r8, #0
 800bd14:	f340 80b4 	ble.w	800be80 <_dtoa_r+0x450>
 800bd18:	4ac8      	ldr	r2, [pc, #800]	@ (800c03c <_dtoa_r+0x60c>)
 800bd1a:	f008 010f 	and.w	r1, r8, #15
 800bd1e:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 800bd22:	f418 7f80 	tst.w	r8, #256	@ 0x100
 800bd26:	ed92 7b00 	vldr	d7, [r2]
 800bd2a:	ea4f 1128 	mov.w	r1, r8, asr #4
 800bd2e:	f000 809b 	beq.w	800be68 <_dtoa_r+0x438>
 800bd32:	4ac3      	ldr	r2, [pc, #780]	@ (800c040 <_dtoa_r+0x610>)
 800bd34:	ed92 6b08 	vldr	d6, [r2, #32]
 800bd38:	ee88 6b06 	vdiv.f64	d6, d8, d6
 800bd3c:	ed8d 6b02 	vstr	d6, [sp, #8]
 800bd40:	f001 010f 	and.w	r1, r1, #15
 800bd44:	2203      	movs	r2, #3
 800bd46:	48be      	ldr	r0, [pc, #760]	@ (800c040 <_dtoa_r+0x610>)
 800bd48:	2900      	cmp	r1, #0
 800bd4a:	f040 808f 	bne.w	800be6c <_dtoa_r+0x43c>
 800bd4e:	ed9d 6b02 	vldr	d6, [sp, #8]
 800bd52:	ee86 7b07 	vdiv.f64	d7, d6, d7
 800bd56:	ed8d 7b02 	vstr	d7, [sp, #8]
 800bd5a:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800bd5c:	ed9d 7b02 	vldr	d7, [sp, #8]
 800bd60:	2900      	cmp	r1, #0
 800bd62:	f000 80b3 	beq.w	800becc <_dtoa_r+0x49c>
 800bd66:	eeb7 6b00 	vmov.f64	d6, #112	@ 0x3f800000  1.0
 800bd6a:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800bd6e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bd72:	f140 80ab 	bpl.w	800becc <_dtoa_r+0x49c>
 800bd76:	f1ba 0f00 	cmp.w	sl, #0
 800bd7a:	f000 80a7 	beq.w	800becc <_dtoa_r+0x49c>
 800bd7e:	f1bb 0f00 	cmp.w	fp, #0
 800bd82:	dd30      	ble.n	800bde6 <_dtoa_r+0x3b6>
 800bd84:	eeb2 6b04 	vmov.f64	d6, #36	@ 0x41200000  10.0
 800bd88:	ee27 7b06 	vmul.f64	d7, d7, d6
 800bd8c:	ed8d 7b02 	vstr	d7, [sp, #8]
 800bd90:	f108 31ff 	add.w	r1, r8, #4294967295
 800bd94:	9105      	str	r1, [sp, #20]
 800bd96:	3201      	adds	r2, #1
 800bd98:	465c      	mov	r4, fp
 800bd9a:	ed9d 6b02 	vldr	d6, [sp, #8]
 800bd9e:	eeb1 5b0c 	vmov.f64	d5, #28	@ 0x40e00000  7.0
 800bda2:	ee07 2a90 	vmov	s15, r2
 800bda6:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800bdaa:	eea7 5b06 	vfma.f64	d5, d7, d6
 800bdae:	ee15 2a90 	vmov	r2, s11
 800bdb2:	ec51 0b15 	vmov	r0, r1, d5
 800bdb6:	f1a2 7150 	sub.w	r1, r2, #54525952	@ 0x3400000
 800bdba:	2c00      	cmp	r4, #0
 800bdbc:	f040 808a 	bne.w	800bed4 <_dtoa_r+0x4a4>
 800bdc0:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
 800bdc4:	ee36 6b47 	vsub.f64	d6, d6, d7
 800bdc8:	ec41 0b17 	vmov	d7, r0, r1
 800bdcc:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800bdd0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bdd4:	f300 826a 	bgt.w	800c2ac <_dtoa_r+0x87c>
 800bdd8:	eeb1 7b47 	vneg.f64	d7, d7
 800bddc:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800bde0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bde4:	d423      	bmi.n	800be2e <_dtoa_r+0x3fe>
 800bde6:	ed8d 8b02 	vstr	d8, [sp, #8]
 800bdea:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800bdec:	2a00      	cmp	r2, #0
 800bdee:	f2c0 8129 	blt.w	800c044 <_dtoa_r+0x614>
 800bdf2:	f1b8 0f0e 	cmp.w	r8, #14
 800bdf6:	f300 8125 	bgt.w	800c044 <_dtoa_r+0x614>
 800bdfa:	4b90      	ldr	r3, [pc, #576]	@ (800c03c <_dtoa_r+0x60c>)
 800bdfc:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800be00:	ed93 6b00 	vldr	d6, [r3]
 800be04:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800be06:	2b00      	cmp	r3, #0
 800be08:	f280 80c8 	bge.w	800bf9c <_dtoa_r+0x56c>
 800be0c:	f1ba 0f00 	cmp.w	sl, #0
 800be10:	f300 80c4 	bgt.w	800bf9c <_dtoa_r+0x56c>
 800be14:	d10b      	bne.n	800be2e <_dtoa_r+0x3fe>
 800be16:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
 800be1a:	ee26 6b07 	vmul.f64	d6, d6, d7
 800be1e:	ed9d 7b02 	vldr	d7, [sp, #8]
 800be22:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800be26:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800be2a:	f2c0 823c 	blt.w	800c2a6 <_dtoa_r+0x876>
 800be2e:	2400      	movs	r4, #0
 800be30:	4625      	mov	r5, r4
 800be32:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800be34:	43db      	mvns	r3, r3
 800be36:	9305      	str	r3, [sp, #20]
 800be38:	463e      	mov	r6, r7
 800be3a:	f04f 0800 	mov.w	r8, #0
 800be3e:	4621      	mov	r1, r4
 800be40:	4648      	mov	r0, r9
 800be42:	f000 ffdf 	bl	800ce04 <_Bfree>
 800be46:	2d00      	cmp	r5, #0
 800be48:	f000 80a2 	beq.w	800bf90 <_dtoa_r+0x560>
 800be4c:	f1b8 0f00 	cmp.w	r8, #0
 800be50:	d005      	beq.n	800be5e <_dtoa_r+0x42e>
 800be52:	45a8      	cmp	r8, r5
 800be54:	d003      	beq.n	800be5e <_dtoa_r+0x42e>
 800be56:	4641      	mov	r1, r8
 800be58:	4648      	mov	r0, r9
 800be5a:	f000 ffd3 	bl	800ce04 <_Bfree>
 800be5e:	4629      	mov	r1, r5
 800be60:	4648      	mov	r0, r9
 800be62:	f000 ffcf 	bl	800ce04 <_Bfree>
 800be66:	e093      	b.n	800bf90 <_dtoa_r+0x560>
 800be68:	2202      	movs	r2, #2
 800be6a:	e76c      	b.n	800bd46 <_dtoa_r+0x316>
 800be6c:	07cc      	lsls	r4, r1, #31
 800be6e:	d504      	bpl.n	800be7a <_dtoa_r+0x44a>
 800be70:	ed90 6b00 	vldr	d6, [r0]
 800be74:	3201      	adds	r2, #1
 800be76:	ee27 7b06 	vmul.f64	d7, d7, d6
 800be7a:	1049      	asrs	r1, r1, #1
 800be7c:	3008      	adds	r0, #8
 800be7e:	e763      	b.n	800bd48 <_dtoa_r+0x318>
 800be80:	d022      	beq.n	800bec8 <_dtoa_r+0x498>
 800be82:	f1c8 0100 	rsb	r1, r8, #0
 800be86:	4a6d      	ldr	r2, [pc, #436]	@ (800c03c <_dtoa_r+0x60c>)
 800be88:	f001 000f 	and.w	r0, r1, #15
 800be8c:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 800be90:	ed92 7b00 	vldr	d7, [r2]
 800be94:	ee28 7b07 	vmul.f64	d7, d8, d7
 800be98:	ed8d 7b02 	vstr	d7, [sp, #8]
 800be9c:	4868      	ldr	r0, [pc, #416]	@ (800c040 <_dtoa_r+0x610>)
 800be9e:	1109      	asrs	r1, r1, #4
 800bea0:	2400      	movs	r4, #0
 800bea2:	2202      	movs	r2, #2
 800bea4:	b929      	cbnz	r1, 800beb2 <_dtoa_r+0x482>
 800bea6:	2c00      	cmp	r4, #0
 800bea8:	f43f af57 	beq.w	800bd5a <_dtoa_r+0x32a>
 800beac:	ed8d 7b02 	vstr	d7, [sp, #8]
 800beb0:	e753      	b.n	800bd5a <_dtoa_r+0x32a>
 800beb2:	07ce      	lsls	r6, r1, #31
 800beb4:	d505      	bpl.n	800bec2 <_dtoa_r+0x492>
 800beb6:	ed90 6b00 	vldr	d6, [r0]
 800beba:	3201      	adds	r2, #1
 800bebc:	2401      	movs	r4, #1
 800bebe:	ee27 7b06 	vmul.f64	d7, d7, d6
 800bec2:	1049      	asrs	r1, r1, #1
 800bec4:	3008      	adds	r0, #8
 800bec6:	e7ed      	b.n	800bea4 <_dtoa_r+0x474>
 800bec8:	2202      	movs	r2, #2
 800beca:	e746      	b.n	800bd5a <_dtoa_r+0x32a>
 800becc:	f8cd 8014 	str.w	r8, [sp, #20]
 800bed0:	4654      	mov	r4, sl
 800bed2:	e762      	b.n	800bd9a <_dtoa_r+0x36a>
 800bed4:	4a59      	ldr	r2, [pc, #356]	@ (800c03c <_dtoa_r+0x60c>)
 800bed6:	eb02 02c4 	add.w	r2, r2, r4, lsl #3
 800beda:	ed12 4b02 	vldr	d4, [r2, #-8]
 800bede:	9a08      	ldr	r2, [sp, #32]
 800bee0:	ec41 0b17 	vmov	d7, r0, r1
 800bee4:	443c      	add	r4, r7
 800bee6:	b34a      	cbz	r2, 800bf3c <_dtoa_r+0x50c>
 800bee8:	eeb6 3b00 	vmov.f64	d3, #96	@ 0x3f000000  0.5
 800beec:	eeb7 2b00 	vmov.f64	d2, #112	@ 0x3f800000  1.0
 800bef0:	463e      	mov	r6, r7
 800bef2:	ee83 5b04 	vdiv.f64	d5, d3, d4
 800bef6:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
 800befa:	ee35 7b47 	vsub.f64	d7, d5, d7
 800befe:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 800bf02:	ee14 2a90 	vmov	r2, s9
 800bf06:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 800bf0a:	3230      	adds	r2, #48	@ 0x30
 800bf0c:	ee36 6b45 	vsub.f64	d6, d6, d5
 800bf10:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800bf14:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bf18:	f806 2b01 	strb.w	r2, [r6], #1
 800bf1c:	d438      	bmi.n	800bf90 <_dtoa_r+0x560>
 800bf1e:	ee32 5b46 	vsub.f64	d5, d2, d6
 800bf22:	eeb4 5bc7 	vcmpe.f64	d5, d7
 800bf26:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bf2a:	d46e      	bmi.n	800c00a <_dtoa_r+0x5da>
 800bf2c:	42a6      	cmp	r6, r4
 800bf2e:	f43f af5a 	beq.w	800bde6 <_dtoa_r+0x3b6>
 800bf32:	ee27 7b03 	vmul.f64	d7, d7, d3
 800bf36:	ee26 6b03 	vmul.f64	d6, d6, d3
 800bf3a:	e7e0      	b.n	800befe <_dtoa_r+0x4ce>
 800bf3c:	4621      	mov	r1, r4
 800bf3e:	463e      	mov	r6, r7
 800bf40:	ee27 7b04 	vmul.f64	d7, d7, d4
 800bf44:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
 800bf48:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 800bf4c:	ee14 2a90 	vmov	r2, s9
 800bf50:	3230      	adds	r2, #48	@ 0x30
 800bf52:	f806 2b01 	strb.w	r2, [r6], #1
 800bf56:	42a6      	cmp	r6, r4
 800bf58:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 800bf5c:	ee36 6b45 	vsub.f64	d6, d6, d5
 800bf60:	d119      	bne.n	800bf96 <_dtoa_r+0x566>
 800bf62:	eeb6 5b00 	vmov.f64	d5, #96	@ 0x3f000000  0.5
 800bf66:	ee37 4b05 	vadd.f64	d4, d7, d5
 800bf6a:	eeb4 6bc4 	vcmpe.f64	d6, d4
 800bf6e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bf72:	dc4a      	bgt.n	800c00a <_dtoa_r+0x5da>
 800bf74:	ee35 5b47 	vsub.f64	d5, d5, d7
 800bf78:	eeb4 6bc5 	vcmpe.f64	d6, d5
 800bf7c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bf80:	f57f af31 	bpl.w	800bde6 <_dtoa_r+0x3b6>
 800bf84:	460e      	mov	r6, r1
 800bf86:	3901      	subs	r1, #1
 800bf88:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800bf8c:	2b30      	cmp	r3, #48	@ 0x30
 800bf8e:	d0f9      	beq.n	800bf84 <_dtoa_r+0x554>
 800bf90:	f8dd 8014 	ldr.w	r8, [sp, #20]
 800bf94:	e027      	b.n	800bfe6 <_dtoa_r+0x5b6>
 800bf96:	ee26 6b03 	vmul.f64	d6, d6, d3
 800bf9a:	e7d5      	b.n	800bf48 <_dtoa_r+0x518>
 800bf9c:	ed9d 7b02 	vldr	d7, [sp, #8]
 800bfa0:	eeb2 4b04 	vmov.f64	d4, #36	@ 0x41200000  10.0
 800bfa4:	463e      	mov	r6, r7
 800bfa6:	ee87 5b06 	vdiv.f64	d5, d7, d6
 800bfaa:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 800bfae:	ee15 3a10 	vmov	r3, s10
 800bfb2:	3330      	adds	r3, #48	@ 0x30
 800bfb4:	f806 3b01 	strb.w	r3, [r6], #1
 800bfb8:	1bf3      	subs	r3, r6, r7
 800bfba:	459a      	cmp	sl, r3
 800bfbc:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 800bfc0:	eea3 7b46 	vfms.f64	d7, d3, d6
 800bfc4:	d132      	bne.n	800c02c <_dtoa_r+0x5fc>
 800bfc6:	ee37 7b07 	vadd.f64	d7, d7, d7
 800bfca:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800bfce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bfd2:	dc18      	bgt.n	800c006 <_dtoa_r+0x5d6>
 800bfd4:	eeb4 7b46 	vcmp.f64	d7, d6
 800bfd8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bfdc:	d103      	bne.n	800bfe6 <_dtoa_r+0x5b6>
 800bfde:	ee15 3a10 	vmov	r3, s10
 800bfe2:	07db      	lsls	r3, r3, #31
 800bfe4:	d40f      	bmi.n	800c006 <_dtoa_r+0x5d6>
 800bfe6:	9901      	ldr	r1, [sp, #4]
 800bfe8:	4648      	mov	r0, r9
 800bfea:	f000 ff0b 	bl	800ce04 <_Bfree>
 800bfee:	2300      	movs	r3, #0
 800bff0:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800bff2:	7033      	strb	r3, [r6, #0]
 800bff4:	f108 0301 	add.w	r3, r8, #1
 800bff8:	6013      	str	r3, [r2, #0]
 800bffa:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800bffc:	2b00      	cmp	r3, #0
 800bffe:	f000 824b 	beq.w	800c498 <_dtoa_r+0xa68>
 800c002:	601e      	str	r6, [r3, #0]
 800c004:	e248      	b.n	800c498 <_dtoa_r+0xa68>
 800c006:	f8cd 8014 	str.w	r8, [sp, #20]
 800c00a:	4633      	mov	r3, r6
 800c00c:	461e      	mov	r6, r3
 800c00e:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800c012:	2a39      	cmp	r2, #57	@ 0x39
 800c014:	d106      	bne.n	800c024 <_dtoa_r+0x5f4>
 800c016:	429f      	cmp	r7, r3
 800c018:	d1f8      	bne.n	800c00c <_dtoa_r+0x5dc>
 800c01a:	9a05      	ldr	r2, [sp, #20]
 800c01c:	3201      	adds	r2, #1
 800c01e:	9205      	str	r2, [sp, #20]
 800c020:	2230      	movs	r2, #48	@ 0x30
 800c022:	703a      	strb	r2, [r7, #0]
 800c024:	781a      	ldrb	r2, [r3, #0]
 800c026:	3201      	adds	r2, #1
 800c028:	701a      	strb	r2, [r3, #0]
 800c02a:	e7b1      	b.n	800bf90 <_dtoa_r+0x560>
 800c02c:	ee27 7b04 	vmul.f64	d7, d7, d4
 800c030:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800c034:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c038:	d1b5      	bne.n	800bfa6 <_dtoa_r+0x576>
 800c03a:	e7d4      	b.n	800bfe6 <_dtoa_r+0x5b6>
 800c03c:	0800e648 	.word	0x0800e648
 800c040:	0800e620 	.word	0x0800e620
 800c044:	9908      	ldr	r1, [sp, #32]
 800c046:	2900      	cmp	r1, #0
 800c048:	f000 80e9 	beq.w	800c21e <_dtoa_r+0x7ee>
 800c04c:	9907      	ldr	r1, [sp, #28]
 800c04e:	2901      	cmp	r1, #1
 800c050:	f300 80cb 	bgt.w	800c1ea <_dtoa_r+0x7ba>
 800c054:	2d00      	cmp	r5, #0
 800c056:	f000 80c4 	beq.w	800c1e2 <_dtoa_r+0x7b2>
 800c05a:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800c05e:	9e04      	ldr	r6, [sp, #16]
 800c060:	461c      	mov	r4, r3
 800c062:	9305      	str	r3, [sp, #20]
 800c064:	9b04      	ldr	r3, [sp, #16]
 800c066:	4413      	add	r3, r2
 800c068:	9304      	str	r3, [sp, #16]
 800c06a:	9b06      	ldr	r3, [sp, #24]
 800c06c:	2101      	movs	r1, #1
 800c06e:	4413      	add	r3, r2
 800c070:	4648      	mov	r0, r9
 800c072:	9306      	str	r3, [sp, #24]
 800c074:	f000 ffc4 	bl	800d000 <__i2b>
 800c078:	9b05      	ldr	r3, [sp, #20]
 800c07a:	4605      	mov	r5, r0
 800c07c:	b166      	cbz	r6, 800c098 <_dtoa_r+0x668>
 800c07e:	9a06      	ldr	r2, [sp, #24]
 800c080:	2a00      	cmp	r2, #0
 800c082:	dd09      	ble.n	800c098 <_dtoa_r+0x668>
 800c084:	42b2      	cmp	r2, r6
 800c086:	9904      	ldr	r1, [sp, #16]
 800c088:	bfa8      	it	ge
 800c08a:	4632      	movge	r2, r6
 800c08c:	1a89      	subs	r1, r1, r2
 800c08e:	9104      	str	r1, [sp, #16]
 800c090:	9906      	ldr	r1, [sp, #24]
 800c092:	1ab6      	subs	r6, r6, r2
 800c094:	1a8a      	subs	r2, r1, r2
 800c096:	9206      	str	r2, [sp, #24]
 800c098:	b30b      	cbz	r3, 800c0de <_dtoa_r+0x6ae>
 800c09a:	9a08      	ldr	r2, [sp, #32]
 800c09c:	2a00      	cmp	r2, #0
 800c09e:	f000 80c5 	beq.w	800c22c <_dtoa_r+0x7fc>
 800c0a2:	2c00      	cmp	r4, #0
 800c0a4:	f000 80bf 	beq.w	800c226 <_dtoa_r+0x7f6>
 800c0a8:	4629      	mov	r1, r5
 800c0aa:	4622      	mov	r2, r4
 800c0ac:	4648      	mov	r0, r9
 800c0ae:	930b      	str	r3, [sp, #44]	@ 0x2c
 800c0b0:	f001 f85e 	bl	800d170 <__pow5mult>
 800c0b4:	9a01      	ldr	r2, [sp, #4]
 800c0b6:	4601      	mov	r1, r0
 800c0b8:	4605      	mov	r5, r0
 800c0ba:	4648      	mov	r0, r9
 800c0bc:	f000 ffb6 	bl	800d02c <__multiply>
 800c0c0:	9901      	ldr	r1, [sp, #4]
 800c0c2:	9005      	str	r0, [sp, #20]
 800c0c4:	4648      	mov	r0, r9
 800c0c6:	f000 fe9d 	bl	800ce04 <_Bfree>
 800c0ca:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800c0cc:	1b1b      	subs	r3, r3, r4
 800c0ce:	f000 80b0 	beq.w	800c232 <_dtoa_r+0x802>
 800c0d2:	9905      	ldr	r1, [sp, #20]
 800c0d4:	461a      	mov	r2, r3
 800c0d6:	4648      	mov	r0, r9
 800c0d8:	f001 f84a 	bl	800d170 <__pow5mult>
 800c0dc:	9001      	str	r0, [sp, #4]
 800c0de:	2101      	movs	r1, #1
 800c0e0:	4648      	mov	r0, r9
 800c0e2:	f000 ff8d 	bl	800d000 <__i2b>
 800c0e6:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c0e8:	4604      	mov	r4, r0
 800c0ea:	2b00      	cmp	r3, #0
 800c0ec:	f000 81da 	beq.w	800c4a4 <_dtoa_r+0xa74>
 800c0f0:	461a      	mov	r2, r3
 800c0f2:	4601      	mov	r1, r0
 800c0f4:	4648      	mov	r0, r9
 800c0f6:	f001 f83b 	bl	800d170 <__pow5mult>
 800c0fa:	9b07      	ldr	r3, [sp, #28]
 800c0fc:	2b01      	cmp	r3, #1
 800c0fe:	4604      	mov	r4, r0
 800c100:	f300 80a0 	bgt.w	800c244 <_dtoa_r+0x814>
 800c104:	9b02      	ldr	r3, [sp, #8]
 800c106:	2b00      	cmp	r3, #0
 800c108:	f040 8096 	bne.w	800c238 <_dtoa_r+0x808>
 800c10c:	9b03      	ldr	r3, [sp, #12]
 800c10e:	f3c3 0213 	ubfx	r2, r3, #0, #20
 800c112:	2a00      	cmp	r2, #0
 800c114:	f040 8092 	bne.w	800c23c <_dtoa_r+0x80c>
 800c118:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800c11c:	0d12      	lsrs	r2, r2, #20
 800c11e:	0512      	lsls	r2, r2, #20
 800c120:	2a00      	cmp	r2, #0
 800c122:	f000 808d 	beq.w	800c240 <_dtoa_r+0x810>
 800c126:	9b04      	ldr	r3, [sp, #16]
 800c128:	3301      	adds	r3, #1
 800c12a:	9304      	str	r3, [sp, #16]
 800c12c:	9b06      	ldr	r3, [sp, #24]
 800c12e:	3301      	adds	r3, #1
 800c130:	9306      	str	r3, [sp, #24]
 800c132:	2301      	movs	r3, #1
 800c134:	930b      	str	r3, [sp, #44]	@ 0x2c
 800c136:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c138:	2b00      	cmp	r3, #0
 800c13a:	f000 81b9 	beq.w	800c4b0 <_dtoa_r+0xa80>
 800c13e:	6922      	ldr	r2, [r4, #16]
 800c140:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 800c144:	6910      	ldr	r0, [r2, #16]
 800c146:	f000 ff0f 	bl	800cf68 <__hi0bits>
 800c14a:	f1c0 0020 	rsb	r0, r0, #32
 800c14e:	9b06      	ldr	r3, [sp, #24]
 800c150:	4418      	add	r0, r3
 800c152:	f010 001f 	ands.w	r0, r0, #31
 800c156:	f000 8081 	beq.w	800c25c <_dtoa_r+0x82c>
 800c15a:	f1c0 0220 	rsb	r2, r0, #32
 800c15e:	2a04      	cmp	r2, #4
 800c160:	dd73      	ble.n	800c24a <_dtoa_r+0x81a>
 800c162:	9b04      	ldr	r3, [sp, #16]
 800c164:	f1c0 001c 	rsb	r0, r0, #28
 800c168:	4403      	add	r3, r0
 800c16a:	9304      	str	r3, [sp, #16]
 800c16c:	9b06      	ldr	r3, [sp, #24]
 800c16e:	4406      	add	r6, r0
 800c170:	4403      	add	r3, r0
 800c172:	9306      	str	r3, [sp, #24]
 800c174:	9b04      	ldr	r3, [sp, #16]
 800c176:	2b00      	cmp	r3, #0
 800c178:	dd05      	ble.n	800c186 <_dtoa_r+0x756>
 800c17a:	9901      	ldr	r1, [sp, #4]
 800c17c:	461a      	mov	r2, r3
 800c17e:	4648      	mov	r0, r9
 800c180:	f001 f850 	bl	800d224 <__lshift>
 800c184:	9001      	str	r0, [sp, #4]
 800c186:	9b06      	ldr	r3, [sp, #24]
 800c188:	2b00      	cmp	r3, #0
 800c18a:	dd05      	ble.n	800c198 <_dtoa_r+0x768>
 800c18c:	4621      	mov	r1, r4
 800c18e:	461a      	mov	r2, r3
 800c190:	4648      	mov	r0, r9
 800c192:	f001 f847 	bl	800d224 <__lshift>
 800c196:	4604      	mov	r4, r0
 800c198:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800c19a:	2b00      	cmp	r3, #0
 800c19c:	d060      	beq.n	800c260 <_dtoa_r+0x830>
 800c19e:	9801      	ldr	r0, [sp, #4]
 800c1a0:	4621      	mov	r1, r4
 800c1a2:	f001 f8ab 	bl	800d2fc <__mcmp>
 800c1a6:	2800      	cmp	r0, #0
 800c1a8:	da5a      	bge.n	800c260 <_dtoa_r+0x830>
 800c1aa:	f108 33ff 	add.w	r3, r8, #4294967295
 800c1ae:	9305      	str	r3, [sp, #20]
 800c1b0:	9901      	ldr	r1, [sp, #4]
 800c1b2:	2300      	movs	r3, #0
 800c1b4:	220a      	movs	r2, #10
 800c1b6:	4648      	mov	r0, r9
 800c1b8:	f000 fe46 	bl	800ce48 <__multadd>
 800c1bc:	9b08      	ldr	r3, [sp, #32]
 800c1be:	9001      	str	r0, [sp, #4]
 800c1c0:	2b00      	cmp	r3, #0
 800c1c2:	f000 8177 	beq.w	800c4b4 <_dtoa_r+0xa84>
 800c1c6:	4629      	mov	r1, r5
 800c1c8:	2300      	movs	r3, #0
 800c1ca:	220a      	movs	r2, #10
 800c1cc:	4648      	mov	r0, r9
 800c1ce:	f000 fe3b 	bl	800ce48 <__multadd>
 800c1d2:	f1bb 0f00 	cmp.w	fp, #0
 800c1d6:	4605      	mov	r5, r0
 800c1d8:	dc6e      	bgt.n	800c2b8 <_dtoa_r+0x888>
 800c1da:	9b07      	ldr	r3, [sp, #28]
 800c1dc:	2b02      	cmp	r3, #2
 800c1de:	dc48      	bgt.n	800c272 <_dtoa_r+0x842>
 800c1e0:	e06a      	b.n	800c2b8 <_dtoa_r+0x888>
 800c1e2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800c1e4:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 800c1e8:	e739      	b.n	800c05e <_dtoa_r+0x62e>
 800c1ea:	f10a 34ff 	add.w	r4, sl, #4294967295
 800c1ee:	42a3      	cmp	r3, r4
 800c1f0:	db07      	blt.n	800c202 <_dtoa_r+0x7d2>
 800c1f2:	f1ba 0f00 	cmp.w	sl, #0
 800c1f6:	eba3 0404 	sub.w	r4, r3, r4
 800c1fa:	db0b      	blt.n	800c214 <_dtoa_r+0x7e4>
 800c1fc:	9e04      	ldr	r6, [sp, #16]
 800c1fe:	4652      	mov	r2, sl
 800c200:	e72f      	b.n	800c062 <_dtoa_r+0x632>
 800c202:	1ae2      	subs	r2, r4, r3
 800c204:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c206:	9e04      	ldr	r6, [sp, #16]
 800c208:	4413      	add	r3, r2
 800c20a:	930a      	str	r3, [sp, #40]	@ 0x28
 800c20c:	4652      	mov	r2, sl
 800c20e:	4623      	mov	r3, r4
 800c210:	2400      	movs	r4, #0
 800c212:	e726      	b.n	800c062 <_dtoa_r+0x632>
 800c214:	9a04      	ldr	r2, [sp, #16]
 800c216:	eba2 060a 	sub.w	r6, r2, sl
 800c21a:	2200      	movs	r2, #0
 800c21c:	e721      	b.n	800c062 <_dtoa_r+0x632>
 800c21e:	9e04      	ldr	r6, [sp, #16]
 800c220:	9d08      	ldr	r5, [sp, #32]
 800c222:	461c      	mov	r4, r3
 800c224:	e72a      	b.n	800c07c <_dtoa_r+0x64c>
 800c226:	9a01      	ldr	r2, [sp, #4]
 800c228:	9205      	str	r2, [sp, #20]
 800c22a:	e752      	b.n	800c0d2 <_dtoa_r+0x6a2>
 800c22c:	9901      	ldr	r1, [sp, #4]
 800c22e:	461a      	mov	r2, r3
 800c230:	e751      	b.n	800c0d6 <_dtoa_r+0x6a6>
 800c232:	9b05      	ldr	r3, [sp, #20]
 800c234:	9301      	str	r3, [sp, #4]
 800c236:	e752      	b.n	800c0de <_dtoa_r+0x6ae>
 800c238:	2300      	movs	r3, #0
 800c23a:	e77b      	b.n	800c134 <_dtoa_r+0x704>
 800c23c:	9b02      	ldr	r3, [sp, #8]
 800c23e:	e779      	b.n	800c134 <_dtoa_r+0x704>
 800c240:	920b      	str	r2, [sp, #44]	@ 0x2c
 800c242:	e778      	b.n	800c136 <_dtoa_r+0x706>
 800c244:	2300      	movs	r3, #0
 800c246:	930b      	str	r3, [sp, #44]	@ 0x2c
 800c248:	e779      	b.n	800c13e <_dtoa_r+0x70e>
 800c24a:	d093      	beq.n	800c174 <_dtoa_r+0x744>
 800c24c:	9b04      	ldr	r3, [sp, #16]
 800c24e:	321c      	adds	r2, #28
 800c250:	4413      	add	r3, r2
 800c252:	9304      	str	r3, [sp, #16]
 800c254:	9b06      	ldr	r3, [sp, #24]
 800c256:	4416      	add	r6, r2
 800c258:	4413      	add	r3, r2
 800c25a:	e78a      	b.n	800c172 <_dtoa_r+0x742>
 800c25c:	4602      	mov	r2, r0
 800c25e:	e7f5      	b.n	800c24c <_dtoa_r+0x81c>
 800c260:	f1ba 0f00 	cmp.w	sl, #0
 800c264:	f8cd 8014 	str.w	r8, [sp, #20]
 800c268:	46d3      	mov	fp, sl
 800c26a:	dc21      	bgt.n	800c2b0 <_dtoa_r+0x880>
 800c26c:	9b07      	ldr	r3, [sp, #28]
 800c26e:	2b02      	cmp	r3, #2
 800c270:	dd1e      	ble.n	800c2b0 <_dtoa_r+0x880>
 800c272:	f1bb 0f00 	cmp.w	fp, #0
 800c276:	f47f addc 	bne.w	800be32 <_dtoa_r+0x402>
 800c27a:	4621      	mov	r1, r4
 800c27c:	465b      	mov	r3, fp
 800c27e:	2205      	movs	r2, #5
 800c280:	4648      	mov	r0, r9
 800c282:	f000 fde1 	bl	800ce48 <__multadd>
 800c286:	4601      	mov	r1, r0
 800c288:	4604      	mov	r4, r0
 800c28a:	9801      	ldr	r0, [sp, #4]
 800c28c:	f001 f836 	bl	800d2fc <__mcmp>
 800c290:	2800      	cmp	r0, #0
 800c292:	f77f adce 	ble.w	800be32 <_dtoa_r+0x402>
 800c296:	463e      	mov	r6, r7
 800c298:	2331      	movs	r3, #49	@ 0x31
 800c29a:	f806 3b01 	strb.w	r3, [r6], #1
 800c29e:	9b05      	ldr	r3, [sp, #20]
 800c2a0:	3301      	adds	r3, #1
 800c2a2:	9305      	str	r3, [sp, #20]
 800c2a4:	e5c9      	b.n	800be3a <_dtoa_r+0x40a>
 800c2a6:	f8cd 8014 	str.w	r8, [sp, #20]
 800c2aa:	4654      	mov	r4, sl
 800c2ac:	4625      	mov	r5, r4
 800c2ae:	e7f2      	b.n	800c296 <_dtoa_r+0x866>
 800c2b0:	9b08      	ldr	r3, [sp, #32]
 800c2b2:	2b00      	cmp	r3, #0
 800c2b4:	f000 8102 	beq.w	800c4bc <_dtoa_r+0xa8c>
 800c2b8:	2e00      	cmp	r6, #0
 800c2ba:	dd05      	ble.n	800c2c8 <_dtoa_r+0x898>
 800c2bc:	4629      	mov	r1, r5
 800c2be:	4632      	mov	r2, r6
 800c2c0:	4648      	mov	r0, r9
 800c2c2:	f000 ffaf 	bl	800d224 <__lshift>
 800c2c6:	4605      	mov	r5, r0
 800c2c8:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800c2ca:	2b00      	cmp	r3, #0
 800c2cc:	d058      	beq.n	800c380 <_dtoa_r+0x950>
 800c2ce:	6869      	ldr	r1, [r5, #4]
 800c2d0:	4648      	mov	r0, r9
 800c2d2:	f000 fd57 	bl	800cd84 <_Balloc>
 800c2d6:	4606      	mov	r6, r0
 800c2d8:	b928      	cbnz	r0, 800c2e6 <_dtoa_r+0x8b6>
 800c2da:	4b82      	ldr	r3, [pc, #520]	@ (800c4e4 <_dtoa_r+0xab4>)
 800c2dc:	4602      	mov	r2, r0
 800c2de:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800c2e2:	f7ff bbbe 	b.w	800ba62 <_dtoa_r+0x32>
 800c2e6:	692a      	ldr	r2, [r5, #16]
 800c2e8:	3202      	adds	r2, #2
 800c2ea:	0092      	lsls	r2, r2, #2
 800c2ec:	f105 010c 	add.w	r1, r5, #12
 800c2f0:	300c      	adds	r0, #12
 800c2f2:	f7ff fafe 	bl	800b8f2 <memcpy>
 800c2f6:	2201      	movs	r2, #1
 800c2f8:	4631      	mov	r1, r6
 800c2fa:	4648      	mov	r0, r9
 800c2fc:	f000 ff92 	bl	800d224 <__lshift>
 800c300:	1c7b      	adds	r3, r7, #1
 800c302:	9304      	str	r3, [sp, #16]
 800c304:	eb07 030b 	add.w	r3, r7, fp
 800c308:	9309      	str	r3, [sp, #36]	@ 0x24
 800c30a:	9b02      	ldr	r3, [sp, #8]
 800c30c:	f003 0301 	and.w	r3, r3, #1
 800c310:	46a8      	mov	r8, r5
 800c312:	9308      	str	r3, [sp, #32]
 800c314:	4605      	mov	r5, r0
 800c316:	9b04      	ldr	r3, [sp, #16]
 800c318:	9801      	ldr	r0, [sp, #4]
 800c31a:	4621      	mov	r1, r4
 800c31c:	f103 3bff 	add.w	fp, r3, #4294967295
 800c320:	f7ff fafe 	bl	800b920 <quorem>
 800c324:	4641      	mov	r1, r8
 800c326:	9002      	str	r0, [sp, #8]
 800c328:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
 800c32c:	9801      	ldr	r0, [sp, #4]
 800c32e:	f000 ffe5 	bl	800d2fc <__mcmp>
 800c332:	462a      	mov	r2, r5
 800c334:	9006      	str	r0, [sp, #24]
 800c336:	4621      	mov	r1, r4
 800c338:	4648      	mov	r0, r9
 800c33a:	f000 fffb 	bl	800d334 <__mdiff>
 800c33e:	68c2      	ldr	r2, [r0, #12]
 800c340:	4606      	mov	r6, r0
 800c342:	b9fa      	cbnz	r2, 800c384 <_dtoa_r+0x954>
 800c344:	4601      	mov	r1, r0
 800c346:	9801      	ldr	r0, [sp, #4]
 800c348:	f000 ffd8 	bl	800d2fc <__mcmp>
 800c34c:	4602      	mov	r2, r0
 800c34e:	4631      	mov	r1, r6
 800c350:	4648      	mov	r0, r9
 800c352:	920a      	str	r2, [sp, #40]	@ 0x28
 800c354:	f000 fd56 	bl	800ce04 <_Bfree>
 800c358:	9b07      	ldr	r3, [sp, #28]
 800c35a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800c35c:	9e04      	ldr	r6, [sp, #16]
 800c35e:	ea42 0103 	orr.w	r1, r2, r3
 800c362:	9b08      	ldr	r3, [sp, #32]
 800c364:	4319      	orrs	r1, r3
 800c366:	d10f      	bne.n	800c388 <_dtoa_r+0x958>
 800c368:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 800c36c:	d028      	beq.n	800c3c0 <_dtoa_r+0x990>
 800c36e:	9b06      	ldr	r3, [sp, #24]
 800c370:	2b00      	cmp	r3, #0
 800c372:	dd02      	ble.n	800c37a <_dtoa_r+0x94a>
 800c374:	9b02      	ldr	r3, [sp, #8]
 800c376:	f103 0a31 	add.w	sl, r3, #49	@ 0x31
 800c37a:	f88b a000 	strb.w	sl, [fp]
 800c37e:	e55e      	b.n	800be3e <_dtoa_r+0x40e>
 800c380:	4628      	mov	r0, r5
 800c382:	e7bd      	b.n	800c300 <_dtoa_r+0x8d0>
 800c384:	2201      	movs	r2, #1
 800c386:	e7e2      	b.n	800c34e <_dtoa_r+0x91e>
 800c388:	9b06      	ldr	r3, [sp, #24]
 800c38a:	2b00      	cmp	r3, #0
 800c38c:	db04      	blt.n	800c398 <_dtoa_r+0x968>
 800c38e:	9907      	ldr	r1, [sp, #28]
 800c390:	430b      	orrs	r3, r1
 800c392:	9908      	ldr	r1, [sp, #32]
 800c394:	430b      	orrs	r3, r1
 800c396:	d120      	bne.n	800c3da <_dtoa_r+0x9aa>
 800c398:	2a00      	cmp	r2, #0
 800c39a:	ddee      	ble.n	800c37a <_dtoa_r+0x94a>
 800c39c:	9901      	ldr	r1, [sp, #4]
 800c39e:	2201      	movs	r2, #1
 800c3a0:	4648      	mov	r0, r9
 800c3a2:	f000 ff3f 	bl	800d224 <__lshift>
 800c3a6:	4621      	mov	r1, r4
 800c3a8:	9001      	str	r0, [sp, #4]
 800c3aa:	f000 ffa7 	bl	800d2fc <__mcmp>
 800c3ae:	2800      	cmp	r0, #0
 800c3b0:	dc03      	bgt.n	800c3ba <_dtoa_r+0x98a>
 800c3b2:	d1e2      	bne.n	800c37a <_dtoa_r+0x94a>
 800c3b4:	f01a 0f01 	tst.w	sl, #1
 800c3b8:	d0df      	beq.n	800c37a <_dtoa_r+0x94a>
 800c3ba:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 800c3be:	d1d9      	bne.n	800c374 <_dtoa_r+0x944>
 800c3c0:	2339      	movs	r3, #57	@ 0x39
 800c3c2:	f88b 3000 	strb.w	r3, [fp]
 800c3c6:	4633      	mov	r3, r6
 800c3c8:	461e      	mov	r6, r3
 800c3ca:	3b01      	subs	r3, #1
 800c3cc:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800c3d0:	2a39      	cmp	r2, #57	@ 0x39
 800c3d2:	d052      	beq.n	800c47a <_dtoa_r+0xa4a>
 800c3d4:	3201      	adds	r2, #1
 800c3d6:	701a      	strb	r2, [r3, #0]
 800c3d8:	e531      	b.n	800be3e <_dtoa_r+0x40e>
 800c3da:	2a00      	cmp	r2, #0
 800c3dc:	dd07      	ble.n	800c3ee <_dtoa_r+0x9be>
 800c3de:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 800c3e2:	d0ed      	beq.n	800c3c0 <_dtoa_r+0x990>
 800c3e4:	f10a 0301 	add.w	r3, sl, #1
 800c3e8:	f88b 3000 	strb.w	r3, [fp]
 800c3ec:	e527      	b.n	800be3e <_dtoa_r+0x40e>
 800c3ee:	9b04      	ldr	r3, [sp, #16]
 800c3f0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800c3f2:	f803 ac01 	strb.w	sl, [r3, #-1]
 800c3f6:	4293      	cmp	r3, r2
 800c3f8:	d029      	beq.n	800c44e <_dtoa_r+0xa1e>
 800c3fa:	9901      	ldr	r1, [sp, #4]
 800c3fc:	2300      	movs	r3, #0
 800c3fe:	220a      	movs	r2, #10
 800c400:	4648      	mov	r0, r9
 800c402:	f000 fd21 	bl	800ce48 <__multadd>
 800c406:	45a8      	cmp	r8, r5
 800c408:	9001      	str	r0, [sp, #4]
 800c40a:	f04f 0300 	mov.w	r3, #0
 800c40e:	f04f 020a 	mov.w	r2, #10
 800c412:	4641      	mov	r1, r8
 800c414:	4648      	mov	r0, r9
 800c416:	d107      	bne.n	800c428 <_dtoa_r+0x9f8>
 800c418:	f000 fd16 	bl	800ce48 <__multadd>
 800c41c:	4680      	mov	r8, r0
 800c41e:	4605      	mov	r5, r0
 800c420:	9b04      	ldr	r3, [sp, #16]
 800c422:	3301      	adds	r3, #1
 800c424:	9304      	str	r3, [sp, #16]
 800c426:	e776      	b.n	800c316 <_dtoa_r+0x8e6>
 800c428:	f000 fd0e 	bl	800ce48 <__multadd>
 800c42c:	4629      	mov	r1, r5
 800c42e:	4680      	mov	r8, r0
 800c430:	2300      	movs	r3, #0
 800c432:	220a      	movs	r2, #10
 800c434:	4648      	mov	r0, r9
 800c436:	f000 fd07 	bl	800ce48 <__multadd>
 800c43a:	4605      	mov	r5, r0
 800c43c:	e7f0      	b.n	800c420 <_dtoa_r+0x9f0>
 800c43e:	f1bb 0f00 	cmp.w	fp, #0
 800c442:	bfcc      	ite	gt
 800c444:	465e      	movgt	r6, fp
 800c446:	2601      	movle	r6, #1
 800c448:	443e      	add	r6, r7
 800c44a:	f04f 0800 	mov.w	r8, #0
 800c44e:	9901      	ldr	r1, [sp, #4]
 800c450:	2201      	movs	r2, #1
 800c452:	4648      	mov	r0, r9
 800c454:	f000 fee6 	bl	800d224 <__lshift>
 800c458:	4621      	mov	r1, r4
 800c45a:	9001      	str	r0, [sp, #4]
 800c45c:	f000 ff4e 	bl	800d2fc <__mcmp>
 800c460:	2800      	cmp	r0, #0
 800c462:	dcb0      	bgt.n	800c3c6 <_dtoa_r+0x996>
 800c464:	d102      	bne.n	800c46c <_dtoa_r+0xa3c>
 800c466:	f01a 0f01 	tst.w	sl, #1
 800c46a:	d1ac      	bne.n	800c3c6 <_dtoa_r+0x996>
 800c46c:	4633      	mov	r3, r6
 800c46e:	461e      	mov	r6, r3
 800c470:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800c474:	2a30      	cmp	r2, #48	@ 0x30
 800c476:	d0fa      	beq.n	800c46e <_dtoa_r+0xa3e>
 800c478:	e4e1      	b.n	800be3e <_dtoa_r+0x40e>
 800c47a:	429f      	cmp	r7, r3
 800c47c:	d1a4      	bne.n	800c3c8 <_dtoa_r+0x998>
 800c47e:	9b05      	ldr	r3, [sp, #20]
 800c480:	3301      	adds	r3, #1
 800c482:	9305      	str	r3, [sp, #20]
 800c484:	2331      	movs	r3, #49	@ 0x31
 800c486:	703b      	strb	r3, [r7, #0]
 800c488:	e4d9      	b.n	800be3e <_dtoa_r+0x40e>
 800c48a:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800c48c:	4f16      	ldr	r7, [pc, #88]	@ (800c4e8 <_dtoa_r+0xab8>)
 800c48e:	b11b      	cbz	r3, 800c498 <_dtoa_r+0xa68>
 800c490:	f107 0308 	add.w	r3, r7, #8
 800c494:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 800c496:	6013      	str	r3, [r2, #0]
 800c498:	4638      	mov	r0, r7
 800c49a:	b011      	add	sp, #68	@ 0x44
 800c49c:	ecbd 8b02 	vpop	{d8}
 800c4a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c4a4:	9b07      	ldr	r3, [sp, #28]
 800c4a6:	2b01      	cmp	r3, #1
 800c4a8:	f77f ae2c 	ble.w	800c104 <_dtoa_r+0x6d4>
 800c4ac:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c4ae:	930b      	str	r3, [sp, #44]	@ 0x2c
 800c4b0:	2001      	movs	r0, #1
 800c4b2:	e64c      	b.n	800c14e <_dtoa_r+0x71e>
 800c4b4:	f1bb 0f00 	cmp.w	fp, #0
 800c4b8:	f77f aed8 	ble.w	800c26c <_dtoa_r+0x83c>
 800c4bc:	463e      	mov	r6, r7
 800c4be:	9801      	ldr	r0, [sp, #4]
 800c4c0:	4621      	mov	r1, r4
 800c4c2:	f7ff fa2d 	bl	800b920 <quorem>
 800c4c6:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
 800c4ca:	f806 ab01 	strb.w	sl, [r6], #1
 800c4ce:	1bf2      	subs	r2, r6, r7
 800c4d0:	4593      	cmp	fp, r2
 800c4d2:	ddb4      	ble.n	800c43e <_dtoa_r+0xa0e>
 800c4d4:	9901      	ldr	r1, [sp, #4]
 800c4d6:	2300      	movs	r3, #0
 800c4d8:	220a      	movs	r2, #10
 800c4da:	4648      	mov	r0, r9
 800c4dc:	f000 fcb4 	bl	800ce48 <__multadd>
 800c4e0:	9001      	str	r0, [sp, #4]
 800c4e2:	e7ec      	b.n	800c4be <_dtoa_r+0xa8e>
 800c4e4:	0800e3a2 	.word	0x0800e3a2
 800c4e8:	0800e326 	.word	0x0800e326

0800c4ec <_free_r>:
 800c4ec:	b538      	push	{r3, r4, r5, lr}
 800c4ee:	4605      	mov	r5, r0
 800c4f0:	2900      	cmp	r1, #0
 800c4f2:	d041      	beq.n	800c578 <_free_r+0x8c>
 800c4f4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c4f8:	1f0c      	subs	r4, r1, #4
 800c4fa:	2b00      	cmp	r3, #0
 800c4fc:	bfb8      	it	lt
 800c4fe:	18e4      	addlt	r4, r4, r3
 800c500:	f000 fc34 	bl	800cd6c <__malloc_lock>
 800c504:	4a1d      	ldr	r2, [pc, #116]	@ (800c57c <_free_r+0x90>)
 800c506:	6813      	ldr	r3, [r2, #0]
 800c508:	b933      	cbnz	r3, 800c518 <_free_r+0x2c>
 800c50a:	6063      	str	r3, [r4, #4]
 800c50c:	6014      	str	r4, [r2, #0]
 800c50e:	4628      	mov	r0, r5
 800c510:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c514:	f000 bc30 	b.w	800cd78 <__malloc_unlock>
 800c518:	42a3      	cmp	r3, r4
 800c51a:	d908      	bls.n	800c52e <_free_r+0x42>
 800c51c:	6820      	ldr	r0, [r4, #0]
 800c51e:	1821      	adds	r1, r4, r0
 800c520:	428b      	cmp	r3, r1
 800c522:	bf01      	itttt	eq
 800c524:	6819      	ldreq	r1, [r3, #0]
 800c526:	685b      	ldreq	r3, [r3, #4]
 800c528:	1809      	addeq	r1, r1, r0
 800c52a:	6021      	streq	r1, [r4, #0]
 800c52c:	e7ed      	b.n	800c50a <_free_r+0x1e>
 800c52e:	461a      	mov	r2, r3
 800c530:	685b      	ldr	r3, [r3, #4]
 800c532:	b10b      	cbz	r3, 800c538 <_free_r+0x4c>
 800c534:	42a3      	cmp	r3, r4
 800c536:	d9fa      	bls.n	800c52e <_free_r+0x42>
 800c538:	6811      	ldr	r1, [r2, #0]
 800c53a:	1850      	adds	r0, r2, r1
 800c53c:	42a0      	cmp	r0, r4
 800c53e:	d10b      	bne.n	800c558 <_free_r+0x6c>
 800c540:	6820      	ldr	r0, [r4, #0]
 800c542:	4401      	add	r1, r0
 800c544:	1850      	adds	r0, r2, r1
 800c546:	4283      	cmp	r3, r0
 800c548:	6011      	str	r1, [r2, #0]
 800c54a:	d1e0      	bne.n	800c50e <_free_r+0x22>
 800c54c:	6818      	ldr	r0, [r3, #0]
 800c54e:	685b      	ldr	r3, [r3, #4]
 800c550:	6053      	str	r3, [r2, #4]
 800c552:	4408      	add	r0, r1
 800c554:	6010      	str	r0, [r2, #0]
 800c556:	e7da      	b.n	800c50e <_free_r+0x22>
 800c558:	d902      	bls.n	800c560 <_free_r+0x74>
 800c55a:	230c      	movs	r3, #12
 800c55c:	602b      	str	r3, [r5, #0]
 800c55e:	e7d6      	b.n	800c50e <_free_r+0x22>
 800c560:	6820      	ldr	r0, [r4, #0]
 800c562:	1821      	adds	r1, r4, r0
 800c564:	428b      	cmp	r3, r1
 800c566:	bf04      	itt	eq
 800c568:	6819      	ldreq	r1, [r3, #0]
 800c56a:	685b      	ldreq	r3, [r3, #4]
 800c56c:	6063      	str	r3, [r4, #4]
 800c56e:	bf04      	itt	eq
 800c570:	1809      	addeq	r1, r1, r0
 800c572:	6021      	streq	r1, [r4, #0]
 800c574:	6054      	str	r4, [r2, #4]
 800c576:	e7ca      	b.n	800c50e <_free_r+0x22>
 800c578:	bd38      	pop	{r3, r4, r5, pc}
 800c57a:	bf00      	nop
 800c57c:	24000630 	.word	0x24000630

0800c580 <rshift>:
 800c580:	6903      	ldr	r3, [r0, #16]
 800c582:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800c586:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800c58a:	ea4f 1261 	mov.w	r2, r1, asr #5
 800c58e:	f100 0414 	add.w	r4, r0, #20
 800c592:	dd45      	ble.n	800c620 <rshift+0xa0>
 800c594:	f011 011f 	ands.w	r1, r1, #31
 800c598:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800c59c:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800c5a0:	d10c      	bne.n	800c5bc <rshift+0x3c>
 800c5a2:	f100 0710 	add.w	r7, r0, #16
 800c5a6:	4629      	mov	r1, r5
 800c5a8:	42b1      	cmp	r1, r6
 800c5aa:	d334      	bcc.n	800c616 <rshift+0x96>
 800c5ac:	1a9b      	subs	r3, r3, r2
 800c5ae:	009b      	lsls	r3, r3, #2
 800c5b0:	1eea      	subs	r2, r5, #3
 800c5b2:	4296      	cmp	r6, r2
 800c5b4:	bf38      	it	cc
 800c5b6:	2300      	movcc	r3, #0
 800c5b8:	4423      	add	r3, r4
 800c5ba:	e015      	b.n	800c5e8 <rshift+0x68>
 800c5bc:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800c5c0:	f1c1 0820 	rsb	r8, r1, #32
 800c5c4:	40cf      	lsrs	r7, r1
 800c5c6:	f105 0e04 	add.w	lr, r5, #4
 800c5ca:	46a1      	mov	r9, r4
 800c5cc:	4576      	cmp	r6, lr
 800c5ce:	46f4      	mov	ip, lr
 800c5d0:	d815      	bhi.n	800c5fe <rshift+0x7e>
 800c5d2:	1a9a      	subs	r2, r3, r2
 800c5d4:	0092      	lsls	r2, r2, #2
 800c5d6:	3a04      	subs	r2, #4
 800c5d8:	3501      	adds	r5, #1
 800c5da:	42ae      	cmp	r6, r5
 800c5dc:	bf38      	it	cc
 800c5de:	2200      	movcc	r2, #0
 800c5e0:	18a3      	adds	r3, r4, r2
 800c5e2:	50a7      	str	r7, [r4, r2]
 800c5e4:	b107      	cbz	r7, 800c5e8 <rshift+0x68>
 800c5e6:	3304      	adds	r3, #4
 800c5e8:	1b1a      	subs	r2, r3, r4
 800c5ea:	42a3      	cmp	r3, r4
 800c5ec:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800c5f0:	bf08      	it	eq
 800c5f2:	2300      	moveq	r3, #0
 800c5f4:	6102      	str	r2, [r0, #16]
 800c5f6:	bf08      	it	eq
 800c5f8:	6143      	streq	r3, [r0, #20]
 800c5fa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c5fe:	f8dc c000 	ldr.w	ip, [ip]
 800c602:	fa0c fc08 	lsl.w	ip, ip, r8
 800c606:	ea4c 0707 	orr.w	r7, ip, r7
 800c60a:	f849 7b04 	str.w	r7, [r9], #4
 800c60e:	f85e 7b04 	ldr.w	r7, [lr], #4
 800c612:	40cf      	lsrs	r7, r1
 800c614:	e7da      	b.n	800c5cc <rshift+0x4c>
 800c616:	f851 cb04 	ldr.w	ip, [r1], #4
 800c61a:	f847 cf04 	str.w	ip, [r7, #4]!
 800c61e:	e7c3      	b.n	800c5a8 <rshift+0x28>
 800c620:	4623      	mov	r3, r4
 800c622:	e7e1      	b.n	800c5e8 <rshift+0x68>

0800c624 <__hexdig_fun>:
 800c624:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 800c628:	2b09      	cmp	r3, #9
 800c62a:	d802      	bhi.n	800c632 <__hexdig_fun+0xe>
 800c62c:	3820      	subs	r0, #32
 800c62e:	b2c0      	uxtb	r0, r0
 800c630:	4770      	bx	lr
 800c632:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 800c636:	2b05      	cmp	r3, #5
 800c638:	d801      	bhi.n	800c63e <__hexdig_fun+0x1a>
 800c63a:	3847      	subs	r0, #71	@ 0x47
 800c63c:	e7f7      	b.n	800c62e <__hexdig_fun+0xa>
 800c63e:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 800c642:	2b05      	cmp	r3, #5
 800c644:	d801      	bhi.n	800c64a <__hexdig_fun+0x26>
 800c646:	3827      	subs	r0, #39	@ 0x27
 800c648:	e7f1      	b.n	800c62e <__hexdig_fun+0xa>
 800c64a:	2000      	movs	r0, #0
 800c64c:	4770      	bx	lr
	...

0800c650 <__gethex>:
 800c650:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c654:	b085      	sub	sp, #20
 800c656:	468a      	mov	sl, r1
 800c658:	9302      	str	r3, [sp, #8]
 800c65a:	680b      	ldr	r3, [r1, #0]
 800c65c:	9001      	str	r0, [sp, #4]
 800c65e:	4690      	mov	r8, r2
 800c660:	1c9c      	adds	r4, r3, #2
 800c662:	46a1      	mov	r9, r4
 800c664:	f814 0b01 	ldrb.w	r0, [r4], #1
 800c668:	2830      	cmp	r0, #48	@ 0x30
 800c66a:	d0fa      	beq.n	800c662 <__gethex+0x12>
 800c66c:	eba9 0303 	sub.w	r3, r9, r3
 800c670:	f1a3 0b02 	sub.w	fp, r3, #2
 800c674:	f7ff ffd6 	bl	800c624 <__hexdig_fun>
 800c678:	4605      	mov	r5, r0
 800c67a:	2800      	cmp	r0, #0
 800c67c:	d168      	bne.n	800c750 <__gethex+0x100>
 800c67e:	49a0      	ldr	r1, [pc, #640]	@ (800c900 <__gethex+0x2b0>)
 800c680:	2201      	movs	r2, #1
 800c682:	4648      	mov	r0, r9
 800c684:	f7ff f8ac 	bl	800b7e0 <strncmp>
 800c688:	4607      	mov	r7, r0
 800c68a:	2800      	cmp	r0, #0
 800c68c:	d167      	bne.n	800c75e <__gethex+0x10e>
 800c68e:	f899 0001 	ldrb.w	r0, [r9, #1]
 800c692:	4626      	mov	r6, r4
 800c694:	f7ff ffc6 	bl	800c624 <__hexdig_fun>
 800c698:	2800      	cmp	r0, #0
 800c69a:	d062      	beq.n	800c762 <__gethex+0x112>
 800c69c:	4623      	mov	r3, r4
 800c69e:	7818      	ldrb	r0, [r3, #0]
 800c6a0:	2830      	cmp	r0, #48	@ 0x30
 800c6a2:	4699      	mov	r9, r3
 800c6a4:	f103 0301 	add.w	r3, r3, #1
 800c6a8:	d0f9      	beq.n	800c69e <__gethex+0x4e>
 800c6aa:	f7ff ffbb 	bl	800c624 <__hexdig_fun>
 800c6ae:	fab0 f580 	clz	r5, r0
 800c6b2:	096d      	lsrs	r5, r5, #5
 800c6b4:	f04f 0b01 	mov.w	fp, #1
 800c6b8:	464a      	mov	r2, r9
 800c6ba:	4616      	mov	r6, r2
 800c6bc:	3201      	adds	r2, #1
 800c6be:	7830      	ldrb	r0, [r6, #0]
 800c6c0:	f7ff ffb0 	bl	800c624 <__hexdig_fun>
 800c6c4:	2800      	cmp	r0, #0
 800c6c6:	d1f8      	bne.n	800c6ba <__gethex+0x6a>
 800c6c8:	498d      	ldr	r1, [pc, #564]	@ (800c900 <__gethex+0x2b0>)
 800c6ca:	2201      	movs	r2, #1
 800c6cc:	4630      	mov	r0, r6
 800c6ce:	f7ff f887 	bl	800b7e0 <strncmp>
 800c6d2:	2800      	cmp	r0, #0
 800c6d4:	d13f      	bne.n	800c756 <__gethex+0x106>
 800c6d6:	b944      	cbnz	r4, 800c6ea <__gethex+0x9a>
 800c6d8:	1c74      	adds	r4, r6, #1
 800c6da:	4622      	mov	r2, r4
 800c6dc:	4616      	mov	r6, r2
 800c6de:	3201      	adds	r2, #1
 800c6e0:	7830      	ldrb	r0, [r6, #0]
 800c6e2:	f7ff ff9f 	bl	800c624 <__hexdig_fun>
 800c6e6:	2800      	cmp	r0, #0
 800c6e8:	d1f8      	bne.n	800c6dc <__gethex+0x8c>
 800c6ea:	1ba4      	subs	r4, r4, r6
 800c6ec:	00a7      	lsls	r7, r4, #2
 800c6ee:	7833      	ldrb	r3, [r6, #0]
 800c6f0:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 800c6f4:	2b50      	cmp	r3, #80	@ 0x50
 800c6f6:	d13e      	bne.n	800c776 <__gethex+0x126>
 800c6f8:	7873      	ldrb	r3, [r6, #1]
 800c6fa:	2b2b      	cmp	r3, #43	@ 0x2b
 800c6fc:	d033      	beq.n	800c766 <__gethex+0x116>
 800c6fe:	2b2d      	cmp	r3, #45	@ 0x2d
 800c700:	d034      	beq.n	800c76c <__gethex+0x11c>
 800c702:	1c71      	adds	r1, r6, #1
 800c704:	2400      	movs	r4, #0
 800c706:	7808      	ldrb	r0, [r1, #0]
 800c708:	f7ff ff8c 	bl	800c624 <__hexdig_fun>
 800c70c:	1e43      	subs	r3, r0, #1
 800c70e:	b2db      	uxtb	r3, r3
 800c710:	2b18      	cmp	r3, #24
 800c712:	d830      	bhi.n	800c776 <__gethex+0x126>
 800c714:	f1a0 0210 	sub.w	r2, r0, #16
 800c718:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800c71c:	f7ff ff82 	bl	800c624 <__hexdig_fun>
 800c720:	f100 3cff 	add.w	ip, r0, #4294967295
 800c724:	fa5f fc8c 	uxtb.w	ip, ip
 800c728:	f1bc 0f18 	cmp.w	ip, #24
 800c72c:	f04f 030a 	mov.w	r3, #10
 800c730:	d91e      	bls.n	800c770 <__gethex+0x120>
 800c732:	b104      	cbz	r4, 800c736 <__gethex+0xe6>
 800c734:	4252      	negs	r2, r2
 800c736:	4417      	add	r7, r2
 800c738:	f8ca 1000 	str.w	r1, [sl]
 800c73c:	b1ed      	cbz	r5, 800c77a <__gethex+0x12a>
 800c73e:	f1bb 0f00 	cmp.w	fp, #0
 800c742:	bf0c      	ite	eq
 800c744:	2506      	moveq	r5, #6
 800c746:	2500      	movne	r5, #0
 800c748:	4628      	mov	r0, r5
 800c74a:	b005      	add	sp, #20
 800c74c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c750:	2500      	movs	r5, #0
 800c752:	462c      	mov	r4, r5
 800c754:	e7b0      	b.n	800c6b8 <__gethex+0x68>
 800c756:	2c00      	cmp	r4, #0
 800c758:	d1c7      	bne.n	800c6ea <__gethex+0x9a>
 800c75a:	4627      	mov	r7, r4
 800c75c:	e7c7      	b.n	800c6ee <__gethex+0x9e>
 800c75e:	464e      	mov	r6, r9
 800c760:	462f      	mov	r7, r5
 800c762:	2501      	movs	r5, #1
 800c764:	e7c3      	b.n	800c6ee <__gethex+0x9e>
 800c766:	2400      	movs	r4, #0
 800c768:	1cb1      	adds	r1, r6, #2
 800c76a:	e7cc      	b.n	800c706 <__gethex+0xb6>
 800c76c:	2401      	movs	r4, #1
 800c76e:	e7fb      	b.n	800c768 <__gethex+0x118>
 800c770:	fb03 0002 	mla	r0, r3, r2, r0
 800c774:	e7ce      	b.n	800c714 <__gethex+0xc4>
 800c776:	4631      	mov	r1, r6
 800c778:	e7de      	b.n	800c738 <__gethex+0xe8>
 800c77a:	eba6 0309 	sub.w	r3, r6, r9
 800c77e:	3b01      	subs	r3, #1
 800c780:	4629      	mov	r1, r5
 800c782:	2b07      	cmp	r3, #7
 800c784:	dc0a      	bgt.n	800c79c <__gethex+0x14c>
 800c786:	9801      	ldr	r0, [sp, #4]
 800c788:	f000 fafc 	bl	800cd84 <_Balloc>
 800c78c:	4604      	mov	r4, r0
 800c78e:	b940      	cbnz	r0, 800c7a2 <__gethex+0x152>
 800c790:	4b5c      	ldr	r3, [pc, #368]	@ (800c904 <__gethex+0x2b4>)
 800c792:	4602      	mov	r2, r0
 800c794:	21e4      	movs	r1, #228	@ 0xe4
 800c796:	485c      	ldr	r0, [pc, #368]	@ (800c908 <__gethex+0x2b8>)
 800c798:	f001 fa5e 	bl	800dc58 <__assert_func>
 800c79c:	3101      	adds	r1, #1
 800c79e:	105b      	asrs	r3, r3, #1
 800c7a0:	e7ef      	b.n	800c782 <__gethex+0x132>
 800c7a2:	f100 0a14 	add.w	sl, r0, #20
 800c7a6:	2300      	movs	r3, #0
 800c7a8:	4655      	mov	r5, sl
 800c7aa:	469b      	mov	fp, r3
 800c7ac:	45b1      	cmp	r9, r6
 800c7ae:	d337      	bcc.n	800c820 <__gethex+0x1d0>
 800c7b0:	f845 bb04 	str.w	fp, [r5], #4
 800c7b4:	eba5 050a 	sub.w	r5, r5, sl
 800c7b8:	10ad      	asrs	r5, r5, #2
 800c7ba:	6125      	str	r5, [r4, #16]
 800c7bc:	4658      	mov	r0, fp
 800c7be:	f000 fbd3 	bl	800cf68 <__hi0bits>
 800c7c2:	016d      	lsls	r5, r5, #5
 800c7c4:	f8d8 6000 	ldr.w	r6, [r8]
 800c7c8:	1a2d      	subs	r5, r5, r0
 800c7ca:	42b5      	cmp	r5, r6
 800c7cc:	dd54      	ble.n	800c878 <__gethex+0x228>
 800c7ce:	1bad      	subs	r5, r5, r6
 800c7d0:	4629      	mov	r1, r5
 800c7d2:	4620      	mov	r0, r4
 800c7d4:	f000 ff5c 	bl	800d690 <__any_on>
 800c7d8:	4681      	mov	r9, r0
 800c7da:	b178      	cbz	r0, 800c7fc <__gethex+0x1ac>
 800c7dc:	1e6b      	subs	r3, r5, #1
 800c7de:	1159      	asrs	r1, r3, #5
 800c7e0:	f003 021f 	and.w	r2, r3, #31
 800c7e4:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800c7e8:	f04f 0901 	mov.w	r9, #1
 800c7ec:	fa09 f202 	lsl.w	r2, r9, r2
 800c7f0:	420a      	tst	r2, r1
 800c7f2:	d003      	beq.n	800c7fc <__gethex+0x1ac>
 800c7f4:	454b      	cmp	r3, r9
 800c7f6:	dc36      	bgt.n	800c866 <__gethex+0x216>
 800c7f8:	f04f 0902 	mov.w	r9, #2
 800c7fc:	4629      	mov	r1, r5
 800c7fe:	4620      	mov	r0, r4
 800c800:	f7ff febe 	bl	800c580 <rshift>
 800c804:	442f      	add	r7, r5
 800c806:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800c80a:	42bb      	cmp	r3, r7
 800c80c:	da42      	bge.n	800c894 <__gethex+0x244>
 800c80e:	9801      	ldr	r0, [sp, #4]
 800c810:	4621      	mov	r1, r4
 800c812:	f000 faf7 	bl	800ce04 <_Bfree>
 800c816:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800c818:	2300      	movs	r3, #0
 800c81a:	6013      	str	r3, [r2, #0]
 800c81c:	25a3      	movs	r5, #163	@ 0xa3
 800c81e:	e793      	b.n	800c748 <__gethex+0xf8>
 800c820:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 800c824:	2a2e      	cmp	r2, #46	@ 0x2e
 800c826:	d012      	beq.n	800c84e <__gethex+0x1fe>
 800c828:	2b20      	cmp	r3, #32
 800c82a:	d104      	bne.n	800c836 <__gethex+0x1e6>
 800c82c:	f845 bb04 	str.w	fp, [r5], #4
 800c830:	f04f 0b00 	mov.w	fp, #0
 800c834:	465b      	mov	r3, fp
 800c836:	7830      	ldrb	r0, [r6, #0]
 800c838:	9303      	str	r3, [sp, #12]
 800c83a:	f7ff fef3 	bl	800c624 <__hexdig_fun>
 800c83e:	9b03      	ldr	r3, [sp, #12]
 800c840:	f000 000f 	and.w	r0, r0, #15
 800c844:	4098      	lsls	r0, r3
 800c846:	ea4b 0b00 	orr.w	fp, fp, r0
 800c84a:	3304      	adds	r3, #4
 800c84c:	e7ae      	b.n	800c7ac <__gethex+0x15c>
 800c84e:	45b1      	cmp	r9, r6
 800c850:	d8ea      	bhi.n	800c828 <__gethex+0x1d8>
 800c852:	492b      	ldr	r1, [pc, #172]	@ (800c900 <__gethex+0x2b0>)
 800c854:	9303      	str	r3, [sp, #12]
 800c856:	2201      	movs	r2, #1
 800c858:	4630      	mov	r0, r6
 800c85a:	f7fe ffc1 	bl	800b7e0 <strncmp>
 800c85e:	9b03      	ldr	r3, [sp, #12]
 800c860:	2800      	cmp	r0, #0
 800c862:	d1e1      	bne.n	800c828 <__gethex+0x1d8>
 800c864:	e7a2      	b.n	800c7ac <__gethex+0x15c>
 800c866:	1ea9      	subs	r1, r5, #2
 800c868:	4620      	mov	r0, r4
 800c86a:	f000 ff11 	bl	800d690 <__any_on>
 800c86e:	2800      	cmp	r0, #0
 800c870:	d0c2      	beq.n	800c7f8 <__gethex+0x1a8>
 800c872:	f04f 0903 	mov.w	r9, #3
 800c876:	e7c1      	b.n	800c7fc <__gethex+0x1ac>
 800c878:	da09      	bge.n	800c88e <__gethex+0x23e>
 800c87a:	1b75      	subs	r5, r6, r5
 800c87c:	4621      	mov	r1, r4
 800c87e:	9801      	ldr	r0, [sp, #4]
 800c880:	462a      	mov	r2, r5
 800c882:	f000 fccf 	bl	800d224 <__lshift>
 800c886:	1b7f      	subs	r7, r7, r5
 800c888:	4604      	mov	r4, r0
 800c88a:	f100 0a14 	add.w	sl, r0, #20
 800c88e:	f04f 0900 	mov.w	r9, #0
 800c892:	e7b8      	b.n	800c806 <__gethex+0x1b6>
 800c894:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800c898:	42bd      	cmp	r5, r7
 800c89a:	dd6f      	ble.n	800c97c <__gethex+0x32c>
 800c89c:	1bed      	subs	r5, r5, r7
 800c89e:	42ae      	cmp	r6, r5
 800c8a0:	dc34      	bgt.n	800c90c <__gethex+0x2bc>
 800c8a2:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800c8a6:	2b02      	cmp	r3, #2
 800c8a8:	d022      	beq.n	800c8f0 <__gethex+0x2a0>
 800c8aa:	2b03      	cmp	r3, #3
 800c8ac:	d024      	beq.n	800c8f8 <__gethex+0x2a8>
 800c8ae:	2b01      	cmp	r3, #1
 800c8b0:	d115      	bne.n	800c8de <__gethex+0x28e>
 800c8b2:	42ae      	cmp	r6, r5
 800c8b4:	d113      	bne.n	800c8de <__gethex+0x28e>
 800c8b6:	2e01      	cmp	r6, #1
 800c8b8:	d10b      	bne.n	800c8d2 <__gethex+0x282>
 800c8ba:	9a02      	ldr	r2, [sp, #8]
 800c8bc:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800c8c0:	6013      	str	r3, [r2, #0]
 800c8c2:	2301      	movs	r3, #1
 800c8c4:	6123      	str	r3, [r4, #16]
 800c8c6:	f8ca 3000 	str.w	r3, [sl]
 800c8ca:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800c8cc:	2562      	movs	r5, #98	@ 0x62
 800c8ce:	601c      	str	r4, [r3, #0]
 800c8d0:	e73a      	b.n	800c748 <__gethex+0xf8>
 800c8d2:	1e71      	subs	r1, r6, #1
 800c8d4:	4620      	mov	r0, r4
 800c8d6:	f000 fedb 	bl	800d690 <__any_on>
 800c8da:	2800      	cmp	r0, #0
 800c8dc:	d1ed      	bne.n	800c8ba <__gethex+0x26a>
 800c8de:	9801      	ldr	r0, [sp, #4]
 800c8e0:	4621      	mov	r1, r4
 800c8e2:	f000 fa8f 	bl	800ce04 <_Bfree>
 800c8e6:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800c8e8:	2300      	movs	r3, #0
 800c8ea:	6013      	str	r3, [r2, #0]
 800c8ec:	2550      	movs	r5, #80	@ 0x50
 800c8ee:	e72b      	b.n	800c748 <__gethex+0xf8>
 800c8f0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c8f2:	2b00      	cmp	r3, #0
 800c8f4:	d1f3      	bne.n	800c8de <__gethex+0x28e>
 800c8f6:	e7e0      	b.n	800c8ba <__gethex+0x26a>
 800c8f8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c8fa:	2b00      	cmp	r3, #0
 800c8fc:	d1dd      	bne.n	800c8ba <__gethex+0x26a>
 800c8fe:	e7ee      	b.n	800c8de <__gethex+0x28e>
 800c900:	0800e2e8 	.word	0x0800e2e8
 800c904:	0800e3a2 	.word	0x0800e3a2
 800c908:	0800e3b3 	.word	0x0800e3b3
 800c90c:	1e6f      	subs	r7, r5, #1
 800c90e:	f1b9 0f00 	cmp.w	r9, #0
 800c912:	d130      	bne.n	800c976 <__gethex+0x326>
 800c914:	b127      	cbz	r7, 800c920 <__gethex+0x2d0>
 800c916:	4639      	mov	r1, r7
 800c918:	4620      	mov	r0, r4
 800c91a:	f000 feb9 	bl	800d690 <__any_on>
 800c91e:	4681      	mov	r9, r0
 800c920:	117a      	asrs	r2, r7, #5
 800c922:	2301      	movs	r3, #1
 800c924:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800c928:	f007 071f 	and.w	r7, r7, #31
 800c92c:	40bb      	lsls	r3, r7
 800c92e:	4213      	tst	r3, r2
 800c930:	4629      	mov	r1, r5
 800c932:	4620      	mov	r0, r4
 800c934:	bf18      	it	ne
 800c936:	f049 0902 	orrne.w	r9, r9, #2
 800c93a:	f7ff fe21 	bl	800c580 <rshift>
 800c93e:	f8d8 7004 	ldr.w	r7, [r8, #4]
 800c942:	1b76      	subs	r6, r6, r5
 800c944:	2502      	movs	r5, #2
 800c946:	f1b9 0f00 	cmp.w	r9, #0
 800c94a:	d047      	beq.n	800c9dc <__gethex+0x38c>
 800c94c:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800c950:	2b02      	cmp	r3, #2
 800c952:	d015      	beq.n	800c980 <__gethex+0x330>
 800c954:	2b03      	cmp	r3, #3
 800c956:	d017      	beq.n	800c988 <__gethex+0x338>
 800c958:	2b01      	cmp	r3, #1
 800c95a:	d109      	bne.n	800c970 <__gethex+0x320>
 800c95c:	f019 0f02 	tst.w	r9, #2
 800c960:	d006      	beq.n	800c970 <__gethex+0x320>
 800c962:	f8da 3000 	ldr.w	r3, [sl]
 800c966:	ea49 0903 	orr.w	r9, r9, r3
 800c96a:	f019 0f01 	tst.w	r9, #1
 800c96e:	d10e      	bne.n	800c98e <__gethex+0x33e>
 800c970:	f045 0510 	orr.w	r5, r5, #16
 800c974:	e032      	b.n	800c9dc <__gethex+0x38c>
 800c976:	f04f 0901 	mov.w	r9, #1
 800c97a:	e7d1      	b.n	800c920 <__gethex+0x2d0>
 800c97c:	2501      	movs	r5, #1
 800c97e:	e7e2      	b.n	800c946 <__gethex+0x2f6>
 800c980:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c982:	f1c3 0301 	rsb	r3, r3, #1
 800c986:	930f      	str	r3, [sp, #60]	@ 0x3c
 800c988:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c98a:	2b00      	cmp	r3, #0
 800c98c:	d0f0      	beq.n	800c970 <__gethex+0x320>
 800c98e:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800c992:	f104 0314 	add.w	r3, r4, #20
 800c996:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800c99a:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800c99e:	f04f 0c00 	mov.w	ip, #0
 800c9a2:	4618      	mov	r0, r3
 800c9a4:	f853 2b04 	ldr.w	r2, [r3], #4
 800c9a8:	f1b2 3fff 	cmp.w	r2, #4294967295
 800c9ac:	d01b      	beq.n	800c9e6 <__gethex+0x396>
 800c9ae:	3201      	adds	r2, #1
 800c9b0:	6002      	str	r2, [r0, #0]
 800c9b2:	2d02      	cmp	r5, #2
 800c9b4:	f104 0314 	add.w	r3, r4, #20
 800c9b8:	d13c      	bne.n	800ca34 <__gethex+0x3e4>
 800c9ba:	f8d8 2000 	ldr.w	r2, [r8]
 800c9be:	3a01      	subs	r2, #1
 800c9c0:	42b2      	cmp	r2, r6
 800c9c2:	d109      	bne.n	800c9d8 <__gethex+0x388>
 800c9c4:	1171      	asrs	r1, r6, #5
 800c9c6:	2201      	movs	r2, #1
 800c9c8:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800c9cc:	f006 061f 	and.w	r6, r6, #31
 800c9d0:	fa02 f606 	lsl.w	r6, r2, r6
 800c9d4:	421e      	tst	r6, r3
 800c9d6:	d13a      	bne.n	800ca4e <__gethex+0x3fe>
 800c9d8:	f045 0520 	orr.w	r5, r5, #32
 800c9dc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800c9de:	601c      	str	r4, [r3, #0]
 800c9e0:	9b02      	ldr	r3, [sp, #8]
 800c9e2:	601f      	str	r7, [r3, #0]
 800c9e4:	e6b0      	b.n	800c748 <__gethex+0xf8>
 800c9e6:	4299      	cmp	r1, r3
 800c9e8:	f843 cc04 	str.w	ip, [r3, #-4]
 800c9ec:	d8d9      	bhi.n	800c9a2 <__gethex+0x352>
 800c9ee:	68a3      	ldr	r3, [r4, #8]
 800c9f0:	459b      	cmp	fp, r3
 800c9f2:	db17      	blt.n	800ca24 <__gethex+0x3d4>
 800c9f4:	6861      	ldr	r1, [r4, #4]
 800c9f6:	9801      	ldr	r0, [sp, #4]
 800c9f8:	3101      	adds	r1, #1
 800c9fa:	f000 f9c3 	bl	800cd84 <_Balloc>
 800c9fe:	4681      	mov	r9, r0
 800ca00:	b918      	cbnz	r0, 800ca0a <__gethex+0x3ba>
 800ca02:	4b1a      	ldr	r3, [pc, #104]	@ (800ca6c <__gethex+0x41c>)
 800ca04:	4602      	mov	r2, r0
 800ca06:	2184      	movs	r1, #132	@ 0x84
 800ca08:	e6c5      	b.n	800c796 <__gethex+0x146>
 800ca0a:	6922      	ldr	r2, [r4, #16]
 800ca0c:	3202      	adds	r2, #2
 800ca0e:	f104 010c 	add.w	r1, r4, #12
 800ca12:	0092      	lsls	r2, r2, #2
 800ca14:	300c      	adds	r0, #12
 800ca16:	f7fe ff6c 	bl	800b8f2 <memcpy>
 800ca1a:	4621      	mov	r1, r4
 800ca1c:	9801      	ldr	r0, [sp, #4]
 800ca1e:	f000 f9f1 	bl	800ce04 <_Bfree>
 800ca22:	464c      	mov	r4, r9
 800ca24:	6923      	ldr	r3, [r4, #16]
 800ca26:	1c5a      	adds	r2, r3, #1
 800ca28:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800ca2c:	6122      	str	r2, [r4, #16]
 800ca2e:	2201      	movs	r2, #1
 800ca30:	615a      	str	r2, [r3, #20]
 800ca32:	e7be      	b.n	800c9b2 <__gethex+0x362>
 800ca34:	6922      	ldr	r2, [r4, #16]
 800ca36:	455a      	cmp	r2, fp
 800ca38:	dd0b      	ble.n	800ca52 <__gethex+0x402>
 800ca3a:	2101      	movs	r1, #1
 800ca3c:	4620      	mov	r0, r4
 800ca3e:	f7ff fd9f 	bl	800c580 <rshift>
 800ca42:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800ca46:	3701      	adds	r7, #1
 800ca48:	42bb      	cmp	r3, r7
 800ca4a:	f6ff aee0 	blt.w	800c80e <__gethex+0x1be>
 800ca4e:	2501      	movs	r5, #1
 800ca50:	e7c2      	b.n	800c9d8 <__gethex+0x388>
 800ca52:	f016 061f 	ands.w	r6, r6, #31
 800ca56:	d0fa      	beq.n	800ca4e <__gethex+0x3fe>
 800ca58:	4453      	add	r3, sl
 800ca5a:	f1c6 0620 	rsb	r6, r6, #32
 800ca5e:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800ca62:	f000 fa81 	bl	800cf68 <__hi0bits>
 800ca66:	42b0      	cmp	r0, r6
 800ca68:	dbe7      	blt.n	800ca3a <__gethex+0x3ea>
 800ca6a:	e7f0      	b.n	800ca4e <__gethex+0x3fe>
 800ca6c:	0800e3a2 	.word	0x0800e3a2

0800ca70 <L_shift>:
 800ca70:	f1c2 0208 	rsb	r2, r2, #8
 800ca74:	0092      	lsls	r2, r2, #2
 800ca76:	b570      	push	{r4, r5, r6, lr}
 800ca78:	f1c2 0620 	rsb	r6, r2, #32
 800ca7c:	6843      	ldr	r3, [r0, #4]
 800ca7e:	6804      	ldr	r4, [r0, #0]
 800ca80:	fa03 f506 	lsl.w	r5, r3, r6
 800ca84:	432c      	orrs	r4, r5
 800ca86:	40d3      	lsrs	r3, r2
 800ca88:	6004      	str	r4, [r0, #0]
 800ca8a:	f840 3f04 	str.w	r3, [r0, #4]!
 800ca8e:	4288      	cmp	r0, r1
 800ca90:	d3f4      	bcc.n	800ca7c <L_shift+0xc>
 800ca92:	bd70      	pop	{r4, r5, r6, pc}

0800ca94 <__match>:
 800ca94:	b530      	push	{r4, r5, lr}
 800ca96:	6803      	ldr	r3, [r0, #0]
 800ca98:	3301      	adds	r3, #1
 800ca9a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ca9e:	b914      	cbnz	r4, 800caa6 <__match+0x12>
 800caa0:	6003      	str	r3, [r0, #0]
 800caa2:	2001      	movs	r0, #1
 800caa4:	bd30      	pop	{r4, r5, pc}
 800caa6:	f813 2b01 	ldrb.w	r2, [r3], #1
 800caaa:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 800caae:	2d19      	cmp	r5, #25
 800cab0:	bf98      	it	ls
 800cab2:	3220      	addls	r2, #32
 800cab4:	42a2      	cmp	r2, r4
 800cab6:	d0f0      	beq.n	800ca9a <__match+0x6>
 800cab8:	2000      	movs	r0, #0
 800caba:	e7f3      	b.n	800caa4 <__match+0x10>

0800cabc <__hexnan>:
 800cabc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cac0:	680b      	ldr	r3, [r1, #0]
 800cac2:	6801      	ldr	r1, [r0, #0]
 800cac4:	115e      	asrs	r6, r3, #5
 800cac6:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800caca:	f013 031f 	ands.w	r3, r3, #31
 800cace:	b087      	sub	sp, #28
 800cad0:	bf18      	it	ne
 800cad2:	3604      	addne	r6, #4
 800cad4:	2500      	movs	r5, #0
 800cad6:	1f37      	subs	r7, r6, #4
 800cad8:	4682      	mov	sl, r0
 800cada:	4690      	mov	r8, r2
 800cadc:	9301      	str	r3, [sp, #4]
 800cade:	f846 5c04 	str.w	r5, [r6, #-4]
 800cae2:	46b9      	mov	r9, r7
 800cae4:	463c      	mov	r4, r7
 800cae6:	9502      	str	r5, [sp, #8]
 800cae8:	46ab      	mov	fp, r5
 800caea:	784a      	ldrb	r2, [r1, #1]
 800caec:	1c4b      	adds	r3, r1, #1
 800caee:	9303      	str	r3, [sp, #12]
 800caf0:	b342      	cbz	r2, 800cb44 <__hexnan+0x88>
 800caf2:	4610      	mov	r0, r2
 800caf4:	9105      	str	r1, [sp, #20]
 800caf6:	9204      	str	r2, [sp, #16]
 800caf8:	f7ff fd94 	bl	800c624 <__hexdig_fun>
 800cafc:	2800      	cmp	r0, #0
 800cafe:	d151      	bne.n	800cba4 <__hexnan+0xe8>
 800cb00:	9a04      	ldr	r2, [sp, #16]
 800cb02:	9905      	ldr	r1, [sp, #20]
 800cb04:	2a20      	cmp	r2, #32
 800cb06:	d818      	bhi.n	800cb3a <__hexnan+0x7e>
 800cb08:	9b02      	ldr	r3, [sp, #8]
 800cb0a:	459b      	cmp	fp, r3
 800cb0c:	dd13      	ble.n	800cb36 <__hexnan+0x7a>
 800cb0e:	454c      	cmp	r4, r9
 800cb10:	d206      	bcs.n	800cb20 <__hexnan+0x64>
 800cb12:	2d07      	cmp	r5, #7
 800cb14:	dc04      	bgt.n	800cb20 <__hexnan+0x64>
 800cb16:	462a      	mov	r2, r5
 800cb18:	4649      	mov	r1, r9
 800cb1a:	4620      	mov	r0, r4
 800cb1c:	f7ff ffa8 	bl	800ca70 <L_shift>
 800cb20:	4544      	cmp	r4, r8
 800cb22:	d952      	bls.n	800cbca <__hexnan+0x10e>
 800cb24:	2300      	movs	r3, #0
 800cb26:	f1a4 0904 	sub.w	r9, r4, #4
 800cb2a:	f844 3c04 	str.w	r3, [r4, #-4]
 800cb2e:	f8cd b008 	str.w	fp, [sp, #8]
 800cb32:	464c      	mov	r4, r9
 800cb34:	461d      	mov	r5, r3
 800cb36:	9903      	ldr	r1, [sp, #12]
 800cb38:	e7d7      	b.n	800caea <__hexnan+0x2e>
 800cb3a:	2a29      	cmp	r2, #41	@ 0x29
 800cb3c:	d157      	bne.n	800cbee <__hexnan+0x132>
 800cb3e:	3102      	adds	r1, #2
 800cb40:	f8ca 1000 	str.w	r1, [sl]
 800cb44:	f1bb 0f00 	cmp.w	fp, #0
 800cb48:	d051      	beq.n	800cbee <__hexnan+0x132>
 800cb4a:	454c      	cmp	r4, r9
 800cb4c:	d206      	bcs.n	800cb5c <__hexnan+0xa0>
 800cb4e:	2d07      	cmp	r5, #7
 800cb50:	dc04      	bgt.n	800cb5c <__hexnan+0xa0>
 800cb52:	462a      	mov	r2, r5
 800cb54:	4649      	mov	r1, r9
 800cb56:	4620      	mov	r0, r4
 800cb58:	f7ff ff8a 	bl	800ca70 <L_shift>
 800cb5c:	4544      	cmp	r4, r8
 800cb5e:	d936      	bls.n	800cbce <__hexnan+0x112>
 800cb60:	f1a8 0204 	sub.w	r2, r8, #4
 800cb64:	4623      	mov	r3, r4
 800cb66:	f853 1b04 	ldr.w	r1, [r3], #4
 800cb6a:	f842 1f04 	str.w	r1, [r2, #4]!
 800cb6e:	429f      	cmp	r7, r3
 800cb70:	d2f9      	bcs.n	800cb66 <__hexnan+0xaa>
 800cb72:	1b3b      	subs	r3, r7, r4
 800cb74:	f023 0303 	bic.w	r3, r3, #3
 800cb78:	3304      	adds	r3, #4
 800cb7a:	3401      	adds	r4, #1
 800cb7c:	3e03      	subs	r6, #3
 800cb7e:	42b4      	cmp	r4, r6
 800cb80:	bf88      	it	hi
 800cb82:	2304      	movhi	r3, #4
 800cb84:	4443      	add	r3, r8
 800cb86:	2200      	movs	r2, #0
 800cb88:	f843 2b04 	str.w	r2, [r3], #4
 800cb8c:	429f      	cmp	r7, r3
 800cb8e:	d2fb      	bcs.n	800cb88 <__hexnan+0xcc>
 800cb90:	683b      	ldr	r3, [r7, #0]
 800cb92:	b91b      	cbnz	r3, 800cb9c <__hexnan+0xe0>
 800cb94:	4547      	cmp	r7, r8
 800cb96:	d128      	bne.n	800cbea <__hexnan+0x12e>
 800cb98:	2301      	movs	r3, #1
 800cb9a:	603b      	str	r3, [r7, #0]
 800cb9c:	2005      	movs	r0, #5
 800cb9e:	b007      	add	sp, #28
 800cba0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cba4:	3501      	adds	r5, #1
 800cba6:	2d08      	cmp	r5, #8
 800cba8:	f10b 0b01 	add.w	fp, fp, #1
 800cbac:	dd06      	ble.n	800cbbc <__hexnan+0x100>
 800cbae:	4544      	cmp	r4, r8
 800cbb0:	d9c1      	bls.n	800cb36 <__hexnan+0x7a>
 800cbb2:	2300      	movs	r3, #0
 800cbb4:	f844 3c04 	str.w	r3, [r4, #-4]
 800cbb8:	2501      	movs	r5, #1
 800cbba:	3c04      	subs	r4, #4
 800cbbc:	6822      	ldr	r2, [r4, #0]
 800cbbe:	f000 000f 	and.w	r0, r0, #15
 800cbc2:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800cbc6:	6020      	str	r0, [r4, #0]
 800cbc8:	e7b5      	b.n	800cb36 <__hexnan+0x7a>
 800cbca:	2508      	movs	r5, #8
 800cbcc:	e7b3      	b.n	800cb36 <__hexnan+0x7a>
 800cbce:	9b01      	ldr	r3, [sp, #4]
 800cbd0:	2b00      	cmp	r3, #0
 800cbd2:	d0dd      	beq.n	800cb90 <__hexnan+0xd4>
 800cbd4:	f1c3 0320 	rsb	r3, r3, #32
 800cbd8:	f04f 32ff 	mov.w	r2, #4294967295
 800cbdc:	40da      	lsrs	r2, r3
 800cbde:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800cbe2:	4013      	ands	r3, r2
 800cbe4:	f846 3c04 	str.w	r3, [r6, #-4]
 800cbe8:	e7d2      	b.n	800cb90 <__hexnan+0xd4>
 800cbea:	3f04      	subs	r7, #4
 800cbec:	e7d0      	b.n	800cb90 <__hexnan+0xd4>
 800cbee:	2004      	movs	r0, #4
 800cbf0:	e7d5      	b.n	800cb9e <__hexnan+0xe2>
	...

0800cbf4 <malloc>:
 800cbf4:	4b02      	ldr	r3, [pc, #8]	@ (800cc00 <malloc+0xc>)
 800cbf6:	4601      	mov	r1, r0
 800cbf8:	6818      	ldr	r0, [r3, #0]
 800cbfa:	f000 b825 	b.w	800cc48 <_malloc_r>
 800cbfe:	bf00      	nop
 800cc00:	24000188 	.word	0x24000188

0800cc04 <sbrk_aligned>:
 800cc04:	b570      	push	{r4, r5, r6, lr}
 800cc06:	4e0f      	ldr	r6, [pc, #60]	@ (800cc44 <sbrk_aligned+0x40>)
 800cc08:	460c      	mov	r4, r1
 800cc0a:	6831      	ldr	r1, [r6, #0]
 800cc0c:	4605      	mov	r5, r0
 800cc0e:	b911      	cbnz	r1, 800cc16 <sbrk_aligned+0x12>
 800cc10:	f001 f812 	bl	800dc38 <_sbrk_r>
 800cc14:	6030      	str	r0, [r6, #0]
 800cc16:	4621      	mov	r1, r4
 800cc18:	4628      	mov	r0, r5
 800cc1a:	f001 f80d 	bl	800dc38 <_sbrk_r>
 800cc1e:	1c43      	adds	r3, r0, #1
 800cc20:	d103      	bne.n	800cc2a <sbrk_aligned+0x26>
 800cc22:	f04f 34ff 	mov.w	r4, #4294967295
 800cc26:	4620      	mov	r0, r4
 800cc28:	bd70      	pop	{r4, r5, r6, pc}
 800cc2a:	1cc4      	adds	r4, r0, #3
 800cc2c:	f024 0403 	bic.w	r4, r4, #3
 800cc30:	42a0      	cmp	r0, r4
 800cc32:	d0f8      	beq.n	800cc26 <sbrk_aligned+0x22>
 800cc34:	1a21      	subs	r1, r4, r0
 800cc36:	4628      	mov	r0, r5
 800cc38:	f000 fffe 	bl	800dc38 <_sbrk_r>
 800cc3c:	3001      	adds	r0, #1
 800cc3e:	d1f2      	bne.n	800cc26 <sbrk_aligned+0x22>
 800cc40:	e7ef      	b.n	800cc22 <sbrk_aligned+0x1e>
 800cc42:	bf00      	nop
 800cc44:	2400062c 	.word	0x2400062c

0800cc48 <_malloc_r>:
 800cc48:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800cc4c:	1ccd      	adds	r5, r1, #3
 800cc4e:	f025 0503 	bic.w	r5, r5, #3
 800cc52:	3508      	adds	r5, #8
 800cc54:	2d0c      	cmp	r5, #12
 800cc56:	bf38      	it	cc
 800cc58:	250c      	movcc	r5, #12
 800cc5a:	2d00      	cmp	r5, #0
 800cc5c:	4606      	mov	r6, r0
 800cc5e:	db01      	blt.n	800cc64 <_malloc_r+0x1c>
 800cc60:	42a9      	cmp	r1, r5
 800cc62:	d904      	bls.n	800cc6e <_malloc_r+0x26>
 800cc64:	230c      	movs	r3, #12
 800cc66:	6033      	str	r3, [r6, #0]
 800cc68:	2000      	movs	r0, #0
 800cc6a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cc6e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800cd44 <_malloc_r+0xfc>
 800cc72:	f000 f87b 	bl	800cd6c <__malloc_lock>
 800cc76:	f8d8 3000 	ldr.w	r3, [r8]
 800cc7a:	461c      	mov	r4, r3
 800cc7c:	bb44      	cbnz	r4, 800ccd0 <_malloc_r+0x88>
 800cc7e:	4629      	mov	r1, r5
 800cc80:	4630      	mov	r0, r6
 800cc82:	f7ff ffbf 	bl	800cc04 <sbrk_aligned>
 800cc86:	1c43      	adds	r3, r0, #1
 800cc88:	4604      	mov	r4, r0
 800cc8a:	d158      	bne.n	800cd3e <_malloc_r+0xf6>
 800cc8c:	f8d8 4000 	ldr.w	r4, [r8]
 800cc90:	4627      	mov	r7, r4
 800cc92:	2f00      	cmp	r7, #0
 800cc94:	d143      	bne.n	800cd1e <_malloc_r+0xd6>
 800cc96:	2c00      	cmp	r4, #0
 800cc98:	d04b      	beq.n	800cd32 <_malloc_r+0xea>
 800cc9a:	6823      	ldr	r3, [r4, #0]
 800cc9c:	4639      	mov	r1, r7
 800cc9e:	4630      	mov	r0, r6
 800cca0:	eb04 0903 	add.w	r9, r4, r3
 800cca4:	f000 ffc8 	bl	800dc38 <_sbrk_r>
 800cca8:	4581      	cmp	r9, r0
 800ccaa:	d142      	bne.n	800cd32 <_malloc_r+0xea>
 800ccac:	6821      	ldr	r1, [r4, #0]
 800ccae:	1a6d      	subs	r5, r5, r1
 800ccb0:	4629      	mov	r1, r5
 800ccb2:	4630      	mov	r0, r6
 800ccb4:	f7ff ffa6 	bl	800cc04 <sbrk_aligned>
 800ccb8:	3001      	adds	r0, #1
 800ccba:	d03a      	beq.n	800cd32 <_malloc_r+0xea>
 800ccbc:	6823      	ldr	r3, [r4, #0]
 800ccbe:	442b      	add	r3, r5
 800ccc0:	6023      	str	r3, [r4, #0]
 800ccc2:	f8d8 3000 	ldr.w	r3, [r8]
 800ccc6:	685a      	ldr	r2, [r3, #4]
 800ccc8:	bb62      	cbnz	r2, 800cd24 <_malloc_r+0xdc>
 800ccca:	f8c8 7000 	str.w	r7, [r8]
 800ccce:	e00f      	b.n	800ccf0 <_malloc_r+0xa8>
 800ccd0:	6822      	ldr	r2, [r4, #0]
 800ccd2:	1b52      	subs	r2, r2, r5
 800ccd4:	d420      	bmi.n	800cd18 <_malloc_r+0xd0>
 800ccd6:	2a0b      	cmp	r2, #11
 800ccd8:	d917      	bls.n	800cd0a <_malloc_r+0xc2>
 800ccda:	1961      	adds	r1, r4, r5
 800ccdc:	42a3      	cmp	r3, r4
 800ccde:	6025      	str	r5, [r4, #0]
 800cce0:	bf18      	it	ne
 800cce2:	6059      	strne	r1, [r3, #4]
 800cce4:	6863      	ldr	r3, [r4, #4]
 800cce6:	bf08      	it	eq
 800cce8:	f8c8 1000 	streq.w	r1, [r8]
 800ccec:	5162      	str	r2, [r4, r5]
 800ccee:	604b      	str	r3, [r1, #4]
 800ccf0:	4630      	mov	r0, r6
 800ccf2:	f000 f841 	bl	800cd78 <__malloc_unlock>
 800ccf6:	f104 000b 	add.w	r0, r4, #11
 800ccfa:	1d23      	adds	r3, r4, #4
 800ccfc:	f020 0007 	bic.w	r0, r0, #7
 800cd00:	1ac2      	subs	r2, r0, r3
 800cd02:	bf1c      	itt	ne
 800cd04:	1a1b      	subne	r3, r3, r0
 800cd06:	50a3      	strne	r3, [r4, r2]
 800cd08:	e7af      	b.n	800cc6a <_malloc_r+0x22>
 800cd0a:	6862      	ldr	r2, [r4, #4]
 800cd0c:	42a3      	cmp	r3, r4
 800cd0e:	bf0c      	ite	eq
 800cd10:	f8c8 2000 	streq.w	r2, [r8]
 800cd14:	605a      	strne	r2, [r3, #4]
 800cd16:	e7eb      	b.n	800ccf0 <_malloc_r+0xa8>
 800cd18:	4623      	mov	r3, r4
 800cd1a:	6864      	ldr	r4, [r4, #4]
 800cd1c:	e7ae      	b.n	800cc7c <_malloc_r+0x34>
 800cd1e:	463c      	mov	r4, r7
 800cd20:	687f      	ldr	r7, [r7, #4]
 800cd22:	e7b6      	b.n	800cc92 <_malloc_r+0x4a>
 800cd24:	461a      	mov	r2, r3
 800cd26:	685b      	ldr	r3, [r3, #4]
 800cd28:	42a3      	cmp	r3, r4
 800cd2a:	d1fb      	bne.n	800cd24 <_malloc_r+0xdc>
 800cd2c:	2300      	movs	r3, #0
 800cd2e:	6053      	str	r3, [r2, #4]
 800cd30:	e7de      	b.n	800ccf0 <_malloc_r+0xa8>
 800cd32:	230c      	movs	r3, #12
 800cd34:	6033      	str	r3, [r6, #0]
 800cd36:	4630      	mov	r0, r6
 800cd38:	f000 f81e 	bl	800cd78 <__malloc_unlock>
 800cd3c:	e794      	b.n	800cc68 <_malloc_r+0x20>
 800cd3e:	6005      	str	r5, [r0, #0]
 800cd40:	e7d6      	b.n	800ccf0 <_malloc_r+0xa8>
 800cd42:	bf00      	nop
 800cd44:	24000630 	.word	0x24000630

0800cd48 <__ascii_mbtowc>:
 800cd48:	b082      	sub	sp, #8
 800cd4a:	b901      	cbnz	r1, 800cd4e <__ascii_mbtowc+0x6>
 800cd4c:	a901      	add	r1, sp, #4
 800cd4e:	b142      	cbz	r2, 800cd62 <__ascii_mbtowc+0x1a>
 800cd50:	b14b      	cbz	r3, 800cd66 <__ascii_mbtowc+0x1e>
 800cd52:	7813      	ldrb	r3, [r2, #0]
 800cd54:	600b      	str	r3, [r1, #0]
 800cd56:	7812      	ldrb	r2, [r2, #0]
 800cd58:	1e10      	subs	r0, r2, #0
 800cd5a:	bf18      	it	ne
 800cd5c:	2001      	movne	r0, #1
 800cd5e:	b002      	add	sp, #8
 800cd60:	4770      	bx	lr
 800cd62:	4610      	mov	r0, r2
 800cd64:	e7fb      	b.n	800cd5e <__ascii_mbtowc+0x16>
 800cd66:	f06f 0001 	mvn.w	r0, #1
 800cd6a:	e7f8      	b.n	800cd5e <__ascii_mbtowc+0x16>

0800cd6c <__malloc_lock>:
 800cd6c:	4801      	ldr	r0, [pc, #4]	@ (800cd74 <__malloc_lock+0x8>)
 800cd6e:	f7fe bdbe 	b.w	800b8ee <__retarget_lock_acquire_recursive>
 800cd72:	bf00      	nop
 800cd74:	24000628 	.word	0x24000628

0800cd78 <__malloc_unlock>:
 800cd78:	4801      	ldr	r0, [pc, #4]	@ (800cd80 <__malloc_unlock+0x8>)
 800cd7a:	f7fe bdb9 	b.w	800b8f0 <__retarget_lock_release_recursive>
 800cd7e:	bf00      	nop
 800cd80:	24000628 	.word	0x24000628

0800cd84 <_Balloc>:
 800cd84:	b570      	push	{r4, r5, r6, lr}
 800cd86:	69c6      	ldr	r6, [r0, #28]
 800cd88:	4604      	mov	r4, r0
 800cd8a:	460d      	mov	r5, r1
 800cd8c:	b976      	cbnz	r6, 800cdac <_Balloc+0x28>
 800cd8e:	2010      	movs	r0, #16
 800cd90:	f7ff ff30 	bl	800cbf4 <malloc>
 800cd94:	4602      	mov	r2, r0
 800cd96:	61e0      	str	r0, [r4, #28]
 800cd98:	b920      	cbnz	r0, 800cda4 <_Balloc+0x20>
 800cd9a:	4b18      	ldr	r3, [pc, #96]	@ (800cdfc <_Balloc+0x78>)
 800cd9c:	4818      	ldr	r0, [pc, #96]	@ (800ce00 <_Balloc+0x7c>)
 800cd9e:	216b      	movs	r1, #107	@ 0x6b
 800cda0:	f000 ff5a 	bl	800dc58 <__assert_func>
 800cda4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800cda8:	6006      	str	r6, [r0, #0]
 800cdaa:	60c6      	str	r6, [r0, #12]
 800cdac:	69e6      	ldr	r6, [r4, #28]
 800cdae:	68f3      	ldr	r3, [r6, #12]
 800cdb0:	b183      	cbz	r3, 800cdd4 <_Balloc+0x50>
 800cdb2:	69e3      	ldr	r3, [r4, #28]
 800cdb4:	68db      	ldr	r3, [r3, #12]
 800cdb6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800cdba:	b9b8      	cbnz	r0, 800cdec <_Balloc+0x68>
 800cdbc:	2101      	movs	r1, #1
 800cdbe:	fa01 f605 	lsl.w	r6, r1, r5
 800cdc2:	1d72      	adds	r2, r6, #5
 800cdc4:	0092      	lsls	r2, r2, #2
 800cdc6:	4620      	mov	r0, r4
 800cdc8:	f000 ff64 	bl	800dc94 <_calloc_r>
 800cdcc:	b160      	cbz	r0, 800cde8 <_Balloc+0x64>
 800cdce:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800cdd2:	e00e      	b.n	800cdf2 <_Balloc+0x6e>
 800cdd4:	2221      	movs	r2, #33	@ 0x21
 800cdd6:	2104      	movs	r1, #4
 800cdd8:	4620      	mov	r0, r4
 800cdda:	f000 ff5b 	bl	800dc94 <_calloc_r>
 800cdde:	69e3      	ldr	r3, [r4, #28]
 800cde0:	60f0      	str	r0, [r6, #12]
 800cde2:	68db      	ldr	r3, [r3, #12]
 800cde4:	2b00      	cmp	r3, #0
 800cde6:	d1e4      	bne.n	800cdb2 <_Balloc+0x2e>
 800cde8:	2000      	movs	r0, #0
 800cdea:	bd70      	pop	{r4, r5, r6, pc}
 800cdec:	6802      	ldr	r2, [r0, #0]
 800cdee:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800cdf2:	2300      	movs	r3, #0
 800cdf4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800cdf8:	e7f7      	b.n	800cdea <_Balloc+0x66>
 800cdfa:	bf00      	nop
 800cdfc:	0800e333 	.word	0x0800e333
 800ce00:	0800e413 	.word	0x0800e413

0800ce04 <_Bfree>:
 800ce04:	b570      	push	{r4, r5, r6, lr}
 800ce06:	69c6      	ldr	r6, [r0, #28]
 800ce08:	4605      	mov	r5, r0
 800ce0a:	460c      	mov	r4, r1
 800ce0c:	b976      	cbnz	r6, 800ce2c <_Bfree+0x28>
 800ce0e:	2010      	movs	r0, #16
 800ce10:	f7ff fef0 	bl	800cbf4 <malloc>
 800ce14:	4602      	mov	r2, r0
 800ce16:	61e8      	str	r0, [r5, #28]
 800ce18:	b920      	cbnz	r0, 800ce24 <_Bfree+0x20>
 800ce1a:	4b09      	ldr	r3, [pc, #36]	@ (800ce40 <_Bfree+0x3c>)
 800ce1c:	4809      	ldr	r0, [pc, #36]	@ (800ce44 <_Bfree+0x40>)
 800ce1e:	218f      	movs	r1, #143	@ 0x8f
 800ce20:	f000 ff1a 	bl	800dc58 <__assert_func>
 800ce24:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800ce28:	6006      	str	r6, [r0, #0]
 800ce2a:	60c6      	str	r6, [r0, #12]
 800ce2c:	b13c      	cbz	r4, 800ce3e <_Bfree+0x3a>
 800ce2e:	69eb      	ldr	r3, [r5, #28]
 800ce30:	6862      	ldr	r2, [r4, #4]
 800ce32:	68db      	ldr	r3, [r3, #12]
 800ce34:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800ce38:	6021      	str	r1, [r4, #0]
 800ce3a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800ce3e:	bd70      	pop	{r4, r5, r6, pc}
 800ce40:	0800e333 	.word	0x0800e333
 800ce44:	0800e413 	.word	0x0800e413

0800ce48 <__multadd>:
 800ce48:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ce4c:	690d      	ldr	r5, [r1, #16]
 800ce4e:	4607      	mov	r7, r0
 800ce50:	460c      	mov	r4, r1
 800ce52:	461e      	mov	r6, r3
 800ce54:	f101 0c14 	add.w	ip, r1, #20
 800ce58:	2000      	movs	r0, #0
 800ce5a:	f8dc 3000 	ldr.w	r3, [ip]
 800ce5e:	b299      	uxth	r1, r3
 800ce60:	fb02 6101 	mla	r1, r2, r1, r6
 800ce64:	0c1e      	lsrs	r6, r3, #16
 800ce66:	0c0b      	lsrs	r3, r1, #16
 800ce68:	fb02 3306 	mla	r3, r2, r6, r3
 800ce6c:	b289      	uxth	r1, r1
 800ce6e:	3001      	adds	r0, #1
 800ce70:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800ce74:	4285      	cmp	r5, r0
 800ce76:	f84c 1b04 	str.w	r1, [ip], #4
 800ce7a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800ce7e:	dcec      	bgt.n	800ce5a <__multadd+0x12>
 800ce80:	b30e      	cbz	r6, 800cec6 <__multadd+0x7e>
 800ce82:	68a3      	ldr	r3, [r4, #8]
 800ce84:	42ab      	cmp	r3, r5
 800ce86:	dc19      	bgt.n	800cebc <__multadd+0x74>
 800ce88:	6861      	ldr	r1, [r4, #4]
 800ce8a:	4638      	mov	r0, r7
 800ce8c:	3101      	adds	r1, #1
 800ce8e:	f7ff ff79 	bl	800cd84 <_Balloc>
 800ce92:	4680      	mov	r8, r0
 800ce94:	b928      	cbnz	r0, 800cea2 <__multadd+0x5a>
 800ce96:	4602      	mov	r2, r0
 800ce98:	4b0c      	ldr	r3, [pc, #48]	@ (800cecc <__multadd+0x84>)
 800ce9a:	480d      	ldr	r0, [pc, #52]	@ (800ced0 <__multadd+0x88>)
 800ce9c:	21ba      	movs	r1, #186	@ 0xba
 800ce9e:	f000 fedb 	bl	800dc58 <__assert_func>
 800cea2:	6922      	ldr	r2, [r4, #16]
 800cea4:	3202      	adds	r2, #2
 800cea6:	f104 010c 	add.w	r1, r4, #12
 800ceaa:	0092      	lsls	r2, r2, #2
 800ceac:	300c      	adds	r0, #12
 800ceae:	f7fe fd20 	bl	800b8f2 <memcpy>
 800ceb2:	4621      	mov	r1, r4
 800ceb4:	4638      	mov	r0, r7
 800ceb6:	f7ff ffa5 	bl	800ce04 <_Bfree>
 800ceba:	4644      	mov	r4, r8
 800cebc:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800cec0:	3501      	adds	r5, #1
 800cec2:	615e      	str	r6, [r3, #20]
 800cec4:	6125      	str	r5, [r4, #16]
 800cec6:	4620      	mov	r0, r4
 800cec8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cecc:	0800e3a2 	.word	0x0800e3a2
 800ced0:	0800e413 	.word	0x0800e413

0800ced4 <__s2b>:
 800ced4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ced8:	460c      	mov	r4, r1
 800ceda:	4615      	mov	r5, r2
 800cedc:	461f      	mov	r7, r3
 800cede:	2209      	movs	r2, #9
 800cee0:	3308      	adds	r3, #8
 800cee2:	4606      	mov	r6, r0
 800cee4:	fb93 f3f2 	sdiv	r3, r3, r2
 800cee8:	2100      	movs	r1, #0
 800ceea:	2201      	movs	r2, #1
 800ceec:	429a      	cmp	r2, r3
 800ceee:	db09      	blt.n	800cf04 <__s2b+0x30>
 800cef0:	4630      	mov	r0, r6
 800cef2:	f7ff ff47 	bl	800cd84 <_Balloc>
 800cef6:	b940      	cbnz	r0, 800cf0a <__s2b+0x36>
 800cef8:	4602      	mov	r2, r0
 800cefa:	4b19      	ldr	r3, [pc, #100]	@ (800cf60 <__s2b+0x8c>)
 800cefc:	4819      	ldr	r0, [pc, #100]	@ (800cf64 <__s2b+0x90>)
 800cefe:	21d3      	movs	r1, #211	@ 0xd3
 800cf00:	f000 feaa 	bl	800dc58 <__assert_func>
 800cf04:	0052      	lsls	r2, r2, #1
 800cf06:	3101      	adds	r1, #1
 800cf08:	e7f0      	b.n	800ceec <__s2b+0x18>
 800cf0a:	9b08      	ldr	r3, [sp, #32]
 800cf0c:	6143      	str	r3, [r0, #20]
 800cf0e:	2d09      	cmp	r5, #9
 800cf10:	f04f 0301 	mov.w	r3, #1
 800cf14:	6103      	str	r3, [r0, #16]
 800cf16:	dd16      	ble.n	800cf46 <__s2b+0x72>
 800cf18:	f104 0909 	add.w	r9, r4, #9
 800cf1c:	46c8      	mov	r8, r9
 800cf1e:	442c      	add	r4, r5
 800cf20:	f818 3b01 	ldrb.w	r3, [r8], #1
 800cf24:	4601      	mov	r1, r0
 800cf26:	3b30      	subs	r3, #48	@ 0x30
 800cf28:	220a      	movs	r2, #10
 800cf2a:	4630      	mov	r0, r6
 800cf2c:	f7ff ff8c 	bl	800ce48 <__multadd>
 800cf30:	45a0      	cmp	r8, r4
 800cf32:	d1f5      	bne.n	800cf20 <__s2b+0x4c>
 800cf34:	f1a5 0408 	sub.w	r4, r5, #8
 800cf38:	444c      	add	r4, r9
 800cf3a:	1b2d      	subs	r5, r5, r4
 800cf3c:	1963      	adds	r3, r4, r5
 800cf3e:	42bb      	cmp	r3, r7
 800cf40:	db04      	blt.n	800cf4c <__s2b+0x78>
 800cf42:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cf46:	340a      	adds	r4, #10
 800cf48:	2509      	movs	r5, #9
 800cf4a:	e7f6      	b.n	800cf3a <__s2b+0x66>
 800cf4c:	f814 3b01 	ldrb.w	r3, [r4], #1
 800cf50:	4601      	mov	r1, r0
 800cf52:	3b30      	subs	r3, #48	@ 0x30
 800cf54:	220a      	movs	r2, #10
 800cf56:	4630      	mov	r0, r6
 800cf58:	f7ff ff76 	bl	800ce48 <__multadd>
 800cf5c:	e7ee      	b.n	800cf3c <__s2b+0x68>
 800cf5e:	bf00      	nop
 800cf60:	0800e3a2 	.word	0x0800e3a2
 800cf64:	0800e413 	.word	0x0800e413

0800cf68 <__hi0bits>:
 800cf68:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800cf6c:	4603      	mov	r3, r0
 800cf6e:	bf36      	itet	cc
 800cf70:	0403      	lslcc	r3, r0, #16
 800cf72:	2000      	movcs	r0, #0
 800cf74:	2010      	movcc	r0, #16
 800cf76:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800cf7a:	bf3c      	itt	cc
 800cf7c:	021b      	lslcc	r3, r3, #8
 800cf7e:	3008      	addcc	r0, #8
 800cf80:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800cf84:	bf3c      	itt	cc
 800cf86:	011b      	lslcc	r3, r3, #4
 800cf88:	3004      	addcc	r0, #4
 800cf8a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800cf8e:	bf3c      	itt	cc
 800cf90:	009b      	lslcc	r3, r3, #2
 800cf92:	3002      	addcc	r0, #2
 800cf94:	2b00      	cmp	r3, #0
 800cf96:	db05      	blt.n	800cfa4 <__hi0bits+0x3c>
 800cf98:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800cf9c:	f100 0001 	add.w	r0, r0, #1
 800cfa0:	bf08      	it	eq
 800cfa2:	2020      	moveq	r0, #32
 800cfa4:	4770      	bx	lr

0800cfa6 <__lo0bits>:
 800cfa6:	6803      	ldr	r3, [r0, #0]
 800cfa8:	4602      	mov	r2, r0
 800cfaa:	f013 0007 	ands.w	r0, r3, #7
 800cfae:	d00b      	beq.n	800cfc8 <__lo0bits+0x22>
 800cfb0:	07d9      	lsls	r1, r3, #31
 800cfb2:	d421      	bmi.n	800cff8 <__lo0bits+0x52>
 800cfb4:	0798      	lsls	r0, r3, #30
 800cfb6:	bf49      	itett	mi
 800cfb8:	085b      	lsrmi	r3, r3, #1
 800cfba:	089b      	lsrpl	r3, r3, #2
 800cfbc:	2001      	movmi	r0, #1
 800cfbe:	6013      	strmi	r3, [r2, #0]
 800cfc0:	bf5c      	itt	pl
 800cfc2:	6013      	strpl	r3, [r2, #0]
 800cfc4:	2002      	movpl	r0, #2
 800cfc6:	4770      	bx	lr
 800cfc8:	b299      	uxth	r1, r3
 800cfca:	b909      	cbnz	r1, 800cfd0 <__lo0bits+0x2a>
 800cfcc:	0c1b      	lsrs	r3, r3, #16
 800cfce:	2010      	movs	r0, #16
 800cfd0:	b2d9      	uxtb	r1, r3
 800cfd2:	b909      	cbnz	r1, 800cfd8 <__lo0bits+0x32>
 800cfd4:	3008      	adds	r0, #8
 800cfd6:	0a1b      	lsrs	r3, r3, #8
 800cfd8:	0719      	lsls	r1, r3, #28
 800cfda:	bf04      	itt	eq
 800cfdc:	091b      	lsreq	r3, r3, #4
 800cfde:	3004      	addeq	r0, #4
 800cfe0:	0799      	lsls	r1, r3, #30
 800cfe2:	bf04      	itt	eq
 800cfe4:	089b      	lsreq	r3, r3, #2
 800cfe6:	3002      	addeq	r0, #2
 800cfe8:	07d9      	lsls	r1, r3, #31
 800cfea:	d403      	bmi.n	800cff4 <__lo0bits+0x4e>
 800cfec:	085b      	lsrs	r3, r3, #1
 800cfee:	f100 0001 	add.w	r0, r0, #1
 800cff2:	d003      	beq.n	800cffc <__lo0bits+0x56>
 800cff4:	6013      	str	r3, [r2, #0]
 800cff6:	4770      	bx	lr
 800cff8:	2000      	movs	r0, #0
 800cffa:	4770      	bx	lr
 800cffc:	2020      	movs	r0, #32
 800cffe:	4770      	bx	lr

0800d000 <__i2b>:
 800d000:	b510      	push	{r4, lr}
 800d002:	460c      	mov	r4, r1
 800d004:	2101      	movs	r1, #1
 800d006:	f7ff febd 	bl	800cd84 <_Balloc>
 800d00a:	4602      	mov	r2, r0
 800d00c:	b928      	cbnz	r0, 800d01a <__i2b+0x1a>
 800d00e:	4b05      	ldr	r3, [pc, #20]	@ (800d024 <__i2b+0x24>)
 800d010:	4805      	ldr	r0, [pc, #20]	@ (800d028 <__i2b+0x28>)
 800d012:	f240 1145 	movw	r1, #325	@ 0x145
 800d016:	f000 fe1f 	bl	800dc58 <__assert_func>
 800d01a:	2301      	movs	r3, #1
 800d01c:	6144      	str	r4, [r0, #20]
 800d01e:	6103      	str	r3, [r0, #16]
 800d020:	bd10      	pop	{r4, pc}
 800d022:	bf00      	nop
 800d024:	0800e3a2 	.word	0x0800e3a2
 800d028:	0800e413 	.word	0x0800e413

0800d02c <__multiply>:
 800d02c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d030:	4617      	mov	r7, r2
 800d032:	690a      	ldr	r2, [r1, #16]
 800d034:	693b      	ldr	r3, [r7, #16]
 800d036:	429a      	cmp	r2, r3
 800d038:	bfa8      	it	ge
 800d03a:	463b      	movge	r3, r7
 800d03c:	4689      	mov	r9, r1
 800d03e:	bfa4      	itt	ge
 800d040:	460f      	movge	r7, r1
 800d042:	4699      	movge	r9, r3
 800d044:	693d      	ldr	r5, [r7, #16]
 800d046:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800d04a:	68bb      	ldr	r3, [r7, #8]
 800d04c:	6879      	ldr	r1, [r7, #4]
 800d04e:	eb05 060a 	add.w	r6, r5, sl
 800d052:	42b3      	cmp	r3, r6
 800d054:	b085      	sub	sp, #20
 800d056:	bfb8      	it	lt
 800d058:	3101      	addlt	r1, #1
 800d05a:	f7ff fe93 	bl	800cd84 <_Balloc>
 800d05e:	b930      	cbnz	r0, 800d06e <__multiply+0x42>
 800d060:	4602      	mov	r2, r0
 800d062:	4b41      	ldr	r3, [pc, #260]	@ (800d168 <__multiply+0x13c>)
 800d064:	4841      	ldr	r0, [pc, #260]	@ (800d16c <__multiply+0x140>)
 800d066:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800d06a:	f000 fdf5 	bl	800dc58 <__assert_func>
 800d06e:	f100 0414 	add.w	r4, r0, #20
 800d072:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 800d076:	4623      	mov	r3, r4
 800d078:	2200      	movs	r2, #0
 800d07a:	4573      	cmp	r3, lr
 800d07c:	d320      	bcc.n	800d0c0 <__multiply+0x94>
 800d07e:	f107 0814 	add.w	r8, r7, #20
 800d082:	f109 0114 	add.w	r1, r9, #20
 800d086:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 800d08a:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 800d08e:	9302      	str	r3, [sp, #8]
 800d090:	1beb      	subs	r3, r5, r7
 800d092:	3b15      	subs	r3, #21
 800d094:	f023 0303 	bic.w	r3, r3, #3
 800d098:	3304      	adds	r3, #4
 800d09a:	3715      	adds	r7, #21
 800d09c:	42bd      	cmp	r5, r7
 800d09e:	bf38      	it	cc
 800d0a0:	2304      	movcc	r3, #4
 800d0a2:	9301      	str	r3, [sp, #4]
 800d0a4:	9b02      	ldr	r3, [sp, #8]
 800d0a6:	9103      	str	r1, [sp, #12]
 800d0a8:	428b      	cmp	r3, r1
 800d0aa:	d80c      	bhi.n	800d0c6 <__multiply+0x9a>
 800d0ac:	2e00      	cmp	r6, #0
 800d0ae:	dd03      	ble.n	800d0b8 <__multiply+0x8c>
 800d0b0:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800d0b4:	2b00      	cmp	r3, #0
 800d0b6:	d055      	beq.n	800d164 <__multiply+0x138>
 800d0b8:	6106      	str	r6, [r0, #16]
 800d0ba:	b005      	add	sp, #20
 800d0bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d0c0:	f843 2b04 	str.w	r2, [r3], #4
 800d0c4:	e7d9      	b.n	800d07a <__multiply+0x4e>
 800d0c6:	f8b1 a000 	ldrh.w	sl, [r1]
 800d0ca:	f1ba 0f00 	cmp.w	sl, #0
 800d0ce:	d01f      	beq.n	800d110 <__multiply+0xe4>
 800d0d0:	46c4      	mov	ip, r8
 800d0d2:	46a1      	mov	r9, r4
 800d0d4:	2700      	movs	r7, #0
 800d0d6:	f85c 2b04 	ldr.w	r2, [ip], #4
 800d0da:	f8d9 3000 	ldr.w	r3, [r9]
 800d0de:	fa1f fb82 	uxth.w	fp, r2
 800d0e2:	b29b      	uxth	r3, r3
 800d0e4:	fb0a 330b 	mla	r3, sl, fp, r3
 800d0e8:	443b      	add	r3, r7
 800d0ea:	f8d9 7000 	ldr.w	r7, [r9]
 800d0ee:	0c12      	lsrs	r2, r2, #16
 800d0f0:	0c3f      	lsrs	r7, r7, #16
 800d0f2:	fb0a 7202 	mla	r2, sl, r2, r7
 800d0f6:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 800d0fa:	b29b      	uxth	r3, r3
 800d0fc:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800d100:	4565      	cmp	r5, ip
 800d102:	f849 3b04 	str.w	r3, [r9], #4
 800d106:	ea4f 4712 	mov.w	r7, r2, lsr #16
 800d10a:	d8e4      	bhi.n	800d0d6 <__multiply+0xaa>
 800d10c:	9b01      	ldr	r3, [sp, #4]
 800d10e:	50e7      	str	r7, [r4, r3]
 800d110:	9b03      	ldr	r3, [sp, #12]
 800d112:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800d116:	3104      	adds	r1, #4
 800d118:	f1b9 0f00 	cmp.w	r9, #0
 800d11c:	d020      	beq.n	800d160 <__multiply+0x134>
 800d11e:	6823      	ldr	r3, [r4, #0]
 800d120:	4647      	mov	r7, r8
 800d122:	46a4      	mov	ip, r4
 800d124:	f04f 0a00 	mov.w	sl, #0
 800d128:	f8b7 b000 	ldrh.w	fp, [r7]
 800d12c:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 800d130:	fb09 220b 	mla	r2, r9, fp, r2
 800d134:	4452      	add	r2, sl
 800d136:	b29b      	uxth	r3, r3
 800d138:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800d13c:	f84c 3b04 	str.w	r3, [ip], #4
 800d140:	f857 3b04 	ldr.w	r3, [r7], #4
 800d144:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800d148:	f8bc 3000 	ldrh.w	r3, [ip]
 800d14c:	fb09 330a 	mla	r3, r9, sl, r3
 800d150:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 800d154:	42bd      	cmp	r5, r7
 800d156:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800d15a:	d8e5      	bhi.n	800d128 <__multiply+0xfc>
 800d15c:	9a01      	ldr	r2, [sp, #4]
 800d15e:	50a3      	str	r3, [r4, r2]
 800d160:	3404      	adds	r4, #4
 800d162:	e79f      	b.n	800d0a4 <__multiply+0x78>
 800d164:	3e01      	subs	r6, #1
 800d166:	e7a1      	b.n	800d0ac <__multiply+0x80>
 800d168:	0800e3a2 	.word	0x0800e3a2
 800d16c:	0800e413 	.word	0x0800e413

0800d170 <__pow5mult>:
 800d170:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d174:	4615      	mov	r5, r2
 800d176:	f012 0203 	ands.w	r2, r2, #3
 800d17a:	4607      	mov	r7, r0
 800d17c:	460e      	mov	r6, r1
 800d17e:	d007      	beq.n	800d190 <__pow5mult+0x20>
 800d180:	4c25      	ldr	r4, [pc, #148]	@ (800d218 <__pow5mult+0xa8>)
 800d182:	3a01      	subs	r2, #1
 800d184:	2300      	movs	r3, #0
 800d186:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800d18a:	f7ff fe5d 	bl	800ce48 <__multadd>
 800d18e:	4606      	mov	r6, r0
 800d190:	10ad      	asrs	r5, r5, #2
 800d192:	d03d      	beq.n	800d210 <__pow5mult+0xa0>
 800d194:	69fc      	ldr	r4, [r7, #28]
 800d196:	b97c      	cbnz	r4, 800d1b8 <__pow5mult+0x48>
 800d198:	2010      	movs	r0, #16
 800d19a:	f7ff fd2b 	bl	800cbf4 <malloc>
 800d19e:	4602      	mov	r2, r0
 800d1a0:	61f8      	str	r0, [r7, #28]
 800d1a2:	b928      	cbnz	r0, 800d1b0 <__pow5mult+0x40>
 800d1a4:	4b1d      	ldr	r3, [pc, #116]	@ (800d21c <__pow5mult+0xac>)
 800d1a6:	481e      	ldr	r0, [pc, #120]	@ (800d220 <__pow5mult+0xb0>)
 800d1a8:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800d1ac:	f000 fd54 	bl	800dc58 <__assert_func>
 800d1b0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800d1b4:	6004      	str	r4, [r0, #0]
 800d1b6:	60c4      	str	r4, [r0, #12]
 800d1b8:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800d1bc:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800d1c0:	b94c      	cbnz	r4, 800d1d6 <__pow5mult+0x66>
 800d1c2:	f240 2171 	movw	r1, #625	@ 0x271
 800d1c6:	4638      	mov	r0, r7
 800d1c8:	f7ff ff1a 	bl	800d000 <__i2b>
 800d1cc:	2300      	movs	r3, #0
 800d1ce:	f8c8 0008 	str.w	r0, [r8, #8]
 800d1d2:	4604      	mov	r4, r0
 800d1d4:	6003      	str	r3, [r0, #0]
 800d1d6:	f04f 0900 	mov.w	r9, #0
 800d1da:	07eb      	lsls	r3, r5, #31
 800d1dc:	d50a      	bpl.n	800d1f4 <__pow5mult+0x84>
 800d1de:	4631      	mov	r1, r6
 800d1e0:	4622      	mov	r2, r4
 800d1e2:	4638      	mov	r0, r7
 800d1e4:	f7ff ff22 	bl	800d02c <__multiply>
 800d1e8:	4631      	mov	r1, r6
 800d1ea:	4680      	mov	r8, r0
 800d1ec:	4638      	mov	r0, r7
 800d1ee:	f7ff fe09 	bl	800ce04 <_Bfree>
 800d1f2:	4646      	mov	r6, r8
 800d1f4:	106d      	asrs	r5, r5, #1
 800d1f6:	d00b      	beq.n	800d210 <__pow5mult+0xa0>
 800d1f8:	6820      	ldr	r0, [r4, #0]
 800d1fa:	b938      	cbnz	r0, 800d20c <__pow5mult+0x9c>
 800d1fc:	4622      	mov	r2, r4
 800d1fe:	4621      	mov	r1, r4
 800d200:	4638      	mov	r0, r7
 800d202:	f7ff ff13 	bl	800d02c <__multiply>
 800d206:	6020      	str	r0, [r4, #0]
 800d208:	f8c0 9000 	str.w	r9, [r0]
 800d20c:	4604      	mov	r4, r0
 800d20e:	e7e4      	b.n	800d1da <__pow5mult+0x6a>
 800d210:	4630      	mov	r0, r6
 800d212:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d216:	bf00      	nop
 800d218:	0800e614 	.word	0x0800e614
 800d21c:	0800e333 	.word	0x0800e333
 800d220:	0800e413 	.word	0x0800e413

0800d224 <__lshift>:
 800d224:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d228:	460c      	mov	r4, r1
 800d22a:	6849      	ldr	r1, [r1, #4]
 800d22c:	6923      	ldr	r3, [r4, #16]
 800d22e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800d232:	68a3      	ldr	r3, [r4, #8]
 800d234:	4607      	mov	r7, r0
 800d236:	4691      	mov	r9, r2
 800d238:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800d23c:	f108 0601 	add.w	r6, r8, #1
 800d240:	42b3      	cmp	r3, r6
 800d242:	db0b      	blt.n	800d25c <__lshift+0x38>
 800d244:	4638      	mov	r0, r7
 800d246:	f7ff fd9d 	bl	800cd84 <_Balloc>
 800d24a:	4605      	mov	r5, r0
 800d24c:	b948      	cbnz	r0, 800d262 <__lshift+0x3e>
 800d24e:	4602      	mov	r2, r0
 800d250:	4b28      	ldr	r3, [pc, #160]	@ (800d2f4 <__lshift+0xd0>)
 800d252:	4829      	ldr	r0, [pc, #164]	@ (800d2f8 <__lshift+0xd4>)
 800d254:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800d258:	f000 fcfe 	bl	800dc58 <__assert_func>
 800d25c:	3101      	adds	r1, #1
 800d25e:	005b      	lsls	r3, r3, #1
 800d260:	e7ee      	b.n	800d240 <__lshift+0x1c>
 800d262:	2300      	movs	r3, #0
 800d264:	f100 0114 	add.w	r1, r0, #20
 800d268:	f100 0210 	add.w	r2, r0, #16
 800d26c:	4618      	mov	r0, r3
 800d26e:	4553      	cmp	r3, sl
 800d270:	db33      	blt.n	800d2da <__lshift+0xb6>
 800d272:	6920      	ldr	r0, [r4, #16]
 800d274:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800d278:	f104 0314 	add.w	r3, r4, #20
 800d27c:	f019 091f 	ands.w	r9, r9, #31
 800d280:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800d284:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800d288:	d02b      	beq.n	800d2e2 <__lshift+0xbe>
 800d28a:	f1c9 0e20 	rsb	lr, r9, #32
 800d28e:	468a      	mov	sl, r1
 800d290:	2200      	movs	r2, #0
 800d292:	6818      	ldr	r0, [r3, #0]
 800d294:	fa00 f009 	lsl.w	r0, r0, r9
 800d298:	4310      	orrs	r0, r2
 800d29a:	f84a 0b04 	str.w	r0, [sl], #4
 800d29e:	f853 2b04 	ldr.w	r2, [r3], #4
 800d2a2:	459c      	cmp	ip, r3
 800d2a4:	fa22 f20e 	lsr.w	r2, r2, lr
 800d2a8:	d8f3      	bhi.n	800d292 <__lshift+0x6e>
 800d2aa:	ebac 0304 	sub.w	r3, ip, r4
 800d2ae:	3b15      	subs	r3, #21
 800d2b0:	f023 0303 	bic.w	r3, r3, #3
 800d2b4:	3304      	adds	r3, #4
 800d2b6:	f104 0015 	add.w	r0, r4, #21
 800d2ba:	4560      	cmp	r0, ip
 800d2bc:	bf88      	it	hi
 800d2be:	2304      	movhi	r3, #4
 800d2c0:	50ca      	str	r2, [r1, r3]
 800d2c2:	b10a      	cbz	r2, 800d2c8 <__lshift+0xa4>
 800d2c4:	f108 0602 	add.w	r6, r8, #2
 800d2c8:	3e01      	subs	r6, #1
 800d2ca:	4638      	mov	r0, r7
 800d2cc:	612e      	str	r6, [r5, #16]
 800d2ce:	4621      	mov	r1, r4
 800d2d0:	f7ff fd98 	bl	800ce04 <_Bfree>
 800d2d4:	4628      	mov	r0, r5
 800d2d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d2da:	f842 0f04 	str.w	r0, [r2, #4]!
 800d2de:	3301      	adds	r3, #1
 800d2e0:	e7c5      	b.n	800d26e <__lshift+0x4a>
 800d2e2:	3904      	subs	r1, #4
 800d2e4:	f853 2b04 	ldr.w	r2, [r3], #4
 800d2e8:	f841 2f04 	str.w	r2, [r1, #4]!
 800d2ec:	459c      	cmp	ip, r3
 800d2ee:	d8f9      	bhi.n	800d2e4 <__lshift+0xc0>
 800d2f0:	e7ea      	b.n	800d2c8 <__lshift+0xa4>
 800d2f2:	bf00      	nop
 800d2f4:	0800e3a2 	.word	0x0800e3a2
 800d2f8:	0800e413 	.word	0x0800e413

0800d2fc <__mcmp>:
 800d2fc:	690a      	ldr	r2, [r1, #16]
 800d2fe:	4603      	mov	r3, r0
 800d300:	6900      	ldr	r0, [r0, #16]
 800d302:	1a80      	subs	r0, r0, r2
 800d304:	b530      	push	{r4, r5, lr}
 800d306:	d10e      	bne.n	800d326 <__mcmp+0x2a>
 800d308:	3314      	adds	r3, #20
 800d30a:	3114      	adds	r1, #20
 800d30c:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800d310:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800d314:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800d318:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800d31c:	4295      	cmp	r5, r2
 800d31e:	d003      	beq.n	800d328 <__mcmp+0x2c>
 800d320:	d205      	bcs.n	800d32e <__mcmp+0x32>
 800d322:	f04f 30ff 	mov.w	r0, #4294967295
 800d326:	bd30      	pop	{r4, r5, pc}
 800d328:	42a3      	cmp	r3, r4
 800d32a:	d3f3      	bcc.n	800d314 <__mcmp+0x18>
 800d32c:	e7fb      	b.n	800d326 <__mcmp+0x2a>
 800d32e:	2001      	movs	r0, #1
 800d330:	e7f9      	b.n	800d326 <__mcmp+0x2a>
	...

0800d334 <__mdiff>:
 800d334:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d338:	4689      	mov	r9, r1
 800d33a:	4606      	mov	r6, r0
 800d33c:	4611      	mov	r1, r2
 800d33e:	4648      	mov	r0, r9
 800d340:	4614      	mov	r4, r2
 800d342:	f7ff ffdb 	bl	800d2fc <__mcmp>
 800d346:	1e05      	subs	r5, r0, #0
 800d348:	d112      	bne.n	800d370 <__mdiff+0x3c>
 800d34a:	4629      	mov	r1, r5
 800d34c:	4630      	mov	r0, r6
 800d34e:	f7ff fd19 	bl	800cd84 <_Balloc>
 800d352:	4602      	mov	r2, r0
 800d354:	b928      	cbnz	r0, 800d362 <__mdiff+0x2e>
 800d356:	4b3f      	ldr	r3, [pc, #252]	@ (800d454 <__mdiff+0x120>)
 800d358:	f240 2137 	movw	r1, #567	@ 0x237
 800d35c:	483e      	ldr	r0, [pc, #248]	@ (800d458 <__mdiff+0x124>)
 800d35e:	f000 fc7b 	bl	800dc58 <__assert_func>
 800d362:	2301      	movs	r3, #1
 800d364:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800d368:	4610      	mov	r0, r2
 800d36a:	b003      	add	sp, #12
 800d36c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d370:	bfbc      	itt	lt
 800d372:	464b      	movlt	r3, r9
 800d374:	46a1      	movlt	r9, r4
 800d376:	4630      	mov	r0, r6
 800d378:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800d37c:	bfba      	itte	lt
 800d37e:	461c      	movlt	r4, r3
 800d380:	2501      	movlt	r5, #1
 800d382:	2500      	movge	r5, #0
 800d384:	f7ff fcfe 	bl	800cd84 <_Balloc>
 800d388:	4602      	mov	r2, r0
 800d38a:	b918      	cbnz	r0, 800d394 <__mdiff+0x60>
 800d38c:	4b31      	ldr	r3, [pc, #196]	@ (800d454 <__mdiff+0x120>)
 800d38e:	f240 2145 	movw	r1, #581	@ 0x245
 800d392:	e7e3      	b.n	800d35c <__mdiff+0x28>
 800d394:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800d398:	6926      	ldr	r6, [r4, #16]
 800d39a:	60c5      	str	r5, [r0, #12]
 800d39c:	f109 0310 	add.w	r3, r9, #16
 800d3a0:	f109 0514 	add.w	r5, r9, #20
 800d3a4:	f104 0e14 	add.w	lr, r4, #20
 800d3a8:	f100 0b14 	add.w	fp, r0, #20
 800d3ac:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800d3b0:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800d3b4:	9301      	str	r3, [sp, #4]
 800d3b6:	46d9      	mov	r9, fp
 800d3b8:	f04f 0c00 	mov.w	ip, #0
 800d3bc:	9b01      	ldr	r3, [sp, #4]
 800d3be:	f85e 0b04 	ldr.w	r0, [lr], #4
 800d3c2:	f853 af04 	ldr.w	sl, [r3, #4]!
 800d3c6:	9301      	str	r3, [sp, #4]
 800d3c8:	fa1f f38a 	uxth.w	r3, sl
 800d3cc:	4619      	mov	r1, r3
 800d3ce:	b283      	uxth	r3, r0
 800d3d0:	1acb      	subs	r3, r1, r3
 800d3d2:	0c00      	lsrs	r0, r0, #16
 800d3d4:	4463      	add	r3, ip
 800d3d6:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800d3da:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800d3de:	b29b      	uxth	r3, r3
 800d3e0:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800d3e4:	4576      	cmp	r6, lr
 800d3e6:	f849 3b04 	str.w	r3, [r9], #4
 800d3ea:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800d3ee:	d8e5      	bhi.n	800d3bc <__mdiff+0x88>
 800d3f0:	1b33      	subs	r3, r6, r4
 800d3f2:	3b15      	subs	r3, #21
 800d3f4:	f023 0303 	bic.w	r3, r3, #3
 800d3f8:	3415      	adds	r4, #21
 800d3fa:	3304      	adds	r3, #4
 800d3fc:	42a6      	cmp	r6, r4
 800d3fe:	bf38      	it	cc
 800d400:	2304      	movcc	r3, #4
 800d402:	441d      	add	r5, r3
 800d404:	445b      	add	r3, fp
 800d406:	461e      	mov	r6, r3
 800d408:	462c      	mov	r4, r5
 800d40a:	4544      	cmp	r4, r8
 800d40c:	d30e      	bcc.n	800d42c <__mdiff+0xf8>
 800d40e:	f108 0103 	add.w	r1, r8, #3
 800d412:	1b49      	subs	r1, r1, r5
 800d414:	f021 0103 	bic.w	r1, r1, #3
 800d418:	3d03      	subs	r5, #3
 800d41a:	45a8      	cmp	r8, r5
 800d41c:	bf38      	it	cc
 800d41e:	2100      	movcc	r1, #0
 800d420:	440b      	add	r3, r1
 800d422:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800d426:	b191      	cbz	r1, 800d44e <__mdiff+0x11a>
 800d428:	6117      	str	r7, [r2, #16]
 800d42a:	e79d      	b.n	800d368 <__mdiff+0x34>
 800d42c:	f854 1b04 	ldr.w	r1, [r4], #4
 800d430:	46e6      	mov	lr, ip
 800d432:	0c08      	lsrs	r0, r1, #16
 800d434:	fa1c fc81 	uxtah	ip, ip, r1
 800d438:	4471      	add	r1, lr
 800d43a:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800d43e:	b289      	uxth	r1, r1
 800d440:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800d444:	f846 1b04 	str.w	r1, [r6], #4
 800d448:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800d44c:	e7dd      	b.n	800d40a <__mdiff+0xd6>
 800d44e:	3f01      	subs	r7, #1
 800d450:	e7e7      	b.n	800d422 <__mdiff+0xee>
 800d452:	bf00      	nop
 800d454:	0800e3a2 	.word	0x0800e3a2
 800d458:	0800e413 	.word	0x0800e413

0800d45c <__ulp>:
 800d45c:	b082      	sub	sp, #8
 800d45e:	ed8d 0b00 	vstr	d0, [sp]
 800d462:	9a01      	ldr	r2, [sp, #4]
 800d464:	4b0f      	ldr	r3, [pc, #60]	@ (800d4a4 <__ulp+0x48>)
 800d466:	4013      	ands	r3, r2
 800d468:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 800d46c:	2b00      	cmp	r3, #0
 800d46e:	dc08      	bgt.n	800d482 <__ulp+0x26>
 800d470:	425b      	negs	r3, r3
 800d472:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 800d476:	ea4f 5223 	mov.w	r2, r3, asr #20
 800d47a:	da04      	bge.n	800d486 <__ulp+0x2a>
 800d47c:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800d480:	4113      	asrs	r3, r2
 800d482:	2200      	movs	r2, #0
 800d484:	e008      	b.n	800d498 <__ulp+0x3c>
 800d486:	f1a2 0314 	sub.w	r3, r2, #20
 800d48a:	2b1e      	cmp	r3, #30
 800d48c:	bfda      	itte	le
 800d48e:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 800d492:	40da      	lsrle	r2, r3
 800d494:	2201      	movgt	r2, #1
 800d496:	2300      	movs	r3, #0
 800d498:	4619      	mov	r1, r3
 800d49a:	4610      	mov	r0, r2
 800d49c:	ec41 0b10 	vmov	d0, r0, r1
 800d4a0:	b002      	add	sp, #8
 800d4a2:	4770      	bx	lr
 800d4a4:	7ff00000 	.word	0x7ff00000

0800d4a8 <__b2d>:
 800d4a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d4ac:	6906      	ldr	r6, [r0, #16]
 800d4ae:	f100 0814 	add.w	r8, r0, #20
 800d4b2:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800d4b6:	1f37      	subs	r7, r6, #4
 800d4b8:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800d4bc:	4610      	mov	r0, r2
 800d4be:	f7ff fd53 	bl	800cf68 <__hi0bits>
 800d4c2:	f1c0 0320 	rsb	r3, r0, #32
 800d4c6:	280a      	cmp	r0, #10
 800d4c8:	600b      	str	r3, [r1, #0]
 800d4ca:	491b      	ldr	r1, [pc, #108]	@ (800d538 <__b2d+0x90>)
 800d4cc:	dc15      	bgt.n	800d4fa <__b2d+0x52>
 800d4ce:	f1c0 0c0b 	rsb	ip, r0, #11
 800d4d2:	fa22 f30c 	lsr.w	r3, r2, ip
 800d4d6:	45b8      	cmp	r8, r7
 800d4d8:	ea43 0501 	orr.w	r5, r3, r1
 800d4dc:	bf34      	ite	cc
 800d4de:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800d4e2:	2300      	movcs	r3, #0
 800d4e4:	3015      	adds	r0, #21
 800d4e6:	fa02 f000 	lsl.w	r0, r2, r0
 800d4ea:	fa23 f30c 	lsr.w	r3, r3, ip
 800d4ee:	4303      	orrs	r3, r0
 800d4f0:	461c      	mov	r4, r3
 800d4f2:	ec45 4b10 	vmov	d0, r4, r5
 800d4f6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d4fa:	45b8      	cmp	r8, r7
 800d4fc:	bf3a      	itte	cc
 800d4fe:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800d502:	f1a6 0708 	subcc.w	r7, r6, #8
 800d506:	2300      	movcs	r3, #0
 800d508:	380b      	subs	r0, #11
 800d50a:	d012      	beq.n	800d532 <__b2d+0x8a>
 800d50c:	f1c0 0120 	rsb	r1, r0, #32
 800d510:	fa23 f401 	lsr.w	r4, r3, r1
 800d514:	4082      	lsls	r2, r0
 800d516:	4322      	orrs	r2, r4
 800d518:	4547      	cmp	r7, r8
 800d51a:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 800d51e:	bf8c      	ite	hi
 800d520:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 800d524:	2200      	movls	r2, #0
 800d526:	4083      	lsls	r3, r0
 800d528:	40ca      	lsrs	r2, r1
 800d52a:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 800d52e:	4313      	orrs	r3, r2
 800d530:	e7de      	b.n	800d4f0 <__b2d+0x48>
 800d532:	ea42 0501 	orr.w	r5, r2, r1
 800d536:	e7db      	b.n	800d4f0 <__b2d+0x48>
 800d538:	3ff00000 	.word	0x3ff00000

0800d53c <__d2b>:
 800d53c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800d540:	460f      	mov	r7, r1
 800d542:	2101      	movs	r1, #1
 800d544:	ec59 8b10 	vmov	r8, r9, d0
 800d548:	4616      	mov	r6, r2
 800d54a:	f7ff fc1b 	bl	800cd84 <_Balloc>
 800d54e:	4604      	mov	r4, r0
 800d550:	b930      	cbnz	r0, 800d560 <__d2b+0x24>
 800d552:	4602      	mov	r2, r0
 800d554:	4b23      	ldr	r3, [pc, #140]	@ (800d5e4 <__d2b+0xa8>)
 800d556:	4824      	ldr	r0, [pc, #144]	@ (800d5e8 <__d2b+0xac>)
 800d558:	f240 310f 	movw	r1, #783	@ 0x30f
 800d55c:	f000 fb7c 	bl	800dc58 <__assert_func>
 800d560:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800d564:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800d568:	b10d      	cbz	r5, 800d56e <__d2b+0x32>
 800d56a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800d56e:	9301      	str	r3, [sp, #4]
 800d570:	f1b8 0300 	subs.w	r3, r8, #0
 800d574:	d023      	beq.n	800d5be <__d2b+0x82>
 800d576:	4668      	mov	r0, sp
 800d578:	9300      	str	r3, [sp, #0]
 800d57a:	f7ff fd14 	bl	800cfa6 <__lo0bits>
 800d57e:	e9dd 1200 	ldrd	r1, r2, [sp]
 800d582:	b1d0      	cbz	r0, 800d5ba <__d2b+0x7e>
 800d584:	f1c0 0320 	rsb	r3, r0, #32
 800d588:	fa02 f303 	lsl.w	r3, r2, r3
 800d58c:	430b      	orrs	r3, r1
 800d58e:	40c2      	lsrs	r2, r0
 800d590:	6163      	str	r3, [r4, #20]
 800d592:	9201      	str	r2, [sp, #4]
 800d594:	9b01      	ldr	r3, [sp, #4]
 800d596:	61a3      	str	r3, [r4, #24]
 800d598:	2b00      	cmp	r3, #0
 800d59a:	bf0c      	ite	eq
 800d59c:	2201      	moveq	r2, #1
 800d59e:	2202      	movne	r2, #2
 800d5a0:	6122      	str	r2, [r4, #16]
 800d5a2:	b1a5      	cbz	r5, 800d5ce <__d2b+0x92>
 800d5a4:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800d5a8:	4405      	add	r5, r0
 800d5aa:	603d      	str	r5, [r7, #0]
 800d5ac:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800d5b0:	6030      	str	r0, [r6, #0]
 800d5b2:	4620      	mov	r0, r4
 800d5b4:	b003      	add	sp, #12
 800d5b6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d5ba:	6161      	str	r1, [r4, #20]
 800d5bc:	e7ea      	b.n	800d594 <__d2b+0x58>
 800d5be:	a801      	add	r0, sp, #4
 800d5c0:	f7ff fcf1 	bl	800cfa6 <__lo0bits>
 800d5c4:	9b01      	ldr	r3, [sp, #4]
 800d5c6:	6163      	str	r3, [r4, #20]
 800d5c8:	3020      	adds	r0, #32
 800d5ca:	2201      	movs	r2, #1
 800d5cc:	e7e8      	b.n	800d5a0 <__d2b+0x64>
 800d5ce:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800d5d2:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800d5d6:	6038      	str	r0, [r7, #0]
 800d5d8:	6918      	ldr	r0, [r3, #16]
 800d5da:	f7ff fcc5 	bl	800cf68 <__hi0bits>
 800d5de:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800d5e2:	e7e5      	b.n	800d5b0 <__d2b+0x74>
 800d5e4:	0800e3a2 	.word	0x0800e3a2
 800d5e8:	0800e413 	.word	0x0800e413

0800d5ec <__ratio>:
 800d5ec:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d5f0:	4688      	mov	r8, r1
 800d5f2:	4669      	mov	r1, sp
 800d5f4:	4681      	mov	r9, r0
 800d5f6:	f7ff ff57 	bl	800d4a8 <__b2d>
 800d5fa:	a901      	add	r1, sp, #4
 800d5fc:	4640      	mov	r0, r8
 800d5fe:	ec55 4b10 	vmov	r4, r5, d0
 800d602:	f7ff ff51 	bl	800d4a8 <__b2d>
 800d606:	f8d8 3010 	ldr.w	r3, [r8, #16]
 800d60a:	f8d9 2010 	ldr.w	r2, [r9, #16]
 800d60e:	1ad2      	subs	r2, r2, r3
 800d610:	e9dd 3100 	ldrd	r3, r1, [sp]
 800d614:	1a5b      	subs	r3, r3, r1
 800d616:	eb03 1342 	add.w	r3, r3, r2, lsl #5
 800d61a:	ec57 6b10 	vmov	r6, r7, d0
 800d61e:	2b00      	cmp	r3, #0
 800d620:	bfd6      	itet	le
 800d622:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800d626:	462a      	movgt	r2, r5
 800d628:	463a      	movle	r2, r7
 800d62a:	46ab      	mov	fp, r5
 800d62c:	46a2      	mov	sl, r4
 800d62e:	bfce      	itee	gt
 800d630:	eb02 5b03 	addgt.w	fp, r2, r3, lsl #20
 800d634:	eb02 5303 	addle.w	r3, r2, r3, lsl #20
 800d638:	ee00 3a90 	vmovle	s1, r3
 800d63c:	ec4b ab17 	vmov	d7, sl, fp
 800d640:	ee87 0b00 	vdiv.f64	d0, d7, d0
 800d644:	b003      	add	sp, #12
 800d646:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800d64a <__copybits>:
 800d64a:	3901      	subs	r1, #1
 800d64c:	b570      	push	{r4, r5, r6, lr}
 800d64e:	1149      	asrs	r1, r1, #5
 800d650:	6914      	ldr	r4, [r2, #16]
 800d652:	3101      	adds	r1, #1
 800d654:	f102 0314 	add.w	r3, r2, #20
 800d658:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800d65c:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800d660:	1f05      	subs	r5, r0, #4
 800d662:	42a3      	cmp	r3, r4
 800d664:	d30c      	bcc.n	800d680 <__copybits+0x36>
 800d666:	1aa3      	subs	r3, r4, r2
 800d668:	3b11      	subs	r3, #17
 800d66a:	f023 0303 	bic.w	r3, r3, #3
 800d66e:	3211      	adds	r2, #17
 800d670:	42a2      	cmp	r2, r4
 800d672:	bf88      	it	hi
 800d674:	2300      	movhi	r3, #0
 800d676:	4418      	add	r0, r3
 800d678:	2300      	movs	r3, #0
 800d67a:	4288      	cmp	r0, r1
 800d67c:	d305      	bcc.n	800d68a <__copybits+0x40>
 800d67e:	bd70      	pop	{r4, r5, r6, pc}
 800d680:	f853 6b04 	ldr.w	r6, [r3], #4
 800d684:	f845 6f04 	str.w	r6, [r5, #4]!
 800d688:	e7eb      	b.n	800d662 <__copybits+0x18>
 800d68a:	f840 3b04 	str.w	r3, [r0], #4
 800d68e:	e7f4      	b.n	800d67a <__copybits+0x30>

0800d690 <__any_on>:
 800d690:	f100 0214 	add.w	r2, r0, #20
 800d694:	6900      	ldr	r0, [r0, #16]
 800d696:	114b      	asrs	r3, r1, #5
 800d698:	4298      	cmp	r0, r3
 800d69a:	b510      	push	{r4, lr}
 800d69c:	db11      	blt.n	800d6c2 <__any_on+0x32>
 800d69e:	dd0a      	ble.n	800d6b6 <__any_on+0x26>
 800d6a0:	f011 011f 	ands.w	r1, r1, #31
 800d6a4:	d007      	beq.n	800d6b6 <__any_on+0x26>
 800d6a6:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800d6aa:	fa24 f001 	lsr.w	r0, r4, r1
 800d6ae:	fa00 f101 	lsl.w	r1, r0, r1
 800d6b2:	428c      	cmp	r4, r1
 800d6b4:	d10b      	bne.n	800d6ce <__any_on+0x3e>
 800d6b6:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800d6ba:	4293      	cmp	r3, r2
 800d6bc:	d803      	bhi.n	800d6c6 <__any_on+0x36>
 800d6be:	2000      	movs	r0, #0
 800d6c0:	bd10      	pop	{r4, pc}
 800d6c2:	4603      	mov	r3, r0
 800d6c4:	e7f7      	b.n	800d6b6 <__any_on+0x26>
 800d6c6:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800d6ca:	2900      	cmp	r1, #0
 800d6cc:	d0f5      	beq.n	800d6ba <__any_on+0x2a>
 800d6ce:	2001      	movs	r0, #1
 800d6d0:	e7f6      	b.n	800d6c0 <__any_on+0x30>

0800d6d2 <__ascii_wctomb>:
 800d6d2:	4603      	mov	r3, r0
 800d6d4:	4608      	mov	r0, r1
 800d6d6:	b141      	cbz	r1, 800d6ea <__ascii_wctomb+0x18>
 800d6d8:	2aff      	cmp	r2, #255	@ 0xff
 800d6da:	d904      	bls.n	800d6e6 <__ascii_wctomb+0x14>
 800d6dc:	228a      	movs	r2, #138	@ 0x8a
 800d6de:	601a      	str	r2, [r3, #0]
 800d6e0:	f04f 30ff 	mov.w	r0, #4294967295
 800d6e4:	4770      	bx	lr
 800d6e6:	700a      	strb	r2, [r1, #0]
 800d6e8:	2001      	movs	r0, #1
 800d6ea:	4770      	bx	lr

0800d6ec <__sfputc_r>:
 800d6ec:	6893      	ldr	r3, [r2, #8]
 800d6ee:	3b01      	subs	r3, #1
 800d6f0:	2b00      	cmp	r3, #0
 800d6f2:	b410      	push	{r4}
 800d6f4:	6093      	str	r3, [r2, #8]
 800d6f6:	da08      	bge.n	800d70a <__sfputc_r+0x1e>
 800d6f8:	6994      	ldr	r4, [r2, #24]
 800d6fa:	42a3      	cmp	r3, r4
 800d6fc:	db01      	blt.n	800d702 <__sfputc_r+0x16>
 800d6fe:	290a      	cmp	r1, #10
 800d700:	d103      	bne.n	800d70a <__sfputc_r+0x1e>
 800d702:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d706:	f7fd bfce 	b.w	800b6a6 <__swbuf_r>
 800d70a:	6813      	ldr	r3, [r2, #0]
 800d70c:	1c58      	adds	r0, r3, #1
 800d70e:	6010      	str	r0, [r2, #0]
 800d710:	7019      	strb	r1, [r3, #0]
 800d712:	4608      	mov	r0, r1
 800d714:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d718:	4770      	bx	lr

0800d71a <__sfputs_r>:
 800d71a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d71c:	4606      	mov	r6, r0
 800d71e:	460f      	mov	r7, r1
 800d720:	4614      	mov	r4, r2
 800d722:	18d5      	adds	r5, r2, r3
 800d724:	42ac      	cmp	r4, r5
 800d726:	d101      	bne.n	800d72c <__sfputs_r+0x12>
 800d728:	2000      	movs	r0, #0
 800d72a:	e007      	b.n	800d73c <__sfputs_r+0x22>
 800d72c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d730:	463a      	mov	r2, r7
 800d732:	4630      	mov	r0, r6
 800d734:	f7ff ffda 	bl	800d6ec <__sfputc_r>
 800d738:	1c43      	adds	r3, r0, #1
 800d73a:	d1f3      	bne.n	800d724 <__sfputs_r+0xa>
 800d73c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800d740 <_vfiprintf_r>:
 800d740:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d744:	460d      	mov	r5, r1
 800d746:	b09d      	sub	sp, #116	@ 0x74
 800d748:	4614      	mov	r4, r2
 800d74a:	4698      	mov	r8, r3
 800d74c:	4606      	mov	r6, r0
 800d74e:	b118      	cbz	r0, 800d758 <_vfiprintf_r+0x18>
 800d750:	6a03      	ldr	r3, [r0, #32]
 800d752:	b90b      	cbnz	r3, 800d758 <_vfiprintf_r+0x18>
 800d754:	f7fd fe02 	bl	800b35c <__sinit>
 800d758:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800d75a:	07d9      	lsls	r1, r3, #31
 800d75c:	d405      	bmi.n	800d76a <_vfiprintf_r+0x2a>
 800d75e:	89ab      	ldrh	r3, [r5, #12]
 800d760:	059a      	lsls	r2, r3, #22
 800d762:	d402      	bmi.n	800d76a <_vfiprintf_r+0x2a>
 800d764:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800d766:	f7fe f8c2 	bl	800b8ee <__retarget_lock_acquire_recursive>
 800d76a:	89ab      	ldrh	r3, [r5, #12]
 800d76c:	071b      	lsls	r3, r3, #28
 800d76e:	d501      	bpl.n	800d774 <_vfiprintf_r+0x34>
 800d770:	692b      	ldr	r3, [r5, #16]
 800d772:	b99b      	cbnz	r3, 800d79c <_vfiprintf_r+0x5c>
 800d774:	4629      	mov	r1, r5
 800d776:	4630      	mov	r0, r6
 800d778:	f7fd ffd4 	bl	800b724 <__swsetup_r>
 800d77c:	b170      	cbz	r0, 800d79c <_vfiprintf_r+0x5c>
 800d77e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800d780:	07dc      	lsls	r4, r3, #31
 800d782:	d504      	bpl.n	800d78e <_vfiprintf_r+0x4e>
 800d784:	f04f 30ff 	mov.w	r0, #4294967295
 800d788:	b01d      	add	sp, #116	@ 0x74
 800d78a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d78e:	89ab      	ldrh	r3, [r5, #12]
 800d790:	0598      	lsls	r0, r3, #22
 800d792:	d4f7      	bmi.n	800d784 <_vfiprintf_r+0x44>
 800d794:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800d796:	f7fe f8ab 	bl	800b8f0 <__retarget_lock_release_recursive>
 800d79a:	e7f3      	b.n	800d784 <_vfiprintf_r+0x44>
 800d79c:	2300      	movs	r3, #0
 800d79e:	9309      	str	r3, [sp, #36]	@ 0x24
 800d7a0:	2320      	movs	r3, #32
 800d7a2:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800d7a6:	f8cd 800c 	str.w	r8, [sp, #12]
 800d7aa:	2330      	movs	r3, #48	@ 0x30
 800d7ac:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800d95c <_vfiprintf_r+0x21c>
 800d7b0:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800d7b4:	f04f 0901 	mov.w	r9, #1
 800d7b8:	4623      	mov	r3, r4
 800d7ba:	469a      	mov	sl, r3
 800d7bc:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d7c0:	b10a      	cbz	r2, 800d7c6 <_vfiprintf_r+0x86>
 800d7c2:	2a25      	cmp	r2, #37	@ 0x25
 800d7c4:	d1f9      	bne.n	800d7ba <_vfiprintf_r+0x7a>
 800d7c6:	ebba 0b04 	subs.w	fp, sl, r4
 800d7ca:	d00b      	beq.n	800d7e4 <_vfiprintf_r+0xa4>
 800d7cc:	465b      	mov	r3, fp
 800d7ce:	4622      	mov	r2, r4
 800d7d0:	4629      	mov	r1, r5
 800d7d2:	4630      	mov	r0, r6
 800d7d4:	f7ff ffa1 	bl	800d71a <__sfputs_r>
 800d7d8:	3001      	adds	r0, #1
 800d7da:	f000 80a7 	beq.w	800d92c <_vfiprintf_r+0x1ec>
 800d7de:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800d7e0:	445a      	add	r2, fp
 800d7e2:	9209      	str	r2, [sp, #36]	@ 0x24
 800d7e4:	f89a 3000 	ldrb.w	r3, [sl]
 800d7e8:	2b00      	cmp	r3, #0
 800d7ea:	f000 809f 	beq.w	800d92c <_vfiprintf_r+0x1ec>
 800d7ee:	2300      	movs	r3, #0
 800d7f0:	f04f 32ff 	mov.w	r2, #4294967295
 800d7f4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d7f8:	f10a 0a01 	add.w	sl, sl, #1
 800d7fc:	9304      	str	r3, [sp, #16]
 800d7fe:	9307      	str	r3, [sp, #28]
 800d800:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800d804:	931a      	str	r3, [sp, #104]	@ 0x68
 800d806:	4654      	mov	r4, sl
 800d808:	2205      	movs	r2, #5
 800d80a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d80e:	4853      	ldr	r0, [pc, #332]	@ (800d95c <_vfiprintf_r+0x21c>)
 800d810:	f7f2 fd66 	bl	80002e0 <memchr>
 800d814:	9a04      	ldr	r2, [sp, #16]
 800d816:	b9d8      	cbnz	r0, 800d850 <_vfiprintf_r+0x110>
 800d818:	06d1      	lsls	r1, r2, #27
 800d81a:	bf44      	itt	mi
 800d81c:	2320      	movmi	r3, #32
 800d81e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800d822:	0713      	lsls	r3, r2, #28
 800d824:	bf44      	itt	mi
 800d826:	232b      	movmi	r3, #43	@ 0x2b
 800d828:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800d82c:	f89a 3000 	ldrb.w	r3, [sl]
 800d830:	2b2a      	cmp	r3, #42	@ 0x2a
 800d832:	d015      	beq.n	800d860 <_vfiprintf_r+0x120>
 800d834:	9a07      	ldr	r2, [sp, #28]
 800d836:	4654      	mov	r4, sl
 800d838:	2000      	movs	r0, #0
 800d83a:	f04f 0c0a 	mov.w	ip, #10
 800d83e:	4621      	mov	r1, r4
 800d840:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d844:	3b30      	subs	r3, #48	@ 0x30
 800d846:	2b09      	cmp	r3, #9
 800d848:	d94b      	bls.n	800d8e2 <_vfiprintf_r+0x1a2>
 800d84a:	b1b0      	cbz	r0, 800d87a <_vfiprintf_r+0x13a>
 800d84c:	9207      	str	r2, [sp, #28]
 800d84e:	e014      	b.n	800d87a <_vfiprintf_r+0x13a>
 800d850:	eba0 0308 	sub.w	r3, r0, r8
 800d854:	fa09 f303 	lsl.w	r3, r9, r3
 800d858:	4313      	orrs	r3, r2
 800d85a:	9304      	str	r3, [sp, #16]
 800d85c:	46a2      	mov	sl, r4
 800d85e:	e7d2      	b.n	800d806 <_vfiprintf_r+0xc6>
 800d860:	9b03      	ldr	r3, [sp, #12]
 800d862:	1d19      	adds	r1, r3, #4
 800d864:	681b      	ldr	r3, [r3, #0]
 800d866:	9103      	str	r1, [sp, #12]
 800d868:	2b00      	cmp	r3, #0
 800d86a:	bfbb      	ittet	lt
 800d86c:	425b      	neglt	r3, r3
 800d86e:	f042 0202 	orrlt.w	r2, r2, #2
 800d872:	9307      	strge	r3, [sp, #28]
 800d874:	9307      	strlt	r3, [sp, #28]
 800d876:	bfb8      	it	lt
 800d878:	9204      	strlt	r2, [sp, #16]
 800d87a:	7823      	ldrb	r3, [r4, #0]
 800d87c:	2b2e      	cmp	r3, #46	@ 0x2e
 800d87e:	d10a      	bne.n	800d896 <_vfiprintf_r+0x156>
 800d880:	7863      	ldrb	r3, [r4, #1]
 800d882:	2b2a      	cmp	r3, #42	@ 0x2a
 800d884:	d132      	bne.n	800d8ec <_vfiprintf_r+0x1ac>
 800d886:	9b03      	ldr	r3, [sp, #12]
 800d888:	1d1a      	adds	r2, r3, #4
 800d88a:	681b      	ldr	r3, [r3, #0]
 800d88c:	9203      	str	r2, [sp, #12]
 800d88e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800d892:	3402      	adds	r4, #2
 800d894:	9305      	str	r3, [sp, #20]
 800d896:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800d96c <_vfiprintf_r+0x22c>
 800d89a:	7821      	ldrb	r1, [r4, #0]
 800d89c:	2203      	movs	r2, #3
 800d89e:	4650      	mov	r0, sl
 800d8a0:	f7f2 fd1e 	bl	80002e0 <memchr>
 800d8a4:	b138      	cbz	r0, 800d8b6 <_vfiprintf_r+0x176>
 800d8a6:	9b04      	ldr	r3, [sp, #16]
 800d8a8:	eba0 000a 	sub.w	r0, r0, sl
 800d8ac:	2240      	movs	r2, #64	@ 0x40
 800d8ae:	4082      	lsls	r2, r0
 800d8b0:	4313      	orrs	r3, r2
 800d8b2:	3401      	adds	r4, #1
 800d8b4:	9304      	str	r3, [sp, #16]
 800d8b6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d8ba:	4829      	ldr	r0, [pc, #164]	@ (800d960 <_vfiprintf_r+0x220>)
 800d8bc:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800d8c0:	2206      	movs	r2, #6
 800d8c2:	f7f2 fd0d 	bl	80002e0 <memchr>
 800d8c6:	2800      	cmp	r0, #0
 800d8c8:	d03f      	beq.n	800d94a <_vfiprintf_r+0x20a>
 800d8ca:	4b26      	ldr	r3, [pc, #152]	@ (800d964 <_vfiprintf_r+0x224>)
 800d8cc:	bb1b      	cbnz	r3, 800d916 <_vfiprintf_r+0x1d6>
 800d8ce:	9b03      	ldr	r3, [sp, #12]
 800d8d0:	3307      	adds	r3, #7
 800d8d2:	f023 0307 	bic.w	r3, r3, #7
 800d8d6:	3308      	adds	r3, #8
 800d8d8:	9303      	str	r3, [sp, #12]
 800d8da:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d8dc:	443b      	add	r3, r7
 800d8de:	9309      	str	r3, [sp, #36]	@ 0x24
 800d8e0:	e76a      	b.n	800d7b8 <_vfiprintf_r+0x78>
 800d8e2:	fb0c 3202 	mla	r2, ip, r2, r3
 800d8e6:	460c      	mov	r4, r1
 800d8e8:	2001      	movs	r0, #1
 800d8ea:	e7a8      	b.n	800d83e <_vfiprintf_r+0xfe>
 800d8ec:	2300      	movs	r3, #0
 800d8ee:	3401      	adds	r4, #1
 800d8f0:	9305      	str	r3, [sp, #20]
 800d8f2:	4619      	mov	r1, r3
 800d8f4:	f04f 0c0a 	mov.w	ip, #10
 800d8f8:	4620      	mov	r0, r4
 800d8fa:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d8fe:	3a30      	subs	r2, #48	@ 0x30
 800d900:	2a09      	cmp	r2, #9
 800d902:	d903      	bls.n	800d90c <_vfiprintf_r+0x1cc>
 800d904:	2b00      	cmp	r3, #0
 800d906:	d0c6      	beq.n	800d896 <_vfiprintf_r+0x156>
 800d908:	9105      	str	r1, [sp, #20]
 800d90a:	e7c4      	b.n	800d896 <_vfiprintf_r+0x156>
 800d90c:	fb0c 2101 	mla	r1, ip, r1, r2
 800d910:	4604      	mov	r4, r0
 800d912:	2301      	movs	r3, #1
 800d914:	e7f0      	b.n	800d8f8 <_vfiprintf_r+0x1b8>
 800d916:	ab03      	add	r3, sp, #12
 800d918:	9300      	str	r3, [sp, #0]
 800d91a:	462a      	mov	r2, r5
 800d91c:	4b12      	ldr	r3, [pc, #72]	@ (800d968 <_vfiprintf_r+0x228>)
 800d91e:	a904      	add	r1, sp, #16
 800d920:	4630      	mov	r0, r6
 800d922:	f7fd f8e9 	bl	800aaf8 <_printf_float>
 800d926:	4607      	mov	r7, r0
 800d928:	1c78      	adds	r0, r7, #1
 800d92a:	d1d6      	bne.n	800d8da <_vfiprintf_r+0x19a>
 800d92c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800d92e:	07d9      	lsls	r1, r3, #31
 800d930:	d405      	bmi.n	800d93e <_vfiprintf_r+0x1fe>
 800d932:	89ab      	ldrh	r3, [r5, #12]
 800d934:	059a      	lsls	r2, r3, #22
 800d936:	d402      	bmi.n	800d93e <_vfiprintf_r+0x1fe>
 800d938:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800d93a:	f7fd ffd9 	bl	800b8f0 <__retarget_lock_release_recursive>
 800d93e:	89ab      	ldrh	r3, [r5, #12]
 800d940:	065b      	lsls	r3, r3, #25
 800d942:	f53f af1f 	bmi.w	800d784 <_vfiprintf_r+0x44>
 800d946:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800d948:	e71e      	b.n	800d788 <_vfiprintf_r+0x48>
 800d94a:	ab03      	add	r3, sp, #12
 800d94c:	9300      	str	r3, [sp, #0]
 800d94e:	462a      	mov	r2, r5
 800d950:	4b05      	ldr	r3, [pc, #20]	@ (800d968 <_vfiprintf_r+0x228>)
 800d952:	a904      	add	r1, sp, #16
 800d954:	4630      	mov	r0, r6
 800d956:	f7fd fb57 	bl	800b008 <_printf_i>
 800d95a:	e7e4      	b.n	800d926 <_vfiprintf_r+0x1e6>
 800d95c:	0800e46c 	.word	0x0800e46c
 800d960:	0800e476 	.word	0x0800e476
 800d964:	0800aaf9 	.word	0x0800aaf9
 800d968:	0800d71b 	.word	0x0800d71b
 800d96c:	0800e472 	.word	0x0800e472

0800d970 <__sflush_r>:
 800d970:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800d974:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d978:	0716      	lsls	r6, r2, #28
 800d97a:	4605      	mov	r5, r0
 800d97c:	460c      	mov	r4, r1
 800d97e:	d454      	bmi.n	800da2a <__sflush_r+0xba>
 800d980:	684b      	ldr	r3, [r1, #4]
 800d982:	2b00      	cmp	r3, #0
 800d984:	dc02      	bgt.n	800d98c <__sflush_r+0x1c>
 800d986:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800d988:	2b00      	cmp	r3, #0
 800d98a:	dd48      	ble.n	800da1e <__sflush_r+0xae>
 800d98c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800d98e:	2e00      	cmp	r6, #0
 800d990:	d045      	beq.n	800da1e <__sflush_r+0xae>
 800d992:	2300      	movs	r3, #0
 800d994:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800d998:	682f      	ldr	r7, [r5, #0]
 800d99a:	6a21      	ldr	r1, [r4, #32]
 800d99c:	602b      	str	r3, [r5, #0]
 800d99e:	d030      	beq.n	800da02 <__sflush_r+0x92>
 800d9a0:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800d9a2:	89a3      	ldrh	r3, [r4, #12]
 800d9a4:	0759      	lsls	r1, r3, #29
 800d9a6:	d505      	bpl.n	800d9b4 <__sflush_r+0x44>
 800d9a8:	6863      	ldr	r3, [r4, #4]
 800d9aa:	1ad2      	subs	r2, r2, r3
 800d9ac:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800d9ae:	b10b      	cbz	r3, 800d9b4 <__sflush_r+0x44>
 800d9b0:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800d9b2:	1ad2      	subs	r2, r2, r3
 800d9b4:	2300      	movs	r3, #0
 800d9b6:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800d9b8:	6a21      	ldr	r1, [r4, #32]
 800d9ba:	4628      	mov	r0, r5
 800d9bc:	47b0      	blx	r6
 800d9be:	1c43      	adds	r3, r0, #1
 800d9c0:	89a3      	ldrh	r3, [r4, #12]
 800d9c2:	d106      	bne.n	800d9d2 <__sflush_r+0x62>
 800d9c4:	6829      	ldr	r1, [r5, #0]
 800d9c6:	291d      	cmp	r1, #29
 800d9c8:	d82b      	bhi.n	800da22 <__sflush_r+0xb2>
 800d9ca:	4a2a      	ldr	r2, [pc, #168]	@ (800da74 <__sflush_r+0x104>)
 800d9cc:	40ca      	lsrs	r2, r1
 800d9ce:	07d6      	lsls	r6, r2, #31
 800d9d0:	d527      	bpl.n	800da22 <__sflush_r+0xb2>
 800d9d2:	2200      	movs	r2, #0
 800d9d4:	6062      	str	r2, [r4, #4]
 800d9d6:	04d9      	lsls	r1, r3, #19
 800d9d8:	6922      	ldr	r2, [r4, #16]
 800d9da:	6022      	str	r2, [r4, #0]
 800d9dc:	d504      	bpl.n	800d9e8 <__sflush_r+0x78>
 800d9de:	1c42      	adds	r2, r0, #1
 800d9e0:	d101      	bne.n	800d9e6 <__sflush_r+0x76>
 800d9e2:	682b      	ldr	r3, [r5, #0]
 800d9e4:	b903      	cbnz	r3, 800d9e8 <__sflush_r+0x78>
 800d9e6:	6560      	str	r0, [r4, #84]	@ 0x54
 800d9e8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800d9ea:	602f      	str	r7, [r5, #0]
 800d9ec:	b1b9      	cbz	r1, 800da1e <__sflush_r+0xae>
 800d9ee:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800d9f2:	4299      	cmp	r1, r3
 800d9f4:	d002      	beq.n	800d9fc <__sflush_r+0x8c>
 800d9f6:	4628      	mov	r0, r5
 800d9f8:	f7fe fd78 	bl	800c4ec <_free_r>
 800d9fc:	2300      	movs	r3, #0
 800d9fe:	6363      	str	r3, [r4, #52]	@ 0x34
 800da00:	e00d      	b.n	800da1e <__sflush_r+0xae>
 800da02:	2301      	movs	r3, #1
 800da04:	4628      	mov	r0, r5
 800da06:	47b0      	blx	r6
 800da08:	4602      	mov	r2, r0
 800da0a:	1c50      	adds	r0, r2, #1
 800da0c:	d1c9      	bne.n	800d9a2 <__sflush_r+0x32>
 800da0e:	682b      	ldr	r3, [r5, #0]
 800da10:	2b00      	cmp	r3, #0
 800da12:	d0c6      	beq.n	800d9a2 <__sflush_r+0x32>
 800da14:	2b1d      	cmp	r3, #29
 800da16:	d001      	beq.n	800da1c <__sflush_r+0xac>
 800da18:	2b16      	cmp	r3, #22
 800da1a:	d11e      	bne.n	800da5a <__sflush_r+0xea>
 800da1c:	602f      	str	r7, [r5, #0]
 800da1e:	2000      	movs	r0, #0
 800da20:	e022      	b.n	800da68 <__sflush_r+0xf8>
 800da22:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800da26:	b21b      	sxth	r3, r3
 800da28:	e01b      	b.n	800da62 <__sflush_r+0xf2>
 800da2a:	690f      	ldr	r7, [r1, #16]
 800da2c:	2f00      	cmp	r7, #0
 800da2e:	d0f6      	beq.n	800da1e <__sflush_r+0xae>
 800da30:	0793      	lsls	r3, r2, #30
 800da32:	680e      	ldr	r6, [r1, #0]
 800da34:	bf08      	it	eq
 800da36:	694b      	ldreq	r3, [r1, #20]
 800da38:	600f      	str	r7, [r1, #0]
 800da3a:	bf18      	it	ne
 800da3c:	2300      	movne	r3, #0
 800da3e:	eba6 0807 	sub.w	r8, r6, r7
 800da42:	608b      	str	r3, [r1, #8]
 800da44:	f1b8 0f00 	cmp.w	r8, #0
 800da48:	dde9      	ble.n	800da1e <__sflush_r+0xae>
 800da4a:	6a21      	ldr	r1, [r4, #32]
 800da4c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800da4e:	4643      	mov	r3, r8
 800da50:	463a      	mov	r2, r7
 800da52:	4628      	mov	r0, r5
 800da54:	47b0      	blx	r6
 800da56:	2800      	cmp	r0, #0
 800da58:	dc08      	bgt.n	800da6c <__sflush_r+0xfc>
 800da5a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800da5e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800da62:	81a3      	strh	r3, [r4, #12]
 800da64:	f04f 30ff 	mov.w	r0, #4294967295
 800da68:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800da6c:	4407      	add	r7, r0
 800da6e:	eba8 0800 	sub.w	r8, r8, r0
 800da72:	e7e7      	b.n	800da44 <__sflush_r+0xd4>
 800da74:	20400001 	.word	0x20400001

0800da78 <_fflush_r>:
 800da78:	b538      	push	{r3, r4, r5, lr}
 800da7a:	690b      	ldr	r3, [r1, #16]
 800da7c:	4605      	mov	r5, r0
 800da7e:	460c      	mov	r4, r1
 800da80:	b913      	cbnz	r3, 800da88 <_fflush_r+0x10>
 800da82:	2500      	movs	r5, #0
 800da84:	4628      	mov	r0, r5
 800da86:	bd38      	pop	{r3, r4, r5, pc}
 800da88:	b118      	cbz	r0, 800da92 <_fflush_r+0x1a>
 800da8a:	6a03      	ldr	r3, [r0, #32]
 800da8c:	b90b      	cbnz	r3, 800da92 <_fflush_r+0x1a>
 800da8e:	f7fd fc65 	bl	800b35c <__sinit>
 800da92:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800da96:	2b00      	cmp	r3, #0
 800da98:	d0f3      	beq.n	800da82 <_fflush_r+0xa>
 800da9a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800da9c:	07d0      	lsls	r0, r2, #31
 800da9e:	d404      	bmi.n	800daaa <_fflush_r+0x32>
 800daa0:	0599      	lsls	r1, r3, #22
 800daa2:	d402      	bmi.n	800daaa <_fflush_r+0x32>
 800daa4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800daa6:	f7fd ff22 	bl	800b8ee <__retarget_lock_acquire_recursive>
 800daaa:	4628      	mov	r0, r5
 800daac:	4621      	mov	r1, r4
 800daae:	f7ff ff5f 	bl	800d970 <__sflush_r>
 800dab2:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800dab4:	07da      	lsls	r2, r3, #31
 800dab6:	4605      	mov	r5, r0
 800dab8:	d4e4      	bmi.n	800da84 <_fflush_r+0xc>
 800daba:	89a3      	ldrh	r3, [r4, #12]
 800dabc:	059b      	lsls	r3, r3, #22
 800dabe:	d4e1      	bmi.n	800da84 <_fflush_r+0xc>
 800dac0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800dac2:	f7fd ff15 	bl	800b8f0 <__retarget_lock_release_recursive>
 800dac6:	e7dd      	b.n	800da84 <_fflush_r+0xc>

0800dac8 <__swhatbuf_r>:
 800dac8:	b570      	push	{r4, r5, r6, lr}
 800daca:	460c      	mov	r4, r1
 800dacc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800dad0:	2900      	cmp	r1, #0
 800dad2:	b096      	sub	sp, #88	@ 0x58
 800dad4:	4615      	mov	r5, r2
 800dad6:	461e      	mov	r6, r3
 800dad8:	da0d      	bge.n	800daf6 <__swhatbuf_r+0x2e>
 800dada:	89a3      	ldrh	r3, [r4, #12]
 800dadc:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800dae0:	f04f 0100 	mov.w	r1, #0
 800dae4:	bf14      	ite	ne
 800dae6:	2340      	movne	r3, #64	@ 0x40
 800dae8:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800daec:	2000      	movs	r0, #0
 800daee:	6031      	str	r1, [r6, #0]
 800daf0:	602b      	str	r3, [r5, #0]
 800daf2:	b016      	add	sp, #88	@ 0x58
 800daf4:	bd70      	pop	{r4, r5, r6, pc}
 800daf6:	466a      	mov	r2, sp
 800daf8:	f000 f87c 	bl	800dbf4 <_fstat_r>
 800dafc:	2800      	cmp	r0, #0
 800dafe:	dbec      	blt.n	800dada <__swhatbuf_r+0x12>
 800db00:	9901      	ldr	r1, [sp, #4]
 800db02:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800db06:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800db0a:	4259      	negs	r1, r3
 800db0c:	4159      	adcs	r1, r3
 800db0e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800db12:	e7eb      	b.n	800daec <__swhatbuf_r+0x24>

0800db14 <__smakebuf_r>:
 800db14:	898b      	ldrh	r3, [r1, #12]
 800db16:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800db18:	079d      	lsls	r5, r3, #30
 800db1a:	4606      	mov	r6, r0
 800db1c:	460c      	mov	r4, r1
 800db1e:	d507      	bpl.n	800db30 <__smakebuf_r+0x1c>
 800db20:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800db24:	6023      	str	r3, [r4, #0]
 800db26:	6123      	str	r3, [r4, #16]
 800db28:	2301      	movs	r3, #1
 800db2a:	6163      	str	r3, [r4, #20]
 800db2c:	b003      	add	sp, #12
 800db2e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800db30:	ab01      	add	r3, sp, #4
 800db32:	466a      	mov	r2, sp
 800db34:	f7ff ffc8 	bl	800dac8 <__swhatbuf_r>
 800db38:	9f00      	ldr	r7, [sp, #0]
 800db3a:	4605      	mov	r5, r0
 800db3c:	4639      	mov	r1, r7
 800db3e:	4630      	mov	r0, r6
 800db40:	f7ff f882 	bl	800cc48 <_malloc_r>
 800db44:	b948      	cbnz	r0, 800db5a <__smakebuf_r+0x46>
 800db46:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800db4a:	059a      	lsls	r2, r3, #22
 800db4c:	d4ee      	bmi.n	800db2c <__smakebuf_r+0x18>
 800db4e:	f023 0303 	bic.w	r3, r3, #3
 800db52:	f043 0302 	orr.w	r3, r3, #2
 800db56:	81a3      	strh	r3, [r4, #12]
 800db58:	e7e2      	b.n	800db20 <__smakebuf_r+0xc>
 800db5a:	89a3      	ldrh	r3, [r4, #12]
 800db5c:	6020      	str	r0, [r4, #0]
 800db5e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800db62:	81a3      	strh	r3, [r4, #12]
 800db64:	9b01      	ldr	r3, [sp, #4]
 800db66:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800db6a:	b15b      	cbz	r3, 800db84 <__smakebuf_r+0x70>
 800db6c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800db70:	4630      	mov	r0, r6
 800db72:	f000 f851 	bl	800dc18 <_isatty_r>
 800db76:	b128      	cbz	r0, 800db84 <__smakebuf_r+0x70>
 800db78:	89a3      	ldrh	r3, [r4, #12]
 800db7a:	f023 0303 	bic.w	r3, r3, #3
 800db7e:	f043 0301 	orr.w	r3, r3, #1
 800db82:	81a3      	strh	r3, [r4, #12]
 800db84:	89a3      	ldrh	r3, [r4, #12]
 800db86:	431d      	orrs	r5, r3
 800db88:	81a5      	strh	r5, [r4, #12]
 800db8a:	e7cf      	b.n	800db2c <__smakebuf_r+0x18>

0800db8c <_putc_r>:
 800db8c:	b570      	push	{r4, r5, r6, lr}
 800db8e:	460d      	mov	r5, r1
 800db90:	4614      	mov	r4, r2
 800db92:	4606      	mov	r6, r0
 800db94:	b118      	cbz	r0, 800db9e <_putc_r+0x12>
 800db96:	6a03      	ldr	r3, [r0, #32]
 800db98:	b90b      	cbnz	r3, 800db9e <_putc_r+0x12>
 800db9a:	f7fd fbdf 	bl	800b35c <__sinit>
 800db9e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800dba0:	07d8      	lsls	r0, r3, #31
 800dba2:	d405      	bmi.n	800dbb0 <_putc_r+0x24>
 800dba4:	89a3      	ldrh	r3, [r4, #12]
 800dba6:	0599      	lsls	r1, r3, #22
 800dba8:	d402      	bmi.n	800dbb0 <_putc_r+0x24>
 800dbaa:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800dbac:	f7fd fe9f 	bl	800b8ee <__retarget_lock_acquire_recursive>
 800dbb0:	68a3      	ldr	r3, [r4, #8]
 800dbb2:	3b01      	subs	r3, #1
 800dbb4:	2b00      	cmp	r3, #0
 800dbb6:	60a3      	str	r3, [r4, #8]
 800dbb8:	da05      	bge.n	800dbc6 <_putc_r+0x3a>
 800dbba:	69a2      	ldr	r2, [r4, #24]
 800dbbc:	4293      	cmp	r3, r2
 800dbbe:	db12      	blt.n	800dbe6 <_putc_r+0x5a>
 800dbc0:	b2eb      	uxtb	r3, r5
 800dbc2:	2b0a      	cmp	r3, #10
 800dbc4:	d00f      	beq.n	800dbe6 <_putc_r+0x5a>
 800dbc6:	6823      	ldr	r3, [r4, #0]
 800dbc8:	1c5a      	adds	r2, r3, #1
 800dbca:	6022      	str	r2, [r4, #0]
 800dbcc:	701d      	strb	r5, [r3, #0]
 800dbce:	b2ed      	uxtb	r5, r5
 800dbd0:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800dbd2:	07da      	lsls	r2, r3, #31
 800dbd4:	d405      	bmi.n	800dbe2 <_putc_r+0x56>
 800dbd6:	89a3      	ldrh	r3, [r4, #12]
 800dbd8:	059b      	lsls	r3, r3, #22
 800dbda:	d402      	bmi.n	800dbe2 <_putc_r+0x56>
 800dbdc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800dbde:	f7fd fe87 	bl	800b8f0 <__retarget_lock_release_recursive>
 800dbe2:	4628      	mov	r0, r5
 800dbe4:	bd70      	pop	{r4, r5, r6, pc}
 800dbe6:	4629      	mov	r1, r5
 800dbe8:	4622      	mov	r2, r4
 800dbea:	4630      	mov	r0, r6
 800dbec:	f7fd fd5b 	bl	800b6a6 <__swbuf_r>
 800dbf0:	4605      	mov	r5, r0
 800dbf2:	e7ed      	b.n	800dbd0 <_putc_r+0x44>

0800dbf4 <_fstat_r>:
 800dbf4:	b538      	push	{r3, r4, r5, lr}
 800dbf6:	4d07      	ldr	r5, [pc, #28]	@ (800dc14 <_fstat_r+0x20>)
 800dbf8:	2300      	movs	r3, #0
 800dbfa:	4604      	mov	r4, r0
 800dbfc:	4608      	mov	r0, r1
 800dbfe:	4611      	mov	r1, r2
 800dc00:	602b      	str	r3, [r5, #0]
 800dc02:	f7f6 fae4 	bl	80041ce <_fstat>
 800dc06:	1c43      	adds	r3, r0, #1
 800dc08:	d102      	bne.n	800dc10 <_fstat_r+0x1c>
 800dc0a:	682b      	ldr	r3, [r5, #0]
 800dc0c:	b103      	cbz	r3, 800dc10 <_fstat_r+0x1c>
 800dc0e:	6023      	str	r3, [r4, #0]
 800dc10:	bd38      	pop	{r3, r4, r5, pc}
 800dc12:	bf00      	nop
 800dc14:	24000624 	.word	0x24000624

0800dc18 <_isatty_r>:
 800dc18:	b538      	push	{r3, r4, r5, lr}
 800dc1a:	4d06      	ldr	r5, [pc, #24]	@ (800dc34 <_isatty_r+0x1c>)
 800dc1c:	2300      	movs	r3, #0
 800dc1e:	4604      	mov	r4, r0
 800dc20:	4608      	mov	r0, r1
 800dc22:	602b      	str	r3, [r5, #0]
 800dc24:	f7f6 fae3 	bl	80041ee <_isatty>
 800dc28:	1c43      	adds	r3, r0, #1
 800dc2a:	d102      	bne.n	800dc32 <_isatty_r+0x1a>
 800dc2c:	682b      	ldr	r3, [r5, #0]
 800dc2e:	b103      	cbz	r3, 800dc32 <_isatty_r+0x1a>
 800dc30:	6023      	str	r3, [r4, #0]
 800dc32:	bd38      	pop	{r3, r4, r5, pc}
 800dc34:	24000624 	.word	0x24000624

0800dc38 <_sbrk_r>:
 800dc38:	b538      	push	{r3, r4, r5, lr}
 800dc3a:	4d06      	ldr	r5, [pc, #24]	@ (800dc54 <_sbrk_r+0x1c>)
 800dc3c:	2300      	movs	r3, #0
 800dc3e:	4604      	mov	r4, r0
 800dc40:	4608      	mov	r0, r1
 800dc42:	602b      	str	r3, [r5, #0]
 800dc44:	f7f6 faec 	bl	8004220 <_sbrk>
 800dc48:	1c43      	adds	r3, r0, #1
 800dc4a:	d102      	bne.n	800dc52 <_sbrk_r+0x1a>
 800dc4c:	682b      	ldr	r3, [r5, #0]
 800dc4e:	b103      	cbz	r3, 800dc52 <_sbrk_r+0x1a>
 800dc50:	6023      	str	r3, [r4, #0]
 800dc52:	bd38      	pop	{r3, r4, r5, pc}
 800dc54:	24000624 	.word	0x24000624

0800dc58 <__assert_func>:
 800dc58:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800dc5a:	4614      	mov	r4, r2
 800dc5c:	461a      	mov	r2, r3
 800dc5e:	4b09      	ldr	r3, [pc, #36]	@ (800dc84 <__assert_func+0x2c>)
 800dc60:	681b      	ldr	r3, [r3, #0]
 800dc62:	4605      	mov	r5, r0
 800dc64:	68d8      	ldr	r0, [r3, #12]
 800dc66:	b14c      	cbz	r4, 800dc7c <__assert_func+0x24>
 800dc68:	4b07      	ldr	r3, [pc, #28]	@ (800dc88 <__assert_func+0x30>)
 800dc6a:	9100      	str	r1, [sp, #0]
 800dc6c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800dc70:	4906      	ldr	r1, [pc, #24]	@ (800dc8c <__assert_func+0x34>)
 800dc72:	462b      	mov	r3, r5
 800dc74:	f000 f822 	bl	800dcbc <fiprintf>
 800dc78:	f000 f832 	bl	800dce0 <abort>
 800dc7c:	4b04      	ldr	r3, [pc, #16]	@ (800dc90 <__assert_func+0x38>)
 800dc7e:	461c      	mov	r4, r3
 800dc80:	e7f3      	b.n	800dc6a <__assert_func+0x12>
 800dc82:	bf00      	nop
 800dc84:	24000188 	.word	0x24000188
 800dc88:	0800e47d 	.word	0x0800e47d
 800dc8c:	0800e48a 	.word	0x0800e48a
 800dc90:	0800e4b8 	.word	0x0800e4b8

0800dc94 <_calloc_r>:
 800dc94:	b570      	push	{r4, r5, r6, lr}
 800dc96:	fba1 5402 	umull	r5, r4, r1, r2
 800dc9a:	b934      	cbnz	r4, 800dcaa <_calloc_r+0x16>
 800dc9c:	4629      	mov	r1, r5
 800dc9e:	f7fe ffd3 	bl	800cc48 <_malloc_r>
 800dca2:	4606      	mov	r6, r0
 800dca4:	b928      	cbnz	r0, 800dcb2 <_calloc_r+0x1e>
 800dca6:	4630      	mov	r0, r6
 800dca8:	bd70      	pop	{r4, r5, r6, pc}
 800dcaa:	220c      	movs	r2, #12
 800dcac:	6002      	str	r2, [r0, #0]
 800dcae:	2600      	movs	r6, #0
 800dcb0:	e7f9      	b.n	800dca6 <_calloc_r+0x12>
 800dcb2:	462a      	mov	r2, r5
 800dcb4:	4621      	mov	r1, r4
 800dcb6:	f7fd fd8b 	bl	800b7d0 <memset>
 800dcba:	e7f4      	b.n	800dca6 <_calloc_r+0x12>

0800dcbc <fiprintf>:
 800dcbc:	b40e      	push	{r1, r2, r3}
 800dcbe:	b503      	push	{r0, r1, lr}
 800dcc0:	4601      	mov	r1, r0
 800dcc2:	ab03      	add	r3, sp, #12
 800dcc4:	4805      	ldr	r0, [pc, #20]	@ (800dcdc <fiprintf+0x20>)
 800dcc6:	f853 2b04 	ldr.w	r2, [r3], #4
 800dcca:	6800      	ldr	r0, [r0, #0]
 800dccc:	9301      	str	r3, [sp, #4]
 800dcce:	f7ff fd37 	bl	800d740 <_vfiprintf_r>
 800dcd2:	b002      	add	sp, #8
 800dcd4:	f85d eb04 	ldr.w	lr, [sp], #4
 800dcd8:	b003      	add	sp, #12
 800dcda:	4770      	bx	lr
 800dcdc:	24000188 	.word	0x24000188

0800dce0 <abort>:
 800dce0:	b508      	push	{r3, lr}
 800dce2:	2006      	movs	r0, #6
 800dce4:	f000 f82c 	bl	800dd40 <raise>
 800dce8:	2001      	movs	r0, #1
 800dcea:	f7f6 fa3c 	bl	8004166 <_exit>

0800dcee <_raise_r>:
 800dcee:	291f      	cmp	r1, #31
 800dcf0:	b538      	push	{r3, r4, r5, lr}
 800dcf2:	4605      	mov	r5, r0
 800dcf4:	460c      	mov	r4, r1
 800dcf6:	d904      	bls.n	800dd02 <_raise_r+0x14>
 800dcf8:	2316      	movs	r3, #22
 800dcfa:	6003      	str	r3, [r0, #0]
 800dcfc:	f04f 30ff 	mov.w	r0, #4294967295
 800dd00:	bd38      	pop	{r3, r4, r5, pc}
 800dd02:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800dd04:	b112      	cbz	r2, 800dd0c <_raise_r+0x1e>
 800dd06:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800dd0a:	b94b      	cbnz	r3, 800dd20 <_raise_r+0x32>
 800dd0c:	4628      	mov	r0, r5
 800dd0e:	f000 f831 	bl	800dd74 <_getpid_r>
 800dd12:	4622      	mov	r2, r4
 800dd14:	4601      	mov	r1, r0
 800dd16:	4628      	mov	r0, r5
 800dd18:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800dd1c:	f000 b818 	b.w	800dd50 <_kill_r>
 800dd20:	2b01      	cmp	r3, #1
 800dd22:	d00a      	beq.n	800dd3a <_raise_r+0x4c>
 800dd24:	1c59      	adds	r1, r3, #1
 800dd26:	d103      	bne.n	800dd30 <_raise_r+0x42>
 800dd28:	2316      	movs	r3, #22
 800dd2a:	6003      	str	r3, [r0, #0]
 800dd2c:	2001      	movs	r0, #1
 800dd2e:	e7e7      	b.n	800dd00 <_raise_r+0x12>
 800dd30:	2100      	movs	r1, #0
 800dd32:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800dd36:	4620      	mov	r0, r4
 800dd38:	4798      	blx	r3
 800dd3a:	2000      	movs	r0, #0
 800dd3c:	e7e0      	b.n	800dd00 <_raise_r+0x12>
	...

0800dd40 <raise>:
 800dd40:	4b02      	ldr	r3, [pc, #8]	@ (800dd4c <raise+0xc>)
 800dd42:	4601      	mov	r1, r0
 800dd44:	6818      	ldr	r0, [r3, #0]
 800dd46:	f7ff bfd2 	b.w	800dcee <_raise_r>
 800dd4a:	bf00      	nop
 800dd4c:	24000188 	.word	0x24000188

0800dd50 <_kill_r>:
 800dd50:	b538      	push	{r3, r4, r5, lr}
 800dd52:	4d07      	ldr	r5, [pc, #28]	@ (800dd70 <_kill_r+0x20>)
 800dd54:	2300      	movs	r3, #0
 800dd56:	4604      	mov	r4, r0
 800dd58:	4608      	mov	r0, r1
 800dd5a:	4611      	mov	r1, r2
 800dd5c:	602b      	str	r3, [r5, #0]
 800dd5e:	f7f6 f9f2 	bl	8004146 <_kill>
 800dd62:	1c43      	adds	r3, r0, #1
 800dd64:	d102      	bne.n	800dd6c <_kill_r+0x1c>
 800dd66:	682b      	ldr	r3, [r5, #0]
 800dd68:	b103      	cbz	r3, 800dd6c <_kill_r+0x1c>
 800dd6a:	6023      	str	r3, [r4, #0]
 800dd6c:	bd38      	pop	{r3, r4, r5, pc}
 800dd6e:	bf00      	nop
 800dd70:	24000624 	.word	0x24000624

0800dd74 <_getpid_r>:
 800dd74:	f7f6 b9df 	b.w	8004136 <_getpid>

0800dd78 <_init>:
 800dd78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dd7a:	bf00      	nop
 800dd7c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800dd7e:	bc08      	pop	{r3}
 800dd80:	469e      	mov	lr, r3
 800dd82:	4770      	bx	lr

0800dd84 <_fini>:
 800dd84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dd86:	bf00      	nop
 800dd88:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800dd8a:	bc08      	pop	{r3}
 800dd8c:	469e      	mov	lr, r3
 800dd8e:	4770      	bx	lr
