
Drone_Part_Testing.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009ee0  080002a0  080002a0  000012a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004d4  0800a180  0800a180  0000b180  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800a654  0800a654  0000b654  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800a65c  0800a65c  0000b65c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  0800a660  0800a660  0000b660  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         000001d8  24000000  0800a664  0000c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000003ac  240001d8  0800a83c  0000c1d8  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  24000584  0800a83c  0000c584  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  0000c1d8  2**0
                  CONTENTS, READONLY
 10 .debug_info   0001699a  00000000  00000000  0000c206  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00002c0e  00000000  00000000  00022ba0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00000f80  00000000  00000000  000257b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 00000bf9  00000000  00000000  00026730  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00038a4d  00000000  00000000  00027329  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00016265  00000000  00000000  0005fd76  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0015e387  00000000  00000000  00075fdb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  001d4362  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00004ea8  00000000  00000000  001d43a8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 00000062  00000000  00000000  001d9250  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	@ (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	@ (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	@ (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	240001d8 	.word	0x240001d8
 80002bc:	00000000 	.word	0x00000000
 80002c0:	0800a168 	.word	0x0800a168

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	@ (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	@ (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	@ (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	240001dc 	.word	0x240001dc
 80002dc:	0800a168 	.word	0x0800a168

080002e0 <memchr>:
 80002e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002e4:	2a10      	cmp	r2, #16
 80002e6:	db2b      	blt.n	8000340 <memchr+0x60>
 80002e8:	f010 0f07 	tst.w	r0, #7
 80002ec:	d008      	beq.n	8000300 <memchr+0x20>
 80002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f2:	3a01      	subs	r2, #1
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d02d      	beq.n	8000354 <memchr+0x74>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	b342      	cbz	r2, 8000350 <memchr+0x70>
 80002fe:	d1f6      	bne.n	80002ee <memchr+0xe>
 8000300:	b4f0      	push	{r4, r5, r6, r7}
 8000302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800030a:	f022 0407 	bic.w	r4, r2, #7
 800030e:	f07f 0700 	mvns.w	r7, #0
 8000312:	2300      	movs	r3, #0
 8000314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000318:	3c08      	subs	r4, #8
 800031a:	ea85 0501 	eor.w	r5, r5, r1
 800031e:	ea86 0601 	eor.w	r6, r6, r1
 8000322:	fa85 f547 	uadd8	r5, r5, r7
 8000326:	faa3 f587 	sel	r5, r3, r7
 800032a:	fa86 f647 	uadd8	r6, r6, r7
 800032e:	faa5 f687 	sel	r6, r5, r7
 8000332:	b98e      	cbnz	r6, 8000358 <memchr+0x78>
 8000334:	d1ee      	bne.n	8000314 <memchr+0x34>
 8000336:	bcf0      	pop	{r4, r5, r6, r7}
 8000338:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800033c:	f002 0207 	and.w	r2, r2, #7
 8000340:	b132      	cbz	r2, 8000350 <memchr+0x70>
 8000342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000346:	3a01      	subs	r2, #1
 8000348:	ea83 0301 	eor.w	r3, r3, r1
 800034c:	b113      	cbz	r3, 8000354 <memchr+0x74>
 800034e:	d1f8      	bne.n	8000342 <memchr+0x62>
 8000350:	2000      	movs	r0, #0
 8000352:	4770      	bx	lr
 8000354:	3801      	subs	r0, #1
 8000356:	4770      	bx	lr
 8000358:	2d00      	cmp	r5, #0
 800035a:	bf06      	itte	eq
 800035c:	4635      	moveq	r5, r6
 800035e:	3803      	subeq	r0, #3
 8000360:	3807      	subne	r0, #7
 8000362:	f015 0f01 	tst.w	r5, #1
 8000366:	d107      	bne.n	8000378 <memchr+0x98>
 8000368:	3001      	adds	r0, #1
 800036a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800036e:	bf02      	ittt	eq
 8000370:	3001      	addeq	r0, #1
 8000372:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000376:	3001      	addeq	r0, #1
 8000378:	bcf0      	pop	{r4, r5, r6, r7}
 800037a:	3801      	subs	r0, #1
 800037c:	4770      	bx	lr
 800037e:	bf00      	nop

08000380 <strlen>:
 8000380:	4603      	mov	r3, r0
 8000382:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000386:	2a00      	cmp	r2, #0
 8000388:	d1fb      	bne.n	8000382 <strlen+0x2>
 800038a:	1a18      	subs	r0, r3, r0
 800038c:	3801      	subs	r0, #1
 800038e:	4770      	bx	lr

08000390 <__aeabi_uldivmod>:
 8000390:	b953      	cbnz	r3, 80003a8 <__aeabi_uldivmod+0x18>
 8000392:	b94a      	cbnz	r2, 80003a8 <__aeabi_uldivmod+0x18>
 8000394:	2900      	cmp	r1, #0
 8000396:	bf08      	it	eq
 8000398:	2800      	cmpeq	r0, #0
 800039a:	bf1c      	itt	ne
 800039c:	f04f 31ff 	movne.w	r1, #4294967295
 80003a0:	f04f 30ff 	movne.w	r0, #4294967295
 80003a4:	f000 b988 	b.w	80006b8 <__aeabi_idiv0>
 80003a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003b0:	f000 f806 	bl	80003c0 <__udivmoddi4>
 80003b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003bc:	b004      	add	sp, #16
 80003be:	4770      	bx	lr

080003c0 <__udivmoddi4>:
 80003c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003c4:	9d08      	ldr	r5, [sp, #32]
 80003c6:	468e      	mov	lr, r1
 80003c8:	4604      	mov	r4, r0
 80003ca:	4688      	mov	r8, r1
 80003cc:	2b00      	cmp	r3, #0
 80003ce:	d14a      	bne.n	8000466 <__udivmoddi4+0xa6>
 80003d0:	428a      	cmp	r2, r1
 80003d2:	4617      	mov	r7, r2
 80003d4:	d962      	bls.n	800049c <__udivmoddi4+0xdc>
 80003d6:	fab2 f682 	clz	r6, r2
 80003da:	b14e      	cbz	r6, 80003f0 <__udivmoddi4+0x30>
 80003dc:	f1c6 0320 	rsb	r3, r6, #32
 80003e0:	fa01 f806 	lsl.w	r8, r1, r6
 80003e4:	fa20 f303 	lsr.w	r3, r0, r3
 80003e8:	40b7      	lsls	r7, r6
 80003ea:	ea43 0808 	orr.w	r8, r3, r8
 80003ee:	40b4      	lsls	r4, r6
 80003f0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003f4:	fa1f fc87 	uxth.w	ip, r7
 80003f8:	fbb8 f1fe 	udiv	r1, r8, lr
 80003fc:	0c23      	lsrs	r3, r4, #16
 80003fe:	fb0e 8811 	mls	r8, lr, r1, r8
 8000402:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000406:	fb01 f20c 	mul.w	r2, r1, ip
 800040a:	429a      	cmp	r2, r3
 800040c:	d909      	bls.n	8000422 <__udivmoddi4+0x62>
 800040e:	18fb      	adds	r3, r7, r3
 8000410:	f101 30ff 	add.w	r0, r1, #4294967295
 8000414:	f080 80ea 	bcs.w	80005ec <__udivmoddi4+0x22c>
 8000418:	429a      	cmp	r2, r3
 800041a:	f240 80e7 	bls.w	80005ec <__udivmoddi4+0x22c>
 800041e:	3902      	subs	r1, #2
 8000420:	443b      	add	r3, r7
 8000422:	1a9a      	subs	r2, r3, r2
 8000424:	b2a3      	uxth	r3, r4
 8000426:	fbb2 f0fe 	udiv	r0, r2, lr
 800042a:	fb0e 2210 	mls	r2, lr, r0, r2
 800042e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000432:	fb00 fc0c 	mul.w	ip, r0, ip
 8000436:	459c      	cmp	ip, r3
 8000438:	d909      	bls.n	800044e <__udivmoddi4+0x8e>
 800043a:	18fb      	adds	r3, r7, r3
 800043c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000440:	f080 80d6 	bcs.w	80005f0 <__udivmoddi4+0x230>
 8000444:	459c      	cmp	ip, r3
 8000446:	f240 80d3 	bls.w	80005f0 <__udivmoddi4+0x230>
 800044a:	443b      	add	r3, r7
 800044c:	3802      	subs	r0, #2
 800044e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000452:	eba3 030c 	sub.w	r3, r3, ip
 8000456:	2100      	movs	r1, #0
 8000458:	b11d      	cbz	r5, 8000462 <__udivmoddi4+0xa2>
 800045a:	40f3      	lsrs	r3, r6
 800045c:	2200      	movs	r2, #0
 800045e:	e9c5 3200 	strd	r3, r2, [r5]
 8000462:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000466:	428b      	cmp	r3, r1
 8000468:	d905      	bls.n	8000476 <__udivmoddi4+0xb6>
 800046a:	b10d      	cbz	r5, 8000470 <__udivmoddi4+0xb0>
 800046c:	e9c5 0100 	strd	r0, r1, [r5]
 8000470:	2100      	movs	r1, #0
 8000472:	4608      	mov	r0, r1
 8000474:	e7f5      	b.n	8000462 <__udivmoddi4+0xa2>
 8000476:	fab3 f183 	clz	r1, r3
 800047a:	2900      	cmp	r1, #0
 800047c:	d146      	bne.n	800050c <__udivmoddi4+0x14c>
 800047e:	4573      	cmp	r3, lr
 8000480:	d302      	bcc.n	8000488 <__udivmoddi4+0xc8>
 8000482:	4282      	cmp	r2, r0
 8000484:	f200 8105 	bhi.w	8000692 <__udivmoddi4+0x2d2>
 8000488:	1a84      	subs	r4, r0, r2
 800048a:	eb6e 0203 	sbc.w	r2, lr, r3
 800048e:	2001      	movs	r0, #1
 8000490:	4690      	mov	r8, r2
 8000492:	2d00      	cmp	r5, #0
 8000494:	d0e5      	beq.n	8000462 <__udivmoddi4+0xa2>
 8000496:	e9c5 4800 	strd	r4, r8, [r5]
 800049a:	e7e2      	b.n	8000462 <__udivmoddi4+0xa2>
 800049c:	2a00      	cmp	r2, #0
 800049e:	f000 8090 	beq.w	80005c2 <__udivmoddi4+0x202>
 80004a2:	fab2 f682 	clz	r6, r2
 80004a6:	2e00      	cmp	r6, #0
 80004a8:	f040 80a4 	bne.w	80005f4 <__udivmoddi4+0x234>
 80004ac:	1a8a      	subs	r2, r1, r2
 80004ae:	0c03      	lsrs	r3, r0, #16
 80004b0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004b4:	b280      	uxth	r0, r0
 80004b6:	b2bc      	uxth	r4, r7
 80004b8:	2101      	movs	r1, #1
 80004ba:	fbb2 fcfe 	udiv	ip, r2, lr
 80004be:	fb0e 221c 	mls	r2, lr, ip, r2
 80004c2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80004c6:	fb04 f20c 	mul.w	r2, r4, ip
 80004ca:	429a      	cmp	r2, r3
 80004cc:	d907      	bls.n	80004de <__udivmoddi4+0x11e>
 80004ce:	18fb      	adds	r3, r7, r3
 80004d0:	f10c 38ff 	add.w	r8, ip, #4294967295
 80004d4:	d202      	bcs.n	80004dc <__udivmoddi4+0x11c>
 80004d6:	429a      	cmp	r2, r3
 80004d8:	f200 80e0 	bhi.w	800069c <__udivmoddi4+0x2dc>
 80004dc:	46c4      	mov	ip, r8
 80004de:	1a9b      	subs	r3, r3, r2
 80004e0:	fbb3 f2fe 	udiv	r2, r3, lr
 80004e4:	fb0e 3312 	mls	r3, lr, r2, r3
 80004e8:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80004ec:	fb02 f404 	mul.w	r4, r2, r4
 80004f0:	429c      	cmp	r4, r3
 80004f2:	d907      	bls.n	8000504 <__udivmoddi4+0x144>
 80004f4:	18fb      	adds	r3, r7, r3
 80004f6:	f102 30ff 	add.w	r0, r2, #4294967295
 80004fa:	d202      	bcs.n	8000502 <__udivmoddi4+0x142>
 80004fc:	429c      	cmp	r4, r3
 80004fe:	f200 80ca 	bhi.w	8000696 <__udivmoddi4+0x2d6>
 8000502:	4602      	mov	r2, r0
 8000504:	1b1b      	subs	r3, r3, r4
 8000506:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800050a:	e7a5      	b.n	8000458 <__udivmoddi4+0x98>
 800050c:	f1c1 0620 	rsb	r6, r1, #32
 8000510:	408b      	lsls	r3, r1
 8000512:	fa22 f706 	lsr.w	r7, r2, r6
 8000516:	431f      	orrs	r7, r3
 8000518:	fa0e f401 	lsl.w	r4, lr, r1
 800051c:	fa20 f306 	lsr.w	r3, r0, r6
 8000520:	fa2e fe06 	lsr.w	lr, lr, r6
 8000524:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000528:	4323      	orrs	r3, r4
 800052a:	fa00 f801 	lsl.w	r8, r0, r1
 800052e:	fa1f fc87 	uxth.w	ip, r7
 8000532:	fbbe f0f9 	udiv	r0, lr, r9
 8000536:	0c1c      	lsrs	r4, r3, #16
 8000538:	fb09 ee10 	mls	lr, r9, r0, lr
 800053c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000540:	fb00 fe0c 	mul.w	lr, r0, ip
 8000544:	45a6      	cmp	lr, r4
 8000546:	fa02 f201 	lsl.w	r2, r2, r1
 800054a:	d909      	bls.n	8000560 <__udivmoddi4+0x1a0>
 800054c:	193c      	adds	r4, r7, r4
 800054e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000552:	f080 809c 	bcs.w	800068e <__udivmoddi4+0x2ce>
 8000556:	45a6      	cmp	lr, r4
 8000558:	f240 8099 	bls.w	800068e <__udivmoddi4+0x2ce>
 800055c:	3802      	subs	r0, #2
 800055e:	443c      	add	r4, r7
 8000560:	eba4 040e 	sub.w	r4, r4, lr
 8000564:	fa1f fe83 	uxth.w	lr, r3
 8000568:	fbb4 f3f9 	udiv	r3, r4, r9
 800056c:	fb09 4413 	mls	r4, r9, r3, r4
 8000570:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000574:	fb03 fc0c 	mul.w	ip, r3, ip
 8000578:	45a4      	cmp	ip, r4
 800057a:	d908      	bls.n	800058e <__udivmoddi4+0x1ce>
 800057c:	193c      	adds	r4, r7, r4
 800057e:	f103 3eff 	add.w	lr, r3, #4294967295
 8000582:	f080 8082 	bcs.w	800068a <__udivmoddi4+0x2ca>
 8000586:	45a4      	cmp	ip, r4
 8000588:	d97f      	bls.n	800068a <__udivmoddi4+0x2ca>
 800058a:	3b02      	subs	r3, #2
 800058c:	443c      	add	r4, r7
 800058e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000592:	eba4 040c 	sub.w	r4, r4, ip
 8000596:	fba0 ec02 	umull	lr, ip, r0, r2
 800059a:	4564      	cmp	r4, ip
 800059c:	4673      	mov	r3, lr
 800059e:	46e1      	mov	r9, ip
 80005a0:	d362      	bcc.n	8000668 <__udivmoddi4+0x2a8>
 80005a2:	d05f      	beq.n	8000664 <__udivmoddi4+0x2a4>
 80005a4:	b15d      	cbz	r5, 80005be <__udivmoddi4+0x1fe>
 80005a6:	ebb8 0203 	subs.w	r2, r8, r3
 80005aa:	eb64 0409 	sbc.w	r4, r4, r9
 80005ae:	fa04 f606 	lsl.w	r6, r4, r6
 80005b2:	fa22 f301 	lsr.w	r3, r2, r1
 80005b6:	431e      	orrs	r6, r3
 80005b8:	40cc      	lsrs	r4, r1
 80005ba:	e9c5 6400 	strd	r6, r4, [r5]
 80005be:	2100      	movs	r1, #0
 80005c0:	e74f      	b.n	8000462 <__udivmoddi4+0xa2>
 80005c2:	fbb1 fcf2 	udiv	ip, r1, r2
 80005c6:	0c01      	lsrs	r1, r0, #16
 80005c8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80005cc:	b280      	uxth	r0, r0
 80005ce:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80005d2:	463b      	mov	r3, r7
 80005d4:	4638      	mov	r0, r7
 80005d6:	463c      	mov	r4, r7
 80005d8:	46b8      	mov	r8, r7
 80005da:	46be      	mov	lr, r7
 80005dc:	2620      	movs	r6, #32
 80005de:	fbb1 f1f7 	udiv	r1, r1, r7
 80005e2:	eba2 0208 	sub.w	r2, r2, r8
 80005e6:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80005ea:	e766      	b.n	80004ba <__udivmoddi4+0xfa>
 80005ec:	4601      	mov	r1, r0
 80005ee:	e718      	b.n	8000422 <__udivmoddi4+0x62>
 80005f0:	4610      	mov	r0, r2
 80005f2:	e72c      	b.n	800044e <__udivmoddi4+0x8e>
 80005f4:	f1c6 0220 	rsb	r2, r6, #32
 80005f8:	fa2e f302 	lsr.w	r3, lr, r2
 80005fc:	40b7      	lsls	r7, r6
 80005fe:	40b1      	lsls	r1, r6
 8000600:	fa20 f202 	lsr.w	r2, r0, r2
 8000604:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000608:	430a      	orrs	r2, r1
 800060a:	fbb3 f8fe 	udiv	r8, r3, lr
 800060e:	b2bc      	uxth	r4, r7
 8000610:	fb0e 3318 	mls	r3, lr, r8, r3
 8000614:	0c11      	lsrs	r1, r2, #16
 8000616:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800061a:	fb08 f904 	mul.w	r9, r8, r4
 800061e:	40b0      	lsls	r0, r6
 8000620:	4589      	cmp	r9, r1
 8000622:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000626:	b280      	uxth	r0, r0
 8000628:	d93e      	bls.n	80006a8 <__udivmoddi4+0x2e8>
 800062a:	1879      	adds	r1, r7, r1
 800062c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000630:	d201      	bcs.n	8000636 <__udivmoddi4+0x276>
 8000632:	4589      	cmp	r9, r1
 8000634:	d81f      	bhi.n	8000676 <__udivmoddi4+0x2b6>
 8000636:	eba1 0109 	sub.w	r1, r1, r9
 800063a:	fbb1 f9fe 	udiv	r9, r1, lr
 800063e:	fb09 f804 	mul.w	r8, r9, r4
 8000642:	fb0e 1119 	mls	r1, lr, r9, r1
 8000646:	b292      	uxth	r2, r2
 8000648:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800064c:	4542      	cmp	r2, r8
 800064e:	d229      	bcs.n	80006a4 <__udivmoddi4+0x2e4>
 8000650:	18ba      	adds	r2, r7, r2
 8000652:	f109 31ff 	add.w	r1, r9, #4294967295
 8000656:	d2c4      	bcs.n	80005e2 <__udivmoddi4+0x222>
 8000658:	4542      	cmp	r2, r8
 800065a:	d2c2      	bcs.n	80005e2 <__udivmoddi4+0x222>
 800065c:	f1a9 0102 	sub.w	r1, r9, #2
 8000660:	443a      	add	r2, r7
 8000662:	e7be      	b.n	80005e2 <__udivmoddi4+0x222>
 8000664:	45f0      	cmp	r8, lr
 8000666:	d29d      	bcs.n	80005a4 <__udivmoddi4+0x1e4>
 8000668:	ebbe 0302 	subs.w	r3, lr, r2
 800066c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000670:	3801      	subs	r0, #1
 8000672:	46e1      	mov	r9, ip
 8000674:	e796      	b.n	80005a4 <__udivmoddi4+0x1e4>
 8000676:	eba7 0909 	sub.w	r9, r7, r9
 800067a:	4449      	add	r1, r9
 800067c:	f1a8 0c02 	sub.w	ip, r8, #2
 8000680:	fbb1 f9fe 	udiv	r9, r1, lr
 8000684:	fb09 f804 	mul.w	r8, r9, r4
 8000688:	e7db      	b.n	8000642 <__udivmoddi4+0x282>
 800068a:	4673      	mov	r3, lr
 800068c:	e77f      	b.n	800058e <__udivmoddi4+0x1ce>
 800068e:	4650      	mov	r0, sl
 8000690:	e766      	b.n	8000560 <__udivmoddi4+0x1a0>
 8000692:	4608      	mov	r0, r1
 8000694:	e6fd      	b.n	8000492 <__udivmoddi4+0xd2>
 8000696:	443b      	add	r3, r7
 8000698:	3a02      	subs	r2, #2
 800069a:	e733      	b.n	8000504 <__udivmoddi4+0x144>
 800069c:	f1ac 0c02 	sub.w	ip, ip, #2
 80006a0:	443b      	add	r3, r7
 80006a2:	e71c      	b.n	80004de <__udivmoddi4+0x11e>
 80006a4:	4649      	mov	r1, r9
 80006a6:	e79c      	b.n	80005e2 <__udivmoddi4+0x222>
 80006a8:	eba1 0109 	sub.w	r1, r1, r9
 80006ac:	46c4      	mov	ip, r8
 80006ae:	fbb1 f9fe 	udiv	r9, r1, lr
 80006b2:	fb09 f804 	mul.w	r8, r9, r4
 80006b6:	e7c4      	b.n	8000642 <__udivmoddi4+0x282>

080006b8 <__aeabi_idiv0>:
 80006b8:	4770      	bx	lr
 80006ba:	bf00      	nop

080006bc <rd>:
#define DPS_REG_PROD_ID  0x0D   // WHO_AM_I; expect 0x10 on DPS310

/* ---- Minimal I2C helper ---- */
static HAL_StatusTypeDef rd(I2C_HandleTypeDef *i2c, uint8_t a7,
                            uint8_t reg, uint8_t *buf, uint16_t n)
{
 80006bc:	b580      	push	{r7, lr}
 80006be:	b088      	sub	sp, #32
 80006c0:	af04      	add	r7, sp, #16
 80006c2:	60f8      	str	r0, [r7, #12]
 80006c4:	607b      	str	r3, [r7, #4]
 80006c6:	460b      	mov	r3, r1
 80006c8:	72fb      	strb	r3, [r7, #11]
 80006ca:	4613      	mov	r3, r2
 80006cc:	72bb      	strb	r3, [r7, #10]
    return HAL_I2C_Mem_Read(i2c, (a7 << 1), reg, I2C_MEMADD_SIZE_8BIT, buf, n, 200);
 80006ce:	7afb      	ldrb	r3, [r7, #11]
 80006d0:	b29b      	uxth	r3, r3
 80006d2:	005b      	lsls	r3, r3, #1
 80006d4:	b299      	uxth	r1, r3
 80006d6:	7abb      	ldrb	r3, [r7, #10]
 80006d8:	b29a      	uxth	r2, r3
 80006da:	23c8      	movs	r3, #200	@ 0xc8
 80006dc:	9302      	str	r3, [sp, #8]
 80006de:	8b3b      	ldrh	r3, [r7, #24]
 80006e0:	9301      	str	r3, [sp, #4]
 80006e2:	687b      	ldr	r3, [r7, #4]
 80006e4:	9300      	str	r3, [sp, #0]
 80006e6:	2301      	movs	r3, #1
 80006e8:	68f8      	ldr	r0, [r7, #12]
 80006ea:	f002 fb2b 	bl	8002d44 <HAL_I2C_Mem_Read>
 80006ee:	4603      	mov	r3, r0
}
 80006f0:	4618      	mov	r0, r3
 80006f2:	3710      	adds	r7, #16
 80006f4:	46bd      	mov	sp, r7
 80006f6:	bd80      	pop	{r7, pc}

080006f8 <dps_probe>:

/* ---- vtable ops (minimal) ---- */
static HAL_StatusTypeDef dps_probe(sensor_if_t *self)
{
 80006f8:	b580      	push	{r7, lr}
 80006fa:	b086      	sub	sp, #24
 80006fc:	af02      	add	r7, sp, #8
 80006fe:	6078      	str	r0, [r7, #4]
    dps310_t *s = (dps310_t*)self->state;
 8000700:	687b      	ldr	r3, [r7, #4]
 8000702:	685b      	ldr	r3, [r3, #4]
 8000704:	60fb      	str	r3, [r7, #12]
    uint8_t id = 0;
 8000706:	2300      	movs	r3, #0
 8000708:	72fb      	strb	r3, [r7, #11]
    if (rd(s->i2c, s->addr7, DPS_REG_PROD_ID, &id, 1) != HAL_OK) return HAL_ERROR;
 800070a:	68fb      	ldr	r3, [r7, #12]
 800070c:	6818      	ldr	r0, [r3, #0]
 800070e:	68fb      	ldr	r3, [r7, #12]
 8000710:	7919      	ldrb	r1, [r3, #4]
 8000712:	f107 030b 	add.w	r3, r7, #11
 8000716:	2201      	movs	r2, #1
 8000718:	9200      	str	r2, [sp, #0]
 800071a:	220d      	movs	r2, #13
 800071c:	f7ff ffce 	bl	80006bc <rd>
 8000720:	4603      	mov	r3, r0
 8000722:	2b00      	cmp	r3, #0
 8000724:	d001      	beq.n	800072a <dps_probe+0x32>
 8000726:	2301      	movs	r3, #1
 8000728:	e005      	b.n	8000736 <dps_probe+0x3e>
    return (id == 0x10) ? HAL_OK : HAL_ERROR;  // DPS310 WHO_AM_I
 800072a:	7afb      	ldrb	r3, [r7, #11]
 800072c:	2b10      	cmp	r3, #16
 800072e:	bf14      	ite	ne
 8000730:	2301      	movne	r3, #1
 8000732:	2300      	moveq	r3, #0
 8000734:	b2db      	uxtb	r3, r3
}
 8000736:	4618      	mov	r0, r3
 8000738:	3710      	adds	r7, #16
 800073a:	46bd      	mov	sp, r7
 800073c:	bd80      	pop	{r7, pc}

0800073e <dps_init>:

static HAL_StatusTypeDef dps_init(sensor_if_t *self)
{
 800073e:	b480      	push	{r7}
 8000740:	b083      	sub	sp, #12
 8000742:	af00      	add	r7, sp, #0
 8000744:	6078      	str	r0, [r7, #4]
    (void)self;               // no configuration yet
    return HAL_OK;            // keep flow sstatee; stateement later
 8000746:	2300      	movs	r3, #0
}
 8000748:	4618      	mov	r0, r3
 800074a:	370c      	adds	r7, #12
 800074c:	46bd      	mov	sp, r7
 800074e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000752:	4770      	bx	lr

08000754 <dps_read>:

static HAL_StatusTypeDef dps_read(sensor_if_t *self)
{
 8000754:	b480      	push	{r7}
 8000756:	b083      	sub	sp, #12
 8000758:	af00      	add	r7, sp, #0
 800075a:	6078      	str	r0, [r7, #4]
    (void)self;               // intentionally unstateemented for now
    return HAL_OK;            // or HAL_ERROR if you want to force stateementation
 800075c:	2300      	movs	r3, #0
}
 800075e:	4618      	mov	r0, r3
 8000760:	370c      	adds	r7, #12
 8000762:	46bd      	mov	sp, r7
 8000764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000768:	4770      	bx	lr

0800076a <dps_whoami>:

static HAL_StatusTypeDef dps_whoami(sensor_if_t *self, uint8_t *out)
{
 800076a:	b580      	push	{r7, lr}
 800076c:	b086      	sub	sp, #24
 800076e:	af02      	add	r7, sp, #8
 8000770:	6078      	str	r0, [r7, #4]
 8000772:	6039      	str	r1, [r7, #0]
    dps310_t *s = (dps310_t*)self->state;
 8000774:	687b      	ldr	r3, [r7, #4]
 8000776:	685b      	ldr	r3, [r3, #4]
 8000778:	60fb      	str	r3, [r7, #12]
    return rd(s->i2c, s->addr7, DPS_REG_PROD_ID, out, 1);
 800077a:	68fb      	ldr	r3, [r7, #12]
 800077c:	6818      	ldr	r0, [r3, #0]
 800077e:	68fb      	ldr	r3, [r7, #12]
 8000780:	7919      	ldrb	r1, [r3, #4]
 8000782:	2301      	movs	r3, #1
 8000784:	9300      	str	r3, [sp, #0]
 8000786:	683b      	ldr	r3, [r7, #0]
 8000788:	220d      	movs	r2, #13
 800078a:	f7ff ff97 	bl	80006bc <rd>
 800078e:	4603      	mov	r3, r0
}
 8000790:	4618      	mov	r0, r3
 8000792:	3710      	adds	r7, #16
 8000794:	46bd      	mov	sp, r7
 8000796:	bd80      	pop	{r7, pc}

08000798 <dps310_bind>:
    .whoami = dps_whoami
};

void dps310_bind(sensor_if_t *iface, dps310_t *inst,
                 I2C_HandleTypeDef *i2c, uint8_t addr7)
{
 8000798:	b480      	push	{r7}
 800079a:	b085      	sub	sp, #20
 800079c:	af00      	add	r7, sp, #0
 800079e:	60f8      	str	r0, [r7, #12]
 80007a0:	60b9      	str	r1, [r7, #8]
 80007a2:	607a      	str	r2, [r7, #4]
 80007a4:	70fb      	strb	r3, [r7, #3]
    inst->i2c   = i2c;
 80007a6:	68bb      	ldr	r3, [r7, #8]
 80007a8:	687a      	ldr	r2, [r7, #4]
 80007aa:	601a      	str	r2, [r3, #0]
    inst->addr7 = addr7;
 80007ac:	68bb      	ldr	r3, [r7, #8]
 80007ae:	78fa      	ldrb	r2, [r7, #3]
 80007b0:	711a      	strb	r2, [r3, #4]
    iface->vTable    = &DPS310_VTBL;
 80007b2:	68fb      	ldr	r3, [r7, #12]
 80007b4:	4a05      	ldr	r2, [pc, #20]	@ (80007cc <dps310_bind+0x34>)
 80007b6:	601a      	str	r2, [r3, #0]
    iface->state = inst;
 80007b8:	68fb      	ldr	r3, [r7, #12]
 80007ba:	68ba      	ldr	r2, [r7, #8]
 80007bc:	605a      	str	r2, [r3, #4]
}
 80007be:	bf00      	nop
 80007c0:	3714      	adds	r7, #20
 80007c2:	46bd      	mov	sp, r7
 80007c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007c8:	4770      	bx	lr
 80007ca:	bf00      	nop
 80007cc:	0800a274 	.word	0x0800a274

080007d0 <rx1>:
 */

#include "gps6m.h"

/* receive one byte with a short timeout */
static HAL_StatusTypeDef rx1(UART_HandleTypeDef *u, uint8_t *c, uint32_t to_ms) {
 80007d0:	b580      	push	{r7, lr}
 80007d2:	b084      	sub	sp, #16
 80007d4:	af00      	add	r7, sp, #0
 80007d6:	60f8      	str	r0, [r7, #12]
 80007d8:	60b9      	str	r1, [r7, #8]
 80007da:	607a      	str	r2, [r7, #4]
    return HAL_UART_Receive(u, c, 1, to_ms);
 80007dc:	687b      	ldr	r3, [r7, #4]
 80007de:	2201      	movs	r2, #1
 80007e0:	68b9      	ldr	r1, [r7, #8]
 80007e2:	68f8      	ldr	r0, [r7, #12]
 80007e4:	f005 fe58 	bl	8006498 <HAL_UART_Receive>
 80007e8:	4603      	mov	r3, r0
}
 80007ea:	4618      	mov	r0, r3
 80007ec:	3710      	adds	r7, #16
 80007ee:	46bd      	mov	sp, r7
 80007f0:	bd80      	pop	{r7, pc}

080007f2 <nmea_probe_stream>:

/* very small state machine: look for "$G[P|N]" within ~1.5 s */
static HAL_StatusTypeDef nmea_probe_stream(UART_HandleTypeDef *u) {
 80007f2:	b580      	push	{r7, lr}
 80007f4:	b086      	sub	sp, #24
 80007f6:	af00      	add	r7, sp, #0
 80007f8:	6078      	str	r0, [r7, #4]
    uint32_t t0 = HAL_GetTick();
 80007fa:	f001 fd91 	bl	8002320 <HAL_GetTick>
 80007fe:	6138      	str	r0, [r7, #16]
    enum { S_WAIT_DOLLAR, S_G, S_GP_OR_GN } st = S_WAIT_DOLLAR;
 8000800:	2300      	movs	r3, #0
 8000802:	75fb      	strb	r3, [r7, #23]
    while ((HAL_GetTick() - t0) < 1500) {
 8000804:	e02f      	b.n	8000866 <nmea_probe_stream+0x74>
        uint8_t c;
        if (rx1(u, &c, 50) != HAL_OK) continue;    // keep polling
 8000806:	f107 030f 	add.w	r3, r7, #15
 800080a:	2232      	movs	r2, #50	@ 0x32
 800080c:	4619      	mov	r1, r3
 800080e:	6878      	ldr	r0, [r7, #4]
 8000810:	f7ff ffde 	bl	80007d0 <rx1>
 8000814:	4603      	mov	r3, r0
 8000816:	2b00      	cmp	r3, #0
 8000818:	d122      	bne.n	8000860 <nmea_probe_stream+0x6e>
        switch (st) {
 800081a:	7dfb      	ldrb	r3, [r7, #23]
 800081c:	2b02      	cmp	r3, #2
 800081e:	d014      	beq.n	800084a <nmea_probe_stream+0x58>
 8000820:	2b02      	cmp	r3, #2
 8000822:	dc20      	bgt.n	8000866 <nmea_probe_stream+0x74>
 8000824:	2b00      	cmp	r3, #0
 8000826:	d002      	beq.n	800082e <nmea_probe_stream+0x3c>
 8000828:	2b01      	cmp	r3, #1
 800082a:	d006      	beq.n	800083a <nmea_probe_stream+0x48>
 800082c:	e01b      	b.n	8000866 <nmea_probe_stream+0x74>
            case S_WAIT_DOLLAR: if (c == '$') st = S_G; break;
 800082e:	7bfb      	ldrb	r3, [r7, #15]
 8000830:	2b24      	cmp	r3, #36	@ 0x24
 8000832:	d117      	bne.n	8000864 <nmea_probe_stream+0x72>
 8000834:	2301      	movs	r3, #1
 8000836:	75fb      	strb	r3, [r7, #23]
 8000838:	e014      	b.n	8000864 <nmea_probe_stream+0x72>
            case S_G:           st = (c == 'G') ? S_GP_OR_GN : S_WAIT_DOLLAR; break;
 800083a:	7bfb      	ldrb	r3, [r7, #15]
 800083c:	2b47      	cmp	r3, #71	@ 0x47
 800083e:	d101      	bne.n	8000844 <nmea_probe_stream+0x52>
 8000840:	2302      	movs	r3, #2
 8000842:	e000      	b.n	8000846 <nmea_probe_stream+0x54>
 8000844:	2300      	movs	r3, #0
 8000846:	75fb      	strb	r3, [r7, #23]
 8000848:	e00d      	b.n	8000866 <nmea_probe_stream+0x74>
            case S_GP_OR_GN:    if (c == 'P' || c == 'N') return HAL_OK; else st = S_WAIT_DOLLAR; break;
 800084a:	7bfb      	ldrb	r3, [r7, #15]
 800084c:	2b50      	cmp	r3, #80	@ 0x50
 800084e:	d002      	beq.n	8000856 <nmea_probe_stream+0x64>
 8000850:	7bfb      	ldrb	r3, [r7, #15]
 8000852:	2b4e      	cmp	r3, #78	@ 0x4e
 8000854:	d101      	bne.n	800085a <nmea_probe_stream+0x68>
 8000856:	2300      	movs	r3, #0
 8000858:	e00f      	b.n	800087a <nmea_probe_stream+0x88>
 800085a:	2300      	movs	r3, #0
 800085c:	75fb      	strb	r3, [r7, #23]
 800085e:	e002      	b.n	8000866 <nmea_probe_stream+0x74>
        if (rx1(u, &c, 50) != HAL_OK) continue;    // keep polling
 8000860:	bf00      	nop
 8000862:	e000      	b.n	8000866 <nmea_probe_stream+0x74>
            case S_WAIT_DOLLAR: if (c == '$') st = S_G; break;
 8000864:	bf00      	nop
    while ((HAL_GetTick() - t0) < 1500) {
 8000866:	f001 fd5b 	bl	8002320 <HAL_GetTick>
 800086a:	4602      	mov	r2, r0
 800086c:	693b      	ldr	r3, [r7, #16]
 800086e:	1ad3      	subs	r3, r2, r3
 8000870:	f240 52db 	movw	r2, #1499	@ 0x5db
 8000874:	4293      	cmp	r3, r2
 8000876:	d9c6      	bls.n	8000806 <nmea_probe_stream+0x14>
        }
    }
    return HAL_TIMEOUT;
 8000878:	2303      	movs	r3, #3
}
 800087a:	4618      	mov	r0, r3
 800087c:	3718      	adds	r7, #24
 800087e:	46bd      	mov	sp, r7
 8000880:	bd80      	pop	{r7, pc}

08000882 <gps_probe>:

/* -------- vtable ops (minimal) -------- */
static HAL_StatusTypeDef gps_probe(sensor_if_t *self) {
 8000882:	b580      	push	{r7, lr}
 8000884:	b084      	sub	sp, #16
 8000886:	af00      	add	r7, sp, #0
 8000888:	6078      	str	r0, [r7, #4]
    gps6m_t *s = (gps6m_t*)self->state;
 800088a:	687b      	ldr	r3, [r7, #4]
 800088c:	685b      	ldr	r3, [r3, #4]
 800088e:	60fb      	str	r3, [r7, #12]
    return nmea_probe_stream(s->uart);  // OK if we see $GP/$GN
 8000890:	68fb      	ldr	r3, [r7, #12]
 8000892:	681b      	ldr	r3, [r3, #0]
 8000894:	4618      	mov	r0, r3
 8000896:	f7ff ffac 	bl	80007f2 <nmea_probe_stream>
 800089a:	4603      	mov	r3, r0
}
 800089c:	4618      	mov	r0, r3
 800089e:	3710      	adds	r7, #16
 80008a0:	46bd      	mov	sp, r7
 80008a2:	bd80      	pop	{r7, pc}

080008a4 <gps_init>:

static HAL_StatusTypeDef gps_init(sensor_if_t *self) {
 80008a4:	b480      	push	{r7}
 80008a6:	b083      	sub	sp, #12
 80008a8:	af00      	add	r7, sp, #0
 80008aa:	6078      	str	r0, [r7, #4]
    (void)self;          // nothing yet
    return HAL_OK;
 80008ac:	2300      	movs	r3, #0
}
 80008ae:	4618      	mov	r0, r3
 80008b0:	370c      	adds	r7, #12
 80008b2:	46bd      	mov	sp, r7
 80008b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008b8:	4770      	bx	lr

080008ba <gps_read>:

static HAL_StatusTypeDef gps_read(sensor_if_t *self) {
 80008ba:	b480      	push	{r7}
 80008bc:	b083      	sub	sp, #12
 80008be:	af00      	add	r7, sp, #0
 80008c0:	6078      	str	r0, [r7, #4]
    (void)self;          // intentionally unstateemented for now
    return HAL_OK;
 80008c2:	2300      	movs	r3, #0
}
 80008c4:	4618      	mov	r0, r3
 80008c6:	370c      	adds	r7, #12
 80008c8:	46bd      	mov	sp, r7
 80008ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ce:	4770      	bx	lr

080008d0 <gps_whoami>:

static HAL_StatusTypeDef gps_whoami(sensor_if_t *self, uint8_t *out) {
 80008d0:	b580      	push	{r7, lr}
 80008d2:	b084      	sub	sp, #16
 80008d4:	af00      	add	r7, sp, #0
 80008d6:	6078      	str	r0, [r7, #4]
 80008d8:	6039      	str	r1, [r7, #0]
    // Not really meaningful for GPS; return 'G' if we see a '$G?'
    gps6m_t *s = (gps6m_t*)self->state;
 80008da:	687b      	ldr	r3, [r7, #4]
 80008dc:	685b      	ldr	r3, [r3, #4]
 80008de:	60fb      	str	r3, [r7, #12]
    if (nmea_probe_stream(s->uart) == HAL_OK) { if (out) *out = 'G'; return HAL_OK; }
 80008e0:	68fb      	ldr	r3, [r7, #12]
 80008e2:	681b      	ldr	r3, [r3, #0]
 80008e4:	4618      	mov	r0, r3
 80008e6:	f7ff ff84 	bl	80007f2 <nmea_probe_stream>
 80008ea:	4603      	mov	r3, r0
 80008ec:	2b00      	cmp	r3, #0
 80008ee:	d107      	bne.n	8000900 <gps_whoami+0x30>
 80008f0:	683b      	ldr	r3, [r7, #0]
 80008f2:	2b00      	cmp	r3, #0
 80008f4:	d002      	beq.n	80008fc <gps_whoami+0x2c>
 80008f6:	683b      	ldr	r3, [r7, #0]
 80008f8:	2247      	movs	r2, #71	@ 0x47
 80008fa:	701a      	strb	r2, [r3, #0]
 80008fc:	2300      	movs	r3, #0
 80008fe:	e000      	b.n	8000902 <gps_whoami+0x32>
    return HAL_ERROR;
 8000900:	2301      	movs	r3, #1
}
 8000902:	4618      	mov	r0, r3
 8000904:	3710      	adds	r7, #16
 8000906:	46bd      	mov	sp, r7
 8000908:	bd80      	pop	{r7, pc}
	...

0800090c <gps6m_bind>:
    .init   = gps_init,
    .read   = gps_read,
    .whoami = gps_whoami
};

void gps6m_bind(sensor_if_t *iface, gps6m_t *inst, UART_HandleTypeDef *uart) {
 800090c:	b480      	push	{r7}
 800090e:	b085      	sub	sp, #20
 8000910:	af00      	add	r7, sp, #0
 8000912:	60f8      	str	r0, [r7, #12]
 8000914:	60b9      	str	r1, [r7, #8]
 8000916:	607a      	str	r2, [r7, #4]
    inst->uart = uart;
 8000918:	68bb      	ldr	r3, [r7, #8]
 800091a:	687a      	ldr	r2, [r7, #4]
 800091c:	601a      	str	r2, [r3, #0]
    iface->vTable   = &GPS_VTBL;
 800091e:	68fb      	ldr	r3, [r7, #12]
 8000920:	4a05      	ldr	r2, [pc, #20]	@ (8000938 <gps6m_bind+0x2c>)
 8000922:	601a      	str	r2, [r3, #0]
    iface->state= inst;
 8000924:	68fb      	ldr	r3, [r7, #12]
 8000926:	68ba      	ldr	r2, [r7, #8]
 8000928:	605a      	str	r2, [r3, #4]
}
 800092a:	bf00      	nop
 800092c:	3714      	adds	r7, #20
 800092e:	46bd      	mov	sp, r7
 8000930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000934:	4770      	bx	lr
 8000936:	bf00      	nop
 8000938:	0800a284 	.word	0x0800a284

0800093c <icm_probe>:
static inline uint8_t clip3(uint8_t x);
static inline uint8_t clip4(uint8_t x);
static icm42688_t* getSelfStatePointer(sensor_if_t *self);

/* ---------- vtable ops ---------- */
static HAL_StatusTypeDef icm_probe(sensor_if_t *self) {
 800093c:	b580      	push	{r7, lr}
 800093e:	b084      	sub	sp, #16
 8000940:	af00      	add	r7, sp, #0
 8000942:	6078      	str	r0, [r7, #4]
	icm42688_t *s = getSelfStatePointer(self);
 8000944:	6878      	ldr	r0, [r7, #4]
 8000946:	f000 fddc 	bl	8001502 <getSelfStatePointer>
 800094a:	60f8      	str	r0, [r7, #12]
	if (!s) return HAL_ERROR;
 800094c:	68fb      	ldr	r3, [r7, #12]
 800094e:	2b00      	cmp	r3, #0
 8000950:	d101      	bne.n	8000956 <icm_probe+0x1a>
 8000952:	2301      	movs	r3, #1
 8000954:	e02d      	b.n	80009b2 <icm_probe+0x76>

	//Get the id.
	uint8_t id = 0;
 8000956:	2300      	movs	r3, #0
 8000958:	72bb      	strb	r3, [r7, #10]
	HAL_StatusTypeDef st = icm_whoami(self, &id);
 800095a:	f107 030a 	add.w	r3, r7, #10
 800095e:	4619      	mov	r1, r3
 8000960:	6878      	ldr	r0, [r7, #4]
 8000962:	f000 f8b7 	bl	8000ad4 <icm_whoami>
 8000966:	4603      	mov	r3, r0
 8000968:	72fb      	strb	r3, [r7, #11]
	if (st != HAL_OK) {
 800096a:	7afb      	ldrb	r3, [r7, #11]
 800096c:	2b00      	cmp	r3, #0
 800096e:	d011      	beq.n	8000994 <icm_probe+0x58>
		s->last_hal_err = HAL_I2C_GetError(s->i2c);
 8000970:	68fb      	ldr	r3, [r7, #12]
 8000972:	681b      	ldr	r3, [r3, #0]
 8000974:	4618      	mov	r0, r3
 8000976:	f002 faff 	bl	8002f78 <HAL_I2C_GetError>
 800097a:	4602      	mov	r2, r0
 800097c:	68fb      	ldr	r3, [r7, #12]
 800097e:	609a      	str	r2, [r3, #8]
		s->last_err = (st == HAL_TIMEOUT) ? ICM_ERR_TIMEOUT : ICM_ERR_I2C;
 8000980:	7afb      	ldrb	r3, [r7, #11]
 8000982:	2b03      	cmp	r3, #3
 8000984:	d101      	bne.n	800098a <icm_probe+0x4e>
 8000986:	2203      	movs	r2, #3
 8000988:	e000      	b.n	800098c <icm_probe+0x50>
 800098a:	2202      	movs	r2, #2
 800098c:	68fb      	ldr	r3, [r7, #12]
 800098e:	715a      	strb	r2, [r3, #5]
		return st;
 8000990:	7afb      	ldrb	r3, [r7, #11]
 8000992:	e00e      	b.n	80009b2 <icm_probe+0x76>
	}

	//Check that the id matches the documentation.
	if (id != ICM_WHO_AM_I_DEFAULT) {
 8000994:	7abb      	ldrb	r3, [r7, #10]
 8000996:	2b47      	cmp	r3, #71	@ 0x47
 8000998:	d007      	beq.n	80009aa <icm_probe+0x6e>
		s->last_err = ICM_ERR_WHOAMI_MISMATCH;
 800099a:	68fb      	ldr	r3, [r7, #12]
 800099c:	2204      	movs	r2, #4
 800099e:	715a      	strb	r2, [r3, #5]
		s->last_whoami = id;
 80009a0:	7aba      	ldrb	r2, [r7, #10]
 80009a2:	68fb      	ldr	r3, [r7, #12]
 80009a4:	731a      	strb	r2, [r3, #12]
		return HAL_ERROR;
 80009a6:	2301      	movs	r3, #1
 80009a8:	e003      	b.n	80009b2 <icm_probe+0x76>
	}

	s->last_err = ICM_OK;
 80009aa:	68fb      	ldr	r3, [r7, #12]
 80009ac:	2200      	movs	r2, #0
 80009ae:	715a      	strb	r2, [r3, #5]
	return HAL_OK;
 80009b0:	2300      	movs	r3, #0
}
 80009b2:	4618      	mov	r0, r3
 80009b4:	3710      	adds	r7, #16
 80009b6:	46bd      	mov	sp, r7
 80009b8:	bd80      	pop	{r7, pc}

080009ba <icm_init>:

static HAL_StatusTypeDef icm_init(sensor_if_t *self) {
 80009ba:	b580      	push	{r7, lr}
 80009bc:	b086      	sub	sp, #24
 80009be:	af02      	add	r7, sp, #8
 80009c0:	6078      	str	r0, [r7, #4]
	icm42688_t *s = getSelfStatePointer(self);
 80009c2:	6878      	ldr	r0, [r7, #4]
 80009c4:	f000 fd9d 	bl	8001502 <getSelfStatePointer>
 80009c8:	60f8      	str	r0, [r7, #12]
	if (!s) return HAL_ERROR;
 80009ca:	68fb      	ldr	r3, [r7, #12]
 80009cc:	2b00      	cmp	r3, #0
 80009ce:	d101      	bne.n	80009d4 <icm_init+0x1a>
 80009d0:	2301      	movs	r3, #1
 80009d2:	e066      	b.n	8000aa2 <icm_init+0xe8>

	HAL_StatusTypeDef response;

	response = icm_soft_reset(s);
 80009d4:	68f8      	ldr	r0, [r7, #12]
 80009d6:	f000 fbd7 	bl	8001188 <icm_soft_reset>
 80009da:	4603      	mov	r3, r0
 80009dc:	72fb      	strb	r3, [r7, #11]
	if (response != HAL_OK){
 80009de:	7afb      	ldrb	r3, [r7, #11]
 80009e0:	2b00      	cmp	r3, #0
 80009e2:	d004      	beq.n	80009ee <icm_init+0x34>
		s->last_err = ICM_ERR_NOT_INITIALIZED;
 80009e4:	68fb      	ldr	r3, [r7, #12]
 80009e6:	2205      	movs	r2, #5
 80009e8:	715a      	strb	r2, [r3, #5]
		return HAL_ERROR;
 80009ea:	2301      	movs	r3, #1
 80009ec:	e059      	b.n	8000aa2 <icm_init+0xe8>
	}

	HAL_Delay(500);
 80009ee:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80009f2:	f001 fca1 	bl	8002338 <HAL_Delay>

	// Put in standby power modes
	response = icm_power_mgmt0_config(s, /*gyro_mode*/0, /*accel_mode*/0, /*temp_disable*/1, /*idle*/0);
 80009f6:	2300      	movs	r3, #0
 80009f8:	9300      	str	r3, [sp, #0]
 80009fa:	2301      	movs	r3, #1
 80009fc:	2200      	movs	r2, #0
 80009fe:	2100      	movs	r1, #0
 8000a00:	68f8      	ldr	r0, [r7, #12]
 8000a02:	f000 f8a1 	bl	8000b48 <icm_power_mgmt0_config>
 8000a06:	4603      	mov	r3, r0
 8000a08:	72fb      	strb	r3, [r7, #11]
	if (response != HAL_OK){
 8000a0a:	7afb      	ldrb	r3, [r7, #11]
 8000a0c:	2b00      	cmp	r3, #0
 8000a0e:	d004      	beq.n	8000a1a <icm_init+0x60>
		s->last_err = ICM_ERR_NOT_INITIALIZED;
 8000a10:	68fb      	ldr	r3, [r7, #12]
 8000a12:	2205      	movs	r2, #5
 8000a14:	715a      	strb	r2, [r3, #5]
		return HAL_ERROR;
 8000a16:	2301      	movs	r3, #1
 8000a18:	e043      	b.n	8000aa2 <icm_init+0xe8>
	}

	HAL_Delay(500);
 8000a1a:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000a1e:	f001 fc8b 	bl	8002338 <HAL_Delay>

	response = icm_gyro_config0(s, 0, 6);
 8000a22:	2206      	movs	r2, #6
 8000a24:	2100      	movs	r1, #0
 8000a26:	68f8      	ldr	r0, [r7, #12]
 8000a28:	f000 f92c 	bl	8000c84 <icm_gyro_config0>
 8000a2c:	4603      	mov	r3, r0
 8000a2e:	72fb      	strb	r3, [r7, #11]
	if (response != HAL_OK){
 8000a30:	7afb      	ldrb	r3, [r7, #11]
 8000a32:	2b00      	cmp	r3, #0
 8000a34:	d004      	beq.n	8000a40 <icm_init+0x86>
		s->last_err = ICM_ERR_NOT_INITIALIZED;
 8000a36:	68fb      	ldr	r3, [r7, #12]
 8000a38:	2205      	movs	r2, #5
 8000a3a:	715a      	strb	r2, [r3, #5]
		return HAL_ERROR;
 8000a3c:	2301      	movs	r3, #1
 8000a3e:	e030      	b.n	8000aa2 <icm_init+0xe8>
	}

	HAL_Delay(500);
 8000a40:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000a44:	f001 fc78 	bl	8002338 <HAL_Delay>

	response = icm_accel_config0(s, 0 , 6);
 8000a48:	2206      	movs	r2, #6
 8000a4a:	2100      	movs	r1, #0
 8000a4c:	68f8      	ldr	r0, [r7, #12]
 8000a4e:	f000 fa63 	bl	8000f18 <icm_accel_config0>
 8000a52:	4603      	mov	r3, r0
 8000a54:	72fb      	strb	r3, [r7, #11]
	if (response != HAL_OK){
 8000a56:	7afb      	ldrb	r3, [r7, #11]
 8000a58:	2b00      	cmp	r3, #0
 8000a5a:	d004      	beq.n	8000a66 <icm_init+0xac>
		s->last_err = ICM_ERR_NOT_INITIALIZED;
 8000a5c:	68fb      	ldr	r3, [r7, #12]
 8000a5e:	2205      	movs	r2, #5
 8000a60:	715a      	strb	r2, [r3, #5]
		return HAL_ERROR;
 8000a62:	2301      	movs	r3, #1
 8000a64:	e01d      	b.n	8000aa2 <icm_init+0xe8>
	}

	HAL_Delay(500);
 8000a66:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000a6a:	f001 fc65 	bl	8002338 <HAL_Delay>

	// Configure power modes
	response = icm_power_mgmt0_config(s, /*gyro_mode*/2, /*accel_mode*/2, /*temp_disable*/0, /*idle*/0);
 8000a6e:	2300      	movs	r3, #0
 8000a70:	9300      	str	r3, [sp, #0]
 8000a72:	2300      	movs	r3, #0
 8000a74:	2202      	movs	r2, #2
 8000a76:	2102      	movs	r1, #2
 8000a78:	68f8      	ldr	r0, [r7, #12]
 8000a7a:	f000 f865 	bl	8000b48 <icm_power_mgmt0_config>
 8000a7e:	4603      	mov	r3, r0
 8000a80:	72fb      	strb	r3, [r7, #11]
	if (response != HAL_OK){
 8000a82:	7afb      	ldrb	r3, [r7, #11]
 8000a84:	2b00      	cmp	r3, #0
 8000a86:	d004      	beq.n	8000a92 <icm_init+0xd8>
		s->last_err = ICM_ERR_NOT_INITIALIZED;
 8000a88:	68fb      	ldr	r3, [r7, #12]
 8000a8a:	2205      	movs	r2, #5
 8000a8c:	715a      	strb	r2, [r3, #5]
		return HAL_ERROR;
 8000a8e:	2301      	movs	r3, #1
 8000a90:	e007      	b.n	8000aa2 <icm_init+0xe8>
	}

	HAL_Delay(500);
 8000a92:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000a96:	f001 fc4f 	bl	8002338 <HAL_Delay>

	s->last_err = ICM_OK;
 8000a9a:	68fb      	ldr	r3, [r7, #12]
 8000a9c:	2200      	movs	r2, #0
 8000a9e:	715a      	strb	r2, [r3, #5]
	return HAL_OK;
 8000aa0:	2300      	movs	r3, #0
}
 8000aa2:	4618      	mov	r0, r3
 8000aa4:	3710      	adds	r7, #16
 8000aa6:	46bd      	mov	sp, r7
 8000aa8:	bd80      	pop	{r7, pc}

08000aaa <icm_read>:

static HAL_StatusTypeDef icm_read(sensor_if_t *self) {
 8000aaa:	b580      	push	{r7, lr}
 8000aac:	b084      	sub	sp, #16
 8000aae:	af00      	add	r7, sp, #0
 8000ab0:	6078      	str	r0, [r7, #4]
	icm42688_t *s = getSelfStatePointer(self);
 8000ab2:	6878      	ldr	r0, [r7, #4]
 8000ab4:	f000 fd25 	bl	8001502 <getSelfStatePointer>
 8000ab8:	60f8      	str	r0, [r7, #12]
	if (!s) return HAL_ERROR;
 8000aba:	68fb      	ldr	r3, [r7, #12]
 8000abc:	2b00      	cmp	r3, #0
 8000abe:	d101      	bne.n	8000ac4 <icm_read+0x1a>
 8000ac0:	2301      	movs	r3, #1
 8000ac2:	e003      	b.n	8000acc <icm_read+0x22>

	return icm_read_all(s);
 8000ac4:	68f8      	ldr	r0, [r7, #12]
 8000ac6:	f000 fc47 	bl	8001358 <icm_read_all>
 8000aca:	4603      	mov	r3, r0
}
 8000acc:	4618      	mov	r0, r3
 8000ace:	3710      	adds	r7, #16
 8000ad0:	46bd      	mov	sp, r7
 8000ad2:	bd80      	pop	{r7, pc}

08000ad4 <icm_whoami>:

static HAL_StatusTypeDef icm_whoami(sensor_if_t *self, uint8_t *out) {
 8000ad4:	b580      	push	{r7, lr}
 8000ad6:	b086      	sub	sp, #24
 8000ad8:	af02      	add	r7, sp, #8
 8000ada:	6078      	str	r0, [r7, #4]
 8000adc:	6039      	str	r1, [r7, #0]
	icm42688_t *s = getSelfStatePointer(self);
 8000ade:	6878      	ldr	r0, [r7, #4]
 8000ae0:	f000 fd0f 	bl	8001502 <getSelfStatePointer>
 8000ae4:	60f8      	str	r0, [r7, #12]
	if (!s) return HAL_ERROR;
 8000ae6:	68fb      	ldr	r3, [r7, #12]
 8000ae8:	2b00      	cmp	r3, #0
 8000aea:	d101      	bne.n	8000af0 <icm_whoami+0x1c>
 8000aec:	2301      	movs	r3, #1
 8000aee:	e00a      	b.n	8000b06 <icm_whoami+0x32>

	return rd(s->i2c, s->addr7, ICM_WHO_AM_I_REG, out, 1);
 8000af0:	68fb      	ldr	r3, [r7, #12]
 8000af2:	6818      	ldr	r0, [r3, #0]
 8000af4:	68fb      	ldr	r3, [r7, #12]
 8000af6:	7919      	ldrb	r1, [r3, #4]
 8000af8:	2301      	movs	r3, #1
 8000afa:	9300      	str	r3, [sp, #0]
 8000afc:	683b      	ldr	r3, [r7, #0]
 8000afe:	2275      	movs	r2, #117	@ 0x75
 8000b00:	f000 fcb4 	bl	800146c <rd>
 8000b04:	4603      	mov	r3, r0
}
 8000b06:	4618      	mov	r0, r3
 8000b08:	3710      	adds	r7, #16
 8000b0a:	46bd      	mov	sp, r7
 8000b0c:	bd80      	pop	{r7, pc}
	...

08000b10 <icm42688_bind>:
		.init  = icm_init,
		.read  = icm_read,
		.whoami= icm_whoami
};

void icm42688_bind(sensor_if_t *iface, icm42688_t *inst, I2C_HandleTypeDef *i2c, uint8_t addr7) {
 8000b10:	b480      	push	{r7}
 8000b12:	b085      	sub	sp, #20
 8000b14:	af00      	add	r7, sp, #0
 8000b16:	60f8      	str	r0, [r7, #12]
 8000b18:	60b9      	str	r1, [r7, #8]
 8000b1a:	607a      	str	r2, [r7, #4]
 8000b1c:	70fb      	strb	r3, [r7, #3]
	inst->i2c  = i2c;
 8000b1e:	68bb      	ldr	r3, [r7, #8]
 8000b20:	687a      	ldr	r2, [r7, #4]
 8000b22:	601a      	str	r2, [r3, #0]
	inst->addr7 = addr7;
 8000b24:	68bb      	ldr	r3, [r7, #8]
 8000b26:	78fa      	ldrb	r2, [r7, #3]
 8000b28:	711a      	strb	r2, [r3, #4]
	iface->vTable    = &ICM_VTBL;
 8000b2a:	68fb      	ldr	r3, [r7, #12]
 8000b2c:	4a05      	ldr	r2, [pc, #20]	@ (8000b44 <icm42688_bind+0x34>)
 8000b2e:	601a      	str	r2, [r3, #0]
	iface->state = inst;
 8000b30:	68fb      	ldr	r3, [r7, #12]
 8000b32:	68ba      	ldr	r2, [r7, #8]
 8000b34:	605a      	str	r2, [r3, #4]
}
 8000b36:	bf00      	nop
 8000b38:	3714      	adds	r7, #20
 8000b3a:	46bd      	mov	sp, r7
 8000b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b40:	4770      	bx	lr
 8000b42:	bf00      	nop
 8000b44:	0800a294 	.word	0x0800a294

08000b48 <icm_power_mgmt0_config>:
static HAL_StatusTypeDef icm_power_mgmt0_config(icm42688_t *self,
		uint8_t gyro_mode,
		uint8_t accel_mode,
		uint8_t temp_disable,
		uint8_t idle)
{
 8000b48:	b590      	push	{r4, r7, lr}
 8000b4a:	b089      	sub	sp, #36	@ 0x24
 8000b4c:	af04      	add	r7, sp, #16
 8000b4e:	6078      	str	r0, [r7, #4]
 8000b50:	4608      	mov	r0, r1
 8000b52:	4611      	mov	r1, r2
 8000b54:	461a      	mov	r2, r3
 8000b56:	4603      	mov	r3, r0
 8000b58:	70fb      	strb	r3, [r7, #3]
 8000b5a:	460b      	mov	r3, r1
 8000b5c:	70bb      	strb	r3, [r7, #2]
 8000b5e:	4613      	mov	r3, r2
 8000b60:	707b      	strb	r3, [r7, #1]
	uint8_t v;
	HAL_StatusTypeDef st = HAL_I2C_Mem_Read(self->i2c, (self->addr7 << 1),
 8000b62:	687b      	ldr	r3, [r7, #4]
 8000b64:	6818      	ldr	r0, [r3, #0]
 8000b66:	687b      	ldr	r3, [r7, #4]
 8000b68:	791b      	ldrb	r3, [r3, #4]
 8000b6a:	005b      	lsls	r3, r3, #1
 8000b6c:	b299      	uxth	r1, r3
 8000b6e:	23c8      	movs	r3, #200	@ 0xc8
 8000b70:	9302      	str	r3, [sp, #8]
 8000b72:	2301      	movs	r3, #1
 8000b74:	9301      	str	r3, [sp, #4]
 8000b76:	f107 030d 	add.w	r3, r7, #13
 8000b7a:	9300      	str	r3, [sp, #0]
 8000b7c:	2301      	movs	r3, #1
 8000b7e:	224e      	movs	r2, #78	@ 0x4e
 8000b80:	f002 f8e0 	bl	8002d44 <HAL_I2C_Mem_Read>
 8000b84:	4603      	mov	r3, r0
 8000b86:	73fb      	strb	r3, [r7, #15]
			ICM_POWER_MGMT0_REG, I2C_MEMADD_SIZE_8BIT,
			&v, 1, 200);
	if (st != HAL_OK) {
 8000b88:	7bfb      	ldrb	r3, [r7, #15]
 8000b8a:	2b00      	cmp	r3, #0
 8000b8c:	d011      	beq.n	8000bb2 <icm_power_mgmt0_config+0x6a>
		self->last_hal_err = HAL_I2C_GetError(self->i2c);
 8000b8e:	687b      	ldr	r3, [r7, #4]
 8000b90:	681b      	ldr	r3, [r3, #0]
 8000b92:	4618      	mov	r0, r3
 8000b94:	f002 f9f0 	bl	8002f78 <HAL_I2C_GetError>
 8000b98:	4602      	mov	r2, r0
 8000b9a:	687b      	ldr	r3, [r7, #4]
 8000b9c:	609a      	str	r2, [r3, #8]
		self->last_err = (st == HAL_TIMEOUT) ? ICM_ERR_TIMEOUT : ICM_ERR_I2C;
 8000b9e:	7bfb      	ldrb	r3, [r7, #15]
 8000ba0:	2b03      	cmp	r3, #3
 8000ba2:	d101      	bne.n	8000ba8 <icm_power_mgmt0_config+0x60>
 8000ba4:	2203      	movs	r2, #3
 8000ba6:	e000      	b.n	8000baa <icm_power_mgmt0_config+0x62>
 8000ba8:	2202      	movs	r2, #2
 8000baa:	687b      	ldr	r3, [r7, #4]
 8000bac:	715a      	strb	r2, [r3, #5]
		return st;
 8000bae:	7bfb      	ldrb	r3, [r7, #15]
 8000bb0:	e064      	b.n	8000c7c <icm_power_mgmt0_config+0x134>
	}

	// Compose only the fields we intend to change
	uint8_t set =
			((clip2(gyro_mode)  << ICM_POWER_MGMT0_GYRO_MODE_POS)  & ICM_POWER_MGMT0_GYRO_MODE_Msk) |
 8000bb2:	78fb      	ldrb	r3, [r7, #3]
 8000bb4:	4618      	mov	r0, r3
 8000bb6:	f000 fc77 	bl	80014a8 <clip2>
 8000bba:	4603      	mov	r3, r0
 8000bbc:	009b      	lsls	r3, r3, #2
 8000bbe:	b2db      	uxtb	r3, r3
 8000bc0:	f003 030c 	and.w	r3, r3, #12
 8000bc4:	b2dc      	uxtb	r4, r3
			((clip2(accel_mode) << ICM_POWER_MGMT0_ACCEL_MODE_POS) & ICM_POWER_MGMT0_ACCEL_MODE_Msk) |
 8000bc6:	78bb      	ldrb	r3, [r7, #2]
 8000bc8:	4618      	mov	r0, r3
 8000bca:	f000 fc6d 	bl	80014a8 <clip2>
 8000bce:	4603      	mov	r3, r0
 8000bd0:	f003 0303 	and.w	r3, r3, #3
 8000bd4:	b2db      	uxtb	r3, r3
			((clip2(gyro_mode)  << ICM_POWER_MGMT0_GYRO_MODE_POS)  & ICM_POWER_MGMT0_GYRO_MODE_Msk) |
 8000bd6:	4323      	orrs	r3, r4
 8000bd8:	b2db      	uxtb	r3, r3
			((clip2(accel_mode) << ICM_POWER_MGMT0_ACCEL_MODE_POS) & ICM_POWER_MGMT0_ACCEL_MODE_Msk) |
 8000bda:	787a      	ldrb	r2, [r7, #1]
 8000bdc:	2a00      	cmp	r2, #0
 8000bde:	d001      	beq.n	8000be4 <icm_power_mgmt0_config+0x9c>
 8000be0:	2220      	movs	r2, #32
 8000be2:	e000      	b.n	8000be6 <icm_power_mgmt0_config+0x9e>
 8000be4:	2200      	movs	r2, #0
 8000be6:	4313      	orrs	r3, r2
 8000be8:	b2db      	uxtb	r3, r3
			(temp_disable ? ICM_POWER_MGMT0_TEMP_DISABLE_Msk  : 0u) |
 8000bea:	f897 2020 	ldrb.w	r2, [r7, #32]
 8000bee:	2a00      	cmp	r2, #0
 8000bf0:	d001      	beq.n	8000bf6 <icm_power_mgmt0_config+0xae>
 8000bf2:	2210      	movs	r2, #16
 8000bf4:	e000      	b.n	8000bf8 <icm_power_mgmt0_config+0xb0>
 8000bf6:	2200      	movs	r2, #0
	uint8_t set =
 8000bf8:	4313      	orrs	r3, r2
 8000bfa:	73bb      	strb	r3, [r7, #14]
			(idle         ? ICM_POWER_MGMT0_IDLE_Msk     : 0u);

	uint8_t new_v = (uint8_t)((v & ~ICM_POWER_MGMT0_WRITABLE_Msk) | (set & ICM_POWER_MGMT0_WRITABLE_Msk));
 8000bfc:	7b7b      	ldrb	r3, [r7, #13]
 8000bfe:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8000c02:	b2da      	uxtb	r2, r3
 8000c04:	7bbb      	ldrb	r3, [r7, #14]
 8000c06:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8000c0a:	b2db      	uxtb	r3, r3
 8000c0c:	4313      	orrs	r3, r2
 8000c0e:	b2db      	uxtb	r3, r3
 8000c10:	733b      	strb	r3, [r7, #12]

	if (new_v == v) {        // no change → skip bus write
 8000c12:	7b3a      	ldrb	r2, [r7, #12]
 8000c14:	7b7b      	ldrb	r3, [r7, #13]
 8000c16:	429a      	cmp	r2, r3
 8000c18:	d104      	bne.n	8000c24 <icm_power_mgmt0_config+0xdc>
		self->last_err = ICM_OK;
 8000c1a:	687b      	ldr	r3, [r7, #4]
 8000c1c:	2200      	movs	r2, #0
 8000c1e:	715a      	strb	r2, [r3, #5]
		return HAL_OK;
 8000c20:	2300      	movs	r3, #0
 8000c22:	e02b      	b.n	8000c7c <icm_power_mgmt0_config+0x134>
	}

	st = HAL_I2C_Mem_Write(self->i2c, (self->addr7 << 1),
 8000c24:	687b      	ldr	r3, [r7, #4]
 8000c26:	6818      	ldr	r0, [r3, #0]
 8000c28:	687b      	ldr	r3, [r7, #4]
 8000c2a:	791b      	ldrb	r3, [r3, #4]
 8000c2c:	005b      	lsls	r3, r3, #1
 8000c2e:	b299      	uxth	r1, r3
 8000c30:	23c8      	movs	r3, #200	@ 0xc8
 8000c32:	9302      	str	r3, [sp, #8]
 8000c34:	2301      	movs	r3, #1
 8000c36:	9301      	str	r3, [sp, #4]
 8000c38:	f107 030c 	add.w	r3, r7, #12
 8000c3c:	9300      	str	r3, [sp, #0]
 8000c3e:	2301      	movs	r3, #1
 8000c40:	224e      	movs	r2, #78	@ 0x4e
 8000c42:	f001 ff6b 	bl	8002b1c <HAL_I2C_Mem_Write>
 8000c46:	4603      	mov	r3, r0
 8000c48:	73fb      	strb	r3, [r7, #15]
			ICM_POWER_MGMT0_REG, I2C_MEMADD_SIZE_8BIT,
			&new_v, 1, 200);
	if (st != HAL_OK) {
 8000c4a:	7bfb      	ldrb	r3, [r7, #15]
 8000c4c:	2b00      	cmp	r3, #0
 8000c4e:	d011      	beq.n	8000c74 <icm_power_mgmt0_config+0x12c>
		self->last_hal_err = HAL_I2C_GetError(self->i2c);
 8000c50:	687b      	ldr	r3, [r7, #4]
 8000c52:	681b      	ldr	r3, [r3, #0]
 8000c54:	4618      	mov	r0, r3
 8000c56:	f002 f98f 	bl	8002f78 <HAL_I2C_GetError>
 8000c5a:	4602      	mov	r2, r0
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	609a      	str	r2, [r3, #8]
		self->last_err = (st == HAL_TIMEOUT) ? ICM_ERR_TIMEOUT : ICM_ERR_I2C;
 8000c60:	7bfb      	ldrb	r3, [r7, #15]
 8000c62:	2b03      	cmp	r3, #3
 8000c64:	d101      	bne.n	8000c6a <icm_power_mgmt0_config+0x122>
 8000c66:	2203      	movs	r2, #3
 8000c68:	e000      	b.n	8000c6c <icm_power_mgmt0_config+0x124>
 8000c6a:	2202      	movs	r2, #2
 8000c6c:	687b      	ldr	r3, [r7, #4]
 8000c6e:	715a      	strb	r2, [r3, #5]
		return st;
 8000c70:	7bfb      	ldrb	r3, [r7, #15]
 8000c72:	e003      	b.n	8000c7c <icm_power_mgmt0_config+0x134>
	}

	self->last_err = ICM_OK;
 8000c74:	687b      	ldr	r3, [r7, #4]
 8000c76:	2200      	movs	r2, #0
 8000c78:	715a      	strb	r2, [r3, #5]
	return HAL_OK;
 8000c7a:	2300      	movs	r3, #0
}
 8000c7c:	4618      	mov	r0, r3
 8000c7e:	3714      	adds	r7, #20
 8000c80:	46bd      	mov	sp, r7
 8000c82:	bd90      	pop	{r4, r7, pc}

08000c84 <icm_gyro_config0>:

static HAL_StatusTypeDef icm_gyro_config0(icm42688_t *self, uint8_t gyro_fs_sel, uint8_t gyro_odr)
{
 8000c84:	b590      	push	{r4, r7, lr}
 8000c86:	b089      	sub	sp, #36	@ 0x24
 8000c88:	af04      	add	r7, sp, #16
 8000c8a:	6078      	str	r0, [r7, #4]
 8000c8c:	460b      	mov	r3, r1
 8000c8e:	70fb      	strb	r3, [r7, #3]
 8000c90:	4613      	mov	r3, r2
 8000c92:	70bb      	strb	r3, [r7, #2]
	if (!self) return HAL_ERROR;
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	2b00      	cmp	r3, #0
 8000c98:	d101      	bne.n	8000c9e <icm_gyro_config0+0x1a>
 8000c9a:	2301      	movs	r3, #1
 8000c9c:	e10f      	b.n	8000ebe <icm_gyro_config0+0x23a>

	uint8_t v;
	HAL_StatusTypeDef st = HAL_I2C_Mem_Read(self->i2c, (self->addr7 << 1),
 8000c9e:	687b      	ldr	r3, [r7, #4]
 8000ca0:	6818      	ldr	r0, [r3, #0]
 8000ca2:	687b      	ldr	r3, [r7, #4]
 8000ca4:	791b      	ldrb	r3, [r3, #4]
 8000ca6:	005b      	lsls	r3, r3, #1
 8000ca8:	b299      	uxth	r1, r3
 8000caa:	23c8      	movs	r3, #200	@ 0xc8
 8000cac:	9302      	str	r3, [sp, #8]
 8000cae:	2301      	movs	r3, #1
 8000cb0:	9301      	str	r3, [sp, #4]
 8000cb2:	f107 030a 	add.w	r3, r7, #10
 8000cb6:	9300      	str	r3, [sp, #0]
 8000cb8:	2301      	movs	r3, #1
 8000cba:	224f      	movs	r2, #79	@ 0x4f
 8000cbc:	f002 f842 	bl	8002d44 <HAL_I2C_Mem_Read>
 8000cc0:	4603      	mov	r3, r0
 8000cc2:	73fb      	strb	r3, [r7, #15]
			ICM_GYRO_CONFIG0_REG, I2C_MEMADD_SIZE_8BIT,
			&v, 1, 200);
	if (st != HAL_OK) {
 8000cc4:	7bfb      	ldrb	r3, [r7, #15]
 8000cc6:	2b00      	cmp	r3, #0
 8000cc8:	d011      	beq.n	8000cee <icm_gyro_config0+0x6a>
		self->last_hal_err = HAL_I2C_GetError(self->i2c);
 8000cca:	687b      	ldr	r3, [r7, #4]
 8000ccc:	681b      	ldr	r3, [r3, #0]
 8000cce:	4618      	mov	r0, r3
 8000cd0:	f002 f952 	bl	8002f78 <HAL_I2C_GetError>
 8000cd4:	4602      	mov	r2, r0
 8000cd6:	687b      	ldr	r3, [r7, #4]
 8000cd8:	609a      	str	r2, [r3, #8]
		self->last_err = (st == HAL_TIMEOUT) ? ICM_ERR_TIMEOUT : ICM_ERR_I2C;
 8000cda:	7bfb      	ldrb	r3, [r7, #15]
 8000cdc:	2b03      	cmp	r3, #3
 8000cde:	d101      	bne.n	8000ce4 <icm_gyro_config0+0x60>
 8000ce0:	2203      	movs	r2, #3
 8000ce2:	e000      	b.n	8000ce6 <icm_gyro_config0+0x62>
 8000ce4:	2202      	movs	r2, #2
 8000ce6:	687b      	ldr	r3, [r7, #4]
 8000ce8:	715a      	strb	r2, [r3, #5]
		return st;
 8000cea:	7bfb      	ldrb	r3, [r7, #15]
 8000cec:	e0e7      	b.n	8000ebe <icm_gyro_config0+0x23a>
	}

	uint8_t set =
			((clip4(gyro_odr)    << ICM_GYRO_CONFIG0_ODR_POS) & ICM_GYRO_CONFIG0_ODR_Msk) |
 8000cee:	78bb      	ldrb	r3, [r7, #2]
 8000cf0:	4618      	mov	r0, r3
 8000cf2:	f000 fbf7 	bl	80014e4 <clip4>
 8000cf6:	4603      	mov	r3, r0
 8000cf8:	f003 030f 	and.w	r3, r3, #15
 8000cfc:	b2dc      	uxtb	r4, r3
			((clip3(gyro_fs_sel) << ICM_GYRO_CONFIG0_FS_POS)  & ICM_GYRO_CONFIG0_FS_Msk);
 8000cfe:	78fb      	ldrb	r3, [r7, #3]
 8000d00:	4618      	mov	r0, r3
 8000d02:	f000 fbe0 	bl	80014c6 <clip3>
 8000d06:	4603      	mov	r3, r0
 8000d08:	015b      	lsls	r3, r3, #5
 8000d0a:	b2db      	uxtb	r3, r3
	uint8_t set =
 8000d0c:	4323      	orrs	r3, r4
 8000d0e:	73bb      	strb	r3, [r7, #14]

	uint8_t new_v = (uint8_t)((v & ~ICM_GYRO_CONFIG0_WRITABLE_Msk) | set);
 8000d10:	7abb      	ldrb	r3, [r7, #10]
 8000d12:	f003 0310 	and.w	r3, r3, #16
 8000d16:	b2da      	uxtb	r2, r3
 8000d18:	7bbb      	ldrb	r3, [r7, #14]
 8000d1a:	4313      	orrs	r3, r2
 8000d1c:	b2db      	uxtb	r3, r3
 8000d1e:	727b      	strb	r3, [r7, #9]

	if (new_v != v) {
 8000d20:	7a7a      	ldrb	r2, [r7, #9]
 8000d22:	7abb      	ldrb	r3, [r7, #10]
 8000d24:	429a      	cmp	r2, r3
 8000d26:	d027      	beq.n	8000d78 <icm_gyro_config0+0xf4>
		st = HAL_I2C_Mem_Write(self->i2c, (self->addr7 << 1),
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	6818      	ldr	r0, [r3, #0]
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	791b      	ldrb	r3, [r3, #4]
 8000d30:	005b      	lsls	r3, r3, #1
 8000d32:	b299      	uxth	r1, r3
 8000d34:	23c8      	movs	r3, #200	@ 0xc8
 8000d36:	9302      	str	r3, [sp, #8]
 8000d38:	2301      	movs	r3, #1
 8000d3a:	9301      	str	r3, [sp, #4]
 8000d3c:	f107 0309 	add.w	r3, r7, #9
 8000d40:	9300      	str	r3, [sp, #0]
 8000d42:	2301      	movs	r3, #1
 8000d44:	224f      	movs	r2, #79	@ 0x4f
 8000d46:	f001 fee9 	bl	8002b1c <HAL_I2C_Mem_Write>
 8000d4a:	4603      	mov	r3, r0
 8000d4c:	73fb      	strb	r3, [r7, #15]
				ICM_GYRO_CONFIG0_REG, I2C_MEMADD_SIZE_8BIT,
				&new_v, 1, 200);
		if (st != HAL_OK) {
 8000d4e:	7bfb      	ldrb	r3, [r7, #15]
 8000d50:	2b00      	cmp	r3, #0
 8000d52:	d011      	beq.n	8000d78 <icm_gyro_config0+0xf4>
			self->last_hal_err = HAL_I2C_GetError(self->i2c);
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	681b      	ldr	r3, [r3, #0]
 8000d58:	4618      	mov	r0, r3
 8000d5a:	f002 f90d 	bl	8002f78 <HAL_I2C_GetError>
 8000d5e:	4602      	mov	r2, r0
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	609a      	str	r2, [r3, #8]
			self->last_err = (st == HAL_TIMEOUT) ? ICM_ERR_TIMEOUT : ICM_ERR_I2C;
 8000d64:	7bfb      	ldrb	r3, [r7, #15]
 8000d66:	2b03      	cmp	r3, #3
 8000d68:	d101      	bne.n	8000d6e <icm_gyro_config0+0xea>
 8000d6a:	2203      	movs	r2, #3
 8000d6c:	e000      	b.n	8000d70 <icm_gyro_config0+0xec>
 8000d6e:	2202      	movs	r2, #2
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	715a      	strb	r2, [r3, #5]
			return st;
 8000d74:	7bfb      	ldrb	r3, [r7, #15]
 8000d76:	e0a2      	b.n	8000ebe <icm_gyro_config0+0x23a>
		}
	}

	// >>> ALWAYS derive effective settings from the value we now have in the register
	uint8_t eff = (new_v != v) ? new_v : v;
 8000d78:	7a7b      	ldrb	r3, [r7, #9]
 8000d7a:	737b      	strb	r3, [r7, #13]
	uint8_t fs_code  = (eff & ICM_GYRO_CONFIG0_FS_Msk)  >> ICM_GYRO_CONFIG0_FS_POS;
 8000d7c:	7b7b      	ldrb	r3, [r7, #13]
 8000d7e:	095b      	lsrs	r3, r3, #5
 8000d80:	733b      	strb	r3, [r7, #12]
	uint8_t odr_code = (eff & ICM_GYRO_CONFIG0_ODR_Msk) >> ICM_GYRO_CONFIG0_ODR_POS;
 8000d82:	7b7b      	ldrb	r3, [r7, #13]
 8000d84:	f003 030f 	and.w	r3, r3, #15
 8000d88:	72fb      	strb	r3, [r7, #11]

	// FS -> LSB per dps  (keep switch for readability)
	switch (fs_code & 0x7u) {
 8000d8a:	7b3b      	ldrb	r3, [r7, #12]
 8000d8c:	f003 0307 	and.w	r3, r3, #7
 8000d90:	2b07      	cmp	r3, #7
 8000d92:	d833      	bhi.n	8000dfc <icm_gyro_config0+0x178>
 8000d94:	a201      	add	r2, pc, #4	@ (adr r2, 8000d9c <icm_gyro_config0+0x118>)
 8000d96:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000d9a:	bf00      	nop
 8000d9c:	08000dbd 	.word	0x08000dbd
 8000da0:	08000dc5 	.word	0x08000dc5
 8000da4:	08000dcd 	.word	0x08000dcd
 8000da8:	08000dd5 	.word	0x08000dd5
 8000dac:	08000ddd 	.word	0x08000ddd
 8000db0:	08000de5 	.word	0x08000de5
 8000db4:	08000ded 	.word	0x08000ded
 8000db8:	08000df5 	.word	0x08000df5
	case 0: self->gyro_lsb_per_dps = 16.384f;   break; // ±2000 dps
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	4a42      	ldr	r2, [pc, #264]	@ (8000ec8 <icm_gyro_config0+0x244>)
 8000dc0:	63da      	str	r2, [r3, #60]	@ 0x3c
 8000dc2:	e01b      	b.n	8000dfc <icm_gyro_config0+0x178>
	case 1: self->gyro_lsb_per_dps = 32.768f;   break; // ±1000
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	4a41      	ldr	r2, [pc, #260]	@ (8000ecc <icm_gyro_config0+0x248>)
 8000dc8:	63da      	str	r2, [r3, #60]	@ 0x3c
 8000dca:	e017      	b.n	8000dfc <icm_gyro_config0+0x178>
	case 2: self->gyro_lsb_per_dps = 65.536f;   break; // ±500
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	4a40      	ldr	r2, [pc, #256]	@ (8000ed0 <icm_gyro_config0+0x24c>)
 8000dd0:	63da      	str	r2, [r3, #60]	@ 0x3c
 8000dd2:	e013      	b.n	8000dfc <icm_gyro_config0+0x178>
	case 3: self->gyro_lsb_per_dps = 131.072f;  break; // ±250
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	4a3f      	ldr	r2, [pc, #252]	@ (8000ed4 <icm_gyro_config0+0x250>)
 8000dd8:	63da      	str	r2, [r3, #60]	@ 0x3c
 8000dda:	e00f      	b.n	8000dfc <icm_gyro_config0+0x178>
	case 4: self->gyro_lsb_per_dps = 262.144f;  break; // ±125
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	4a3e      	ldr	r2, [pc, #248]	@ (8000ed8 <icm_gyro_config0+0x254>)
 8000de0:	63da      	str	r2, [r3, #60]	@ 0x3c
 8000de2:	e00b      	b.n	8000dfc <icm_gyro_config0+0x178>
	case 5: self->gyro_lsb_per_dps = 524.288f;  break; // ±62.5
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	4a3d      	ldr	r2, [pc, #244]	@ (8000edc <icm_gyro_config0+0x258>)
 8000de8:	63da      	str	r2, [r3, #60]	@ 0x3c
 8000dea:	e007      	b.n	8000dfc <icm_gyro_config0+0x178>
	case 6: self->gyro_lsb_per_dps = 1048.576f; break; // ±31.25
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	4a3c      	ldr	r2, [pc, #240]	@ (8000ee0 <icm_gyro_config0+0x25c>)
 8000df0:	63da      	str	r2, [r3, #60]	@ 0x3c
 8000df2:	e003      	b.n	8000dfc <icm_gyro_config0+0x178>
	case 7: self->gyro_lsb_per_dps = 2097.152f; break; // ±15.625
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	4a3b      	ldr	r2, [pc, #236]	@ (8000ee4 <icm_gyro_config0+0x260>)
 8000df8:	63da      	str	r2, [r3, #60]	@ 0x3c
 8000dfa:	bf00      	nop
	}

	// ODR code -> Hz
	switch (odr_code & 0xFu) {
 8000dfc:	7afb      	ldrb	r3, [r7, #11]
 8000dfe:	f003 030f 	and.w	r3, r3, #15
 8000e02:	3b01      	subs	r3, #1
 8000e04:	2b0e      	cmp	r3, #14
 8000e06:	d851      	bhi.n	8000eac <icm_gyro_config0+0x228>
 8000e08:	a201      	add	r2, pc, #4	@ (adr r2, 8000e10 <icm_gyro_config0+0x18c>)
 8000e0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000e0e:	bf00      	nop
 8000e10:	08000e4d 	.word	0x08000e4d
 8000e14:	08000e55 	.word	0x08000e55
 8000e18:	08000e5d 	.word	0x08000e5d
 8000e1c:	08000e65 	.word	0x08000e65
 8000e20:	08000e6d 	.word	0x08000e6d
 8000e24:	08000e75 	.word	0x08000e75
 8000e28:	08000e7d 	.word	0x08000e7d
 8000e2c:	08000e85 	.word	0x08000e85
 8000e30:	08000e8d 	.word	0x08000e8d
 8000e34:	08000e95 	.word	0x08000e95
 8000e38:	08000e9d 	.word	0x08000e9d
 8000e3c:	08000ead 	.word	0x08000ead
 8000e40:	08000ead 	.word	0x08000ead
 8000e44:	08000ead 	.word	0x08000ead
 8000e48:	08000ea5 	.word	0x08000ea5
	case 1:  self->gyro_odr = 32000.0f; break;
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	4a26      	ldr	r2, [pc, #152]	@ (8000ee8 <icm_gyro_config0+0x264>)
 8000e50:	641a      	str	r2, [r3, #64]	@ 0x40
 8000e52:	e030      	b.n	8000eb6 <icm_gyro_config0+0x232>
	case 2:  self->gyro_odr = 16000.0f; break;
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	4a25      	ldr	r2, [pc, #148]	@ (8000eec <icm_gyro_config0+0x268>)
 8000e58:	641a      	str	r2, [r3, #64]	@ 0x40
 8000e5a:	e02c      	b.n	8000eb6 <icm_gyro_config0+0x232>
	case 3:  self->gyro_odr = 8000.0f;  break;
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	4a24      	ldr	r2, [pc, #144]	@ (8000ef0 <icm_gyro_config0+0x26c>)
 8000e60:	641a      	str	r2, [r3, #64]	@ 0x40
 8000e62:	e028      	b.n	8000eb6 <icm_gyro_config0+0x232>
	case 4:  self->gyro_odr = 4000.0f;  break;
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	4a23      	ldr	r2, [pc, #140]	@ (8000ef4 <icm_gyro_config0+0x270>)
 8000e68:	641a      	str	r2, [r3, #64]	@ 0x40
 8000e6a:	e024      	b.n	8000eb6 <icm_gyro_config0+0x232>
	case 5:  self->gyro_odr = 2000.0f;  break;
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	4a22      	ldr	r2, [pc, #136]	@ (8000ef8 <icm_gyro_config0+0x274>)
 8000e70:	641a      	str	r2, [r3, #64]	@ 0x40
 8000e72:	e020      	b.n	8000eb6 <icm_gyro_config0+0x232>
	case 6:  self->gyro_odr = 1000.0f;  break; // reset default
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	4a21      	ldr	r2, [pc, #132]	@ (8000efc <icm_gyro_config0+0x278>)
 8000e78:	641a      	str	r2, [r3, #64]	@ 0x40
 8000e7a:	e01c      	b.n	8000eb6 <icm_gyro_config0+0x232>
	case 7:  self->gyro_odr = 200.0f;   break;
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	4a20      	ldr	r2, [pc, #128]	@ (8000f00 <icm_gyro_config0+0x27c>)
 8000e80:	641a      	str	r2, [r3, #64]	@ 0x40
 8000e82:	e018      	b.n	8000eb6 <icm_gyro_config0+0x232>
	case 8:  self->gyro_odr = 100.0f;   break;
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	4a1f      	ldr	r2, [pc, #124]	@ (8000f04 <icm_gyro_config0+0x280>)
 8000e88:	641a      	str	r2, [r3, #64]	@ 0x40
 8000e8a:	e014      	b.n	8000eb6 <icm_gyro_config0+0x232>
	case 9:  self->gyro_odr = 50.0f;    break;
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	4a1e      	ldr	r2, [pc, #120]	@ (8000f08 <icm_gyro_config0+0x284>)
 8000e90:	641a      	str	r2, [r3, #64]	@ 0x40
 8000e92:	e010      	b.n	8000eb6 <icm_gyro_config0+0x232>
	case 10: self->gyro_odr = 25.0f;    break;
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	4a1d      	ldr	r2, [pc, #116]	@ (8000f0c <icm_gyro_config0+0x288>)
 8000e98:	641a      	str	r2, [r3, #64]	@ 0x40
 8000e9a:	e00c      	b.n	8000eb6 <icm_gyro_config0+0x232>
	case 11: self->gyro_odr = 12.5f;    break;
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	4a1c      	ldr	r2, [pc, #112]	@ (8000f10 <icm_gyro_config0+0x28c>)
 8000ea0:	641a      	str	r2, [r3, #64]	@ 0x40
 8000ea2:	e008      	b.n	8000eb6 <icm_gyro_config0+0x232>
	case 15: self->gyro_odr = 500.0f;   break;
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	4a1b      	ldr	r2, [pc, #108]	@ (8000f14 <icm_gyro_config0+0x290>)
 8000ea8:	641a      	str	r2, [r3, #64]	@ 0x40
 8000eaa:	e004      	b.n	8000eb6 <icm_gyro_config0+0x232>
	default: self->gyro_odr = 0.0f;     break; // reserved codes
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	f04f 0200 	mov.w	r2, #0
 8000eb2:	641a      	str	r2, [r3, #64]	@ 0x40
 8000eb4:	bf00      	nop
	}

	self->last_err = ICM_OK;
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	2200      	movs	r2, #0
 8000eba:	715a      	strb	r2, [r3, #5]
	return HAL_OK;
 8000ebc:	2300      	movs	r3, #0
}
 8000ebe:	4618      	mov	r0, r3
 8000ec0:	3714      	adds	r7, #20
 8000ec2:	46bd      	mov	sp, r7
 8000ec4:	bd90      	pop	{r4, r7, pc}
 8000ec6:	bf00      	nop
 8000ec8:	4183126f 	.word	0x4183126f
 8000ecc:	4203126f 	.word	0x4203126f
 8000ed0:	4283126f 	.word	0x4283126f
 8000ed4:	4303126f 	.word	0x4303126f
 8000ed8:	4383126f 	.word	0x4383126f
 8000edc:	4403126f 	.word	0x4403126f
 8000ee0:	4483126f 	.word	0x4483126f
 8000ee4:	4503126f 	.word	0x4503126f
 8000ee8:	46fa0000 	.word	0x46fa0000
 8000eec:	467a0000 	.word	0x467a0000
 8000ef0:	45fa0000 	.word	0x45fa0000
 8000ef4:	457a0000 	.word	0x457a0000
 8000ef8:	44fa0000 	.word	0x44fa0000
 8000efc:	447a0000 	.word	0x447a0000
 8000f00:	43480000 	.word	0x43480000
 8000f04:	42c80000 	.word	0x42c80000
 8000f08:	42480000 	.word	0x42480000
 8000f0c:	41c80000 	.word	0x41c80000
 8000f10:	41480000 	.word	0x41480000
 8000f14:	43fa0000 	.word	0x43fa0000

08000f18 <icm_accel_config0>:

static HAL_StatusTypeDef icm_accel_config0(icm42688_t *self, uint8_t accel_fs_sel, uint8_t accel_odr)
{
 8000f18:	b590      	push	{r4, r7, lr}
 8000f1a:	b089      	sub	sp, #36	@ 0x24
 8000f1c:	af04      	add	r7, sp, #16
 8000f1e:	6078      	str	r0, [r7, #4]
 8000f20:	460b      	mov	r3, r1
 8000f22:	70fb      	strb	r3, [r7, #3]
 8000f24:	4613      	mov	r3, r2
 8000f26:	70bb      	strb	r3, [r7, #2]
	if (!self) return HAL_ERROR;
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	2b00      	cmp	r3, #0
 8000f2c:	d101      	bne.n	8000f32 <icm_accel_config0+0x1a>
 8000f2e:	2301      	movs	r3, #1
 8000f30:	e107      	b.n	8001142 <icm_accel_config0+0x22a>

	uint8_t v;
	HAL_StatusTypeDef st = HAL_I2C_Mem_Read(self->i2c, (self->addr7 << 1),
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	6818      	ldr	r0, [r3, #0]
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	791b      	ldrb	r3, [r3, #4]
 8000f3a:	005b      	lsls	r3, r3, #1
 8000f3c:	b299      	uxth	r1, r3
 8000f3e:	23c8      	movs	r3, #200	@ 0xc8
 8000f40:	9302      	str	r3, [sp, #8]
 8000f42:	2301      	movs	r3, #1
 8000f44:	9301      	str	r3, [sp, #4]
 8000f46:	f107 030a 	add.w	r3, r7, #10
 8000f4a:	9300      	str	r3, [sp, #0]
 8000f4c:	2301      	movs	r3, #1
 8000f4e:	2250      	movs	r2, #80	@ 0x50
 8000f50:	f001 fef8 	bl	8002d44 <HAL_I2C_Mem_Read>
 8000f54:	4603      	mov	r3, r0
 8000f56:	73fb      	strb	r3, [r7, #15]
			ICM_ACCEL_CONFIG0_REG, I2C_MEMADD_SIZE_8BIT,
			&v, 1, 200);
	if (st != HAL_OK) {
 8000f58:	7bfb      	ldrb	r3, [r7, #15]
 8000f5a:	2b00      	cmp	r3, #0
 8000f5c:	d011      	beq.n	8000f82 <icm_accel_config0+0x6a>
		self->last_hal_err = HAL_I2C_GetError(self->i2c);
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	681b      	ldr	r3, [r3, #0]
 8000f62:	4618      	mov	r0, r3
 8000f64:	f002 f808 	bl	8002f78 <HAL_I2C_GetError>
 8000f68:	4602      	mov	r2, r0
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	609a      	str	r2, [r3, #8]
		self->last_err = (st == HAL_TIMEOUT) ? ICM_ERR_TIMEOUT : ICM_ERR_I2C;
 8000f6e:	7bfb      	ldrb	r3, [r7, #15]
 8000f70:	2b03      	cmp	r3, #3
 8000f72:	d101      	bne.n	8000f78 <icm_accel_config0+0x60>
 8000f74:	2203      	movs	r2, #3
 8000f76:	e000      	b.n	8000f7a <icm_accel_config0+0x62>
 8000f78:	2202      	movs	r2, #2
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	715a      	strb	r2, [r3, #5]
		return st;
 8000f7e:	7bfb      	ldrb	r3, [r7, #15]
 8000f80:	e0df      	b.n	8001142 <icm_accel_config0+0x22a>
	}

	uint8_t set =
			((clip4(accel_odr)    << ICM_ACCEL_CONFIG0_ODR_POS) & ICM_ACCEL_CONFIG0_ODR_Msk) |
 8000f82:	78bb      	ldrb	r3, [r7, #2]
 8000f84:	4618      	mov	r0, r3
 8000f86:	f000 faad 	bl	80014e4 <clip4>
 8000f8a:	4603      	mov	r3, r0
 8000f8c:	f003 030f 	and.w	r3, r3, #15
 8000f90:	b2dc      	uxtb	r4, r3
			((clip3(accel_fs_sel) << ICM_ACCEL_CONFIG0_FS_POS)  & ICM_ACCEL_CONFIG0_FS_Msk);
 8000f92:	78fb      	ldrb	r3, [r7, #3]
 8000f94:	4618      	mov	r0, r3
 8000f96:	f000 fa96 	bl	80014c6 <clip3>
 8000f9a:	4603      	mov	r3, r0
 8000f9c:	015b      	lsls	r3, r3, #5
 8000f9e:	b2db      	uxtb	r3, r3
	uint8_t set =
 8000fa0:	4323      	orrs	r3, r4
 8000fa2:	73bb      	strb	r3, [r7, #14]

	uint8_t new_v = (uint8_t)((v & ~ICM_ACCEL_CONFIG0_WRITABLE_Msk) | set);
 8000fa4:	7abb      	ldrb	r3, [r7, #10]
 8000fa6:	f003 0310 	and.w	r3, r3, #16
 8000faa:	b2da      	uxtb	r2, r3
 8000fac:	7bbb      	ldrb	r3, [r7, #14]
 8000fae:	4313      	orrs	r3, r2
 8000fb0:	b2db      	uxtb	r3, r3
 8000fb2:	727b      	strb	r3, [r7, #9]

	if (new_v != v) {
 8000fb4:	7a7a      	ldrb	r2, [r7, #9]
 8000fb6:	7abb      	ldrb	r3, [r7, #10]
 8000fb8:	429a      	cmp	r2, r3
 8000fba:	d027      	beq.n	800100c <icm_accel_config0+0xf4>
		st = HAL_I2C_Mem_Write(self->i2c, (self->addr7 << 1),
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	6818      	ldr	r0, [r3, #0]
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	791b      	ldrb	r3, [r3, #4]
 8000fc4:	005b      	lsls	r3, r3, #1
 8000fc6:	b299      	uxth	r1, r3
 8000fc8:	23c8      	movs	r3, #200	@ 0xc8
 8000fca:	9302      	str	r3, [sp, #8]
 8000fcc:	2301      	movs	r3, #1
 8000fce:	9301      	str	r3, [sp, #4]
 8000fd0:	f107 0309 	add.w	r3, r7, #9
 8000fd4:	9300      	str	r3, [sp, #0]
 8000fd6:	2301      	movs	r3, #1
 8000fd8:	2250      	movs	r2, #80	@ 0x50
 8000fda:	f001 fd9f 	bl	8002b1c <HAL_I2C_Mem_Write>
 8000fde:	4603      	mov	r3, r0
 8000fe0:	73fb      	strb	r3, [r7, #15]
				ICM_ACCEL_CONFIG0_REG, I2C_MEMADD_SIZE_8BIT,
				&new_v, 1, 200);
		if (st != HAL_OK) {
 8000fe2:	7bfb      	ldrb	r3, [r7, #15]
 8000fe4:	2b00      	cmp	r3, #0
 8000fe6:	d011      	beq.n	800100c <icm_accel_config0+0xf4>
			self->last_hal_err = HAL_I2C_GetError(self->i2c);
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	681b      	ldr	r3, [r3, #0]
 8000fec:	4618      	mov	r0, r3
 8000fee:	f001 ffc3 	bl	8002f78 <HAL_I2C_GetError>
 8000ff2:	4602      	mov	r2, r0
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	609a      	str	r2, [r3, #8]
			self->last_err = (st == HAL_TIMEOUT) ? ICM_ERR_TIMEOUT : ICM_ERR_I2C;
 8000ff8:	7bfb      	ldrb	r3, [r7, #15]
 8000ffa:	2b03      	cmp	r3, #3
 8000ffc:	d101      	bne.n	8001002 <icm_accel_config0+0xea>
 8000ffe:	2203      	movs	r2, #3
 8001000:	e000      	b.n	8001004 <icm_accel_config0+0xec>
 8001002:	2202      	movs	r2, #2
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	715a      	strb	r2, [r3, #5]
			return st;
 8001008:	7bfb      	ldrb	r3, [r7, #15]
 800100a:	e09a      	b.n	8001142 <icm_accel_config0+0x22a>
		}
	}

	// >>> ALWAYS derive effective settings
	uint8_t eff = (new_v != v) ? new_v : v;
 800100c:	7a7b      	ldrb	r3, [r7, #9]
 800100e:	737b      	strb	r3, [r7, #13]
	uint8_t fs_code  = (eff & ICM_ACCEL_CONFIG0_FS_Msk)  >> ICM_ACCEL_CONFIG0_FS_POS;
 8001010:	7b7b      	ldrb	r3, [r7, #13]
 8001012:	095b      	lsrs	r3, r3, #5
 8001014:	733b      	strb	r3, [r7, #12]
	uint8_t odr_code = (eff & ICM_ACCEL_CONFIG0_ODR_Msk) >> ICM_ACCEL_CONFIG0_ODR_POS;
 8001016:	7b7b      	ldrb	r3, [r7, #13]
 8001018:	f003 030f 	and.w	r3, r3, #15
 800101c:	72fb      	strb	r3, [r7, #11]

	// FS -> LSB per g (assuming 00=±2g, 01=±4g, 10=±8g, 11=±16g)
	switch (fs_code & 0x3u) {
 800101e:	7b3b      	ldrb	r3, [r7, #12]
 8001020:	f003 0303 	and.w	r3, r3, #3
 8001024:	2b03      	cmp	r3, #3
 8001026:	d81f      	bhi.n	8001068 <icm_accel_config0+0x150>
 8001028:	a201      	add	r2, pc, #4	@ (adr r2, 8001030 <icm_accel_config0+0x118>)
 800102a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800102e:	bf00      	nop
 8001030:	08001041 	.word	0x08001041
 8001034:	0800104b 	.word	0x0800104b
 8001038:	08001055 	.word	0x08001055
 800103c:	0800105f 	.word	0x0800105f
	case 0: self->accel_lsb_per_g = 2048.0f;  break; // ±16g
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	f04f 428a 	mov.w	r2, #1157627904	@ 0x45000000
 8001046:	639a      	str	r2, [r3, #56]	@ 0x38
 8001048:	e00e      	b.n	8001068 <icm_accel_config0+0x150>
	case 1: self->accel_lsb_per_g = 4096.0f;  break; // ±8g
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	f04f 428b 	mov.w	r2, #1166016512	@ 0x45800000
 8001050:	639a      	str	r2, [r3, #56]	@ 0x38
 8001052:	e009      	b.n	8001068 <icm_accel_config0+0x150>
	case 2: self->accel_lsb_per_g = 8192.0f;  break; // ±4g
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	f04f 428c 	mov.w	r2, #1174405120	@ 0x46000000
 800105a:	639a      	str	r2, [r3, #56]	@ 0x38
 800105c:	e004      	b.n	8001068 <icm_accel_config0+0x150>
	case 3: self->accel_lsb_per_g = 16384.0f; break; // ±2g
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	f04f 428d 	mov.w	r2, #1182793728	@ 0x46800000
 8001064:	639a      	str	r2, [r3, #56]	@ 0x38
 8001066:	bf00      	nop
	}

	// ODR code -> Hz
	switch (odr_code & 0xFu) {
 8001068:	7afb      	ldrb	r3, [r7, #11]
 800106a:	f003 030f 	and.w	r3, r3, #15
 800106e:	3b01      	subs	r3, #1
 8001070:	2b0e      	cmp	r3, #14
 8001072:	d85d      	bhi.n	8001130 <icm_accel_config0+0x218>
 8001074:	a201      	add	r2, pc, #4	@ (adr r2, 800107c <icm_accel_config0+0x164>)
 8001076:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800107a:	bf00      	nop
 800107c:	080010b9 	.word	0x080010b9
 8001080:	080010c1 	.word	0x080010c1
 8001084:	080010c9 	.word	0x080010c9
 8001088:	080010d1 	.word	0x080010d1
 800108c:	080010d9 	.word	0x080010d9
 8001090:	080010e1 	.word	0x080010e1
 8001094:	080010e9 	.word	0x080010e9
 8001098:	080010f1 	.word	0x080010f1
 800109c:	080010f9 	.word	0x080010f9
 80010a0:	08001101 	.word	0x08001101
 80010a4:	08001109 	.word	0x08001109
 80010a8:	08001111 	.word	0x08001111
 80010ac:	08001119 	.word	0x08001119
 80010b0:	08001121 	.word	0x08001121
 80010b4:	08001129 	.word	0x08001129
	case 1:  self->accel_odr = 32000.0f; break;
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	4a24      	ldr	r2, [pc, #144]	@ (800114c <icm_accel_config0+0x234>)
 80010bc:	645a      	str	r2, [r3, #68]	@ 0x44
 80010be:	e03c      	b.n	800113a <icm_accel_config0+0x222>
	case 2:  self->accel_odr = 16000.0f; break;
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	4a23      	ldr	r2, [pc, #140]	@ (8001150 <icm_accel_config0+0x238>)
 80010c4:	645a      	str	r2, [r3, #68]	@ 0x44
 80010c6:	e038      	b.n	800113a <icm_accel_config0+0x222>
	case 3:  self->accel_odr = 8000.0f;  break;
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	4a22      	ldr	r2, [pc, #136]	@ (8001154 <icm_accel_config0+0x23c>)
 80010cc:	645a      	str	r2, [r3, #68]	@ 0x44
 80010ce:	e034      	b.n	800113a <icm_accel_config0+0x222>
	case 4:  self->accel_odr = 4000.0f;  break;
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	4a21      	ldr	r2, [pc, #132]	@ (8001158 <icm_accel_config0+0x240>)
 80010d4:	645a      	str	r2, [r3, #68]	@ 0x44
 80010d6:	e030      	b.n	800113a <icm_accel_config0+0x222>
	case 5:  self->accel_odr = 2000.0f;  break;
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	4a20      	ldr	r2, [pc, #128]	@ (800115c <icm_accel_config0+0x244>)
 80010dc:	645a      	str	r2, [r3, #68]	@ 0x44
 80010de:	e02c      	b.n	800113a <icm_accel_config0+0x222>
	case 6:  self->accel_odr = 1000.0f;  break; // reset default
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	4a1f      	ldr	r2, [pc, #124]	@ (8001160 <icm_accel_config0+0x248>)
 80010e4:	645a      	str	r2, [r3, #68]	@ 0x44
 80010e6:	e028      	b.n	800113a <icm_accel_config0+0x222>
	case 7:  self->accel_odr = 200.0f;   break;
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	4a1e      	ldr	r2, [pc, #120]	@ (8001164 <icm_accel_config0+0x24c>)
 80010ec:	645a      	str	r2, [r3, #68]	@ 0x44
 80010ee:	e024      	b.n	800113a <icm_accel_config0+0x222>
	case 8:  self->accel_odr = 100.0f;   break;
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	4a1d      	ldr	r2, [pc, #116]	@ (8001168 <icm_accel_config0+0x250>)
 80010f4:	645a      	str	r2, [r3, #68]	@ 0x44
 80010f6:	e020      	b.n	800113a <icm_accel_config0+0x222>
	case 9:  self->accel_odr = 50.0f;    break;
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	4a1c      	ldr	r2, [pc, #112]	@ (800116c <icm_accel_config0+0x254>)
 80010fc:	645a      	str	r2, [r3, #68]	@ 0x44
 80010fe:	e01c      	b.n	800113a <icm_accel_config0+0x222>
	case 10: self->accel_odr = 25.0f;    break;
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	4a1b      	ldr	r2, [pc, #108]	@ (8001170 <icm_accel_config0+0x258>)
 8001104:	645a      	str	r2, [r3, #68]	@ 0x44
 8001106:	e018      	b.n	800113a <icm_accel_config0+0x222>
	case 11: self->accel_odr = 12.5f;    break;
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	4a1a      	ldr	r2, [pc, #104]	@ (8001174 <icm_accel_config0+0x25c>)
 800110c:	645a      	str	r2, [r3, #68]	@ 0x44
 800110e:	e014      	b.n	800113a <icm_accel_config0+0x222>
	case 12: self->accel_odr = 6.25f;    break;
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	4a19      	ldr	r2, [pc, #100]	@ (8001178 <icm_accel_config0+0x260>)
 8001114:	645a      	str	r2, [r3, #68]	@ 0x44
 8001116:	e010      	b.n	800113a <icm_accel_config0+0x222>
	case 13: self->accel_odr = 3.125f;   break;
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	4a18      	ldr	r2, [pc, #96]	@ (800117c <icm_accel_config0+0x264>)
 800111c:	645a      	str	r2, [r3, #68]	@ 0x44
 800111e:	e00c      	b.n	800113a <icm_accel_config0+0x222>
	case 14: self->accel_odr = 1.5625f;  break;
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	4a17      	ldr	r2, [pc, #92]	@ (8001180 <icm_accel_config0+0x268>)
 8001124:	645a      	str	r2, [r3, #68]	@ 0x44
 8001126:	e008      	b.n	800113a <icm_accel_config0+0x222>
	case 15: self->accel_odr = 500.0f;   break;
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	4a16      	ldr	r2, [pc, #88]	@ (8001184 <icm_accel_config0+0x26c>)
 800112c:	645a      	str	r2, [r3, #68]	@ 0x44
 800112e:	e004      	b.n	800113a <icm_accel_config0+0x222>
	default: self->accel_odr = 0.0f;     break;
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	f04f 0200 	mov.w	r2, #0
 8001136:	645a      	str	r2, [r3, #68]	@ 0x44
 8001138:	bf00      	nop
	}

	self->last_err = ICM_OK;
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	2200      	movs	r2, #0
 800113e:	715a      	strb	r2, [r3, #5]
	return HAL_OK;
 8001140:	2300      	movs	r3, #0
}
 8001142:	4618      	mov	r0, r3
 8001144:	3714      	adds	r7, #20
 8001146:	46bd      	mov	sp, r7
 8001148:	bd90      	pop	{r4, r7, pc}
 800114a:	bf00      	nop
 800114c:	46fa0000 	.word	0x46fa0000
 8001150:	467a0000 	.word	0x467a0000
 8001154:	45fa0000 	.word	0x45fa0000
 8001158:	457a0000 	.word	0x457a0000
 800115c:	44fa0000 	.word	0x44fa0000
 8001160:	447a0000 	.word	0x447a0000
 8001164:	43480000 	.word	0x43480000
 8001168:	42c80000 	.word	0x42c80000
 800116c:	42480000 	.word	0x42480000
 8001170:	41c80000 	.word	0x41c80000
 8001174:	41480000 	.word	0x41480000
 8001178:	40c80000 	.word	0x40c80000
 800117c:	40480000 	.word	0x40480000
 8001180:	3fc80000 	.word	0x3fc80000
 8001184:	43fa0000 	.word	0x43fa0000

08001188 <icm_soft_reset>:

static HAL_StatusTypeDef icm_soft_reset(icm42688_t *s)
{
 8001188:	b580      	push	{r7, lr}
 800118a:	b088      	sub	sp, #32
 800118c:	af04      	add	r7, sp, #16
 800118e:	6078      	str	r0, [r7, #4]
	if (!s) return HAL_ERROR;
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	2b00      	cmp	r3, #0
 8001194:	d101      	bne.n	800119a <icm_soft_reset+0x12>
 8001196:	2301      	movs	r3, #1
 8001198:	e060      	b.n	800125c <icm_soft_reset+0xd4>

	uint8_t cmd = ICM_SOFT_RESET_Msk;                 // write-one-to-reset
 800119a:	2301      	movs	r3, #1
 800119c:	73bb      	strb	r3, [r7, #14]
	HAL_StatusTypeDef st = HAL_I2C_Mem_Write(s->i2c, (s->addr7 << 1),
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	6818      	ldr	r0, [r3, #0]
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	791b      	ldrb	r3, [r3, #4]
 80011a6:	005b      	lsls	r3, r3, #1
 80011a8:	b299      	uxth	r1, r3
 80011aa:	23c8      	movs	r3, #200	@ 0xc8
 80011ac:	9302      	str	r3, [sp, #8]
 80011ae:	2301      	movs	r3, #1
 80011b0:	9301      	str	r3, [sp, #4]
 80011b2:	f107 030e 	add.w	r3, r7, #14
 80011b6:	9300      	str	r3, [sp, #0]
 80011b8:	2301      	movs	r3, #1
 80011ba:	2211      	movs	r2, #17
 80011bc:	f001 fcae 	bl	8002b1c <HAL_I2C_Mem_Write>
 80011c0:	4603      	mov	r3, r0
 80011c2:	73fb      	strb	r3, [r7, #15]
			ICM_SOFT_RESET_REG, I2C_MEMADD_SIZE_8BIT,
			&cmd, 1, 200);
	if (st != HAL_OK) {
 80011c4:	7bfb      	ldrb	r3, [r7, #15]
 80011c6:	2b00      	cmp	r3, #0
 80011c8:	d011      	beq.n	80011ee <icm_soft_reset+0x66>
		s->last_hal_err = HAL_I2C_GetError(s->i2c);
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	4618      	mov	r0, r3
 80011d0:	f001 fed2 	bl	8002f78 <HAL_I2C_GetError>
 80011d4:	4602      	mov	r2, r0
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	609a      	str	r2, [r3, #8]
		s->last_err = (st == HAL_TIMEOUT) ? ICM_ERR_TIMEOUT : ICM_ERR_I2C;
 80011da:	7bfb      	ldrb	r3, [r7, #15]
 80011dc:	2b03      	cmp	r3, #3
 80011de:	d101      	bne.n	80011e4 <icm_soft_reset+0x5c>
 80011e0:	2203      	movs	r2, #3
 80011e2:	e000      	b.n	80011e6 <icm_soft_reset+0x5e>
 80011e4:	2202      	movs	r2, #2
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	715a      	strb	r2, [r3, #5]
		return st;
 80011ea:	7bfb      	ldrb	r3, [r7, #15]
 80011ec:	e036      	b.n	800125c <icm_soft_reset+0xd4>
	}

	// Give the device time to reboot and reload defaults.
	// Typical is a few ms; be conservative.
	HAL_Delay(10);
 80011ee:	200a      	movs	r0, #10
 80011f0:	f001 f8a2 	bl	8002338 <HAL_Delay>

	// Optional: verify reset by reading a known reset-value register
	// (e.g., WHO_AM_I or checking PWR_MGMT0 returned to its reset state).
	uint8_t who = 0;
 80011f4:	2300      	movs	r3, #0
 80011f6:	737b      	strb	r3, [r7, #13]
	st = HAL_I2C_Mem_Read(s->i2c, (s->addr7 << 1), ICM_WHO_AM_I_REG,
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	6818      	ldr	r0, [r3, #0]
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	791b      	ldrb	r3, [r3, #4]
 8001200:	005b      	lsls	r3, r3, #1
 8001202:	b299      	uxth	r1, r3
 8001204:	23c8      	movs	r3, #200	@ 0xc8
 8001206:	9302      	str	r3, [sp, #8]
 8001208:	2301      	movs	r3, #1
 800120a:	9301      	str	r3, [sp, #4]
 800120c:	f107 030d 	add.w	r3, r7, #13
 8001210:	9300      	str	r3, [sp, #0]
 8001212:	2301      	movs	r3, #1
 8001214:	2275      	movs	r2, #117	@ 0x75
 8001216:	f001 fd95 	bl	8002d44 <HAL_I2C_Mem_Read>
 800121a:	4603      	mov	r3, r0
 800121c:	73fb      	strb	r3, [r7, #15]
			I2C_MEMADD_SIZE_8BIT, &who, 1, 200);
	if (st != HAL_OK || who != ICM_WHO_AM_I_DEFAULT) {
 800121e:	7bfb      	ldrb	r3, [r7, #15]
 8001220:	2b00      	cmp	r3, #0
 8001222:	d102      	bne.n	800122a <icm_soft_reset+0xa2>
 8001224:	7b7b      	ldrb	r3, [r7, #13]
 8001226:	2b47      	cmp	r3, #71	@ 0x47
 8001228:	d014      	beq.n	8001254 <icm_soft_reset+0xcc>
		s->last_hal_err = HAL_I2C_GetError(s->i2c);
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	4618      	mov	r0, r3
 8001230:	f001 fea2 	bl	8002f78 <HAL_I2C_GetError>
 8001234:	4602      	mov	r2, r0
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	609a      	str	r2, [r3, #8]
		s->last_err = ICM_ERR_WHOAMI_MISMATCH;
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	2204      	movs	r2, #4
 800123e:	715a      	strb	r2, [r3, #5]
		s->last_whoami = who;
 8001240:	7b7a      	ldrb	r2, [r7, #13]
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	731a      	strb	r2, [r3, #12]
		return (st != HAL_OK) ? st : HAL_ERROR;
 8001246:	7bfb      	ldrb	r3, [r7, #15]
 8001248:	2b00      	cmp	r3, #0
 800124a:	d001      	beq.n	8001250 <icm_soft_reset+0xc8>
 800124c:	7bfb      	ldrb	r3, [r7, #15]
 800124e:	e005      	b.n	800125c <icm_soft_reset+0xd4>
 8001250:	2301      	movs	r3, #1
 8001252:	e003      	b.n	800125c <icm_soft_reset+0xd4>
	}

	s->last_err = ICM_OK;
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	2200      	movs	r2, #0
 8001258:	715a      	strb	r2, [r3, #5]
	return HAL_OK;
 800125a:	2300      	movs	r3, #0
}
 800125c:	4618      	mov	r0, r3
 800125e:	3710      	adds	r7, #16
 8001260:	46bd      	mov	sp, r7
 8001262:	bd80      	pop	{r7, pc}

08001264 <icm_read_all_raw>:
	self->gyro_dps[2] = self->gyro_raw[2] / scale;
	return HAL_OK;
}

// Read TEMP(2) + ACCEL(6) + GYRO(6) in one shot: 0x1D..0x2A (14 bytes)
static HAL_StatusTypeDef icm_read_all_raw(icm42688_t *self) {
 8001264:	b580      	push	{r7, lr}
 8001266:	b088      	sub	sp, #32
 8001268:	af02      	add	r7, sp, #8
 800126a:	6078      	str	r0, [r7, #4]
	if (!self) return HAL_ERROR;
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	2b00      	cmp	r3, #0
 8001270:	d101      	bne.n	8001276 <icm_read_all_raw+0x12>
 8001272:	2301      	movs	r3, #1
 8001274:	e06b      	b.n	800134e <icm_read_all_raw+0xea>

	uint8_t raw[14];

	HAL_StatusTypeDef st = rd(self->i2c, self->addr7, ICM_TEMP_MSB, raw, 14);
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	6818      	ldr	r0, [r3, #0]
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	7919      	ldrb	r1, [r3, #4]
 800127e:	f107 0308 	add.w	r3, r7, #8
 8001282:	220e      	movs	r2, #14
 8001284:	9200      	str	r2, [sp, #0]
 8001286:	221d      	movs	r2, #29
 8001288:	f000 f8f0 	bl	800146c <rd>
 800128c:	4603      	mov	r3, r0
 800128e:	75fb      	strb	r3, [r7, #23]
	if (st != HAL_OK) {
 8001290:	7dfb      	ldrb	r3, [r7, #23]
 8001292:	2b00      	cmp	r3, #0
 8001294:	d011      	beq.n	80012ba <icm_read_all_raw+0x56>
		self->last_hal_err = HAL_I2C_GetError(self->i2c);
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	4618      	mov	r0, r3
 800129c:	f001 fe6c 	bl	8002f78 <HAL_I2C_GetError>
 80012a0:	4602      	mov	r2, r0
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	609a      	str	r2, [r3, #8]
		self->last_err = (st == HAL_TIMEOUT) ? ICM_ERR_TIMEOUT : ICM_ERR_I2C;
 80012a6:	7dfb      	ldrb	r3, [r7, #23]
 80012a8:	2b03      	cmp	r3, #3
 80012aa:	d101      	bne.n	80012b0 <icm_read_all_raw+0x4c>
 80012ac:	2203      	movs	r2, #3
 80012ae:	e000      	b.n	80012b2 <icm_read_all_raw+0x4e>
 80012b0:	2202      	movs	r2, #2
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	715a      	strb	r2, [r3, #5]
		return st;
 80012b6:	7dfb      	ldrb	r3, [r7, #23]
 80012b8:	e049      	b.n	800134e <icm_read_all_raw+0xea>
	}

	// index map: 0..1 Temp, 2..3 Ax, 4..5 Ay, 6..7 Az, 8..9 Gx, 10..11 Gy, 12..13 Gz
	self->temp_raw     = (int16_t)((raw[0]  << 8) | raw[1]);
 80012ba:	7a3b      	ldrb	r3, [r7, #8]
 80012bc:	b21b      	sxth	r3, r3
 80012be:	021b      	lsls	r3, r3, #8
 80012c0:	b21a      	sxth	r2, r3
 80012c2:	7a7b      	ldrb	r3, [r7, #9]
 80012c4:	b21b      	sxth	r3, r3
 80012c6:	4313      	orrs	r3, r2
 80012c8:	b21a      	sxth	r2, r3
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	81da      	strh	r2, [r3, #14]
	self->accel_raw[0] = (int16_t)((raw[2]  << 8) | raw[3]);
 80012ce:	7abb      	ldrb	r3, [r7, #10]
 80012d0:	b21b      	sxth	r3, r3
 80012d2:	021b      	lsls	r3, r3, #8
 80012d4:	b21a      	sxth	r2, r3
 80012d6:	7afb      	ldrb	r3, [r7, #11]
 80012d8:	b21b      	sxth	r3, r3
 80012da:	4313      	orrs	r3, r2
 80012dc:	b21a      	sxth	r2, r3
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	821a      	strh	r2, [r3, #16]
	self->accel_raw[1] = (int16_t)((raw[4]  << 8) | raw[5]);
 80012e2:	7b3b      	ldrb	r3, [r7, #12]
 80012e4:	b21b      	sxth	r3, r3
 80012e6:	021b      	lsls	r3, r3, #8
 80012e8:	b21a      	sxth	r2, r3
 80012ea:	7b7b      	ldrb	r3, [r7, #13]
 80012ec:	b21b      	sxth	r3, r3
 80012ee:	4313      	orrs	r3, r2
 80012f0:	b21a      	sxth	r2, r3
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	825a      	strh	r2, [r3, #18]
	self->accel_raw[2] = (int16_t)((raw[6]  << 8) | raw[7]);
 80012f6:	7bbb      	ldrb	r3, [r7, #14]
 80012f8:	b21b      	sxth	r3, r3
 80012fa:	021b      	lsls	r3, r3, #8
 80012fc:	b21a      	sxth	r2, r3
 80012fe:	7bfb      	ldrb	r3, [r7, #15]
 8001300:	b21b      	sxth	r3, r3
 8001302:	4313      	orrs	r3, r2
 8001304:	b21a      	sxth	r2, r3
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	829a      	strh	r2, [r3, #20]
	self->gyro_raw[0]  = (int16_t)((raw[8]  << 8) | raw[9]);
 800130a:	7c3b      	ldrb	r3, [r7, #16]
 800130c:	b21b      	sxth	r3, r3
 800130e:	021b      	lsls	r3, r3, #8
 8001310:	b21a      	sxth	r2, r3
 8001312:	7c7b      	ldrb	r3, [r7, #17]
 8001314:	b21b      	sxth	r3, r3
 8001316:	4313      	orrs	r3, r2
 8001318:	b21a      	sxth	r2, r3
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	82da      	strh	r2, [r3, #22]
	self->gyro_raw[1]  = (int16_t)((raw[10] << 8) | raw[11]);
 800131e:	7cbb      	ldrb	r3, [r7, #18]
 8001320:	b21b      	sxth	r3, r3
 8001322:	021b      	lsls	r3, r3, #8
 8001324:	b21a      	sxth	r2, r3
 8001326:	7cfb      	ldrb	r3, [r7, #19]
 8001328:	b21b      	sxth	r3, r3
 800132a:	4313      	orrs	r3, r2
 800132c:	b21a      	sxth	r2, r3
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	831a      	strh	r2, [r3, #24]
	self->gyro_raw[2]  = (int16_t)((raw[12] << 8) | raw[13]);
 8001332:	7d3b      	ldrb	r3, [r7, #20]
 8001334:	b21b      	sxth	r3, r3
 8001336:	021b      	lsls	r3, r3, #8
 8001338:	b21a      	sxth	r2, r3
 800133a:	7d7b      	ldrb	r3, [r7, #21]
 800133c:	b21b      	sxth	r3, r3
 800133e:	4313      	orrs	r3, r2
 8001340:	b21a      	sxth	r2, r3
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	835a      	strh	r2, [r3, #26]

	self->last_err = ICM_OK;
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	2200      	movs	r2, #0
 800134a:	715a      	strb	r2, [r3, #5]
	return HAL_OK;
 800134c:	2300      	movs	r3, #0
}
 800134e:	4618      	mov	r0, r3
 8001350:	3718      	adds	r7, #24
 8001352:	46bd      	mov	sp, r7
 8001354:	bd80      	pop	{r7, pc}
	...

08001358 <icm_read_all>:

// Convert everything: raw → °C, g, dps (uses configured scale factors)
static HAL_StatusTypeDef icm_read_all(icm42688_t *self) {
 8001358:	b580      	push	{r7, lr}
 800135a:	b086      	sub	sp, #24
 800135c:	af00      	add	r7, sp, #0
 800135e:	6078      	str	r0, [r7, #4]
	if (!self) return HAL_ERROR;
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	2b00      	cmp	r3, #0
 8001364:	d101      	bne.n	800136a <icm_read_all+0x12>
 8001366:	2301      	movs	r3, #1
 8001368:	e079      	b.n	800145e <icm_read_all+0x106>

	HAL_StatusTypeDef st = icm_read_all_raw(self);
 800136a:	6878      	ldr	r0, [r7, #4]
 800136c:	f7ff ff7a 	bl	8001264 <icm_read_all_raw>
 8001370:	4603      	mov	r3, r0
 8001372:	75fb      	strb	r3, [r7, #23]
	if (st != HAL_OK) return st;
 8001374:	7dfb      	ldrb	r3, [r7, #23]
 8001376:	2b00      	cmp	r3, #0
 8001378:	d001      	beq.n	800137e <icm_read_all+0x26>
 800137a:	7dfb      	ldrb	r3, [r7, #23]
 800137c:	e06f      	b.n	800145e <icm_read_all+0x106>

	// Temperature
	self->last_temp_c = (self->temp_raw / ICM_TEMP_SENS_LSB_PER_C) + ICM_TEMP_OFFSET_C;
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8001384:	ee07 3a90 	vmov	s15, r3
 8001388:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800138c:	eddf 6a36 	vldr	s13, [pc, #216]	@ 8001468 <icm_read_all+0x110>
 8001390:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001394:	eeb3 7a09 	vmov.f32	s14, #57	@ 0x41c80000  25.0
 8001398:	ee77 7a87 	vadd.f32	s15, s15, s14
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	edc3 7a07 	vstr	s15, [r3, #28]

	// Scales: guard against zero if config wasn’t called for some reason
	const float a_scale = self->accel_lsb_per_g;
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80013a6:	613b      	str	r3, [r7, #16]
	const float g_scale = self->gyro_lsb_per_dps;
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80013ac:	60fb      	str	r3, [r7, #12]

	// Accel
	self->accel_g[0] = self->accel_raw[0] / a_scale;
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 80013b4:	ee07 3a90 	vmov	s15, r3
 80013b8:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80013bc:	ed97 7a04 	vldr	s14, [r7, #16]
 80013c0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	edc3 7a08 	vstr	s15, [r3, #32]
	self->accel_g[1] = self->accel_raw[1] / a_scale;
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 80013d0:	ee07 3a90 	vmov	s15, r3
 80013d4:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80013d8:	ed97 7a04 	vldr	s14, [r7, #16]
 80013dc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24
	self->accel_g[2] = self->accel_raw[2] / a_scale;
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 80013ec:	ee07 3a90 	vmov	s15, r3
 80013f0:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80013f4:	ed97 7a04 	vldr	s14, [r7, #16]
 80013f8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	edc3 7a0a 	vstr	s15, [r3, #40]	@ 0x28

	// Gyro
	self->gyro_dps[0] = self->gyro_raw[0] / g_scale;
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 8001408:	ee07 3a90 	vmov	s15, r3
 800140c:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001410:	ed97 7a03 	vldr	s14, [r7, #12]
 8001414:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	edc3 7a0b 	vstr	s15, [r3, #44]	@ 0x2c
	self->gyro_dps[1] = self->gyro_raw[1] / g_scale;
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	f9b3 3018 	ldrsh.w	r3, [r3, #24]
 8001424:	ee07 3a90 	vmov	s15, r3
 8001428:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800142c:	ed97 7a03 	vldr	s14, [r7, #12]
 8001430:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	edc3 7a0c 	vstr	s15, [r3, #48]	@ 0x30
	self->gyro_dps[2] = self->gyro_raw[2] / g_scale;
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	f9b3 301a 	ldrsh.w	r3, [r3, #26]
 8001440:	ee07 3a90 	vmov	s15, r3
 8001444:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001448:	ed97 7a03 	vldr	s14, [r7, #12]
 800144c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	edc3 7a0d 	vstr	s15, [r3, #52]	@ 0x34

	self->last_err = ICM_OK;
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	2200      	movs	r2, #0
 800145a:	715a      	strb	r2, [r3, #5]
	return HAL_OK;
 800145c:	2300      	movs	r3, #0
}
 800145e:	4618      	mov	r0, r3
 8001460:	3718      	adds	r7, #24
 8001462:	46bd      	mov	sp, r7
 8001464:	bd80      	pop	{r7, pc}
 8001466:	bf00      	nop
 8001468:	43047ae1 	.word	0x43047ae1

0800146c <rd>:
 * buf/n: output buffer & length.
 * 200: timeout in ms.
 * Returns HAL_OK/HAL_ERROR/HAL_BUSY/HAL_TIMEOUT.
 * Why shift? STM32 HAL HAL_I2C_* expects the address in “left-shifted 8-bit” form (R/W bit in bit0). Passing raw 7-bit without shifting will fail.
 */
static HAL_StatusTypeDef rd(I2C_HandleTypeDef *i2c, uint8_t a7, uint8_t reg, uint8_t *buf, uint16_t bufferSize) {
 800146c:	b580      	push	{r7, lr}
 800146e:	b088      	sub	sp, #32
 8001470:	af04      	add	r7, sp, #16
 8001472:	60f8      	str	r0, [r7, #12]
 8001474:	607b      	str	r3, [r7, #4]
 8001476:	460b      	mov	r3, r1
 8001478:	72fb      	strb	r3, [r7, #11]
 800147a:	4613      	mov	r3, r2
 800147c:	72bb      	strb	r3, [r7, #10]
	return HAL_I2C_Mem_Read(i2c, (a7 << 1), reg, I2C_MEMADD_SIZE_8BIT, buf, bufferSize, 200);
 800147e:	7afb      	ldrb	r3, [r7, #11]
 8001480:	b29b      	uxth	r3, r3
 8001482:	005b      	lsls	r3, r3, #1
 8001484:	b299      	uxth	r1, r3
 8001486:	7abb      	ldrb	r3, [r7, #10]
 8001488:	b29a      	uxth	r2, r3
 800148a:	23c8      	movs	r3, #200	@ 0xc8
 800148c:	9302      	str	r3, [sp, #8]
 800148e:	8b3b      	ldrh	r3, [r7, #24]
 8001490:	9301      	str	r3, [sp, #4]
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	9300      	str	r3, [sp, #0]
 8001496:	2301      	movs	r3, #1
 8001498:	68f8      	ldr	r0, [r7, #12]
 800149a:	f001 fc53 	bl	8002d44 <HAL_I2C_Mem_Read>
 800149e:	4603      	mov	r3, r0
}
 80014a0:	4618      	mov	r0, r3
 80014a2:	3710      	adds	r7, #16
 80014a4:	46bd      	mov	sp, r7
 80014a6:	bd80      	pop	{r7, pc}

080014a8 <clip2>:

static HAL_StatusTypeDef wr1(I2C_HandleTypeDef *i2c, uint8_t a7, uint8_t reg, uint8_t val) {
	return HAL_I2C_Mem_Write(i2c, (a7 << 1), reg, I2C_MEMADD_SIZE_8BIT, &val, 1, 200);
}

static inline uint8_t clip2(uint8_t x)	{ return (uint8_t)(x & 0x03u);	} // 2-bit
 80014a8:	b480      	push	{r7}
 80014aa:	b083      	sub	sp, #12
 80014ac:	af00      	add	r7, sp, #0
 80014ae:	4603      	mov	r3, r0
 80014b0:	71fb      	strb	r3, [r7, #7]
 80014b2:	79fb      	ldrb	r3, [r7, #7]
 80014b4:	f003 0303 	and.w	r3, r3, #3
 80014b8:	b2db      	uxtb	r3, r3
 80014ba:	4618      	mov	r0, r3
 80014bc:	370c      	adds	r7, #12
 80014be:	46bd      	mov	sp, r7
 80014c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c4:	4770      	bx	lr

080014c6 <clip3>:
static inline uint8_t clip3(uint8_t x) 	{ return (uint8_t)(x & 0x07u); 	} // 3-bit
 80014c6:	b480      	push	{r7}
 80014c8:	b083      	sub	sp, #12
 80014ca:	af00      	add	r7, sp, #0
 80014cc:	4603      	mov	r3, r0
 80014ce:	71fb      	strb	r3, [r7, #7]
 80014d0:	79fb      	ldrb	r3, [r7, #7]
 80014d2:	f003 0307 	and.w	r3, r3, #7
 80014d6:	b2db      	uxtb	r3, r3
 80014d8:	4618      	mov	r0, r3
 80014da:	370c      	adds	r7, #12
 80014dc:	46bd      	mov	sp, r7
 80014de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e2:	4770      	bx	lr

080014e4 <clip4>:
static inline uint8_t clip4(uint8_t x) 	{ return (uint8_t)(x & 0x0Fu); 	} // 4-bit
 80014e4:	b480      	push	{r7}
 80014e6:	b083      	sub	sp, #12
 80014e8:	af00      	add	r7, sp, #0
 80014ea:	4603      	mov	r3, r0
 80014ec:	71fb      	strb	r3, [r7, #7]
 80014ee:	79fb      	ldrb	r3, [r7, #7]
 80014f0:	f003 030f 	and.w	r3, r3, #15
 80014f4:	b2db      	uxtb	r3, r3
 80014f6:	4618      	mov	r0, r3
 80014f8:	370c      	adds	r7, #12
 80014fa:	46bd      	mov	sp, r7
 80014fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001500:	4770      	bx	lr

08001502 <getSelfStatePointer>:

static icm42688_t* getSelfStatePointer(sensor_if_t *self) {
 8001502:	b480      	push	{r7}
 8001504:	b083      	sub	sp, #12
 8001506:	af00      	add	r7, sp, #0
 8001508:	6078      	str	r0, [r7, #4]
	if (!self || !self->state) return NULL;
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	2b00      	cmp	r3, #0
 800150e:	d003      	beq.n	8001518 <getSelfStatePointer+0x16>
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	685b      	ldr	r3, [r3, #4]
 8001514:	2b00      	cmp	r3, #0
 8001516:	d101      	bne.n	800151c <getSelfStatePointer+0x1a>
 8001518:	2300      	movs	r3, #0
 800151a:	e001      	b.n	8001520 <getSelfStatePointer+0x1e>
	return (icm42688_t*)self->state;
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	685b      	ldr	r3, [r3, #4]
}
 8001520:	4618      	mov	r0, r3
 8001522:	370c      	adds	r7, #12
 8001524:	46bd      	mov	sp, r7
 8001526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800152a:	4770      	bx	lr

0800152c <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 800152c:	b580      	push	{r7, lr}
 800152e:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN 1 */

	/* USER CODE END 1 */

	/* MPU Configuration--------------------------------------------------------*/
	MPU_Config();
 8001530:	f000 fadc 	bl	8001aec <MPU_Config>

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8001534:	f000 fe6e 	bl	8002214 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8001538:	f000 f8ce 	bl	80016d8 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 800153c:	f000 fa4e 	bl	80019dc <MX_GPIO_Init>
	MX_I2C1_Init();
 8001540:	f000 f934 	bl	80017ac <MX_I2C1_Init>
	MX_USART3_UART_Init();
 8001544:	f000 f9b2 	bl	80018ac <MX_USART3_UART_Init>
	MX_I2C2_Init();
 8001548:	f000 f970 	bl	800182c <MX_I2C2_Init>
	MX_USART6_UART_Init();
 800154c:	f000 f9fa 	bl	8001944 <MX_USART6_UART_Init>
	/* USER CODE BEGIN 2 */
	setvbuf(stdout, NULL, _IONBF, 0);
 8001550:	4b4d      	ldr	r3, [pc, #308]	@ (8001688 <main+0x15c>)
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	6898      	ldr	r0, [r3, #8]
 8001556:	2300      	movs	r3, #0
 8001558:	2202      	movs	r2, #2
 800155a:	2100      	movs	r1, #0
 800155c:	f006 fe58 	bl	8008210 <setvbuf>
	printf("BOOT\r\n");
 8001560:	484a      	ldr	r0, [pc, #296]	@ (800168c <main+0x160>)
 8001562:	f006 fe4d 	bl	8008200 <puts>

	HAL_Delay(50);   // let sensors power up
 8001566:	2032      	movs	r0, #50	@ 0x32
 8001568:	f000 fee6 	bl	8002338 <HAL_Delay>
	// Optional quick sanity scan
	// I2C_Scan(&hi2c1);
	// I2C_Scan(&hi2c2);

	// Bind drivers to their buses/addresses (adjust to your wiring)
	dps310_bind(&if_dps, &dps, &hi2c2, DPS310_ADDR_A);  // 0x77 by default, 0x76 if SDO low
 800156c:	2377      	movs	r3, #119	@ 0x77
 800156e:	4a48      	ldr	r2, [pc, #288]	@ (8001690 <main+0x164>)
 8001570:	4948      	ldr	r1, [pc, #288]	@ (8001694 <main+0x168>)
 8001572:	4849      	ldr	r0, [pc, #292]	@ (8001698 <main+0x16c>)
 8001574:	f7ff f910 	bl	8000798 <dps310_bind>
	icm42688_bind(&if_icm, &icm, &hi2c1, ICM_ADDR_7B);  // 0x68 or 0x69 depending on AD0
 8001578:	2368      	movs	r3, #104	@ 0x68
 800157a:	4a48      	ldr	r2, [pc, #288]	@ (800169c <main+0x170>)
 800157c:	4948      	ldr	r1, [pc, #288]	@ (80016a0 <main+0x174>)
 800157e:	4849      	ldr	r0, [pc, #292]	@ (80016a4 <main+0x178>)
 8001580:	f7ff fac6 	bl	8000b10 <icm42688_bind>
	gps6m_bind(&if_gps, &gps, &huart6);
 8001584:	4a48      	ldr	r2, [pc, #288]	@ (80016a8 <main+0x17c>)
 8001586:	4949      	ldr	r1, [pc, #292]	@ (80016ac <main+0x180>)
 8001588:	4849      	ldr	r0, [pc, #292]	@ (80016b0 <main+0x184>)
 800158a:	f7ff f9bf 	bl	800090c <gps6m_bind>

	HAL_GPIO_WritePin(Red_LED_GPIO_Port, Red_LED_Pin, GPIO_PIN_SET);
 800158e:	2201      	movs	r2, #1
 8001590:	2102      	movs	r1, #2
 8001592:	4848      	ldr	r0, [pc, #288]	@ (80016b4 <main+0x188>)
 8001594:	f001 fa0c 	bl	80029b0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Yellow_LED_GPIO_Port, Yellow_LED_Pin, GPIO_PIN_SET);
 8001598:	2201      	movs	r2, #1
 800159a:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800159e:	4846      	ldr	r0, [pc, #280]	@ (80016b8 <main+0x18c>)
 80015a0:	f001 fa06 	bl	80029b0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Green_LED_GPIO_Port, Green_LED_Pin, GPIO_PIN_SET);
 80015a4:	2201      	movs	r2, #1
 80015a6:	2101      	movs	r1, #1
 80015a8:	4843      	ldr	r0, [pc, #268]	@ (80016b8 <main+0x18c>)
 80015aa:	f001 fa01 	bl	80029b0 <HAL_GPIO_WritePin>

	HAL_Delay(100);
 80015ae:	2064      	movs	r0, #100	@ 0x64
 80015b0:	f000 fec2 	bl	8002338 <HAL_Delay>
	//
	//	HAL_GPIO_WritePin(Green_LED_GPIO_Port, Green_LED_Pin, GPIO_PIN_RESET);

	// Init devices (config, coeffs, etc. — your driver stubs can be expanded later)

	if_icm.vTable->init(&if_icm);
 80015b4:	4b3b      	ldr	r3, [pc, #236]	@ (80016a4 <main+0x178>)
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	685b      	ldr	r3, [r3, #4]
 80015ba:	483a      	ldr	r0, [pc, #232]	@ (80016a4 <main+0x178>)
 80015bc:	4798      	blx	r3
	if_dps.vTable->init(&if_dps);
 80015be:	4b36      	ldr	r3, [pc, #216]	@ (8001698 <main+0x16c>)
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	685b      	ldr	r3, [r3, #4]
 80015c4:	4834      	ldr	r0, [pc, #208]	@ (8001698 <main+0x16c>)
 80015c6:	4798      	blx	r3
	if_gps.vTable->init(&if_gps);
 80015c8:	4b39      	ldr	r3, [pc, #228]	@ (80016b0 <main+0x184>)
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	685b      	ldr	r3, [r3, #4]
 80015ce:	4838      	ldr	r0, [pc, #224]	@ (80016b0 <main+0x184>)
 80015d0:	4798      	blx	r3

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1)
	{
		HAL_Delay(1000);
 80015d2:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80015d6:	f000 feaf 	bl	8002338 <HAL_Delay>
		if_dps.vTable->read(&if_dps);
 80015da:	4b2f      	ldr	r3, [pc, #188]	@ (8001698 <main+0x16c>)
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	689b      	ldr	r3, [r3, #8]
 80015e0:	482d      	ldr	r0, [pc, #180]	@ (8001698 <main+0x16c>)
 80015e2:	4798      	blx	r3
		if_icm.vTable->read(&if_icm);
 80015e4:	4b2f      	ldr	r3, [pc, #188]	@ (80016a4 <main+0x178>)
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	689b      	ldr	r3, [r3, #8]
 80015ea:	482e      	ldr	r0, [pc, #184]	@ (80016a4 <main+0x178>)
 80015ec:	4798      	blx	r3
		if_gps.vTable->read(&if_gps);
 80015ee:	4b30      	ldr	r3, [pc, #192]	@ (80016b0 <main+0x184>)
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	689b      	ldr	r3, [r3, #8]
 80015f4:	482e      	ldr	r0, [pc, #184]	@ (80016b0 <main+0x184>)
 80015f6:	4798      	blx	r3

		printf("ICM temp: %.2f C\r\n", icm.last_temp_c);
 80015f8:	4b29      	ldr	r3, [pc, #164]	@ (80016a0 <main+0x174>)
 80015fa:	edd3 7a07 	vldr	s15, [r3, #28]
 80015fe:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001602:	ec53 2b17 	vmov	r2, r3, d7
 8001606:	482d      	ldr	r0, [pc, #180]	@ (80016bc <main+0x190>)
 8001608:	f006 fd92 	bl	8008130 <iprintf>
		printf("ICM X Accel (g): %.2f\r\n", (double)icm.accel_g[0]);
 800160c:	4b24      	ldr	r3, [pc, #144]	@ (80016a0 <main+0x174>)
 800160e:	edd3 7a08 	vldr	s15, [r3, #32]
 8001612:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001616:	ec53 2b17 	vmov	r2, r3, d7
 800161a:	4829      	ldr	r0, [pc, #164]	@ (80016c0 <main+0x194>)
 800161c:	f006 fd88 	bl	8008130 <iprintf>
		printf("ICM Y Accel (g): %.2f\r\n", (double)icm.accel_g[1]);
 8001620:	4b1f      	ldr	r3, [pc, #124]	@ (80016a0 <main+0x174>)
 8001622:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 8001626:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800162a:	ec53 2b17 	vmov	r2, r3, d7
 800162e:	4825      	ldr	r0, [pc, #148]	@ (80016c4 <main+0x198>)
 8001630:	f006 fd7e 	bl	8008130 <iprintf>
		printf("ICM Z Accel (g): %.2f\r\n", (double)icm.accel_g[2]);
 8001634:	4b1a      	ldr	r3, [pc, #104]	@ (80016a0 <main+0x174>)
 8001636:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 800163a:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800163e:	ec53 2b17 	vmov	r2, r3, d7
 8001642:	4821      	ldr	r0, [pc, #132]	@ (80016c8 <main+0x19c>)
 8001644:	f006 fd74 	bl	8008130 <iprintf>
		printf("ICM X Rotation (dps): %.2f\r\n", (double)icm.gyro_dps[0]);
 8001648:	4b15      	ldr	r3, [pc, #84]	@ (80016a0 <main+0x174>)
 800164a:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 800164e:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001652:	ec53 2b17 	vmov	r2, r3, d7
 8001656:	481d      	ldr	r0, [pc, #116]	@ (80016cc <main+0x1a0>)
 8001658:	f006 fd6a 	bl	8008130 <iprintf>
		printf("ICM Y Rotation (dps): %.2f\r\n", (double)icm.gyro_dps[1]);
 800165c:	4b10      	ldr	r3, [pc, #64]	@ (80016a0 <main+0x174>)
 800165e:	edd3 7a0c 	vldr	s15, [r3, #48]	@ 0x30
 8001662:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001666:	ec53 2b17 	vmov	r2, r3, d7
 800166a:	4819      	ldr	r0, [pc, #100]	@ (80016d0 <main+0x1a4>)
 800166c:	f006 fd60 	bl	8008130 <iprintf>
		printf("ICM Z Rotation (dps): %.2f\r\n", (double)icm.gyro_dps[2]);
 8001670:	4b0b      	ldr	r3, [pc, #44]	@ (80016a0 <main+0x174>)
 8001672:	edd3 7a0d 	vldr	s15, [r3, #52]	@ 0x34
 8001676:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800167a:	ec53 2b17 	vmov	r2, r3, d7
 800167e:	4815      	ldr	r0, [pc, #84]	@ (80016d4 <main+0x1a8>)
 8001680:	f006 fd56 	bl	8008130 <iprintf>
		HAL_Delay(1000);
 8001684:	bf00      	nop
 8001686:	e7a4      	b.n	80015d2 <main+0xa6>
 8001688:	2400001c 	.word	0x2400001c
 800168c:	0800a1b0 	.word	0x0800a1b0
 8001690:	24000248 	.word	0x24000248
 8001694:	240003dc 	.word	0x240003dc
 8001698:	240003c4 	.word	0x240003c4
 800169c:	240001f4 	.word	0x240001f4
 80016a0:	240003e4 	.word	0x240003e4
 80016a4:	240003cc 	.word	0x240003cc
 80016a8:	24000330 	.word	0x24000330
 80016ac:	2400042c 	.word	0x2400042c
 80016b0:	240003d4 	.word	0x240003d4
 80016b4:	58021000 	.word	0x58021000
 80016b8:	58020400 	.word	0x58020400
 80016bc:	0800a1b8 	.word	0x0800a1b8
 80016c0:	0800a1cc 	.word	0x0800a1cc
 80016c4:	0800a1e4 	.word	0x0800a1e4
 80016c8:	0800a1fc 	.word	0x0800a1fc
 80016cc:	0800a214 	.word	0x0800a214
 80016d0:	0800a234 	.word	0x0800a234
 80016d4:	0800a254 	.word	0x0800a254

080016d8 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 80016d8:	b580      	push	{r7, lr}
 80016da:	b09c      	sub	sp, #112	@ 0x70
 80016dc:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80016de:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80016e2:	224c      	movs	r2, #76	@ 0x4c
 80016e4:	2100      	movs	r1, #0
 80016e6:	4618      	mov	r0, r3
 80016e8:	f006 ff1e 	bl	8008528 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80016ec:	1d3b      	adds	r3, r7, #4
 80016ee:	2220      	movs	r2, #32
 80016f0:	2100      	movs	r1, #0
 80016f2:	4618      	mov	r0, r3
 80016f4:	f006 ff18 	bl	8008528 <memset>

	/** Supply configuration update enable
	 */
	HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 80016f8:	2002      	movs	r0, #2
 80016fa:	f001 ffa3 	bl	8003644 <HAL_PWREx_ConfigSupply>

	/** Configure the main internal regulator output voltage
	 */
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80016fe:	2300      	movs	r3, #0
 8001700:	603b      	str	r3, [r7, #0]
 8001702:	4b28      	ldr	r3, [pc, #160]	@ (80017a4 <SystemClock_Config+0xcc>)
 8001704:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001706:	4a27      	ldr	r2, [pc, #156]	@ (80017a4 <SystemClock_Config+0xcc>)
 8001708:	f023 0301 	bic.w	r3, r3, #1
 800170c:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800170e:	4b25      	ldr	r3, [pc, #148]	@ (80017a4 <SystemClock_Config+0xcc>)
 8001710:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001712:	f003 0301 	and.w	r3, r3, #1
 8001716:	603b      	str	r3, [r7, #0]
 8001718:	4b23      	ldr	r3, [pc, #140]	@ (80017a8 <SystemClock_Config+0xd0>)
 800171a:	699b      	ldr	r3, [r3, #24]
 800171c:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8001720:	4a21      	ldr	r2, [pc, #132]	@ (80017a8 <SystemClock_Config+0xd0>)
 8001722:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001726:	6193      	str	r3, [r2, #24]
 8001728:	4b1f      	ldr	r3, [pc, #124]	@ (80017a8 <SystemClock_Config+0xd0>)
 800172a:	699b      	ldr	r3, [r3, #24]
 800172c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001730:	603b      	str	r3, [r7, #0]
 8001732:	683b      	ldr	r3, [r7, #0]

	while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8001734:	bf00      	nop
 8001736:	4b1c      	ldr	r3, [pc, #112]	@ (80017a8 <SystemClock_Config+0xd0>)
 8001738:	699b      	ldr	r3, [r3, #24]
 800173a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800173e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001742:	d1f8      	bne.n	8001736 <SystemClock_Config+0x5e>

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001744:	2302      	movs	r3, #2
 8001746:	627b      	str	r3, [r7, #36]	@ 0x24
	RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8001748:	2301      	movs	r3, #1
 800174a:	633b      	str	r3, [r7, #48]	@ 0x30
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800174c:	2340      	movs	r3, #64	@ 0x40
 800174e:	637b      	str	r3, [r7, #52]	@ 0x34
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001750:	2300      	movs	r3, #0
 8001752:	64bb      	str	r3, [r7, #72]	@ 0x48
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001754:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001758:	4618      	mov	r0, r3
 800175a:	f001 ffad 	bl	80036b8 <HAL_RCC_OscConfig>
 800175e:	4603      	mov	r3, r0
 8001760:	2b00      	cmp	r3, #0
 8001762:	d001      	beq.n	8001768 <SystemClock_Config+0x90>
	{
		Error_Handler();
 8001764:	f000 f9ee 	bl	8001b44 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001768:	233f      	movs	r3, #63	@ 0x3f
 800176a:	607b      	str	r3, [r7, #4]
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
			|RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800176c:	2300      	movs	r3, #0
 800176e:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8001770:	2300      	movs	r3, #0
 8001772:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8001774:	2300      	movs	r3, #0
 8001776:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 8001778:	2300      	movs	r3, #0
 800177a:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 800177c:	2300      	movs	r3, #0
 800177e:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 8001780:	2300      	movs	r3, #0
 8001782:	61fb      	str	r3, [r7, #28]
	RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 8001784:	2300      	movs	r3, #0
 8001786:	623b      	str	r3, [r7, #32]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001788:	1d3b      	adds	r3, r7, #4
 800178a:	2101      	movs	r1, #1
 800178c:	4618      	mov	r0, r3
 800178e:	f002 fbed 	bl	8003f6c <HAL_RCC_ClockConfig>
 8001792:	4603      	mov	r3, r0
 8001794:	2b00      	cmp	r3, #0
 8001796:	d001      	beq.n	800179c <SystemClock_Config+0xc4>
	{
		Error_Handler();
 8001798:	f000 f9d4 	bl	8001b44 <Error_Handler>
	}
}
 800179c:	bf00      	nop
 800179e:	3770      	adds	r7, #112	@ 0x70
 80017a0:	46bd      	mov	sp, r7
 80017a2:	bd80      	pop	{r7, pc}
 80017a4:	58000400 	.word	0x58000400
 80017a8:	58024800 	.word	0x58024800

080017ac <MX_I2C1_Init>:
 * @brief I2C1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C1_Init(void)
{
 80017ac:	b580      	push	{r7, lr}
 80017ae:	af00      	add	r7, sp, #0
	/* USER CODE END I2C1_Init 0 */

	/* USER CODE BEGIN I2C1_Init 1 */

	/* USER CODE END I2C1_Init 1 */
	hi2c1.Instance = I2C1;
 80017b0:	4b1b      	ldr	r3, [pc, #108]	@ (8001820 <MX_I2C1_Init+0x74>)
 80017b2:	4a1c      	ldr	r2, [pc, #112]	@ (8001824 <MX_I2C1_Init+0x78>)
 80017b4:	601a      	str	r2, [r3, #0]
	hi2c1.Init.Timing = 0x10707DBC;
 80017b6:	4b1a      	ldr	r3, [pc, #104]	@ (8001820 <MX_I2C1_Init+0x74>)
 80017b8:	4a1b      	ldr	r2, [pc, #108]	@ (8001828 <MX_I2C1_Init+0x7c>)
 80017ba:	605a      	str	r2, [r3, #4]
	hi2c1.Init.OwnAddress1 = 0;
 80017bc:	4b18      	ldr	r3, [pc, #96]	@ (8001820 <MX_I2C1_Init+0x74>)
 80017be:	2200      	movs	r2, #0
 80017c0:	609a      	str	r2, [r3, #8]
	hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80017c2:	4b17      	ldr	r3, [pc, #92]	@ (8001820 <MX_I2C1_Init+0x74>)
 80017c4:	2201      	movs	r2, #1
 80017c6:	60da      	str	r2, [r3, #12]
	hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80017c8:	4b15      	ldr	r3, [pc, #84]	@ (8001820 <MX_I2C1_Init+0x74>)
 80017ca:	2200      	movs	r2, #0
 80017cc:	611a      	str	r2, [r3, #16]
	hi2c1.Init.OwnAddress2 = 0;
 80017ce:	4b14      	ldr	r3, [pc, #80]	@ (8001820 <MX_I2C1_Init+0x74>)
 80017d0:	2200      	movs	r2, #0
 80017d2:	615a      	str	r2, [r3, #20]
	hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80017d4:	4b12      	ldr	r3, [pc, #72]	@ (8001820 <MX_I2C1_Init+0x74>)
 80017d6:	2200      	movs	r2, #0
 80017d8:	619a      	str	r2, [r3, #24]
	hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80017da:	4b11      	ldr	r3, [pc, #68]	@ (8001820 <MX_I2C1_Init+0x74>)
 80017dc:	2200      	movs	r2, #0
 80017de:	61da      	str	r2, [r3, #28]
	hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80017e0:	4b0f      	ldr	r3, [pc, #60]	@ (8001820 <MX_I2C1_Init+0x74>)
 80017e2:	2200      	movs	r2, #0
 80017e4:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80017e6:	480e      	ldr	r0, [pc, #56]	@ (8001820 <MX_I2C1_Init+0x74>)
 80017e8:	f001 f8fc 	bl	80029e4 <HAL_I2C_Init>
 80017ec:	4603      	mov	r3, r0
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d001      	beq.n	80017f6 <MX_I2C1_Init+0x4a>
	{
		Error_Handler();
 80017f2:	f000 f9a7 	bl	8001b44 <Error_Handler>
	}

	/** Configure Analogue filter
	 */
	if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80017f6:	2100      	movs	r1, #0
 80017f8:	4809      	ldr	r0, [pc, #36]	@ (8001820 <MX_I2C1_Init+0x74>)
 80017fa:	f001 fe8b 	bl	8003514 <HAL_I2CEx_ConfigAnalogFilter>
 80017fe:	4603      	mov	r3, r0
 8001800:	2b00      	cmp	r3, #0
 8001802:	d001      	beq.n	8001808 <MX_I2C1_Init+0x5c>
	{
		Error_Handler();
 8001804:	f000 f99e 	bl	8001b44 <Error_Handler>
	}

	/** Configure Digital filter
	 */
	if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001808:	2100      	movs	r1, #0
 800180a:	4805      	ldr	r0, [pc, #20]	@ (8001820 <MX_I2C1_Init+0x74>)
 800180c:	f001 fecd 	bl	80035aa <HAL_I2CEx_ConfigDigitalFilter>
 8001810:	4603      	mov	r3, r0
 8001812:	2b00      	cmp	r3, #0
 8001814:	d001      	beq.n	800181a <MX_I2C1_Init+0x6e>
	{
		Error_Handler();
 8001816:	f000 f995 	bl	8001b44 <Error_Handler>
	}
	/* USER CODE BEGIN I2C1_Init 2 */

	/* USER CODE END I2C1_Init 2 */

}
 800181a:	bf00      	nop
 800181c:	bd80      	pop	{r7, pc}
 800181e:	bf00      	nop
 8001820:	240001f4 	.word	0x240001f4
 8001824:	40005400 	.word	0x40005400
 8001828:	10707dbc 	.word	0x10707dbc

0800182c <MX_I2C2_Init>:
 * @brief I2C2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C2_Init(void)
{
 800182c:	b580      	push	{r7, lr}
 800182e:	af00      	add	r7, sp, #0
	/* USER CODE END I2C2_Init 0 */

	/* USER CODE BEGIN I2C2_Init 1 */

	/* USER CODE END I2C2_Init 1 */
	hi2c2.Instance = I2C2;
 8001830:	4b1b      	ldr	r3, [pc, #108]	@ (80018a0 <MX_I2C2_Init+0x74>)
 8001832:	4a1c      	ldr	r2, [pc, #112]	@ (80018a4 <MX_I2C2_Init+0x78>)
 8001834:	601a      	str	r2, [r3, #0]
	hi2c2.Init.Timing = 0x10707DBC;
 8001836:	4b1a      	ldr	r3, [pc, #104]	@ (80018a0 <MX_I2C2_Init+0x74>)
 8001838:	4a1b      	ldr	r2, [pc, #108]	@ (80018a8 <MX_I2C2_Init+0x7c>)
 800183a:	605a      	str	r2, [r3, #4]
	hi2c2.Init.OwnAddress1 = 0;
 800183c:	4b18      	ldr	r3, [pc, #96]	@ (80018a0 <MX_I2C2_Init+0x74>)
 800183e:	2200      	movs	r2, #0
 8001840:	609a      	str	r2, [r3, #8]
	hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001842:	4b17      	ldr	r3, [pc, #92]	@ (80018a0 <MX_I2C2_Init+0x74>)
 8001844:	2201      	movs	r2, #1
 8001846:	60da      	str	r2, [r3, #12]
	hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001848:	4b15      	ldr	r3, [pc, #84]	@ (80018a0 <MX_I2C2_Init+0x74>)
 800184a:	2200      	movs	r2, #0
 800184c:	611a      	str	r2, [r3, #16]
	hi2c2.Init.OwnAddress2 = 0;
 800184e:	4b14      	ldr	r3, [pc, #80]	@ (80018a0 <MX_I2C2_Init+0x74>)
 8001850:	2200      	movs	r2, #0
 8001852:	615a      	str	r2, [r3, #20]
	hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001854:	4b12      	ldr	r3, [pc, #72]	@ (80018a0 <MX_I2C2_Init+0x74>)
 8001856:	2200      	movs	r2, #0
 8001858:	619a      	str	r2, [r3, #24]
	hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800185a:	4b11      	ldr	r3, [pc, #68]	@ (80018a0 <MX_I2C2_Init+0x74>)
 800185c:	2200      	movs	r2, #0
 800185e:	61da      	str	r2, [r3, #28]
	hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001860:	4b0f      	ldr	r3, [pc, #60]	@ (80018a0 <MX_I2C2_Init+0x74>)
 8001862:	2200      	movs	r2, #0
 8001864:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001866:	480e      	ldr	r0, [pc, #56]	@ (80018a0 <MX_I2C2_Init+0x74>)
 8001868:	f001 f8bc 	bl	80029e4 <HAL_I2C_Init>
 800186c:	4603      	mov	r3, r0
 800186e:	2b00      	cmp	r3, #0
 8001870:	d001      	beq.n	8001876 <MX_I2C2_Init+0x4a>
	{
		Error_Handler();
 8001872:	f000 f967 	bl	8001b44 <Error_Handler>
	}

	/** Configure Analogue filter
	 */
	if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001876:	2100      	movs	r1, #0
 8001878:	4809      	ldr	r0, [pc, #36]	@ (80018a0 <MX_I2C2_Init+0x74>)
 800187a:	f001 fe4b 	bl	8003514 <HAL_I2CEx_ConfigAnalogFilter>
 800187e:	4603      	mov	r3, r0
 8001880:	2b00      	cmp	r3, #0
 8001882:	d001      	beq.n	8001888 <MX_I2C2_Init+0x5c>
	{
		Error_Handler();
 8001884:	f000 f95e 	bl	8001b44 <Error_Handler>
	}

	/** Configure Digital filter
	 */
	if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8001888:	2100      	movs	r1, #0
 800188a:	4805      	ldr	r0, [pc, #20]	@ (80018a0 <MX_I2C2_Init+0x74>)
 800188c:	f001 fe8d 	bl	80035aa <HAL_I2CEx_ConfigDigitalFilter>
 8001890:	4603      	mov	r3, r0
 8001892:	2b00      	cmp	r3, #0
 8001894:	d001      	beq.n	800189a <MX_I2C2_Init+0x6e>
	{
		Error_Handler();
 8001896:	f000 f955 	bl	8001b44 <Error_Handler>
	}
	/* USER CODE BEGIN I2C2_Init 2 */

	/* USER CODE END I2C2_Init 2 */

}
 800189a:	bf00      	nop
 800189c:	bd80      	pop	{r7, pc}
 800189e:	bf00      	nop
 80018a0:	24000248 	.word	0x24000248
 80018a4:	40005800 	.word	0x40005800
 80018a8:	10707dbc 	.word	0x10707dbc

080018ac <MX_USART3_UART_Init>:
 * @brief USART3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART3_UART_Init(void)
{
 80018ac:	b580      	push	{r7, lr}
 80018ae:	af00      	add	r7, sp, #0
	/* USER CODE END USART3_Init 0 */

	/* USER CODE BEGIN USART3_Init 1 */

	/* USER CODE END USART3_Init 1 */
	huart3.Instance = USART3;
 80018b0:	4b22      	ldr	r3, [pc, #136]	@ (800193c <MX_USART3_UART_Init+0x90>)
 80018b2:	4a23      	ldr	r2, [pc, #140]	@ (8001940 <MX_USART3_UART_Init+0x94>)
 80018b4:	601a      	str	r2, [r3, #0]
	huart3.Init.BaudRate = 115200;
 80018b6:	4b21      	ldr	r3, [pc, #132]	@ (800193c <MX_USART3_UART_Init+0x90>)
 80018b8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80018bc:	605a      	str	r2, [r3, #4]
	huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80018be:	4b1f      	ldr	r3, [pc, #124]	@ (800193c <MX_USART3_UART_Init+0x90>)
 80018c0:	2200      	movs	r2, #0
 80018c2:	609a      	str	r2, [r3, #8]
	huart3.Init.StopBits = UART_STOPBITS_1;
 80018c4:	4b1d      	ldr	r3, [pc, #116]	@ (800193c <MX_USART3_UART_Init+0x90>)
 80018c6:	2200      	movs	r2, #0
 80018c8:	60da      	str	r2, [r3, #12]
	huart3.Init.Parity = UART_PARITY_NONE;
 80018ca:	4b1c      	ldr	r3, [pc, #112]	@ (800193c <MX_USART3_UART_Init+0x90>)
 80018cc:	2200      	movs	r2, #0
 80018ce:	611a      	str	r2, [r3, #16]
	huart3.Init.Mode = UART_MODE_TX_RX;
 80018d0:	4b1a      	ldr	r3, [pc, #104]	@ (800193c <MX_USART3_UART_Init+0x90>)
 80018d2:	220c      	movs	r2, #12
 80018d4:	615a      	str	r2, [r3, #20]
	huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80018d6:	4b19      	ldr	r3, [pc, #100]	@ (800193c <MX_USART3_UART_Init+0x90>)
 80018d8:	2200      	movs	r2, #0
 80018da:	619a      	str	r2, [r3, #24]
	huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80018dc:	4b17      	ldr	r3, [pc, #92]	@ (800193c <MX_USART3_UART_Init+0x90>)
 80018de:	2200      	movs	r2, #0
 80018e0:	61da      	str	r2, [r3, #28]
	huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80018e2:	4b16      	ldr	r3, [pc, #88]	@ (800193c <MX_USART3_UART_Init+0x90>)
 80018e4:	2200      	movs	r2, #0
 80018e6:	621a      	str	r2, [r3, #32]
	huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80018e8:	4b14      	ldr	r3, [pc, #80]	@ (800193c <MX_USART3_UART_Init+0x90>)
 80018ea:	2200      	movs	r2, #0
 80018ec:	625a      	str	r2, [r3, #36]	@ 0x24
	huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80018ee:	4b13      	ldr	r3, [pc, #76]	@ (800193c <MX_USART3_UART_Init+0x90>)
 80018f0:	2200      	movs	r2, #0
 80018f2:	629a      	str	r2, [r3, #40]	@ 0x28
	if (HAL_UART_Init(&huart3) != HAL_OK)
 80018f4:	4811      	ldr	r0, [pc, #68]	@ (800193c <MX_USART3_UART_Init+0x90>)
 80018f6:	f004 fcf1 	bl	80062dc <HAL_UART_Init>
 80018fa:	4603      	mov	r3, r0
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	d001      	beq.n	8001904 <MX_USART3_UART_Init+0x58>
	{
		Error_Handler();
 8001900:	f000 f920 	bl	8001b44 <Error_Handler>
	}
	if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001904:	2100      	movs	r1, #0
 8001906:	480d      	ldr	r0, [pc, #52]	@ (800193c <MX_USART3_UART_Init+0x90>)
 8001908:	f005 fe4f 	bl	80075aa <HAL_UARTEx_SetTxFifoThreshold>
 800190c:	4603      	mov	r3, r0
 800190e:	2b00      	cmp	r3, #0
 8001910:	d001      	beq.n	8001916 <MX_USART3_UART_Init+0x6a>
	{
		Error_Handler();
 8001912:	f000 f917 	bl	8001b44 <Error_Handler>
	}
	if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001916:	2100      	movs	r1, #0
 8001918:	4808      	ldr	r0, [pc, #32]	@ (800193c <MX_USART3_UART_Init+0x90>)
 800191a:	f005 fe84 	bl	8007626 <HAL_UARTEx_SetRxFifoThreshold>
 800191e:	4603      	mov	r3, r0
 8001920:	2b00      	cmp	r3, #0
 8001922:	d001      	beq.n	8001928 <MX_USART3_UART_Init+0x7c>
	{
		Error_Handler();
 8001924:	f000 f90e 	bl	8001b44 <Error_Handler>
	}
	if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8001928:	4804      	ldr	r0, [pc, #16]	@ (800193c <MX_USART3_UART_Init+0x90>)
 800192a:	f005 fe05 	bl	8007538 <HAL_UARTEx_DisableFifoMode>
 800192e:	4603      	mov	r3, r0
 8001930:	2b00      	cmp	r3, #0
 8001932:	d001      	beq.n	8001938 <MX_USART3_UART_Init+0x8c>
	{
		Error_Handler();
 8001934:	f000 f906 	bl	8001b44 <Error_Handler>
	}
	/* USER CODE BEGIN USART3_Init 2 */

	/* USER CODE END USART3_Init 2 */

}
 8001938:	bf00      	nop
 800193a:	bd80      	pop	{r7, pc}
 800193c:	2400029c 	.word	0x2400029c
 8001940:	40004800 	.word	0x40004800

08001944 <MX_USART6_UART_Init>:
 * @brief USART6 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART6_UART_Init(void)
{
 8001944:	b580      	push	{r7, lr}
 8001946:	af00      	add	r7, sp, #0
	/* USER CODE END USART6_Init 0 */

	/* USER CODE BEGIN USART6_Init 1 */

	/* USER CODE END USART6_Init 1 */
	huart6.Instance = USART6;
 8001948:	4b22      	ldr	r3, [pc, #136]	@ (80019d4 <MX_USART6_UART_Init+0x90>)
 800194a:	4a23      	ldr	r2, [pc, #140]	@ (80019d8 <MX_USART6_UART_Init+0x94>)
 800194c:	601a      	str	r2, [r3, #0]
	huart6.Init.BaudRate = 9600;
 800194e:	4b21      	ldr	r3, [pc, #132]	@ (80019d4 <MX_USART6_UART_Init+0x90>)
 8001950:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8001954:	605a      	str	r2, [r3, #4]
	huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8001956:	4b1f      	ldr	r3, [pc, #124]	@ (80019d4 <MX_USART6_UART_Init+0x90>)
 8001958:	2200      	movs	r2, #0
 800195a:	609a      	str	r2, [r3, #8]
	huart6.Init.StopBits = UART_STOPBITS_1;
 800195c:	4b1d      	ldr	r3, [pc, #116]	@ (80019d4 <MX_USART6_UART_Init+0x90>)
 800195e:	2200      	movs	r2, #0
 8001960:	60da      	str	r2, [r3, #12]
	huart6.Init.Parity = UART_PARITY_NONE;
 8001962:	4b1c      	ldr	r3, [pc, #112]	@ (80019d4 <MX_USART6_UART_Init+0x90>)
 8001964:	2200      	movs	r2, #0
 8001966:	611a      	str	r2, [r3, #16]
	huart6.Init.Mode = UART_MODE_TX_RX;
 8001968:	4b1a      	ldr	r3, [pc, #104]	@ (80019d4 <MX_USART6_UART_Init+0x90>)
 800196a:	220c      	movs	r2, #12
 800196c:	615a      	str	r2, [r3, #20]
	huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800196e:	4b19      	ldr	r3, [pc, #100]	@ (80019d4 <MX_USART6_UART_Init+0x90>)
 8001970:	2200      	movs	r2, #0
 8001972:	619a      	str	r2, [r3, #24]
	huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8001974:	4b17      	ldr	r3, [pc, #92]	@ (80019d4 <MX_USART6_UART_Init+0x90>)
 8001976:	2200      	movs	r2, #0
 8001978:	61da      	str	r2, [r3, #28]
	huart6.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800197a:	4b16      	ldr	r3, [pc, #88]	@ (80019d4 <MX_USART6_UART_Init+0x90>)
 800197c:	2200      	movs	r2, #0
 800197e:	621a      	str	r2, [r3, #32]
	huart6.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001980:	4b14      	ldr	r3, [pc, #80]	@ (80019d4 <MX_USART6_UART_Init+0x90>)
 8001982:	2200      	movs	r2, #0
 8001984:	625a      	str	r2, [r3, #36]	@ 0x24
	huart6.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001986:	4b13      	ldr	r3, [pc, #76]	@ (80019d4 <MX_USART6_UART_Init+0x90>)
 8001988:	2200      	movs	r2, #0
 800198a:	629a      	str	r2, [r3, #40]	@ 0x28
	if (HAL_UART_Init(&huart6) != HAL_OK)
 800198c:	4811      	ldr	r0, [pc, #68]	@ (80019d4 <MX_USART6_UART_Init+0x90>)
 800198e:	f004 fca5 	bl	80062dc <HAL_UART_Init>
 8001992:	4603      	mov	r3, r0
 8001994:	2b00      	cmp	r3, #0
 8001996:	d001      	beq.n	800199c <MX_USART6_UART_Init+0x58>
	{
		Error_Handler();
 8001998:	f000 f8d4 	bl	8001b44 <Error_Handler>
	}
	if (HAL_UARTEx_SetTxFifoThreshold(&huart6, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800199c:	2100      	movs	r1, #0
 800199e:	480d      	ldr	r0, [pc, #52]	@ (80019d4 <MX_USART6_UART_Init+0x90>)
 80019a0:	f005 fe03 	bl	80075aa <HAL_UARTEx_SetTxFifoThreshold>
 80019a4:	4603      	mov	r3, r0
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d001      	beq.n	80019ae <MX_USART6_UART_Init+0x6a>
	{
		Error_Handler();
 80019aa:	f000 f8cb 	bl	8001b44 <Error_Handler>
	}
	if (HAL_UARTEx_SetRxFifoThreshold(&huart6, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80019ae:	2100      	movs	r1, #0
 80019b0:	4808      	ldr	r0, [pc, #32]	@ (80019d4 <MX_USART6_UART_Init+0x90>)
 80019b2:	f005 fe38 	bl	8007626 <HAL_UARTEx_SetRxFifoThreshold>
 80019b6:	4603      	mov	r3, r0
 80019b8:	2b00      	cmp	r3, #0
 80019ba:	d001      	beq.n	80019c0 <MX_USART6_UART_Init+0x7c>
	{
		Error_Handler();
 80019bc:	f000 f8c2 	bl	8001b44 <Error_Handler>
	}
	if (HAL_UARTEx_DisableFifoMode(&huart6) != HAL_OK)
 80019c0:	4804      	ldr	r0, [pc, #16]	@ (80019d4 <MX_USART6_UART_Init+0x90>)
 80019c2:	f005 fdb9 	bl	8007538 <HAL_UARTEx_DisableFifoMode>
 80019c6:	4603      	mov	r3, r0
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	d001      	beq.n	80019d0 <MX_USART6_UART_Init+0x8c>
	{
		Error_Handler();
 80019cc:	f000 f8ba 	bl	8001b44 <Error_Handler>
	}
	/* USER CODE BEGIN USART6_Init 2 */

	/* USER CODE END USART6_Init 2 */

}
 80019d0:	bf00      	nop
 80019d2:	bd80      	pop	{r7, pc}
 80019d4:	24000330 	.word	0x24000330
 80019d8:	40011400 	.word	0x40011400

080019dc <MX_GPIO_Init>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 80019dc:	b580      	push	{r7, lr}
 80019de:	b08a      	sub	sp, #40	@ 0x28
 80019e0:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019e2:	f107 0314 	add.w	r3, r7, #20
 80019e6:	2200      	movs	r2, #0
 80019e8:	601a      	str	r2, [r3, #0]
 80019ea:	605a      	str	r2, [r3, #4]
 80019ec:	609a      	str	r2, [r3, #8]
 80019ee:	60da      	str	r2, [r3, #12]
 80019f0:	611a      	str	r2, [r3, #16]
	/* USER CODE BEGIN MX_GPIO_Init_1 */

	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOF_CLK_ENABLE();
 80019f2:	4b3b      	ldr	r3, [pc, #236]	@ (8001ae0 <MX_GPIO_Init+0x104>)
 80019f4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80019f8:	4a39      	ldr	r2, [pc, #228]	@ (8001ae0 <MX_GPIO_Init+0x104>)
 80019fa:	f043 0320 	orr.w	r3, r3, #32
 80019fe:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001a02:	4b37      	ldr	r3, [pc, #220]	@ (8001ae0 <MX_GPIO_Init+0x104>)
 8001a04:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001a08:	f003 0320 	and.w	r3, r3, #32
 8001a0c:	613b      	str	r3, [r7, #16]
 8001a0e:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8001a10:	4b33      	ldr	r3, [pc, #204]	@ (8001ae0 <MX_GPIO_Init+0x104>)
 8001a12:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001a16:	4a32      	ldr	r2, [pc, #200]	@ (8001ae0 <MX_GPIO_Init+0x104>)
 8001a18:	f043 0302 	orr.w	r3, r3, #2
 8001a1c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001a20:	4b2f      	ldr	r3, [pc, #188]	@ (8001ae0 <MX_GPIO_Init+0x104>)
 8001a22:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001a26:	f003 0302 	and.w	r3, r3, #2
 8001a2a:	60fb      	str	r3, [r7, #12]
 8001a2c:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 8001a2e:	4b2c      	ldr	r3, [pc, #176]	@ (8001ae0 <MX_GPIO_Init+0x104>)
 8001a30:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001a34:	4a2a      	ldr	r2, [pc, #168]	@ (8001ae0 <MX_GPIO_Init+0x104>)
 8001a36:	f043 0308 	orr.w	r3, r3, #8
 8001a3a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001a3e:	4b28      	ldr	r3, [pc, #160]	@ (8001ae0 <MX_GPIO_Init+0x104>)
 8001a40:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001a44:	f003 0308 	and.w	r3, r3, #8
 8001a48:	60bb      	str	r3, [r7, #8]
 8001a4a:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8001a4c:	4b24      	ldr	r3, [pc, #144]	@ (8001ae0 <MX_GPIO_Init+0x104>)
 8001a4e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001a52:	4a23      	ldr	r2, [pc, #140]	@ (8001ae0 <MX_GPIO_Init+0x104>)
 8001a54:	f043 0304 	orr.w	r3, r3, #4
 8001a58:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001a5c:	4b20      	ldr	r3, [pc, #128]	@ (8001ae0 <MX_GPIO_Init+0x104>)
 8001a5e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001a62:	f003 0304 	and.w	r3, r3, #4
 8001a66:	607b      	str	r3, [r7, #4]
 8001a68:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOE_CLK_ENABLE();
 8001a6a:	4b1d      	ldr	r3, [pc, #116]	@ (8001ae0 <MX_GPIO_Init+0x104>)
 8001a6c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001a70:	4a1b      	ldr	r2, [pc, #108]	@ (8001ae0 <MX_GPIO_Init+0x104>)
 8001a72:	f043 0310 	orr.w	r3, r3, #16
 8001a76:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001a7a:	4b19      	ldr	r3, [pc, #100]	@ (8001ae0 <MX_GPIO_Init+0x104>)
 8001a7c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001a80:	f003 0310 	and.w	r3, r3, #16
 8001a84:	603b      	str	r3, [r7, #0]
 8001a86:	683b      	ldr	r3, [r7, #0]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB, Green_LED_Pin|Yellow_LED_Pin, GPIO_PIN_RESET);
 8001a88:	2200      	movs	r2, #0
 8001a8a:	f244 0101 	movw	r1, #16385	@ 0x4001
 8001a8e:	4815      	ldr	r0, [pc, #84]	@ (8001ae4 <MX_GPIO_Init+0x108>)
 8001a90:	f000 ff8e 	bl	80029b0 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(Red_LED_GPIO_Port, Red_LED_Pin, GPIO_PIN_RESET);
 8001a94:	2200      	movs	r2, #0
 8001a96:	2102      	movs	r1, #2
 8001a98:	4813      	ldr	r0, [pc, #76]	@ (8001ae8 <MX_GPIO_Init+0x10c>)
 8001a9a:	f000 ff89 	bl	80029b0 <HAL_GPIO_WritePin>

	/*Configure GPIO pins : Green_LED_Pin Yellow_LED_Pin */
	GPIO_InitStruct.Pin = Green_LED_Pin|Yellow_LED_Pin;
 8001a9e:	f244 0301 	movw	r3, #16385	@ 0x4001
 8001aa2:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001aa4:	2301      	movs	r3, #1
 8001aa6:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001aa8:	2300      	movs	r3, #0
 8001aaa:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001aac:	2300      	movs	r3, #0
 8001aae:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ab0:	f107 0314 	add.w	r3, r7, #20
 8001ab4:	4619      	mov	r1, r3
 8001ab6:	480b      	ldr	r0, [pc, #44]	@ (8001ae4 <MX_GPIO_Init+0x108>)
 8001ab8:	f000 fdca 	bl	8002650 <HAL_GPIO_Init>

	/*Configure GPIO pin : Red_LED_Pin */
	GPIO_InitStruct.Pin = Red_LED_Pin;
 8001abc:	2302      	movs	r3, #2
 8001abe:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ac0:	2301      	movs	r3, #1
 8001ac2:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ac4:	2300      	movs	r3, #0
 8001ac6:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ac8:	2300      	movs	r3, #0
 8001aca:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(Red_LED_GPIO_Port, &GPIO_InitStruct);
 8001acc:	f107 0314 	add.w	r3, r7, #20
 8001ad0:	4619      	mov	r1, r3
 8001ad2:	4805      	ldr	r0, [pc, #20]	@ (8001ae8 <MX_GPIO_Init+0x10c>)
 8001ad4:	f000 fdbc 	bl	8002650 <HAL_GPIO_Init>

	/* USER CODE BEGIN MX_GPIO_Init_2 */

	/* USER CODE END MX_GPIO_Init_2 */
}
 8001ad8:	bf00      	nop
 8001ada:	3728      	adds	r7, #40	@ 0x28
 8001adc:	46bd      	mov	sp, r7
 8001ade:	bd80      	pop	{r7, pc}
 8001ae0:	58024400 	.word	0x58024400
 8001ae4:	58020400 	.word	0x58020400
 8001ae8:	58021000 	.word	0x58021000

08001aec <MPU_Config>:
/* USER CODE END 4 */

/* MPU Configuration */

void MPU_Config(void)
{
 8001aec:	b580      	push	{r7, lr}
 8001aee:	b084      	sub	sp, #16
 8001af0:	af00      	add	r7, sp, #0
	MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8001af2:	463b      	mov	r3, r7
 8001af4:	2200      	movs	r2, #0
 8001af6:	601a      	str	r2, [r3, #0]
 8001af8:	605a      	str	r2, [r3, #4]
 8001afa:	609a      	str	r2, [r3, #8]
 8001afc:	60da      	str	r2, [r3, #12]

	/* Disables the MPU */
	HAL_MPU_Disable();
 8001afe:	f000 fd2f 	bl	8002560 <HAL_MPU_Disable>

	/** Initializes and configures the Region and the memory to be protected
	 */
	MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8001b02:	2301      	movs	r3, #1
 8001b04:	703b      	strb	r3, [r7, #0]
	MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 8001b06:	2300      	movs	r3, #0
 8001b08:	707b      	strb	r3, [r7, #1]
	MPU_InitStruct.BaseAddress = 0x0;
 8001b0a:	2300      	movs	r3, #0
 8001b0c:	607b      	str	r3, [r7, #4]
	MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 8001b0e:	231f      	movs	r3, #31
 8001b10:	723b      	strb	r3, [r7, #8]
	MPU_InitStruct.SubRegionDisable = 0x87;
 8001b12:	2387      	movs	r3, #135	@ 0x87
 8001b14:	727b      	strb	r3, [r7, #9]
	MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8001b16:	2300      	movs	r3, #0
 8001b18:	72bb      	strb	r3, [r7, #10]
	MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 8001b1a:	2300      	movs	r3, #0
 8001b1c:	72fb      	strb	r3, [r7, #11]
	MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 8001b1e:	2301      	movs	r3, #1
 8001b20:	733b      	strb	r3, [r7, #12]
	MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8001b22:	2301      	movs	r3, #1
 8001b24:	737b      	strb	r3, [r7, #13]
	MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8001b26:	2300      	movs	r3, #0
 8001b28:	73bb      	strb	r3, [r7, #14]
	MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 8001b2a:	2300      	movs	r3, #0
 8001b2c:	73fb      	strb	r3, [r7, #15]

	HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8001b2e:	463b      	mov	r3, r7
 8001b30:	4618      	mov	r0, r3
 8001b32:	f000 fd4d 	bl	80025d0 <HAL_MPU_ConfigRegion>
	/* Enables the MPU */
	HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8001b36:	2004      	movs	r0, #4
 8001b38:	f000 fd2a 	bl	8002590 <HAL_MPU_Enable>

}
 8001b3c:	bf00      	nop
 8001b3e:	3710      	adds	r7, #16
 8001b40:	46bd      	mov	sp, r7
 8001b42:	bd80      	pop	{r7, pc}

08001b44 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8001b44:	b480      	push	{r7}
 8001b46:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001b48:	b672      	cpsid	i
}
 8001b4a:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8001b4c:	bf00      	nop
 8001b4e:	e7fd      	b.n	8001b4c <Error_Handler+0x8>

08001b50 <_write>:

extern UART_HandleTypeDef huart3;  // <-- change to your actual UART handle (huart1/3/…)

/* Redirect printf to UART */
// printf -> UART3 (so you can use printf anywhere)
int _write(int file, char *ptr, int len) {
 8001b50:	b580      	push	{r7, lr}
 8001b52:	b084      	sub	sp, #16
 8001b54:	af00      	add	r7, sp, #0
 8001b56:	60f8      	str	r0, [r7, #12]
 8001b58:	60b9      	str	r1, [r7, #8]
 8001b5a:	607a      	str	r2, [r7, #4]
	HAL_UART_Transmit(&huart3, (uint8_t*)ptr, (uint16_t)len, HAL_MAX_DELAY);
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	b29a      	uxth	r2, r3
 8001b60:	f04f 33ff 	mov.w	r3, #4294967295
 8001b64:	68b9      	ldr	r1, [r7, #8]
 8001b66:	4804      	ldr	r0, [pc, #16]	@ (8001b78 <_write+0x28>)
 8001b68:	f004 fc08 	bl	800637c <HAL_UART_Transmit>
	return len;
 8001b6c:	687b      	ldr	r3, [r7, #4]
}
 8001b6e:	4618      	mov	r0, r3
 8001b70:	3710      	adds	r7, #16
 8001b72:	46bd      	mov	sp, r7
 8001b74:	bd80      	pop	{r7, pc}
 8001b76:	bf00      	nop
 8001b78:	2400029c 	.word	0x2400029c

08001b7c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001b7c:	b480      	push	{r7}
 8001b7e:	b083      	sub	sp, #12
 8001b80:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b82:	4b0a      	ldr	r3, [pc, #40]	@ (8001bac <HAL_MspInit+0x30>)
 8001b84:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001b88:	4a08      	ldr	r2, [pc, #32]	@ (8001bac <HAL_MspInit+0x30>)
 8001b8a:	f043 0302 	orr.w	r3, r3, #2
 8001b8e:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8001b92:	4b06      	ldr	r3, [pc, #24]	@ (8001bac <HAL_MspInit+0x30>)
 8001b94:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001b98:	f003 0302 	and.w	r3, r3, #2
 8001b9c:	607b      	str	r3, [r7, #4]
 8001b9e:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001ba0:	bf00      	nop
 8001ba2:	370c      	adds	r7, #12
 8001ba4:	46bd      	mov	sp, r7
 8001ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001baa:	4770      	bx	lr
 8001bac:	58024400 	.word	0x58024400

08001bb0 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001bb0:	b580      	push	{r7, lr}
 8001bb2:	b0bc      	sub	sp, #240	@ 0xf0
 8001bb4:	af00      	add	r7, sp, #0
 8001bb6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bb8:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8001bbc:	2200      	movs	r2, #0
 8001bbe:	601a      	str	r2, [r3, #0]
 8001bc0:	605a      	str	r2, [r3, #4]
 8001bc2:	609a      	str	r2, [r3, #8]
 8001bc4:	60da      	str	r2, [r3, #12]
 8001bc6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001bc8:	f107 0318 	add.w	r3, r7, #24
 8001bcc:	22c0      	movs	r2, #192	@ 0xc0
 8001bce:	2100      	movs	r1, #0
 8001bd0:	4618      	mov	r0, r3
 8001bd2:	f006 fca9 	bl	8008528 <memset>
  if(hi2c->Instance==I2C1)
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	4a4d      	ldr	r2, [pc, #308]	@ (8001d10 <HAL_I2C_MspInit+0x160>)
 8001bdc:	4293      	cmp	r3, r2
 8001bde:	d147      	bne.n	8001c70 <HAL_I2C_MspInit+0xc0>

    /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001be0:	f04f 0208 	mov.w	r2, #8
 8001be4:	f04f 0300 	mov.w	r3, #0
 8001be8:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 8001bec:	2300      	movs	r3, #0
 8001bee:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001bf2:	f107 0318 	add.w	r3, r7, #24
 8001bf6:	4618      	mov	r0, r3
 8001bf8:	f002 fd44 	bl	8004684 <HAL_RCCEx_PeriphCLKConfig>
 8001bfc:	4603      	mov	r3, r0
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d001      	beq.n	8001c06 <HAL_I2C_MspInit+0x56>
    {
      Error_Handler();
 8001c02:	f7ff ff9f 	bl	8001b44 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c06:	4b43      	ldr	r3, [pc, #268]	@ (8001d14 <HAL_I2C_MspInit+0x164>)
 8001c08:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001c0c:	4a41      	ldr	r2, [pc, #260]	@ (8001d14 <HAL_I2C_MspInit+0x164>)
 8001c0e:	f043 0302 	orr.w	r3, r3, #2
 8001c12:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001c16:	4b3f      	ldr	r3, [pc, #252]	@ (8001d14 <HAL_I2C_MspInit+0x164>)
 8001c18:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001c1c:	f003 0302 	and.w	r3, r3, #2
 8001c20:	617b      	str	r3, [r7, #20]
 8001c22:	697b      	ldr	r3, [r7, #20]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = i2c1_scl_Pin|i2c1_sclB9_Pin;
 8001c24:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001c28:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001c2c:	2312      	movs	r3, #18
 8001c2e:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c32:	2300      	movs	r3, #0
 8001c34:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c38:	2300      	movs	r3, #0
 8001c3a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001c3e:	2304      	movs	r3, #4
 8001c40:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c44:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8001c48:	4619      	mov	r1, r3
 8001c4a:	4833      	ldr	r0, [pc, #204]	@ (8001d18 <HAL_I2C_MspInit+0x168>)
 8001c4c:	f000 fd00 	bl	8002650 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001c50:	4b30      	ldr	r3, [pc, #192]	@ (8001d14 <HAL_I2C_MspInit+0x164>)
 8001c52:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001c56:	4a2f      	ldr	r2, [pc, #188]	@ (8001d14 <HAL_I2C_MspInit+0x164>)
 8001c58:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001c5c:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8001c60:	4b2c      	ldr	r3, [pc, #176]	@ (8001d14 <HAL_I2C_MspInit+0x164>)
 8001c62:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001c66:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001c6a:	613b      	str	r3, [r7, #16]
 8001c6c:	693b      	ldr	r3, [r7, #16]
    /* USER CODE BEGIN I2C2_MspInit 1 */

    /* USER CODE END I2C2_MspInit 1 */
  }

}
 8001c6e:	e04a      	b.n	8001d06 <HAL_I2C_MspInit+0x156>
  else if(hi2c->Instance==I2C2)
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	4a29      	ldr	r2, [pc, #164]	@ (8001d1c <HAL_I2C_MspInit+0x16c>)
 8001c76:	4293      	cmp	r3, r2
 8001c78:	d145      	bne.n	8001d06 <HAL_I2C_MspInit+0x156>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8001c7a:	f04f 0208 	mov.w	r2, #8
 8001c7e:	f04f 0300 	mov.w	r3, #0
 8001c82:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 8001c86:	2300      	movs	r3, #0
 8001c88:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001c8c:	f107 0318 	add.w	r3, r7, #24
 8001c90:	4618      	mov	r0, r3
 8001c92:	f002 fcf7 	bl	8004684 <HAL_RCCEx_PeriphCLKConfig>
 8001c96:	4603      	mov	r3, r0
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	d001      	beq.n	8001ca0 <HAL_I2C_MspInit+0xf0>
      Error_Handler();
 8001c9c:	f7ff ff52 	bl	8001b44 <Error_Handler>
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001ca0:	4b1c      	ldr	r3, [pc, #112]	@ (8001d14 <HAL_I2C_MspInit+0x164>)
 8001ca2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001ca6:	4a1b      	ldr	r2, [pc, #108]	@ (8001d14 <HAL_I2C_MspInit+0x164>)
 8001ca8:	f043 0320 	orr.w	r3, r3, #32
 8001cac:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001cb0:	4b18      	ldr	r3, [pc, #96]	@ (8001d14 <HAL_I2C_MspInit+0x164>)
 8001cb2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001cb6:	f003 0320 	and.w	r3, r3, #32
 8001cba:	60fb      	str	r3, [r7, #12]
 8001cbc:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = i2c2_sda_Pin|i2c2_scl_Pin;
 8001cbe:	2303      	movs	r3, #3
 8001cc0:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001cc4:	2312      	movs	r3, #18
 8001cc6:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cca:	2300      	movs	r3, #0
 8001ccc:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cd0:	2300      	movs	r3, #0
 8001cd2:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001cd6:	2304      	movs	r3, #4
 8001cd8:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001cdc:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8001ce0:	4619      	mov	r1, r3
 8001ce2:	480f      	ldr	r0, [pc, #60]	@ (8001d20 <HAL_I2C_MspInit+0x170>)
 8001ce4:	f000 fcb4 	bl	8002650 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001ce8:	4b0a      	ldr	r3, [pc, #40]	@ (8001d14 <HAL_I2C_MspInit+0x164>)
 8001cea:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001cee:	4a09      	ldr	r2, [pc, #36]	@ (8001d14 <HAL_I2C_MspInit+0x164>)
 8001cf0:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001cf4:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8001cf8:	4b06      	ldr	r3, [pc, #24]	@ (8001d14 <HAL_I2C_MspInit+0x164>)
 8001cfa:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001cfe:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001d02:	60bb      	str	r3, [r7, #8]
 8001d04:	68bb      	ldr	r3, [r7, #8]
}
 8001d06:	bf00      	nop
 8001d08:	37f0      	adds	r7, #240	@ 0xf0
 8001d0a:	46bd      	mov	sp, r7
 8001d0c:	bd80      	pop	{r7, pc}
 8001d0e:	bf00      	nop
 8001d10:	40005400 	.word	0x40005400
 8001d14:	58024400 	.word	0x58024400
 8001d18:	58020400 	.word	0x58020400
 8001d1c:	40005800 	.word	0x40005800
 8001d20:	58021400 	.word	0x58021400

08001d24 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001d24:	b580      	push	{r7, lr}
 8001d26:	b0bc      	sub	sp, #240	@ 0xf0
 8001d28:	af00      	add	r7, sp, #0
 8001d2a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d2c:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8001d30:	2200      	movs	r2, #0
 8001d32:	601a      	str	r2, [r3, #0]
 8001d34:	605a      	str	r2, [r3, #4]
 8001d36:	609a      	str	r2, [r3, #8]
 8001d38:	60da      	str	r2, [r3, #12]
 8001d3a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001d3c:	f107 0318 	add.w	r3, r7, #24
 8001d40:	22c0      	movs	r2, #192	@ 0xc0
 8001d42:	2100      	movs	r1, #0
 8001d44:	4618      	mov	r0, r3
 8001d46:	f006 fbef 	bl	8008528 <memset>
  if(huart->Instance==USART3)
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	4a4d      	ldr	r2, [pc, #308]	@ (8001e84 <HAL_UART_MspInit+0x160>)
 8001d50:	4293      	cmp	r3, r2
 8001d52:	d147      	bne.n	8001de4 <HAL_UART_MspInit+0xc0>

    /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001d54:	f04f 0202 	mov.w	r2, #2
 8001d58:	f04f 0300 	mov.w	r3, #0
 8001d5c:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8001d60:	2300      	movs	r3, #0
 8001d62:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001d66:	f107 0318 	add.w	r3, r7, #24
 8001d6a:	4618      	mov	r0, r3
 8001d6c:	f002 fc8a 	bl	8004684 <HAL_RCCEx_PeriphCLKConfig>
 8001d70:	4603      	mov	r3, r0
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d001      	beq.n	8001d7a <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8001d76:	f7ff fee5 	bl	8001b44 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001d7a:	4b43      	ldr	r3, [pc, #268]	@ (8001e88 <HAL_UART_MspInit+0x164>)
 8001d7c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001d80:	4a41      	ldr	r2, [pc, #260]	@ (8001e88 <HAL_UART_MspInit+0x164>)
 8001d82:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001d86:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8001d8a:	4b3f      	ldr	r3, [pc, #252]	@ (8001e88 <HAL_UART_MspInit+0x164>)
 8001d8c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001d90:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001d94:	617b      	str	r3, [r7, #20]
 8001d96:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001d98:	4b3b      	ldr	r3, [pc, #236]	@ (8001e88 <HAL_UART_MspInit+0x164>)
 8001d9a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001d9e:	4a3a      	ldr	r2, [pc, #232]	@ (8001e88 <HAL_UART_MspInit+0x164>)
 8001da0:	f043 0308 	orr.w	r3, r3, #8
 8001da4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001da8:	4b37      	ldr	r3, [pc, #220]	@ (8001e88 <HAL_UART_MspInit+0x164>)
 8001daa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001dae:	f003 0308 	and.w	r3, r3, #8
 8001db2:	613b      	str	r3, [r7, #16]
 8001db4:	693b      	ldr	r3, [r7, #16]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001db6:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001dba:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001dbe:	2302      	movs	r3, #2
 8001dc0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dc4:	2300      	movs	r3, #0
 8001dc6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001dca:	2300      	movs	r3, #0
 8001dcc:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001dd0:	2307      	movs	r3, #7
 8001dd2:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001dd6:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8001dda:	4619      	mov	r1, r3
 8001ddc:	482b      	ldr	r0, [pc, #172]	@ (8001e8c <HAL_UART_MspInit+0x168>)
 8001dde:	f000 fc37 	bl	8002650 <HAL_GPIO_Init>
    /* USER CODE BEGIN USART6_MspInit 1 */

    /* USER CODE END USART6_MspInit 1 */
  }

}
 8001de2:	e04a      	b.n	8001e7a <HAL_UART_MspInit+0x156>
  else if(huart->Instance==USART6)
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	4a29      	ldr	r2, [pc, #164]	@ (8001e90 <HAL_UART_MspInit+0x16c>)
 8001dea:	4293      	cmp	r3, r2
 8001dec:	d145      	bne.n	8001e7a <HAL_UART_MspInit+0x156>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART6;
 8001dee:	f04f 0201 	mov.w	r2, #1
 8001df2:	f04f 0300 	mov.w	r3, #0
 8001df6:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16CLKSOURCE_D2PCLK2;
 8001dfa:	2300      	movs	r3, #0
 8001dfc:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001e00:	f107 0318 	add.w	r3, r7, #24
 8001e04:	4618      	mov	r0, r3
 8001e06:	f002 fc3d 	bl	8004684 <HAL_RCCEx_PeriphCLKConfig>
 8001e0a:	4603      	mov	r3, r0
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	d001      	beq.n	8001e14 <HAL_UART_MspInit+0xf0>
      Error_Handler();
 8001e10:	f7ff fe98 	bl	8001b44 <Error_Handler>
    __HAL_RCC_USART6_CLK_ENABLE();
 8001e14:	4b1c      	ldr	r3, [pc, #112]	@ (8001e88 <HAL_UART_MspInit+0x164>)
 8001e16:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001e1a:	4a1b      	ldr	r2, [pc, #108]	@ (8001e88 <HAL_UART_MspInit+0x164>)
 8001e1c:	f043 0320 	orr.w	r3, r3, #32
 8001e20:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8001e24:	4b18      	ldr	r3, [pc, #96]	@ (8001e88 <HAL_UART_MspInit+0x164>)
 8001e26:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001e2a:	f003 0320 	and.w	r3, r3, #32
 8001e2e:	60fb      	str	r3, [r7, #12]
 8001e30:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001e32:	4b15      	ldr	r3, [pc, #84]	@ (8001e88 <HAL_UART_MspInit+0x164>)
 8001e34:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001e38:	4a13      	ldr	r2, [pc, #76]	@ (8001e88 <HAL_UART_MspInit+0x164>)
 8001e3a:	f043 0304 	orr.w	r3, r3, #4
 8001e3e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001e42:	4b11      	ldr	r3, [pc, #68]	@ (8001e88 <HAL_UART_MspInit+0x164>)
 8001e44:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001e48:	f003 0304 	and.w	r3, r3, #4
 8001e4c:	60bb      	str	r3, [r7, #8]
 8001e4e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001e50:	23c0      	movs	r3, #192	@ 0xc0
 8001e52:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e56:	2302      	movs	r3, #2
 8001e58:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e5c:	2300      	movs	r3, #0
 8001e5e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e62:	2300      	movs	r3, #0
 8001e64:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART6;
 8001e68:	2307      	movs	r3, #7
 8001e6a:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001e6e:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8001e72:	4619      	mov	r1, r3
 8001e74:	4807      	ldr	r0, [pc, #28]	@ (8001e94 <HAL_UART_MspInit+0x170>)
 8001e76:	f000 fbeb 	bl	8002650 <HAL_GPIO_Init>
}
 8001e7a:	bf00      	nop
 8001e7c:	37f0      	adds	r7, #240	@ 0xf0
 8001e7e:	46bd      	mov	sp, r7
 8001e80:	bd80      	pop	{r7, pc}
 8001e82:	bf00      	nop
 8001e84:	40004800 	.word	0x40004800
 8001e88:	58024400 	.word	0x58024400
 8001e8c:	58020c00 	.word	0x58020c00
 8001e90:	40011400 	.word	0x40011400
 8001e94:	58020800 	.word	0x58020800

08001e98 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001e98:	b480      	push	{r7}
 8001e9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001e9c:	bf00      	nop
 8001e9e:	e7fd      	b.n	8001e9c <NMI_Handler+0x4>

08001ea0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001ea0:	b480      	push	{r7}
 8001ea2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001ea4:	bf00      	nop
 8001ea6:	e7fd      	b.n	8001ea4 <HardFault_Handler+0x4>

08001ea8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001ea8:	b480      	push	{r7}
 8001eaa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001eac:	bf00      	nop
 8001eae:	e7fd      	b.n	8001eac <MemManage_Handler+0x4>

08001eb0 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001eb0:	b480      	push	{r7}
 8001eb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001eb4:	bf00      	nop
 8001eb6:	e7fd      	b.n	8001eb4 <BusFault_Handler+0x4>

08001eb8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001eb8:	b480      	push	{r7}
 8001eba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001ebc:	bf00      	nop
 8001ebe:	e7fd      	b.n	8001ebc <UsageFault_Handler+0x4>

08001ec0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001ec0:	b480      	push	{r7}
 8001ec2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001ec4:	bf00      	nop
 8001ec6:	46bd      	mov	sp, r7
 8001ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ecc:	4770      	bx	lr

08001ece <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001ece:	b480      	push	{r7}
 8001ed0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001ed2:	bf00      	nop
 8001ed4:	46bd      	mov	sp, r7
 8001ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eda:	4770      	bx	lr

08001edc <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001edc:	b480      	push	{r7}
 8001ede:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001ee0:	bf00      	nop
 8001ee2:	46bd      	mov	sp, r7
 8001ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee8:	4770      	bx	lr

08001eea <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001eea:	b580      	push	{r7, lr}
 8001eec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001eee:	f000 fa03 	bl	80022f8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001ef2:	bf00      	nop
 8001ef4:	bd80      	pop	{r7, pc}

08001ef6 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001ef6:	b480      	push	{r7}
 8001ef8:	af00      	add	r7, sp, #0
  return 1;
 8001efa:	2301      	movs	r3, #1
}
 8001efc:	4618      	mov	r0, r3
 8001efe:	46bd      	mov	sp, r7
 8001f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f04:	4770      	bx	lr

08001f06 <_kill>:

int _kill(int pid, int sig)
{
 8001f06:	b580      	push	{r7, lr}
 8001f08:	b082      	sub	sp, #8
 8001f0a:	af00      	add	r7, sp, #0
 8001f0c:	6078      	str	r0, [r7, #4]
 8001f0e:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001f10:	f006 fb5c 	bl	80085cc <__errno>
 8001f14:	4603      	mov	r3, r0
 8001f16:	2216      	movs	r2, #22
 8001f18:	601a      	str	r2, [r3, #0]
  return -1;
 8001f1a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001f1e:	4618      	mov	r0, r3
 8001f20:	3708      	adds	r7, #8
 8001f22:	46bd      	mov	sp, r7
 8001f24:	bd80      	pop	{r7, pc}

08001f26 <_exit>:

void _exit (int status)
{
 8001f26:	b580      	push	{r7, lr}
 8001f28:	b082      	sub	sp, #8
 8001f2a:	af00      	add	r7, sp, #0
 8001f2c:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001f2e:	f04f 31ff 	mov.w	r1, #4294967295
 8001f32:	6878      	ldr	r0, [r7, #4]
 8001f34:	f7ff ffe7 	bl	8001f06 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001f38:	bf00      	nop
 8001f3a:	e7fd      	b.n	8001f38 <_exit+0x12>

08001f3c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001f3c:	b580      	push	{r7, lr}
 8001f3e:	b086      	sub	sp, #24
 8001f40:	af00      	add	r7, sp, #0
 8001f42:	60f8      	str	r0, [r7, #12]
 8001f44:	60b9      	str	r1, [r7, #8]
 8001f46:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001f48:	2300      	movs	r3, #0
 8001f4a:	617b      	str	r3, [r7, #20]
 8001f4c:	e00a      	b.n	8001f64 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001f4e:	f3af 8000 	nop.w
 8001f52:	4601      	mov	r1, r0
 8001f54:	68bb      	ldr	r3, [r7, #8]
 8001f56:	1c5a      	adds	r2, r3, #1
 8001f58:	60ba      	str	r2, [r7, #8]
 8001f5a:	b2ca      	uxtb	r2, r1
 8001f5c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001f5e:	697b      	ldr	r3, [r7, #20]
 8001f60:	3301      	adds	r3, #1
 8001f62:	617b      	str	r3, [r7, #20]
 8001f64:	697a      	ldr	r2, [r7, #20]
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	429a      	cmp	r2, r3
 8001f6a:	dbf0      	blt.n	8001f4e <_read+0x12>
  }

  return len;
 8001f6c:	687b      	ldr	r3, [r7, #4]
}
 8001f6e:	4618      	mov	r0, r3
 8001f70:	3718      	adds	r7, #24
 8001f72:	46bd      	mov	sp, r7
 8001f74:	bd80      	pop	{r7, pc}

08001f76 <_close>:
  }
  return len;
}

int _close(int file)
{
 8001f76:	b480      	push	{r7}
 8001f78:	b083      	sub	sp, #12
 8001f7a:	af00      	add	r7, sp, #0
 8001f7c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001f7e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001f82:	4618      	mov	r0, r3
 8001f84:	370c      	adds	r7, #12
 8001f86:	46bd      	mov	sp, r7
 8001f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f8c:	4770      	bx	lr

08001f8e <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001f8e:	b480      	push	{r7}
 8001f90:	b083      	sub	sp, #12
 8001f92:	af00      	add	r7, sp, #0
 8001f94:	6078      	str	r0, [r7, #4]
 8001f96:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001f98:	683b      	ldr	r3, [r7, #0]
 8001f9a:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001f9e:	605a      	str	r2, [r3, #4]
  return 0;
 8001fa0:	2300      	movs	r3, #0
}
 8001fa2:	4618      	mov	r0, r3
 8001fa4:	370c      	adds	r7, #12
 8001fa6:	46bd      	mov	sp, r7
 8001fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fac:	4770      	bx	lr

08001fae <_isatty>:

int _isatty(int file)
{
 8001fae:	b480      	push	{r7}
 8001fb0:	b083      	sub	sp, #12
 8001fb2:	af00      	add	r7, sp, #0
 8001fb4:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001fb6:	2301      	movs	r3, #1
}
 8001fb8:	4618      	mov	r0, r3
 8001fba:	370c      	adds	r7, #12
 8001fbc:	46bd      	mov	sp, r7
 8001fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc2:	4770      	bx	lr

08001fc4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001fc4:	b480      	push	{r7}
 8001fc6:	b085      	sub	sp, #20
 8001fc8:	af00      	add	r7, sp, #0
 8001fca:	60f8      	str	r0, [r7, #12]
 8001fcc:	60b9      	str	r1, [r7, #8]
 8001fce:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001fd0:	2300      	movs	r3, #0
}
 8001fd2:	4618      	mov	r0, r3
 8001fd4:	3714      	adds	r7, #20
 8001fd6:	46bd      	mov	sp, r7
 8001fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fdc:	4770      	bx	lr
	...

08001fe0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001fe0:	b580      	push	{r7, lr}
 8001fe2:	b086      	sub	sp, #24
 8001fe4:	af00      	add	r7, sp, #0
 8001fe6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001fe8:	4a14      	ldr	r2, [pc, #80]	@ (800203c <_sbrk+0x5c>)
 8001fea:	4b15      	ldr	r3, [pc, #84]	@ (8002040 <_sbrk+0x60>)
 8001fec:	1ad3      	subs	r3, r2, r3
 8001fee:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001ff0:	697b      	ldr	r3, [r7, #20]
 8001ff2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001ff4:	4b13      	ldr	r3, [pc, #76]	@ (8002044 <_sbrk+0x64>)
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	d102      	bne.n	8002002 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001ffc:	4b11      	ldr	r3, [pc, #68]	@ (8002044 <_sbrk+0x64>)
 8001ffe:	4a12      	ldr	r2, [pc, #72]	@ (8002048 <_sbrk+0x68>)
 8002000:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002002:	4b10      	ldr	r3, [pc, #64]	@ (8002044 <_sbrk+0x64>)
 8002004:	681a      	ldr	r2, [r3, #0]
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	4413      	add	r3, r2
 800200a:	693a      	ldr	r2, [r7, #16]
 800200c:	429a      	cmp	r2, r3
 800200e:	d207      	bcs.n	8002020 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002010:	f006 fadc 	bl	80085cc <__errno>
 8002014:	4603      	mov	r3, r0
 8002016:	220c      	movs	r2, #12
 8002018:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800201a:	f04f 33ff 	mov.w	r3, #4294967295
 800201e:	e009      	b.n	8002034 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002020:	4b08      	ldr	r3, [pc, #32]	@ (8002044 <_sbrk+0x64>)
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002026:	4b07      	ldr	r3, [pc, #28]	@ (8002044 <_sbrk+0x64>)
 8002028:	681a      	ldr	r2, [r3, #0]
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	4413      	add	r3, r2
 800202e:	4a05      	ldr	r2, [pc, #20]	@ (8002044 <_sbrk+0x64>)
 8002030:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002032:	68fb      	ldr	r3, [r7, #12]
}
 8002034:	4618      	mov	r0, r3
 8002036:	3718      	adds	r7, #24
 8002038:	46bd      	mov	sp, r7
 800203a:	bd80      	pop	{r7, pc}
 800203c:	24080000 	.word	0x24080000
 8002040:	00000400 	.word	0x00000400
 8002044:	24000430 	.word	0x24000430
 8002048:	24000588 	.word	0x24000588

0800204c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800204c:	b480      	push	{r7}
 800204e:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8002050:	4b43      	ldr	r3, [pc, #268]	@ (8002160 <SystemInit+0x114>)
 8002052:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002056:	4a42      	ldr	r2, [pc, #264]	@ (8002160 <SystemInit+0x114>)
 8002058:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800205c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8002060:	4b40      	ldr	r3, [pc, #256]	@ (8002164 <SystemInit+0x118>)
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	f003 030f 	and.w	r3, r3, #15
 8002068:	2b06      	cmp	r3, #6
 800206a:	d807      	bhi.n	800207c <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800206c:	4b3d      	ldr	r3, [pc, #244]	@ (8002164 <SystemInit+0x118>)
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	f023 030f 	bic.w	r3, r3, #15
 8002074:	4a3b      	ldr	r2, [pc, #236]	@ (8002164 <SystemInit+0x118>)
 8002076:	f043 0307 	orr.w	r3, r3, #7
 800207a:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 800207c:	4b3a      	ldr	r3, [pc, #232]	@ (8002168 <SystemInit+0x11c>)
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	4a39      	ldr	r2, [pc, #228]	@ (8002168 <SystemInit+0x11c>)
 8002082:	f043 0301 	orr.w	r3, r3, #1
 8002086:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8002088:	4b37      	ldr	r3, [pc, #220]	@ (8002168 <SystemInit+0x11c>)
 800208a:	2200      	movs	r2, #0
 800208c:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 800208e:	4b36      	ldr	r3, [pc, #216]	@ (8002168 <SystemInit+0x11c>)
 8002090:	681a      	ldr	r2, [r3, #0]
 8002092:	4935      	ldr	r1, [pc, #212]	@ (8002168 <SystemInit+0x11c>)
 8002094:	4b35      	ldr	r3, [pc, #212]	@ (800216c <SystemInit+0x120>)
 8002096:	4013      	ands	r3, r2
 8002098:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800209a:	4b32      	ldr	r3, [pc, #200]	@ (8002164 <SystemInit+0x118>)
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	f003 0308 	and.w	r3, r3, #8
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d007      	beq.n	80020b6 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80020a6:	4b2f      	ldr	r3, [pc, #188]	@ (8002164 <SystemInit+0x118>)
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	f023 030f 	bic.w	r3, r3, #15
 80020ae:	4a2d      	ldr	r2, [pc, #180]	@ (8002164 <SystemInit+0x118>)
 80020b0:	f043 0307 	orr.w	r3, r3, #7
 80020b4:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 80020b6:	4b2c      	ldr	r3, [pc, #176]	@ (8002168 <SystemInit+0x11c>)
 80020b8:	2200      	movs	r2, #0
 80020ba:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 80020bc:	4b2a      	ldr	r3, [pc, #168]	@ (8002168 <SystemInit+0x11c>)
 80020be:	2200      	movs	r2, #0
 80020c0:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 80020c2:	4b29      	ldr	r3, [pc, #164]	@ (8002168 <SystemInit+0x11c>)
 80020c4:	2200      	movs	r2, #0
 80020c6:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 80020c8:	4b27      	ldr	r3, [pc, #156]	@ (8002168 <SystemInit+0x11c>)
 80020ca:	4a29      	ldr	r2, [pc, #164]	@ (8002170 <SystemInit+0x124>)
 80020cc:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 80020ce:	4b26      	ldr	r3, [pc, #152]	@ (8002168 <SystemInit+0x11c>)
 80020d0:	4a28      	ldr	r2, [pc, #160]	@ (8002174 <SystemInit+0x128>)
 80020d2:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 80020d4:	4b24      	ldr	r3, [pc, #144]	@ (8002168 <SystemInit+0x11c>)
 80020d6:	4a28      	ldr	r2, [pc, #160]	@ (8002178 <SystemInit+0x12c>)
 80020d8:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 80020da:	4b23      	ldr	r3, [pc, #140]	@ (8002168 <SystemInit+0x11c>)
 80020dc:	2200      	movs	r2, #0
 80020de:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 80020e0:	4b21      	ldr	r3, [pc, #132]	@ (8002168 <SystemInit+0x11c>)
 80020e2:	4a25      	ldr	r2, [pc, #148]	@ (8002178 <SystemInit+0x12c>)
 80020e4:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 80020e6:	4b20      	ldr	r3, [pc, #128]	@ (8002168 <SystemInit+0x11c>)
 80020e8:	2200      	movs	r2, #0
 80020ea:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 80020ec:	4b1e      	ldr	r3, [pc, #120]	@ (8002168 <SystemInit+0x11c>)
 80020ee:	4a22      	ldr	r2, [pc, #136]	@ (8002178 <SystemInit+0x12c>)
 80020f0:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 80020f2:	4b1d      	ldr	r3, [pc, #116]	@ (8002168 <SystemInit+0x11c>)
 80020f4:	2200      	movs	r2, #0
 80020f6:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80020f8:	4b1b      	ldr	r3, [pc, #108]	@ (8002168 <SystemInit+0x11c>)
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	4a1a      	ldr	r2, [pc, #104]	@ (8002168 <SystemInit+0x11c>)
 80020fe:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002102:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8002104:	4b18      	ldr	r3, [pc, #96]	@ (8002168 <SystemInit+0x11c>)
 8002106:	2200      	movs	r2, #0
 8002108:	661a      	str	r2, [r3, #96]	@ 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 800210a:	4b1c      	ldr	r3, [pc, #112]	@ (800217c <SystemInit+0x130>)
 800210c:	681a      	ldr	r2, [r3, #0]
 800210e:	4b1c      	ldr	r3, [pc, #112]	@ (8002180 <SystemInit+0x134>)
 8002110:	4013      	ands	r3, r2
 8002112:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002116:	d202      	bcs.n	800211e <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8002118:	4b1a      	ldr	r3, [pc, #104]	@ (8002184 <SystemInit+0x138>)
 800211a:	2201      	movs	r2, #1
 800211c:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D2 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#else
  if(READ_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN) == 0U)
 800211e:	4b12      	ldr	r3, [pc, #72]	@ (8002168 <SystemInit+0x11c>)
 8002120:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8002124:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002128:	2b00      	cmp	r3, #0
 800212a:	d113      	bne.n	8002154 <SystemInit+0x108>
  {
    /* Enable the FMC interface clock */
    SET_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 800212c:	4b0e      	ldr	r3, [pc, #56]	@ (8002168 <SystemInit+0x11c>)
 800212e:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8002132:	4a0d      	ldr	r2, [pc, #52]	@ (8002168 <SystemInit+0x11c>)
 8002134:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8002138:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
    /*
     * Disable the FMC bank1 (enabled after reset).
     * This, prevents CPU speculation access on this bank which blocks the use of FMC during
     * 24us. During this time the others FMC master (such as LTDC) cannot use it!
     */
    FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800213c:	4b12      	ldr	r3, [pc, #72]	@ (8002188 <SystemInit+0x13c>)
 800213e:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8002142:	601a      	str	r2, [r3, #0]

    /* Disable the FMC interface clock */
    CLEAR_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 8002144:	4b08      	ldr	r3, [pc, #32]	@ (8002168 <SystemInit+0x11c>)
 8002146:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 800214a:	4a07      	ldr	r2, [pc, #28]	@ (8002168 <SystemInit+0x11c>)
 800214c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8002150:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8002154:	bf00      	nop
 8002156:	46bd      	mov	sp, r7
 8002158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800215c:	4770      	bx	lr
 800215e:	bf00      	nop
 8002160:	e000ed00 	.word	0xe000ed00
 8002164:	52002000 	.word	0x52002000
 8002168:	58024400 	.word	0x58024400
 800216c:	eaf6ed7f 	.word	0xeaf6ed7f
 8002170:	02020200 	.word	0x02020200
 8002174:	01ff0000 	.word	0x01ff0000
 8002178:	01010280 	.word	0x01010280
 800217c:	5c001000 	.word	0x5c001000
 8002180:	ffff0000 	.word	0xffff0000
 8002184:	51008108 	.word	0x51008108
 8002188:	52004000 	.word	0x52004000

0800218c <ExitRun0Mode>:
  *
  * @param  None
  * @retval None
  */
void ExitRun0Mode(void)
{
 800218c:	b480      	push	{r7}
 800218e:	af00      	add	r7, sp, #0
  #if defined(SMPS)
    /* Exit Run* mode by disabling SMPS and enabling LDO */
    PWR->CR3 = (PWR->CR3 & ~PWR_CR3_SMPSEN) | PWR_CR3_LDOEN;
  #else
    /* Enable LDO mode */
    PWR->CR3 |= PWR_CR3_LDOEN;
 8002190:	4b09      	ldr	r3, [pc, #36]	@ (80021b8 <ExitRun0Mode+0x2c>)
 8002192:	68db      	ldr	r3, [r3, #12]
 8002194:	4a08      	ldr	r2, [pc, #32]	@ (80021b8 <ExitRun0Mode+0x2c>)
 8002196:	f043 0302 	orr.w	r3, r3, #2
 800219a:	60d3      	str	r3, [r2, #12]
  #endif /* SMPS */
  /* Wait till voltage level flag is set */
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
 800219c:	bf00      	nop
 800219e:	4b06      	ldr	r3, [pc, #24]	@ (80021b8 <ExitRun0Mode+0x2c>)
 80021a0:	685b      	ldr	r3, [r3, #4]
 80021a2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d0f9      	beq.n	800219e <ExitRun0Mode+0x12>
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
  {}
#else
  /* No system power supply configuration is selected at exit Run* mode */
#endif /* USE_PWR_LDO_SUPPLY */
}
 80021aa:	bf00      	nop
 80021ac:	bf00      	nop
 80021ae:	46bd      	mov	sp, r7
 80021b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b4:	4770      	bx	lr
 80021b6:	bf00      	nop
 80021b8:	58024800 	.word	0x58024800

080021bc <Reset_Handler>:
*/

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
	Reset_Handler:  ldr   sp, =_estack      /* set stack pointer */
 80021bc:	f8df d038 	ldr.w	sp, [pc, #56]	@ 80021f8 <LoopFillZerobss+0xe>

/* Call the ExitRun0Mode function to configure the power supply */
  bl  ExitRun0Mode
 80021c0:	f7ff ffe4 	bl	800218c <ExitRun0Mode>
/* Call the clock system initialization function.*/
  bl  SystemInit
 80021c4:	f7ff ff42 	bl	800204c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80021c8:	480c      	ldr	r0, [pc, #48]	@ (80021fc <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80021ca:	490d      	ldr	r1, [pc, #52]	@ (8002200 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80021cc:	4a0d      	ldr	r2, [pc, #52]	@ (8002204 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80021ce:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80021d0:	e002      	b.n	80021d8 <LoopCopyDataInit>

080021d2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80021d2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80021d4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80021d6:	3304      	adds	r3, #4

080021d8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80021d8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80021da:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80021dc:	d3f9      	bcc.n	80021d2 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80021de:	4a0a      	ldr	r2, [pc, #40]	@ (8002208 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80021e0:	4c0a      	ldr	r4, [pc, #40]	@ (800220c <LoopFillZerobss+0x22>)
  movs r3, #0
 80021e2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80021e4:	e001      	b.n	80021ea <LoopFillZerobss>

080021e6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80021e6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80021e8:	3204      	adds	r2, #4

080021ea <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80021ea:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80021ec:	d3fb      	bcc.n	80021e6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80021ee:	f006 f9f3 	bl	80085d8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80021f2:	f7ff f99b 	bl	800152c <main>
  bx  lr
 80021f6:	4770      	bx	lr
	Reset_Handler:  ldr   sp, =_estack      /* set stack pointer */
 80021f8:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 80021fc:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8002200:	240001d8 	.word	0x240001d8
  ldr r2, =_sidata
 8002204:	0800a664 	.word	0x0800a664
  ldr r2, =_sbss
 8002208:	240001d8 	.word	0x240001d8
  ldr r4, =_ebss
 800220c:	24000584 	.word	0x24000584

08002210 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002210:	e7fe      	b.n	8002210 <ADC3_IRQHandler>
	...

08002214 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002214:	b580      	push	{r7, lr}
 8002216:	b082      	sub	sp, #8
 8002218:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800221a:	2003      	movs	r0, #3
 800221c:	f000 f96e 	bl	80024fc <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8002220:	f002 f85a 	bl	80042d8 <HAL_RCC_GetSysClockFreq>
 8002224:	4602      	mov	r2, r0
 8002226:	4b15      	ldr	r3, [pc, #84]	@ (800227c <HAL_Init+0x68>)
 8002228:	699b      	ldr	r3, [r3, #24]
 800222a:	0a1b      	lsrs	r3, r3, #8
 800222c:	f003 030f 	and.w	r3, r3, #15
 8002230:	4913      	ldr	r1, [pc, #76]	@ (8002280 <HAL_Init+0x6c>)
 8002232:	5ccb      	ldrb	r3, [r1, r3]
 8002234:	f003 031f 	and.w	r3, r3, #31
 8002238:	fa22 f303 	lsr.w	r3, r2, r3
 800223c:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800223e:	4b0f      	ldr	r3, [pc, #60]	@ (800227c <HAL_Init+0x68>)
 8002240:	699b      	ldr	r3, [r3, #24]
 8002242:	f003 030f 	and.w	r3, r3, #15
 8002246:	4a0e      	ldr	r2, [pc, #56]	@ (8002280 <HAL_Init+0x6c>)
 8002248:	5cd3      	ldrb	r3, [r2, r3]
 800224a:	f003 031f 	and.w	r3, r3, #31
 800224e:	687a      	ldr	r2, [r7, #4]
 8002250:	fa22 f303 	lsr.w	r3, r2, r3
 8002254:	4a0b      	ldr	r2, [pc, #44]	@ (8002284 <HAL_Init+0x70>)
 8002256:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002258:	4a0b      	ldr	r2, [pc, #44]	@ (8002288 <HAL_Init+0x74>)
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800225e:	200f      	movs	r0, #15
 8002260:	f000 f814 	bl	800228c <HAL_InitTick>
 8002264:	4603      	mov	r3, r0
 8002266:	2b00      	cmp	r3, #0
 8002268:	d001      	beq.n	800226e <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 800226a:	2301      	movs	r3, #1
 800226c:	e002      	b.n	8002274 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800226e:	f7ff fc85 	bl	8001b7c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002272:	2300      	movs	r3, #0
}
 8002274:	4618      	mov	r0, r3
 8002276:	3708      	adds	r7, #8
 8002278:	46bd      	mov	sp, r7
 800227a:	bd80      	pop	{r7, pc}
 800227c:	58024400 	.word	0x58024400
 8002280:	0800a2a4 	.word	0x0800a2a4
 8002284:	24000004 	.word	0x24000004
 8002288:	24000000 	.word	0x24000000

0800228c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800228c:	b580      	push	{r7, lr}
 800228e:	b082      	sub	sp, #8
 8002290:	af00      	add	r7, sp, #0
 8002292:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8002294:	4b15      	ldr	r3, [pc, #84]	@ (80022ec <HAL_InitTick+0x60>)
 8002296:	781b      	ldrb	r3, [r3, #0]
 8002298:	2b00      	cmp	r3, #0
 800229a:	d101      	bne.n	80022a0 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 800229c:	2301      	movs	r3, #1
 800229e:	e021      	b.n	80022e4 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 80022a0:	4b13      	ldr	r3, [pc, #76]	@ (80022f0 <HAL_InitTick+0x64>)
 80022a2:	681a      	ldr	r2, [r3, #0]
 80022a4:	4b11      	ldr	r3, [pc, #68]	@ (80022ec <HAL_InitTick+0x60>)
 80022a6:	781b      	ldrb	r3, [r3, #0]
 80022a8:	4619      	mov	r1, r3
 80022aa:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80022ae:	fbb3 f3f1 	udiv	r3, r3, r1
 80022b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80022b6:	4618      	mov	r0, r3
 80022b8:	f000 f945 	bl	8002546 <HAL_SYSTICK_Config>
 80022bc:	4603      	mov	r3, r0
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d001      	beq.n	80022c6 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 80022c2:	2301      	movs	r3, #1
 80022c4:	e00e      	b.n	80022e4 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	2b0f      	cmp	r3, #15
 80022ca:	d80a      	bhi.n	80022e2 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80022cc:	2200      	movs	r2, #0
 80022ce:	6879      	ldr	r1, [r7, #4]
 80022d0:	f04f 30ff 	mov.w	r0, #4294967295
 80022d4:	f000 f91d 	bl	8002512 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80022d8:	4a06      	ldr	r2, [pc, #24]	@ (80022f4 <HAL_InitTick+0x68>)
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80022de:	2300      	movs	r3, #0
 80022e0:	e000      	b.n	80022e4 <HAL_InitTick+0x58>
    return HAL_ERROR;
 80022e2:	2301      	movs	r3, #1
}
 80022e4:	4618      	mov	r0, r3
 80022e6:	3708      	adds	r7, #8
 80022e8:	46bd      	mov	sp, r7
 80022ea:	bd80      	pop	{r7, pc}
 80022ec:	2400000c 	.word	0x2400000c
 80022f0:	24000000 	.word	0x24000000
 80022f4:	24000008 	.word	0x24000008

080022f8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80022f8:	b480      	push	{r7}
 80022fa:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80022fc:	4b06      	ldr	r3, [pc, #24]	@ (8002318 <HAL_IncTick+0x20>)
 80022fe:	781b      	ldrb	r3, [r3, #0]
 8002300:	461a      	mov	r2, r3
 8002302:	4b06      	ldr	r3, [pc, #24]	@ (800231c <HAL_IncTick+0x24>)
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	4413      	add	r3, r2
 8002308:	4a04      	ldr	r2, [pc, #16]	@ (800231c <HAL_IncTick+0x24>)
 800230a:	6013      	str	r3, [r2, #0]
}
 800230c:	bf00      	nop
 800230e:	46bd      	mov	sp, r7
 8002310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002314:	4770      	bx	lr
 8002316:	bf00      	nop
 8002318:	2400000c 	.word	0x2400000c
 800231c:	24000434 	.word	0x24000434

08002320 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002320:	b480      	push	{r7}
 8002322:	af00      	add	r7, sp, #0
  return uwTick;
 8002324:	4b03      	ldr	r3, [pc, #12]	@ (8002334 <HAL_GetTick+0x14>)
 8002326:	681b      	ldr	r3, [r3, #0]
}
 8002328:	4618      	mov	r0, r3
 800232a:	46bd      	mov	sp, r7
 800232c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002330:	4770      	bx	lr
 8002332:	bf00      	nop
 8002334:	24000434 	.word	0x24000434

08002338 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002338:	b580      	push	{r7, lr}
 800233a:	b084      	sub	sp, #16
 800233c:	af00      	add	r7, sp, #0
 800233e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002340:	f7ff ffee 	bl	8002320 <HAL_GetTick>
 8002344:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002350:	d005      	beq.n	800235e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002352:	4b0a      	ldr	r3, [pc, #40]	@ (800237c <HAL_Delay+0x44>)
 8002354:	781b      	ldrb	r3, [r3, #0]
 8002356:	461a      	mov	r2, r3
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	4413      	add	r3, r2
 800235c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800235e:	bf00      	nop
 8002360:	f7ff ffde 	bl	8002320 <HAL_GetTick>
 8002364:	4602      	mov	r2, r0
 8002366:	68bb      	ldr	r3, [r7, #8]
 8002368:	1ad3      	subs	r3, r2, r3
 800236a:	68fa      	ldr	r2, [r7, #12]
 800236c:	429a      	cmp	r2, r3
 800236e:	d8f7      	bhi.n	8002360 <HAL_Delay+0x28>
  {
  }
}
 8002370:	bf00      	nop
 8002372:	bf00      	nop
 8002374:	3710      	adds	r7, #16
 8002376:	46bd      	mov	sp, r7
 8002378:	bd80      	pop	{r7, pc}
 800237a:	bf00      	nop
 800237c:	2400000c 	.word	0x2400000c

08002380 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8002380:	b480      	push	{r7}
 8002382:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8002384:	4b03      	ldr	r3, [pc, #12]	@ (8002394 <HAL_GetREVID+0x14>)
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	0c1b      	lsrs	r3, r3, #16
}
 800238a:	4618      	mov	r0, r3
 800238c:	46bd      	mov	sp, r7
 800238e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002392:	4770      	bx	lr
 8002394:	5c001000 	.word	0x5c001000

08002398 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002398:	b480      	push	{r7}
 800239a:	b085      	sub	sp, #20
 800239c:	af00      	add	r7, sp, #0
 800239e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	f003 0307 	and.w	r3, r3, #7
 80023a6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80023a8:	4b0b      	ldr	r3, [pc, #44]	@ (80023d8 <__NVIC_SetPriorityGrouping+0x40>)
 80023aa:	68db      	ldr	r3, [r3, #12]
 80023ac:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80023ae:	68ba      	ldr	r2, [r7, #8]
 80023b0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80023b4:	4013      	ands	r3, r2
 80023b6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80023bc:	68bb      	ldr	r3, [r7, #8]
 80023be:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80023c0:	4b06      	ldr	r3, [pc, #24]	@ (80023dc <__NVIC_SetPriorityGrouping+0x44>)
 80023c2:	4313      	orrs	r3, r2
 80023c4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80023c6:	4a04      	ldr	r2, [pc, #16]	@ (80023d8 <__NVIC_SetPriorityGrouping+0x40>)
 80023c8:	68bb      	ldr	r3, [r7, #8]
 80023ca:	60d3      	str	r3, [r2, #12]
}
 80023cc:	bf00      	nop
 80023ce:	3714      	adds	r7, #20
 80023d0:	46bd      	mov	sp, r7
 80023d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023d6:	4770      	bx	lr
 80023d8:	e000ed00 	.word	0xe000ed00
 80023dc:	05fa0000 	.word	0x05fa0000

080023e0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80023e0:	b480      	push	{r7}
 80023e2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80023e4:	4b04      	ldr	r3, [pc, #16]	@ (80023f8 <__NVIC_GetPriorityGrouping+0x18>)
 80023e6:	68db      	ldr	r3, [r3, #12]
 80023e8:	0a1b      	lsrs	r3, r3, #8
 80023ea:	f003 0307 	and.w	r3, r3, #7
}
 80023ee:	4618      	mov	r0, r3
 80023f0:	46bd      	mov	sp, r7
 80023f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023f6:	4770      	bx	lr
 80023f8:	e000ed00 	.word	0xe000ed00

080023fc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80023fc:	b480      	push	{r7}
 80023fe:	b083      	sub	sp, #12
 8002400:	af00      	add	r7, sp, #0
 8002402:	4603      	mov	r3, r0
 8002404:	6039      	str	r1, [r7, #0]
 8002406:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002408:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800240c:	2b00      	cmp	r3, #0
 800240e:	db0a      	blt.n	8002426 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002410:	683b      	ldr	r3, [r7, #0]
 8002412:	b2da      	uxtb	r2, r3
 8002414:	490c      	ldr	r1, [pc, #48]	@ (8002448 <__NVIC_SetPriority+0x4c>)
 8002416:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800241a:	0112      	lsls	r2, r2, #4
 800241c:	b2d2      	uxtb	r2, r2
 800241e:	440b      	add	r3, r1
 8002420:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002424:	e00a      	b.n	800243c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002426:	683b      	ldr	r3, [r7, #0]
 8002428:	b2da      	uxtb	r2, r3
 800242a:	4908      	ldr	r1, [pc, #32]	@ (800244c <__NVIC_SetPriority+0x50>)
 800242c:	88fb      	ldrh	r3, [r7, #6]
 800242e:	f003 030f 	and.w	r3, r3, #15
 8002432:	3b04      	subs	r3, #4
 8002434:	0112      	lsls	r2, r2, #4
 8002436:	b2d2      	uxtb	r2, r2
 8002438:	440b      	add	r3, r1
 800243a:	761a      	strb	r2, [r3, #24]
}
 800243c:	bf00      	nop
 800243e:	370c      	adds	r7, #12
 8002440:	46bd      	mov	sp, r7
 8002442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002446:	4770      	bx	lr
 8002448:	e000e100 	.word	0xe000e100
 800244c:	e000ed00 	.word	0xe000ed00

08002450 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002450:	b480      	push	{r7}
 8002452:	b089      	sub	sp, #36	@ 0x24
 8002454:	af00      	add	r7, sp, #0
 8002456:	60f8      	str	r0, [r7, #12]
 8002458:	60b9      	str	r1, [r7, #8]
 800245a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	f003 0307 	and.w	r3, r3, #7
 8002462:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002464:	69fb      	ldr	r3, [r7, #28]
 8002466:	f1c3 0307 	rsb	r3, r3, #7
 800246a:	2b04      	cmp	r3, #4
 800246c:	bf28      	it	cs
 800246e:	2304      	movcs	r3, #4
 8002470:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002472:	69fb      	ldr	r3, [r7, #28]
 8002474:	3304      	adds	r3, #4
 8002476:	2b06      	cmp	r3, #6
 8002478:	d902      	bls.n	8002480 <NVIC_EncodePriority+0x30>
 800247a:	69fb      	ldr	r3, [r7, #28]
 800247c:	3b03      	subs	r3, #3
 800247e:	e000      	b.n	8002482 <NVIC_EncodePriority+0x32>
 8002480:	2300      	movs	r3, #0
 8002482:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002484:	f04f 32ff 	mov.w	r2, #4294967295
 8002488:	69bb      	ldr	r3, [r7, #24]
 800248a:	fa02 f303 	lsl.w	r3, r2, r3
 800248e:	43da      	mvns	r2, r3
 8002490:	68bb      	ldr	r3, [r7, #8]
 8002492:	401a      	ands	r2, r3
 8002494:	697b      	ldr	r3, [r7, #20]
 8002496:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002498:	f04f 31ff 	mov.w	r1, #4294967295
 800249c:	697b      	ldr	r3, [r7, #20]
 800249e:	fa01 f303 	lsl.w	r3, r1, r3
 80024a2:	43d9      	mvns	r1, r3
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80024a8:	4313      	orrs	r3, r2
         );
}
 80024aa:	4618      	mov	r0, r3
 80024ac:	3724      	adds	r7, #36	@ 0x24
 80024ae:	46bd      	mov	sp, r7
 80024b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024b4:	4770      	bx	lr
	...

080024b8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80024b8:	b580      	push	{r7, lr}
 80024ba:	b082      	sub	sp, #8
 80024bc:	af00      	add	r7, sp, #0
 80024be:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	3b01      	subs	r3, #1
 80024c4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80024c8:	d301      	bcc.n	80024ce <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80024ca:	2301      	movs	r3, #1
 80024cc:	e00f      	b.n	80024ee <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80024ce:	4a0a      	ldr	r2, [pc, #40]	@ (80024f8 <SysTick_Config+0x40>)
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	3b01      	subs	r3, #1
 80024d4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80024d6:	210f      	movs	r1, #15
 80024d8:	f04f 30ff 	mov.w	r0, #4294967295
 80024dc:	f7ff ff8e 	bl	80023fc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80024e0:	4b05      	ldr	r3, [pc, #20]	@ (80024f8 <SysTick_Config+0x40>)
 80024e2:	2200      	movs	r2, #0
 80024e4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80024e6:	4b04      	ldr	r3, [pc, #16]	@ (80024f8 <SysTick_Config+0x40>)
 80024e8:	2207      	movs	r2, #7
 80024ea:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80024ec:	2300      	movs	r3, #0
}
 80024ee:	4618      	mov	r0, r3
 80024f0:	3708      	adds	r7, #8
 80024f2:	46bd      	mov	sp, r7
 80024f4:	bd80      	pop	{r7, pc}
 80024f6:	bf00      	nop
 80024f8:	e000e010 	.word	0xe000e010

080024fc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80024fc:	b580      	push	{r7, lr}
 80024fe:	b082      	sub	sp, #8
 8002500:	af00      	add	r7, sp, #0
 8002502:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002504:	6878      	ldr	r0, [r7, #4]
 8002506:	f7ff ff47 	bl	8002398 <__NVIC_SetPriorityGrouping>
}
 800250a:	bf00      	nop
 800250c:	3708      	adds	r7, #8
 800250e:	46bd      	mov	sp, r7
 8002510:	bd80      	pop	{r7, pc}

08002512 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002512:	b580      	push	{r7, lr}
 8002514:	b086      	sub	sp, #24
 8002516:	af00      	add	r7, sp, #0
 8002518:	4603      	mov	r3, r0
 800251a:	60b9      	str	r1, [r7, #8]
 800251c:	607a      	str	r2, [r7, #4]
 800251e:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002520:	f7ff ff5e 	bl	80023e0 <__NVIC_GetPriorityGrouping>
 8002524:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002526:	687a      	ldr	r2, [r7, #4]
 8002528:	68b9      	ldr	r1, [r7, #8]
 800252a:	6978      	ldr	r0, [r7, #20]
 800252c:	f7ff ff90 	bl	8002450 <NVIC_EncodePriority>
 8002530:	4602      	mov	r2, r0
 8002532:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002536:	4611      	mov	r1, r2
 8002538:	4618      	mov	r0, r3
 800253a:	f7ff ff5f 	bl	80023fc <__NVIC_SetPriority>
}
 800253e:	bf00      	nop
 8002540:	3718      	adds	r7, #24
 8002542:	46bd      	mov	sp, r7
 8002544:	bd80      	pop	{r7, pc}

08002546 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002546:	b580      	push	{r7, lr}
 8002548:	b082      	sub	sp, #8
 800254a:	af00      	add	r7, sp, #0
 800254c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800254e:	6878      	ldr	r0, [r7, #4]
 8002550:	f7ff ffb2 	bl	80024b8 <SysTick_Config>
 8002554:	4603      	mov	r3, r0
}
 8002556:	4618      	mov	r0, r3
 8002558:	3708      	adds	r7, #8
 800255a:	46bd      	mov	sp, r7
 800255c:	bd80      	pop	{r7, pc}
	...

08002560 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8002560:	b480      	push	{r7}
 8002562:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8002564:	f3bf 8f5f 	dmb	sy
}
 8002568:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 800256a:	4b07      	ldr	r3, [pc, #28]	@ (8002588 <HAL_MPU_Disable+0x28>)
 800256c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800256e:	4a06      	ldr	r2, [pc, #24]	@ (8002588 <HAL_MPU_Disable+0x28>)
 8002570:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002574:	6253      	str	r3, [r2, #36]	@ 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8002576:	4b05      	ldr	r3, [pc, #20]	@ (800258c <HAL_MPU_Disable+0x2c>)
 8002578:	2200      	movs	r2, #0
 800257a:	605a      	str	r2, [r3, #4]
}
 800257c:	bf00      	nop
 800257e:	46bd      	mov	sp, r7
 8002580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002584:	4770      	bx	lr
 8002586:	bf00      	nop
 8002588:	e000ed00 	.word	0xe000ed00
 800258c:	e000ed90 	.word	0xe000ed90

08002590 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8002590:	b480      	push	{r7}
 8002592:	b083      	sub	sp, #12
 8002594:	af00      	add	r7, sp, #0
 8002596:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8002598:	4a0b      	ldr	r2, [pc, #44]	@ (80025c8 <HAL_MPU_Enable+0x38>)
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	f043 0301 	orr.w	r3, r3, #1
 80025a0:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 80025a2:	4b0a      	ldr	r3, [pc, #40]	@ (80025cc <HAL_MPU_Enable+0x3c>)
 80025a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025a6:	4a09      	ldr	r2, [pc, #36]	@ (80025cc <HAL_MPU_Enable+0x3c>)
 80025a8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80025ac:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 80025ae:	f3bf 8f4f 	dsb	sy
}
 80025b2:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80025b4:	f3bf 8f6f 	isb	sy
}
 80025b8:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 80025ba:	bf00      	nop
 80025bc:	370c      	adds	r7, #12
 80025be:	46bd      	mov	sp, r7
 80025c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025c4:	4770      	bx	lr
 80025c6:	bf00      	nop
 80025c8:	e000ed90 	.word	0xe000ed90
 80025cc:	e000ed00 	.word	0xe000ed00

080025d0 <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(const MPU_Region_InitTypeDef *MPU_Init)
{
 80025d0:	b480      	push	{r7}
 80025d2:	b083      	sub	sp, #12
 80025d4:	af00      	add	r7, sp, #0
 80025d6:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	785a      	ldrb	r2, [r3, #1]
 80025dc:	4b1b      	ldr	r3, [pc, #108]	@ (800264c <HAL_MPU_ConfigRegion+0x7c>)
 80025de:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 80025e0:	4b1a      	ldr	r3, [pc, #104]	@ (800264c <HAL_MPU_ConfigRegion+0x7c>)
 80025e2:	691b      	ldr	r3, [r3, #16]
 80025e4:	4a19      	ldr	r2, [pc, #100]	@ (800264c <HAL_MPU_ConfigRegion+0x7c>)
 80025e6:	f023 0301 	bic.w	r3, r3, #1
 80025ea:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 80025ec:	4a17      	ldr	r2, [pc, #92]	@ (800264c <HAL_MPU_ConfigRegion+0x7c>)
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	685b      	ldr	r3, [r3, #4]
 80025f2:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	7b1b      	ldrb	r3, [r3, #12]
 80025f8:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	7adb      	ldrb	r3, [r3, #11]
 80025fe:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8002600:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	7a9b      	ldrb	r3, [r3, #10]
 8002606:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8002608:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	7b5b      	ldrb	r3, [r3, #13]
 800260e:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8002610:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	7b9b      	ldrb	r3, [r3, #14]
 8002616:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8002618:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	7bdb      	ldrb	r3, [r3, #15]
 800261e:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8002620:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	7a5b      	ldrb	r3, [r3, #9]
 8002626:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8002628:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	7a1b      	ldrb	r3, [r3, #8]
 800262e:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8002630:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 8002632:	687a      	ldr	r2, [r7, #4]
 8002634:	7812      	ldrb	r2, [r2, #0]
 8002636:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8002638:	4a04      	ldr	r2, [pc, #16]	@ (800264c <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 800263a:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 800263c:	6113      	str	r3, [r2, #16]
}
 800263e:	bf00      	nop
 8002640:	370c      	adds	r7, #12
 8002642:	46bd      	mov	sp, r7
 8002644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002648:	4770      	bx	lr
 800264a:	bf00      	nop
 800264c:	e000ed90 	.word	0xe000ed90

08002650 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *GPIO_Init)
{
 8002650:	b480      	push	{r7}
 8002652:	b089      	sub	sp, #36	@ 0x24
 8002654:	af00      	add	r7, sp, #0
 8002656:	6078      	str	r0, [r7, #4]
 8002658:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800265a:	2300      	movs	r3, #0
 800265c:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800265e:	4b89      	ldr	r3, [pc, #548]	@ (8002884 <HAL_GPIO_Init+0x234>)
 8002660:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8002662:	e194      	b.n	800298e <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8002664:	683b      	ldr	r3, [r7, #0]
 8002666:	681a      	ldr	r2, [r3, #0]
 8002668:	2101      	movs	r1, #1
 800266a:	69fb      	ldr	r3, [r7, #28]
 800266c:	fa01 f303 	lsl.w	r3, r1, r3
 8002670:	4013      	ands	r3, r2
 8002672:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8002674:	693b      	ldr	r3, [r7, #16]
 8002676:	2b00      	cmp	r3, #0
 8002678:	f000 8186 	beq.w	8002988 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800267c:	683b      	ldr	r3, [r7, #0]
 800267e:	685b      	ldr	r3, [r3, #4]
 8002680:	f003 0303 	and.w	r3, r3, #3
 8002684:	2b01      	cmp	r3, #1
 8002686:	d005      	beq.n	8002694 <HAL_GPIO_Init+0x44>
 8002688:	683b      	ldr	r3, [r7, #0]
 800268a:	685b      	ldr	r3, [r3, #4]
 800268c:	f003 0303 	and.w	r3, r3, #3
 8002690:	2b02      	cmp	r3, #2
 8002692:	d130      	bne.n	80026f6 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	689b      	ldr	r3, [r3, #8]
 8002698:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800269a:	69fb      	ldr	r3, [r7, #28]
 800269c:	005b      	lsls	r3, r3, #1
 800269e:	2203      	movs	r2, #3
 80026a0:	fa02 f303 	lsl.w	r3, r2, r3
 80026a4:	43db      	mvns	r3, r3
 80026a6:	69ba      	ldr	r2, [r7, #24]
 80026a8:	4013      	ands	r3, r2
 80026aa:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80026ac:	683b      	ldr	r3, [r7, #0]
 80026ae:	68da      	ldr	r2, [r3, #12]
 80026b0:	69fb      	ldr	r3, [r7, #28]
 80026b2:	005b      	lsls	r3, r3, #1
 80026b4:	fa02 f303 	lsl.w	r3, r2, r3
 80026b8:	69ba      	ldr	r2, [r7, #24]
 80026ba:	4313      	orrs	r3, r2
 80026bc:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	69ba      	ldr	r2, [r7, #24]
 80026c2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	685b      	ldr	r3, [r3, #4]
 80026c8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80026ca:	2201      	movs	r2, #1
 80026cc:	69fb      	ldr	r3, [r7, #28]
 80026ce:	fa02 f303 	lsl.w	r3, r2, r3
 80026d2:	43db      	mvns	r3, r3
 80026d4:	69ba      	ldr	r2, [r7, #24]
 80026d6:	4013      	ands	r3, r2
 80026d8:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80026da:	683b      	ldr	r3, [r7, #0]
 80026dc:	685b      	ldr	r3, [r3, #4]
 80026de:	091b      	lsrs	r3, r3, #4
 80026e0:	f003 0201 	and.w	r2, r3, #1
 80026e4:	69fb      	ldr	r3, [r7, #28]
 80026e6:	fa02 f303 	lsl.w	r3, r2, r3
 80026ea:	69ba      	ldr	r2, [r7, #24]
 80026ec:	4313      	orrs	r3, r2
 80026ee:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	69ba      	ldr	r2, [r7, #24]
 80026f4:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80026f6:	683b      	ldr	r3, [r7, #0]
 80026f8:	685b      	ldr	r3, [r3, #4]
 80026fa:	f003 0303 	and.w	r3, r3, #3
 80026fe:	2b03      	cmp	r3, #3
 8002700:	d017      	beq.n	8002732 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	68db      	ldr	r3, [r3, #12]
 8002706:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002708:	69fb      	ldr	r3, [r7, #28]
 800270a:	005b      	lsls	r3, r3, #1
 800270c:	2203      	movs	r2, #3
 800270e:	fa02 f303 	lsl.w	r3, r2, r3
 8002712:	43db      	mvns	r3, r3
 8002714:	69ba      	ldr	r2, [r7, #24]
 8002716:	4013      	ands	r3, r2
 8002718:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800271a:	683b      	ldr	r3, [r7, #0]
 800271c:	689a      	ldr	r2, [r3, #8]
 800271e:	69fb      	ldr	r3, [r7, #28]
 8002720:	005b      	lsls	r3, r3, #1
 8002722:	fa02 f303 	lsl.w	r3, r2, r3
 8002726:	69ba      	ldr	r2, [r7, #24]
 8002728:	4313      	orrs	r3, r2
 800272a:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	69ba      	ldr	r2, [r7, #24]
 8002730:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002732:	683b      	ldr	r3, [r7, #0]
 8002734:	685b      	ldr	r3, [r3, #4]
 8002736:	f003 0303 	and.w	r3, r3, #3
 800273a:	2b02      	cmp	r3, #2
 800273c:	d123      	bne.n	8002786 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800273e:	69fb      	ldr	r3, [r7, #28]
 8002740:	08da      	lsrs	r2, r3, #3
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	3208      	adds	r2, #8
 8002746:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800274a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800274c:	69fb      	ldr	r3, [r7, #28]
 800274e:	f003 0307 	and.w	r3, r3, #7
 8002752:	009b      	lsls	r3, r3, #2
 8002754:	220f      	movs	r2, #15
 8002756:	fa02 f303 	lsl.w	r3, r2, r3
 800275a:	43db      	mvns	r3, r3
 800275c:	69ba      	ldr	r2, [r7, #24]
 800275e:	4013      	ands	r3, r2
 8002760:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8002762:	683b      	ldr	r3, [r7, #0]
 8002764:	691a      	ldr	r2, [r3, #16]
 8002766:	69fb      	ldr	r3, [r7, #28]
 8002768:	f003 0307 	and.w	r3, r3, #7
 800276c:	009b      	lsls	r3, r3, #2
 800276e:	fa02 f303 	lsl.w	r3, r2, r3
 8002772:	69ba      	ldr	r2, [r7, #24]
 8002774:	4313      	orrs	r3, r2
 8002776:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002778:	69fb      	ldr	r3, [r7, #28]
 800277a:	08da      	lsrs	r2, r3, #3
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	3208      	adds	r2, #8
 8002780:	69b9      	ldr	r1, [r7, #24]
 8002782:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800278c:	69fb      	ldr	r3, [r7, #28]
 800278e:	005b      	lsls	r3, r3, #1
 8002790:	2203      	movs	r2, #3
 8002792:	fa02 f303 	lsl.w	r3, r2, r3
 8002796:	43db      	mvns	r3, r3
 8002798:	69ba      	ldr	r2, [r7, #24]
 800279a:	4013      	ands	r3, r2
 800279c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800279e:	683b      	ldr	r3, [r7, #0]
 80027a0:	685b      	ldr	r3, [r3, #4]
 80027a2:	f003 0203 	and.w	r2, r3, #3
 80027a6:	69fb      	ldr	r3, [r7, #28]
 80027a8:	005b      	lsls	r3, r3, #1
 80027aa:	fa02 f303 	lsl.w	r3, r2, r3
 80027ae:	69ba      	ldr	r2, [r7, #24]
 80027b0:	4313      	orrs	r3, r2
 80027b2:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	69ba      	ldr	r2, [r7, #24]
 80027b8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80027ba:	683b      	ldr	r3, [r7, #0]
 80027bc:	685b      	ldr	r3, [r3, #4]
 80027be:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	f000 80e0 	beq.w	8002988 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80027c8:	4b2f      	ldr	r3, [pc, #188]	@ (8002888 <HAL_GPIO_Init+0x238>)
 80027ca:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80027ce:	4a2e      	ldr	r2, [pc, #184]	@ (8002888 <HAL_GPIO_Init+0x238>)
 80027d0:	f043 0302 	orr.w	r3, r3, #2
 80027d4:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 80027d8:	4b2b      	ldr	r3, [pc, #172]	@ (8002888 <HAL_GPIO_Init+0x238>)
 80027da:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80027de:	f003 0302 	and.w	r3, r3, #2
 80027e2:	60fb      	str	r3, [r7, #12]
 80027e4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80027e6:	4a29      	ldr	r2, [pc, #164]	@ (800288c <HAL_GPIO_Init+0x23c>)
 80027e8:	69fb      	ldr	r3, [r7, #28]
 80027ea:	089b      	lsrs	r3, r3, #2
 80027ec:	3302      	adds	r3, #2
 80027ee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80027f2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80027f4:	69fb      	ldr	r3, [r7, #28]
 80027f6:	f003 0303 	and.w	r3, r3, #3
 80027fa:	009b      	lsls	r3, r3, #2
 80027fc:	220f      	movs	r2, #15
 80027fe:	fa02 f303 	lsl.w	r3, r2, r3
 8002802:	43db      	mvns	r3, r3
 8002804:	69ba      	ldr	r2, [r7, #24]
 8002806:	4013      	ands	r3, r2
 8002808:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	4a20      	ldr	r2, [pc, #128]	@ (8002890 <HAL_GPIO_Init+0x240>)
 800280e:	4293      	cmp	r3, r2
 8002810:	d052      	beq.n	80028b8 <HAL_GPIO_Init+0x268>
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	4a1f      	ldr	r2, [pc, #124]	@ (8002894 <HAL_GPIO_Init+0x244>)
 8002816:	4293      	cmp	r3, r2
 8002818:	d031      	beq.n	800287e <HAL_GPIO_Init+0x22e>
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	4a1e      	ldr	r2, [pc, #120]	@ (8002898 <HAL_GPIO_Init+0x248>)
 800281e:	4293      	cmp	r3, r2
 8002820:	d02b      	beq.n	800287a <HAL_GPIO_Init+0x22a>
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	4a1d      	ldr	r2, [pc, #116]	@ (800289c <HAL_GPIO_Init+0x24c>)
 8002826:	4293      	cmp	r3, r2
 8002828:	d025      	beq.n	8002876 <HAL_GPIO_Init+0x226>
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	4a1c      	ldr	r2, [pc, #112]	@ (80028a0 <HAL_GPIO_Init+0x250>)
 800282e:	4293      	cmp	r3, r2
 8002830:	d01f      	beq.n	8002872 <HAL_GPIO_Init+0x222>
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	4a1b      	ldr	r2, [pc, #108]	@ (80028a4 <HAL_GPIO_Init+0x254>)
 8002836:	4293      	cmp	r3, r2
 8002838:	d019      	beq.n	800286e <HAL_GPIO_Init+0x21e>
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	4a1a      	ldr	r2, [pc, #104]	@ (80028a8 <HAL_GPIO_Init+0x258>)
 800283e:	4293      	cmp	r3, r2
 8002840:	d013      	beq.n	800286a <HAL_GPIO_Init+0x21a>
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	4a19      	ldr	r2, [pc, #100]	@ (80028ac <HAL_GPIO_Init+0x25c>)
 8002846:	4293      	cmp	r3, r2
 8002848:	d00d      	beq.n	8002866 <HAL_GPIO_Init+0x216>
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	4a18      	ldr	r2, [pc, #96]	@ (80028b0 <HAL_GPIO_Init+0x260>)
 800284e:	4293      	cmp	r3, r2
 8002850:	d007      	beq.n	8002862 <HAL_GPIO_Init+0x212>
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	4a17      	ldr	r2, [pc, #92]	@ (80028b4 <HAL_GPIO_Init+0x264>)
 8002856:	4293      	cmp	r3, r2
 8002858:	d101      	bne.n	800285e <HAL_GPIO_Init+0x20e>
 800285a:	2309      	movs	r3, #9
 800285c:	e02d      	b.n	80028ba <HAL_GPIO_Init+0x26a>
 800285e:	230a      	movs	r3, #10
 8002860:	e02b      	b.n	80028ba <HAL_GPIO_Init+0x26a>
 8002862:	2308      	movs	r3, #8
 8002864:	e029      	b.n	80028ba <HAL_GPIO_Init+0x26a>
 8002866:	2307      	movs	r3, #7
 8002868:	e027      	b.n	80028ba <HAL_GPIO_Init+0x26a>
 800286a:	2306      	movs	r3, #6
 800286c:	e025      	b.n	80028ba <HAL_GPIO_Init+0x26a>
 800286e:	2305      	movs	r3, #5
 8002870:	e023      	b.n	80028ba <HAL_GPIO_Init+0x26a>
 8002872:	2304      	movs	r3, #4
 8002874:	e021      	b.n	80028ba <HAL_GPIO_Init+0x26a>
 8002876:	2303      	movs	r3, #3
 8002878:	e01f      	b.n	80028ba <HAL_GPIO_Init+0x26a>
 800287a:	2302      	movs	r3, #2
 800287c:	e01d      	b.n	80028ba <HAL_GPIO_Init+0x26a>
 800287e:	2301      	movs	r3, #1
 8002880:	e01b      	b.n	80028ba <HAL_GPIO_Init+0x26a>
 8002882:	bf00      	nop
 8002884:	58000080 	.word	0x58000080
 8002888:	58024400 	.word	0x58024400
 800288c:	58000400 	.word	0x58000400
 8002890:	58020000 	.word	0x58020000
 8002894:	58020400 	.word	0x58020400
 8002898:	58020800 	.word	0x58020800
 800289c:	58020c00 	.word	0x58020c00
 80028a0:	58021000 	.word	0x58021000
 80028a4:	58021400 	.word	0x58021400
 80028a8:	58021800 	.word	0x58021800
 80028ac:	58021c00 	.word	0x58021c00
 80028b0:	58022000 	.word	0x58022000
 80028b4:	58022400 	.word	0x58022400
 80028b8:	2300      	movs	r3, #0
 80028ba:	69fa      	ldr	r2, [r7, #28]
 80028bc:	f002 0203 	and.w	r2, r2, #3
 80028c0:	0092      	lsls	r2, r2, #2
 80028c2:	4093      	lsls	r3, r2
 80028c4:	69ba      	ldr	r2, [r7, #24]
 80028c6:	4313      	orrs	r3, r2
 80028c8:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80028ca:	4938      	ldr	r1, [pc, #224]	@ (80029ac <HAL_GPIO_Init+0x35c>)
 80028cc:	69fb      	ldr	r3, [r7, #28]
 80028ce:	089b      	lsrs	r3, r3, #2
 80028d0:	3302      	adds	r3, #2
 80028d2:	69ba      	ldr	r2, [r7, #24]
 80028d4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80028d8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80028e0:	693b      	ldr	r3, [r7, #16]
 80028e2:	43db      	mvns	r3, r3
 80028e4:	69ba      	ldr	r2, [r7, #24]
 80028e6:	4013      	ands	r3, r2
 80028e8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80028ea:	683b      	ldr	r3, [r7, #0]
 80028ec:	685b      	ldr	r3, [r3, #4]
 80028ee:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d003      	beq.n	80028fe <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 80028f6:	69ba      	ldr	r2, [r7, #24]
 80028f8:	693b      	ldr	r3, [r7, #16]
 80028fa:	4313      	orrs	r3, r2
 80028fc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 80028fe:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002902:	69bb      	ldr	r3, [r7, #24]
 8002904:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8002906:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800290a:	685b      	ldr	r3, [r3, #4]
 800290c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800290e:	693b      	ldr	r3, [r7, #16]
 8002910:	43db      	mvns	r3, r3
 8002912:	69ba      	ldr	r2, [r7, #24]
 8002914:	4013      	ands	r3, r2
 8002916:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002918:	683b      	ldr	r3, [r7, #0]
 800291a:	685b      	ldr	r3, [r3, #4]
 800291c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002920:	2b00      	cmp	r3, #0
 8002922:	d003      	beq.n	800292c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8002924:	69ba      	ldr	r2, [r7, #24]
 8002926:	693b      	ldr	r3, [r7, #16]
 8002928:	4313      	orrs	r3, r2
 800292a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 800292c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002930:	69bb      	ldr	r3, [r7, #24]
 8002932:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8002934:	697b      	ldr	r3, [r7, #20]
 8002936:	685b      	ldr	r3, [r3, #4]
 8002938:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800293a:	693b      	ldr	r3, [r7, #16]
 800293c:	43db      	mvns	r3, r3
 800293e:	69ba      	ldr	r2, [r7, #24]
 8002940:	4013      	ands	r3, r2
 8002942:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002944:	683b      	ldr	r3, [r7, #0]
 8002946:	685b      	ldr	r3, [r3, #4]
 8002948:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800294c:	2b00      	cmp	r3, #0
 800294e:	d003      	beq.n	8002958 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8002950:	69ba      	ldr	r2, [r7, #24]
 8002952:	693b      	ldr	r3, [r7, #16]
 8002954:	4313      	orrs	r3, r2
 8002956:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8002958:	697b      	ldr	r3, [r7, #20]
 800295a:	69ba      	ldr	r2, [r7, #24]
 800295c:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 800295e:	697b      	ldr	r3, [r7, #20]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002964:	693b      	ldr	r3, [r7, #16]
 8002966:	43db      	mvns	r3, r3
 8002968:	69ba      	ldr	r2, [r7, #24]
 800296a:	4013      	ands	r3, r2
 800296c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800296e:	683b      	ldr	r3, [r7, #0]
 8002970:	685b      	ldr	r3, [r3, #4]
 8002972:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002976:	2b00      	cmp	r3, #0
 8002978:	d003      	beq.n	8002982 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 800297a:	69ba      	ldr	r2, [r7, #24]
 800297c:	693b      	ldr	r3, [r7, #16]
 800297e:	4313      	orrs	r3, r2
 8002980:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8002982:	697b      	ldr	r3, [r7, #20]
 8002984:	69ba      	ldr	r2, [r7, #24]
 8002986:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8002988:	69fb      	ldr	r3, [r7, #28]
 800298a:	3301      	adds	r3, #1
 800298c:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800298e:	683b      	ldr	r3, [r7, #0]
 8002990:	681a      	ldr	r2, [r3, #0]
 8002992:	69fb      	ldr	r3, [r7, #28]
 8002994:	fa22 f303 	lsr.w	r3, r2, r3
 8002998:	2b00      	cmp	r3, #0
 800299a:	f47f ae63 	bne.w	8002664 <HAL_GPIO_Init+0x14>
  }
}
 800299e:	bf00      	nop
 80029a0:	bf00      	nop
 80029a2:	3724      	adds	r7, #36	@ 0x24
 80029a4:	46bd      	mov	sp, r7
 80029a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029aa:	4770      	bx	lr
 80029ac:	58000400 	.word	0x58000400

080029b0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80029b0:	b480      	push	{r7}
 80029b2:	b083      	sub	sp, #12
 80029b4:	af00      	add	r7, sp, #0
 80029b6:	6078      	str	r0, [r7, #4]
 80029b8:	460b      	mov	r3, r1
 80029ba:	807b      	strh	r3, [r7, #2]
 80029bc:	4613      	mov	r3, r2
 80029be:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80029c0:	787b      	ldrb	r3, [r7, #1]
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d003      	beq.n	80029ce <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80029c6:	887a      	ldrh	r2, [r7, #2]
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 80029cc:	e003      	b.n	80029d6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80029ce:	887b      	ldrh	r3, [r7, #2]
 80029d0:	041a      	lsls	r2, r3, #16
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	619a      	str	r2, [r3, #24]
}
 80029d6:	bf00      	nop
 80029d8:	370c      	adds	r7, #12
 80029da:	46bd      	mov	sp, r7
 80029dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029e0:	4770      	bx	lr
	...

080029e4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80029e4:	b580      	push	{r7, lr}
 80029e6:	b082      	sub	sp, #8
 80029e8:	af00      	add	r7, sp, #0
 80029ea:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d101      	bne.n	80029f6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80029f2:	2301      	movs	r3, #1
 80029f4:	e08b      	b.n	8002b0e <HAL_I2C_Init+0x12a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80029fc:	b2db      	uxtb	r3, r3
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d106      	bne.n	8002a10 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	2200      	movs	r2, #0
 8002a06:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002a0a:	6878      	ldr	r0, [r7, #4]
 8002a0c:	f7ff f8d0 	bl	8001bb0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	2224      	movs	r2, #36	@ 0x24
 8002a14:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	681a      	ldr	r2, [r3, #0]
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	f022 0201 	bic.w	r2, r2, #1
 8002a26:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	685a      	ldr	r2, [r3, #4]
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002a34:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	689a      	ldr	r2, [r3, #8]
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002a44:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	68db      	ldr	r3, [r3, #12]
 8002a4a:	2b01      	cmp	r3, #1
 8002a4c:	d107      	bne.n	8002a5e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	689a      	ldr	r2, [r3, #8]
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002a5a:	609a      	str	r2, [r3, #8]
 8002a5c:	e006      	b.n	8002a6c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	689a      	ldr	r2, [r3, #8]
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8002a6a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	68db      	ldr	r3, [r3, #12]
 8002a70:	2b02      	cmp	r3, #2
 8002a72:	d108      	bne.n	8002a86 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	685a      	ldr	r2, [r3, #4]
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002a82:	605a      	str	r2, [r3, #4]
 8002a84:	e007      	b.n	8002a96 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	685a      	ldr	r2, [r3, #4]
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002a94:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	6859      	ldr	r1, [r3, #4]
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	681a      	ldr	r2, [r3, #0]
 8002aa0:	4b1d      	ldr	r3, [pc, #116]	@ (8002b18 <HAL_I2C_Init+0x134>)
 8002aa2:	430b      	orrs	r3, r1
 8002aa4:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	68da      	ldr	r2, [r3, #12]
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002ab4:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	691a      	ldr	r2, [r3, #16]
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	695b      	ldr	r3, [r3, #20]
 8002abe:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	699b      	ldr	r3, [r3, #24]
 8002ac6:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	430a      	orrs	r2, r1
 8002ace:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	69d9      	ldr	r1, [r3, #28]
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	6a1a      	ldr	r2, [r3, #32]
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	430a      	orrs	r2, r1
 8002ade:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	681a      	ldr	r2, [r3, #0]
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	f042 0201 	orr.w	r2, r2, #1
 8002aee:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	2200      	movs	r2, #0
 8002af4:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	2220      	movs	r2, #32
 8002afa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	2200      	movs	r2, #0
 8002b02:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	2200      	movs	r2, #0
 8002b08:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8002b0c:	2300      	movs	r3, #0
}
 8002b0e:	4618      	mov	r0, r3
 8002b10:	3708      	adds	r7, #8
 8002b12:	46bd      	mov	sp, r7
 8002b14:	bd80      	pop	{r7, pc}
 8002b16:	bf00      	nop
 8002b18:	02008000 	.word	0x02008000

08002b1c <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002b1c:	b580      	push	{r7, lr}
 8002b1e:	b088      	sub	sp, #32
 8002b20:	af02      	add	r7, sp, #8
 8002b22:	60f8      	str	r0, [r7, #12]
 8002b24:	4608      	mov	r0, r1
 8002b26:	4611      	mov	r1, r2
 8002b28:	461a      	mov	r2, r3
 8002b2a:	4603      	mov	r3, r0
 8002b2c:	817b      	strh	r3, [r7, #10]
 8002b2e:	460b      	mov	r3, r1
 8002b30:	813b      	strh	r3, [r7, #8]
 8002b32:	4613      	mov	r3, r2
 8002b34:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002b3c:	b2db      	uxtb	r3, r3
 8002b3e:	2b20      	cmp	r3, #32
 8002b40:	f040 80f9 	bne.w	8002d36 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002b44:	6a3b      	ldr	r3, [r7, #32]
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d002      	beq.n	8002b50 <HAL_I2C_Mem_Write+0x34>
 8002b4a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d105      	bne.n	8002b5c <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002b56:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8002b58:	2301      	movs	r3, #1
 8002b5a:	e0ed      	b.n	8002d38 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002b62:	2b01      	cmp	r3, #1
 8002b64:	d101      	bne.n	8002b6a <HAL_I2C_Mem_Write+0x4e>
 8002b66:	2302      	movs	r3, #2
 8002b68:	e0e6      	b.n	8002d38 <HAL_I2C_Mem_Write+0x21c>
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	2201      	movs	r2, #1
 8002b6e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002b72:	f7ff fbd5 	bl	8002320 <HAL_GetTick>
 8002b76:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002b78:	697b      	ldr	r3, [r7, #20]
 8002b7a:	9300      	str	r3, [sp, #0]
 8002b7c:	2319      	movs	r3, #25
 8002b7e:	2201      	movs	r2, #1
 8002b80:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8002b84:	68f8      	ldr	r0, [r7, #12]
 8002b86:	f000 facf 	bl	8003128 <I2C_WaitOnFlagUntilTimeout>
 8002b8a:	4603      	mov	r3, r0
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d001      	beq.n	8002b94 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8002b90:	2301      	movs	r3, #1
 8002b92:	e0d1      	b.n	8002d38 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	2221      	movs	r2, #33	@ 0x21
 8002b98:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	2240      	movs	r2, #64	@ 0x40
 8002ba0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	2200      	movs	r2, #0
 8002ba8:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	6a3a      	ldr	r2, [r7, #32]
 8002bae:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8002bb4:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	2200      	movs	r2, #0
 8002bba:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002bbc:	88f8      	ldrh	r0, [r7, #6]
 8002bbe:	893a      	ldrh	r2, [r7, #8]
 8002bc0:	8979      	ldrh	r1, [r7, #10]
 8002bc2:	697b      	ldr	r3, [r7, #20]
 8002bc4:	9301      	str	r3, [sp, #4]
 8002bc6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002bc8:	9300      	str	r3, [sp, #0]
 8002bca:	4603      	mov	r3, r0
 8002bcc:	68f8      	ldr	r0, [r7, #12]
 8002bce:	f000 f9df 	bl	8002f90 <I2C_RequestMemoryWrite>
 8002bd2:	4603      	mov	r3, r0
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	d005      	beq.n	8002be4 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	2200      	movs	r2, #0
 8002bdc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8002be0:	2301      	movs	r3, #1
 8002be2:	e0a9      	b.n	8002d38 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002be8:	b29b      	uxth	r3, r3
 8002bea:	2bff      	cmp	r3, #255	@ 0xff
 8002bec:	d90e      	bls.n	8002c0c <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	22ff      	movs	r2, #255	@ 0xff
 8002bf2:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002bf8:	b2da      	uxtb	r2, r3
 8002bfa:	8979      	ldrh	r1, [r7, #10]
 8002bfc:	2300      	movs	r3, #0
 8002bfe:	9300      	str	r3, [sp, #0]
 8002c00:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002c04:	68f8      	ldr	r0, [r7, #12]
 8002c06:	f000 fc53 	bl	80034b0 <I2C_TransferConfig>
 8002c0a:	e00f      	b.n	8002c2c <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002c10:	b29a      	uxth	r2, r3
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002c1a:	b2da      	uxtb	r2, r3
 8002c1c:	8979      	ldrh	r1, [r7, #10]
 8002c1e:	2300      	movs	r3, #0
 8002c20:	9300      	str	r3, [sp, #0]
 8002c22:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002c26:	68f8      	ldr	r0, [r7, #12]
 8002c28:	f000 fc42 	bl	80034b0 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002c2c:	697a      	ldr	r2, [r7, #20]
 8002c2e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002c30:	68f8      	ldr	r0, [r7, #12]
 8002c32:	f000 fad2 	bl	80031da <I2C_WaitOnTXISFlagUntilTimeout>
 8002c36:	4603      	mov	r3, r0
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	d001      	beq.n	8002c40 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8002c3c:	2301      	movs	r3, #1
 8002c3e:	e07b      	b.n	8002d38 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c44:	781a      	ldrb	r2, [r3, #0]
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c50:	1c5a      	adds	r2, r3, #1
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002c5a:	b29b      	uxth	r3, r3
 8002c5c:	3b01      	subs	r3, #1
 8002c5e:	b29a      	uxth	r2, r3
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002c68:	3b01      	subs	r3, #1
 8002c6a:	b29a      	uxth	r2, r3
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002c74:	b29b      	uxth	r3, r3
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d034      	beq.n	8002ce4 <HAL_I2C_Mem_Write+0x1c8>
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d130      	bne.n	8002ce4 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002c82:	697b      	ldr	r3, [r7, #20]
 8002c84:	9300      	str	r3, [sp, #0]
 8002c86:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002c88:	2200      	movs	r2, #0
 8002c8a:	2180      	movs	r1, #128	@ 0x80
 8002c8c:	68f8      	ldr	r0, [r7, #12]
 8002c8e:	f000 fa4b 	bl	8003128 <I2C_WaitOnFlagUntilTimeout>
 8002c92:	4603      	mov	r3, r0
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	d001      	beq.n	8002c9c <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8002c98:	2301      	movs	r3, #1
 8002c9a:	e04d      	b.n	8002d38 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002ca0:	b29b      	uxth	r3, r3
 8002ca2:	2bff      	cmp	r3, #255	@ 0xff
 8002ca4:	d90e      	bls.n	8002cc4 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	22ff      	movs	r2, #255	@ 0xff
 8002caa:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002cb0:	b2da      	uxtb	r2, r3
 8002cb2:	8979      	ldrh	r1, [r7, #10]
 8002cb4:	2300      	movs	r3, #0
 8002cb6:	9300      	str	r3, [sp, #0]
 8002cb8:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002cbc:	68f8      	ldr	r0, [r7, #12]
 8002cbe:	f000 fbf7 	bl	80034b0 <I2C_TransferConfig>
 8002cc2:	e00f      	b.n	8002ce4 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002cc8:	b29a      	uxth	r2, r3
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002cd2:	b2da      	uxtb	r2, r3
 8002cd4:	8979      	ldrh	r1, [r7, #10]
 8002cd6:	2300      	movs	r3, #0
 8002cd8:	9300      	str	r3, [sp, #0]
 8002cda:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002cde:	68f8      	ldr	r0, [r7, #12]
 8002ce0:	f000 fbe6 	bl	80034b0 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002ce8:	b29b      	uxth	r3, r3
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d19e      	bne.n	8002c2c <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002cee:	697a      	ldr	r2, [r7, #20]
 8002cf0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002cf2:	68f8      	ldr	r0, [r7, #12]
 8002cf4:	f000 fab8 	bl	8003268 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002cf8:	4603      	mov	r3, r0
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d001      	beq.n	8002d02 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8002cfe:	2301      	movs	r3, #1
 8002d00:	e01a      	b.n	8002d38 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	2220      	movs	r2, #32
 8002d08:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	6859      	ldr	r1, [r3, #4]
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	681a      	ldr	r2, [r3, #0]
 8002d14:	4b0a      	ldr	r3, [pc, #40]	@ (8002d40 <HAL_I2C_Mem_Write+0x224>)
 8002d16:	400b      	ands	r3, r1
 8002d18:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	2220      	movs	r2, #32
 8002d1e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	2200      	movs	r2, #0
 8002d26:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	2200      	movs	r2, #0
 8002d2e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8002d32:	2300      	movs	r3, #0
 8002d34:	e000      	b.n	8002d38 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8002d36:	2302      	movs	r3, #2
  }
}
 8002d38:	4618      	mov	r0, r3
 8002d3a:	3718      	adds	r7, #24
 8002d3c:	46bd      	mov	sp, r7
 8002d3e:	bd80      	pop	{r7, pc}
 8002d40:	fe00e800 	.word	0xfe00e800

08002d44 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002d44:	b580      	push	{r7, lr}
 8002d46:	b088      	sub	sp, #32
 8002d48:	af02      	add	r7, sp, #8
 8002d4a:	60f8      	str	r0, [r7, #12]
 8002d4c:	4608      	mov	r0, r1
 8002d4e:	4611      	mov	r1, r2
 8002d50:	461a      	mov	r2, r3
 8002d52:	4603      	mov	r3, r0
 8002d54:	817b      	strh	r3, [r7, #10]
 8002d56:	460b      	mov	r3, r1
 8002d58:	813b      	strh	r3, [r7, #8]
 8002d5a:	4613      	mov	r3, r2
 8002d5c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002d64:	b2db      	uxtb	r3, r3
 8002d66:	2b20      	cmp	r3, #32
 8002d68:	f040 80fd 	bne.w	8002f66 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8002d6c:	6a3b      	ldr	r3, [r7, #32]
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d002      	beq.n	8002d78 <HAL_I2C_Mem_Read+0x34>
 8002d72:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	d105      	bne.n	8002d84 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002d7e:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8002d80:	2301      	movs	r3, #1
 8002d82:	e0f1      	b.n	8002f68 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002d8a:	2b01      	cmp	r3, #1
 8002d8c:	d101      	bne.n	8002d92 <HAL_I2C_Mem_Read+0x4e>
 8002d8e:	2302      	movs	r3, #2
 8002d90:	e0ea      	b.n	8002f68 <HAL_I2C_Mem_Read+0x224>
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	2201      	movs	r2, #1
 8002d96:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002d9a:	f7ff fac1 	bl	8002320 <HAL_GetTick>
 8002d9e:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002da0:	697b      	ldr	r3, [r7, #20]
 8002da2:	9300      	str	r3, [sp, #0]
 8002da4:	2319      	movs	r3, #25
 8002da6:	2201      	movs	r2, #1
 8002da8:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8002dac:	68f8      	ldr	r0, [r7, #12]
 8002dae:	f000 f9bb 	bl	8003128 <I2C_WaitOnFlagUntilTimeout>
 8002db2:	4603      	mov	r3, r0
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d001      	beq.n	8002dbc <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8002db8:	2301      	movs	r3, #1
 8002dba:	e0d5      	b.n	8002f68 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	2222      	movs	r2, #34	@ 0x22
 8002dc0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	2240      	movs	r2, #64	@ 0x40
 8002dc8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	2200      	movs	r2, #0
 8002dd0:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	6a3a      	ldr	r2, [r7, #32]
 8002dd6:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8002ddc:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	2200      	movs	r2, #0
 8002de2:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002de4:	88f8      	ldrh	r0, [r7, #6]
 8002de6:	893a      	ldrh	r2, [r7, #8]
 8002de8:	8979      	ldrh	r1, [r7, #10]
 8002dea:	697b      	ldr	r3, [r7, #20]
 8002dec:	9301      	str	r3, [sp, #4]
 8002dee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002df0:	9300      	str	r3, [sp, #0]
 8002df2:	4603      	mov	r3, r0
 8002df4:	68f8      	ldr	r0, [r7, #12]
 8002df6:	f000 f91f 	bl	8003038 <I2C_RequestMemoryRead>
 8002dfa:	4603      	mov	r3, r0
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d005      	beq.n	8002e0c <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	2200      	movs	r2, #0
 8002e04:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8002e08:	2301      	movs	r3, #1
 8002e0a:	e0ad      	b.n	8002f68 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002e10:	b29b      	uxth	r3, r3
 8002e12:	2bff      	cmp	r3, #255	@ 0xff
 8002e14:	d90e      	bls.n	8002e34 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	22ff      	movs	r2, #255	@ 0xff
 8002e1a:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002e20:	b2da      	uxtb	r2, r3
 8002e22:	8979      	ldrh	r1, [r7, #10]
 8002e24:	4b52      	ldr	r3, [pc, #328]	@ (8002f70 <HAL_I2C_Mem_Read+0x22c>)
 8002e26:	9300      	str	r3, [sp, #0]
 8002e28:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002e2c:	68f8      	ldr	r0, [r7, #12]
 8002e2e:	f000 fb3f 	bl	80034b0 <I2C_TransferConfig>
 8002e32:	e00f      	b.n	8002e54 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002e38:	b29a      	uxth	r2, r3
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002e42:	b2da      	uxtb	r2, r3
 8002e44:	8979      	ldrh	r1, [r7, #10]
 8002e46:	4b4a      	ldr	r3, [pc, #296]	@ (8002f70 <HAL_I2C_Mem_Read+0x22c>)
 8002e48:	9300      	str	r3, [sp, #0]
 8002e4a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002e4e:	68f8      	ldr	r0, [r7, #12]
 8002e50:	f000 fb2e 	bl	80034b0 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8002e54:	697b      	ldr	r3, [r7, #20]
 8002e56:	9300      	str	r3, [sp, #0]
 8002e58:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002e5a:	2200      	movs	r2, #0
 8002e5c:	2104      	movs	r1, #4
 8002e5e:	68f8      	ldr	r0, [r7, #12]
 8002e60:	f000 f962 	bl	8003128 <I2C_WaitOnFlagUntilTimeout>
 8002e64:	4603      	mov	r3, r0
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d001      	beq.n	8002e6e <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8002e6a:	2301      	movs	r3, #1
 8002e6c:	e07c      	b.n	8002f68 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e78:	b2d2      	uxtb	r2, r2
 8002e7a:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e80:	1c5a      	adds	r2, r3, #1
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002e8a:	3b01      	subs	r3, #1
 8002e8c:	b29a      	uxth	r2, r3
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002e96:	b29b      	uxth	r3, r3
 8002e98:	3b01      	subs	r3, #1
 8002e9a:	b29a      	uxth	r2, r3
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002ea4:	b29b      	uxth	r3, r3
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d034      	beq.n	8002f14 <HAL_I2C_Mem_Read+0x1d0>
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d130      	bne.n	8002f14 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002eb2:	697b      	ldr	r3, [r7, #20]
 8002eb4:	9300      	str	r3, [sp, #0]
 8002eb6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002eb8:	2200      	movs	r2, #0
 8002eba:	2180      	movs	r1, #128	@ 0x80
 8002ebc:	68f8      	ldr	r0, [r7, #12]
 8002ebe:	f000 f933 	bl	8003128 <I2C_WaitOnFlagUntilTimeout>
 8002ec2:	4603      	mov	r3, r0
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	d001      	beq.n	8002ecc <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8002ec8:	2301      	movs	r3, #1
 8002eca:	e04d      	b.n	8002f68 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002ed0:	b29b      	uxth	r3, r3
 8002ed2:	2bff      	cmp	r3, #255	@ 0xff
 8002ed4:	d90e      	bls.n	8002ef4 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	22ff      	movs	r2, #255	@ 0xff
 8002eda:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002ee0:	b2da      	uxtb	r2, r3
 8002ee2:	8979      	ldrh	r1, [r7, #10]
 8002ee4:	2300      	movs	r3, #0
 8002ee6:	9300      	str	r3, [sp, #0]
 8002ee8:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002eec:	68f8      	ldr	r0, [r7, #12]
 8002eee:	f000 fadf 	bl	80034b0 <I2C_TransferConfig>
 8002ef2:	e00f      	b.n	8002f14 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002ef8:	b29a      	uxth	r2, r3
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002f02:	b2da      	uxtb	r2, r3
 8002f04:	8979      	ldrh	r1, [r7, #10]
 8002f06:	2300      	movs	r3, #0
 8002f08:	9300      	str	r3, [sp, #0]
 8002f0a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002f0e:	68f8      	ldr	r0, [r7, #12]
 8002f10:	f000 face 	bl	80034b0 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002f18:	b29b      	uxth	r3, r3
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d19a      	bne.n	8002e54 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002f1e:	697a      	ldr	r2, [r7, #20]
 8002f20:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002f22:	68f8      	ldr	r0, [r7, #12]
 8002f24:	f000 f9a0 	bl	8003268 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002f28:	4603      	mov	r3, r0
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d001      	beq.n	8002f32 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8002f2e:	2301      	movs	r3, #1
 8002f30:	e01a      	b.n	8002f68 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	2220      	movs	r2, #32
 8002f38:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	6859      	ldr	r1, [r3, #4]
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	681a      	ldr	r2, [r3, #0]
 8002f44:	4b0b      	ldr	r3, [pc, #44]	@ (8002f74 <HAL_I2C_Mem_Read+0x230>)
 8002f46:	400b      	ands	r3, r1
 8002f48:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	2220      	movs	r2, #32
 8002f4e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	2200      	movs	r2, #0
 8002f56:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	2200      	movs	r2, #0
 8002f5e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8002f62:	2300      	movs	r3, #0
 8002f64:	e000      	b.n	8002f68 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8002f66:	2302      	movs	r3, #2
  }
}
 8002f68:	4618      	mov	r0, r3
 8002f6a:	3718      	adds	r7, #24
 8002f6c:	46bd      	mov	sp, r7
 8002f6e:	bd80      	pop	{r7, pc}
 8002f70:	80002400 	.word	0x80002400
 8002f74:	fe00e800 	.word	0xfe00e800

08002f78 <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
  * @retval I2C Error Code
  */
uint32_t HAL_I2C_GetError(const I2C_HandleTypeDef *hi2c)
{
 8002f78:	b480      	push	{r7}
 8002f7a:	b083      	sub	sp, #12
 8002f7c:	af00      	add	r7, sp, #0
 8002f7e:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
}
 8002f84:	4618      	mov	r0, r3
 8002f86:	370c      	adds	r7, #12
 8002f88:	46bd      	mov	sp, r7
 8002f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f8e:	4770      	bx	lr

08002f90 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8002f90:	b580      	push	{r7, lr}
 8002f92:	b086      	sub	sp, #24
 8002f94:	af02      	add	r7, sp, #8
 8002f96:	60f8      	str	r0, [r7, #12]
 8002f98:	4608      	mov	r0, r1
 8002f9a:	4611      	mov	r1, r2
 8002f9c:	461a      	mov	r2, r3
 8002f9e:	4603      	mov	r3, r0
 8002fa0:	817b      	strh	r3, [r7, #10]
 8002fa2:	460b      	mov	r3, r1
 8002fa4:	813b      	strh	r3, [r7, #8]
 8002fa6:	4613      	mov	r3, r2
 8002fa8:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8002faa:	88fb      	ldrh	r3, [r7, #6]
 8002fac:	b2da      	uxtb	r2, r3
 8002fae:	8979      	ldrh	r1, [r7, #10]
 8002fb0:	4b20      	ldr	r3, [pc, #128]	@ (8003034 <I2C_RequestMemoryWrite+0xa4>)
 8002fb2:	9300      	str	r3, [sp, #0]
 8002fb4:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002fb8:	68f8      	ldr	r0, [r7, #12]
 8002fba:	f000 fa79 	bl	80034b0 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002fbe:	69fa      	ldr	r2, [r7, #28]
 8002fc0:	69b9      	ldr	r1, [r7, #24]
 8002fc2:	68f8      	ldr	r0, [r7, #12]
 8002fc4:	f000 f909 	bl	80031da <I2C_WaitOnTXISFlagUntilTimeout>
 8002fc8:	4603      	mov	r3, r0
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d001      	beq.n	8002fd2 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8002fce:	2301      	movs	r3, #1
 8002fd0:	e02c      	b.n	800302c <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002fd2:	88fb      	ldrh	r3, [r7, #6]
 8002fd4:	2b01      	cmp	r3, #1
 8002fd6:	d105      	bne.n	8002fe4 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002fd8:	893b      	ldrh	r3, [r7, #8]
 8002fda:	b2da      	uxtb	r2, r3
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	629a      	str	r2, [r3, #40]	@ 0x28
 8002fe2:	e015      	b.n	8003010 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8002fe4:	893b      	ldrh	r3, [r7, #8]
 8002fe6:	0a1b      	lsrs	r3, r3, #8
 8002fe8:	b29b      	uxth	r3, r3
 8002fea:	b2da      	uxtb	r2, r3
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002ff2:	69fa      	ldr	r2, [r7, #28]
 8002ff4:	69b9      	ldr	r1, [r7, #24]
 8002ff6:	68f8      	ldr	r0, [r7, #12]
 8002ff8:	f000 f8ef 	bl	80031da <I2C_WaitOnTXISFlagUntilTimeout>
 8002ffc:	4603      	mov	r3, r0
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d001      	beq.n	8003006 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8003002:	2301      	movs	r3, #1
 8003004:	e012      	b.n	800302c <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003006:	893b      	ldrh	r3, [r7, #8]
 8003008:	b2da      	uxtb	r2, r3
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8003010:	69fb      	ldr	r3, [r7, #28]
 8003012:	9300      	str	r3, [sp, #0]
 8003014:	69bb      	ldr	r3, [r7, #24]
 8003016:	2200      	movs	r2, #0
 8003018:	2180      	movs	r1, #128	@ 0x80
 800301a:	68f8      	ldr	r0, [r7, #12]
 800301c:	f000 f884 	bl	8003128 <I2C_WaitOnFlagUntilTimeout>
 8003020:	4603      	mov	r3, r0
 8003022:	2b00      	cmp	r3, #0
 8003024:	d001      	beq.n	800302a <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8003026:	2301      	movs	r3, #1
 8003028:	e000      	b.n	800302c <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 800302a:	2300      	movs	r3, #0
}
 800302c:	4618      	mov	r0, r3
 800302e:	3710      	adds	r7, #16
 8003030:	46bd      	mov	sp, r7
 8003032:	bd80      	pop	{r7, pc}
 8003034:	80002000 	.word	0x80002000

08003038 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8003038:	b580      	push	{r7, lr}
 800303a:	b086      	sub	sp, #24
 800303c:	af02      	add	r7, sp, #8
 800303e:	60f8      	str	r0, [r7, #12]
 8003040:	4608      	mov	r0, r1
 8003042:	4611      	mov	r1, r2
 8003044:	461a      	mov	r2, r3
 8003046:	4603      	mov	r3, r0
 8003048:	817b      	strh	r3, [r7, #10]
 800304a:	460b      	mov	r3, r1
 800304c:	813b      	strh	r3, [r7, #8]
 800304e:	4613      	mov	r3, r2
 8003050:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8003052:	88fb      	ldrh	r3, [r7, #6]
 8003054:	b2da      	uxtb	r2, r3
 8003056:	8979      	ldrh	r1, [r7, #10]
 8003058:	4b20      	ldr	r3, [pc, #128]	@ (80030dc <I2C_RequestMemoryRead+0xa4>)
 800305a:	9300      	str	r3, [sp, #0]
 800305c:	2300      	movs	r3, #0
 800305e:	68f8      	ldr	r0, [r7, #12]
 8003060:	f000 fa26 	bl	80034b0 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003064:	69fa      	ldr	r2, [r7, #28]
 8003066:	69b9      	ldr	r1, [r7, #24]
 8003068:	68f8      	ldr	r0, [r7, #12]
 800306a:	f000 f8b6 	bl	80031da <I2C_WaitOnTXISFlagUntilTimeout>
 800306e:	4603      	mov	r3, r0
 8003070:	2b00      	cmp	r3, #0
 8003072:	d001      	beq.n	8003078 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8003074:	2301      	movs	r3, #1
 8003076:	e02c      	b.n	80030d2 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003078:	88fb      	ldrh	r3, [r7, #6]
 800307a:	2b01      	cmp	r3, #1
 800307c:	d105      	bne.n	800308a <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800307e:	893b      	ldrh	r3, [r7, #8]
 8003080:	b2da      	uxtb	r2, r3
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	629a      	str	r2, [r3, #40]	@ 0x28
 8003088:	e015      	b.n	80030b6 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800308a:	893b      	ldrh	r3, [r7, #8]
 800308c:	0a1b      	lsrs	r3, r3, #8
 800308e:	b29b      	uxth	r3, r3
 8003090:	b2da      	uxtb	r2, r3
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003098:	69fa      	ldr	r2, [r7, #28]
 800309a:	69b9      	ldr	r1, [r7, #24]
 800309c:	68f8      	ldr	r0, [r7, #12]
 800309e:	f000 f89c 	bl	80031da <I2C_WaitOnTXISFlagUntilTimeout>
 80030a2:	4603      	mov	r3, r0
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	d001      	beq.n	80030ac <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 80030a8:	2301      	movs	r3, #1
 80030aa:	e012      	b.n	80030d2 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80030ac:	893b      	ldrh	r3, [r7, #8]
 80030ae:	b2da      	uxtb	r2, r3
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 80030b6:	69fb      	ldr	r3, [r7, #28]
 80030b8:	9300      	str	r3, [sp, #0]
 80030ba:	69bb      	ldr	r3, [r7, #24]
 80030bc:	2200      	movs	r2, #0
 80030be:	2140      	movs	r1, #64	@ 0x40
 80030c0:	68f8      	ldr	r0, [r7, #12]
 80030c2:	f000 f831 	bl	8003128 <I2C_WaitOnFlagUntilTimeout>
 80030c6:	4603      	mov	r3, r0
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d001      	beq.n	80030d0 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 80030cc:	2301      	movs	r3, #1
 80030ce:	e000      	b.n	80030d2 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 80030d0:	2300      	movs	r3, #0
}
 80030d2:	4618      	mov	r0, r3
 80030d4:	3710      	adds	r7, #16
 80030d6:	46bd      	mov	sp, r7
 80030d8:	bd80      	pop	{r7, pc}
 80030da:	bf00      	nop
 80030dc:	80002000 	.word	0x80002000

080030e0 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80030e0:	b480      	push	{r7}
 80030e2:	b083      	sub	sp, #12
 80030e4:	af00      	add	r7, sp, #0
 80030e6:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	699b      	ldr	r3, [r3, #24]
 80030ee:	f003 0302 	and.w	r3, r3, #2
 80030f2:	2b02      	cmp	r3, #2
 80030f4:	d103      	bne.n	80030fe <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	2200      	movs	r2, #0
 80030fc:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	699b      	ldr	r3, [r3, #24]
 8003104:	f003 0301 	and.w	r3, r3, #1
 8003108:	2b01      	cmp	r3, #1
 800310a:	d007      	beq.n	800311c <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	699a      	ldr	r2, [r3, #24]
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	f042 0201 	orr.w	r2, r2, #1
 800311a:	619a      	str	r2, [r3, #24]
  }
}
 800311c:	bf00      	nop
 800311e:	370c      	adds	r7, #12
 8003120:	46bd      	mov	sp, r7
 8003122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003126:	4770      	bx	lr

08003128 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8003128:	b580      	push	{r7, lr}
 800312a:	b084      	sub	sp, #16
 800312c:	af00      	add	r7, sp, #0
 800312e:	60f8      	str	r0, [r7, #12]
 8003130:	60b9      	str	r1, [r7, #8]
 8003132:	603b      	str	r3, [r7, #0]
 8003134:	4613      	mov	r3, r2
 8003136:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003138:	e03b      	b.n	80031b2 <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800313a:	69ba      	ldr	r2, [r7, #24]
 800313c:	6839      	ldr	r1, [r7, #0]
 800313e:	68f8      	ldr	r0, [r7, #12]
 8003140:	f000 f8d6 	bl	80032f0 <I2C_IsErrorOccurred>
 8003144:	4603      	mov	r3, r0
 8003146:	2b00      	cmp	r3, #0
 8003148:	d001      	beq.n	800314e <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 800314a:	2301      	movs	r3, #1
 800314c:	e041      	b.n	80031d2 <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800314e:	683b      	ldr	r3, [r7, #0]
 8003150:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003154:	d02d      	beq.n	80031b2 <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003156:	f7ff f8e3 	bl	8002320 <HAL_GetTick>
 800315a:	4602      	mov	r2, r0
 800315c:	69bb      	ldr	r3, [r7, #24]
 800315e:	1ad3      	subs	r3, r2, r3
 8003160:	683a      	ldr	r2, [r7, #0]
 8003162:	429a      	cmp	r2, r3
 8003164:	d302      	bcc.n	800316c <I2C_WaitOnFlagUntilTimeout+0x44>
 8003166:	683b      	ldr	r3, [r7, #0]
 8003168:	2b00      	cmp	r3, #0
 800316a:	d122      	bne.n	80031b2 <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	699a      	ldr	r2, [r3, #24]
 8003172:	68bb      	ldr	r3, [r7, #8]
 8003174:	4013      	ands	r3, r2
 8003176:	68ba      	ldr	r2, [r7, #8]
 8003178:	429a      	cmp	r2, r3
 800317a:	bf0c      	ite	eq
 800317c:	2301      	moveq	r3, #1
 800317e:	2300      	movne	r3, #0
 8003180:	b2db      	uxtb	r3, r3
 8003182:	461a      	mov	r2, r3
 8003184:	79fb      	ldrb	r3, [r7, #7]
 8003186:	429a      	cmp	r2, r3
 8003188:	d113      	bne.n	80031b2 <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800318e:	f043 0220 	orr.w	r2, r3, #32
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	2220      	movs	r2, #32
 800319a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	2200      	movs	r2, #0
 80031a2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	2200      	movs	r2, #0
 80031aa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 80031ae:	2301      	movs	r3, #1
 80031b0:	e00f      	b.n	80031d2 <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	699a      	ldr	r2, [r3, #24]
 80031b8:	68bb      	ldr	r3, [r7, #8]
 80031ba:	4013      	ands	r3, r2
 80031bc:	68ba      	ldr	r2, [r7, #8]
 80031be:	429a      	cmp	r2, r3
 80031c0:	bf0c      	ite	eq
 80031c2:	2301      	moveq	r3, #1
 80031c4:	2300      	movne	r3, #0
 80031c6:	b2db      	uxtb	r3, r3
 80031c8:	461a      	mov	r2, r3
 80031ca:	79fb      	ldrb	r3, [r7, #7]
 80031cc:	429a      	cmp	r2, r3
 80031ce:	d0b4      	beq.n	800313a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80031d0:	2300      	movs	r3, #0
}
 80031d2:	4618      	mov	r0, r3
 80031d4:	3710      	adds	r7, #16
 80031d6:	46bd      	mov	sp, r7
 80031d8:	bd80      	pop	{r7, pc}

080031da <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80031da:	b580      	push	{r7, lr}
 80031dc:	b084      	sub	sp, #16
 80031de:	af00      	add	r7, sp, #0
 80031e0:	60f8      	str	r0, [r7, #12]
 80031e2:	60b9      	str	r1, [r7, #8]
 80031e4:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80031e6:	e033      	b.n	8003250 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80031e8:	687a      	ldr	r2, [r7, #4]
 80031ea:	68b9      	ldr	r1, [r7, #8]
 80031ec:	68f8      	ldr	r0, [r7, #12]
 80031ee:	f000 f87f 	bl	80032f0 <I2C_IsErrorOccurred>
 80031f2:	4603      	mov	r3, r0
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	d001      	beq.n	80031fc <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80031f8:	2301      	movs	r3, #1
 80031fa:	e031      	b.n	8003260 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80031fc:	68bb      	ldr	r3, [r7, #8]
 80031fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003202:	d025      	beq.n	8003250 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003204:	f7ff f88c 	bl	8002320 <HAL_GetTick>
 8003208:	4602      	mov	r2, r0
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	1ad3      	subs	r3, r2, r3
 800320e:	68ba      	ldr	r2, [r7, #8]
 8003210:	429a      	cmp	r2, r3
 8003212:	d302      	bcc.n	800321a <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8003214:	68bb      	ldr	r3, [r7, #8]
 8003216:	2b00      	cmp	r3, #0
 8003218:	d11a      	bne.n	8003250 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	699b      	ldr	r3, [r3, #24]
 8003220:	f003 0302 	and.w	r3, r3, #2
 8003224:	2b02      	cmp	r3, #2
 8003226:	d013      	beq.n	8003250 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800322c:	f043 0220 	orr.w	r2, r3, #32
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	2220      	movs	r2, #32
 8003238:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	2200      	movs	r2, #0
 8003240:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	2200      	movs	r2, #0
 8003248:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 800324c:	2301      	movs	r3, #1
 800324e:	e007      	b.n	8003260 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	699b      	ldr	r3, [r3, #24]
 8003256:	f003 0302 	and.w	r3, r3, #2
 800325a:	2b02      	cmp	r3, #2
 800325c:	d1c4      	bne.n	80031e8 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800325e:	2300      	movs	r3, #0
}
 8003260:	4618      	mov	r0, r3
 8003262:	3710      	adds	r7, #16
 8003264:	46bd      	mov	sp, r7
 8003266:	bd80      	pop	{r7, pc}

08003268 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003268:	b580      	push	{r7, lr}
 800326a:	b084      	sub	sp, #16
 800326c:	af00      	add	r7, sp, #0
 800326e:	60f8      	str	r0, [r7, #12]
 8003270:	60b9      	str	r1, [r7, #8]
 8003272:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003274:	e02f      	b.n	80032d6 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003276:	687a      	ldr	r2, [r7, #4]
 8003278:	68b9      	ldr	r1, [r7, #8]
 800327a:	68f8      	ldr	r0, [r7, #12]
 800327c:	f000 f838 	bl	80032f0 <I2C_IsErrorOccurred>
 8003280:	4603      	mov	r3, r0
 8003282:	2b00      	cmp	r3, #0
 8003284:	d001      	beq.n	800328a <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003286:	2301      	movs	r3, #1
 8003288:	e02d      	b.n	80032e6 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800328a:	f7ff f849 	bl	8002320 <HAL_GetTick>
 800328e:	4602      	mov	r2, r0
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	1ad3      	subs	r3, r2, r3
 8003294:	68ba      	ldr	r2, [r7, #8]
 8003296:	429a      	cmp	r2, r3
 8003298:	d302      	bcc.n	80032a0 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800329a:	68bb      	ldr	r3, [r7, #8]
 800329c:	2b00      	cmp	r3, #0
 800329e:	d11a      	bne.n	80032d6 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	699b      	ldr	r3, [r3, #24]
 80032a6:	f003 0320 	and.w	r3, r3, #32
 80032aa:	2b20      	cmp	r3, #32
 80032ac:	d013      	beq.n	80032d6 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80032b2:	f043 0220 	orr.w	r2, r3, #32
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	2220      	movs	r2, #32
 80032be:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	2200      	movs	r2, #0
 80032c6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	2200      	movs	r2, #0
 80032ce:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 80032d2:	2301      	movs	r3, #1
 80032d4:	e007      	b.n	80032e6 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	699b      	ldr	r3, [r3, #24]
 80032dc:	f003 0320 	and.w	r3, r3, #32
 80032e0:	2b20      	cmp	r3, #32
 80032e2:	d1c8      	bne.n	8003276 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80032e4:	2300      	movs	r3, #0
}
 80032e6:	4618      	mov	r0, r3
 80032e8:	3710      	adds	r7, #16
 80032ea:	46bd      	mov	sp, r7
 80032ec:	bd80      	pop	{r7, pc}
	...

080032f0 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80032f0:	b580      	push	{r7, lr}
 80032f2:	b08a      	sub	sp, #40	@ 0x28
 80032f4:	af00      	add	r7, sp, #0
 80032f6:	60f8      	str	r0, [r7, #12]
 80032f8:	60b9      	str	r1, [r7, #8]
 80032fa:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80032fc:	2300      	movs	r3, #0
 80032fe:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	699b      	ldr	r3, [r3, #24]
 8003308:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 800330a:	2300      	movs	r3, #0
 800330c:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8003312:	69bb      	ldr	r3, [r7, #24]
 8003314:	f003 0310 	and.w	r3, r3, #16
 8003318:	2b00      	cmp	r3, #0
 800331a:	d068      	beq.n	80033ee <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	2210      	movs	r2, #16
 8003322:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003324:	e049      	b.n	80033ba <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8003326:	68bb      	ldr	r3, [r7, #8]
 8003328:	f1b3 3fff 	cmp.w	r3, #4294967295
 800332c:	d045      	beq.n	80033ba <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800332e:	f7fe fff7 	bl	8002320 <HAL_GetTick>
 8003332:	4602      	mov	r2, r0
 8003334:	69fb      	ldr	r3, [r7, #28]
 8003336:	1ad3      	subs	r3, r2, r3
 8003338:	68ba      	ldr	r2, [r7, #8]
 800333a:	429a      	cmp	r2, r3
 800333c:	d302      	bcc.n	8003344 <I2C_IsErrorOccurred+0x54>
 800333e:	68bb      	ldr	r3, [r7, #8]
 8003340:	2b00      	cmp	r3, #0
 8003342:	d13a      	bne.n	80033ba <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	685b      	ldr	r3, [r3, #4]
 800334a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800334e:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003356:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	699b      	ldr	r3, [r3, #24]
 800335e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003362:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003366:	d121      	bne.n	80033ac <I2C_IsErrorOccurred+0xbc>
 8003368:	697b      	ldr	r3, [r7, #20]
 800336a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800336e:	d01d      	beq.n	80033ac <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8003370:	7cfb      	ldrb	r3, [r7, #19]
 8003372:	2b20      	cmp	r3, #32
 8003374:	d01a      	beq.n	80033ac <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	685a      	ldr	r2, [r3, #4]
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003384:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8003386:	f7fe ffcb 	bl	8002320 <HAL_GetTick>
 800338a:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800338c:	e00e      	b.n	80033ac <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800338e:	f7fe ffc7 	bl	8002320 <HAL_GetTick>
 8003392:	4602      	mov	r2, r0
 8003394:	69fb      	ldr	r3, [r7, #28]
 8003396:	1ad3      	subs	r3, r2, r3
 8003398:	2b19      	cmp	r3, #25
 800339a:	d907      	bls.n	80033ac <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 800339c:	6a3b      	ldr	r3, [r7, #32]
 800339e:	f043 0320 	orr.w	r3, r3, #32
 80033a2:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 80033a4:	2301      	movs	r3, #1
 80033a6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 80033aa:	e006      	b.n	80033ba <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	699b      	ldr	r3, [r3, #24]
 80033b2:	f003 0320 	and.w	r3, r3, #32
 80033b6:	2b20      	cmp	r3, #32
 80033b8:	d1e9      	bne.n	800338e <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	699b      	ldr	r3, [r3, #24]
 80033c0:	f003 0320 	and.w	r3, r3, #32
 80033c4:	2b20      	cmp	r3, #32
 80033c6:	d003      	beq.n	80033d0 <I2C_IsErrorOccurred+0xe0>
 80033c8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d0aa      	beq.n	8003326 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80033d0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d103      	bne.n	80033e0 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	2220      	movs	r2, #32
 80033de:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80033e0:	6a3b      	ldr	r3, [r7, #32]
 80033e2:	f043 0304 	orr.w	r3, r3, #4
 80033e6:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80033e8:	2301      	movs	r3, #1
 80033ea:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	699b      	ldr	r3, [r3, #24]
 80033f4:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80033f6:	69bb      	ldr	r3, [r7, #24]
 80033f8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d00b      	beq.n	8003418 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8003400:	6a3b      	ldr	r3, [r7, #32]
 8003402:	f043 0301 	orr.w	r3, r3, #1
 8003406:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003410:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003412:	2301      	movs	r3, #1
 8003414:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8003418:	69bb      	ldr	r3, [r7, #24]
 800341a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800341e:	2b00      	cmp	r3, #0
 8003420:	d00b      	beq.n	800343a <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8003422:	6a3b      	ldr	r3, [r7, #32]
 8003424:	f043 0308 	orr.w	r3, r3, #8
 8003428:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003432:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003434:	2301      	movs	r3, #1
 8003436:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800343a:	69bb      	ldr	r3, [r7, #24]
 800343c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003440:	2b00      	cmp	r3, #0
 8003442:	d00b      	beq.n	800345c <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8003444:	6a3b      	ldr	r3, [r7, #32]
 8003446:	f043 0302 	orr.w	r3, r3, #2
 800344a:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003454:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003456:	2301      	movs	r3, #1
 8003458:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 800345c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003460:	2b00      	cmp	r3, #0
 8003462:	d01c      	beq.n	800349e <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8003464:	68f8      	ldr	r0, [r7, #12]
 8003466:	f7ff fe3b 	bl	80030e0 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	6859      	ldr	r1, [r3, #4]
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	681a      	ldr	r2, [r3, #0]
 8003474:	4b0d      	ldr	r3, [pc, #52]	@ (80034ac <I2C_IsErrorOccurred+0x1bc>)
 8003476:	400b      	ands	r3, r1
 8003478:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800347e:	6a3b      	ldr	r3, [r7, #32]
 8003480:	431a      	orrs	r2, r3
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	2220      	movs	r2, #32
 800348a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	2200      	movs	r2, #0
 8003492:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	2200      	movs	r2, #0
 800349a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 800349e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 80034a2:	4618      	mov	r0, r3
 80034a4:	3728      	adds	r7, #40	@ 0x28
 80034a6:	46bd      	mov	sp, r7
 80034a8:	bd80      	pop	{r7, pc}
 80034aa:	bf00      	nop
 80034ac:	fe00e800 	.word	0xfe00e800

080034b0 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80034b0:	b480      	push	{r7}
 80034b2:	b087      	sub	sp, #28
 80034b4:	af00      	add	r7, sp, #0
 80034b6:	60f8      	str	r0, [r7, #12]
 80034b8:	607b      	str	r3, [r7, #4]
 80034ba:	460b      	mov	r3, r1
 80034bc:	817b      	strh	r3, [r7, #10]
 80034be:	4613      	mov	r3, r2
 80034c0:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80034c2:	897b      	ldrh	r3, [r7, #10]
 80034c4:	f3c3 0209 	ubfx	r2, r3, #0, #10
                    (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80034c8:	7a7b      	ldrb	r3, [r7, #9]
 80034ca:	041b      	lsls	r3, r3, #16
 80034cc:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80034d0:	431a      	orrs	r2, r3
                    (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	431a      	orrs	r2, r3
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80034d6:	6a3b      	ldr	r3, [r7, #32]
 80034d8:	4313      	orrs	r3, r2
 80034da:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80034de:	617b      	str	r3, [r7, #20]
                    (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	685a      	ldr	r2, [r3, #4]
 80034e6:	6a3b      	ldr	r3, [r7, #32]
 80034e8:	0d5b      	lsrs	r3, r3, #21
 80034ea:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 80034ee:	4b08      	ldr	r3, [pc, #32]	@ (8003510 <I2C_TransferConfig+0x60>)
 80034f0:	430b      	orrs	r3, r1
 80034f2:	43db      	mvns	r3, r3
 80034f4:	ea02 0103 	and.w	r1, r2, r3
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	697a      	ldr	r2, [r7, #20]
 80034fe:	430a      	orrs	r2, r1
 8003500:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8003502:	bf00      	nop
 8003504:	371c      	adds	r7, #28
 8003506:	46bd      	mov	sp, r7
 8003508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800350c:	4770      	bx	lr
 800350e:	bf00      	nop
 8003510:	03ff63ff 	.word	0x03ff63ff

08003514 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003514:	b480      	push	{r7}
 8003516:	b083      	sub	sp, #12
 8003518:	af00      	add	r7, sp, #0
 800351a:	6078      	str	r0, [r7, #4]
 800351c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003524:	b2db      	uxtb	r3, r3
 8003526:	2b20      	cmp	r3, #32
 8003528:	d138      	bne.n	800359c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003530:	2b01      	cmp	r3, #1
 8003532:	d101      	bne.n	8003538 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003534:	2302      	movs	r3, #2
 8003536:	e032      	b.n	800359e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	2201      	movs	r2, #1
 800353c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	2224      	movs	r2, #36	@ 0x24
 8003544:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	681a      	ldr	r2, [r3, #0]
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	f022 0201 	bic.w	r2, r2, #1
 8003556:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	681a      	ldr	r2, [r3, #0]
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8003566:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	6819      	ldr	r1, [r3, #0]
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	683a      	ldr	r2, [r7, #0]
 8003574:	430a      	orrs	r2, r1
 8003576:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	681a      	ldr	r2, [r3, #0]
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	f042 0201 	orr.w	r2, r2, #1
 8003586:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	2220      	movs	r2, #32
 800358c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	2200      	movs	r2, #0
 8003594:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8003598:	2300      	movs	r3, #0
 800359a:	e000      	b.n	800359e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800359c:	2302      	movs	r3, #2
  }
}
 800359e:	4618      	mov	r0, r3
 80035a0:	370c      	adds	r7, #12
 80035a2:	46bd      	mov	sp, r7
 80035a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035a8:	4770      	bx	lr

080035aa <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80035aa:	b480      	push	{r7}
 80035ac:	b085      	sub	sp, #20
 80035ae:	af00      	add	r7, sp, #0
 80035b0:	6078      	str	r0, [r7, #4]
 80035b2:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80035ba:	b2db      	uxtb	r3, r3
 80035bc:	2b20      	cmp	r3, #32
 80035be:	d139      	bne.n	8003634 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80035c6:	2b01      	cmp	r3, #1
 80035c8:	d101      	bne.n	80035ce <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80035ca:	2302      	movs	r3, #2
 80035cc:	e033      	b.n	8003636 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	2201      	movs	r2, #1
 80035d2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	2224      	movs	r2, #36	@ 0x24
 80035da:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	681a      	ldr	r2, [r3, #0]
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	f022 0201 	bic.w	r2, r2, #1
 80035ec:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80035fc:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80035fe:	683b      	ldr	r3, [r7, #0]
 8003600:	021b      	lsls	r3, r3, #8
 8003602:	68fa      	ldr	r2, [r7, #12]
 8003604:	4313      	orrs	r3, r2
 8003606:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	68fa      	ldr	r2, [r7, #12]
 800360e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	681a      	ldr	r2, [r3, #0]
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	f042 0201 	orr.w	r2, r2, #1
 800361e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	2220      	movs	r2, #32
 8003624:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	2200      	movs	r2, #0
 800362c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8003630:	2300      	movs	r3, #0
 8003632:	e000      	b.n	8003636 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003634:	2302      	movs	r3, #2
  }
}
 8003636:	4618      	mov	r0, r3
 8003638:	3714      	adds	r7, #20
 800363a:	46bd      	mov	sp, r7
 800363c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003640:	4770      	bx	lr
	...

08003644 <HAL_PWREx_ConfigSupply>:
  *         process during startup.
  *         For more details, please refer to the power control chapter in the reference manual
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8003644:	b580      	push	{r7, lr}
 8003646:	b084      	sub	sp, #16
 8003648:	af00      	add	r7, sp, #0
 800364a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 800364c:	4b19      	ldr	r3, [pc, #100]	@ (80036b4 <HAL_PWREx_ConfigSupply+0x70>)
 800364e:	68db      	ldr	r3, [r3, #12]
 8003650:	f003 0304 	and.w	r3, r3, #4
 8003654:	2b04      	cmp	r3, #4
 8003656:	d00a      	beq.n	800366e <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8003658:	4b16      	ldr	r3, [pc, #88]	@ (80036b4 <HAL_PWREx_ConfigSupply+0x70>)
 800365a:	68db      	ldr	r3, [r3, #12]
 800365c:	f003 0307 	and.w	r3, r3, #7
 8003660:	687a      	ldr	r2, [r7, #4]
 8003662:	429a      	cmp	r2, r3
 8003664:	d001      	beq.n	800366a <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8003666:	2301      	movs	r3, #1
 8003668:	e01f      	b.n	80036aa <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800366a:	2300      	movs	r3, #0
 800366c:	e01d      	b.n	80036aa <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800366e:	4b11      	ldr	r3, [pc, #68]	@ (80036b4 <HAL_PWREx_ConfigSupply+0x70>)
 8003670:	68db      	ldr	r3, [r3, #12]
 8003672:	f023 0207 	bic.w	r2, r3, #7
 8003676:	490f      	ldr	r1, [pc, #60]	@ (80036b4 <HAL_PWREx_ConfigSupply+0x70>)
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	4313      	orrs	r3, r2
 800367c:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800367e:	f7fe fe4f 	bl	8002320 <HAL_GetTick>
 8003682:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8003684:	e009      	b.n	800369a <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8003686:	f7fe fe4b 	bl	8002320 <HAL_GetTick>
 800368a:	4602      	mov	r2, r0
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	1ad3      	subs	r3, r2, r3
 8003690:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8003694:	d901      	bls.n	800369a <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8003696:	2301      	movs	r3, #1
 8003698:	e007      	b.n	80036aa <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800369a:	4b06      	ldr	r3, [pc, #24]	@ (80036b4 <HAL_PWREx_ConfigSupply+0x70>)
 800369c:	685b      	ldr	r3, [r3, #4]
 800369e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80036a2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80036a6:	d1ee      	bne.n	8003686 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 80036a8:	2300      	movs	r3, #0
}
 80036aa:	4618      	mov	r0, r3
 80036ac:	3710      	adds	r7, #16
 80036ae:	46bd      	mov	sp, r7
 80036b0:	bd80      	pop	{r7, pc}
 80036b2:	bf00      	nop
 80036b4:	58024800 	.word	0x58024800

080036b8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80036b8:	b580      	push	{r7, lr}
 80036ba:	b08c      	sub	sp, #48	@ 0x30
 80036bc:	af00      	add	r7, sp, #0
 80036be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d102      	bne.n	80036cc <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80036c6:	2301      	movs	r3, #1
 80036c8:	f000 bc48 	b.w	8003f5c <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	f003 0301 	and.w	r3, r3, #1
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	f000 8088 	beq.w	80037ea <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80036da:	4b99      	ldr	r3, [pc, #612]	@ (8003940 <HAL_RCC_OscConfig+0x288>)
 80036dc:	691b      	ldr	r3, [r3, #16]
 80036de:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80036e2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80036e4:	4b96      	ldr	r3, [pc, #600]	@ (8003940 <HAL_RCC_OscConfig+0x288>)
 80036e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80036e8:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80036ea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80036ec:	2b10      	cmp	r3, #16
 80036ee:	d007      	beq.n	8003700 <HAL_RCC_OscConfig+0x48>
 80036f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80036f2:	2b18      	cmp	r3, #24
 80036f4:	d111      	bne.n	800371a <HAL_RCC_OscConfig+0x62>
 80036f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80036f8:	f003 0303 	and.w	r3, r3, #3
 80036fc:	2b02      	cmp	r3, #2
 80036fe:	d10c      	bne.n	800371a <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003700:	4b8f      	ldr	r3, [pc, #572]	@ (8003940 <HAL_RCC_OscConfig+0x288>)
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003708:	2b00      	cmp	r3, #0
 800370a:	d06d      	beq.n	80037e8 <HAL_RCC_OscConfig+0x130>
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	685b      	ldr	r3, [r3, #4]
 8003710:	2b00      	cmp	r3, #0
 8003712:	d169      	bne.n	80037e8 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8003714:	2301      	movs	r3, #1
 8003716:	f000 bc21 	b.w	8003f5c <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	685b      	ldr	r3, [r3, #4]
 800371e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003722:	d106      	bne.n	8003732 <HAL_RCC_OscConfig+0x7a>
 8003724:	4b86      	ldr	r3, [pc, #536]	@ (8003940 <HAL_RCC_OscConfig+0x288>)
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	4a85      	ldr	r2, [pc, #532]	@ (8003940 <HAL_RCC_OscConfig+0x288>)
 800372a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800372e:	6013      	str	r3, [r2, #0]
 8003730:	e02e      	b.n	8003790 <HAL_RCC_OscConfig+0xd8>
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	685b      	ldr	r3, [r3, #4]
 8003736:	2b00      	cmp	r3, #0
 8003738:	d10c      	bne.n	8003754 <HAL_RCC_OscConfig+0x9c>
 800373a:	4b81      	ldr	r3, [pc, #516]	@ (8003940 <HAL_RCC_OscConfig+0x288>)
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	4a80      	ldr	r2, [pc, #512]	@ (8003940 <HAL_RCC_OscConfig+0x288>)
 8003740:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003744:	6013      	str	r3, [r2, #0]
 8003746:	4b7e      	ldr	r3, [pc, #504]	@ (8003940 <HAL_RCC_OscConfig+0x288>)
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	4a7d      	ldr	r2, [pc, #500]	@ (8003940 <HAL_RCC_OscConfig+0x288>)
 800374c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003750:	6013      	str	r3, [r2, #0]
 8003752:	e01d      	b.n	8003790 <HAL_RCC_OscConfig+0xd8>
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	685b      	ldr	r3, [r3, #4]
 8003758:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800375c:	d10c      	bne.n	8003778 <HAL_RCC_OscConfig+0xc0>
 800375e:	4b78      	ldr	r3, [pc, #480]	@ (8003940 <HAL_RCC_OscConfig+0x288>)
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	4a77      	ldr	r2, [pc, #476]	@ (8003940 <HAL_RCC_OscConfig+0x288>)
 8003764:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003768:	6013      	str	r3, [r2, #0]
 800376a:	4b75      	ldr	r3, [pc, #468]	@ (8003940 <HAL_RCC_OscConfig+0x288>)
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	4a74      	ldr	r2, [pc, #464]	@ (8003940 <HAL_RCC_OscConfig+0x288>)
 8003770:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003774:	6013      	str	r3, [r2, #0]
 8003776:	e00b      	b.n	8003790 <HAL_RCC_OscConfig+0xd8>
 8003778:	4b71      	ldr	r3, [pc, #452]	@ (8003940 <HAL_RCC_OscConfig+0x288>)
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	4a70      	ldr	r2, [pc, #448]	@ (8003940 <HAL_RCC_OscConfig+0x288>)
 800377e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003782:	6013      	str	r3, [r2, #0]
 8003784:	4b6e      	ldr	r3, [pc, #440]	@ (8003940 <HAL_RCC_OscConfig+0x288>)
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	4a6d      	ldr	r2, [pc, #436]	@ (8003940 <HAL_RCC_OscConfig+0x288>)
 800378a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800378e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	685b      	ldr	r3, [r3, #4]
 8003794:	2b00      	cmp	r3, #0
 8003796:	d013      	beq.n	80037c0 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003798:	f7fe fdc2 	bl	8002320 <HAL_GetTick>
 800379c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800379e:	e008      	b.n	80037b2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80037a0:	f7fe fdbe 	bl	8002320 <HAL_GetTick>
 80037a4:	4602      	mov	r2, r0
 80037a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80037a8:	1ad3      	subs	r3, r2, r3
 80037aa:	2b64      	cmp	r3, #100	@ 0x64
 80037ac:	d901      	bls.n	80037b2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80037ae:	2303      	movs	r3, #3
 80037b0:	e3d4      	b.n	8003f5c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80037b2:	4b63      	ldr	r3, [pc, #396]	@ (8003940 <HAL_RCC_OscConfig+0x288>)
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d0f0      	beq.n	80037a0 <HAL_RCC_OscConfig+0xe8>
 80037be:	e014      	b.n	80037ea <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80037c0:	f7fe fdae 	bl	8002320 <HAL_GetTick>
 80037c4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80037c6:	e008      	b.n	80037da <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80037c8:	f7fe fdaa 	bl	8002320 <HAL_GetTick>
 80037cc:	4602      	mov	r2, r0
 80037ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80037d0:	1ad3      	subs	r3, r2, r3
 80037d2:	2b64      	cmp	r3, #100	@ 0x64
 80037d4:	d901      	bls.n	80037da <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80037d6:	2303      	movs	r3, #3
 80037d8:	e3c0      	b.n	8003f5c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80037da:	4b59      	ldr	r3, [pc, #356]	@ (8003940 <HAL_RCC_OscConfig+0x288>)
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d1f0      	bne.n	80037c8 <HAL_RCC_OscConfig+0x110>
 80037e6:	e000      	b.n	80037ea <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80037e8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	f003 0302 	and.w	r3, r3, #2
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	f000 80ca 	beq.w	800398c <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80037f8:	4b51      	ldr	r3, [pc, #324]	@ (8003940 <HAL_RCC_OscConfig+0x288>)
 80037fa:	691b      	ldr	r3, [r3, #16]
 80037fc:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003800:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003802:	4b4f      	ldr	r3, [pc, #316]	@ (8003940 <HAL_RCC_OscConfig+0x288>)
 8003804:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003806:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8003808:	6a3b      	ldr	r3, [r7, #32]
 800380a:	2b00      	cmp	r3, #0
 800380c:	d007      	beq.n	800381e <HAL_RCC_OscConfig+0x166>
 800380e:	6a3b      	ldr	r3, [r7, #32]
 8003810:	2b18      	cmp	r3, #24
 8003812:	d156      	bne.n	80038c2 <HAL_RCC_OscConfig+0x20a>
 8003814:	69fb      	ldr	r3, [r7, #28]
 8003816:	f003 0303 	and.w	r3, r3, #3
 800381a:	2b00      	cmp	r3, #0
 800381c:	d151      	bne.n	80038c2 <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800381e:	4b48      	ldr	r3, [pc, #288]	@ (8003940 <HAL_RCC_OscConfig+0x288>)
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	f003 0304 	and.w	r3, r3, #4
 8003826:	2b00      	cmp	r3, #0
 8003828:	d005      	beq.n	8003836 <HAL_RCC_OscConfig+0x17e>
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	68db      	ldr	r3, [r3, #12]
 800382e:	2b00      	cmp	r3, #0
 8003830:	d101      	bne.n	8003836 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8003832:	2301      	movs	r3, #1
 8003834:	e392      	b.n	8003f5c <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8003836:	4b42      	ldr	r3, [pc, #264]	@ (8003940 <HAL_RCC_OscConfig+0x288>)
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	f023 0219 	bic.w	r2, r3, #25
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	68db      	ldr	r3, [r3, #12]
 8003842:	493f      	ldr	r1, [pc, #252]	@ (8003940 <HAL_RCC_OscConfig+0x288>)
 8003844:	4313      	orrs	r3, r2
 8003846:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003848:	f7fe fd6a 	bl	8002320 <HAL_GetTick>
 800384c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800384e:	e008      	b.n	8003862 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003850:	f7fe fd66 	bl	8002320 <HAL_GetTick>
 8003854:	4602      	mov	r2, r0
 8003856:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003858:	1ad3      	subs	r3, r2, r3
 800385a:	2b02      	cmp	r3, #2
 800385c:	d901      	bls.n	8003862 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800385e:	2303      	movs	r3, #3
 8003860:	e37c      	b.n	8003f5c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003862:	4b37      	ldr	r3, [pc, #220]	@ (8003940 <HAL_RCC_OscConfig+0x288>)
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	f003 0304 	and.w	r3, r3, #4
 800386a:	2b00      	cmp	r3, #0
 800386c:	d0f0      	beq.n	8003850 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800386e:	f7fe fd87 	bl	8002380 <HAL_GetREVID>
 8003872:	4603      	mov	r3, r0
 8003874:	f241 0203 	movw	r2, #4099	@ 0x1003
 8003878:	4293      	cmp	r3, r2
 800387a:	d817      	bhi.n	80038ac <HAL_RCC_OscConfig+0x1f4>
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	691b      	ldr	r3, [r3, #16]
 8003880:	2b40      	cmp	r3, #64	@ 0x40
 8003882:	d108      	bne.n	8003896 <HAL_RCC_OscConfig+0x1de>
 8003884:	4b2e      	ldr	r3, [pc, #184]	@ (8003940 <HAL_RCC_OscConfig+0x288>)
 8003886:	685b      	ldr	r3, [r3, #4]
 8003888:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 800388c:	4a2c      	ldr	r2, [pc, #176]	@ (8003940 <HAL_RCC_OscConfig+0x288>)
 800388e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003892:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003894:	e07a      	b.n	800398c <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003896:	4b2a      	ldr	r3, [pc, #168]	@ (8003940 <HAL_RCC_OscConfig+0x288>)
 8003898:	685b      	ldr	r3, [r3, #4]
 800389a:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	691b      	ldr	r3, [r3, #16]
 80038a2:	031b      	lsls	r3, r3, #12
 80038a4:	4926      	ldr	r1, [pc, #152]	@ (8003940 <HAL_RCC_OscConfig+0x288>)
 80038a6:	4313      	orrs	r3, r2
 80038a8:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80038aa:	e06f      	b.n	800398c <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80038ac:	4b24      	ldr	r3, [pc, #144]	@ (8003940 <HAL_RCC_OscConfig+0x288>)
 80038ae:	685b      	ldr	r3, [r3, #4]
 80038b0:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	691b      	ldr	r3, [r3, #16]
 80038b8:	061b      	lsls	r3, r3, #24
 80038ba:	4921      	ldr	r1, [pc, #132]	@ (8003940 <HAL_RCC_OscConfig+0x288>)
 80038bc:	4313      	orrs	r3, r2
 80038be:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80038c0:	e064      	b.n	800398c <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	68db      	ldr	r3, [r3, #12]
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d047      	beq.n	800395a <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80038ca:	4b1d      	ldr	r3, [pc, #116]	@ (8003940 <HAL_RCC_OscConfig+0x288>)
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	f023 0219 	bic.w	r2, r3, #25
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	68db      	ldr	r3, [r3, #12]
 80038d6:	491a      	ldr	r1, [pc, #104]	@ (8003940 <HAL_RCC_OscConfig+0x288>)
 80038d8:	4313      	orrs	r3, r2
 80038da:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038dc:	f7fe fd20 	bl	8002320 <HAL_GetTick>
 80038e0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80038e2:	e008      	b.n	80038f6 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80038e4:	f7fe fd1c 	bl	8002320 <HAL_GetTick>
 80038e8:	4602      	mov	r2, r0
 80038ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80038ec:	1ad3      	subs	r3, r2, r3
 80038ee:	2b02      	cmp	r3, #2
 80038f0:	d901      	bls.n	80038f6 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 80038f2:	2303      	movs	r3, #3
 80038f4:	e332      	b.n	8003f5c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80038f6:	4b12      	ldr	r3, [pc, #72]	@ (8003940 <HAL_RCC_OscConfig+0x288>)
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	f003 0304 	and.w	r3, r3, #4
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d0f0      	beq.n	80038e4 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003902:	f7fe fd3d 	bl	8002380 <HAL_GetREVID>
 8003906:	4603      	mov	r3, r0
 8003908:	f241 0203 	movw	r2, #4099	@ 0x1003
 800390c:	4293      	cmp	r3, r2
 800390e:	d819      	bhi.n	8003944 <HAL_RCC_OscConfig+0x28c>
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	691b      	ldr	r3, [r3, #16]
 8003914:	2b40      	cmp	r3, #64	@ 0x40
 8003916:	d108      	bne.n	800392a <HAL_RCC_OscConfig+0x272>
 8003918:	4b09      	ldr	r3, [pc, #36]	@ (8003940 <HAL_RCC_OscConfig+0x288>)
 800391a:	685b      	ldr	r3, [r3, #4]
 800391c:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8003920:	4a07      	ldr	r2, [pc, #28]	@ (8003940 <HAL_RCC_OscConfig+0x288>)
 8003922:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003926:	6053      	str	r3, [r2, #4]
 8003928:	e030      	b.n	800398c <HAL_RCC_OscConfig+0x2d4>
 800392a:	4b05      	ldr	r3, [pc, #20]	@ (8003940 <HAL_RCC_OscConfig+0x288>)
 800392c:	685b      	ldr	r3, [r3, #4]
 800392e:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	691b      	ldr	r3, [r3, #16]
 8003936:	031b      	lsls	r3, r3, #12
 8003938:	4901      	ldr	r1, [pc, #4]	@ (8003940 <HAL_RCC_OscConfig+0x288>)
 800393a:	4313      	orrs	r3, r2
 800393c:	604b      	str	r3, [r1, #4]
 800393e:	e025      	b.n	800398c <HAL_RCC_OscConfig+0x2d4>
 8003940:	58024400 	.word	0x58024400
 8003944:	4b9a      	ldr	r3, [pc, #616]	@ (8003bb0 <HAL_RCC_OscConfig+0x4f8>)
 8003946:	685b      	ldr	r3, [r3, #4]
 8003948:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	691b      	ldr	r3, [r3, #16]
 8003950:	061b      	lsls	r3, r3, #24
 8003952:	4997      	ldr	r1, [pc, #604]	@ (8003bb0 <HAL_RCC_OscConfig+0x4f8>)
 8003954:	4313      	orrs	r3, r2
 8003956:	604b      	str	r3, [r1, #4]
 8003958:	e018      	b.n	800398c <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800395a:	4b95      	ldr	r3, [pc, #596]	@ (8003bb0 <HAL_RCC_OscConfig+0x4f8>)
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	4a94      	ldr	r2, [pc, #592]	@ (8003bb0 <HAL_RCC_OscConfig+0x4f8>)
 8003960:	f023 0301 	bic.w	r3, r3, #1
 8003964:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003966:	f7fe fcdb 	bl	8002320 <HAL_GetTick>
 800396a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800396c:	e008      	b.n	8003980 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800396e:	f7fe fcd7 	bl	8002320 <HAL_GetTick>
 8003972:	4602      	mov	r2, r0
 8003974:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003976:	1ad3      	subs	r3, r2, r3
 8003978:	2b02      	cmp	r3, #2
 800397a:	d901      	bls.n	8003980 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 800397c:	2303      	movs	r3, #3
 800397e:	e2ed      	b.n	8003f5c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003980:	4b8b      	ldr	r3, [pc, #556]	@ (8003bb0 <HAL_RCC_OscConfig+0x4f8>)
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	f003 0304 	and.w	r3, r3, #4
 8003988:	2b00      	cmp	r3, #0
 800398a:	d1f0      	bne.n	800396e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	f003 0310 	and.w	r3, r3, #16
 8003994:	2b00      	cmp	r3, #0
 8003996:	f000 80a9 	beq.w	8003aec <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800399a:	4b85      	ldr	r3, [pc, #532]	@ (8003bb0 <HAL_RCC_OscConfig+0x4f8>)
 800399c:	691b      	ldr	r3, [r3, #16]
 800399e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80039a2:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80039a4:	4b82      	ldr	r3, [pc, #520]	@ (8003bb0 <HAL_RCC_OscConfig+0x4f8>)
 80039a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80039a8:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80039aa:	69bb      	ldr	r3, [r7, #24]
 80039ac:	2b08      	cmp	r3, #8
 80039ae:	d007      	beq.n	80039c0 <HAL_RCC_OscConfig+0x308>
 80039b0:	69bb      	ldr	r3, [r7, #24]
 80039b2:	2b18      	cmp	r3, #24
 80039b4:	d13a      	bne.n	8003a2c <HAL_RCC_OscConfig+0x374>
 80039b6:	697b      	ldr	r3, [r7, #20]
 80039b8:	f003 0303 	and.w	r3, r3, #3
 80039bc:	2b01      	cmp	r3, #1
 80039be:	d135      	bne.n	8003a2c <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80039c0:	4b7b      	ldr	r3, [pc, #492]	@ (8003bb0 <HAL_RCC_OscConfig+0x4f8>)
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	d005      	beq.n	80039d8 <HAL_RCC_OscConfig+0x320>
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	69db      	ldr	r3, [r3, #28]
 80039d0:	2b80      	cmp	r3, #128	@ 0x80
 80039d2:	d001      	beq.n	80039d8 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 80039d4:	2301      	movs	r3, #1
 80039d6:	e2c1      	b.n	8003f5c <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80039d8:	f7fe fcd2 	bl	8002380 <HAL_GetREVID>
 80039dc:	4603      	mov	r3, r0
 80039de:	f241 0203 	movw	r2, #4099	@ 0x1003
 80039e2:	4293      	cmp	r3, r2
 80039e4:	d817      	bhi.n	8003a16 <HAL_RCC_OscConfig+0x35e>
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	6a1b      	ldr	r3, [r3, #32]
 80039ea:	2b20      	cmp	r3, #32
 80039ec:	d108      	bne.n	8003a00 <HAL_RCC_OscConfig+0x348>
 80039ee:	4b70      	ldr	r3, [pc, #448]	@ (8003bb0 <HAL_RCC_OscConfig+0x4f8>)
 80039f0:	685b      	ldr	r3, [r3, #4]
 80039f2:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 80039f6:	4a6e      	ldr	r2, [pc, #440]	@ (8003bb0 <HAL_RCC_OscConfig+0x4f8>)
 80039f8:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80039fc:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80039fe:	e075      	b.n	8003aec <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003a00:	4b6b      	ldr	r3, [pc, #428]	@ (8003bb0 <HAL_RCC_OscConfig+0x4f8>)
 8003a02:	685b      	ldr	r3, [r3, #4]
 8003a04:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	6a1b      	ldr	r3, [r3, #32]
 8003a0c:	069b      	lsls	r3, r3, #26
 8003a0e:	4968      	ldr	r1, [pc, #416]	@ (8003bb0 <HAL_RCC_OscConfig+0x4f8>)
 8003a10:	4313      	orrs	r3, r2
 8003a12:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003a14:	e06a      	b.n	8003aec <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003a16:	4b66      	ldr	r3, [pc, #408]	@ (8003bb0 <HAL_RCC_OscConfig+0x4f8>)
 8003a18:	68db      	ldr	r3, [r3, #12]
 8003a1a:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	6a1b      	ldr	r3, [r3, #32]
 8003a22:	061b      	lsls	r3, r3, #24
 8003a24:	4962      	ldr	r1, [pc, #392]	@ (8003bb0 <HAL_RCC_OscConfig+0x4f8>)
 8003a26:	4313      	orrs	r3, r2
 8003a28:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003a2a:	e05f      	b.n	8003aec <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	69db      	ldr	r3, [r3, #28]
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	d042      	beq.n	8003aba <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8003a34:	4b5e      	ldr	r3, [pc, #376]	@ (8003bb0 <HAL_RCC_OscConfig+0x4f8>)
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	4a5d      	ldr	r2, [pc, #372]	@ (8003bb0 <HAL_RCC_OscConfig+0x4f8>)
 8003a3a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003a3e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a40:	f7fe fc6e 	bl	8002320 <HAL_GetTick>
 8003a44:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003a46:	e008      	b.n	8003a5a <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8003a48:	f7fe fc6a 	bl	8002320 <HAL_GetTick>
 8003a4c:	4602      	mov	r2, r0
 8003a4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a50:	1ad3      	subs	r3, r2, r3
 8003a52:	2b02      	cmp	r3, #2
 8003a54:	d901      	bls.n	8003a5a <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8003a56:	2303      	movs	r3, #3
 8003a58:	e280      	b.n	8003f5c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003a5a:	4b55      	ldr	r3, [pc, #340]	@ (8003bb0 <HAL_RCC_OscConfig+0x4f8>)
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d0f0      	beq.n	8003a48 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003a66:	f7fe fc8b 	bl	8002380 <HAL_GetREVID>
 8003a6a:	4603      	mov	r3, r0
 8003a6c:	f241 0203 	movw	r2, #4099	@ 0x1003
 8003a70:	4293      	cmp	r3, r2
 8003a72:	d817      	bhi.n	8003aa4 <HAL_RCC_OscConfig+0x3ec>
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	6a1b      	ldr	r3, [r3, #32]
 8003a78:	2b20      	cmp	r3, #32
 8003a7a:	d108      	bne.n	8003a8e <HAL_RCC_OscConfig+0x3d6>
 8003a7c:	4b4c      	ldr	r3, [pc, #304]	@ (8003bb0 <HAL_RCC_OscConfig+0x4f8>)
 8003a7e:	685b      	ldr	r3, [r3, #4]
 8003a80:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8003a84:	4a4a      	ldr	r2, [pc, #296]	@ (8003bb0 <HAL_RCC_OscConfig+0x4f8>)
 8003a86:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8003a8a:	6053      	str	r3, [r2, #4]
 8003a8c:	e02e      	b.n	8003aec <HAL_RCC_OscConfig+0x434>
 8003a8e:	4b48      	ldr	r3, [pc, #288]	@ (8003bb0 <HAL_RCC_OscConfig+0x4f8>)
 8003a90:	685b      	ldr	r3, [r3, #4]
 8003a92:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	6a1b      	ldr	r3, [r3, #32]
 8003a9a:	069b      	lsls	r3, r3, #26
 8003a9c:	4944      	ldr	r1, [pc, #272]	@ (8003bb0 <HAL_RCC_OscConfig+0x4f8>)
 8003a9e:	4313      	orrs	r3, r2
 8003aa0:	604b      	str	r3, [r1, #4]
 8003aa2:	e023      	b.n	8003aec <HAL_RCC_OscConfig+0x434>
 8003aa4:	4b42      	ldr	r3, [pc, #264]	@ (8003bb0 <HAL_RCC_OscConfig+0x4f8>)
 8003aa6:	68db      	ldr	r3, [r3, #12]
 8003aa8:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	6a1b      	ldr	r3, [r3, #32]
 8003ab0:	061b      	lsls	r3, r3, #24
 8003ab2:	493f      	ldr	r1, [pc, #252]	@ (8003bb0 <HAL_RCC_OscConfig+0x4f8>)
 8003ab4:	4313      	orrs	r3, r2
 8003ab6:	60cb      	str	r3, [r1, #12]
 8003ab8:	e018      	b.n	8003aec <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8003aba:	4b3d      	ldr	r3, [pc, #244]	@ (8003bb0 <HAL_RCC_OscConfig+0x4f8>)
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	4a3c      	ldr	r2, [pc, #240]	@ (8003bb0 <HAL_RCC_OscConfig+0x4f8>)
 8003ac0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003ac4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ac6:	f7fe fc2b 	bl	8002320 <HAL_GetTick>
 8003aca:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8003acc:	e008      	b.n	8003ae0 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8003ace:	f7fe fc27 	bl	8002320 <HAL_GetTick>
 8003ad2:	4602      	mov	r2, r0
 8003ad4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ad6:	1ad3      	subs	r3, r2, r3
 8003ad8:	2b02      	cmp	r3, #2
 8003ada:	d901      	bls.n	8003ae0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003adc:	2303      	movs	r3, #3
 8003ade:	e23d      	b.n	8003f5c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8003ae0:	4b33      	ldr	r3, [pc, #204]	@ (8003bb0 <HAL_RCC_OscConfig+0x4f8>)
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	d1f0      	bne.n	8003ace <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	f003 0308 	and.w	r3, r3, #8
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	d036      	beq.n	8003b66 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	695b      	ldr	r3, [r3, #20]
 8003afc:	2b00      	cmp	r3, #0
 8003afe:	d019      	beq.n	8003b34 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003b00:	4b2b      	ldr	r3, [pc, #172]	@ (8003bb0 <HAL_RCC_OscConfig+0x4f8>)
 8003b02:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003b04:	4a2a      	ldr	r2, [pc, #168]	@ (8003bb0 <HAL_RCC_OscConfig+0x4f8>)
 8003b06:	f043 0301 	orr.w	r3, r3, #1
 8003b0a:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b0c:	f7fe fc08 	bl	8002320 <HAL_GetTick>
 8003b10:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8003b12:	e008      	b.n	8003b26 <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003b14:	f7fe fc04 	bl	8002320 <HAL_GetTick>
 8003b18:	4602      	mov	r2, r0
 8003b1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b1c:	1ad3      	subs	r3, r2, r3
 8003b1e:	2b02      	cmp	r3, #2
 8003b20:	d901      	bls.n	8003b26 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8003b22:	2303      	movs	r3, #3
 8003b24:	e21a      	b.n	8003f5c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8003b26:	4b22      	ldr	r3, [pc, #136]	@ (8003bb0 <HAL_RCC_OscConfig+0x4f8>)
 8003b28:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003b2a:	f003 0302 	and.w	r3, r3, #2
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d0f0      	beq.n	8003b14 <HAL_RCC_OscConfig+0x45c>
 8003b32:	e018      	b.n	8003b66 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003b34:	4b1e      	ldr	r3, [pc, #120]	@ (8003bb0 <HAL_RCC_OscConfig+0x4f8>)
 8003b36:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003b38:	4a1d      	ldr	r2, [pc, #116]	@ (8003bb0 <HAL_RCC_OscConfig+0x4f8>)
 8003b3a:	f023 0301 	bic.w	r3, r3, #1
 8003b3e:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b40:	f7fe fbee 	bl	8002320 <HAL_GetTick>
 8003b44:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003b46:	e008      	b.n	8003b5a <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003b48:	f7fe fbea 	bl	8002320 <HAL_GetTick>
 8003b4c:	4602      	mov	r2, r0
 8003b4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b50:	1ad3      	subs	r3, r2, r3
 8003b52:	2b02      	cmp	r3, #2
 8003b54:	d901      	bls.n	8003b5a <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8003b56:	2303      	movs	r3, #3
 8003b58:	e200      	b.n	8003f5c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003b5a:	4b15      	ldr	r3, [pc, #84]	@ (8003bb0 <HAL_RCC_OscConfig+0x4f8>)
 8003b5c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003b5e:	f003 0302 	and.w	r3, r3, #2
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d1f0      	bne.n	8003b48 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	f003 0320 	and.w	r3, r3, #32
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d039      	beq.n	8003be6 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	699b      	ldr	r3, [r3, #24]
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d01c      	beq.n	8003bb4 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003b7a:	4b0d      	ldr	r3, [pc, #52]	@ (8003bb0 <HAL_RCC_OscConfig+0x4f8>)
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	4a0c      	ldr	r2, [pc, #48]	@ (8003bb0 <HAL_RCC_OscConfig+0x4f8>)
 8003b80:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8003b84:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8003b86:	f7fe fbcb 	bl	8002320 <HAL_GetTick>
 8003b8a:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8003b8c:	e008      	b.n	8003ba0 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003b8e:	f7fe fbc7 	bl	8002320 <HAL_GetTick>
 8003b92:	4602      	mov	r2, r0
 8003b94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b96:	1ad3      	subs	r3, r2, r3
 8003b98:	2b02      	cmp	r3, #2
 8003b9a:	d901      	bls.n	8003ba0 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8003b9c:	2303      	movs	r3, #3
 8003b9e:	e1dd      	b.n	8003f5c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8003ba0:	4b03      	ldr	r3, [pc, #12]	@ (8003bb0 <HAL_RCC_OscConfig+0x4f8>)
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	d0f0      	beq.n	8003b8e <HAL_RCC_OscConfig+0x4d6>
 8003bac:	e01b      	b.n	8003be6 <HAL_RCC_OscConfig+0x52e>
 8003bae:	bf00      	nop
 8003bb0:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003bb4:	4b9b      	ldr	r3, [pc, #620]	@ (8003e24 <HAL_RCC_OscConfig+0x76c>)
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	4a9a      	ldr	r2, [pc, #616]	@ (8003e24 <HAL_RCC_OscConfig+0x76c>)
 8003bba:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003bbe:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8003bc0:	f7fe fbae 	bl	8002320 <HAL_GetTick>
 8003bc4:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8003bc6:	e008      	b.n	8003bda <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003bc8:	f7fe fbaa 	bl	8002320 <HAL_GetTick>
 8003bcc:	4602      	mov	r2, r0
 8003bce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003bd0:	1ad3      	subs	r3, r2, r3
 8003bd2:	2b02      	cmp	r3, #2
 8003bd4:	d901      	bls.n	8003bda <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8003bd6:	2303      	movs	r3, #3
 8003bd8:	e1c0      	b.n	8003f5c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8003bda:	4b92      	ldr	r3, [pc, #584]	@ (8003e24 <HAL_RCC_OscConfig+0x76c>)
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	d1f0      	bne.n	8003bc8 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	f003 0304 	and.w	r3, r3, #4
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	f000 8081 	beq.w	8003cf6 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8003bf4:	4b8c      	ldr	r3, [pc, #560]	@ (8003e28 <HAL_RCC_OscConfig+0x770>)
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	4a8b      	ldr	r2, [pc, #556]	@ (8003e28 <HAL_RCC_OscConfig+0x770>)
 8003bfa:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003bfe:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003c00:	f7fe fb8e 	bl	8002320 <HAL_GetTick>
 8003c04:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003c06:	e008      	b.n	8003c1a <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003c08:	f7fe fb8a 	bl	8002320 <HAL_GetTick>
 8003c0c:	4602      	mov	r2, r0
 8003c0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c10:	1ad3      	subs	r3, r2, r3
 8003c12:	2b64      	cmp	r3, #100	@ 0x64
 8003c14:	d901      	bls.n	8003c1a <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8003c16:	2303      	movs	r3, #3
 8003c18:	e1a0      	b.n	8003f5c <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003c1a:	4b83      	ldr	r3, [pc, #524]	@ (8003e28 <HAL_RCC_OscConfig+0x770>)
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d0f0      	beq.n	8003c08 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	689b      	ldr	r3, [r3, #8]
 8003c2a:	2b01      	cmp	r3, #1
 8003c2c:	d106      	bne.n	8003c3c <HAL_RCC_OscConfig+0x584>
 8003c2e:	4b7d      	ldr	r3, [pc, #500]	@ (8003e24 <HAL_RCC_OscConfig+0x76c>)
 8003c30:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003c32:	4a7c      	ldr	r2, [pc, #496]	@ (8003e24 <HAL_RCC_OscConfig+0x76c>)
 8003c34:	f043 0301 	orr.w	r3, r3, #1
 8003c38:	6713      	str	r3, [r2, #112]	@ 0x70
 8003c3a:	e02d      	b.n	8003c98 <HAL_RCC_OscConfig+0x5e0>
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	689b      	ldr	r3, [r3, #8]
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	d10c      	bne.n	8003c5e <HAL_RCC_OscConfig+0x5a6>
 8003c44:	4b77      	ldr	r3, [pc, #476]	@ (8003e24 <HAL_RCC_OscConfig+0x76c>)
 8003c46:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003c48:	4a76      	ldr	r2, [pc, #472]	@ (8003e24 <HAL_RCC_OscConfig+0x76c>)
 8003c4a:	f023 0301 	bic.w	r3, r3, #1
 8003c4e:	6713      	str	r3, [r2, #112]	@ 0x70
 8003c50:	4b74      	ldr	r3, [pc, #464]	@ (8003e24 <HAL_RCC_OscConfig+0x76c>)
 8003c52:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003c54:	4a73      	ldr	r2, [pc, #460]	@ (8003e24 <HAL_RCC_OscConfig+0x76c>)
 8003c56:	f023 0304 	bic.w	r3, r3, #4
 8003c5a:	6713      	str	r3, [r2, #112]	@ 0x70
 8003c5c:	e01c      	b.n	8003c98 <HAL_RCC_OscConfig+0x5e0>
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	689b      	ldr	r3, [r3, #8]
 8003c62:	2b05      	cmp	r3, #5
 8003c64:	d10c      	bne.n	8003c80 <HAL_RCC_OscConfig+0x5c8>
 8003c66:	4b6f      	ldr	r3, [pc, #444]	@ (8003e24 <HAL_RCC_OscConfig+0x76c>)
 8003c68:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003c6a:	4a6e      	ldr	r2, [pc, #440]	@ (8003e24 <HAL_RCC_OscConfig+0x76c>)
 8003c6c:	f043 0304 	orr.w	r3, r3, #4
 8003c70:	6713      	str	r3, [r2, #112]	@ 0x70
 8003c72:	4b6c      	ldr	r3, [pc, #432]	@ (8003e24 <HAL_RCC_OscConfig+0x76c>)
 8003c74:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003c76:	4a6b      	ldr	r2, [pc, #428]	@ (8003e24 <HAL_RCC_OscConfig+0x76c>)
 8003c78:	f043 0301 	orr.w	r3, r3, #1
 8003c7c:	6713      	str	r3, [r2, #112]	@ 0x70
 8003c7e:	e00b      	b.n	8003c98 <HAL_RCC_OscConfig+0x5e0>
 8003c80:	4b68      	ldr	r3, [pc, #416]	@ (8003e24 <HAL_RCC_OscConfig+0x76c>)
 8003c82:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003c84:	4a67      	ldr	r2, [pc, #412]	@ (8003e24 <HAL_RCC_OscConfig+0x76c>)
 8003c86:	f023 0301 	bic.w	r3, r3, #1
 8003c8a:	6713      	str	r3, [r2, #112]	@ 0x70
 8003c8c:	4b65      	ldr	r3, [pc, #404]	@ (8003e24 <HAL_RCC_OscConfig+0x76c>)
 8003c8e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003c90:	4a64      	ldr	r2, [pc, #400]	@ (8003e24 <HAL_RCC_OscConfig+0x76c>)
 8003c92:	f023 0304 	bic.w	r3, r3, #4
 8003c96:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	689b      	ldr	r3, [r3, #8]
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	d015      	beq.n	8003ccc <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ca0:	f7fe fb3e 	bl	8002320 <HAL_GetTick>
 8003ca4:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003ca6:	e00a      	b.n	8003cbe <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003ca8:	f7fe fb3a 	bl	8002320 <HAL_GetTick>
 8003cac:	4602      	mov	r2, r0
 8003cae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003cb0:	1ad3      	subs	r3, r2, r3
 8003cb2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003cb6:	4293      	cmp	r3, r2
 8003cb8:	d901      	bls.n	8003cbe <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8003cba:	2303      	movs	r3, #3
 8003cbc:	e14e      	b.n	8003f5c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003cbe:	4b59      	ldr	r3, [pc, #356]	@ (8003e24 <HAL_RCC_OscConfig+0x76c>)
 8003cc0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003cc2:	f003 0302 	and.w	r3, r3, #2
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d0ee      	beq.n	8003ca8 <HAL_RCC_OscConfig+0x5f0>
 8003cca:	e014      	b.n	8003cf6 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ccc:	f7fe fb28 	bl	8002320 <HAL_GetTick>
 8003cd0:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003cd2:	e00a      	b.n	8003cea <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003cd4:	f7fe fb24 	bl	8002320 <HAL_GetTick>
 8003cd8:	4602      	mov	r2, r0
 8003cda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003cdc:	1ad3      	subs	r3, r2, r3
 8003cde:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003ce2:	4293      	cmp	r3, r2
 8003ce4:	d901      	bls.n	8003cea <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8003ce6:	2303      	movs	r3, #3
 8003ce8:	e138      	b.n	8003f5c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003cea:	4b4e      	ldr	r3, [pc, #312]	@ (8003e24 <HAL_RCC_OscConfig+0x76c>)
 8003cec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003cee:	f003 0302 	and.w	r3, r3, #2
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d1ee      	bne.n	8003cd4 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	f000 812d 	beq.w	8003f5a <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8003d00:	4b48      	ldr	r3, [pc, #288]	@ (8003e24 <HAL_RCC_OscConfig+0x76c>)
 8003d02:	691b      	ldr	r3, [r3, #16]
 8003d04:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003d08:	2b18      	cmp	r3, #24
 8003d0a:	f000 80bd 	beq.w	8003e88 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d12:	2b02      	cmp	r3, #2
 8003d14:	f040 809e 	bne.w	8003e54 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003d18:	4b42      	ldr	r3, [pc, #264]	@ (8003e24 <HAL_RCC_OscConfig+0x76c>)
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	4a41      	ldr	r2, [pc, #260]	@ (8003e24 <HAL_RCC_OscConfig+0x76c>)
 8003d1e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003d22:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d24:	f7fe fafc 	bl	8002320 <HAL_GetTick>
 8003d28:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003d2a:	e008      	b.n	8003d3e <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003d2c:	f7fe faf8 	bl	8002320 <HAL_GetTick>
 8003d30:	4602      	mov	r2, r0
 8003d32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d34:	1ad3      	subs	r3, r2, r3
 8003d36:	2b02      	cmp	r3, #2
 8003d38:	d901      	bls.n	8003d3e <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8003d3a:	2303      	movs	r3, #3
 8003d3c:	e10e      	b.n	8003f5c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003d3e:	4b39      	ldr	r3, [pc, #228]	@ (8003e24 <HAL_RCC_OscConfig+0x76c>)
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d1f0      	bne.n	8003d2c <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003d4a:	4b36      	ldr	r3, [pc, #216]	@ (8003e24 <HAL_RCC_OscConfig+0x76c>)
 8003d4c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003d4e:	4b37      	ldr	r3, [pc, #220]	@ (8003e2c <HAL_RCC_OscConfig+0x774>)
 8003d50:	4013      	ands	r3, r2
 8003d52:	687a      	ldr	r2, [r7, #4]
 8003d54:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 8003d56:	687a      	ldr	r2, [r7, #4]
 8003d58:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8003d5a:	0112      	lsls	r2, r2, #4
 8003d5c:	430a      	orrs	r2, r1
 8003d5e:	4931      	ldr	r1, [pc, #196]	@ (8003e24 <HAL_RCC_OscConfig+0x76c>)
 8003d60:	4313      	orrs	r3, r2
 8003d62:	628b      	str	r3, [r1, #40]	@ 0x28
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d68:	3b01      	subs	r3, #1
 8003d6a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003d72:	3b01      	subs	r3, #1
 8003d74:	025b      	lsls	r3, r3, #9
 8003d76:	b29b      	uxth	r3, r3
 8003d78:	431a      	orrs	r2, r3
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003d7e:	3b01      	subs	r3, #1
 8003d80:	041b      	lsls	r3, r3, #16
 8003d82:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8003d86:	431a      	orrs	r2, r3
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003d8c:	3b01      	subs	r3, #1
 8003d8e:	061b      	lsls	r3, r3, #24
 8003d90:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8003d94:	4923      	ldr	r1, [pc, #140]	@ (8003e24 <HAL_RCC_OscConfig+0x76c>)
 8003d96:	4313      	orrs	r3, r2
 8003d98:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8003d9a:	4b22      	ldr	r3, [pc, #136]	@ (8003e24 <HAL_RCC_OscConfig+0x76c>)
 8003d9c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d9e:	4a21      	ldr	r2, [pc, #132]	@ (8003e24 <HAL_RCC_OscConfig+0x76c>)
 8003da0:	f023 0301 	bic.w	r3, r3, #1
 8003da4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8003da6:	4b1f      	ldr	r3, [pc, #124]	@ (8003e24 <HAL_RCC_OscConfig+0x76c>)
 8003da8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003daa:	4b21      	ldr	r3, [pc, #132]	@ (8003e30 <HAL_RCC_OscConfig+0x778>)
 8003dac:	4013      	ands	r3, r2
 8003dae:	687a      	ldr	r2, [r7, #4]
 8003db0:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8003db2:	00d2      	lsls	r2, r2, #3
 8003db4:	491b      	ldr	r1, [pc, #108]	@ (8003e24 <HAL_RCC_OscConfig+0x76c>)
 8003db6:	4313      	orrs	r3, r2
 8003db8:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8003dba:	4b1a      	ldr	r3, [pc, #104]	@ (8003e24 <HAL_RCC_OscConfig+0x76c>)
 8003dbc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003dbe:	f023 020c 	bic.w	r2, r3, #12
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003dc6:	4917      	ldr	r1, [pc, #92]	@ (8003e24 <HAL_RCC_OscConfig+0x76c>)
 8003dc8:	4313      	orrs	r3, r2
 8003dca:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8003dcc:	4b15      	ldr	r3, [pc, #84]	@ (8003e24 <HAL_RCC_OscConfig+0x76c>)
 8003dce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003dd0:	f023 0202 	bic.w	r2, r3, #2
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003dd8:	4912      	ldr	r1, [pc, #72]	@ (8003e24 <HAL_RCC_OscConfig+0x76c>)
 8003dda:	4313      	orrs	r3, r2
 8003ddc:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8003dde:	4b11      	ldr	r3, [pc, #68]	@ (8003e24 <HAL_RCC_OscConfig+0x76c>)
 8003de0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003de2:	4a10      	ldr	r2, [pc, #64]	@ (8003e24 <HAL_RCC_OscConfig+0x76c>)
 8003de4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003de8:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003dea:	4b0e      	ldr	r3, [pc, #56]	@ (8003e24 <HAL_RCC_OscConfig+0x76c>)
 8003dec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003dee:	4a0d      	ldr	r2, [pc, #52]	@ (8003e24 <HAL_RCC_OscConfig+0x76c>)
 8003df0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003df4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8003df6:	4b0b      	ldr	r3, [pc, #44]	@ (8003e24 <HAL_RCC_OscConfig+0x76c>)
 8003df8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003dfa:	4a0a      	ldr	r2, [pc, #40]	@ (8003e24 <HAL_RCC_OscConfig+0x76c>)
 8003dfc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003e00:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8003e02:	4b08      	ldr	r3, [pc, #32]	@ (8003e24 <HAL_RCC_OscConfig+0x76c>)
 8003e04:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e06:	4a07      	ldr	r2, [pc, #28]	@ (8003e24 <HAL_RCC_OscConfig+0x76c>)
 8003e08:	f043 0301 	orr.w	r3, r3, #1
 8003e0c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003e0e:	4b05      	ldr	r3, [pc, #20]	@ (8003e24 <HAL_RCC_OscConfig+0x76c>)
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	4a04      	ldr	r2, [pc, #16]	@ (8003e24 <HAL_RCC_OscConfig+0x76c>)
 8003e14:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003e18:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e1a:	f7fe fa81 	bl	8002320 <HAL_GetTick>
 8003e1e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003e20:	e011      	b.n	8003e46 <HAL_RCC_OscConfig+0x78e>
 8003e22:	bf00      	nop
 8003e24:	58024400 	.word	0x58024400
 8003e28:	58024800 	.word	0x58024800
 8003e2c:	fffffc0c 	.word	0xfffffc0c
 8003e30:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003e34:	f7fe fa74 	bl	8002320 <HAL_GetTick>
 8003e38:	4602      	mov	r2, r0
 8003e3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e3c:	1ad3      	subs	r3, r2, r3
 8003e3e:	2b02      	cmp	r3, #2
 8003e40:	d901      	bls.n	8003e46 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8003e42:	2303      	movs	r3, #3
 8003e44:	e08a      	b.n	8003f5c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003e46:	4b47      	ldr	r3, [pc, #284]	@ (8003f64 <HAL_RCC_OscConfig+0x8ac>)
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d0f0      	beq.n	8003e34 <HAL_RCC_OscConfig+0x77c>
 8003e52:	e082      	b.n	8003f5a <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003e54:	4b43      	ldr	r3, [pc, #268]	@ (8003f64 <HAL_RCC_OscConfig+0x8ac>)
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	4a42      	ldr	r2, [pc, #264]	@ (8003f64 <HAL_RCC_OscConfig+0x8ac>)
 8003e5a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003e5e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e60:	f7fe fa5e 	bl	8002320 <HAL_GetTick>
 8003e64:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003e66:	e008      	b.n	8003e7a <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003e68:	f7fe fa5a 	bl	8002320 <HAL_GetTick>
 8003e6c:	4602      	mov	r2, r0
 8003e6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e70:	1ad3      	subs	r3, r2, r3
 8003e72:	2b02      	cmp	r3, #2
 8003e74:	d901      	bls.n	8003e7a <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8003e76:	2303      	movs	r3, #3
 8003e78:	e070      	b.n	8003f5c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003e7a:	4b3a      	ldr	r3, [pc, #232]	@ (8003f64 <HAL_RCC_OscConfig+0x8ac>)
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d1f0      	bne.n	8003e68 <HAL_RCC_OscConfig+0x7b0>
 8003e86:	e068      	b.n	8003f5a <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8003e88:	4b36      	ldr	r3, [pc, #216]	@ (8003f64 <HAL_RCC_OscConfig+0x8ac>)
 8003e8a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003e8c:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8003e8e:	4b35      	ldr	r3, [pc, #212]	@ (8003f64 <HAL_RCC_OscConfig+0x8ac>)
 8003e90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e92:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e98:	2b01      	cmp	r3, #1
 8003e9a:	d031      	beq.n	8003f00 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003e9c:	693b      	ldr	r3, [r7, #16]
 8003e9e:	f003 0203 	and.w	r2, r3, #3
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003ea6:	429a      	cmp	r2, r3
 8003ea8:	d12a      	bne.n	8003f00 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8003eaa:	693b      	ldr	r3, [r7, #16]
 8003eac:	091b      	lsrs	r3, r3, #4
 8003eae:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003eb6:	429a      	cmp	r2, r3
 8003eb8:	d122      	bne.n	8003f00 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ec4:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8003ec6:	429a      	cmp	r2, r3
 8003ec8:	d11a      	bne.n	8003f00 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	0a5b      	lsrs	r3, r3, #9
 8003ece:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003ed6:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8003ed8:	429a      	cmp	r2, r3
 8003eda:	d111      	bne.n	8003f00 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	0c1b      	lsrs	r3, r3, #16
 8003ee0:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003ee8:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8003eea:	429a      	cmp	r2, r3
 8003eec:	d108      	bne.n	8003f00 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	0e1b      	lsrs	r3, r3, #24
 8003ef2:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003efa:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8003efc:	429a      	cmp	r2, r3
 8003efe:	d001      	beq.n	8003f04 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8003f00:	2301      	movs	r3, #1
 8003f02:	e02b      	b.n	8003f5c <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8003f04:	4b17      	ldr	r3, [pc, #92]	@ (8003f64 <HAL_RCC_OscConfig+0x8ac>)
 8003f06:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003f08:	08db      	lsrs	r3, r3, #3
 8003f0a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003f0e:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003f14:	693a      	ldr	r2, [r7, #16]
 8003f16:	429a      	cmp	r2, r3
 8003f18:	d01f      	beq.n	8003f5a <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8003f1a:	4b12      	ldr	r3, [pc, #72]	@ (8003f64 <HAL_RCC_OscConfig+0x8ac>)
 8003f1c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f1e:	4a11      	ldr	r2, [pc, #68]	@ (8003f64 <HAL_RCC_OscConfig+0x8ac>)
 8003f20:	f023 0301 	bic.w	r3, r3, #1
 8003f24:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003f26:	f7fe f9fb 	bl	8002320 <HAL_GetTick>
 8003f2a:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8003f2c:	bf00      	nop
 8003f2e:	f7fe f9f7 	bl	8002320 <HAL_GetTick>
 8003f32:	4602      	mov	r2, r0
 8003f34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f36:	4293      	cmp	r3, r2
 8003f38:	d0f9      	beq.n	8003f2e <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8003f3a:	4b0a      	ldr	r3, [pc, #40]	@ (8003f64 <HAL_RCC_OscConfig+0x8ac>)
 8003f3c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003f3e:	4b0a      	ldr	r3, [pc, #40]	@ (8003f68 <HAL_RCC_OscConfig+0x8b0>)
 8003f40:	4013      	ands	r3, r2
 8003f42:	687a      	ldr	r2, [r7, #4]
 8003f44:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8003f46:	00d2      	lsls	r2, r2, #3
 8003f48:	4906      	ldr	r1, [pc, #24]	@ (8003f64 <HAL_RCC_OscConfig+0x8ac>)
 8003f4a:	4313      	orrs	r3, r2
 8003f4c:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8003f4e:	4b05      	ldr	r3, [pc, #20]	@ (8003f64 <HAL_RCC_OscConfig+0x8ac>)
 8003f50:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f52:	4a04      	ldr	r2, [pc, #16]	@ (8003f64 <HAL_RCC_OscConfig+0x8ac>)
 8003f54:	f043 0301 	orr.w	r3, r3, #1
 8003f58:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8003f5a:	2300      	movs	r3, #0
}
 8003f5c:	4618      	mov	r0, r3
 8003f5e:	3730      	adds	r7, #48	@ 0x30
 8003f60:	46bd      	mov	sp, r7
 8003f62:	bd80      	pop	{r7, pc}
 8003f64:	58024400 	.word	0x58024400
 8003f68:	ffff0007 	.word	0xffff0007

08003f6c <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003f6c:	b580      	push	{r7, lr}
 8003f6e:	b086      	sub	sp, #24
 8003f70:	af00      	add	r7, sp, #0
 8003f72:	6078      	str	r0, [r7, #4]
 8003f74:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	d101      	bne.n	8003f80 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003f7c:	2301      	movs	r3, #1
 8003f7e:	e19c      	b.n	80042ba <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003f80:	4b8a      	ldr	r3, [pc, #552]	@ (80041ac <HAL_RCC_ClockConfig+0x240>)
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	f003 030f 	and.w	r3, r3, #15
 8003f88:	683a      	ldr	r2, [r7, #0]
 8003f8a:	429a      	cmp	r2, r3
 8003f8c:	d910      	bls.n	8003fb0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003f8e:	4b87      	ldr	r3, [pc, #540]	@ (80041ac <HAL_RCC_ClockConfig+0x240>)
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	f023 020f 	bic.w	r2, r3, #15
 8003f96:	4985      	ldr	r1, [pc, #532]	@ (80041ac <HAL_RCC_ClockConfig+0x240>)
 8003f98:	683b      	ldr	r3, [r7, #0]
 8003f9a:	4313      	orrs	r3, r2
 8003f9c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003f9e:	4b83      	ldr	r3, [pc, #524]	@ (80041ac <HAL_RCC_ClockConfig+0x240>)
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	f003 030f 	and.w	r3, r3, #15
 8003fa6:	683a      	ldr	r2, [r7, #0]
 8003fa8:	429a      	cmp	r2, r3
 8003faa:	d001      	beq.n	8003fb0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003fac:	2301      	movs	r3, #1
 8003fae:	e184      	b.n	80042ba <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	f003 0304 	and.w	r3, r3, #4
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	d010      	beq.n	8003fde <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	691a      	ldr	r2, [r3, #16]
 8003fc0:	4b7b      	ldr	r3, [pc, #492]	@ (80041b0 <HAL_RCC_ClockConfig+0x244>)
 8003fc2:	699b      	ldr	r3, [r3, #24]
 8003fc4:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8003fc8:	429a      	cmp	r2, r3
 8003fca:	d908      	bls.n	8003fde <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8003fcc:	4b78      	ldr	r3, [pc, #480]	@ (80041b0 <HAL_RCC_ClockConfig+0x244>)
 8003fce:	699b      	ldr	r3, [r3, #24]
 8003fd0:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	691b      	ldr	r3, [r3, #16]
 8003fd8:	4975      	ldr	r1, [pc, #468]	@ (80041b0 <HAL_RCC_ClockConfig+0x244>)
 8003fda:	4313      	orrs	r3, r2
 8003fdc:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	f003 0308 	and.w	r3, r3, #8
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d010      	beq.n	800400c <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	695a      	ldr	r2, [r3, #20]
 8003fee:	4b70      	ldr	r3, [pc, #448]	@ (80041b0 <HAL_RCC_ClockConfig+0x244>)
 8003ff0:	69db      	ldr	r3, [r3, #28]
 8003ff2:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8003ff6:	429a      	cmp	r2, r3
 8003ff8:	d908      	bls.n	800400c <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8003ffa:	4b6d      	ldr	r3, [pc, #436]	@ (80041b0 <HAL_RCC_ClockConfig+0x244>)
 8003ffc:	69db      	ldr	r3, [r3, #28]
 8003ffe:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	695b      	ldr	r3, [r3, #20]
 8004006:	496a      	ldr	r1, [pc, #424]	@ (80041b0 <HAL_RCC_ClockConfig+0x244>)
 8004008:	4313      	orrs	r3, r2
 800400a:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	f003 0310 	and.w	r3, r3, #16
 8004014:	2b00      	cmp	r3, #0
 8004016:	d010      	beq.n	800403a <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	699a      	ldr	r2, [r3, #24]
 800401c:	4b64      	ldr	r3, [pc, #400]	@ (80041b0 <HAL_RCC_ClockConfig+0x244>)
 800401e:	69db      	ldr	r3, [r3, #28]
 8004020:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8004024:	429a      	cmp	r2, r3
 8004026:	d908      	bls.n	800403a <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8004028:	4b61      	ldr	r3, [pc, #388]	@ (80041b0 <HAL_RCC_ClockConfig+0x244>)
 800402a:	69db      	ldr	r3, [r3, #28]
 800402c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	699b      	ldr	r3, [r3, #24]
 8004034:	495e      	ldr	r1, [pc, #376]	@ (80041b0 <HAL_RCC_ClockConfig+0x244>)
 8004036:	4313      	orrs	r3, r2
 8004038:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	f003 0320 	and.w	r3, r3, #32
 8004042:	2b00      	cmp	r3, #0
 8004044:	d010      	beq.n	8004068 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	69da      	ldr	r2, [r3, #28]
 800404a:	4b59      	ldr	r3, [pc, #356]	@ (80041b0 <HAL_RCC_ClockConfig+0x244>)
 800404c:	6a1b      	ldr	r3, [r3, #32]
 800404e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004052:	429a      	cmp	r2, r3
 8004054:	d908      	bls.n	8004068 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8004056:	4b56      	ldr	r3, [pc, #344]	@ (80041b0 <HAL_RCC_ClockConfig+0x244>)
 8004058:	6a1b      	ldr	r3, [r3, #32]
 800405a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	69db      	ldr	r3, [r3, #28]
 8004062:	4953      	ldr	r1, [pc, #332]	@ (80041b0 <HAL_RCC_ClockConfig+0x244>)
 8004064:	4313      	orrs	r3, r2
 8004066:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	f003 0302 	and.w	r3, r3, #2
 8004070:	2b00      	cmp	r3, #0
 8004072:	d010      	beq.n	8004096 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	68da      	ldr	r2, [r3, #12]
 8004078:	4b4d      	ldr	r3, [pc, #308]	@ (80041b0 <HAL_RCC_ClockConfig+0x244>)
 800407a:	699b      	ldr	r3, [r3, #24]
 800407c:	f003 030f 	and.w	r3, r3, #15
 8004080:	429a      	cmp	r2, r3
 8004082:	d908      	bls.n	8004096 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004084:	4b4a      	ldr	r3, [pc, #296]	@ (80041b0 <HAL_RCC_ClockConfig+0x244>)
 8004086:	699b      	ldr	r3, [r3, #24]
 8004088:	f023 020f 	bic.w	r2, r3, #15
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	68db      	ldr	r3, [r3, #12]
 8004090:	4947      	ldr	r1, [pc, #284]	@ (80041b0 <HAL_RCC_ClockConfig+0x244>)
 8004092:	4313      	orrs	r3, r2
 8004094:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	f003 0301 	and.w	r3, r3, #1
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d055      	beq.n	800414e <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 80040a2:	4b43      	ldr	r3, [pc, #268]	@ (80041b0 <HAL_RCC_ClockConfig+0x244>)
 80040a4:	699b      	ldr	r3, [r3, #24]
 80040a6:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	689b      	ldr	r3, [r3, #8]
 80040ae:	4940      	ldr	r1, [pc, #256]	@ (80041b0 <HAL_RCC_ClockConfig+0x244>)
 80040b0:	4313      	orrs	r3, r2
 80040b2:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	685b      	ldr	r3, [r3, #4]
 80040b8:	2b02      	cmp	r3, #2
 80040ba:	d107      	bne.n	80040cc <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80040bc:	4b3c      	ldr	r3, [pc, #240]	@ (80041b0 <HAL_RCC_ClockConfig+0x244>)
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	d121      	bne.n	800410c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80040c8:	2301      	movs	r3, #1
 80040ca:	e0f6      	b.n	80042ba <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	685b      	ldr	r3, [r3, #4]
 80040d0:	2b03      	cmp	r3, #3
 80040d2:	d107      	bne.n	80040e4 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80040d4:	4b36      	ldr	r3, [pc, #216]	@ (80041b0 <HAL_RCC_ClockConfig+0x244>)
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80040dc:	2b00      	cmp	r3, #0
 80040de:	d115      	bne.n	800410c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80040e0:	2301      	movs	r3, #1
 80040e2:	e0ea      	b.n	80042ba <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	685b      	ldr	r3, [r3, #4]
 80040e8:	2b01      	cmp	r3, #1
 80040ea:	d107      	bne.n	80040fc <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80040ec:	4b30      	ldr	r3, [pc, #192]	@ (80041b0 <HAL_RCC_ClockConfig+0x244>)
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	d109      	bne.n	800410c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80040f8:	2301      	movs	r3, #1
 80040fa:	e0de      	b.n	80042ba <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80040fc:	4b2c      	ldr	r3, [pc, #176]	@ (80041b0 <HAL_RCC_ClockConfig+0x244>)
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	f003 0304 	and.w	r3, r3, #4
 8004104:	2b00      	cmp	r3, #0
 8004106:	d101      	bne.n	800410c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8004108:	2301      	movs	r3, #1
 800410a:	e0d6      	b.n	80042ba <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800410c:	4b28      	ldr	r3, [pc, #160]	@ (80041b0 <HAL_RCC_ClockConfig+0x244>)
 800410e:	691b      	ldr	r3, [r3, #16]
 8004110:	f023 0207 	bic.w	r2, r3, #7
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	685b      	ldr	r3, [r3, #4]
 8004118:	4925      	ldr	r1, [pc, #148]	@ (80041b0 <HAL_RCC_ClockConfig+0x244>)
 800411a:	4313      	orrs	r3, r2
 800411c:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800411e:	f7fe f8ff 	bl	8002320 <HAL_GetTick>
 8004122:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004124:	e00a      	b.n	800413c <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004126:	f7fe f8fb 	bl	8002320 <HAL_GetTick>
 800412a:	4602      	mov	r2, r0
 800412c:	697b      	ldr	r3, [r7, #20]
 800412e:	1ad3      	subs	r3, r2, r3
 8004130:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004134:	4293      	cmp	r3, r2
 8004136:	d901      	bls.n	800413c <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8004138:	2303      	movs	r3, #3
 800413a:	e0be      	b.n	80042ba <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800413c:	4b1c      	ldr	r3, [pc, #112]	@ (80041b0 <HAL_RCC_ClockConfig+0x244>)
 800413e:	691b      	ldr	r3, [r3, #16]
 8004140:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	685b      	ldr	r3, [r3, #4]
 8004148:	00db      	lsls	r3, r3, #3
 800414a:	429a      	cmp	r2, r3
 800414c:	d1eb      	bne.n	8004126 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	f003 0302 	and.w	r3, r3, #2
 8004156:	2b00      	cmp	r3, #0
 8004158:	d010      	beq.n	800417c <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	68da      	ldr	r2, [r3, #12]
 800415e:	4b14      	ldr	r3, [pc, #80]	@ (80041b0 <HAL_RCC_ClockConfig+0x244>)
 8004160:	699b      	ldr	r3, [r3, #24]
 8004162:	f003 030f 	and.w	r3, r3, #15
 8004166:	429a      	cmp	r2, r3
 8004168:	d208      	bcs.n	800417c <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800416a:	4b11      	ldr	r3, [pc, #68]	@ (80041b0 <HAL_RCC_ClockConfig+0x244>)
 800416c:	699b      	ldr	r3, [r3, #24]
 800416e:	f023 020f 	bic.w	r2, r3, #15
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	68db      	ldr	r3, [r3, #12]
 8004176:	490e      	ldr	r1, [pc, #56]	@ (80041b0 <HAL_RCC_ClockConfig+0x244>)
 8004178:	4313      	orrs	r3, r2
 800417a:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800417c:	4b0b      	ldr	r3, [pc, #44]	@ (80041ac <HAL_RCC_ClockConfig+0x240>)
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	f003 030f 	and.w	r3, r3, #15
 8004184:	683a      	ldr	r2, [r7, #0]
 8004186:	429a      	cmp	r2, r3
 8004188:	d214      	bcs.n	80041b4 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800418a:	4b08      	ldr	r3, [pc, #32]	@ (80041ac <HAL_RCC_ClockConfig+0x240>)
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	f023 020f 	bic.w	r2, r3, #15
 8004192:	4906      	ldr	r1, [pc, #24]	@ (80041ac <HAL_RCC_ClockConfig+0x240>)
 8004194:	683b      	ldr	r3, [r7, #0]
 8004196:	4313      	orrs	r3, r2
 8004198:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800419a:	4b04      	ldr	r3, [pc, #16]	@ (80041ac <HAL_RCC_ClockConfig+0x240>)
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	f003 030f 	and.w	r3, r3, #15
 80041a2:	683a      	ldr	r2, [r7, #0]
 80041a4:	429a      	cmp	r2, r3
 80041a6:	d005      	beq.n	80041b4 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 80041a8:	2301      	movs	r3, #1
 80041aa:	e086      	b.n	80042ba <HAL_RCC_ClockConfig+0x34e>
 80041ac:	52002000 	.word	0x52002000
 80041b0:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	f003 0304 	and.w	r3, r3, #4
 80041bc:	2b00      	cmp	r3, #0
 80041be:	d010      	beq.n	80041e2 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	691a      	ldr	r2, [r3, #16]
 80041c4:	4b3f      	ldr	r3, [pc, #252]	@ (80042c4 <HAL_RCC_ClockConfig+0x358>)
 80041c6:	699b      	ldr	r3, [r3, #24]
 80041c8:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80041cc:	429a      	cmp	r2, r3
 80041ce:	d208      	bcs.n	80041e2 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80041d0:	4b3c      	ldr	r3, [pc, #240]	@ (80042c4 <HAL_RCC_ClockConfig+0x358>)
 80041d2:	699b      	ldr	r3, [r3, #24]
 80041d4:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	691b      	ldr	r3, [r3, #16]
 80041dc:	4939      	ldr	r1, [pc, #228]	@ (80042c4 <HAL_RCC_ClockConfig+0x358>)
 80041de:	4313      	orrs	r3, r2
 80041e0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	f003 0308 	and.w	r3, r3, #8
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	d010      	beq.n	8004210 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	695a      	ldr	r2, [r3, #20]
 80041f2:	4b34      	ldr	r3, [pc, #208]	@ (80042c4 <HAL_RCC_ClockConfig+0x358>)
 80041f4:	69db      	ldr	r3, [r3, #28]
 80041f6:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80041fa:	429a      	cmp	r2, r3
 80041fc:	d208      	bcs.n	8004210 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80041fe:	4b31      	ldr	r3, [pc, #196]	@ (80042c4 <HAL_RCC_ClockConfig+0x358>)
 8004200:	69db      	ldr	r3, [r3, #28]
 8004202:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	695b      	ldr	r3, [r3, #20]
 800420a:	492e      	ldr	r1, [pc, #184]	@ (80042c4 <HAL_RCC_ClockConfig+0x358>)
 800420c:	4313      	orrs	r3, r2
 800420e:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	f003 0310 	and.w	r3, r3, #16
 8004218:	2b00      	cmp	r3, #0
 800421a:	d010      	beq.n	800423e <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	699a      	ldr	r2, [r3, #24]
 8004220:	4b28      	ldr	r3, [pc, #160]	@ (80042c4 <HAL_RCC_ClockConfig+0x358>)
 8004222:	69db      	ldr	r3, [r3, #28]
 8004224:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8004228:	429a      	cmp	r2, r3
 800422a:	d208      	bcs.n	800423e <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800422c:	4b25      	ldr	r3, [pc, #148]	@ (80042c4 <HAL_RCC_ClockConfig+0x358>)
 800422e:	69db      	ldr	r3, [r3, #28]
 8004230:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	699b      	ldr	r3, [r3, #24]
 8004238:	4922      	ldr	r1, [pc, #136]	@ (80042c4 <HAL_RCC_ClockConfig+0x358>)
 800423a:	4313      	orrs	r3, r2
 800423c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	f003 0320 	and.w	r3, r3, #32
 8004246:	2b00      	cmp	r3, #0
 8004248:	d010      	beq.n	800426c <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	69da      	ldr	r2, [r3, #28]
 800424e:	4b1d      	ldr	r3, [pc, #116]	@ (80042c4 <HAL_RCC_ClockConfig+0x358>)
 8004250:	6a1b      	ldr	r3, [r3, #32]
 8004252:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004256:	429a      	cmp	r2, r3
 8004258:	d208      	bcs.n	800426c <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800425a:	4b1a      	ldr	r3, [pc, #104]	@ (80042c4 <HAL_RCC_ClockConfig+0x358>)
 800425c:	6a1b      	ldr	r3, [r3, #32]
 800425e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	69db      	ldr	r3, [r3, #28]
 8004266:	4917      	ldr	r1, [pc, #92]	@ (80042c4 <HAL_RCC_ClockConfig+0x358>)
 8004268:	4313      	orrs	r3, r2
 800426a:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800426c:	f000 f834 	bl	80042d8 <HAL_RCC_GetSysClockFreq>
 8004270:	4602      	mov	r2, r0
 8004272:	4b14      	ldr	r3, [pc, #80]	@ (80042c4 <HAL_RCC_ClockConfig+0x358>)
 8004274:	699b      	ldr	r3, [r3, #24]
 8004276:	0a1b      	lsrs	r3, r3, #8
 8004278:	f003 030f 	and.w	r3, r3, #15
 800427c:	4912      	ldr	r1, [pc, #72]	@ (80042c8 <HAL_RCC_ClockConfig+0x35c>)
 800427e:	5ccb      	ldrb	r3, [r1, r3]
 8004280:	f003 031f 	and.w	r3, r3, #31
 8004284:	fa22 f303 	lsr.w	r3, r2, r3
 8004288:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800428a:	4b0e      	ldr	r3, [pc, #56]	@ (80042c4 <HAL_RCC_ClockConfig+0x358>)
 800428c:	699b      	ldr	r3, [r3, #24]
 800428e:	f003 030f 	and.w	r3, r3, #15
 8004292:	4a0d      	ldr	r2, [pc, #52]	@ (80042c8 <HAL_RCC_ClockConfig+0x35c>)
 8004294:	5cd3      	ldrb	r3, [r2, r3]
 8004296:	f003 031f 	and.w	r3, r3, #31
 800429a:	693a      	ldr	r2, [r7, #16]
 800429c:	fa22 f303 	lsr.w	r3, r2, r3
 80042a0:	4a0a      	ldr	r2, [pc, #40]	@ (80042cc <HAL_RCC_ClockConfig+0x360>)
 80042a2:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80042a4:	4a0a      	ldr	r2, [pc, #40]	@ (80042d0 <HAL_RCC_ClockConfig+0x364>)
 80042a6:	693b      	ldr	r3, [r7, #16]
 80042a8:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 80042aa:	4b0a      	ldr	r3, [pc, #40]	@ (80042d4 <HAL_RCC_ClockConfig+0x368>)
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	4618      	mov	r0, r3
 80042b0:	f7fd ffec 	bl	800228c <HAL_InitTick>
 80042b4:	4603      	mov	r3, r0
 80042b6:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 80042b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80042ba:	4618      	mov	r0, r3
 80042bc:	3718      	adds	r7, #24
 80042be:	46bd      	mov	sp, r7
 80042c0:	bd80      	pop	{r7, pc}
 80042c2:	bf00      	nop
 80042c4:	58024400 	.word	0x58024400
 80042c8:	0800a2a4 	.word	0x0800a2a4
 80042cc:	24000004 	.word	0x24000004
 80042d0:	24000000 	.word	0x24000000
 80042d4:	24000008 	.word	0x24000008

080042d8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80042d8:	b480      	push	{r7}
 80042da:	b089      	sub	sp, #36	@ 0x24
 80042dc:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80042de:	4bb3      	ldr	r3, [pc, #716]	@ (80045ac <HAL_RCC_GetSysClockFreq+0x2d4>)
 80042e0:	691b      	ldr	r3, [r3, #16]
 80042e2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80042e6:	2b18      	cmp	r3, #24
 80042e8:	f200 8155 	bhi.w	8004596 <HAL_RCC_GetSysClockFreq+0x2be>
 80042ec:	a201      	add	r2, pc, #4	@ (adr r2, 80042f4 <HAL_RCC_GetSysClockFreq+0x1c>)
 80042ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80042f2:	bf00      	nop
 80042f4:	08004359 	.word	0x08004359
 80042f8:	08004597 	.word	0x08004597
 80042fc:	08004597 	.word	0x08004597
 8004300:	08004597 	.word	0x08004597
 8004304:	08004597 	.word	0x08004597
 8004308:	08004597 	.word	0x08004597
 800430c:	08004597 	.word	0x08004597
 8004310:	08004597 	.word	0x08004597
 8004314:	0800437f 	.word	0x0800437f
 8004318:	08004597 	.word	0x08004597
 800431c:	08004597 	.word	0x08004597
 8004320:	08004597 	.word	0x08004597
 8004324:	08004597 	.word	0x08004597
 8004328:	08004597 	.word	0x08004597
 800432c:	08004597 	.word	0x08004597
 8004330:	08004597 	.word	0x08004597
 8004334:	08004385 	.word	0x08004385
 8004338:	08004597 	.word	0x08004597
 800433c:	08004597 	.word	0x08004597
 8004340:	08004597 	.word	0x08004597
 8004344:	08004597 	.word	0x08004597
 8004348:	08004597 	.word	0x08004597
 800434c:	08004597 	.word	0x08004597
 8004350:	08004597 	.word	0x08004597
 8004354:	0800438b 	.word	0x0800438b
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004358:	4b94      	ldr	r3, [pc, #592]	@ (80045ac <HAL_RCC_GetSysClockFreq+0x2d4>)
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	f003 0320 	and.w	r3, r3, #32
 8004360:	2b00      	cmp	r3, #0
 8004362:	d009      	beq.n	8004378 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004364:	4b91      	ldr	r3, [pc, #580]	@ (80045ac <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	08db      	lsrs	r3, r3, #3
 800436a:	f003 0303 	and.w	r3, r3, #3
 800436e:	4a90      	ldr	r2, [pc, #576]	@ (80045b0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8004370:	fa22 f303 	lsr.w	r3, r2, r3
 8004374:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8004376:	e111      	b.n	800459c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8004378:	4b8d      	ldr	r3, [pc, #564]	@ (80045b0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800437a:	61bb      	str	r3, [r7, #24]
      break;
 800437c:	e10e      	b.n	800459c <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 800437e:	4b8d      	ldr	r3, [pc, #564]	@ (80045b4 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8004380:	61bb      	str	r3, [r7, #24]
      break;
 8004382:	e10b      	b.n	800459c <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8004384:	4b8c      	ldr	r3, [pc, #560]	@ (80045b8 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8004386:	61bb      	str	r3, [r7, #24]
      break;
 8004388:	e108      	b.n	800459c <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800438a:	4b88      	ldr	r3, [pc, #544]	@ (80045ac <HAL_RCC_GetSysClockFreq+0x2d4>)
 800438c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800438e:	f003 0303 	and.w	r3, r3, #3
 8004392:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8004394:	4b85      	ldr	r3, [pc, #532]	@ (80045ac <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004396:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004398:	091b      	lsrs	r3, r3, #4
 800439a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800439e:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 80043a0:	4b82      	ldr	r3, [pc, #520]	@ (80045ac <HAL_RCC_GetSysClockFreq+0x2d4>)
 80043a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80043a4:	f003 0301 	and.w	r3, r3, #1
 80043a8:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 80043aa:	4b80      	ldr	r3, [pc, #512]	@ (80045ac <HAL_RCC_GetSysClockFreq+0x2d4>)
 80043ac:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80043ae:	08db      	lsrs	r3, r3, #3
 80043b0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80043b4:	68fa      	ldr	r2, [r7, #12]
 80043b6:	fb02 f303 	mul.w	r3, r2, r3
 80043ba:	ee07 3a90 	vmov	s15, r3
 80043be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80043c2:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 80043c6:	693b      	ldr	r3, [r7, #16]
 80043c8:	2b00      	cmp	r3, #0
 80043ca:	f000 80e1 	beq.w	8004590 <HAL_RCC_GetSysClockFreq+0x2b8>
      {
        switch (pllsource)
 80043ce:	697b      	ldr	r3, [r7, #20]
 80043d0:	2b02      	cmp	r3, #2
 80043d2:	f000 8083 	beq.w	80044dc <HAL_RCC_GetSysClockFreq+0x204>
 80043d6:	697b      	ldr	r3, [r7, #20]
 80043d8:	2b02      	cmp	r3, #2
 80043da:	f200 80a1 	bhi.w	8004520 <HAL_RCC_GetSysClockFreq+0x248>
 80043de:	697b      	ldr	r3, [r7, #20]
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	d003      	beq.n	80043ec <HAL_RCC_GetSysClockFreq+0x114>
 80043e4:	697b      	ldr	r3, [r7, #20]
 80043e6:	2b01      	cmp	r3, #1
 80043e8:	d056      	beq.n	8004498 <HAL_RCC_GetSysClockFreq+0x1c0>
 80043ea:	e099      	b.n	8004520 <HAL_RCC_GetSysClockFreq+0x248>
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80043ec:	4b6f      	ldr	r3, [pc, #444]	@ (80045ac <HAL_RCC_GetSysClockFreq+0x2d4>)
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	f003 0320 	and.w	r3, r3, #32
 80043f4:	2b00      	cmp	r3, #0
 80043f6:	d02d      	beq.n	8004454 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80043f8:	4b6c      	ldr	r3, [pc, #432]	@ (80045ac <HAL_RCC_GetSysClockFreq+0x2d4>)
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	08db      	lsrs	r3, r3, #3
 80043fe:	f003 0303 	and.w	r3, r3, #3
 8004402:	4a6b      	ldr	r2, [pc, #428]	@ (80045b0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8004404:	fa22 f303 	lsr.w	r3, r2, r3
 8004408:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	ee07 3a90 	vmov	s15, r3
 8004410:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004414:	693b      	ldr	r3, [r7, #16]
 8004416:	ee07 3a90 	vmov	s15, r3
 800441a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800441e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004422:	4b62      	ldr	r3, [pc, #392]	@ (80045ac <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004424:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004426:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800442a:	ee07 3a90 	vmov	s15, r3
 800442e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004432:	ed97 6a02 	vldr	s12, [r7, #8]
 8004436:	eddf 5a61 	vldr	s11, [pc, #388]	@ 80045bc <HAL_RCC_GetSysClockFreq+0x2e4>
 800443a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800443e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004442:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004446:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800444a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800444e:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8004452:	e087      	b.n	8004564 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004454:	693b      	ldr	r3, [r7, #16]
 8004456:	ee07 3a90 	vmov	s15, r3
 800445a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800445e:	eddf 6a58 	vldr	s13, [pc, #352]	@ 80045c0 <HAL_RCC_GetSysClockFreq+0x2e8>
 8004462:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004466:	4b51      	ldr	r3, [pc, #324]	@ (80045ac <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004468:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800446a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800446e:	ee07 3a90 	vmov	s15, r3
 8004472:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004476:	ed97 6a02 	vldr	s12, [r7, #8]
 800447a:	eddf 5a50 	vldr	s11, [pc, #320]	@ 80045bc <HAL_RCC_GetSysClockFreq+0x2e4>
 800447e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004482:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004486:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800448a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800448e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004492:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8004496:	e065      	b.n	8004564 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004498:	693b      	ldr	r3, [r7, #16]
 800449a:	ee07 3a90 	vmov	s15, r3
 800449e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80044a2:	eddf 6a48 	vldr	s13, [pc, #288]	@ 80045c4 <HAL_RCC_GetSysClockFreq+0x2ec>
 80044a6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80044aa:	4b40      	ldr	r3, [pc, #256]	@ (80045ac <HAL_RCC_GetSysClockFreq+0x2d4>)
 80044ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80044ae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80044b2:	ee07 3a90 	vmov	s15, r3
 80044b6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80044ba:	ed97 6a02 	vldr	s12, [r7, #8]
 80044be:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 80045bc <HAL_RCC_GetSysClockFreq+0x2e4>
 80044c2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80044c6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80044ca:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80044ce:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80044d2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80044d6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80044da:	e043      	b.n	8004564 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80044dc:	693b      	ldr	r3, [r7, #16]
 80044de:	ee07 3a90 	vmov	s15, r3
 80044e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80044e6:	eddf 6a38 	vldr	s13, [pc, #224]	@ 80045c8 <HAL_RCC_GetSysClockFreq+0x2f0>
 80044ea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80044ee:	4b2f      	ldr	r3, [pc, #188]	@ (80045ac <HAL_RCC_GetSysClockFreq+0x2d4>)
 80044f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80044f2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80044f6:	ee07 3a90 	vmov	s15, r3
 80044fa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80044fe:	ed97 6a02 	vldr	s12, [r7, #8]
 8004502:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 80045bc <HAL_RCC_GetSysClockFreq+0x2e4>
 8004506:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800450a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800450e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004512:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004516:	ee67 7a27 	vmul.f32	s15, s14, s15
 800451a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800451e:	e021      	b.n	8004564 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004520:	693b      	ldr	r3, [r7, #16]
 8004522:	ee07 3a90 	vmov	s15, r3
 8004526:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800452a:	eddf 6a26 	vldr	s13, [pc, #152]	@ 80045c4 <HAL_RCC_GetSysClockFreq+0x2ec>
 800452e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004532:	4b1e      	ldr	r3, [pc, #120]	@ (80045ac <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004534:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004536:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800453a:	ee07 3a90 	vmov	s15, r3
 800453e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004542:	ed97 6a02 	vldr	s12, [r7, #8]
 8004546:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 80045bc <HAL_RCC_GetSysClockFreq+0x2e4>
 800454a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800454e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004552:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004556:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800455a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800455e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8004562:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8004564:	4b11      	ldr	r3, [pc, #68]	@ (80045ac <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004566:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004568:	0a5b      	lsrs	r3, r3, #9
 800456a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800456e:	3301      	adds	r3, #1
 8004570:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8004572:	683b      	ldr	r3, [r7, #0]
 8004574:	ee07 3a90 	vmov	s15, r3
 8004578:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800457c:	edd7 6a07 	vldr	s13, [r7, #28]
 8004580:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004584:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004588:	ee17 3a90 	vmov	r3, s15
 800458c:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 800458e:	e005      	b.n	800459c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8004590:	2300      	movs	r3, #0
 8004592:	61bb      	str	r3, [r7, #24]
      break;
 8004594:	e002      	b.n	800459c <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8004596:	4b07      	ldr	r3, [pc, #28]	@ (80045b4 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8004598:	61bb      	str	r3, [r7, #24]
      break;
 800459a:	bf00      	nop
  }

  return sysclockfreq;
 800459c:	69bb      	ldr	r3, [r7, #24]
}
 800459e:	4618      	mov	r0, r3
 80045a0:	3724      	adds	r7, #36	@ 0x24
 80045a2:	46bd      	mov	sp, r7
 80045a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045a8:	4770      	bx	lr
 80045aa:	bf00      	nop
 80045ac:	58024400 	.word	0x58024400
 80045b0:	03d09000 	.word	0x03d09000
 80045b4:	003d0900 	.word	0x003d0900
 80045b8:	017d7840 	.word	0x017d7840
 80045bc:	46000000 	.word	0x46000000
 80045c0:	4c742400 	.word	0x4c742400
 80045c4:	4a742400 	.word	0x4a742400
 80045c8:	4bbebc20 	.word	0x4bbebc20

080045cc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80045cc:	b580      	push	{r7, lr}
 80045ce:	b082      	sub	sp, #8
 80045d0:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80045d2:	f7ff fe81 	bl	80042d8 <HAL_RCC_GetSysClockFreq>
 80045d6:	4602      	mov	r2, r0
 80045d8:	4b10      	ldr	r3, [pc, #64]	@ (800461c <HAL_RCC_GetHCLKFreq+0x50>)
 80045da:	699b      	ldr	r3, [r3, #24]
 80045dc:	0a1b      	lsrs	r3, r3, #8
 80045de:	f003 030f 	and.w	r3, r3, #15
 80045e2:	490f      	ldr	r1, [pc, #60]	@ (8004620 <HAL_RCC_GetHCLKFreq+0x54>)
 80045e4:	5ccb      	ldrb	r3, [r1, r3]
 80045e6:	f003 031f 	and.w	r3, r3, #31
 80045ea:	fa22 f303 	lsr.w	r3, r2, r3
 80045ee:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80045f0:	4b0a      	ldr	r3, [pc, #40]	@ (800461c <HAL_RCC_GetHCLKFreq+0x50>)
 80045f2:	699b      	ldr	r3, [r3, #24]
 80045f4:	f003 030f 	and.w	r3, r3, #15
 80045f8:	4a09      	ldr	r2, [pc, #36]	@ (8004620 <HAL_RCC_GetHCLKFreq+0x54>)
 80045fa:	5cd3      	ldrb	r3, [r2, r3]
 80045fc:	f003 031f 	and.w	r3, r3, #31
 8004600:	687a      	ldr	r2, [r7, #4]
 8004602:	fa22 f303 	lsr.w	r3, r2, r3
 8004606:	4a07      	ldr	r2, [pc, #28]	@ (8004624 <HAL_RCC_GetHCLKFreq+0x58>)
 8004608:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800460a:	4a07      	ldr	r2, [pc, #28]	@ (8004628 <HAL_RCC_GetHCLKFreq+0x5c>)
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8004610:	4b04      	ldr	r3, [pc, #16]	@ (8004624 <HAL_RCC_GetHCLKFreq+0x58>)
 8004612:	681b      	ldr	r3, [r3, #0]
}
 8004614:	4618      	mov	r0, r3
 8004616:	3708      	adds	r7, #8
 8004618:	46bd      	mov	sp, r7
 800461a:	bd80      	pop	{r7, pc}
 800461c:	58024400 	.word	0x58024400
 8004620:	0800a2a4 	.word	0x0800a2a4
 8004624:	24000004 	.word	0x24000004
 8004628:	24000000 	.word	0x24000000

0800462c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800462c:	b580      	push	{r7, lr}
 800462e:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8004630:	f7ff ffcc 	bl	80045cc <HAL_RCC_GetHCLKFreq>
 8004634:	4602      	mov	r2, r0
 8004636:	4b06      	ldr	r3, [pc, #24]	@ (8004650 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004638:	69db      	ldr	r3, [r3, #28]
 800463a:	091b      	lsrs	r3, r3, #4
 800463c:	f003 0307 	and.w	r3, r3, #7
 8004640:	4904      	ldr	r1, [pc, #16]	@ (8004654 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004642:	5ccb      	ldrb	r3, [r1, r3]
 8004644:	f003 031f 	and.w	r3, r3, #31
 8004648:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 800464c:	4618      	mov	r0, r3
 800464e:	bd80      	pop	{r7, pc}
 8004650:	58024400 	.word	0x58024400
 8004654:	0800a2a4 	.word	0x0800a2a4

08004658 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004658:	b580      	push	{r7, lr}
 800465a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 800465c:	f7ff ffb6 	bl	80045cc <HAL_RCC_GetHCLKFreq>
 8004660:	4602      	mov	r2, r0
 8004662:	4b06      	ldr	r3, [pc, #24]	@ (800467c <HAL_RCC_GetPCLK2Freq+0x24>)
 8004664:	69db      	ldr	r3, [r3, #28]
 8004666:	0a1b      	lsrs	r3, r3, #8
 8004668:	f003 0307 	and.w	r3, r3, #7
 800466c:	4904      	ldr	r1, [pc, #16]	@ (8004680 <HAL_RCC_GetPCLK2Freq+0x28>)
 800466e:	5ccb      	ldrb	r3, [r1, r3]
 8004670:	f003 031f 	and.w	r3, r3, #31
 8004674:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8004678:	4618      	mov	r0, r3
 800467a:	bd80      	pop	{r7, pc}
 800467c:	58024400 	.word	0x58024400
 8004680:	0800a2a4 	.word	0x0800a2a4

08004684 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004684:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004688:	b0ca      	sub	sp, #296	@ 0x128
 800468a:	af00      	add	r7, sp, #0
 800468c:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004690:	2300      	movs	r3, #0
 8004692:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004696:	2300      	movs	r3, #0
 8004698:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800469c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80046a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80046a4:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 80046a8:	2500      	movs	r5, #0
 80046aa:	ea54 0305 	orrs.w	r3, r4, r5
 80046ae:	d049      	beq.n	8004744 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 80046b0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80046b4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80046b6:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80046ba:	d02f      	beq.n	800471c <HAL_RCCEx_PeriphCLKConfig+0x98>
 80046bc:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80046c0:	d828      	bhi.n	8004714 <HAL_RCCEx_PeriphCLKConfig+0x90>
 80046c2:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80046c6:	d01a      	beq.n	80046fe <HAL_RCCEx_PeriphCLKConfig+0x7a>
 80046c8:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80046cc:	d822      	bhi.n	8004714 <HAL_RCCEx_PeriphCLKConfig+0x90>
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	d003      	beq.n	80046da <HAL_RCCEx_PeriphCLKConfig+0x56>
 80046d2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80046d6:	d007      	beq.n	80046e8 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80046d8:	e01c      	b.n	8004714 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80046da:	4bb8      	ldr	r3, [pc, #736]	@ (80049bc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80046dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80046de:	4ab7      	ldr	r2, [pc, #732]	@ (80049bc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80046e0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80046e4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80046e6:	e01a      	b.n	800471e <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80046e8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80046ec:	3308      	adds	r3, #8
 80046ee:	2102      	movs	r1, #2
 80046f0:	4618      	mov	r0, r3
 80046f2:	f001 fc8f 	bl	8006014 <RCCEx_PLL2_Config>
 80046f6:	4603      	mov	r3, r0
 80046f8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80046fc:	e00f      	b.n	800471e <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80046fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004702:	3328      	adds	r3, #40	@ 0x28
 8004704:	2102      	movs	r1, #2
 8004706:	4618      	mov	r0, r3
 8004708:	f001 fd36 	bl	8006178 <RCCEx_PLL3_Config>
 800470c:	4603      	mov	r3, r0
 800470e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8004712:	e004      	b.n	800471e <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004714:	2301      	movs	r3, #1
 8004716:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800471a:	e000      	b.n	800471e <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 800471c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800471e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004722:	2b00      	cmp	r3, #0
 8004724:	d10a      	bne.n	800473c <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8004726:	4ba5      	ldr	r3, [pc, #660]	@ (80049bc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004728:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800472a:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 800472e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004732:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004734:	4aa1      	ldr	r2, [pc, #644]	@ (80049bc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004736:	430b      	orrs	r3, r1
 8004738:	6513      	str	r3, [r2, #80]	@ 0x50
 800473a:	e003      	b.n	8004744 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800473c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004740:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8004744:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004748:	e9d3 2300 	ldrd	r2, r3, [r3]
 800474c:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 8004750:	f04f 0900 	mov.w	r9, #0
 8004754:	ea58 0309 	orrs.w	r3, r8, r9
 8004758:	d047      	beq.n	80047ea <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 800475a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800475e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004760:	2b04      	cmp	r3, #4
 8004762:	d82a      	bhi.n	80047ba <HAL_RCCEx_PeriphCLKConfig+0x136>
 8004764:	a201      	add	r2, pc, #4	@ (adr r2, 800476c <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8004766:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800476a:	bf00      	nop
 800476c:	08004781 	.word	0x08004781
 8004770:	0800478f 	.word	0x0800478f
 8004774:	080047a5 	.word	0x080047a5
 8004778:	080047c3 	.word	0x080047c3
 800477c:	080047c3 	.word	0x080047c3
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004780:	4b8e      	ldr	r3, [pc, #568]	@ (80049bc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004782:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004784:	4a8d      	ldr	r2, [pc, #564]	@ (80049bc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004786:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800478a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800478c:	e01a      	b.n	80047c4 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800478e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004792:	3308      	adds	r3, #8
 8004794:	2100      	movs	r1, #0
 8004796:	4618      	mov	r0, r3
 8004798:	f001 fc3c 	bl	8006014 <RCCEx_PLL2_Config>
 800479c:	4603      	mov	r3, r0
 800479e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80047a2:	e00f      	b.n	80047c4 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80047a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80047a8:	3328      	adds	r3, #40	@ 0x28
 80047aa:	2100      	movs	r1, #0
 80047ac:	4618      	mov	r0, r3
 80047ae:	f001 fce3 	bl	8006178 <RCCEx_PLL3_Config>
 80047b2:	4603      	mov	r3, r0
 80047b4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80047b8:	e004      	b.n	80047c4 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80047ba:	2301      	movs	r3, #1
 80047bc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80047c0:	e000      	b.n	80047c4 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 80047c2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80047c4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	d10a      	bne.n	80047e2 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80047cc:	4b7b      	ldr	r3, [pc, #492]	@ (80049bc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80047ce:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80047d0:	f023 0107 	bic.w	r1, r3, #7
 80047d4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80047d8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80047da:	4a78      	ldr	r2, [pc, #480]	@ (80049bc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80047dc:	430b      	orrs	r3, r1
 80047de:	6513      	str	r3, [r2, #80]	@ 0x50
 80047e0:	e003      	b.n	80047ea <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80047e2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80047e6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 80047ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80047ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80047f2:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 80047f6:	f04f 0b00 	mov.w	fp, #0
 80047fa:	ea5a 030b 	orrs.w	r3, sl, fp
 80047fe:	d04c      	beq.n	800489a <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 8004800:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004804:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004806:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800480a:	d030      	beq.n	800486e <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 800480c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004810:	d829      	bhi.n	8004866 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8004812:	2bc0      	cmp	r3, #192	@ 0xc0
 8004814:	d02d      	beq.n	8004872 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8004816:	2bc0      	cmp	r3, #192	@ 0xc0
 8004818:	d825      	bhi.n	8004866 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800481a:	2b80      	cmp	r3, #128	@ 0x80
 800481c:	d018      	beq.n	8004850 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 800481e:	2b80      	cmp	r3, #128	@ 0x80
 8004820:	d821      	bhi.n	8004866 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8004822:	2b00      	cmp	r3, #0
 8004824:	d002      	beq.n	800482c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 8004826:	2b40      	cmp	r3, #64	@ 0x40
 8004828:	d007      	beq.n	800483a <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 800482a:	e01c      	b.n	8004866 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800482c:	4b63      	ldr	r3, [pc, #396]	@ (80049bc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800482e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004830:	4a62      	ldr	r2, [pc, #392]	@ (80049bc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004832:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004836:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8004838:	e01c      	b.n	8004874 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800483a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800483e:	3308      	adds	r3, #8
 8004840:	2100      	movs	r1, #0
 8004842:	4618      	mov	r0, r3
 8004844:	f001 fbe6 	bl	8006014 <RCCEx_PLL2_Config>
 8004848:	4603      	mov	r3, r0
 800484a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800484e:	e011      	b.n	8004874 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004850:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004854:	3328      	adds	r3, #40	@ 0x28
 8004856:	2100      	movs	r1, #0
 8004858:	4618      	mov	r0, r3
 800485a:	f001 fc8d 	bl	8006178 <RCCEx_PLL3_Config>
 800485e:	4603      	mov	r3, r0
 8004860:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8004864:	e006      	b.n	8004874 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004866:	2301      	movs	r3, #1
 8004868:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800486c:	e002      	b.n	8004874 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 800486e:	bf00      	nop
 8004870:	e000      	b.n	8004874 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8004872:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004874:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004878:	2b00      	cmp	r3, #0
 800487a:	d10a      	bne.n	8004892 <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 800487c:	4b4f      	ldr	r3, [pc, #316]	@ (80049bc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800487e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004880:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 8004884:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004888:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800488a:	4a4c      	ldr	r2, [pc, #304]	@ (80049bc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800488c:	430b      	orrs	r3, r1
 800488e:	6513      	str	r3, [r2, #80]	@ 0x50
 8004890:	e003      	b.n	800489a <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004892:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004896:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800489a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800489e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048a2:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 80048a6:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 80048aa:	2300      	movs	r3, #0
 80048ac:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 80048b0:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 80048b4:	460b      	mov	r3, r1
 80048b6:	4313      	orrs	r3, r2
 80048b8:	d053      	beq.n	8004962 <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 80048ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80048be:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80048c2:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80048c6:	d035      	beq.n	8004934 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 80048c8:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80048cc:	d82e      	bhi.n	800492c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 80048ce:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 80048d2:	d031      	beq.n	8004938 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 80048d4:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 80048d8:	d828      	bhi.n	800492c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 80048da:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80048de:	d01a      	beq.n	8004916 <HAL_RCCEx_PeriphCLKConfig+0x292>
 80048e0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80048e4:	d822      	bhi.n	800492c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	d003      	beq.n	80048f2 <HAL_RCCEx_PeriphCLKConfig+0x26e>
 80048ea:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80048ee:	d007      	beq.n	8004900 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 80048f0:	e01c      	b.n	800492c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80048f2:	4b32      	ldr	r3, [pc, #200]	@ (80049bc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80048f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80048f6:	4a31      	ldr	r2, [pc, #196]	@ (80049bc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80048f8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80048fc:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80048fe:	e01c      	b.n	800493a <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004900:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004904:	3308      	adds	r3, #8
 8004906:	2100      	movs	r1, #0
 8004908:	4618      	mov	r0, r3
 800490a:	f001 fb83 	bl	8006014 <RCCEx_PLL2_Config>
 800490e:	4603      	mov	r3, r0
 8004910:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8004914:	e011      	b.n	800493a <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004916:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800491a:	3328      	adds	r3, #40	@ 0x28
 800491c:	2100      	movs	r1, #0
 800491e:	4618      	mov	r0, r3
 8004920:	f001 fc2a 	bl	8006178 <RCCEx_PLL3_Config>
 8004924:	4603      	mov	r3, r0
 8004926:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800492a:	e006      	b.n	800493a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800492c:	2301      	movs	r3, #1
 800492e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004932:	e002      	b.n	800493a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8004934:	bf00      	nop
 8004936:	e000      	b.n	800493a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8004938:	bf00      	nop
    }

    if (ret == HAL_OK)
 800493a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800493e:	2b00      	cmp	r3, #0
 8004940:	d10b      	bne.n	800495a <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8004942:	4b1e      	ldr	r3, [pc, #120]	@ (80049bc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004944:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004946:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 800494a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800494e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8004952:	4a1a      	ldr	r2, [pc, #104]	@ (80049bc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004954:	430b      	orrs	r3, r1
 8004956:	6593      	str	r3, [r2, #88]	@ 0x58
 8004958:	e003      	b.n	8004962 <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800495a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800495e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8004962:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004966:	e9d3 2300 	ldrd	r2, r3, [r3]
 800496a:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 800496e:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8004972:	2300      	movs	r3, #0
 8004974:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8004978:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 800497c:	460b      	mov	r3, r1
 800497e:	4313      	orrs	r3, r2
 8004980:	d056      	beq.n	8004a30 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8004982:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004986:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800498a:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800498e:	d038      	beq.n	8004a02 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8004990:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004994:	d831      	bhi.n	80049fa <HAL_RCCEx_PeriphCLKConfig+0x376>
 8004996:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800499a:	d034      	beq.n	8004a06 <HAL_RCCEx_PeriphCLKConfig+0x382>
 800499c:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80049a0:	d82b      	bhi.n	80049fa <HAL_RCCEx_PeriphCLKConfig+0x376>
 80049a2:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80049a6:	d01d      	beq.n	80049e4 <HAL_RCCEx_PeriphCLKConfig+0x360>
 80049a8:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80049ac:	d825      	bhi.n	80049fa <HAL_RCCEx_PeriphCLKConfig+0x376>
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	d006      	beq.n	80049c0 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 80049b2:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80049b6:	d00a      	beq.n	80049ce <HAL_RCCEx_PeriphCLKConfig+0x34a>
 80049b8:	e01f      	b.n	80049fa <HAL_RCCEx_PeriphCLKConfig+0x376>
 80049ba:	bf00      	nop
 80049bc:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80049c0:	4ba2      	ldr	r3, [pc, #648]	@ (8004c4c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80049c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80049c4:	4aa1      	ldr	r2, [pc, #644]	@ (8004c4c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80049c6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80049ca:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80049cc:	e01c      	b.n	8004a08 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80049ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80049d2:	3308      	adds	r3, #8
 80049d4:	2100      	movs	r1, #0
 80049d6:	4618      	mov	r0, r3
 80049d8:	f001 fb1c 	bl	8006014 <RCCEx_PLL2_Config>
 80049dc:	4603      	mov	r3, r0
 80049de:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 80049e2:	e011      	b.n	8004a08 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80049e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80049e8:	3328      	adds	r3, #40	@ 0x28
 80049ea:	2100      	movs	r1, #0
 80049ec:	4618      	mov	r0, r3
 80049ee:	f001 fbc3 	bl	8006178 <RCCEx_PLL3_Config>
 80049f2:	4603      	mov	r3, r0
 80049f4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80049f8:	e006      	b.n	8004a08 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 80049fa:	2301      	movs	r3, #1
 80049fc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004a00:	e002      	b.n	8004a08 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8004a02:	bf00      	nop
 8004a04:	e000      	b.n	8004a08 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8004a06:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004a08:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004a0c:	2b00      	cmp	r3, #0
 8004a0e:	d10b      	bne.n	8004a28 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8004a10:	4b8e      	ldr	r3, [pc, #568]	@ (8004c4c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004a12:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004a14:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8004a18:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004a1c:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8004a20:	4a8a      	ldr	r2, [pc, #552]	@ (8004c4c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004a22:	430b      	orrs	r3, r1
 8004a24:	6593      	str	r3, [r2, #88]	@ 0x58
 8004a26:	e003      	b.n	8004a30 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004a28:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004a2c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8004a30:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004a34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a38:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8004a3c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8004a40:	2300      	movs	r3, #0
 8004a42:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8004a46:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 8004a4a:	460b      	mov	r3, r1
 8004a4c:	4313      	orrs	r3, r2
 8004a4e:	d03a      	beq.n	8004ac6 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 8004a50:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004a54:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004a56:	2b30      	cmp	r3, #48	@ 0x30
 8004a58:	d01f      	beq.n	8004a9a <HAL_RCCEx_PeriphCLKConfig+0x416>
 8004a5a:	2b30      	cmp	r3, #48	@ 0x30
 8004a5c:	d819      	bhi.n	8004a92 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8004a5e:	2b20      	cmp	r3, #32
 8004a60:	d00c      	beq.n	8004a7c <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 8004a62:	2b20      	cmp	r3, #32
 8004a64:	d815      	bhi.n	8004a92 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	d019      	beq.n	8004a9e <HAL_RCCEx_PeriphCLKConfig+0x41a>
 8004a6a:	2b10      	cmp	r3, #16
 8004a6c:	d111      	bne.n	8004a92 <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004a6e:	4b77      	ldr	r3, [pc, #476]	@ (8004c4c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004a70:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004a72:	4a76      	ldr	r2, [pc, #472]	@ (8004c4c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004a74:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004a78:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8004a7a:	e011      	b.n	8004aa0 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004a7c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004a80:	3308      	adds	r3, #8
 8004a82:	2102      	movs	r1, #2
 8004a84:	4618      	mov	r0, r3
 8004a86:	f001 fac5 	bl	8006014 <RCCEx_PLL2_Config>
 8004a8a:	4603      	mov	r3, r0
 8004a8c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8004a90:	e006      	b.n	8004aa0 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8004a92:	2301      	movs	r3, #1
 8004a94:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004a98:	e002      	b.n	8004aa0 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8004a9a:	bf00      	nop
 8004a9c:	e000      	b.n	8004aa0 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8004a9e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004aa0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004aa4:	2b00      	cmp	r3, #0
 8004aa6:	d10a      	bne.n	8004abe <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8004aa8:	4b68      	ldr	r3, [pc, #416]	@ (8004c4c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004aaa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004aac:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8004ab0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004ab4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004ab6:	4a65      	ldr	r2, [pc, #404]	@ (8004c4c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004ab8:	430b      	orrs	r3, r1
 8004aba:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004abc:	e003      	b.n	8004ac6 <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004abe:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004ac2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8004ac6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004aca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ace:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 8004ad2:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8004ad6:	2300      	movs	r3, #0
 8004ad8:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8004adc:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8004ae0:	460b      	mov	r3, r1
 8004ae2:	4313      	orrs	r3, r2
 8004ae4:	d051      	beq.n	8004b8a <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8004ae6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004aea:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004aec:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004af0:	d035      	beq.n	8004b5e <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8004af2:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004af6:	d82e      	bhi.n	8004b56 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8004af8:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8004afc:	d031      	beq.n	8004b62 <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8004afe:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8004b02:	d828      	bhi.n	8004b56 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8004b04:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004b08:	d01a      	beq.n	8004b40 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 8004b0a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004b0e:	d822      	bhi.n	8004b56 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8004b10:	2b00      	cmp	r3, #0
 8004b12:	d003      	beq.n	8004b1c <HAL_RCCEx_PeriphCLKConfig+0x498>
 8004b14:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004b18:	d007      	beq.n	8004b2a <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 8004b1a:	e01c      	b.n	8004b56 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004b1c:	4b4b      	ldr	r3, [pc, #300]	@ (8004c4c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004b1e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004b20:	4a4a      	ldr	r2, [pc, #296]	@ (8004c4c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004b22:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004b26:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8004b28:	e01c      	b.n	8004b64 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004b2a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004b2e:	3308      	adds	r3, #8
 8004b30:	2100      	movs	r1, #0
 8004b32:	4618      	mov	r0, r3
 8004b34:	f001 fa6e 	bl	8006014 <RCCEx_PLL2_Config>
 8004b38:	4603      	mov	r3, r0
 8004b3a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8004b3e:	e011      	b.n	8004b64 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004b40:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004b44:	3328      	adds	r3, #40	@ 0x28
 8004b46:	2100      	movs	r1, #0
 8004b48:	4618      	mov	r0, r3
 8004b4a:	f001 fb15 	bl	8006178 <RCCEx_PLL3_Config>
 8004b4e:	4603      	mov	r3, r0
 8004b50:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8004b54:	e006      	b.n	8004b64 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004b56:	2301      	movs	r3, #1
 8004b58:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004b5c:	e002      	b.n	8004b64 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8004b5e:	bf00      	nop
 8004b60:	e000      	b.n	8004b64 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8004b62:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004b64:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004b68:	2b00      	cmp	r3, #0
 8004b6a:	d10a      	bne.n	8004b82 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8004b6c:	4b37      	ldr	r3, [pc, #220]	@ (8004c4c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004b6e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004b70:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8004b74:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004b78:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004b7a:	4a34      	ldr	r2, [pc, #208]	@ (8004c4c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004b7c:	430b      	orrs	r3, r1
 8004b7e:	6513      	str	r3, [r2, #80]	@ 0x50
 8004b80:	e003      	b.n	8004b8a <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004b82:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004b86:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8004b8a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004b8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b92:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8004b96:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8004b9a:	2300      	movs	r3, #0
 8004b9c:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8004ba0:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8004ba4:	460b      	mov	r3, r1
 8004ba6:	4313      	orrs	r3, r2
 8004ba8:	d056      	beq.n	8004c58 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8004baa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004bae:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004bb0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004bb4:	d033      	beq.n	8004c1e <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8004bb6:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004bba:	d82c      	bhi.n	8004c16 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8004bbc:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8004bc0:	d02f      	beq.n	8004c22 <HAL_RCCEx_PeriphCLKConfig+0x59e>
 8004bc2:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8004bc6:	d826      	bhi.n	8004c16 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8004bc8:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8004bcc:	d02b      	beq.n	8004c26 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 8004bce:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8004bd2:	d820      	bhi.n	8004c16 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8004bd4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004bd8:	d012      	beq.n	8004c00 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 8004bda:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004bde:	d81a      	bhi.n	8004c16 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8004be0:	2b00      	cmp	r3, #0
 8004be2:	d022      	beq.n	8004c2a <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8004be4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004be8:	d115      	bne.n	8004c16 <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004bea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004bee:	3308      	adds	r3, #8
 8004bf0:	2101      	movs	r1, #1
 8004bf2:	4618      	mov	r0, r3
 8004bf4:	f001 fa0e 	bl	8006014 <RCCEx_PLL2_Config>
 8004bf8:	4603      	mov	r3, r0
 8004bfa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8004bfe:	e015      	b.n	8004c2c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004c00:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004c04:	3328      	adds	r3, #40	@ 0x28
 8004c06:	2101      	movs	r1, #1
 8004c08:	4618      	mov	r0, r3
 8004c0a:	f001 fab5 	bl	8006178 <RCCEx_PLL3_Config>
 8004c0e:	4603      	mov	r3, r0
 8004c10:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8004c14:	e00a      	b.n	8004c2c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004c16:	2301      	movs	r3, #1
 8004c18:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004c1c:	e006      	b.n	8004c2c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8004c1e:	bf00      	nop
 8004c20:	e004      	b.n	8004c2c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8004c22:	bf00      	nop
 8004c24:	e002      	b.n	8004c2c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8004c26:	bf00      	nop
 8004c28:	e000      	b.n	8004c2c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8004c2a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004c2c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004c30:	2b00      	cmp	r3, #0
 8004c32:	d10d      	bne.n	8004c50 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8004c34:	4b05      	ldr	r3, [pc, #20]	@ (8004c4c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004c36:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004c38:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8004c3c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004c40:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004c42:	4a02      	ldr	r2, [pc, #8]	@ (8004c4c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004c44:	430b      	orrs	r3, r1
 8004c46:	6513      	str	r3, [r2, #80]	@ 0x50
 8004c48:	e006      	b.n	8004c58 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8004c4a:	bf00      	nop
 8004c4c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004c50:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004c54:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8004c58:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004c5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c60:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8004c64:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8004c68:	2300      	movs	r3, #0
 8004c6a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8004c6e:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 8004c72:	460b      	mov	r3, r1
 8004c74:	4313      	orrs	r3, r2
 8004c76:	d055      	beq.n	8004d24 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8004c78:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004c7c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8004c80:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004c84:	d033      	beq.n	8004cee <HAL_RCCEx_PeriphCLKConfig+0x66a>
 8004c86:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004c8a:	d82c      	bhi.n	8004ce6 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8004c8c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004c90:	d02f      	beq.n	8004cf2 <HAL_RCCEx_PeriphCLKConfig+0x66e>
 8004c92:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004c96:	d826      	bhi.n	8004ce6 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8004c98:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8004c9c:	d02b      	beq.n	8004cf6 <HAL_RCCEx_PeriphCLKConfig+0x672>
 8004c9e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8004ca2:	d820      	bhi.n	8004ce6 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8004ca4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004ca8:	d012      	beq.n	8004cd0 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 8004caa:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004cae:	d81a      	bhi.n	8004ce6 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8004cb0:	2b00      	cmp	r3, #0
 8004cb2:	d022      	beq.n	8004cfa <HAL_RCCEx_PeriphCLKConfig+0x676>
 8004cb4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004cb8:	d115      	bne.n	8004ce6 <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004cba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004cbe:	3308      	adds	r3, #8
 8004cc0:	2101      	movs	r1, #1
 8004cc2:	4618      	mov	r0, r3
 8004cc4:	f001 f9a6 	bl	8006014 <RCCEx_PLL2_Config>
 8004cc8:	4603      	mov	r3, r0
 8004cca:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8004cce:	e015      	b.n	8004cfc <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004cd0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004cd4:	3328      	adds	r3, #40	@ 0x28
 8004cd6:	2101      	movs	r1, #1
 8004cd8:	4618      	mov	r0, r3
 8004cda:	f001 fa4d 	bl	8006178 <RCCEx_PLL3_Config>
 8004cde:	4603      	mov	r3, r0
 8004ce0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8004ce4:	e00a      	b.n	8004cfc <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8004ce6:	2301      	movs	r3, #1
 8004ce8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004cec:	e006      	b.n	8004cfc <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8004cee:	bf00      	nop
 8004cf0:	e004      	b.n	8004cfc <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8004cf2:	bf00      	nop
 8004cf4:	e002      	b.n	8004cfc <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8004cf6:	bf00      	nop
 8004cf8:	e000      	b.n	8004cfc <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8004cfa:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004cfc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004d00:	2b00      	cmp	r3, #0
 8004d02:	d10b      	bne.n	8004d1c <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8004d04:	4ba3      	ldr	r3, [pc, #652]	@ (8004f94 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004d06:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004d08:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8004d0c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004d10:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8004d14:	4a9f      	ldr	r2, [pc, #636]	@ (8004f94 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004d16:	430b      	orrs	r3, r1
 8004d18:	6593      	str	r3, [r2, #88]	@ 0x58
 8004d1a:	e003      	b.n	8004d24 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004d1c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004d20:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8004d24:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004d28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d2c:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8004d30:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8004d34:	2300      	movs	r3, #0
 8004d36:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8004d3a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8004d3e:	460b      	mov	r3, r1
 8004d40:	4313      	orrs	r3, r2
 8004d42:	d037      	beq.n	8004db4 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8004d44:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004d48:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004d4a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004d4e:	d00e      	beq.n	8004d6e <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 8004d50:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004d54:	d816      	bhi.n	8004d84 <HAL_RCCEx_PeriphCLKConfig+0x700>
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	d018      	beq.n	8004d8c <HAL_RCCEx_PeriphCLKConfig+0x708>
 8004d5a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004d5e:	d111      	bne.n	8004d84 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004d60:	4b8c      	ldr	r3, [pc, #560]	@ (8004f94 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004d62:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d64:	4a8b      	ldr	r2, [pc, #556]	@ (8004f94 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004d66:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004d6a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8004d6c:	e00f      	b.n	8004d8e <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004d6e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004d72:	3308      	adds	r3, #8
 8004d74:	2101      	movs	r1, #1
 8004d76:	4618      	mov	r0, r3
 8004d78:	f001 f94c 	bl	8006014 <RCCEx_PLL2_Config>
 8004d7c:	4603      	mov	r3, r0
 8004d7e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8004d82:	e004      	b.n	8004d8e <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004d84:	2301      	movs	r3, #1
 8004d86:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004d8a:	e000      	b.n	8004d8e <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 8004d8c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004d8e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	d10a      	bne.n	8004dac <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8004d96:	4b7f      	ldr	r3, [pc, #508]	@ (8004f94 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004d98:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004d9a:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8004d9e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004da2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004da4:	4a7b      	ldr	r2, [pc, #492]	@ (8004f94 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004da6:	430b      	orrs	r3, r1
 8004da8:	6513      	str	r3, [r2, #80]	@ 0x50
 8004daa:	e003      	b.n	8004db4 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004dac:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004db0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8004db4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004db8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004dbc:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8004dc0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004dc4:	2300      	movs	r3, #0
 8004dc6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8004dca:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 8004dce:	460b      	mov	r3, r1
 8004dd0:	4313      	orrs	r3, r2
 8004dd2:	d039      	beq.n	8004e48 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8004dd4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004dd8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004dda:	2b03      	cmp	r3, #3
 8004ddc:	d81c      	bhi.n	8004e18 <HAL_RCCEx_PeriphCLKConfig+0x794>
 8004dde:	a201      	add	r2, pc, #4	@ (adr r2, 8004de4 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 8004de0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004de4:	08004e21 	.word	0x08004e21
 8004de8:	08004df5 	.word	0x08004df5
 8004dec:	08004e03 	.word	0x08004e03
 8004df0:	08004e21 	.word	0x08004e21
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004df4:	4b67      	ldr	r3, [pc, #412]	@ (8004f94 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004df6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004df8:	4a66      	ldr	r2, [pc, #408]	@ (8004f94 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004dfa:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004dfe:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8004e00:	e00f      	b.n	8004e22 <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004e02:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004e06:	3308      	adds	r3, #8
 8004e08:	2102      	movs	r1, #2
 8004e0a:	4618      	mov	r0, r3
 8004e0c:	f001 f902 	bl	8006014 <RCCEx_PLL2_Config>
 8004e10:	4603      	mov	r3, r0
 8004e12:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 8004e16:	e004      	b.n	8004e22 <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8004e18:	2301      	movs	r3, #1
 8004e1a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004e1e:	e000      	b.n	8004e22 <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 8004e20:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004e22:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004e26:	2b00      	cmp	r3, #0
 8004e28:	d10a      	bne.n	8004e40 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8004e2a:	4b5a      	ldr	r3, [pc, #360]	@ (8004f94 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004e2c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004e2e:	f023 0103 	bic.w	r1, r3, #3
 8004e32:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004e36:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004e38:	4a56      	ldr	r2, [pc, #344]	@ (8004f94 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004e3a:	430b      	orrs	r3, r1
 8004e3c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004e3e:	e003      	b.n	8004e48 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004e40:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004e44:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004e48:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004e4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e50:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8004e54:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004e58:	2300      	movs	r3, #0
 8004e5a:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8004e5e:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8004e62:	460b      	mov	r3, r1
 8004e64:	4313      	orrs	r3, r2
 8004e66:	f000 809f 	beq.w	8004fa8 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004e6a:	4b4b      	ldr	r3, [pc, #300]	@ (8004f98 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	4a4a      	ldr	r2, [pc, #296]	@ (8004f98 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8004e70:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004e74:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004e76:	f7fd fa53 	bl	8002320 <HAL_GetTick>
 8004e7a:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004e7e:	e00b      	b.n	8004e98 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004e80:	f7fd fa4e 	bl	8002320 <HAL_GetTick>
 8004e84:	4602      	mov	r2, r0
 8004e86:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8004e8a:	1ad3      	subs	r3, r2, r3
 8004e8c:	2b64      	cmp	r3, #100	@ 0x64
 8004e8e:	d903      	bls.n	8004e98 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 8004e90:	2303      	movs	r3, #3
 8004e92:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004e96:	e005      	b.n	8004ea4 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004e98:	4b3f      	ldr	r3, [pc, #252]	@ (8004f98 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004ea0:	2b00      	cmp	r3, #0
 8004ea2:	d0ed      	beq.n	8004e80 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 8004ea4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004ea8:	2b00      	cmp	r3, #0
 8004eaa:	d179      	bne.n	8004fa0 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8004eac:	4b39      	ldr	r3, [pc, #228]	@ (8004f94 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004eae:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8004eb0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004eb4:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8004eb8:	4053      	eors	r3, r2
 8004eba:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004ebe:	2b00      	cmp	r3, #0
 8004ec0:	d015      	beq.n	8004eee <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004ec2:	4b34      	ldr	r3, [pc, #208]	@ (8004f94 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004ec4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004ec6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004eca:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004ece:	4b31      	ldr	r3, [pc, #196]	@ (8004f94 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004ed0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004ed2:	4a30      	ldr	r2, [pc, #192]	@ (8004f94 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004ed4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004ed8:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004eda:	4b2e      	ldr	r3, [pc, #184]	@ (8004f94 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004edc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004ede:	4a2d      	ldr	r2, [pc, #180]	@ (8004f94 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004ee0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004ee4:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8004ee6:	4a2b      	ldr	r2, [pc, #172]	@ (8004f94 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004ee8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004eec:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8004eee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004ef2:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8004ef6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004efa:	d118      	bne.n	8004f2e <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004efc:	f7fd fa10 	bl	8002320 <HAL_GetTick>
 8004f00:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004f04:	e00d      	b.n	8004f22 <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004f06:	f7fd fa0b 	bl	8002320 <HAL_GetTick>
 8004f0a:	4602      	mov	r2, r0
 8004f0c:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8004f10:	1ad2      	subs	r2, r2, r3
 8004f12:	f241 3388 	movw	r3, #5000	@ 0x1388
 8004f16:	429a      	cmp	r2, r3
 8004f18:	d903      	bls.n	8004f22 <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 8004f1a:	2303      	movs	r3, #3
 8004f1c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
            break;
 8004f20:	e005      	b.n	8004f2e <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004f22:	4b1c      	ldr	r3, [pc, #112]	@ (8004f94 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004f24:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004f26:	f003 0302 	and.w	r3, r3, #2
 8004f2a:	2b00      	cmp	r3, #0
 8004f2c:	d0eb      	beq.n	8004f06 <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 8004f2e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004f32:	2b00      	cmp	r3, #0
 8004f34:	d129      	bne.n	8004f8a <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004f36:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004f3a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8004f3e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004f42:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004f46:	d10e      	bne.n	8004f66 <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 8004f48:	4b12      	ldr	r3, [pc, #72]	@ (8004f94 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004f4a:	691b      	ldr	r3, [r3, #16]
 8004f4c:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8004f50:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004f54:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8004f58:	091a      	lsrs	r2, r3, #4
 8004f5a:	4b10      	ldr	r3, [pc, #64]	@ (8004f9c <HAL_RCCEx_PeriphCLKConfig+0x918>)
 8004f5c:	4013      	ands	r3, r2
 8004f5e:	4a0d      	ldr	r2, [pc, #52]	@ (8004f94 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004f60:	430b      	orrs	r3, r1
 8004f62:	6113      	str	r3, [r2, #16]
 8004f64:	e005      	b.n	8004f72 <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 8004f66:	4b0b      	ldr	r3, [pc, #44]	@ (8004f94 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004f68:	691b      	ldr	r3, [r3, #16]
 8004f6a:	4a0a      	ldr	r2, [pc, #40]	@ (8004f94 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004f6c:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8004f70:	6113      	str	r3, [r2, #16]
 8004f72:	4b08      	ldr	r3, [pc, #32]	@ (8004f94 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004f74:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 8004f76:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004f7a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8004f7e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004f82:	4a04      	ldr	r2, [pc, #16]	@ (8004f94 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004f84:	430b      	orrs	r3, r1
 8004f86:	6713      	str	r3, [r2, #112]	@ 0x70
 8004f88:	e00e      	b.n	8004fa8 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004f8a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004f8e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 8004f92:	e009      	b.n	8004fa8 <HAL_RCCEx_PeriphCLKConfig+0x924>
 8004f94:	58024400 	.word	0x58024400
 8004f98:	58024800 	.word	0x58024800
 8004f9c:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004fa0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004fa4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8004fa8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004fac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004fb0:	f002 0301 	and.w	r3, r2, #1
 8004fb4:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004fb8:	2300      	movs	r3, #0
 8004fba:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8004fbe:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8004fc2:	460b      	mov	r3, r1
 8004fc4:	4313      	orrs	r3, r2
 8004fc6:	f000 8089 	beq.w	80050dc <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8004fca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004fce:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004fd0:	2b28      	cmp	r3, #40	@ 0x28
 8004fd2:	d86b      	bhi.n	80050ac <HAL_RCCEx_PeriphCLKConfig+0xa28>
 8004fd4:	a201      	add	r2, pc, #4	@ (adr r2, 8004fdc <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8004fd6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004fda:	bf00      	nop
 8004fdc:	080050b5 	.word	0x080050b5
 8004fe0:	080050ad 	.word	0x080050ad
 8004fe4:	080050ad 	.word	0x080050ad
 8004fe8:	080050ad 	.word	0x080050ad
 8004fec:	080050ad 	.word	0x080050ad
 8004ff0:	080050ad 	.word	0x080050ad
 8004ff4:	080050ad 	.word	0x080050ad
 8004ff8:	080050ad 	.word	0x080050ad
 8004ffc:	08005081 	.word	0x08005081
 8005000:	080050ad 	.word	0x080050ad
 8005004:	080050ad 	.word	0x080050ad
 8005008:	080050ad 	.word	0x080050ad
 800500c:	080050ad 	.word	0x080050ad
 8005010:	080050ad 	.word	0x080050ad
 8005014:	080050ad 	.word	0x080050ad
 8005018:	080050ad 	.word	0x080050ad
 800501c:	08005097 	.word	0x08005097
 8005020:	080050ad 	.word	0x080050ad
 8005024:	080050ad 	.word	0x080050ad
 8005028:	080050ad 	.word	0x080050ad
 800502c:	080050ad 	.word	0x080050ad
 8005030:	080050ad 	.word	0x080050ad
 8005034:	080050ad 	.word	0x080050ad
 8005038:	080050ad 	.word	0x080050ad
 800503c:	080050b5 	.word	0x080050b5
 8005040:	080050ad 	.word	0x080050ad
 8005044:	080050ad 	.word	0x080050ad
 8005048:	080050ad 	.word	0x080050ad
 800504c:	080050ad 	.word	0x080050ad
 8005050:	080050ad 	.word	0x080050ad
 8005054:	080050ad 	.word	0x080050ad
 8005058:	080050ad 	.word	0x080050ad
 800505c:	080050b5 	.word	0x080050b5
 8005060:	080050ad 	.word	0x080050ad
 8005064:	080050ad 	.word	0x080050ad
 8005068:	080050ad 	.word	0x080050ad
 800506c:	080050ad 	.word	0x080050ad
 8005070:	080050ad 	.word	0x080050ad
 8005074:	080050ad 	.word	0x080050ad
 8005078:	080050ad 	.word	0x080050ad
 800507c:	080050b5 	.word	0x080050b5
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005080:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005084:	3308      	adds	r3, #8
 8005086:	2101      	movs	r1, #1
 8005088:	4618      	mov	r0, r3
 800508a:	f000 ffc3 	bl	8006014 <RCCEx_PLL2_Config>
 800508e:	4603      	mov	r3, r0
 8005090:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8005094:	e00f      	b.n	80050b6 <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005096:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800509a:	3328      	adds	r3, #40	@ 0x28
 800509c:	2101      	movs	r1, #1
 800509e:	4618      	mov	r0, r3
 80050a0:	f001 f86a 	bl	8006178 <RCCEx_PLL3_Config>
 80050a4:	4603      	mov	r3, r0
 80050a6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 80050aa:	e004      	b.n	80050b6 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80050ac:	2301      	movs	r3, #1
 80050ae:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80050b2:	e000      	b.n	80050b6 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 80050b4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80050b6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80050ba:	2b00      	cmp	r3, #0
 80050bc:	d10a      	bne.n	80050d4 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 80050be:	4bbf      	ldr	r3, [pc, #764]	@ (80053bc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80050c0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80050c2:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 80050c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80050ca:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80050cc:	4abb      	ldr	r2, [pc, #748]	@ (80053bc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80050ce:	430b      	orrs	r3, r1
 80050d0:	6553      	str	r3, [r2, #84]	@ 0x54
 80050d2:	e003      	b.n	80050dc <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80050d4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80050d8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 80050dc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80050e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80050e4:	f002 0302 	and.w	r3, r2, #2
 80050e8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80050ec:	2300      	movs	r3, #0
 80050ee:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 80050f2:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 80050f6:	460b      	mov	r3, r1
 80050f8:	4313      	orrs	r3, r2
 80050fa:	d041      	beq.n	8005180 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 80050fc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005100:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005102:	2b05      	cmp	r3, #5
 8005104:	d824      	bhi.n	8005150 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 8005106:	a201      	add	r2, pc, #4	@ (adr r2, 800510c <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 8005108:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800510c:	08005159 	.word	0x08005159
 8005110:	08005125 	.word	0x08005125
 8005114:	0800513b 	.word	0x0800513b
 8005118:	08005159 	.word	0x08005159
 800511c:	08005159 	.word	0x08005159
 8005120:	08005159 	.word	0x08005159
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005124:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005128:	3308      	adds	r3, #8
 800512a:	2101      	movs	r1, #1
 800512c:	4618      	mov	r0, r3
 800512e:	f000 ff71 	bl	8006014 <RCCEx_PLL2_Config>
 8005132:	4603      	mov	r3, r0
 8005134:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8005138:	e00f      	b.n	800515a <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800513a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800513e:	3328      	adds	r3, #40	@ 0x28
 8005140:	2101      	movs	r1, #1
 8005142:	4618      	mov	r0, r3
 8005144:	f001 f818 	bl	8006178 <RCCEx_PLL3_Config>
 8005148:	4603      	mov	r3, r0
 800514a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800514e:	e004      	b.n	800515a <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005150:	2301      	movs	r3, #1
 8005152:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005156:	e000      	b.n	800515a <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 8005158:	bf00      	nop
    }

    if (ret == HAL_OK)
 800515a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800515e:	2b00      	cmp	r3, #0
 8005160:	d10a      	bne.n	8005178 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8005162:	4b96      	ldr	r3, [pc, #600]	@ (80053bc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005164:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005166:	f023 0107 	bic.w	r1, r3, #7
 800516a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800516e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005170:	4a92      	ldr	r2, [pc, #584]	@ (80053bc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005172:	430b      	orrs	r3, r1
 8005174:	6553      	str	r3, [r2, #84]	@ 0x54
 8005176:	e003      	b.n	8005180 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005178:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800517c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005180:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005184:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005188:	f002 0304 	and.w	r3, r2, #4
 800518c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005190:	2300      	movs	r3, #0
 8005192:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005196:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 800519a:	460b      	mov	r3, r1
 800519c:	4313      	orrs	r3, r2
 800519e:	d044      	beq.n	800522a <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 80051a0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80051a4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80051a8:	2b05      	cmp	r3, #5
 80051aa:	d825      	bhi.n	80051f8 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 80051ac:	a201      	add	r2, pc, #4	@ (adr r2, 80051b4 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 80051ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80051b2:	bf00      	nop
 80051b4:	08005201 	.word	0x08005201
 80051b8:	080051cd 	.word	0x080051cd
 80051bc:	080051e3 	.word	0x080051e3
 80051c0:	08005201 	.word	0x08005201
 80051c4:	08005201 	.word	0x08005201
 80051c8:	08005201 	.word	0x08005201
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80051cc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80051d0:	3308      	adds	r3, #8
 80051d2:	2101      	movs	r1, #1
 80051d4:	4618      	mov	r0, r3
 80051d6:	f000 ff1d 	bl	8006014 <RCCEx_PLL2_Config>
 80051da:	4603      	mov	r3, r0
 80051dc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 80051e0:	e00f      	b.n	8005202 <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80051e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80051e6:	3328      	adds	r3, #40	@ 0x28
 80051e8:	2101      	movs	r1, #1
 80051ea:	4618      	mov	r0, r3
 80051ec:	f000 ffc4 	bl	8006178 <RCCEx_PLL3_Config>
 80051f0:	4603      	mov	r3, r0
 80051f2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 80051f6:	e004      	b.n	8005202 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80051f8:	2301      	movs	r3, #1
 80051fa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80051fe:	e000      	b.n	8005202 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 8005200:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005202:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005206:	2b00      	cmp	r3, #0
 8005208:	d10b      	bne.n	8005222 <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800520a:	4b6c      	ldr	r3, [pc, #432]	@ (80053bc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800520c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800520e:	f023 0107 	bic.w	r1, r3, #7
 8005212:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005216:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800521a:	4a68      	ldr	r2, [pc, #416]	@ (80053bc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800521c:	430b      	orrs	r3, r1
 800521e:	6593      	str	r3, [r2, #88]	@ 0x58
 8005220:	e003      	b.n	800522a <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005222:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005226:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800522a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800522e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005232:	f002 0320 	and.w	r3, r2, #32
 8005236:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800523a:	2300      	movs	r3, #0
 800523c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8005240:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8005244:	460b      	mov	r3, r1
 8005246:	4313      	orrs	r3, r2
 8005248:	d055      	beq.n	80052f6 <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 800524a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800524e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005252:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005256:	d033      	beq.n	80052c0 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 8005258:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800525c:	d82c      	bhi.n	80052b8 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800525e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005262:	d02f      	beq.n	80052c4 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 8005264:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005268:	d826      	bhi.n	80052b8 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800526a:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800526e:	d02b      	beq.n	80052c8 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 8005270:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8005274:	d820      	bhi.n	80052b8 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8005276:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800527a:	d012      	beq.n	80052a2 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 800527c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005280:	d81a      	bhi.n	80052b8 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8005282:	2b00      	cmp	r3, #0
 8005284:	d022      	beq.n	80052cc <HAL_RCCEx_PeriphCLKConfig+0xc48>
 8005286:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800528a:	d115      	bne.n	80052b8 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800528c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005290:	3308      	adds	r3, #8
 8005292:	2100      	movs	r1, #0
 8005294:	4618      	mov	r0, r3
 8005296:	f000 febd 	bl	8006014 <RCCEx_PLL2_Config>
 800529a:	4603      	mov	r3, r0
 800529c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 80052a0:	e015      	b.n	80052ce <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80052a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80052a6:	3328      	adds	r3, #40	@ 0x28
 80052a8:	2102      	movs	r1, #2
 80052aa:	4618      	mov	r0, r3
 80052ac:	f000 ff64 	bl	8006178 <RCCEx_PLL3_Config>
 80052b0:	4603      	mov	r3, r0
 80052b2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 80052b6:	e00a      	b.n	80052ce <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80052b8:	2301      	movs	r3, #1
 80052ba:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80052be:	e006      	b.n	80052ce <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80052c0:	bf00      	nop
 80052c2:	e004      	b.n	80052ce <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80052c4:	bf00      	nop
 80052c6:	e002      	b.n	80052ce <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80052c8:	bf00      	nop
 80052ca:	e000      	b.n	80052ce <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80052cc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80052ce:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80052d2:	2b00      	cmp	r3, #0
 80052d4:	d10b      	bne.n	80052ee <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80052d6:	4b39      	ldr	r3, [pc, #228]	@ (80053bc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80052d8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80052da:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 80052de:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80052e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80052e6:	4a35      	ldr	r2, [pc, #212]	@ (80053bc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80052e8:	430b      	orrs	r3, r1
 80052ea:	6553      	str	r3, [r2, #84]	@ 0x54
 80052ec:	e003      	b.n	80052f6 <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80052ee:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80052f2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 80052f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80052fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80052fe:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 8005302:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8005306:	2300      	movs	r3, #0
 8005308:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800530c:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8005310:	460b      	mov	r3, r1
 8005312:	4313      	orrs	r3, r2
 8005314:	d058      	beq.n	80053c8 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8005316:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800531a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800531e:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8005322:	d033      	beq.n	800538c <HAL_RCCEx_PeriphCLKConfig+0xd08>
 8005324:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8005328:	d82c      	bhi.n	8005384 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800532a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800532e:	d02f      	beq.n	8005390 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 8005330:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005334:	d826      	bhi.n	8005384 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8005336:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800533a:	d02b      	beq.n	8005394 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 800533c:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8005340:	d820      	bhi.n	8005384 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8005342:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005346:	d012      	beq.n	800536e <HAL_RCCEx_PeriphCLKConfig+0xcea>
 8005348:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800534c:	d81a      	bhi.n	8005384 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800534e:	2b00      	cmp	r3, #0
 8005350:	d022      	beq.n	8005398 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 8005352:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005356:	d115      	bne.n	8005384 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005358:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800535c:	3308      	adds	r3, #8
 800535e:	2100      	movs	r1, #0
 8005360:	4618      	mov	r0, r3
 8005362:	f000 fe57 	bl	8006014 <RCCEx_PLL2_Config>
 8005366:	4603      	mov	r3, r0
 8005368:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800536c:	e015      	b.n	800539a <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800536e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005372:	3328      	adds	r3, #40	@ 0x28
 8005374:	2102      	movs	r1, #2
 8005376:	4618      	mov	r0, r3
 8005378:	f000 fefe 	bl	8006178 <RCCEx_PLL3_Config>
 800537c:	4603      	mov	r3, r0
 800537e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8005382:	e00a      	b.n	800539a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005384:	2301      	movs	r3, #1
 8005386:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800538a:	e006      	b.n	800539a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800538c:	bf00      	nop
 800538e:	e004      	b.n	800539a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8005390:	bf00      	nop
 8005392:	e002      	b.n	800539a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8005394:	bf00      	nop
 8005396:	e000      	b.n	800539a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8005398:	bf00      	nop
    }

    if (ret == HAL_OK)
 800539a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800539e:	2b00      	cmp	r3, #0
 80053a0:	d10e      	bne.n	80053c0 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80053a2:	4b06      	ldr	r3, [pc, #24]	@ (80053bc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80053a4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80053a6:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 80053aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80053ae:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80053b2:	4a02      	ldr	r2, [pc, #8]	@ (80053bc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80053b4:	430b      	orrs	r3, r1
 80053b6:	6593      	str	r3, [r2, #88]	@ 0x58
 80053b8:	e006      	b.n	80053c8 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 80053ba:	bf00      	nop
 80053bc:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80053c0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80053c4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 80053c8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80053cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80053d0:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 80053d4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80053d8:	2300      	movs	r3, #0
 80053da:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80053de:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 80053e2:	460b      	mov	r3, r1
 80053e4:	4313      	orrs	r3, r2
 80053e6:	d055      	beq.n	8005494 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 80053e8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80053ec:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80053f0:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 80053f4:	d033      	beq.n	800545e <HAL_RCCEx_PeriphCLKConfig+0xdda>
 80053f6:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 80053fa:	d82c      	bhi.n	8005456 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80053fc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005400:	d02f      	beq.n	8005462 <HAL_RCCEx_PeriphCLKConfig+0xdde>
 8005402:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005406:	d826      	bhi.n	8005456 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8005408:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 800540c:	d02b      	beq.n	8005466 <HAL_RCCEx_PeriphCLKConfig+0xde2>
 800540e:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8005412:	d820      	bhi.n	8005456 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8005414:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005418:	d012      	beq.n	8005440 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 800541a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800541e:	d81a      	bhi.n	8005456 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8005420:	2b00      	cmp	r3, #0
 8005422:	d022      	beq.n	800546a <HAL_RCCEx_PeriphCLKConfig+0xde6>
 8005424:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005428:	d115      	bne.n	8005456 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800542a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800542e:	3308      	adds	r3, #8
 8005430:	2100      	movs	r1, #0
 8005432:	4618      	mov	r0, r3
 8005434:	f000 fdee 	bl	8006014 <RCCEx_PLL2_Config>
 8005438:	4603      	mov	r3, r0
 800543a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800543e:	e015      	b.n	800546c <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005440:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005444:	3328      	adds	r3, #40	@ 0x28
 8005446:	2102      	movs	r1, #2
 8005448:	4618      	mov	r0, r3
 800544a:	f000 fe95 	bl	8006178 <RCCEx_PLL3_Config>
 800544e:	4603      	mov	r3, r0
 8005450:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8005454:	e00a      	b.n	800546c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005456:	2301      	movs	r3, #1
 8005458:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800545c:	e006      	b.n	800546c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800545e:	bf00      	nop
 8005460:	e004      	b.n	800546c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8005462:	bf00      	nop
 8005464:	e002      	b.n	800546c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8005466:	bf00      	nop
 8005468:	e000      	b.n	800546c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800546a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800546c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005470:	2b00      	cmp	r3, #0
 8005472:	d10b      	bne.n	800548c <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8005474:	4ba1      	ldr	r3, [pc, #644]	@ (80056fc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005476:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005478:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 800547c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005480:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8005484:	4a9d      	ldr	r2, [pc, #628]	@ (80056fc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005486:	430b      	orrs	r3, r1
 8005488:	6593      	str	r3, [r2, #88]	@ 0x58
 800548a:	e003      	b.n	8005494 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800548c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005490:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8005494:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005498:	e9d3 2300 	ldrd	r2, r3, [r3]
 800549c:	f002 0308 	and.w	r3, r2, #8
 80054a0:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80054a4:	2300      	movs	r3, #0
 80054a6:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80054aa:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 80054ae:	460b      	mov	r3, r1
 80054b0:	4313      	orrs	r3, r2
 80054b2:	d01e      	beq.n	80054f2 <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 80054b4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80054b8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80054bc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80054c0:	d10c      	bne.n	80054dc <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80054c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80054c6:	3328      	adds	r3, #40	@ 0x28
 80054c8:	2102      	movs	r1, #2
 80054ca:	4618      	mov	r0, r3
 80054cc:	f000 fe54 	bl	8006178 <RCCEx_PLL3_Config>
 80054d0:	4603      	mov	r3, r0
 80054d2:	2b00      	cmp	r3, #0
 80054d4:	d002      	beq.n	80054dc <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 80054d6:	2301      	movs	r3, #1
 80054d8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 80054dc:	4b87      	ldr	r3, [pc, #540]	@ (80056fc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80054de:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80054e0:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80054e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80054e8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80054ec:	4a83      	ldr	r2, [pc, #524]	@ (80056fc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80054ee:	430b      	orrs	r3, r1
 80054f0:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80054f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80054f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80054fa:	f002 0310 	and.w	r3, r2, #16
 80054fe:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8005502:	2300      	movs	r3, #0
 8005504:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8005508:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 800550c:	460b      	mov	r3, r1
 800550e:	4313      	orrs	r3, r2
 8005510:	d01e      	beq.n	8005550 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8005512:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005516:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800551a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800551e:	d10c      	bne.n	800553a <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8005520:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005524:	3328      	adds	r3, #40	@ 0x28
 8005526:	2102      	movs	r1, #2
 8005528:	4618      	mov	r0, r3
 800552a:	f000 fe25 	bl	8006178 <RCCEx_PLL3_Config>
 800552e:	4603      	mov	r3, r0
 8005530:	2b00      	cmp	r3, #0
 8005532:	d002      	beq.n	800553a <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 8005534:	2301      	movs	r3, #1
 8005536:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800553a:	4b70      	ldr	r3, [pc, #448]	@ (80056fc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800553c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800553e:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8005542:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005546:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800554a:	4a6c      	ldr	r2, [pc, #432]	@ (80056fc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800554c:	430b      	orrs	r3, r1
 800554e:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005550:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005554:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005558:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 800555c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8005560:	2300      	movs	r3, #0
 8005562:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8005566:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 800556a:	460b      	mov	r3, r1
 800556c:	4313      	orrs	r3, r2
 800556e:	d03e      	beq.n	80055ee <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8005570:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005574:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8005578:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800557c:	d022      	beq.n	80055c4 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 800557e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005582:	d81b      	bhi.n	80055bc <HAL_RCCEx_PeriphCLKConfig+0xf38>
 8005584:	2b00      	cmp	r3, #0
 8005586:	d003      	beq.n	8005590 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 8005588:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800558c:	d00b      	beq.n	80055a6 <HAL_RCCEx_PeriphCLKConfig+0xf22>
 800558e:	e015      	b.n	80055bc <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005590:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005594:	3308      	adds	r3, #8
 8005596:	2100      	movs	r1, #0
 8005598:	4618      	mov	r0, r3
 800559a:	f000 fd3b 	bl	8006014 <RCCEx_PLL2_Config>
 800559e:	4603      	mov	r3, r0
 80055a0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 80055a4:	e00f      	b.n	80055c6 <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80055a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80055aa:	3328      	adds	r3, #40	@ 0x28
 80055ac:	2102      	movs	r1, #2
 80055ae:	4618      	mov	r0, r3
 80055b0:	f000 fde2 	bl	8006178 <RCCEx_PLL3_Config>
 80055b4:	4603      	mov	r3, r0
 80055b6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 80055ba:	e004      	b.n	80055c6 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80055bc:	2301      	movs	r3, #1
 80055be:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80055c2:	e000      	b.n	80055c6 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 80055c4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80055c6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80055ca:	2b00      	cmp	r3, #0
 80055cc:	d10b      	bne.n	80055e6 <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80055ce:	4b4b      	ldr	r3, [pc, #300]	@ (80056fc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80055d0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80055d2:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 80055d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80055da:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80055de:	4a47      	ldr	r2, [pc, #284]	@ (80056fc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80055e0:	430b      	orrs	r3, r1
 80055e2:	6593      	str	r3, [r2, #88]	@ 0x58
 80055e4:	e003      	b.n	80055ee <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80055e6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80055ea:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80055ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80055f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055f6:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 80055fa:	67bb      	str	r3, [r7, #120]	@ 0x78
 80055fc:	2300      	movs	r3, #0
 80055fe:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8005600:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8005604:	460b      	mov	r3, r1
 8005606:	4313      	orrs	r3, r2
 8005608:	d03b      	beq.n	8005682 <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 800560a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800560e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005612:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8005616:	d01f      	beq.n	8005658 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 8005618:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800561c:	d818      	bhi.n	8005650 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 800561e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005622:	d003      	beq.n	800562c <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 8005624:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005628:	d007      	beq.n	800563a <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 800562a:	e011      	b.n	8005650 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800562c:	4b33      	ldr	r3, [pc, #204]	@ (80056fc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800562e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005630:	4a32      	ldr	r2, [pc, #200]	@ (80056fc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005632:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005636:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8005638:	e00f      	b.n	800565a <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800563a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800563e:	3328      	adds	r3, #40	@ 0x28
 8005640:	2101      	movs	r1, #1
 8005642:	4618      	mov	r0, r3
 8005644:	f000 fd98 	bl	8006178 <RCCEx_PLL3_Config>
 8005648:	4603      	mov	r3, r0
 800564a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 800564e:	e004      	b.n	800565a <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005650:	2301      	movs	r3, #1
 8005652:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005656:	e000      	b.n	800565a <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 8005658:	bf00      	nop
    }

    if (ret == HAL_OK)
 800565a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800565e:	2b00      	cmp	r3, #0
 8005660:	d10b      	bne.n	800567a <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005662:	4b26      	ldr	r3, [pc, #152]	@ (80056fc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005664:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005666:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 800566a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800566e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005672:	4a22      	ldr	r2, [pc, #136]	@ (80056fc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005674:	430b      	orrs	r3, r1
 8005676:	6553      	str	r3, [r2, #84]	@ 0x54
 8005678:	e003      	b.n	8005682 <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800567a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800567e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8005682:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005686:	e9d3 2300 	ldrd	r2, r3, [r3]
 800568a:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 800568e:	673b      	str	r3, [r7, #112]	@ 0x70
 8005690:	2300      	movs	r3, #0
 8005692:	677b      	str	r3, [r7, #116]	@ 0x74
 8005694:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8005698:	460b      	mov	r3, r1
 800569a:	4313      	orrs	r3, r2
 800569c:	d034      	beq.n	8005708 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 800569e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80056a2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80056a4:	2b00      	cmp	r3, #0
 80056a6:	d003      	beq.n	80056b0 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 80056a8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80056ac:	d007      	beq.n	80056be <HAL_RCCEx_PeriphCLKConfig+0x103a>
 80056ae:	e011      	b.n	80056d4 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80056b0:	4b12      	ldr	r3, [pc, #72]	@ (80056fc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80056b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80056b4:	4a11      	ldr	r2, [pc, #68]	@ (80056fc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80056b6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80056ba:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 80056bc:	e00e      	b.n	80056dc <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80056be:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80056c2:	3308      	adds	r3, #8
 80056c4:	2102      	movs	r1, #2
 80056c6:	4618      	mov	r0, r3
 80056c8:	f000 fca4 	bl	8006014 <RCCEx_PLL2_Config>
 80056cc:	4603      	mov	r3, r0
 80056ce:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 80056d2:	e003      	b.n	80056dc <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 80056d4:	2301      	movs	r3, #1
 80056d6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80056da:	bf00      	nop
    }

    if (ret == HAL_OK)
 80056dc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80056e0:	2b00      	cmp	r3, #0
 80056e2:	d10d      	bne.n	8005700 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 80056e4:	4b05      	ldr	r3, [pc, #20]	@ (80056fc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80056e6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80056e8:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80056ec:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80056f0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80056f2:	4a02      	ldr	r2, [pc, #8]	@ (80056fc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80056f4:	430b      	orrs	r3, r1
 80056f6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80056f8:	e006      	b.n	8005708 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 80056fa:	bf00      	nop
 80056fc:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005700:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005704:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8005708:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800570c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005710:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8005714:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005716:	2300      	movs	r3, #0
 8005718:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800571a:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 800571e:	460b      	mov	r3, r1
 8005720:	4313      	orrs	r3, r2
 8005722:	d00c      	beq.n	800573e <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8005724:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005728:	3328      	adds	r3, #40	@ 0x28
 800572a:	2102      	movs	r1, #2
 800572c:	4618      	mov	r0, r3
 800572e:	f000 fd23 	bl	8006178 <RCCEx_PLL3_Config>
 8005732:	4603      	mov	r3, r0
 8005734:	2b00      	cmp	r3, #0
 8005736:	d002      	beq.n	800573e <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 8005738:	2301      	movs	r3, #1
 800573a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800573e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005742:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005746:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 800574a:	663b      	str	r3, [r7, #96]	@ 0x60
 800574c:	2300      	movs	r3, #0
 800574e:	667b      	str	r3, [r7, #100]	@ 0x64
 8005750:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8005754:	460b      	mov	r3, r1
 8005756:	4313      	orrs	r3, r2
 8005758:	d038      	beq.n	80057cc <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 800575a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800575e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005762:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005766:	d018      	beq.n	800579a <HAL_RCCEx_PeriphCLKConfig+0x1116>
 8005768:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800576c:	d811      	bhi.n	8005792 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 800576e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005772:	d014      	beq.n	800579e <HAL_RCCEx_PeriphCLKConfig+0x111a>
 8005774:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005778:	d80b      	bhi.n	8005792 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 800577a:	2b00      	cmp	r3, #0
 800577c:	d011      	beq.n	80057a2 <HAL_RCCEx_PeriphCLKConfig+0x111e>
 800577e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005782:	d106      	bne.n	8005792 <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005784:	4bc3      	ldr	r3, [pc, #780]	@ (8005a94 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005786:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005788:	4ac2      	ldr	r2, [pc, #776]	@ (8005a94 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800578a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800578e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8005790:	e008      	b.n	80057a4 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005792:	2301      	movs	r3, #1
 8005794:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005798:	e004      	b.n	80057a4 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800579a:	bf00      	nop
 800579c:	e002      	b.n	80057a4 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800579e:	bf00      	nop
 80057a0:	e000      	b.n	80057a4 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 80057a2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80057a4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80057a8:	2b00      	cmp	r3, #0
 80057aa:	d10b      	bne.n	80057c4 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80057ac:	4bb9      	ldr	r3, [pc, #740]	@ (8005a94 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80057ae:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80057b0:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80057b4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80057b8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80057bc:	4ab5      	ldr	r2, [pc, #724]	@ (8005a94 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80057be:	430b      	orrs	r3, r1
 80057c0:	6553      	str	r3, [r2, #84]	@ 0x54
 80057c2:	e003      	b.n	80057cc <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80057c4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80057c8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80057cc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80057d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80057d4:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 80057d8:	65bb      	str	r3, [r7, #88]	@ 0x58
 80057da:	2300      	movs	r3, #0
 80057dc:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80057de:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 80057e2:	460b      	mov	r3, r1
 80057e4:	4313      	orrs	r3, r2
 80057e6:	d009      	beq.n	80057fc <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80057e8:	4baa      	ldr	r3, [pc, #680]	@ (8005a94 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80057ea:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80057ec:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 80057f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80057f4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80057f6:	4aa7      	ldr	r2, [pc, #668]	@ (8005a94 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80057f8:	430b      	orrs	r3, r1
 80057fa:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 80057fc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005800:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005804:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 8005808:	653b      	str	r3, [r7, #80]	@ 0x50
 800580a:	2300      	movs	r3, #0
 800580c:	657b      	str	r3, [r7, #84]	@ 0x54
 800580e:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8005812:	460b      	mov	r3, r1
 8005814:	4313      	orrs	r3, r2
 8005816:	d00a      	beq.n	800582e <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8005818:	4b9e      	ldr	r3, [pc, #632]	@ (8005a94 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800581a:	691b      	ldr	r3, [r3, #16]
 800581c:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 8005820:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005824:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8005828:	4a9a      	ldr	r2, [pc, #616]	@ (8005a94 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800582a:	430b      	orrs	r3, r1
 800582c:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800582e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005832:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005836:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 800583a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800583c:	2300      	movs	r3, #0
 800583e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005840:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8005844:	460b      	mov	r3, r1
 8005846:	4313      	orrs	r3, r2
 8005848:	d009      	beq.n	800585e <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800584a:	4b92      	ldr	r3, [pc, #584]	@ (8005a94 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800584c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800584e:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 8005852:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005856:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005858:	4a8e      	ldr	r2, [pc, #568]	@ (8005a94 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800585a:	430b      	orrs	r3, r1
 800585c:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800585e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005862:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005866:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 800586a:	643b      	str	r3, [r7, #64]	@ 0x40
 800586c:	2300      	movs	r3, #0
 800586e:	647b      	str	r3, [r7, #68]	@ 0x44
 8005870:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8005874:	460b      	mov	r3, r1
 8005876:	4313      	orrs	r3, r2
 8005878:	d00e      	beq.n	8005898 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800587a:	4b86      	ldr	r3, [pc, #536]	@ (8005a94 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800587c:	691b      	ldr	r3, [r3, #16]
 800587e:	4a85      	ldr	r2, [pc, #532]	@ (8005a94 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005880:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8005884:	6113      	str	r3, [r2, #16]
 8005886:	4b83      	ldr	r3, [pc, #524]	@ (8005a94 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005888:	6919      	ldr	r1, [r3, #16]
 800588a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800588e:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8005892:	4a80      	ldr	r2, [pc, #512]	@ (8005a94 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005894:	430b      	orrs	r3, r1
 8005896:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8005898:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800589c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80058a0:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 80058a4:	63bb      	str	r3, [r7, #56]	@ 0x38
 80058a6:	2300      	movs	r3, #0
 80058a8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80058aa:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 80058ae:	460b      	mov	r3, r1
 80058b0:	4313      	orrs	r3, r2
 80058b2:	d009      	beq.n	80058c8 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 80058b4:	4b77      	ldr	r3, [pc, #476]	@ (8005a94 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80058b6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80058b8:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 80058bc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80058c0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80058c2:	4a74      	ldr	r2, [pc, #464]	@ (8005a94 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80058c4:	430b      	orrs	r3, r1
 80058c6:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80058c8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80058cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80058d0:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 80058d4:	633b      	str	r3, [r7, #48]	@ 0x30
 80058d6:	2300      	movs	r3, #0
 80058d8:	637b      	str	r3, [r7, #52]	@ 0x34
 80058da:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 80058de:	460b      	mov	r3, r1
 80058e0:	4313      	orrs	r3, r2
 80058e2:	d00a      	beq.n	80058fa <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80058e4:	4b6b      	ldr	r3, [pc, #428]	@ (8005a94 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80058e6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80058e8:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 80058ec:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80058f0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80058f4:	4a67      	ldr	r2, [pc, #412]	@ (8005a94 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80058f6:	430b      	orrs	r3, r1
 80058f8:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 80058fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80058fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005902:	2100      	movs	r1, #0
 8005904:	62b9      	str	r1, [r7, #40]	@ 0x28
 8005906:	f003 0301 	and.w	r3, r3, #1
 800590a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800590c:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8005910:	460b      	mov	r3, r1
 8005912:	4313      	orrs	r3, r2
 8005914:	d011      	beq.n	800593a <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005916:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800591a:	3308      	adds	r3, #8
 800591c:	2100      	movs	r1, #0
 800591e:	4618      	mov	r0, r3
 8005920:	f000 fb78 	bl	8006014 <RCCEx_PLL2_Config>
 8005924:	4603      	mov	r3, r0
 8005926:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800592a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800592e:	2b00      	cmp	r3, #0
 8005930:	d003      	beq.n	800593a <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005932:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005936:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 800593a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800593e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005942:	2100      	movs	r1, #0
 8005944:	6239      	str	r1, [r7, #32]
 8005946:	f003 0302 	and.w	r3, r3, #2
 800594a:	627b      	str	r3, [r7, #36]	@ 0x24
 800594c:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8005950:	460b      	mov	r3, r1
 8005952:	4313      	orrs	r3, r2
 8005954:	d011      	beq.n	800597a <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005956:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800595a:	3308      	adds	r3, #8
 800595c:	2101      	movs	r1, #1
 800595e:	4618      	mov	r0, r3
 8005960:	f000 fb58 	bl	8006014 <RCCEx_PLL2_Config>
 8005964:	4603      	mov	r3, r0
 8005966:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800596a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800596e:	2b00      	cmp	r3, #0
 8005970:	d003      	beq.n	800597a <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005972:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005976:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 800597a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800597e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005982:	2100      	movs	r1, #0
 8005984:	61b9      	str	r1, [r7, #24]
 8005986:	f003 0304 	and.w	r3, r3, #4
 800598a:	61fb      	str	r3, [r7, #28]
 800598c:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8005990:	460b      	mov	r3, r1
 8005992:	4313      	orrs	r3, r2
 8005994:	d011      	beq.n	80059ba <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8005996:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800599a:	3308      	adds	r3, #8
 800599c:	2102      	movs	r1, #2
 800599e:	4618      	mov	r0, r3
 80059a0:	f000 fb38 	bl	8006014 <RCCEx_PLL2_Config>
 80059a4:	4603      	mov	r3, r0
 80059a6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 80059aa:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80059ae:	2b00      	cmp	r3, #0
 80059b0:	d003      	beq.n	80059ba <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80059b2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80059b6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 80059ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80059be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80059c2:	2100      	movs	r1, #0
 80059c4:	6139      	str	r1, [r7, #16]
 80059c6:	f003 0308 	and.w	r3, r3, #8
 80059ca:	617b      	str	r3, [r7, #20]
 80059cc:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 80059d0:	460b      	mov	r3, r1
 80059d2:	4313      	orrs	r3, r2
 80059d4:	d011      	beq.n	80059fa <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80059d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80059da:	3328      	adds	r3, #40	@ 0x28
 80059dc:	2100      	movs	r1, #0
 80059de:	4618      	mov	r0, r3
 80059e0:	f000 fbca 	bl	8006178 <RCCEx_PLL3_Config>
 80059e4:	4603      	mov	r3, r0
 80059e6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  
    if (ret == HAL_OK)
 80059ea:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80059ee:	2b00      	cmp	r3, #0
 80059f0:	d003      	beq.n	80059fa <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80059f2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80059f6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 80059fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80059fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a02:	2100      	movs	r1, #0
 8005a04:	60b9      	str	r1, [r7, #8]
 8005a06:	f003 0310 	and.w	r3, r3, #16
 8005a0a:	60fb      	str	r3, [r7, #12]
 8005a0c:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8005a10:	460b      	mov	r3, r1
 8005a12:	4313      	orrs	r3, r2
 8005a14:	d011      	beq.n	8005a3a <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005a16:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005a1a:	3328      	adds	r3, #40	@ 0x28
 8005a1c:	2101      	movs	r1, #1
 8005a1e:	4618      	mov	r0, r3
 8005a20:	f000 fbaa 	bl	8006178 <RCCEx_PLL3_Config>
 8005a24:	4603      	mov	r3, r0
 8005a26:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8005a2a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005a2e:	2b00      	cmp	r3, #0
 8005a30:	d003      	beq.n	8005a3a <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005a32:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005a36:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8005a3a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005a3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a42:	2100      	movs	r1, #0
 8005a44:	6039      	str	r1, [r7, #0]
 8005a46:	f003 0320 	and.w	r3, r3, #32
 8005a4a:	607b      	str	r3, [r7, #4]
 8005a4c:	e9d7 1200 	ldrd	r1, r2, [r7]
 8005a50:	460b      	mov	r3, r1
 8005a52:	4313      	orrs	r3, r2
 8005a54:	d011      	beq.n	8005a7a <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005a56:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005a5a:	3328      	adds	r3, #40	@ 0x28
 8005a5c:	2102      	movs	r1, #2
 8005a5e:	4618      	mov	r0, r3
 8005a60:	f000 fb8a 	bl	8006178 <RCCEx_PLL3_Config>
 8005a64:	4603      	mov	r3, r0
 8005a66:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8005a6a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005a6e:	2b00      	cmp	r3, #0
 8005a70:	d003      	beq.n	8005a7a <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005a72:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005a76:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }

  if (status == HAL_OK)
 8005a7a:	f897 3126 	ldrb.w	r3, [r7, #294]	@ 0x126
 8005a7e:	2b00      	cmp	r3, #0
 8005a80:	d101      	bne.n	8005a86 <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 8005a82:	2300      	movs	r3, #0
 8005a84:	e000      	b.n	8005a88 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 8005a86:	2301      	movs	r3, #1
}
 8005a88:	4618      	mov	r0, r3
 8005a8a:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 8005a8e:	46bd      	mov	sp, r7
 8005a90:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005a94:	58024400 	.word	0x58024400

08005a98 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8005a98:	b580      	push	{r7, lr}
 8005a9a:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8005a9c:	f7fe fd96 	bl	80045cc <HAL_RCC_GetHCLKFreq>
 8005aa0:	4602      	mov	r2, r0
 8005aa2:	4b06      	ldr	r3, [pc, #24]	@ (8005abc <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8005aa4:	6a1b      	ldr	r3, [r3, #32]
 8005aa6:	091b      	lsrs	r3, r3, #4
 8005aa8:	f003 0307 	and.w	r3, r3, #7
 8005aac:	4904      	ldr	r1, [pc, #16]	@ (8005ac0 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8005aae:	5ccb      	ldrb	r3, [r1, r3]
 8005ab0:	f003 031f 	and.w	r3, r3, #31
 8005ab4:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8005ab8:	4618      	mov	r0, r3
 8005aba:	bd80      	pop	{r7, pc}
 8005abc:	58024400 	.word	0x58024400
 8005ac0:	0800a2a4 	.word	0x0800a2a4

08005ac4 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8005ac4:	b480      	push	{r7}
 8005ac6:	b089      	sub	sp, #36	@ 0x24
 8005ac8:	af00      	add	r7, sp, #0
 8005aca:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005acc:	4ba1      	ldr	r3, [pc, #644]	@ (8005d54 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005ace:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005ad0:	f003 0303 	and.w	r3, r3, #3
 8005ad4:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8005ad6:	4b9f      	ldr	r3, [pc, #636]	@ (8005d54 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005ad8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005ada:	0b1b      	lsrs	r3, r3, #12
 8005adc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005ae0:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8005ae2:	4b9c      	ldr	r3, [pc, #624]	@ (8005d54 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005ae4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005ae6:	091b      	lsrs	r3, r3, #4
 8005ae8:	f003 0301 	and.w	r3, r3, #1
 8005aec:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8005aee:	4b99      	ldr	r3, [pc, #612]	@ (8005d54 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005af0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005af2:	08db      	lsrs	r3, r3, #3
 8005af4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005af8:	693a      	ldr	r2, [r7, #16]
 8005afa:	fb02 f303 	mul.w	r3, r2, r3
 8005afe:	ee07 3a90 	vmov	s15, r3
 8005b02:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005b06:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8005b0a:	697b      	ldr	r3, [r7, #20]
 8005b0c:	2b00      	cmp	r3, #0
 8005b0e:	f000 8111 	beq.w	8005d34 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8005b12:	69bb      	ldr	r3, [r7, #24]
 8005b14:	2b02      	cmp	r3, #2
 8005b16:	f000 8083 	beq.w	8005c20 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8005b1a:	69bb      	ldr	r3, [r7, #24]
 8005b1c:	2b02      	cmp	r3, #2
 8005b1e:	f200 80a1 	bhi.w	8005c64 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8005b22:	69bb      	ldr	r3, [r7, #24]
 8005b24:	2b00      	cmp	r3, #0
 8005b26:	d003      	beq.n	8005b30 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8005b28:	69bb      	ldr	r3, [r7, #24]
 8005b2a:	2b01      	cmp	r3, #1
 8005b2c:	d056      	beq.n	8005bdc <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8005b2e:	e099      	b.n	8005c64 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005b30:	4b88      	ldr	r3, [pc, #544]	@ (8005d54 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	f003 0320 	and.w	r3, r3, #32
 8005b38:	2b00      	cmp	r3, #0
 8005b3a:	d02d      	beq.n	8005b98 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005b3c:	4b85      	ldr	r3, [pc, #532]	@ (8005d54 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	08db      	lsrs	r3, r3, #3
 8005b42:	f003 0303 	and.w	r3, r3, #3
 8005b46:	4a84      	ldr	r2, [pc, #528]	@ (8005d58 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8005b48:	fa22 f303 	lsr.w	r3, r2, r3
 8005b4c:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005b4e:	68bb      	ldr	r3, [r7, #8]
 8005b50:	ee07 3a90 	vmov	s15, r3
 8005b54:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005b58:	697b      	ldr	r3, [r7, #20]
 8005b5a:	ee07 3a90 	vmov	s15, r3
 8005b5e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005b62:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005b66:	4b7b      	ldr	r3, [pc, #492]	@ (8005d54 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005b68:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005b6a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005b6e:	ee07 3a90 	vmov	s15, r3
 8005b72:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005b76:	ed97 6a03 	vldr	s12, [r7, #12]
 8005b7a:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8005d5c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005b7e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005b82:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005b86:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005b8a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005b8e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005b92:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8005b96:	e087      	b.n	8005ca8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005b98:	697b      	ldr	r3, [r7, #20]
 8005b9a:	ee07 3a90 	vmov	s15, r3
 8005b9e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005ba2:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8005d60 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8005ba6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005baa:	4b6a      	ldr	r3, [pc, #424]	@ (8005d54 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005bac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005bae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005bb2:	ee07 3a90 	vmov	s15, r3
 8005bb6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005bba:	ed97 6a03 	vldr	s12, [r7, #12]
 8005bbe:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8005d5c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005bc2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005bc6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005bca:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005bce:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005bd2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005bd6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005bda:	e065      	b.n	8005ca8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005bdc:	697b      	ldr	r3, [r7, #20]
 8005bde:	ee07 3a90 	vmov	s15, r3
 8005be2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005be6:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8005d64 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8005bea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005bee:	4b59      	ldr	r3, [pc, #356]	@ (8005d54 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005bf0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005bf2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005bf6:	ee07 3a90 	vmov	s15, r3
 8005bfa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005bfe:	ed97 6a03 	vldr	s12, [r7, #12]
 8005c02:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8005d5c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005c06:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005c0a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005c0e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005c12:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005c16:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005c1a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005c1e:	e043      	b.n	8005ca8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005c20:	697b      	ldr	r3, [r7, #20]
 8005c22:	ee07 3a90 	vmov	s15, r3
 8005c26:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005c2a:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8005d68 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8005c2e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005c32:	4b48      	ldr	r3, [pc, #288]	@ (8005d54 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005c34:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005c36:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005c3a:	ee07 3a90 	vmov	s15, r3
 8005c3e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005c42:	ed97 6a03 	vldr	s12, [r7, #12]
 8005c46:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8005d5c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005c4a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005c4e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005c52:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005c56:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005c5a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005c5e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005c62:	e021      	b.n	8005ca8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005c64:	697b      	ldr	r3, [r7, #20]
 8005c66:	ee07 3a90 	vmov	s15, r3
 8005c6a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005c6e:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8005d64 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8005c72:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005c76:	4b37      	ldr	r3, [pc, #220]	@ (8005d54 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005c78:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005c7a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005c7e:	ee07 3a90 	vmov	s15, r3
 8005c82:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005c86:	ed97 6a03 	vldr	s12, [r7, #12]
 8005c8a:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8005d5c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005c8e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005c92:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005c96:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005c9a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005c9e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005ca2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005ca6:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8005ca8:	4b2a      	ldr	r3, [pc, #168]	@ (8005d54 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005caa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005cac:	0a5b      	lsrs	r3, r3, #9
 8005cae:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005cb2:	ee07 3a90 	vmov	s15, r3
 8005cb6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005cba:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005cbe:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005cc2:	edd7 6a07 	vldr	s13, [r7, #28]
 8005cc6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005cca:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005cce:	ee17 2a90 	vmov	r2, s15
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8005cd6:	4b1f      	ldr	r3, [pc, #124]	@ (8005d54 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005cd8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005cda:	0c1b      	lsrs	r3, r3, #16
 8005cdc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005ce0:	ee07 3a90 	vmov	s15, r3
 8005ce4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005ce8:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005cec:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005cf0:	edd7 6a07 	vldr	s13, [r7, #28]
 8005cf4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005cf8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005cfc:	ee17 2a90 	vmov	r2, s15
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8005d04:	4b13      	ldr	r3, [pc, #76]	@ (8005d54 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005d06:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005d08:	0e1b      	lsrs	r3, r3, #24
 8005d0a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005d0e:	ee07 3a90 	vmov	s15, r3
 8005d12:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005d16:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005d1a:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005d1e:	edd7 6a07 	vldr	s13, [r7, #28]
 8005d22:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005d26:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005d2a:	ee17 2a90 	vmov	r2, s15
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8005d32:	e008      	b.n	8005d46 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	2200      	movs	r2, #0
 8005d38:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	2200      	movs	r2, #0
 8005d3e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	2200      	movs	r2, #0
 8005d44:	609a      	str	r2, [r3, #8]
}
 8005d46:	bf00      	nop
 8005d48:	3724      	adds	r7, #36	@ 0x24
 8005d4a:	46bd      	mov	sp, r7
 8005d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d50:	4770      	bx	lr
 8005d52:	bf00      	nop
 8005d54:	58024400 	.word	0x58024400
 8005d58:	03d09000 	.word	0x03d09000
 8005d5c:	46000000 	.word	0x46000000
 8005d60:	4c742400 	.word	0x4c742400
 8005d64:	4a742400 	.word	0x4a742400
 8005d68:	4bbebc20 	.word	0x4bbebc20

08005d6c <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8005d6c:	b480      	push	{r7}
 8005d6e:	b089      	sub	sp, #36	@ 0x24
 8005d70:	af00      	add	r7, sp, #0
 8005d72:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005d74:	4ba1      	ldr	r3, [pc, #644]	@ (8005ffc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005d76:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005d78:	f003 0303 	and.w	r3, r3, #3
 8005d7c:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8005d7e:	4b9f      	ldr	r3, [pc, #636]	@ (8005ffc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005d80:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005d82:	0d1b      	lsrs	r3, r3, #20
 8005d84:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005d88:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8005d8a:	4b9c      	ldr	r3, [pc, #624]	@ (8005ffc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005d8c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005d8e:	0a1b      	lsrs	r3, r3, #8
 8005d90:	f003 0301 	and.w	r3, r3, #1
 8005d94:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8005d96:	4b99      	ldr	r3, [pc, #612]	@ (8005ffc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005d98:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005d9a:	08db      	lsrs	r3, r3, #3
 8005d9c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005da0:	693a      	ldr	r2, [r7, #16]
 8005da2:	fb02 f303 	mul.w	r3, r2, r3
 8005da6:	ee07 3a90 	vmov	s15, r3
 8005daa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005dae:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8005db2:	697b      	ldr	r3, [r7, #20]
 8005db4:	2b00      	cmp	r3, #0
 8005db6:	f000 8111 	beq.w	8005fdc <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8005dba:	69bb      	ldr	r3, [r7, #24]
 8005dbc:	2b02      	cmp	r3, #2
 8005dbe:	f000 8083 	beq.w	8005ec8 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8005dc2:	69bb      	ldr	r3, [r7, #24]
 8005dc4:	2b02      	cmp	r3, #2
 8005dc6:	f200 80a1 	bhi.w	8005f0c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8005dca:	69bb      	ldr	r3, [r7, #24]
 8005dcc:	2b00      	cmp	r3, #0
 8005dce:	d003      	beq.n	8005dd8 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8005dd0:	69bb      	ldr	r3, [r7, #24]
 8005dd2:	2b01      	cmp	r3, #1
 8005dd4:	d056      	beq.n	8005e84 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8005dd6:	e099      	b.n	8005f0c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005dd8:	4b88      	ldr	r3, [pc, #544]	@ (8005ffc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	f003 0320 	and.w	r3, r3, #32
 8005de0:	2b00      	cmp	r3, #0
 8005de2:	d02d      	beq.n	8005e40 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005de4:	4b85      	ldr	r3, [pc, #532]	@ (8005ffc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	08db      	lsrs	r3, r3, #3
 8005dea:	f003 0303 	and.w	r3, r3, #3
 8005dee:	4a84      	ldr	r2, [pc, #528]	@ (8006000 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8005df0:	fa22 f303 	lsr.w	r3, r2, r3
 8005df4:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8005df6:	68bb      	ldr	r3, [r7, #8]
 8005df8:	ee07 3a90 	vmov	s15, r3
 8005dfc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005e00:	697b      	ldr	r3, [r7, #20]
 8005e02:	ee07 3a90 	vmov	s15, r3
 8005e06:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005e0a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005e0e:	4b7b      	ldr	r3, [pc, #492]	@ (8005ffc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005e10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005e12:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005e16:	ee07 3a90 	vmov	s15, r3
 8005e1a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005e1e:	ed97 6a03 	vldr	s12, [r7, #12]
 8005e22:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8006004 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005e26:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005e2a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005e2e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005e32:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005e36:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005e3a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8005e3e:	e087      	b.n	8005f50 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8005e40:	697b      	ldr	r3, [r7, #20]
 8005e42:	ee07 3a90 	vmov	s15, r3
 8005e46:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005e4a:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8006008 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8005e4e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005e52:	4b6a      	ldr	r3, [pc, #424]	@ (8005ffc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005e54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005e56:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005e5a:	ee07 3a90 	vmov	s15, r3
 8005e5e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005e62:	ed97 6a03 	vldr	s12, [r7, #12]
 8005e66:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8006004 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005e6a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005e6e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005e72:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005e76:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005e7a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005e7e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005e82:	e065      	b.n	8005f50 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8005e84:	697b      	ldr	r3, [r7, #20]
 8005e86:	ee07 3a90 	vmov	s15, r3
 8005e8a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005e8e:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 800600c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8005e92:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005e96:	4b59      	ldr	r3, [pc, #356]	@ (8005ffc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005e98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005e9a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005e9e:	ee07 3a90 	vmov	s15, r3
 8005ea2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005ea6:	ed97 6a03 	vldr	s12, [r7, #12]
 8005eaa:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8006004 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005eae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005eb2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005eb6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005eba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005ebe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005ec2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005ec6:	e043      	b.n	8005f50 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8005ec8:	697b      	ldr	r3, [r7, #20]
 8005eca:	ee07 3a90 	vmov	s15, r3
 8005ece:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005ed2:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8006010 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8005ed6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005eda:	4b48      	ldr	r3, [pc, #288]	@ (8005ffc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005edc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005ede:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005ee2:	ee07 3a90 	vmov	s15, r3
 8005ee6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005eea:	ed97 6a03 	vldr	s12, [r7, #12]
 8005eee:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8006004 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005ef2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005ef6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005efa:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005efe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005f02:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005f06:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005f0a:	e021      	b.n	8005f50 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8005f0c:	697b      	ldr	r3, [r7, #20]
 8005f0e:	ee07 3a90 	vmov	s15, r3
 8005f12:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005f16:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 800600c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8005f1a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005f1e:	4b37      	ldr	r3, [pc, #220]	@ (8005ffc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005f20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005f22:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005f26:	ee07 3a90 	vmov	s15, r3
 8005f2a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005f2e:	ed97 6a03 	vldr	s12, [r7, #12]
 8005f32:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8006004 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005f36:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005f3a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005f3e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005f42:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005f46:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005f4a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005f4e:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8005f50:	4b2a      	ldr	r3, [pc, #168]	@ (8005ffc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005f52:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005f54:	0a5b      	lsrs	r3, r3, #9
 8005f56:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005f5a:	ee07 3a90 	vmov	s15, r3
 8005f5e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005f62:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005f66:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005f6a:	edd7 6a07 	vldr	s13, [r7, #28]
 8005f6e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005f72:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005f76:	ee17 2a90 	vmov	r2, s15
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8005f7e:	4b1f      	ldr	r3, [pc, #124]	@ (8005ffc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005f80:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005f82:	0c1b      	lsrs	r3, r3, #16
 8005f84:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005f88:	ee07 3a90 	vmov	s15, r3
 8005f8c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005f90:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005f94:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005f98:	edd7 6a07 	vldr	s13, [r7, #28]
 8005f9c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005fa0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005fa4:	ee17 2a90 	vmov	r2, s15
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8005fac:	4b13      	ldr	r3, [pc, #76]	@ (8005ffc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005fae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005fb0:	0e1b      	lsrs	r3, r3, #24
 8005fb2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005fb6:	ee07 3a90 	vmov	s15, r3
 8005fba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005fbe:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005fc2:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005fc6:	edd7 6a07 	vldr	s13, [r7, #28]
 8005fca:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005fce:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005fd2:	ee17 2a90 	vmov	r2, s15
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8005fda:	e008      	b.n	8005fee <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	2200      	movs	r2, #0
 8005fe0:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	2200      	movs	r2, #0
 8005fe6:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	2200      	movs	r2, #0
 8005fec:	609a      	str	r2, [r3, #8]
}
 8005fee:	bf00      	nop
 8005ff0:	3724      	adds	r7, #36	@ 0x24
 8005ff2:	46bd      	mov	sp, r7
 8005ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ff8:	4770      	bx	lr
 8005ffa:	bf00      	nop
 8005ffc:	58024400 	.word	0x58024400
 8006000:	03d09000 	.word	0x03d09000
 8006004:	46000000 	.word	0x46000000
 8006008:	4c742400 	.word	0x4c742400
 800600c:	4a742400 	.word	0x4a742400
 8006010:	4bbebc20 	.word	0x4bbebc20

08006014 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8006014:	b580      	push	{r7, lr}
 8006016:	b084      	sub	sp, #16
 8006018:	af00      	add	r7, sp, #0
 800601a:	6078      	str	r0, [r7, #4]
 800601c:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800601e:	2300      	movs	r3, #0
 8006020:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8006022:	4b53      	ldr	r3, [pc, #332]	@ (8006170 <RCCEx_PLL2_Config+0x15c>)
 8006024:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006026:	f003 0303 	and.w	r3, r3, #3
 800602a:	2b03      	cmp	r3, #3
 800602c:	d101      	bne.n	8006032 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800602e:	2301      	movs	r3, #1
 8006030:	e099      	b.n	8006166 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8006032:	4b4f      	ldr	r3, [pc, #316]	@ (8006170 <RCCEx_PLL2_Config+0x15c>)
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	4a4e      	ldr	r2, [pc, #312]	@ (8006170 <RCCEx_PLL2_Config+0x15c>)
 8006038:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800603c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800603e:	f7fc f96f 	bl	8002320 <HAL_GetTick>
 8006042:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8006044:	e008      	b.n	8006058 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8006046:	f7fc f96b 	bl	8002320 <HAL_GetTick>
 800604a:	4602      	mov	r2, r0
 800604c:	68bb      	ldr	r3, [r7, #8]
 800604e:	1ad3      	subs	r3, r2, r3
 8006050:	2b02      	cmp	r3, #2
 8006052:	d901      	bls.n	8006058 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8006054:	2303      	movs	r3, #3
 8006056:	e086      	b.n	8006166 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8006058:	4b45      	ldr	r3, [pc, #276]	@ (8006170 <RCCEx_PLL2_Config+0x15c>)
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006060:	2b00      	cmp	r3, #0
 8006062:	d1f0      	bne.n	8006046 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8006064:	4b42      	ldr	r3, [pc, #264]	@ (8006170 <RCCEx_PLL2_Config+0x15c>)
 8006066:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006068:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	031b      	lsls	r3, r3, #12
 8006072:	493f      	ldr	r1, [pc, #252]	@ (8006170 <RCCEx_PLL2_Config+0x15c>)
 8006074:	4313      	orrs	r3, r2
 8006076:	628b      	str	r3, [r1, #40]	@ 0x28
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	685b      	ldr	r3, [r3, #4]
 800607c:	3b01      	subs	r3, #1
 800607e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	689b      	ldr	r3, [r3, #8]
 8006086:	3b01      	subs	r3, #1
 8006088:	025b      	lsls	r3, r3, #9
 800608a:	b29b      	uxth	r3, r3
 800608c:	431a      	orrs	r2, r3
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	68db      	ldr	r3, [r3, #12]
 8006092:	3b01      	subs	r3, #1
 8006094:	041b      	lsls	r3, r3, #16
 8006096:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800609a:	431a      	orrs	r2, r3
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	691b      	ldr	r3, [r3, #16]
 80060a0:	3b01      	subs	r3, #1
 80060a2:	061b      	lsls	r3, r3, #24
 80060a4:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 80060a8:	4931      	ldr	r1, [pc, #196]	@ (8006170 <RCCEx_PLL2_Config+0x15c>)
 80060aa:	4313      	orrs	r3, r2
 80060ac:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 80060ae:	4b30      	ldr	r3, [pc, #192]	@ (8006170 <RCCEx_PLL2_Config+0x15c>)
 80060b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80060b2:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	695b      	ldr	r3, [r3, #20]
 80060ba:	492d      	ldr	r1, [pc, #180]	@ (8006170 <RCCEx_PLL2_Config+0x15c>)
 80060bc:	4313      	orrs	r3, r2
 80060be:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 80060c0:	4b2b      	ldr	r3, [pc, #172]	@ (8006170 <RCCEx_PLL2_Config+0x15c>)
 80060c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80060c4:	f023 0220 	bic.w	r2, r3, #32
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	699b      	ldr	r3, [r3, #24]
 80060cc:	4928      	ldr	r1, [pc, #160]	@ (8006170 <RCCEx_PLL2_Config+0x15c>)
 80060ce:	4313      	orrs	r3, r2
 80060d0:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 80060d2:	4b27      	ldr	r3, [pc, #156]	@ (8006170 <RCCEx_PLL2_Config+0x15c>)
 80060d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80060d6:	4a26      	ldr	r2, [pc, #152]	@ (8006170 <RCCEx_PLL2_Config+0x15c>)
 80060d8:	f023 0310 	bic.w	r3, r3, #16
 80060dc:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 80060de:	4b24      	ldr	r3, [pc, #144]	@ (8006170 <RCCEx_PLL2_Config+0x15c>)
 80060e0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80060e2:	4b24      	ldr	r3, [pc, #144]	@ (8006174 <RCCEx_PLL2_Config+0x160>)
 80060e4:	4013      	ands	r3, r2
 80060e6:	687a      	ldr	r2, [r7, #4]
 80060e8:	69d2      	ldr	r2, [r2, #28]
 80060ea:	00d2      	lsls	r2, r2, #3
 80060ec:	4920      	ldr	r1, [pc, #128]	@ (8006170 <RCCEx_PLL2_Config+0x15c>)
 80060ee:	4313      	orrs	r3, r2
 80060f0:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 80060f2:	4b1f      	ldr	r3, [pc, #124]	@ (8006170 <RCCEx_PLL2_Config+0x15c>)
 80060f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80060f6:	4a1e      	ldr	r2, [pc, #120]	@ (8006170 <RCCEx_PLL2_Config+0x15c>)
 80060f8:	f043 0310 	orr.w	r3, r3, #16
 80060fc:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 80060fe:	683b      	ldr	r3, [r7, #0]
 8006100:	2b00      	cmp	r3, #0
 8006102:	d106      	bne.n	8006112 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8006104:	4b1a      	ldr	r3, [pc, #104]	@ (8006170 <RCCEx_PLL2_Config+0x15c>)
 8006106:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006108:	4a19      	ldr	r2, [pc, #100]	@ (8006170 <RCCEx_PLL2_Config+0x15c>)
 800610a:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800610e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8006110:	e00f      	b.n	8006132 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8006112:	683b      	ldr	r3, [r7, #0]
 8006114:	2b01      	cmp	r3, #1
 8006116:	d106      	bne.n	8006126 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8006118:	4b15      	ldr	r3, [pc, #84]	@ (8006170 <RCCEx_PLL2_Config+0x15c>)
 800611a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800611c:	4a14      	ldr	r2, [pc, #80]	@ (8006170 <RCCEx_PLL2_Config+0x15c>)
 800611e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006122:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8006124:	e005      	b.n	8006132 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8006126:	4b12      	ldr	r3, [pc, #72]	@ (8006170 <RCCEx_PLL2_Config+0x15c>)
 8006128:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800612a:	4a11      	ldr	r2, [pc, #68]	@ (8006170 <RCCEx_PLL2_Config+0x15c>)
 800612c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8006130:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8006132:	4b0f      	ldr	r3, [pc, #60]	@ (8006170 <RCCEx_PLL2_Config+0x15c>)
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	4a0e      	ldr	r2, [pc, #56]	@ (8006170 <RCCEx_PLL2_Config+0x15c>)
 8006138:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800613c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800613e:	f7fc f8ef 	bl	8002320 <HAL_GetTick>
 8006142:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8006144:	e008      	b.n	8006158 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8006146:	f7fc f8eb 	bl	8002320 <HAL_GetTick>
 800614a:	4602      	mov	r2, r0
 800614c:	68bb      	ldr	r3, [r7, #8]
 800614e:	1ad3      	subs	r3, r2, r3
 8006150:	2b02      	cmp	r3, #2
 8006152:	d901      	bls.n	8006158 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8006154:	2303      	movs	r3, #3
 8006156:	e006      	b.n	8006166 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8006158:	4b05      	ldr	r3, [pc, #20]	@ (8006170 <RCCEx_PLL2_Config+0x15c>)
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006160:	2b00      	cmp	r3, #0
 8006162:	d0f0      	beq.n	8006146 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8006164:	7bfb      	ldrb	r3, [r7, #15]
}
 8006166:	4618      	mov	r0, r3
 8006168:	3710      	adds	r7, #16
 800616a:	46bd      	mov	sp, r7
 800616c:	bd80      	pop	{r7, pc}
 800616e:	bf00      	nop
 8006170:	58024400 	.word	0x58024400
 8006174:	ffff0007 	.word	0xffff0007

08006178 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8006178:	b580      	push	{r7, lr}
 800617a:	b084      	sub	sp, #16
 800617c:	af00      	add	r7, sp, #0
 800617e:	6078      	str	r0, [r7, #4]
 8006180:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006182:	2300      	movs	r3, #0
 8006184:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8006186:	4b53      	ldr	r3, [pc, #332]	@ (80062d4 <RCCEx_PLL3_Config+0x15c>)
 8006188:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800618a:	f003 0303 	and.w	r3, r3, #3
 800618e:	2b03      	cmp	r3, #3
 8006190:	d101      	bne.n	8006196 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8006192:	2301      	movs	r3, #1
 8006194:	e099      	b.n	80062ca <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8006196:	4b4f      	ldr	r3, [pc, #316]	@ (80062d4 <RCCEx_PLL3_Config+0x15c>)
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	4a4e      	ldr	r2, [pc, #312]	@ (80062d4 <RCCEx_PLL3_Config+0x15c>)
 800619c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80061a0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80061a2:	f7fc f8bd 	bl	8002320 <HAL_GetTick>
 80061a6:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80061a8:	e008      	b.n	80061bc <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80061aa:	f7fc f8b9 	bl	8002320 <HAL_GetTick>
 80061ae:	4602      	mov	r2, r0
 80061b0:	68bb      	ldr	r3, [r7, #8]
 80061b2:	1ad3      	subs	r3, r2, r3
 80061b4:	2b02      	cmp	r3, #2
 80061b6:	d901      	bls.n	80061bc <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 80061b8:	2303      	movs	r3, #3
 80061ba:	e086      	b.n	80062ca <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80061bc:	4b45      	ldr	r3, [pc, #276]	@ (80062d4 <RCCEx_PLL3_Config+0x15c>)
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80061c4:	2b00      	cmp	r3, #0
 80061c6:	d1f0      	bne.n	80061aa <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 80061c8:	4b42      	ldr	r3, [pc, #264]	@ (80062d4 <RCCEx_PLL3_Config+0x15c>)
 80061ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80061cc:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	051b      	lsls	r3, r3, #20
 80061d6:	493f      	ldr	r1, [pc, #252]	@ (80062d4 <RCCEx_PLL3_Config+0x15c>)
 80061d8:	4313      	orrs	r3, r2
 80061da:	628b      	str	r3, [r1, #40]	@ 0x28
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	685b      	ldr	r3, [r3, #4]
 80061e0:	3b01      	subs	r3, #1
 80061e2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	689b      	ldr	r3, [r3, #8]
 80061ea:	3b01      	subs	r3, #1
 80061ec:	025b      	lsls	r3, r3, #9
 80061ee:	b29b      	uxth	r3, r3
 80061f0:	431a      	orrs	r2, r3
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	68db      	ldr	r3, [r3, #12]
 80061f6:	3b01      	subs	r3, #1
 80061f8:	041b      	lsls	r3, r3, #16
 80061fa:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80061fe:	431a      	orrs	r2, r3
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	691b      	ldr	r3, [r3, #16]
 8006204:	3b01      	subs	r3, #1
 8006206:	061b      	lsls	r3, r3, #24
 8006208:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800620c:	4931      	ldr	r1, [pc, #196]	@ (80062d4 <RCCEx_PLL3_Config+0x15c>)
 800620e:	4313      	orrs	r3, r2
 8006210:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8006212:	4b30      	ldr	r3, [pc, #192]	@ (80062d4 <RCCEx_PLL3_Config+0x15c>)
 8006214:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006216:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	695b      	ldr	r3, [r3, #20]
 800621e:	492d      	ldr	r1, [pc, #180]	@ (80062d4 <RCCEx_PLL3_Config+0x15c>)
 8006220:	4313      	orrs	r3, r2
 8006222:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8006224:	4b2b      	ldr	r3, [pc, #172]	@ (80062d4 <RCCEx_PLL3_Config+0x15c>)
 8006226:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006228:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	699b      	ldr	r3, [r3, #24]
 8006230:	4928      	ldr	r1, [pc, #160]	@ (80062d4 <RCCEx_PLL3_Config+0x15c>)
 8006232:	4313      	orrs	r3, r2
 8006234:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8006236:	4b27      	ldr	r3, [pc, #156]	@ (80062d4 <RCCEx_PLL3_Config+0x15c>)
 8006238:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800623a:	4a26      	ldr	r2, [pc, #152]	@ (80062d4 <RCCEx_PLL3_Config+0x15c>)
 800623c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006240:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8006242:	4b24      	ldr	r3, [pc, #144]	@ (80062d4 <RCCEx_PLL3_Config+0x15c>)
 8006244:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006246:	4b24      	ldr	r3, [pc, #144]	@ (80062d8 <RCCEx_PLL3_Config+0x160>)
 8006248:	4013      	ands	r3, r2
 800624a:	687a      	ldr	r2, [r7, #4]
 800624c:	69d2      	ldr	r2, [r2, #28]
 800624e:	00d2      	lsls	r2, r2, #3
 8006250:	4920      	ldr	r1, [pc, #128]	@ (80062d4 <RCCEx_PLL3_Config+0x15c>)
 8006252:	4313      	orrs	r3, r2
 8006254:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8006256:	4b1f      	ldr	r3, [pc, #124]	@ (80062d4 <RCCEx_PLL3_Config+0x15c>)
 8006258:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800625a:	4a1e      	ldr	r2, [pc, #120]	@ (80062d4 <RCCEx_PLL3_Config+0x15c>)
 800625c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006260:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8006262:	683b      	ldr	r3, [r7, #0]
 8006264:	2b00      	cmp	r3, #0
 8006266:	d106      	bne.n	8006276 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8006268:	4b1a      	ldr	r3, [pc, #104]	@ (80062d4 <RCCEx_PLL3_Config+0x15c>)
 800626a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800626c:	4a19      	ldr	r2, [pc, #100]	@ (80062d4 <RCCEx_PLL3_Config+0x15c>)
 800626e:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8006272:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8006274:	e00f      	b.n	8006296 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8006276:	683b      	ldr	r3, [r7, #0]
 8006278:	2b01      	cmp	r3, #1
 800627a:	d106      	bne.n	800628a <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800627c:	4b15      	ldr	r3, [pc, #84]	@ (80062d4 <RCCEx_PLL3_Config+0x15c>)
 800627e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006280:	4a14      	ldr	r2, [pc, #80]	@ (80062d4 <RCCEx_PLL3_Config+0x15c>)
 8006282:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8006286:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8006288:	e005      	b.n	8006296 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800628a:	4b12      	ldr	r3, [pc, #72]	@ (80062d4 <RCCEx_PLL3_Config+0x15c>)
 800628c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800628e:	4a11      	ldr	r2, [pc, #68]	@ (80062d4 <RCCEx_PLL3_Config+0x15c>)
 8006290:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8006294:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8006296:	4b0f      	ldr	r3, [pc, #60]	@ (80062d4 <RCCEx_PLL3_Config+0x15c>)
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	4a0e      	ldr	r2, [pc, #56]	@ (80062d4 <RCCEx_PLL3_Config+0x15c>)
 800629c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80062a0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80062a2:	f7fc f83d 	bl	8002320 <HAL_GetTick>
 80062a6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80062a8:	e008      	b.n	80062bc <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80062aa:	f7fc f839 	bl	8002320 <HAL_GetTick>
 80062ae:	4602      	mov	r2, r0
 80062b0:	68bb      	ldr	r3, [r7, #8]
 80062b2:	1ad3      	subs	r3, r2, r3
 80062b4:	2b02      	cmp	r3, #2
 80062b6:	d901      	bls.n	80062bc <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 80062b8:	2303      	movs	r3, #3
 80062ba:	e006      	b.n	80062ca <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80062bc:	4b05      	ldr	r3, [pc, #20]	@ (80062d4 <RCCEx_PLL3_Config+0x15c>)
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80062c4:	2b00      	cmp	r3, #0
 80062c6:	d0f0      	beq.n	80062aa <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 80062c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80062ca:	4618      	mov	r0, r3
 80062cc:	3710      	adds	r7, #16
 80062ce:	46bd      	mov	sp, r7
 80062d0:	bd80      	pop	{r7, pc}
 80062d2:	bf00      	nop
 80062d4:	58024400 	.word	0x58024400
 80062d8:	ffff0007 	.word	0xffff0007

080062dc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80062dc:	b580      	push	{r7, lr}
 80062de:	b082      	sub	sp, #8
 80062e0:	af00      	add	r7, sp, #0
 80062e2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	2b00      	cmp	r3, #0
 80062e8:	d101      	bne.n	80062ee <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80062ea:	2301      	movs	r3, #1
 80062ec:	e042      	b.n	8006374 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80062f4:	2b00      	cmp	r3, #0
 80062f6:	d106      	bne.n	8006306 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	2200      	movs	r2, #0
 80062fc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006300:	6878      	ldr	r0, [r7, #4]
 8006302:	f7fb fd0f 	bl	8001d24 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	2224      	movs	r2, #36	@ 0x24
 800630a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	681a      	ldr	r2, [r3, #0]
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	f022 0201 	bic.w	r2, r2, #1
 800631c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006322:	2b00      	cmp	r3, #0
 8006324:	d002      	beq.n	800632c <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8006326:	6878      	ldr	r0, [r7, #4]
 8006328:	f000 fee6 	bl	80070f8 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800632c:	6878      	ldr	r0, [r7, #4]
 800632e:	f000 f97b 	bl	8006628 <UART_SetConfig>
 8006332:	4603      	mov	r3, r0
 8006334:	2b01      	cmp	r3, #1
 8006336:	d101      	bne.n	800633c <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8006338:	2301      	movs	r3, #1
 800633a:	e01b      	b.n	8006374 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	685a      	ldr	r2, [r3, #4]
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800634a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	689a      	ldr	r2, [r3, #8]
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800635a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	681a      	ldr	r2, [r3, #0]
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	f042 0201 	orr.w	r2, r2, #1
 800636a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800636c:	6878      	ldr	r0, [r7, #4]
 800636e:	f000 ff65 	bl	800723c <UART_CheckIdleState>
 8006372:	4603      	mov	r3, r0
}
 8006374:	4618      	mov	r0, r3
 8006376:	3708      	adds	r7, #8
 8006378:	46bd      	mov	sp, r7
 800637a:	bd80      	pop	{r7, pc}

0800637c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800637c:	b580      	push	{r7, lr}
 800637e:	b08a      	sub	sp, #40	@ 0x28
 8006380:	af02      	add	r7, sp, #8
 8006382:	60f8      	str	r0, [r7, #12]
 8006384:	60b9      	str	r1, [r7, #8]
 8006386:	603b      	str	r3, [r7, #0]
 8006388:	4613      	mov	r3, r2
 800638a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800638c:	68fb      	ldr	r3, [r7, #12]
 800638e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006392:	2b20      	cmp	r3, #32
 8006394:	d17b      	bne.n	800648e <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8006396:	68bb      	ldr	r3, [r7, #8]
 8006398:	2b00      	cmp	r3, #0
 800639a:	d002      	beq.n	80063a2 <HAL_UART_Transmit+0x26>
 800639c:	88fb      	ldrh	r3, [r7, #6]
 800639e:	2b00      	cmp	r3, #0
 80063a0:	d101      	bne.n	80063a6 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80063a2:	2301      	movs	r3, #1
 80063a4:	e074      	b.n	8006490 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80063a6:	68fb      	ldr	r3, [r7, #12]
 80063a8:	2200      	movs	r2, #0
 80063aa:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80063ae:	68fb      	ldr	r3, [r7, #12]
 80063b0:	2221      	movs	r2, #33	@ 0x21
 80063b2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80063b6:	f7fb ffb3 	bl	8002320 <HAL_GetTick>
 80063ba:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80063bc:	68fb      	ldr	r3, [r7, #12]
 80063be:	88fa      	ldrh	r2, [r7, #6]
 80063c0:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 80063c4:	68fb      	ldr	r3, [r7, #12]
 80063c6:	88fa      	ldrh	r2, [r7, #6]
 80063c8:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80063cc:	68fb      	ldr	r3, [r7, #12]
 80063ce:	689b      	ldr	r3, [r3, #8]
 80063d0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80063d4:	d108      	bne.n	80063e8 <HAL_UART_Transmit+0x6c>
 80063d6:	68fb      	ldr	r3, [r7, #12]
 80063d8:	691b      	ldr	r3, [r3, #16]
 80063da:	2b00      	cmp	r3, #0
 80063dc:	d104      	bne.n	80063e8 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80063de:	2300      	movs	r3, #0
 80063e0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80063e2:	68bb      	ldr	r3, [r7, #8]
 80063e4:	61bb      	str	r3, [r7, #24]
 80063e6:	e003      	b.n	80063f0 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80063e8:	68bb      	ldr	r3, [r7, #8]
 80063ea:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80063ec:	2300      	movs	r3, #0
 80063ee:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80063f0:	e030      	b.n	8006454 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80063f2:	683b      	ldr	r3, [r7, #0]
 80063f4:	9300      	str	r3, [sp, #0]
 80063f6:	697b      	ldr	r3, [r7, #20]
 80063f8:	2200      	movs	r2, #0
 80063fa:	2180      	movs	r1, #128	@ 0x80
 80063fc:	68f8      	ldr	r0, [r7, #12]
 80063fe:	f000 ffc7 	bl	8007390 <UART_WaitOnFlagUntilTimeout>
 8006402:	4603      	mov	r3, r0
 8006404:	2b00      	cmp	r3, #0
 8006406:	d005      	beq.n	8006414 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8006408:	68fb      	ldr	r3, [r7, #12]
 800640a:	2220      	movs	r2, #32
 800640c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 8006410:	2303      	movs	r3, #3
 8006412:	e03d      	b.n	8006490 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8006414:	69fb      	ldr	r3, [r7, #28]
 8006416:	2b00      	cmp	r3, #0
 8006418:	d10b      	bne.n	8006432 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800641a:	69bb      	ldr	r3, [r7, #24]
 800641c:	881b      	ldrh	r3, [r3, #0]
 800641e:	461a      	mov	r2, r3
 8006420:	68fb      	ldr	r3, [r7, #12]
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006428:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800642a:	69bb      	ldr	r3, [r7, #24]
 800642c:	3302      	adds	r3, #2
 800642e:	61bb      	str	r3, [r7, #24]
 8006430:	e007      	b.n	8006442 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8006432:	69fb      	ldr	r3, [r7, #28]
 8006434:	781a      	ldrb	r2, [r3, #0]
 8006436:	68fb      	ldr	r3, [r7, #12]
 8006438:	681b      	ldr	r3, [r3, #0]
 800643a:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800643c:	69fb      	ldr	r3, [r7, #28]
 800643e:	3301      	adds	r3, #1
 8006440:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006442:	68fb      	ldr	r3, [r7, #12]
 8006444:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8006448:	b29b      	uxth	r3, r3
 800644a:	3b01      	subs	r3, #1
 800644c:	b29a      	uxth	r2, r3
 800644e:	68fb      	ldr	r3, [r7, #12]
 8006450:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 8006454:	68fb      	ldr	r3, [r7, #12]
 8006456:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800645a:	b29b      	uxth	r3, r3
 800645c:	2b00      	cmp	r3, #0
 800645e:	d1c8      	bne.n	80063f2 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006460:	683b      	ldr	r3, [r7, #0]
 8006462:	9300      	str	r3, [sp, #0]
 8006464:	697b      	ldr	r3, [r7, #20]
 8006466:	2200      	movs	r2, #0
 8006468:	2140      	movs	r1, #64	@ 0x40
 800646a:	68f8      	ldr	r0, [r7, #12]
 800646c:	f000 ff90 	bl	8007390 <UART_WaitOnFlagUntilTimeout>
 8006470:	4603      	mov	r3, r0
 8006472:	2b00      	cmp	r3, #0
 8006474:	d005      	beq.n	8006482 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8006476:	68fb      	ldr	r3, [r7, #12]
 8006478:	2220      	movs	r2, #32
 800647a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 800647e:	2303      	movs	r3, #3
 8006480:	e006      	b.n	8006490 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006482:	68fb      	ldr	r3, [r7, #12]
 8006484:	2220      	movs	r2, #32
 8006486:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 800648a:	2300      	movs	r3, #0
 800648c:	e000      	b.n	8006490 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 800648e:	2302      	movs	r3, #2
  }
}
 8006490:	4618      	mov	r0, r3
 8006492:	3720      	adds	r7, #32
 8006494:	46bd      	mov	sp, r7
 8006496:	bd80      	pop	{r7, pc}

08006498 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006498:	b580      	push	{r7, lr}
 800649a:	b08a      	sub	sp, #40	@ 0x28
 800649c:	af02      	add	r7, sp, #8
 800649e:	60f8      	str	r0, [r7, #12]
 80064a0:	60b9      	str	r1, [r7, #8]
 80064a2:	603b      	str	r3, [r7, #0]
 80064a4:	4613      	mov	r3, r2
 80064a6:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80064a8:	68fb      	ldr	r3, [r7, #12]
 80064aa:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80064ae:	2b20      	cmp	r3, #32
 80064b0:	f040 80b5 	bne.w	800661e <HAL_UART_Receive+0x186>
  {
    if ((pData == NULL) || (Size == 0U))
 80064b4:	68bb      	ldr	r3, [r7, #8]
 80064b6:	2b00      	cmp	r3, #0
 80064b8:	d002      	beq.n	80064c0 <HAL_UART_Receive+0x28>
 80064ba:	88fb      	ldrh	r3, [r7, #6]
 80064bc:	2b00      	cmp	r3, #0
 80064be:	d101      	bne.n	80064c4 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 80064c0:	2301      	movs	r3, #1
 80064c2:	e0ad      	b.n	8006620 <HAL_UART_Receive+0x188>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80064c4:	68fb      	ldr	r3, [r7, #12]
 80064c6:	2200      	movs	r2, #0
 80064c8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80064cc:	68fb      	ldr	r3, [r7, #12]
 80064ce:	2222      	movs	r2, #34	@ 0x22
 80064d0:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80064d4:	68fb      	ldr	r3, [r7, #12]
 80064d6:	2200      	movs	r2, #0
 80064d8:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80064da:	f7fb ff21 	bl	8002320 <HAL_GetTick>
 80064de:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 80064e0:	68fb      	ldr	r3, [r7, #12]
 80064e2:	88fa      	ldrh	r2, [r7, #6]
 80064e4:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
    huart->RxXferCount = Size;
 80064e8:	68fb      	ldr	r3, [r7, #12]
 80064ea:	88fa      	ldrh	r2, [r7, #6]
 80064ec:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 80064f0:	68fb      	ldr	r3, [r7, #12]
 80064f2:	689b      	ldr	r3, [r3, #8]
 80064f4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80064f8:	d10e      	bne.n	8006518 <HAL_UART_Receive+0x80>
 80064fa:	68fb      	ldr	r3, [r7, #12]
 80064fc:	691b      	ldr	r3, [r3, #16]
 80064fe:	2b00      	cmp	r3, #0
 8006500:	d105      	bne.n	800650e <HAL_UART_Receive+0x76>
 8006502:	68fb      	ldr	r3, [r7, #12]
 8006504:	f240 12ff 	movw	r2, #511	@ 0x1ff
 8006508:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800650c:	e02d      	b.n	800656a <HAL_UART_Receive+0xd2>
 800650e:	68fb      	ldr	r3, [r7, #12]
 8006510:	22ff      	movs	r2, #255	@ 0xff
 8006512:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8006516:	e028      	b.n	800656a <HAL_UART_Receive+0xd2>
 8006518:	68fb      	ldr	r3, [r7, #12]
 800651a:	689b      	ldr	r3, [r3, #8]
 800651c:	2b00      	cmp	r3, #0
 800651e:	d10d      	bne.n	800653c <HAL_UART_Receive+0xa4>
 8006520:	68fb      	ldr	r3, [r7, #12]
 8006522:	691b      	ldr	r3, [r3, #16]
 8006524:	2b00      	cmp	r3, #0
 8006526:	d104      	bne.n	8006532 <HAL_UART_Receive+0x9a>
 8006528:	68fb      	ldr	r3, [r7, #12]
 800652a:	22ff      	movs	r2, #255	@ 0xff
 800652c:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8006530:	e01b      	b.n	800656a <HAL_UART_Receive+0xd2>
 8006532:	68fb      	ldr	r3, [r7, #12]
 8006534:	227f      	movs	r2, #127	@ 0x7f
 8006536:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800653a:	e016      	b.n	800656a <HAL_UART_Receive+0xd2>
 800653c:	68fb      	ldr	r3, [r7, #12]
 800653e:	689b      	ldr	r3, [r3, #8]
 8006540:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006544:	d10d      	bne.n	8006562 <HAL_UART_Receive+0xca>
 8006546:	68fb      	ldr	r3, [r7, #12]
 8006548:	691b      	ldr	r3, [r3, #16]
 800654a:	2b00      	cmp	r3, #0
 800654c:	d104      	bne.n	8006558 <HAL_UART_Receive+0xc0>
 800654e:	68fb      	ldr	r3, [r7, #12]
 8006550:	227f      	movs	r2, #127	@ 0x7f
 8006552:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8006556:	e008      	b.n	800656a <HAL_UART_Receive+0xd2>
 8006558:	68fb      	ldr	r3, [r7, #12]
 800655a:	223f      	movs	r2, #63	@ 0x3f
 800655c:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8006560:	e003      	b.n	800656a <HAL_UART_Receive+0xd2>
 8006562:	68fb      	ldr	r3, [r7, #12]
 8006564:	2200      	movs	r2, #0
 8006566:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
    uhMask = huart->Mask;
 800656a:	68fb      	ldr	r3, [r7, #12]
 800656c:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8006570:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006572:	68fb      	ldr	r3, [r7, #12]
 8006574:	689b      	ldr	r3, [r3, #8]
 8006576:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800657a:	d108      	bne.n	800658e <HAL_UART_Receive+0xf6>
 800657c:	68fb      	ldr	r3, [r7, #12]
 800657e:	691b      	ldr	r3, [r3, #16]
 8006580:	2b00      	cmp	r3, #0
 8006582:	d104      	bne.n	800658e <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 8006584:	2300      	movs	r3, #0
 8006586:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8006588:	68bb      	ldr	r3, [r7, #8]
 800658a:	61bb      	str	r3, [r7, #24]
 800658c:	e003      	b.n	8006596 <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 800658e:	68bb      	ldr	r3, [r7, #8]
 8006590:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006592:	2300      	movs	r3, #0
 8006594:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8006596:	e036      	b.n	8006606 <HAL_UART_Receive+0x16e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8006598:	683b      	ldr	r3, [r7, #0]
 800659a:	9300      	str	r3, [sp, #0]
 800659c:	697b      	ldr	r3, [r7, #20]
 800659e:	2200      	movs	r2, #0
 80065a0:	2120      	movs	r1, #32
 80065a2:	68f8      	ldr	r0, [r7, #12]
 80065a4:	f000 fef4 	bl	8007390 <UART_WaitOnFlagUntilTimeout>
 80065a8:	4603      	mov	r3, r0
 80065aa:	2b00      	cmp	r3, #0
 80065ac:	d005      	beq.n	80065ba <HAL_UART_Receive+0x122>
      {
        huart->RxState = HAL_UART_STATE_READY;
 80065ae:	68fb      	ldr	r3, [r7, #12]
 80065b0:	2220      	movs	r2, #32
 80065b2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        return HAL_TIMEOUT;
 80065b6:	2303      	movs	r3, #3
 80065b8:	e032      	b.n	8006620 <HAL_UART_Receive+0x188>
      }
      if (pdata8bits == NULL)
 80065ba:	69fb      	ldr	r3, [r7, #28]
 80065bc:	2b00      	cmp	r3, #0
 80065be:	d10c      	bne.n	80065da <HAL_UART_Receive+0x142>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 80065c0:	68fb      	ldr	r3, [r7, #12]
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80065c6:	b29a      	uxth	r2, r3
 80065c8:	8a7b      	ldrh	r3, [r7, #18]
 80065ca:	4013      	ands	r3, r2
 80065cc:	b29a      	uxth	r2, r3
 80065ce:	69bb      	ldr	r3, [r7, #24]
 80065d0:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 80065d2:	69bb      	ldr	r3, [r7, #24]
 80065d4:	3302      	adds	r3, #2
 80065d6:	61bb      	str	r3, [r7, #24]
 80065d8:	e00c      	b.n	80065f4 <HAL_UART_Receive+0x15c>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 80065da:	68fb      	ldr	r3, [r7, #12]
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80065e0:	b2da      	uxtb	r2, r3
 80065e2:	8a7b      	ldrh	r3, [r7, #18]
 80065e4:	b2db      	uxtb	r3, r3
 80065e6:	4013      	ands	r3, r2
 80065e8:	b2da      	uxtb	r2, r3
 80065ea:	69fb      	ldr	r3, [r7, #28]
 80065ec:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 80065ee:	69fb      	ldr	r3, [r7, #28]
 80065f0:	3301      	adds	r3, #1
 80065f2:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 80065f4:	68fb      	ldr	r3, [r7, #12]
 80065f6:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80065fa:	b29b      	uxth	r3, r3
 80065fc:	3b01      	subs	r3, #1
 80065fe:	b29a      	uxth	r2, r3
 8006600:	68fb      	ldr	r3, [r7, #12]
 8006602:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    while (huart->RxXferCount > 0U)
 8006606:	68fb      	ldr	r3, [r7, #12]
 8006608:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800660c:	b29b      	uxth	r3, r3
 800660e:	2b00      	cmp	r3, #0
 8006610:	d1c2      	bne.n	8006598 <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8006612:	68fb      	ldr	r3, [r7, #12]
 8006614:	2220      	movs	r2, #32
 8006616:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

    return HAL_OK;
 800661a:	2300      	movs	r3, #0
 800661c:	e000      	b.n	8006620 <HAL_UART_Receive+0x188>
  }
  else
  {
    return HAL_BUSY;
 800661e:	2302      	movs	r3, #2
  }
}
 8006620:	4618      	mov	r0, r3
 8006622:	3720      	adds	r7, #32
 8006624:	46bd      	mov	sp, r7
 8006626:	bd80      	pop	{r7, pc}

08006628 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006628:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800662c:	b092      	sub	sp, #72	@ 0x48
 800662e:	af00      	add	r7, sp, #0
 8006630:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006632:	2300      	movs	r3, #0
 8006634:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006638:	697b      	ldr	r3, [r7, #20]
 800663a:	689a      	ldr	r2, [r3, #8]
 800663c:	697b      	ldr	r3, [r7, #20]
 800663e:	691b      	ldr	r3, [r3, #16]
 8006640:	431a      	orrs	r2, r3
 8006642:	697b      	ldr	r3, [r7, #20]
 8006644:	695b      	ldr	r3, [r3, #20]
 8006646:	431a      	orrs	r2, r3
 8006648:	697b      	ldr	r3, [r7, #20]
 800664a:	69db      	ldr	r3, [r3, #28]
 800664c:	4313      	orrs	r3, r2
 800664e:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006650:	697b      	ldr	r3, [r7, #20]
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	681a      	ldr	r2, [r3, #0]
 8006656:	4bbe      	ldr	r3, [pc, #760]	@ (8006950 <UART_SetConfig+0x328>)
 8006658:	4013      	ands	r3, r2
 800665a:	697a      	ldr	r2, [r7, #20]
 800665c:	6812      	ldr	r2, [r2, #0]
 800665e:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8006660:	430b      	orrs	r3, r1
 8006662:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006664:	697b      	ldr	r3, [r7, #20]
 8006666:	681b      	ldr	r3, [r3, #0]
 8006668:	685b      	ldr	r3, [r3, #4]
 800666a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800666e:	697b      	ldr	r3, [r7, #20]
 8006670:	68da      	ldr	r2, [r3, #12]
 8006672:	697b      	ldr	r3, [r7, #20]
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	430a      	orrs	r2, r1
 8006678:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800667a:	697b      	ldr	r3, [r7, #20]
 800667c:	699b      	ldr	r3, [r3, #24]
 800667e:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006680:	697b      	ldr	r3, [r7, #20]
 8006682:	681b      	ldr	r3, [r3, #0]
 8006684:	4ab3      	ldr	r2, [pc, #716]	@ (8006954 <UART_SetConfig+0x32c>)
 8006686:	4293      	cmp	r3, r2
 8006688:	d004      	beq.n	8006694 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800668a:	697b      	ldr	r3, [r7, #20]
 800668c:	6a1b      	ldr	r3, [r3, #32]
 800668e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006690:	4313      	orrs	r3, r2
 8006692:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006694:	697b      	ldr	r3, [r7, #20]
 8006696:	681b      	ldr	r3, [r3, #0]
 8006698:	689a      	ldr	r2, [r3, #8]
 800669a:	4baf      	ldr	r3, [pc, #700]	@ (8006958 <UART_SetConfig+0x330>)
 800669c:	4013      	ands	r3, r2
 800669e:	697a      	ldr	r2, [r7, #20]
 80066a0:	6812      	ldr	r2, [r2, #0]
 80066a2:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80066a4:	430b      	orrs	r3, r1
 80066a6:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80066a8:	697b      	ldr	r3, [r7, #20]
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80066ae:	f023 010f 	bic.w	r1, r3, #15
 80066b2:	697b      	ldr	r3, [r7, #20]
 80066b4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80066b6:	697b      	ldr	r3, [r7, #20]
 80066b8:	681b      	ldr	r3, [r3, #0]
 80066ba:	430a      	orrs	r2, r1
 80066bc:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80066be:	697b      	ldr	r3, [r7, #20]
 80066c0:	681b      	ldr	r3, [r3, #0]
 80066c2:	4aa6      	ldr	r2, [pc, #664]	@ (800695c <UART_SetConfig+0x334>)
 80066c4:	4293      	cmp	r3, r2
 80066c6:	d177      	bne.n	80067b8 <UART_SetConfig+0x190>
 80066c8:	4ba5      	ldr	r3, [pc, #660]	@ (8006960 <UART_SetConfig+0x338>)
 80066ca:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80066cc:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80066d0:	2b28      	cmp	r3, #40	@ 0x28
 80066d2:	d86d      	bhi.n	80067b0 <UART_SetConfig+0x188>
 80066d4:	a201      	add	r2, pc, #4	@ (adr r2, 80066dc <UART_SetConfig+0xb4>)
 80066d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80066da:	bf00      	nop
 80066dc:	08006781 	.word	0x08006781
 80066e0:	080067b1 	.word	0x080067b1
 80066e4:	080067b1 	.word	0x080067b1
 80066e8:	080067b1 	.word	0x080067b1
 80066ec:	080067b1 	.word	0x080067b1
 80066f0:	080067b1 	.word	0x080067b1
 80066f4:	080067b1 	.word	0x080067b1
 80066f8:	080067b1 	.word	0x080067b1
 80066fc:	08006789 	.word	0x08006789
 8006700:	080067b1 	.word	0x080067b1
 8006704:	080067b1 	.word	0x080067b1
 8006708:	080067b1 	.word	0x080067b1
 800670c:	080067b1 	.word	0x080067b1
 8006710:	080067b1 	.word	0x080067b1
 8006714:	080067b1 	.word	0x080067b1
 8006718:	080067b1 	.word	0x080067b1
 800671c:	08006791 	.word	0x08006791
 8006720:	080067b1 	.word	0x080067b1
 8006724:	080067b1 	.word	0x080067b1
 8006728:	080067b1 	.word	0x080067b1
 800672c:	080067b1 	.word	0x080067b1
 8006730:	080067b1 	.word	0x080067b1
 8006734:	080067b1 	.word	0x080067b1
 8006738:	080067b1 	.word	0x080067b1
 800673c:	08006799 	.word	0x08006799
 8006740:	080067b1 	.word	0x080067b1
 8006744:	080067b1 	.word	0x080067b1
 8006748:	080067b1 	.word	0x080067b1
 800674c:	080067b1 	.word	0x080067b1
 8006750:	080067b1 	.word	0x080067b1
 8006754:	080067b1 	.word	0x080067b1
 8006758:	080067b1 	.word	0x080067b1
 800675c:	080067a1 	.word	0x080067a1
 8006760:	080067b1 	.word	0x080067b1
 8006764:	080067b1 	.word	0x080067b1
 8006768:	080067b1 	.word	0x080067b1
 800676c:	080067b1 	.word	0x080067b1
 8006770:	080067b1 	.word	0x080067b1
 8006774:	080067b1 	.word	0x080067b1
 8006778:	080067b1 	.word	0x080067b1
 800677c:	080067a9 	.word	0x080067a9
 8006780:	2301      	movs	r3, #1
 8006782:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006786:	e222      	b.n	8006bce <UART_SetConfig+0x5a6>
 8006788:	2304      	movs	r3, #4
 800678a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800678e:	e21e      	b.n	8006bce <UART_SetConfig+0x5a6>
 8006790:	2308      	movs	r3, #8
 8006792:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006796:	e21a      	b.n	8006bce <UART_SetConfig+0x5a6>
 8006798:	2310      	movs	r3, #16
 800679a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800679e:	e216      	b.n	8006bce <UART_SetConfig+0x5a6>
 80067a0:	2320      	movs	r3, #32
 80067a2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80067a6:	e212      	b.n	8006bce <UART_SetConfig+0x5a6>
 80067a8:	2340      	movs	r3, #64	@ 0x40
 80067aa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80067ae:	e20e      	b.n	8006bce <UART_SetConfig+0x5a6>
 80067b0:	2380      	movs	r3, #128	@ 0x80
 80067b2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80067b6:	e20a      	b.n	8006bce <UART_SetConfig+0x5a6>
 80067b8:	697b      	ldr	r3, [r7, #20]
 80067ba:	681b      	ldr	r3, [r3, #0]
 80067bc:	4a69      	ldr	r2, [pc, #420]	@ (8006964 <UART_SetConfig+0x33c>)
 80067be:	4293      	cmp	r3, r2
 80067c0:	d130      	bne.n	8006824 <UART_SetConfig+0x1fc>
 80067c2:	4b67      	ldr	r3, [pc, #412]	@ (8006960 <UART_SetConfig+0x338>)
 80067c4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80067c6:	f003 0307 	and.w	r3, r3, #7
 80067ca:	2b05      	cmp	r3, #5
 80067cc:	d826      	bhi.n	800681c <UART_SetConfig+0x1f4>
 80067ce:	a201      	add	r2, pc, #4	@ (adr r2, 80067d4 <UART_SetConfig+0x1ac>)
 80067d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80067d4:	080067ed 	.word	0x080067ed
 80067d8:	080067f5 	.word	0x080067f5
 80067dc:	080067fd 	.word	0x080067fd
 80067e0:	08006805 	.word	0x08006805
 80067e4:	0800680d 	.word	0x0800680d
 80067e8:	08006815 	.word	0x08006815
 80067ec:	2300      	movs	r3, #0
 80067ee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80067f2:	e1ec      	b.n	8006bce <UART_SetConfig+0x5a6>
 80067f4:	2304      	movs	r3, #4
 80067f6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80067fa:	e1e8      	b.n	8006bce <UART_SetConfig+0x5a6>
 80067fc:	2308      	movs	r3, #8
 80067fe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006802:	e1e4      	b.n	8006bce <UART_SetConfig+0x5a6>
 8006804:	2310      	movs	r3, #16
 8006806:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800680a:	e1e0      	b.n	8006bce <UART_SetConfig+0x5a6>
 800680c:	2320      	movs	r3, #32
 800680e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006812:	e1dc      	b.n	8006bce <UART_SetConfig+0x5a6>
 8006814:	2340      	movs	r3, #64	@ 0x40
 8006816:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800681a:	e1d8      	b.n	8006bce <UART_SetConfig+0x5a6>
 800681c:	2380      	movs	r3, #128	@ 0x80
 800681e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006822:	e1d4      	b.n	8006bce <UART_SetConfig+0x5a6>
 8006824:	697b      	ldr	r3, [r7, #20]
 8006826:	681b      	ldr	r3, [r3, #0]
 8006828:	4a4f      	ldr	r2, [pc, #316]	@ (8006968 <UART_SetConfig+0x340>)
 800682a:	4293      	cmp	r3, r2
 800682c:	d130      	bne.n	8006890 <UART_SetConfig+0x268>
 800682e:	4b4c      	ldr	r3, [pc, #304]	@ (8006960 <UART_SetConfig+0x338>)
 8006830:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006832:	f003 0307 	and.w	r3, r3, #7
 8006836:	2b05      	cmp	r3, #5
 8006838:	d826      	bhi.n	8006888 <UART_SetConfig+0x260>
 800683a:	a201      	add	r2, pc, #4	@ (adr r2, 8006840 <UART_SetConfig+0x218>)
 800683c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006840:	08006859 	.word	0x08006859
 8006844:	08006861 	.word	0x08006861
 8006848:	08006869 	.word	0x08006869
 800684c:	08006871 	.word	0x08006871
 8006850:	08006879 	.word	0x08006879
 8006854:	08006881 	.word	0x08006881
 8006858:	2300      	movs	r3, #0
 800685a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800685e:	e1b6      	b.n	8006bce <UART_SetConfig+0x5a6>
 8006860:	2304      	movs	r3, #4
 8006862:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006866:	e1b2      	b.n	8006bce <UART_SetConfig+0x5a6>
 8006868:	2308      	movs	r3, #8
 800686a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800686e:	e1ae      	b.n	8006bce <UART_SetConfig+0x5a6>
 8006870:	2310      	movs	r3, #16
 8006872:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006876:	e1aa      	b.n	8006bce <UART_SetConfig+0x5a6>
 8006878:	2320      	movs	r3, #32
 800687a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800687e:	e1a6      	b.n	8006bce <UART_SetConfig+0x5a6>
 8006880:	2340      	movs	r3, #64	@ 0x40
 8006882:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006886:	e1a2      	b.n	8006bce <UART_SetConfig+0x5a6>
 8006888:	2380      	movs	r3, #128	@ 0x80
 800688a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800688e:	e19e      	b.n	8006bce <UART_SetConfig+0x5a6>
 8006890:	697b      	ldr	r3, [r7, #20]
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	4a35      	ldr	r2, [pc, #212]	@ (800696c <UART_SetConfig+0x344>)
 8006896:	4293      	cmp	r3, r2
 8006898:	d130      	bne.n	80068fc <UART_SetConfig+0x2d4>
 800689a:	4b31      	ldr	r3, [pc, #196]	@ (8006960 <UART_SetConfig+0x338>)
 800689c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800689e:	f003 0307 	and.w	r3, r3, #7
 80068a2:	2b05      	cmp	r3, #5
 80068a4:	d826      	bhi.n	80068f4 <UART_SetConfig+0x2cc>
 80068a6:	a201      	add	r2, pc, #4	@ (adr r2, 80068ac <UART_SetConfig+0x284>)
 80068a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80068ac:	080068c5 	.word	0x080068c5
 80068b0:	080068cd 	.word	0x080068cd
 80068b4:	080068d5 	.word	0x080068d5
 80068b8:	080068dd 	.word	0x080068dd
 80068bc:	080068e5 	.word	0x080068e5
 80068c0:	080068ed 	.word	0x080068ed
 80068c4:	2300      	movs	r3, #0
 80068c6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80068ca:	e180      	b.n	8006bce <UART_SetConfig+0x5a6>
 80068cc:	2304      	movs	r3, #4
 80068ce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80068d2:	e17c      	b.n	8006bce <UART_SetConfig+0x5a6>
 80068d4:	2308      	movs	r3, #8
 80068d6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80068da:	e178      	b.n	8006bce <UART_SetConfig+0x5a6>
 80068dc:	2310      	movs	r3, #16
 80068de:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80068e2:	e174      	b.n	8006bce <UART_SetConfig+0x5a6>
 80068e4:	2320      	movs	r3, #32
 80068e6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80068ea:	e170      	b.n	8006bce <UART_SetConfig+0x5a6>
 80068ec:	2340      	movs	r3, #64	@ 0x40
 80068ee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80068f2:	e16c      	b.n	8006bce <UART_SetConfig+0x5a6>
 80068f4:	2380      	movs	r3, #128	@ 0x80
 80068f6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80068fa:	e168      	b.n	8006bce <UART_SetConfig+0x5a6>
 80068fc:	697b      	ldr	r3, [r7, #20]
 80068fe:	681b      	ldr	r3, [r3, #0]
 8006900:	4a1b      	ldr	r2, [pc, #108]	@ (8006970 <UART_SetConfig+0x348>)
 8006902:	4293      	cmp	r3, r2
 8006904:	d142      	bne.n	800698c <UART_SetConfig+0x364>
 8006906:	4b16      	ldr	r3, [pc, #88]	@ (8006960 <UART_SetConfig+0x338>)
 8006908:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800690a:	f003 0307 	and.w	r3, r3, #7
 800690e:	2b05      	cmp	r3, #5
 8006910:	d838      	bhi.n	8006984 <UART_SetConfig+0x35c>
 8006912:	a201      	add	r2, pc, #4	@ (adr r2, 8006918 <UART_SetConfig+0x2f0>)
 8006914:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006918:	08006931 	.word	0x08006931
 800691c:	08006939 	.word	0x08006939
 8006920:	08006941 	.word	0x08006941
 8006924:	08006949 	.word	0x08006949
 8006928:	08006975 	.word	0x08006975
 800692c:	0800697d 	.word	0x0800697d
 8006930:	2300      	movs	r3, #0
 8006932:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006936:	e14a      	b.n	8006bce <UART_SetConfig+0x5a6>
 8006938:	2304      	movs	r3, #4
 800693a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800693e:	e146      	b.n	8006bce <UART_SetConfig+0x5a6>
 8006940:	2308      	movs	r3, #8
 8006942:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006946:	e142      	b.n	8006bce <UART_SetConfig+0x5a6>
 8006948:	2310      	movs	r3, #16
 800694a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800694e:	e13e      	b.n	8006bce <UART_SetConfig+0x5a6>
 8006950:	cfff69f3 	.word	0xcfff69f3
 8006954:	58000c00 	.word	0x58000c00
 8006958:	11fff4ff 	.word	0x11fff4ff
 800695c:	40011000 	.word	0x40011000
 8006960:	58024400 	.word	0x58024400
 8006964:	40004400 	.word	0x40004400
 8006968:	40004800 	.word	0x40004800
 800696c:	40004c00 	.word	0x40004c00
 8006970:	40005000 	.word	0x40005000
 8006974:	2320      	movs	r3, #32
 8006976:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800697a:	e128      	b.n	8006bce <UART_SetConfig+0x5a6>
 800697c:	2340      	movs	r3, #64	@ 0x40
 800697e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006982:	e124      	b.n	8006bce <UART_SetConfig+0x5a6>
 8006984:	2380      	movs	r3, #128	@ 0x80
 8006986:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800698a:	e120      	b.n	8006bce <UART_SetConfig+0x5a6>
 800698c:	697b      	ldr	r3, [r7, #20]
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	4acb      	ldr	r2, [pc, #812]	@ (8006cc0 <UART_SetConfig+0x698>)
 8006992:	4293      	cmp	r3, r2
 8006994:	d176      	bne.n	8006a84 <UART_SetConfig+0x45c>
 8006996:	4bcb      	ldr	r3, [pc, #812]	@ (8006cc4 <UART_SetConfig+0x69c>)
 8006998:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800699a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800699e:	2b28      	cmp	r3, #40	@ 0x28
 80069a0:	d86c      	bhi.n	8006a7c <UART_SetConfig+0x454>
 80069a2:	a201      	add	r2, pc, #4	@ (adr r2, 80069a8 <UART_SetConfig+0x380>)
 80069a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80069a8:	08006a4d 	.word	0x08006a4d
 80069ac:	08006a7d 	.word	0x08006a7d
 80069b0:	08006a7d 	.word	0x08006a7d
 80069b4:	08006a7d 	.word	0x08006a7d
 80069b8:	08006a7d 	.word	0x08006a7d
 80069bc:	08006a7d 	.word	0x08006a7d
 80069c0:	08006a7d 	.word	0x08006a7d
 80069c4:	08006a7d 	.word	0x08006a7d
 80069c8:	08006a55 	.word	0x08006a55
 80069cc:	08006a7d 	.word	0x08006a7d
 80069d0:	08006a7d 	.word	0x08006a7d
 80069d4:	08006a7d 	.word	0x08006a7d
 80069d8:	08006a7d 	.word	0x08006a7d
 80069dc:	08006a7d 	.word	0x08006a7d
 80069e0:	08006a7d 	.word	0x08006a7d
 80069e4:	08006a7d 	.word	0x08006a7d
 80069e8:	08006a5d 	.word	0x08006a5d
 80069ec:	08006a7d 	.word	0x08006a7d
 80069f0:	08006a7d 	.word	0x08006a7d
 80069f4:	08006a7d 	.word	0x08006a7d
 80069f8:	08006a7d 	.word	0x08006a7d
 80069fc:	08006a7d 	.word	0x08006a7d
 8006a00:	08006a7d 	.word	0x08006a7d
 8006a04:	08006a7d 	.word	0x08006a7d
 8006a08:	08006a65 	.word	0x08006a65
 8006a0c:	08006a7d 	.word	0x08006a7d
 8006a10:	08006a7d 	.word	0x08006a7d
 8006a14:	08006a7d 	.word	0x08006a7d
 8006a18:	08006a7d 	.word	0x08006a7d
 8006a1c:	08006a7d 	.word	0x08006a7d
 8006a20:	08006a7d 	.word	0x08006a7d
 8006a24:	08006a7d 	.word	0x08006a7d
 8006a28:	08006a6d 	.word	0x08006a6d
 8006a2c:	08006a7d 	.word	0x08006a7d
 8006a30:	08006a7d 	.word	0x08006a7d
 8006a34:	08006a7d 	.word	0x08006a7d
 8006a38:	08006a7d 	.word	0x08006a7d
 8006a3c:	08006a7d 	.word	0x08006a7d
 8006a40:	08006a7d 	.word	0x08006a7d
 8006a44:	08006a7d 	.word	0x08006a7d
 8006a48:	08006a75 	.word	0x08006a75
 8006a4c:	2301      	movs	r3, #1
 8006a4e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006a52:	e0bc      	b.n	8006bce <UART_SetConfig+0x5a6>
 8006a54:	2304      	movs	r3, #4
 8006a56:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006a5a:	e0b8      	b.n	8006bce <UART_SetConfig+0x5a6>
 8006a5c:	2308      	movs	r3, #8
 8006a5e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006a62:	e0b4      	b.n	8006bce <UART_SetConfig+0x5a6>
 8006a64:	2310      	movs	r3, #16
 8006a66:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006a6a:	e0b0      	b.n	8006bce <UART_SetConfig+0x5a6>
 8006a6c:	2320      	movs	r3, #32
 8006a6e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006a72:	e0ac      	b.n	8006bce <UART_SetConfig+0x5a6>
 8006a74:	2340      	movs	r3, #64	@ 0x40
 8006a76:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006a7a:	e0a8      	b.n	8006bce <UART_SetConfig+0x5a6>
 8006a7c:	2380      	movs	r3, #128	@ 0x80
 8006a7e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006a82:	e0a4      	b.n	8006bce <UART_SetConfig+0x5a6>
 8006a84:	697b      	ldr	r3, [r7, #20]
 8006a86:	681b      	ldr	r3, [r3, #0]
 8006a88:	4a8f      	ldr	r2, [pc, #572]	@ (8006cc8 <UART_SetConfig+0x6a0>)
 8006a8a:	4293      	cmp	r3, r2
 8006a8c:	d130      	bne.n	8006af0 <UART_SetConfig+0x4c8>
 8006a8e:	4b8d      	ldr	r3, [pc, #564]	@ (8006cc4 <UART_SetConfig+0x69c>)
 8006a90:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006a92:	f003 0307 	and.w	r3, r3, #7
 8006a96:	2b05      	cmp	r3, #5
 8006a98:	d826      	bhi.n	8006ae8 <UART_SetConfig+0x4c0>
 8006a9a:	a201      	add	r2, pc, #4	@ (adr r2, 8006aa0 <UART_SetConfig+0x478>)
 8006a9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006aa0:	08006ab9 	.word	0x08006ab9
 8006aa4:	08006ac1 	.word	0x08006ac1
 8006aa8:	08006ac9 	.word	0x08006ac9
 8006aac:	08006ad1 	.word	0x08006ad1
 8006ab0:	08006ad9 	.word	0x08006ad9
 8006ab4:	08006ae1 	.word	0x08006ae1
 8006ab8:	2300      	movs	r3, #0
 8006aba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006abe:	e086      	b.n	8006bce <UART_SetConfig+0x5a6>
 8006ac0:	2304      	movs	r3, #4
 8006ac2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006ac6:	e082      	b.n	8006bce <UART_SetConfig+0x5a6>
 8006ac8:	2308      	movs	r3, #8
 8006aca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006ace:	e07e      	b.n	8006bce <UART_SetConfig+0x5a6>
 8006ad0:	2310      	movs	r3, #16
 8006ad2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006ad6:	e07a      	b.n	8006bce <UART_SetConfig+0x5a6>
 8006ad8:	2320      	movs	r3, #32
 8006ada:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006ade:	e076      	b.n	8006bce <UART_SetConfig+0x5a6>
 8006ae0:	2340      	movs	r3, #64	@ 0x40
 8006ae2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006ae6:	e072      	b.n	8006bce <UART_SetConfig+0x5a6>
 8006ae8:	2380      	movs	r3, #128	@ 0x80
 8006aea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006aee:	e06e      	b.n	8006bce <UART_SetConfig+0x5a6>
 8006af0:	697b      	ldr	r3, [r7, #20]
 8006af2:	681b      	ldr	r3, [r3, #0]
 8006af4:	4a75      	ldr	r2, [pc, #468]	@ (8006ccc <UART_SetConfig+0x6a4>)
 8006af6:	4293      	cmp	r3, r2
 8006af8:	d130      	bne.n	8006b5c <UART_SetConfig+0x534>
 8006afa:	4b72      	ldr	r3, [pc, #456]	@ (8006cc4 <UART_SetConfig+0x69c>)
 8006afc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006afe:	f003 0307 	and.w	r3, r3, #7
 8006b02:	2b05      	cmp	r3, #5
 8006b04:	d826      	bhi.n	8006b54 <UART_SetConfig+0x52c>
 8006b06:	a201      	add	r2, pc, #4	@ (adr r2, 8006b0c <UART_SetConfig+0x4e4>)
 8006b08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b0c:	08006b25 	.word	0x08006b25
 8006b10:	08006b2d 	.word	0x08006b2d
 8006b14:	08006b35 	.word	0x08006b35
 8006b18:	08006b3d 	.word	0x08006b3d
 8006b1c:	08006b45 	.word	0x08006b45
 8006b20:	08006b4d 	.word	0x08006b4d
 8006b24:	2300      	movs	r3, #0
 8006b26:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006b2a:	e050      	b.n	8006bce <UART_SetConfig+0x5a6>
 8006b2c:	2304      	movs	r3, #4
 8006b2e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006b32:	e04c      	b.n	8006bce <UART_SetConfig+0x5a6>
 8006b34:	2308      	movs	r3, #8
 8006b36:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006b3a:	e048      	b.n	8006bce <UART_SetConfig+0x5a6>
 8006b3c:	2310      	movs	r3, #16
 8006b3e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006b42:	e044      	b.n	8006bce <UART_SetConfig+0x5a6>
 8006b44:	2320      	movs	r3, #32
 8006b46:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006b4a:	e040      	b.n	8006bce <UART_SetConfig+0x5a6>
 8006b4c:	2340      	movs	r3, #64	@ 0x40
 8006b4e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006b52:	e03c      	b.n	8006bce <UART_SetConfig+0x5a6>
 8006b54:	2380      	movs	r3, #128	@ 0x80
 8006b56:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006b5a:	e038      	b.n	8006bce <UART_SetConfig+0x5a6>
 8006b5c:	697b      	ldr	r3, [r7, #20]
 8006b5e:	681b      	ldr	r3, [r3, #0]
 8006b60:	4a5b      	ldr	r2, [pc, #364]	@ (8006cd0 <UART_SetConfig+0x6a8>)
 8006b62:	4293      	cmp	r3, r2
 8006b64:	d130      	bne.n	8006bc8 <UART_SetConfig+0x5a0>
 8006b66:	4b57      	ldr	r3, [pc, #348]	@ (8006cc4 <UART_SetConfig+0x69c>)
 8006b68:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006b6a:	f003 0307 	and.w	r3, r3, #7
 8006b6e:	2b05      	cmp	r3, #5
 8006b70:	d826      	bhi.n	8006bc0 <UART_SetConfig+0x598>
 8006b72:	a201      	add	r2, pc, #4	@ (adr r2, 8006b78 <UART_SetConfig+0x550>)
 8006b74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b78:	08006b91 	.word	0x08006b91
 8006b7c:	08006b99 	.word	0x08006b99
 8006b80:	08006ba1 	.word	0x08006ba1
 8006b84:	08006ba9 	.word	0x08006ba9
 8006b88:	08006bb1 	.word	0x08006bb1
 8006b8c:	08006bb9 	.word	0x08006bb9
 8006b90:	2302      	movs	r3, #2
 8006b92:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006b96:	e01a      	b.n	8006bce <UART_SetConfig+0x5a6>
 8006b98:	2304      	movs	r3, #4
 8006b9a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006b9e:	e016      	b.n	8006bce <UART_SetConfig+0x5a6>
 8006ba0:	2308      	movs	r3, #8
 8006ba2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006ba6:	e012      	b.n	8006bce <UART_SetConfig+0x5a6>
 8006ba8:	2310      	movs	r3, #16
 8006baa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006bae:	e00e      	b.n	8006bce <UART_SetConfig+0x5a6>
 8006bb0:	2320      	movs	r3, #32
 8006bb2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006bb6:	e00a      	b.n	8006bce <UART_SetConfig+0x5a6>
 8006bb8:	2340      	movs	r3, #64	@ 0x40
 8006bba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006bbe:	e006      	b.n	8006bce <UART_SetConfig+0x5a6>
 8006bc0:	2380      	movs	r3, #128	@ 0x80
 8006bc2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006bc6:	e002      	b.n	8006bce <UART_SetConfig+0x5a6>
 8006bc8:	2380      	movs	r3, #128	@ 0x80
 8006bca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8006bce:	697b      	ldr	r3, [r7, #20]
 8006bd0:	681b      	ldr	r3, [r3, #0]
 8006bd2:	4a3f      	ldr	r2, [pc, #252]	@ (8006cd0 <UART_SetConfig+0x6a8>)
 8006bd4:	4293      	cmp	r3, r2
 8006bd6:	f040 80f8 	bne.w	8006dca <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8006bda:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8006bde:	2b20      	cmp	r3, #32
 8006be0:	dc46      	bgt.n	8006c70 <UART_SetConfig+0x648>
 8006be2:	2b02      	cmp	r3, #2
 8006be4:	f2c0 8082 	blt.w	8006cec <UART_SetConfig+0x6c4>
 8006be8:	3b02      	subs	r3, #2
 8006bea:	2b1e      	cmp	r3, #30
 8006bec:	d87e      	bhi.n	8006cec <UART_SetConfig+0x6c4>
 8006bee:	a201      	add	r2, pc, #4	@ (adr r2, 8006bf4 <UART_SetConfig+0x5cc>)
 8006bf0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006bf4:	08006c77 	.word	0x08006c77
 8006bf8:	08006ced 	.word	0x08006ced
 8006bfc:	08006c7f 	.word	0x08006c7f
 8006c00:	08006ced 	.word	0x08006ced
 8006c04:	08006ced 	.word	0x08006ced
 8006c08:	08006ced 	.word	0x08006ced
 8006c0c:	08006c8f 	.word	0x08006c8f
 8006c10:	08006ced 	.word	0x08006ced
 8006c14:	08006ced 	.word	0x08006ced
 8006c18:	08006ced 	.word	0x08006ced
 8006c1c:	08006ced 	.word	0x08006ced
 8006c20:	08006ced 	.word	0x08006ced
 8006c24:	08006ced 	.word	0x08006ced
 8006c28:	08006ced 	.word	0x08006ced
 8006c2c:	08006c9f 	.word	0x08006c9f
 8006c30:	08006ced 	.word	0x08006ced
 8006c34:	08006ced 	.word	0x08006ced
 8006c38:	08006ced 	.word	0x08006ced
 8006c3c:	08006ced 	.word	0x08006ced
 8006c40:	08006ced 	.word	0x08006ced
 8006c44:	08006ced 	.word	0x08006ced
 8006c48:	08006ced 	.word	0x08006ced
 8006c4c:	08006ced 	.word	0x08006ced
 8006c50:	08006ced 	.word	0x08006ced
 8006c54:	08006ced 	.word	0x08006ced
 8006c58:	08006ced 	.word	0x08006ced
 8006c5c:	08006ced 	.word	0x08006ced
 8006c60:	08006ced 	.word	0x08006ced
 8006c64:	08006ced 	.word	0x08006ced
 8006c68:	08006ced 	.word	0x08006ced
 8006c6c:	08006cdf 	.word	0x08006cdf
 8006c70:	2b40      	cmp	r3, #64	@ 0x40
 8006c72:	d037      	beq.n	8006ce4 <UART_SetConfig+0x6bc>
 8006c74:	e03a      	b.n	8006cec <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8006c76:	f7fe ff0f 	bl	8005a98 <HAL_RCCEx_GetD3PCLK1Freq>
 8006c7a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8006c7c:	e03c      	b.n	8006cf8 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006c7e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006c82:	4618      	mov	r0, r3
 8006c84:	f7fe ff1e 	bl	8005ac4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8006c88:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006c8a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006c8c:	e034      	b.n	8006cf8 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006c8e:	f107 0318 	add.w	r3, r7, #24
 8006c92:	4618      	mov	r0, r3
 8006c94:	f7ff f86a 	bl	8005d6c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8006c98:	69fb      	ldr	r3, [r7, #28]
 8006c9a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006c9c:	e02c      	b.n	8006cf8 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006c9e:	4b09      	ldr	r3, [pc, #36]	@ (8006cc4 <UART_SetConfig+0x69c>)
 8006ca0:	681b      	ldr	r3, [r3, #0]
 8006ca2:	f003 0320 	and.w	r3, r3, #32
 8006ca6:	2b00      	cmp	r3, #0
 8006ca8:	d016      	beq.n	8006cd8 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8006caa:	4b06      	ldr	r3, [pc, #24]	@ (8006cc4 <UART_SetConfig+0x69c>)
 8006cac:	681b      	ldr	r3, [r3, #0]
 8006cae:	08db      	lsrs	r3, r3, #3
 8006cb0:	f003 0303 	and.w	r3, r3, #3
 8006cb4:	4a07      	ldr	r2, [pc, #28]	@ (8006cd4 <UART_SetConfig+0x6ac>)
 8006cb6:	fa22 f303 	lsr.w	r3, r2, r3
 8006cba:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8006cbc:	e01c      	b.n	8006cf8 <UART_SetConfig+0x6d0>
 8006cbe:	bf00      	nop
 8006cc0:	40011400 	.word	0x40011400
 8006cc4:	58024400 	.word	0x58024400
 8006cc8:	40007800 	.word	0x40007800
 8006ccc:	40007c00 	.word	0x40007c00
 8006cd0:	58000c00 	.word	0x58000c00
 8006cd4:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 8006cd8:	4b9d      	ldr	r3, [pc, #628]	@ (8006f50 <UART_SetConfig+0x928>)
 8006cda:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006cdc:	e00c      	b.n	8006cf8 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8006cde:	4b9d      	ldr	r3, [pc, #628]	@ (8006f54 <UART_SetConfig+0x92c>)
 8006ce0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006ce2:	e009      	b.n	8006cf8 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006ce4:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006ce8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006cea:	e005      	b.n	8006cf8 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 8006cec:	2300      	movs	r3, #0
 8006cee:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8006cf0:	2301      	movs	r3, #1
 8006cf2:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8006cf6:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8006cf8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006cfa:	2b00      	cmp	r3, #0
 8006cfc:	f000 81de 	beq.w	80070bc <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8006d00:	697b      	ldr	r3, [r7, #20]
 8006d02:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006d04:	4a94      	ldr	r2, [pc, #592]	@ (8006f58 <UART_SetConfig+0x930>)
 8006d06:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006d0a:	461a      	mov	r2, r3
 8006d0c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006d0e:	fbb3 f3f2 	udiv	r3, r3, r2
 8006d12:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006d14:	697b      	ldr	r3, [r7, #20]
 8006d16:	685a      	ldr	r2, [r3, #4]
 8006d18:	4613      	mov	r3, r2
 8006d1a:	005b      	lsls	r3, r3, #1
 8006d1c:	4413      	add	r3, r2
 8006d1e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006d20:	429a      	cmp	r2, r3
 8006d22:	d305      	bcc.n	8006d30 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8006d24:	697b      	ldr	r3, [r7, #20]
 8006d26:	685b      	ldr	r3, [r3, #4]
 8006d28:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006d2a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006d2c:	429a      	cmp	r2, r3
 8006d2e:	d903      	bls.n	8006d38 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 8006d30:	2301      	movs	r3, #1
 8006d32:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8006d36:	e1c1      	b.n	80070bc <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006d38:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006d3a:	2200      	movs	r2, #0
 8006d3c:	60bb      	str	r3, [r7, #8]
 8006d3e:	60fa      	str	r2, [r7, #12]
 8006d40:	697b      	ldr	r3, [r7, #20]
 8006d42:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006d44:	4a84      	ldr	r2, [pc, #528]	@ (8006f58 <UART_SetConfig+0x930>)
 8006d46:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006d4a:	b29b      	uxth	r3, r3
 8006d4c:	2200      	movs	r2, #0
 8006d4e:	603b      	str	r3, [r7, #0]
 8006d50:	607a      	str	r2, [r7, #4]
 8006d52:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006d56:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8006d5a:	f7f9 fb19 	bl	8000390 <__aeabi_uldivmod>
 8006d5e:	4602      	mov	r2, r0
 8006d60:	460b      	mov	r3, r1
 8006d62:	4610      	mov	r0, r2
 8006d64:	4619      	mov	r1, r3
 8006d66:	f04f 0200 	mov.w	r2, #0
 8006d6a:	f04f 0300 	mov.w	r3, #0
 8006d6e:	020b      	lsls	r3, r1, #8
 8006d70:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8006d74:	0202      	lsls	r2, r0, #8
 8006d76:	6979      	ldr	r1, [r7, #20]
 8006d78:	6849      	ldr	r1, [r1, #4]
 8006d7a:	0849      	lsrs	r1, r1, #1
 8006d7c:	2000      	movs	r0, #0
 8006d7e:	460c      	mov	r4, r1
 8006d80:	4605      	mov	r5, r0
 8006d82:	eb12 0804 	adds.w	r8, r2, r4
 8006d86:	eb43 0905 	adc.w	r9, r3, r5
 8006d8a:	697b      	ldr	r3, [r7, #20]
 8006d8c:	685b      	ldr	r3, [r3, #4]
 8006d8e:	2200      	movs	r2, #0
 8006d90:	469a      	mov	sl, r3
 8006d92:	4693      	mov	fp, r2
 8006d94:	4652      	mov	r2, sl
 8006d96:	465b      	mov	r3, fp
 8006d98:	4640      	mov	r0, r8
 8006d9a:	4649      	mov	r1, r9
 8006d9c:	f7f9 faf8 	bl	8000390 <__aeabi_uldivmod>
 8006da0:	4602      	mov	r2, r0
 8006da2:	460b      	mov	r3, r1
 8006da4:	4613      	mov	r3, r2
 8006da6:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006da8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006daa:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006dae:	d308      	bcc.n	8006dc2 <UART_SetConfig+0x79a>
 8006db0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006db2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006db6:	d204      	bcs.n	8006dc2 <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 8006db8:	697b      	ldr	r3, [r7, #20]
 8006dba:	681b      	ldr	r3, [r3, #0]
 8006dbc:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8006dbe:	60da      	str	r2, [r3, #12]
 8006dc0:	e17c      	b.n	80070bc <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 8006dc2:	2301      	movs	r3, #1
 8006dc4:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8006dc8:	e178      	b.n	80070bc <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006dca:	697b      	ldr	r3, [r7, #20]
 8006dcc:	69db      	ldr	r3, [r3, #28]
 8006dce:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006dd2:	f040 80c5 	bne.w	8006f60 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 8006dd6:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8006dda:	2b20      	cmp	r3, #32
 8006ddc:	dc48      	bgt.n	8006e70 <UART_SetConfig+0x848>
 8006dde:	2b00      	cmp	r3, #0
 8006de0:	db7b      	blt.n	8006eda <UART_SetConfig+0x8b2>
 8006de2:	2b20      	cmp	r3, #32
 8006de4:	d879      	bhi.n	8006eda <UART_SetConfig+0x8b2>
 8006de6:	a201      	add	r2, pc, #4	@ (adr r2, 8006dec <UART_SetConfig+0x7c4>)
 8006de8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006dec:	08006e77 	.word	0x08006e77
 8006df0:	08006e7f 	.word	0x08006e7f
 8006df4:	08006edb 	.word	0x08006edb
 8006df8:	08006edb 	.word	0x08006edb
 8006dfc:	08006e87 	.word	0x08006e87
 8006e00:	08006edb 	.word	0x08006edb
 8006e04:	08006edb 	.word	0x08006edb
 8006e08:	08006edb 	.word	0x08006edb
 8006e0c:	08006e97 	.word	0x08006e97
 8006e10:	08006edb 	.word	0x08006edb
 8006e14:	08006edb 	.word	0x08006edb
 8006e18:	08006edb 	.word	0x08006edb
 8006e1c:	08006edb 	.word	0x08006edb
 8006e20:	08006edb 	.word	0x08006edb
 8006e24:	08006edb 	.word	0x08006edb
 8006e28:	08006edb 	.word	0x08006edb
 8006e2c:	08006ea7 	.word	0x08006ea7
 8006e30:	08006edb 	.word	0x08006edb
 8006e34:	08006edb 	.word	0x08006edb
 8006e38:	08006edb 	.word	0x08006edb
 8006e3c:	08006edb 	.word	0x08006edb
 8006e40:	08006edb 	.word	0x08006edb
 8006e44:	08006edb 	.word	0x08006edb
 8006e48:	08006edb 	.word	0x08006edb
 8006e4c:	08006edb 	.word	0x08006edb
 8006e50:	08006edb 	.word	0x08006edb
 8006e54:	08006edb 	.word	0x08006edb
 8006e58:	08006edb 	.word	0x08006edb
 8006e5c:	08006edb 	.word	0x08006edb
 8006e60:	08006edb 	.word	0x08006edb
 8006e64:	08006edb 	.word	0x08006edb
 8006e68:	08006edb 	.word	0x08006edb
 8006e6c:	08006ecd 	.word	0x08006ecd
 8006e70:	2b40      	cmp	r3, #64	@ 0x40
 8006e72:	d02e      	beq.n	8006ed2 <UART_SetConfig+0x8aa>
 8006e74:	e031      	b.n	8006eda <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006e76:	f7fd fbd9 	bl	800462c <HAL_RCC_GetPCLK1Freq>
 8006e7a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8006e7c:	e033      	b.n	8006ee6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006e7e:	f7fd fbeb 	bl	8004658 <HAL_RCC_GetPCLK2Freq>
 8006e82:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8006e84:	e02f      	b.n	8006ee6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006e86:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006e8a:	4618      	mov	r0, r3
 8006e8c:	f7fe fe1a 	bl	8005ac4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8006e90:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006e92:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006e94:	e027      	b.n	8006ee6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006e96:	f107 0318 	add.w	r3, r7, #24
 8006e9a:	4618      	mov	r0, r3
 8006e9c:	f7fe ff66 	bl	8005d6c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8006ea0:	69fb      	ldr	r3, [r7, #28]
 8006ea2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006ea4:	e01f      	b.n	8006ee6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006ea6:	4b2d      	ldr	r3, [pc, #180]	@ (8006f5c <UART_SetConfig+0x934>)
 8006ea8:	681b      	ldr	r3, [r3, #0]
 8006eaa:	f003 0320 	and.w	r3, r3, #32
 8006eae:	2b00      	cmp	r3, #0
 8006eb0:	d009      	beq.n	8006ec6 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8006eb2:	4b2a      	ldr	r3, [pc, #168]	@ (8006f5c <UART_SetConfig+0x934>)
 8006eb4:	681b      	ldr	r3, [r3, #0]
 8006eb6:	08db      	lsrs	r3, r3, #3
 8006eb8:	f003 0303 	and.w	r3, r3, #3
 8006ebc:	4a24      	ldr	r2, [pc, #144]	@ (8006f50 <UART_SetConfig+0x928>)
 8006ebe:	fa22 f303 	lsr.w	r3, r2, r3
 8006ec2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8006ec4:	e00f      	b.n	8006ee6 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8006ec6:	4b22      	ldr	r3, [pc, #136]	@ (8006f50 <UART_SetConfig+0x928>)
 8006ec8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006eca:	e00c      	b.n	8006ee6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8006ecc:	4b21      	ldr	r3, [pc, #132]	@ (8006f54 <UART_SetConfig+0x92c>)
 8006ece:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006ed0:	e009      	b.n	8006ee6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006ed2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006ed6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006ed8:	e005      	b.n	8006ee6 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8006eda:	2300      	movs	r3, #0
 8006edc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8006ede:	2301      	movs	r3, #1
 8006ee0:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8006ee4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006ee6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006ee8:	2b00      	cmp	r3, #0
 8006eea:	f000 80e7 	beq.w	80070bc <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006eee:	697b      	ldr	r3, [r7, #20]
 8006ef0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006ef2:	4a19      	ldr	r2, [pc, #100]	@ (8006f58 <UART_SetConfig+0x930>)
 8006ef4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006ef8:	461a      	mov	r2, r3
 8006efa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006efc:	fbb3 f3f2 	udiv	r3, r3, r2
 8006f00:	005a      	lsls	r2, r3, #1
 8006f02:	697b      	ldr	r3, [r7, #20]
 8006f04:	685b      	ldr	r3, [r3, #4]
 8006f06:	085b      	lsrs	r3, r3, #1
 8006f08:	441a      	add	r2, r3
 8006f0a:	697b      	ldr	r3, [r7, #20]
 8006f0c:	685b      	ldr	r3, [r3, #4]
 8006f0e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006f12:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006f14:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006f16:	2b0f      	cmp	r3, #15
 8006f18:	d916      	bls.n	8006f48 <UART_SetConfig+0x920>
 8006f1a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006f1c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006f20:	d212      	bcs.n	8006f48 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006f22:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006f24:	b29b      	uxth	r3, r3
 8006f26:	f023 030f 	bic.w	r3, r3, #15
 8006f2a:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006f2c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006f2e:	085b      	lsrs	r3, r3, #1
 8006f30:	b29b      	uxth	r3, r3
 8006f32:	f003 0307 	and.w	r3, r3, #7
 8006f36:	b29a      	uxth	r2, r3
 8006f38:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8006f3a:	4313      	orrs	r3, r2
 8006f3c:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 8006f3e:	697b      	ldr	r3, [r7, #20]
 8006f40:	681b      	ldr	r3, [r3, #0]
 8006f42:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 8006f44:	60da      	str	r2, [r3, #12]
 8006f46:	e0b9      	b.n	80070bc <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8006f48:	2301      	movs	r3, #1
 8006f4a:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8006f4e:	e0b5      	b.n	80070bc <UART_SetConfig+0xa94>
 8006f50:	03d09000 	.word	0x03d09000
 8006f54:	003d0900 	.word	0x003d0900
 8006f58:	0800a2b4 	.word	0x0800a2b4
 8006f5c:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 8006f60:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8006f64:	2b20      	cmp	r3, #32
 8006f66:	dc49      	bgt.n	8006ffc <UART_SetConfig+0x9d4>
 8006f68:	2b00      	cmp	r3, #0
 8006f6a:	db7c      	blt.n	8007066 <UART_SetConfig+0xa3e>
 8006f6c:	2b20      	cmp	r3, #32
 8006f6e:	d87a      	bhi.n	8007066 <UART_SetConfig+0xa3e>
 8006f70:	a201      	add	r2, pc, #4	@ (adr r2, 8006f78 <UART_SetConfig+0x950>)
 8006f72:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f76:	bf00      	nop
 8006f78:	08007003 	.word	0x08007003
 8006f7c:	0800700b 	.word	0x0800700b
 8006f80:	08007067 	.word	0x08007067
 8006f84:	08007067 	.word	0x08007067
 8006f88:	08007013 	.word	0x08007013
 8006f8c:	08007067 	.word	0x08007067
 8006f90:	08007067 	.word	0x08007067
 8006f94:	08007067 	.word	0x08007067
 8006f98:	08007023 	.word	0x08007023
 8006f9c:	08007067 	.word	0x08007067
 8006fa0:	08007067 	.word	0x08007067
 8006fa4:	08007067 	.word	0x08007067
 8006fa8:	08007067 	.word	0x08007067
 8006fac:	08007067 	.word	0x08007067
 8006fb0:	08007067 	.word	0x08007067
 8006fb4:	08007067 	.word	0x08007067
 8006fb8:	08007033 	.word	0x08007033
 8006fbc:	08007067 	.word	0x08007067
 8006fc0:	08007067 	.word	0x08007067
 8006fc4:	08007067 	.word	0x08007067
 8006fc8:	08007067 	.word	0x08007067
 8006fcc:	08007067 	.word	0x08007067
 8006fd0:	08007067 	.word	0x08007067
 8006fd4:	08007067 	.word	0x08007067
 8006fd8:	08007067 	.word	0x08007067
 8006fdc:	08007067 	.word	0x08007067
 8006fe0:	08007067 	.word	0x08007067
 8006fe4:	08007067 	.word	0x08007067
 8006fe8:	08007067 	.word	0x08007067
 8006fec:	08007067 	.word	0x08007067
 8006ff0:	08007067 	.word	0x08007067
 8006ff4:	08007067 	.word	0x08007067
 8006ff8:	08007059 	.word	0x08007059
 8006ffc:	2b40      	cmp	r3, #64	@ 0x40
 8006ffe:	d02e      	beq.n	800705e <UART_SetConfig+0xa36>
 8007000:	e031      	b.n	8007066 <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007002:	f7fd fb13 	bl	800462c <HAL_RCC_GetPCLK1Freq>
 8007006:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8007008:	e033      	b.n	8007072 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800700a:	f7fd fb25 	bl	8004658 <HAL_RCC_GetPCLK2Freq>
 800700e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8007010:	e02f      	b.n	8007072 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007012:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8007016:	4618      	mov	r0, r3
 8007018:	f7fe fd54 	bl	8005ac4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800701c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800701e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007020:	e027      	b.n	8007072 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007022:	f107 0318 	add.w	r3, r7, #24
 8007026:	4618      	mov	r0, r3
 8007028:	f7fe fea0 	bl	8005d6c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800702c:	69fb      	ldr	r3, [r7, #28]
 800702e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007030:	e01f      	b.n	8007072 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007032:	4b2d      	ldr	r3, [pc, #180]	@ (80070e8 <UART_SetConfig+0xac0>)
 8007034:	681b      	ldr	r3, [r3, #0]
 8007036:	f003 0320 	and.w	r3, r3, #32
 800703a:	2b00      	cmp	r3, #0
 800703c:	d009      	beq.n	8007052 <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800703e:	4b2a      	ldr	r3, [pc, #168]	@ (80070e8 <UART_SetConfig+0xac0>)
 8007040:	681b      	ldr	r3, [r3, #0]
 8007042:	08db      	lsrs	r3, r3, #3
 8007044:	f003 0303 	and.w	r3, r3, #3
 8007048:	4a28      	ldr	r2, [pc, #160]	@ (80070ec <UART_SetConfig+0xac4>)
 800704a:	fa22 f303 	lsr.w	r3, r2, r3
 800704e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8007050:	e00f      	b.n	8007072 <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 8007052:	4b26      	ldr	r3, [pc, #152]	@ (80070ec <UART_SetConfig+0xac4>)
 8007054:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007056:	e00c      	b.n	8007072 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8007058:	4b25      	ldr	r3, [pc, #148]	@ (80070f0 <UART_SetConfig+0xac8>)
 800705a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800705c:	e009      	b.n	8007072 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800705e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007062:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007064:	e005      	b.n	8007072 <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 8007066:	2300      	movs	r3, #0
 8007068:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800706a:	2301      	movs	r3, #1
 800706c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8007070:	bf00      	nop
    }

    if (pclk != 0U)
 8007072:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007074:	2b00      	cmp	r3, #0
 8007076:	d021      	beq.n	80070bc <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007078:	697b      	ldr	r3, [r7, #20]
 800707a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800707c:	4a1d      	ldr	r2, [pc, #116]	@ (80070f4 <UART_SetConfig+0xacc>)
 800707e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007082:	461a      	mov	r2, r3
 8007084:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007086:	fbb3 f2f2 	udiv	r2, r3, r2
 800708a:	697b      	ldr	r3, [r7, #20]
 800708c:	685b      	ldr	r3, [r3, #4]
 800708e:	085b      	lsrs	r3, r3, #1
 8007090:	441a      	add	r2, r3
 8007092:	697b      	ldr	r3, [r7, #20]
 8007094:	685b      	ldr	r3, [r3, #4]
 8007096:	fbb2 f3f3 	udiv	r3, r2, r3
 800709a:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800709c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800709e:	2b0f      	cmp	r3, #15
 80070a0:	d909      	bls.n	80070b6 <UART_SetConfig+0xa8e>
 80070a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80070a4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80070a8:	d205      	bcs.n	80070b6 <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80070aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80070ac:	b29a      	uxth	r2, r3
 80070ae:	697b      	ldr	r3, [r7, #20]
 80070b0:	681b      	ldr	r3, [r3, #0]
 80070b2:	60da      	str	r2, [r3, #12]
 80070b4:	e002      	b.n	80070bc <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 80070b6:	2301      	movs	r3, #1
 80070b8:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80070bc:	697b      	ldr	r3, [r7, #20]
 80070be:	2201      	movs	r2, #1
 80070c0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 80070c4:	697b      	ldr	r3, [r7, #20]
 80070c6:	2201      	movs	r2, #1
 80070c8:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80070cc:	697b      	ldr	r3, [r7, #20]
 80070ce:	2200      	movs	r2, #0
 80070d0:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 80070d2:	697b      	ldr	r3, [r7, #20]
 80070d4:	2200      	movs	r2, #0
 80070d6:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 80070d8:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 80070dc:	4618      	mov	r0, r3
 80070de:	3748      	adds	r7, #72	@ 0x48
 80070e0:	46bd      	mov	sp, r7
 80070e2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80070e6:	bf00      	nop
 80070e8:	58024400 	.word	0x58024400
 80070ec:	03d09000 	.word	0x03d09000
 80070f0:	003d0900 	.word	0x003d0900
 80070f4:	0800a2b4 	.word	0x0800a2b4

080070f8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80070f8:	b480      	push	{r7}
 80070fa:	b083      	sub	sp, #12
 80070fc:	af00      	add	r7, sp, #0
 80070fe:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007104:	f003 0308 	and.w	r3, r3, #8
 8007108:	2b00      	cmp	r3, #0
 800710a:	d00a      	beq.n	8007122 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	681b      	ldr	r3, [r3, #0]
 8007110:	685b      	ldr	r3, [r3, #4]
 8007112:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	681b      	ldr	r3, [r3, #0]
 800711e:	430a      	orrs	r2, r1
 8007120:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007126:	f003 0301 	and.w	r3, r3, #1
 800712a:	2b00      	cmp	r3, #0
 800712c:	d00a      	beq.n	8007144 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	681b      	ldr	r3, [r3, #0]
 8007132:	685b      	ldr	r3, [r3, #4]
 8007134:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	681b      	ldr	r3, [r3, #0]
 8007140:	430a      	orrs	r2, r1
 8007142:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007148:	f003 0302 	and.w	r3, r3, #2
 800714c:	2b00      	cmp	r3, #0
 800714e:	d00a      	beq.n	8007166 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	681b      	ldr	r3, [r3, #0]
 8007154:	685b      	ldr	r3, [r3, #4]
 8007156:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	681b      	ldr	r3, [r3, #0]
 8007162:	430a      	orrs	r2, r1
 8007164:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800716a:	f003 0304 	and.w	r3, r3, #4
 800716e:	2b00      	cmp	r3, #0
 8007170:	d00a      	beq.n	8007188 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	681b      	ldr	r3, [r3, #0]
 8007176:	685b      	ldr	r3, [r3, #4]
 8007178:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	681b      	ldr	r3, [r3, #0]
 8007184:	430a      	orrs	r2, r1
 8007186:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800718c:	f003 0310 	and.w	r3, r3, #16
 8007190:	2b00      	cmp	r3, #0
 8007192:	d00a      	beq.n	80071aa <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	681b      	ldr	r3, [r3, #0]
 8007198:	689b      	ldr	r3, [r3, #8]
 800719a:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	681b      	ldr	r3, [r3, #0]
 80071a6:	430a      	orrs	r2, r1
 80071a8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80071ae:	f003 0320 	and.w	r3, r3, #32
 80071b2:	2b00      	cmp	r3, #0
 80071b4:	d00a      	beq.n	80071cc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	681b      	ldr	r3, [r3, #0]
 80071ba:	689b      	ldr	r3, [r3, #8]
 80071bc:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	681b      	ldr	r3, [r3, #0]
 80071c8:	430a      	orrs	r2, r1
 80071ca:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80071d0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80071d4:	2b00      	cmp	r3, #0
 80071d6:	d01a      	beq.n	800720e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	681b      	ldr	r3, [r3, #0]
 80071dc:	685b      	ldr	r3, [r3, #4]
 80071de:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	681b      	ldr	r3, [r3, #0]
 80071ea:	430a      	orrs	r2, r1
 80071ec:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80071f2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80071f6:	d10a      	bne.n	800720e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	681b      	ldr	r3, [r3, #0]
 80071fc:	685b      	ldr	r3, [r3, #4]
 80071fe:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	681b      	ldr	r3, [r3, #0]
 800720a:	430a      	orrs	r2, r1
 800720c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007212:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007216:	2b00      	cmp	r3, #0
 8007218:	d00a      	beq.n	8007230 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	681b      	ldr	r3, [r3, #0]
 800721e:	685b      	ldr	r3, [r3, #4]
 8007220:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	681b      	ldr	r3, [r3, #0]
 800722c:	430a      	orrs	r2, r1
 800722e:	605a      	str	r2, [r3, #4]
  }
}
 8007230:	bf00      	nop
 8007232:	370c      	adds	r7, #12
 8007234:	46bd      	mov	sp, r7
 8007236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800723a:	4770      	bx	lr

0800723c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800723c:	b580      	push	{r7, lr}
 800723e:	b098      	sub	sp, #96	@ 0x60
 8007240:	af02      	add	r7, sp, #8
 8007242:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	2200      	movs	r2, #0
 8007248:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800724c:	f7fb f868 	bl	8002320 <HAL_GetTick>
 8007250:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	681b      	ldr	r3, [r3, #0]
 8007256:	681b      	ldr	r3, [r3, #0]
 8007258:	f003 0308 	and.w	r3, r3, #8
 800725c:	2b08      	cmp	r3, #8
 800725e:	d12f      	bne.n	80072c0 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007260:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8007264:	9300      	str	r3, [sp, #0]
 8007266:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007268:	2200      	movs	r2, #0
 800726a:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800726e:	6878      	ldr	r0, [r7, #4]
 8007270:	f000 f88e 	bl	8007390 <UART_WaitOnFlagUntilTimeout>
 8007274:	4603      	mov	r3, r0
 8007276:	2b00      	cmp	r3, #0
 8007278:	d022      	beq.n	80072c0 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	681b      	ldr	r3, [r3, #0]
 800727e:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007280:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007282:	e853 3f00 	ldrex	r3, [r3]
 8007286:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8007288:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800728a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800728e:	653b      	str	r3, [r7, #80]	@ 0x50
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	681b      	ldr	r3, [r3, #0]
 8007294:	461a      	mov	r2, r3
 8007296:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007298:	647b      	str	r3, [r7, #68]	@ 0x44
 800729a:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800729c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800729e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80072a0:	e841 2300 	strex	r3, r2, [r1]
 80072a4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80072a6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80072a8:	2b00      	cmp	r3, #0
 80072aa:	d1e6      	bne.n	800727a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	2220      	movs	r2, #32
 80072b0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	2200      	movs	r2, #0
 80072b8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80072bc:	2303      	movs	r3, #3
 80072be:	e063      	b.n	8007388 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	681b      	ldr	r3, [r3, #0]
 80072c4:	681b      	ldr	r3, [r3, #0]
 80072c6:	f003 0304 	and.w	r3, r3, #4
 80072ca:	2b04      	cmp	r3, #4
 80072cc:	d149      	bne.n	8007362 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80072ce:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80072d2:	9300      	str	r3, [sp, #0]
 80072d4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80072d6:	2200      	movs	r2, #0
 80072d8:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80072dc:	6878      	ldr	r0, [r7, #4]
 80072de:	f000 f857 	bl	8007390 <UART_WaitOnFlagUntilTimeout>
 80072e2:	4603      	mov	r3, r0
 80072e4:	2b00      	cmp	r3, #0
 80072e6:	d03c      	beq.n	8007362 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	681b      	ldr	r3, [r3, #0]
 80072ec:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80072ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80072f0:	e853 3f00 	ldrex	r3, [r3]
 80072f4:	623b      	str	r3, [r7, #32]
   return(result);
 80072f6:	6a3b      	ldr	r3, [r7, #32]
 80072f8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80072fc:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	681b      	ldr	r3, [r3, #0]
 8007302:	461a      	mov	r2, r3
 8007304:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007306:	633b      	str	r3, [r7, #48]	@ 0x30
 8007308:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800730a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800730c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800730e:	e841 2300 	strex	r3, r2, [r1]
 8007312:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007314:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007316:	2b00      	cmp	r3, #0
 8007318:	d1e6      	bne.n	80072e8 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	681b      	ldr	r3, [r3, #0]
 800731e:	3308      	adds	r3, #8
 8007320:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007322:	693b      	ldr	r3, [r7, #16]
 8007324:	e853 3f00 	ldrex	r3, [r3]
 8007328:	60fb      	str	r3, [r7, #12]
   return(result);
 800732a:	68fb      	ldr	r3, [r7, #12]
 800732c:	f023 0301 	bic.w	r3, r3, #1
 8007330:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	681b      	ldr	r3, [r3, #0]
 8007336:	3308      	adds	r3, #8
 8007338:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800733a:	61fa      	str	r2, [r7, #28]
 800733c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800733e:	69b9      	ldr	r1, [r7, #24]
 8007340:	69fa      	ldr	r2, [r7, #28]
 8007342:	e841 2300 	strex	r3, r2, [r1]
 8007346:	617b      	str	r3, [r7, #20]
   return(result);
 8007348:	697b      	ldr	r3, [r7, #20]
 800734a:	2b00      	cmp	r3, #0
 800734c:	d1e5      	bne.n	800731a <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	2220      	movs	r2, #32
 8007352:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	2200      	movs	r2, #0
 800735a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800735e:	2303      	movs	r3, #3
 8007360:	e012      	b.n	8007388 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	2220      	movs	r2, #32
 8007366:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	2220      	movs	r2, #32
 800736e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	2200      	movs	r2, #0
 8007376:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	2200      	movs	r2, #0
 800737c:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	2200      	movs	r2, #0
 8007382:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8007386:	2300      	movs	r3, #0
}
 8007388:	4618      	mov	r0, r3
 800738a:	3758      	adds	r7, #88	@ 0x58
 800738c:	46bd      	mov	sp, r7
 800738e:	bd80      	pop	{r7, pc}

08007390 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007390:	b580      	push	{r7, lr}
 8007392:	b084      	sub	sp, #16
 8007394:	af00      	add	r7, sp, #0
 8007396:	60f8      	str	r0, [r7, #12]
 8007398:	60b9      	str	r1, [r7, #8]
 800739a:	603b      	str	r3, [r7, #0]
 800739c:	4613      	mov	r3, r2
 800739e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80073a0:	e04f      	b.n	8007442 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80073a2:	69bb      	ldr	r3, [r7, #24]
 80073a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80073a8:	d04b      	beq.n	8007442 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80073aa:	f7fa ffb9 	bl	8002320 <HAL_GetTick>
 80073ae:	4602      	mov	r2, r0
 80073b0:	683b      	ldr	r3, [r7, #0]
 80073b2:	1ad3      	subs	r3, r2, r3
 80073b4:	69ba      	ldr	r2, [r7, #24]
 80073b6:	429a      	cmp	r2, r3
 80073b8:	d302      	bcc.n	80073c0 <UART_WaitOnFlagUntilTimeout+0x30>
 80073ba:	69bb      	ldr	r3, [r7, #24]
 80073bc:	2b00      	cmp	r3, #0
 80073be:	d101      	bne.n	80073c4 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80073c0:	2303      	movs	r3, #3
 80073c2:	e04e      	b.n	8007462 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80073c4:	68fb      	ldr	r3, [r7, #12]
 80073c6:	681b      	ldr	r3, [r3, #0]
 80073c8:	681b      	ldr	r3, [r3, #0]
 80073ca:	f003 0304 	and.w	r3, r3, #4
 80073ce:	2b00      	cmp	r3, #0
 80073d0:	d037      	beq.n	8007442 <UART_WaitOnFlagUntilTimeout+0xb2>
 80073d2:	68bb      	ldr	r3, [r7, #8]
 80073d4:	2b80      	cmp	r3, #128	@ 0x80
 80073d6:	d034      	beq.n	8007442 <UART_WaitOnFlagUntilTimeout+0xb2>
 80073d8:	68bb      	ldr	r3, [r7, #8]
 80073da:	2b40      	cmp	r3, #64	@ 0x40
 80073dc:	d031      	beq.n	8007442 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80073de:	68fb      	ldr	r3, [r7, #12]
 80073e0:	681b      	ldr	r3, [r3, #0]
 80073e2:	69db      	ldr	r3, [r3, #28]
 80073e4:	f003 0308 	and.w	r3, r3, #8
 80073e8:	2b08      	cmp	r3, #8
 80073ea:	d110      	bne.n	800740e <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80073ec:	68fb      	ldr	r3, [r7, #12]
 80073ee:	681b      	ldr	r3, [r3, #0]
 80073f0:	2208      	movs	r2, #8
 80073f2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80073f4:	68f8      	ldr	r0, [r7, #12]
 80073f6:	f000 f839 	bl	800746c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80073fa:	68fb      	ldr	r3, [r7, #12]
 80073fc:	2208      	movs	r2, #8
 80073fe:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007402:	68fb      	ldr	r3, [r7, #12]
 8007404:	2200      	movs	r2, #0
 8007406:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800740a:	2301      	movs	r3, #1
 800740c:	e029      	b.n	8007462 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800740e:	68fb      	ldr	r3, [r7, #12]
 8007410:	681b      	ldr	r3, [r3, #0]
 8007412:	69db      	ldr	r3, [r3, #28]
 8007414:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007418:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800741c:	d111      	bne.n	8007442 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800741e:	68fb      	ldr	r3, [r7, #12]
 8007420:	681b      	ldr	r3, [r3, #0]
 8007422:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8007426:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007428:	68f8      	ldr	r0, [r7, #12]
 800742a:	f000 f81f 	bl	800746c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800742e:	68fb      	ldr	r3, [r7, #12]
 8007430:	2220      	movs	r2, #32
 8007432:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007436:	68fb      	ldr	r3, [r7, #12]
 8007438:	2200      	movs	r2, #0
 800743a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800743e:	2303      	movs	r3, #3
 8007440:	e00f      	b.n	8007462 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007442:	68fb      	ldr	r3, [r7, #12]
 8007444:	681b      	ldr	r3, [r3, #0]
 8007446:	69da      	ldr	r2, [r3, #28]
 8007448:	68bb      	ldr	r3, [r7, #8]
 800744a:	4013      	ands	r3, r2
 800744c:	68ba      	ldr	r2, [r7, #8]
 800744e:	429a      	cmp	r2, r3
 8007450:	bf0c      	ite	eq
 8007452:	2301      	moveq	r3, #1
 8007454:	2300      	movne	r3, #0
 8007456:	b2db      	uxtb	r3, r3
 8007458:	461a      	mov	r2, r3
 800745a:	79fb      	ldrb	r3, [r7, #7]
 800745c:	429a      	cmp	r2, r3
 800745e:	d0a0      	beq.n	80073a2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007460:	2300      	movs	r3, #0
}
 8007462:	4618      	mov	r0, r3
 8007464:	3710      	adds	r7, #16
 8007466:	46bd      	mov	sp, r7
 8007468:	bd80      	pop	{r7, pc}
	...

0800746c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800746c:	b480      	push	{r7}
 800746e:	b095      	sub	sp, #84	@ 0x54
 8007470:	af00      	add	r7, sp, #0
 8007472:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	681b      	ldr	r3, [r3, #0]
 8007478:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800747a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800747c:	e853 3f00 	ldrex	r3, [r3]
 8007480:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8007482:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007484:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007488:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	681b      	ldr	r3, [r3, #0]
 800748e:	461a      	mov	r2, r3
 8007490:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007492:	643b      	str	r3, [r7, #64]	@ 0x40
 8007494:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007496:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8007498:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800749a:	e841 2300 	strex	r3, r2, [r1]
 800749e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80074a0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80074a2:	2b00      	cmp	r3, #0
 80074a4:	d1e6      	bne.n	8007474 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	681b      	ldr	r3, [r3, #0]
 80074aa:	3308      	adds	r3, #8
 80074ac:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80074ae:	6a3b      	ldr	r3, [r7, #32]
 80074b0:	e853 3f00 	ldrex	r3, [r3]
 80074b4:	61fb      	str	r3, [r7, #28]
   return(result);
 80074b6:	69fa      	ldr	r2, [r7, #28]
 80074b8:	4b1e      	ldr	r3, [pc, #120]	@ (8007534 <UART_EndRxTransfer+0xc8>)
 80074ba:	4013      	ands	r3, r2
 80074bc:	64bb      	str	r3, [r7, #72]	@ 0x48
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	681b      	ldr	r3, [r3, #0]
 80074c2:	3308      	adds	r3, #8
 80074c4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80074c6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80074c8:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80074ca:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80074cc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80074ce:	e841 2300 	strex	r3, r2, [r1]
 80074d2:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80074d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80074d6:	2b00      	cmp	r3, #0
 80074d8:	d1e5      	bne.n	80074a6 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80074de:	2b01      	cmp	r3, #1
 80074e0:	d118      	bne.n	8007514 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	681b      	ldr	r3, [r3, #0]
 80074e6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80074e8:	68fb      	ldr	r3, [r7, #12]
 80074ea:	e853 3f00 	ldrex	r3, [r3]
 80074ee:	60bb      	str	r3, [r7, #8]
   return(result);
 80074f0:	68bb      	ldr	r3, [r7, #8]
 80074f2:	f023 0310 	bic.w	r3, r3, #16
 80074f6:	647b      	str	r3, [r7, #68]	@ 0x44
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	681b      	ldr	r3, [r3, #0]
 80074fc:	461a      	mov	r2, r3
 80074fe:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007500:	61bb      	str	r3, [r7, #24]
 8007502:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007504:	6979      	ldr	r1, [r7, #20]
 8007506:	69ba      	ldr	r2, [r7, #24]
 8007508:	e841 2300 	strex	r3, r2, [r1]
 800750c:	613b      	str	r3, [r7, #16]
   return(result);
 800750e:	693b      	ldr	r3, [r7, #16]
 8007510:	2b00      	cmp	r3, #0
 8007512:	d1e6      	bne.n	80074e2 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	2220      	movs	r2, #32
 8007518:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	2200      	movs	r2, #0
 8007520:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	2200      	movs	r2, #0
 8007526:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8007528:	bf00      	nop
 800752a:	3754      	adds	r7, #84	@ 0x54
 800752c:	46bd      	mov	sp, r7
 800752e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007532:	4770      	bx	lr
 8007534:	effffffe 	.word	0xeffffffe

08007538 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8007538:	b480      	push	{r7}
 800753a:	b085      	sub	sp, #20
 800753c:	af00      	add	r7, sp, #0
 800753e:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8007546:	2b01      	cmp	r3, #1
 8007548:	d101      	bne.n	800754e <HAL_UARTEx_DisableFifoMode+0x16>
 800754a:	2302      	movs	r3, #2
 800754c:	e027      	b.n	800759e <HAL_UARTEx_DisableFifoMode+0x66>
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	2201      	movs	r2, #1
 8007552:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	2224      	movs	r2, #36	@ 0x24
 800755a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	681b      	ldr	r3, [r3, #0]
 8007562:	681b      	ldr	r3, [r3, #0]
 8007564:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	681b      	ldr	r3, [r3, #0]
 800756a:	681a      	ldr	r2, [r3, #0]
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	681b      	ldr	r3, [r3, #0]
 8007570:	f022 0201 	bic.w	r2, r2, #1
 8007574:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8007576:	68fb      	ldr	r3, [r7, #12]
 8007578:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800757c:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	2200      	movs	r2, #0
 8007582:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	681b      	ldr	r3, [r3, #0]
 8007588:	68fa      	ldr	r2, [r7, #12]
 800758a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	2220      	movs	r2, #32
 8007590:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	2200      	movs	r2, #0
 8007598:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800759c:	2300      	movs	r3, #0
}
 800759e:	4618      	mov	r0, r3
 80075a0:	3714      	adds	r7, #20
 80075a2:	46bd      	mov	sp, r7
 80075a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075a8:	4770      	bx	lr

080075aa <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80075aa:	b580      	push	{r7, lr}
 80075ac:	b084      	sub	sp, #16
 80075ae:	af00      	add	r7, sp, #0
 80075b0:	6078      	str	r0, [r7, #4]
 80075b2:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80075ba:	2b01      	cmp	r3, #1
 80075bc:	d101      	bne.n	80075c2 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80075be:	2302      	movs	r3, #2
 80075c0:	e02d      	b.n	800761e <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	2201      	movs	r2, #1
 80075c6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	2224      	movs	r2, #36	@ 0x24
 80075ce:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	681b      	ldr	r3, [r3, #0]
 80075d6:	681b      	ldr	r3, [r3, #0]
 80075d8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	681b      	ldr	r3, [r3, #0]
 80075de:	681a      	ldr	r2, [r3, #0]
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	681b      	ldr	r3, [r3, #0]
 80075e4:	f022 0201 	bic.w	r2, r2, #1
 80075e8:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	681b      	ldr	r3, [r3, #0]
 80075ee:	689b      	ldr	r3, [r3, #8]
 80075f0:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	681b      	ldr	r3, [r3, #0]
 80075f8:	683a      	ldr	r2, [r7, #0]
 80075fa:	430a      	orrs	r2, r1
 80075fc:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80075fe:	6878      	ldr	r0, [r7, #4]
 8007600:	f000 f850 	bl	80076a4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	681b      	ldr	r3, [r3, #0]
 8007608:	68fa      	ldr	r2, [r7, #12]
 800760a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	2220      	movs	r2, #32
 8007610:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	2200      	movs	r2, #0
 8007618:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800761c:	2300      	movs	r3, #0
}
 800761e:	4618      	mov	r0, r3
 8007620:	3710      	adds	r7, #16
 8007622:	46bd      	mov	sp, r7
 8007624:	bd80      	pop	{r7, pc}

08007626 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007626:	b580      	push	{r7, lr}
 8007628:	b084      	sub	sp, #16
 800762a:	af00      	add	r7, sp, #0
 800762c:	6078      	str	r0, [r7, #4]
 800762e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8007636:	2b01      	cmp	r3, #1
 8007638:	d101      	bne.n	800763e <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800763a:	2302      	movs	r3, #2
 800763c:	e02d      	b.n	800769a <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	2201      	movs	r2, #1
 8007642:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	2224      	movs	r2, #36	@ 0x24
 800764a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	681b      	ldr	r3, [r3, #0]
 8007652:	681b      	ldr	r3, [r3, #0]
 8007654:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	681b      	ldr	r3, [r3, #0]
 800765a:	681a      	ldr	r2, [r3, #0]
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	681b      	ldr	r3, [r3, #0]
 8007660:	f022 0201 	bic.w	r2, r2, #1
 8007664:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	681b      	ldr	r3, [r3, #0]
 800766a:	689b      	ldr	r3, [r3, #8]
 800766c:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	681b      	ldr	r3, [r3, #0]
 8007674:	683a      	ldr	r2, [r7, #0]
 8007676:	430a      	orrs	r2, r1
 8007678:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800767a:	6878      	ldr	r0, [r7, #4]
 800767c:	f000 f812 	bl	80076a4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	681b      	ldr	r3, [r3, #0]
 8007684:	68fa      	ldr	r2, [r7, #12]
 8007686:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	2220      	movs	r2, #32
 800768c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	2200      	movs	r2, #0
 8007694:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8007698:	2300      	movs	r3, #0
}
 800769a:	4618      	mov	r0, r3
 800769c:	3710      	adds	r7, #16
 800769e:	46bd      	mov	sp, r7
 80076a0:	bd80      	pop	{r7, pc}
	...

080076a4 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80076a4:	b480      	push	{r7}
 80076a6:	b085      	sub	sp, #20
 80076a8:	af00      	add	r7, sp, #0
 80076aa:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80076b0:	2b00      	cmp	r3, #0
 80076b2:	d108      	bne.n	80076c6 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	2201      	movs	r2, #1
 80076b8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	2201      	movs	r2, #1
 80076c0:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80076c4:	e031      	b.n	800772a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80076c6:	2310      	movs	r3, #16
 80076c8:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80076ca:	2310      	movs	r3, #16
 80076cc:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	681b      	ldr	r3, [r3, #0]
 80076d2:	689b      	ldr	r3, [r3, #8]
 80076d4:	0e5b      	lsrs	r3, r3, #25
 80076d6:	b2db      	uxtb	r3, r3
 80076d8:	f003 0307 	and.w	r3, r3, #7
 80076dc:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	681b      	ldr	r3, [r3, #0]
 80076e2:	689b      	ldr	r3, [r3, #8]
 80076e4:	0f5b      	lsrs	r3, r3, #29
 80076e6:	b2db      	uxtb	r3, r3
 80076e8:	f003 0307 	and.w	r3, r3, #7
 80076ec:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80076ee:	7bbb      	ldrb	r3, [r7, #14]
 80076f0:	7b3a      	ldrb	r2, [r7, #12]
 80076f2:	4911      	ldr	r1, [pc, #68]	@ (8007738 <UARTEx_SetNbDataToProcess+0x94>)
 80076f4:	5c8a      	ldrb	r2, [r1, r2]
 80076f6:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80076fa:	7b3a      	ldrb	r2, [r7, #12]
 80076fc:	490f      	ldr	r1, [pc, #60]	@ (800773c <UARTEx_SetNbDataToProcess+0x98>)
 80076fe:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007700:	fb93 f3f2 	sdiv	r3, r3, r2
 8007704:	b29a      	uxth	r2, r3
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800770c:	7bfb      	ldrb	r3, [r7, #15]
 800770e:	7b7a      	ldrb	r2, [r7, #13]
 8007710:	4909      	ldr	r1, [pc, #36]	@ (8007738 <UARTEx_SetNbDataToProcess+0x94>)
 8007712:	5c8a      	ldrb	r2, [r1, r2]
 8007714:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8007718:	7b7a      	ldrb	r2, [r7, #13]
 800771a:	4908      	ldr	r1, [pc, #32]	@ (800773c <UARTEx_SetNbDataToProcess+0x98>)
 800771c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800771e:	fb93 f3f2 	sdiv	r3, r3, r2
 8007722:	b29a      	uxth	r2, r3
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800772a:	bf00      	nop
 800772c:	3714      	adds	r7, #20
 800772e:	46bd      	mov	sp, r7
 8007730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007734:	4770      	bx	lr
 8007736:	bf00      	nop
 8007738:	0800a2cc 	.word	0x0800a2cc
 800773c:	0800a2d4 	.word	0x0800a2d4

08007740 <__cvt>:
 8007740:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007742:	ed2d 8b02 	vpush	{d8}
 8007746:	eeb0 8b40 	vmov.f64	d8, d0
 800774a:	b085      	sub	sp, #20
 800774c:	4617      	mov	r7, r2
 800774e:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
 8007750:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8007752:	ee18 2a90 	vmov	r2, s17
 8007756:	f025 0520 	bic.w	r5, r5, #32
 800775a:	2a00      	cmp	r2, #0
 800775c:	bfb6      	itet	lt
 800775e:	222d      	movlt	r2, #45	@ 0x2d
 8007760:	2200      	movge	r2, #0
 8007762:	eeb1 8b40 	vneglt.f64	d8, d0
 8007766:	2d46      	cmp	r5, #70	@ 0x46
 8007768:	460c      	mov	r4, r1
 800776a:	701a      	strb	r2, [r3, #0]
 800776c:	d004      	beq.n	8007778 <__cvt+0x38>
 800776e:	2d45      	cmp	r5, #69	@ 0x45
 8007770:	d100      	bne.n	8007774 <__cvt+0x34>
 8007772:	3401      	adds	r4, #1
 8007774:	2102      	movs	r1, #2
 8007776:	e000      	b.n	800777a <__cvt+0x3a>
 8007778:	2103      	movs	r1, #3
 800777a:	ab03      	add	r3, sp, #12
 800777c:	9301      	str	r3, [sp, #4]
 800777e:	ab02      	add	r3, sp, #8
 8007780:	9300      	str	r3, [sp, #0]
 8007782:	4622      	mov	r2, r4
 8007784:	4633      	mov	r3, r6
 8007786:	eeb0 0b48 	vmov.f64	d0, d8
 800778a:	f000 ffd5 	bl	8008738 <_dtoa_r>
 800778e:	2d47      	cmp	r5, #71	@ 0x47
 8007790:	d114      	bne.n	80077bc <__cvt+0x7c>
 8007792:	07fb      	lsls	r3, r7, #31
 8007794:	d50a      	bpl.n	80077ac <__cvt+0x6c>
 8007796:	1902      	adds	r2, r0, r4
 8007798:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800779c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80077a0:	bf08      	it	eq
 80077a2:	9203      	streq	r2, [sp, #12]
 80077a4:	2130      	movs	r1, #48	@ 0x30
 80077a6:	9b03      	ldr	r3, [sp, #12]
 80077a8:	4293      	cmp	r3, r2
 80077aa:	d319      	bcc.n	80077e0 <__cvt+0xa0>
 80077ac:	9b03      	ldr	r3, [sp, #12]
 80077ae:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80077b0:	1a1b      	subs	r3, r3, r0
 80077b2:	6013      	str	r3, [r2, #0]
 80077b4:	b005      	add	sp, #20
 80077b6:	ecbd 8b02 	vpop	{d8}
 80077ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80077bc:	2d46      	cmp	r5, #70	@ 0x46
 80077be:	eb00 0204 	add.w	r2, r0, r4
 80077c2:	d1e9      	bne.n	8007798 <__cvt+0x58>
 80077c4:	7803      	ldrb	r3, [r0, #0]
 80077c6:	2b30      	cmp	r3, #48	@ 0x30
 80077c8:	d107      	bne.n	80077da <__cvt+0x9a>
 80077ca:	eeb5 8b40 	vcmp.f64	d8, #0.0
 80077ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80077d2:	bf1c      	itt	ne
 80077d4:	f1c4 0401 	rsbne	r4, r4, #1
 80077d8:	6034      	strne	r4, [r6, #0]
 80077da:	6833      	ldr	r3, [r6, #0]
 80077dc:	441a      	add	r2, r3
 80077de:	e7db      	b.n	8007798 <__cvt+0x58>
 80077e0:	1c5c      	adds	r4, r3, #1
 80077e2:	9403      	str	r4, [sp, #12]
 80077e4:	7019      	strb	r1, [r3, #0]
 80077e6:	e7de      	b.n	80077a6 <__cvt+0x66>

080077e8 <__exponent>:
 80077e8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80077ea:	2900      	cmp	r1, #0
 80077ec:	bfba      	itte	lt
 80077ee:	4249      	neglt	r1, r1
 80077f0:	232d      	movlt	r3, #45	@ 0x2d
 80077f2:	232b      	movge	r3, #43	@ 0x2b
 80077f4:	2909      	cmp	r1, #9
 80077f6:	7002      	strb	r2, [r0, #0]
 80077f8:	7043      	strb	r3, [r0, #1]
 80077fa:	dd29      	ble.n	8007850 <__exponent+0x68>
 80077fc:	f10d 0307 	add.w	r3, sp, #7
 8007800:	461d      	mov	r5, r3
 8007802:	270a      	movs	r7, #10
 8007804:	461a      	mov	r2, r3
 8007806:	fbb1 f6f7 	udiv	r6, r1, r7
 800780a:	fb07 1416 	mls	r4, r7, r6, r1
 800780e:	3430      	adds	r4, #48	@ 0x30
 8007810:	f802 4c01 	strb.w	r4, [r2, #-1]
 8007814:	460c      	mov	r4, r1
 8007816:	2c63      	cmp	r4, #99	@ 0x63
 8007818:	f103 33ff 	add.w	r3, r3, #4294967295
 800781c:	4631      	mov	r1, r6
 800781e:	dcf1      	bgt.n	8007804 <__exponent+0x1c>
 8007820:	3130      	adds	r1, #48	@ 0x30
 8007822:	1e94      	subs	r4, r2, #2
 8007824:	f803 1c01 	strb.w	r1, [r3, #-1]
 8007828:	1c41      	adds	r1, r0, #1
 800782a:	4623      	mov	r3, r4
 800782c:	42ab      	cmp	r3, r5
 800782e:	d30a      	bcc.n	8007846 <__exponent+0x5e>
 8007830:	f10d 0309 	add.w	r3, sp, #9
 8007834:	1a9b      	subs	r3, r3, r2
 8007836:	42ac      	cmp	r4, r5
 8007838:	bf88      	it	hi
 800783a:	2300      	movhi	r3, #0
 800783c:	3302      	adds	r3, #2
 800783e:	4403      	add	r3, r0
 8007840:	1a18      	subs	r0, r3, r0
 8007842:	b003      	add	sp, #12
 8007844:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007846:	f813 6b01 	ldrb.w	r6, [r3], #1
 800784a:	f801 6f01 	strb.w	r6, [r1, #1]!
 800784e:	e7ed      	b.n	800782c <__exponent+0x44>
 8007850:	2330      	movs	r3, #48	@ 0x30
 8007852:	3130      	adds	r1, #48	@ 0x30
 8007854:	7083      	strb	r3, [r0, #2]
 8007856:	70c1      	strb	r1, [r0, #3]
 8007858:	1d03      	adds	r3, r0, #4
 800785a:	e7f1      	b.n	8007840 <__exponent+0x58>
 800785c:	0000      	movs	r0, r0
	...

08007860 <_printf_float>:
 8007860:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007864:	b08d      	sub	sp, #52	@ 0x34
 8007866:	460c      	mov	r4, r1
 8007868:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800786c:	4616      	mov	r6, r2
 800786e:	461f      	mov	r7, r3
 8007870:	4605      	mov	r5, r0
 8007872:	f000 fe61 	bl	8008538 <_localeconv_r>
 8007876:	f8d0 b000 	ldr.w	fp, [r0]
 800787a:	4658      	mov	r0, fp
 800787c:	f7f8 fd80 	bl	8000380 <strlen>
 8007880:	2300      	movs	r3, #0
 8007882:	930a      	str	r3, [sp, #40]	@ 0x28
 8007884:	f8d8 3000 	ldr.w	r3, [r8]
 8007888:	f894 9018 	ldrb.w	r9, [r4, #24]
 800788c:	6822      	ldr	r2, [r4, #0]
 800788e:	9005      	str	r0, [sp, #20]
 8007890:	3307      	adds	r3, #7
 8007892:	f023 0307 	bic.w	r3, r3, #7
 8007896:	f103 0108 	add.w	r1, r3, #8
 800789a:	f8c8 1000 	str.w	r1, [r8]
 800789e:	ed93 0b00 	vldr	d0, [r3]
 80078a2:	ed9f 6b97 	vldr	d6, [pc, #604]	@ 8007b00 <_printf_float+0x2a0>
 80078a6:	eeb0 7bc0 	vabs.f64	d7, d0
 80078aa:	eeb4 7b46 	vcmp.f64	d7, d6
 80078ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80078b2:	ed84 0b12 	vstr	d0, [r4, #72]	@ 0x48
 80078b6:	dd24      	ble.n	8007902 <_printf_float+0xa2>
 80078b8:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 80078bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80078c0:	d502      	bpl.n	80078c8 <_printf_float+0x68>
 80078c2:	232d      	movs	r3, #45	@ 0x2d
 80078c4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80078c8:	498f      	ldr	r1, [pc, #572]	@ (8007b08 <_printf_float+0x2a8>)
 80078ca:	4b90      	ldr	r3, [pc, #576]	@ (8007b0c <_printf_float+0x2ac>)
 80078cc:	f1b9 0f47 	cmp.w	r9, #71	@ 0x47
 80078d0:	bf8c      	ite	hi
 80078d2:	4688      	movhi	r8, r1
 80078d4:	4698      	movls	r8, r3
 80078d6:	f022 0204 	bic.w	r2, r2, #4
 80078da:	2303      	movs	r3, #3
 80078dc:	6123      	str	r3, [r4, #16]
 80078de:	6022      	str	r2, [r4, #0]
 80078e0:	f04f 0a00 	mov.w	sl, #0
 80078e4:	9700      	str	r7, [sp, #0]
 80078e6:	4633      	mov	r3, r6
 80078e8:	aa0b      	add	r2, sp, #44	@ 0x2c
 80078ea:	4621      	mov	r1, r4
 80078ec:	4628      	mov	r0, r5
 80078ee:	f000 f9d1 	bl	8007c94 <_printf_common>
 80078f2:	3001      	adds	r0, #1
 80078f4:	f040 8089 	bne.w	8007a0a <_printf_float+0x1aa>
 80078f8:	f04f 30ff 	mov.w	r0, #4294967295
 80078fc:	b00d      	add	sp, #52	@ 0x34
 80078fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007902:	eeb4 0b40 	vcmp.f64	d0, d0
 8007906:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800790a:	d709      	bvc.n	8007920 <_printf_float+0xc0>
 800790c:	ee10 3a90 	vmov	r3, s1
 8007910:	2b00      	cmp	r3, #0
 8007912:	bfbc      	itt	lt
 8007914:	232d      	movlt	r3, #45	@ 0x2d
 8007916:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800791a:	497d      	ldr	r1, [pc, #500]	@ (8007b10 <_printf_float+0x2b0>)
 800791c:	4b7d      	ldr	r3, [pc, #500]	@ (8007b14 <_printf_float+0x2b4>)
 800791e:	e7d5      	b.n	80078cc <_printf_float+0x6c>
 8007920:	6863      	ldr	r3, [r4, #4]
 8007922:	1c59      	adds	r1, r3, #1
 8007924:	f009 0adf 	and.w	sl, r9, #223	@ 0xdf
 8007928:	d139      	bne.n	800799e <_printf_float+0x13e>
 800792a:	2306      	movs	r3, #6
 800792c:	6063      	str	r3, [r4, #4]
 800792e:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8007932:	2300      	movs	r3, #0
 8007934:	6022      	str	r2, [r4, #0]
 8007936:	9303      	str	r3, [sp, #12]
 8007938:	ab0a      	add	r3, sp, #40	@ 0x28
 800793a:	e9cd 9301 	strd	r9, r3, [sp, #4]
 800793e:	ab09      	add	r3, sp, #36	@ 0x24
 8007940:	9300      	str	r3, [sp, #0]
 8007942:	6861      	ldr	r1, [r4, #4]
 8007944:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8007948:	4628      	mov	r0, r5
 800794a:	f7ff fef9 	bl	8007740 <__cvt>
 800794e:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8007952:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8007954:	4680      	mov	r8, r0
 8007956:	d129      	bne.n	80079ac <_printf_float+0x14c>
 8007958:	1cc8      	adds	r0, r1, #3
 800795a:	db02      	blt.n	8007962 <_printf_float+0x102>
 800795c:	6863      	ldr	r3, [r4, #4]
 800795e:	4299      	cmp	r1, r3
 8007960:	dd41      	ble.n	80079e6 <_printf_float+0x186>
 8007962:	f1a9 0902 	sub.w	r9, r9, #2
 8007966:	fa5f f989 	uxtb.w	r9, r9
 800796a:	3901      	subs	r1, #1
 800796c:	464a      	mov	r2, r9
 800796e:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8007972:	9109      	str	r1, [sp, #36]	@ 0x24
 8007974:	f7ff ff38 	bl	80077e8 <__exponent>
 8007978:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800797a:	1813      	adds	r3, r2, r0
 800797c:	2a01      	cmp	r2, #1
 800797e:	4682      	mov	sl, r0
 8007980:	6123      	str	r3, [r4, #16]
 8007982:	dc02      	bgt.n	800798a <_printf_float+0x12a>
 8007984:	6822      	ldr	r2, [r4, #0]
 8007986:	07d2      	lsls	r2, r2, #31
 8007988:	d501      	bpl.n	800798e <_printf_float+0x12e>
 800798a:	3301      	adds	r3, #1
 800798c:	6123      	str	r3, [r4, #16]
 800798e:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8007992:	2b00      	cmp	r3, #0
 8007994:	d0a6      	beq.n	80078e4 <_printf_float+0x84>
 8007996:	232d      	movs	r3, #45	@ 0x2d
 8007998:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800799c:	e7a2      	b.n	80078e4 <_printf_float+0x84>
 800799e:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 80079a2:	d1c4      	bne.n	800792e <_printf_float+0xce>
 80079a4:	2b00      	cmp	r3, #0
 80079a6:	d1c2      	bne.n	800792e <_printf_float+0xce>
 80079a8:	2301      	movs	r3, #1
 80079aa:	e7bf      	b.n	800792c <_printf_float+0xcc>
 80079ac:	f1b9 0f65 	cmp.w	r9, #101	@ 0x65
 80079b0:	d9db      	bls.n	800796a <_printf_float+0x10a>
 80079b2:	f1b9 0f66 	cmp.w	r9, #102	@ 0x66
 80079b6:	d118      	bne.n	80079ea <_printf_float+0x18a>
 80079b8:	2900      	cmp	r1, #0
 80079ba:	6863      	ldr	r3, [r4, #4]
 80079bc:	dd0b      	ble.n	80079d6 <_printf_float+0x176>
 80079be:	6121      	str	r1, [r4, #16]
 80079c0:	b913      	cbnz	r3, 80079c8 <_printf_float+0x168>
 80079c2:	6822      	ldr	r2, [r4, #0]
 80079c4:	07d0      	lsls	r0, r2, #31
 80079c6:	d502      	bpl.n	80079ce <_printf_float+0x16e>
 80079c8:	3301      	adds	r3, #1
 80079ca:	440b      	add	r3, r1
 80079cc:	6123      	str	r3, [r4, #16]
 80079ce:	65a1      	str	r1, [r4, #88]	@ 0x58
 80079d0:	f04f 0a00 	mov.w	sl, #0
 80079d4:	e7db      	b.n	800798e <_printf_float+0x12e>
 80079d6:	b913      	cbnz	r3, 80079de <_printf_float+0x17e>
 80079d8:	6822      	ldr	r2, [r4, #0]
 80079da:	07d2      	lsls	r2, r2, #31
 80079dc:	d501      	bpl.n	80079e2 <_printf_float+0x182>
 80079de:	3302      	adds	r3, #2
 80079e0:	e7f4      	b.n	80079cc <_printf_float+0x16c>
 80079e2:	2301      	movs	r3, #1
 80079e4:	e7f2      	b.n	80079cc <_printf_float+0x16c>
 80079e6:	f04f 0967 	mov.w	r9, #103	@ 0x67
 80079ea:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80079ec:	4299      	cmp	r1, r3
 80079ee:	db05      	blt.n	80079fc <_printf_float+0x19c>
 80079f0:	6823      	ldr	r3, [r4, #0]
 80079f2:	6121      	str	r1, [r4, #16]
 80079f4:	07d8      	lsls	r0, r3, #31
 80079f6:	d5ea      	bpl.n	80079ce <_printf_float+0x16e>
 80079f8:	1c4b      	adds	r3, r1, #1
 80079fa:	e7e7      	b.n	80079cc <_printf_float+0x16c>
 80079fc:	2900      	cmp	r1, #0
 80079fe:	bfd4      	ite	le
 8007a00:	f1c1 0202 	rsble	r2, r1, #2
 8007a04:	2201      	movgt	r2, #1
 8007a06:	4413      	add	r3, r2
 8007a08:	e7e0      	b.n	80079cc <_printf_float+0x16c>
 8007a0a:	6823      	ldr	r3, [r4, #0]
 8007a0c:	055a      	lsls	r2, r3, #21
 8007a0e:	d407      	bmi.n	8007a20 <_printf_float+0x1c0>
 8007a10:	6923      	ldr	r3, [r4, #16]
 8007a12:	4642      	mov	r2, r8
 8007a14:	4631      	mov	r1, r6
 8007a16:	4628      	mov	r0, r5
 8007a18:	47b8      	blx	r7
 8007a1a:	3001      	adds	r0, #1
 8007a1c:	d12a      	bne.n	8007a74 <_printf_float+0x214>
 8007a1e:	e76b      	b.n	80078f8 <_printf_float+0x98>
 8007a20:	f1b9 0f65 	cmp.w	r9, #101	@ 0x65
 8007a24:	f240 80e0 	bls.w	8007be8 <_printf_float+0x388>
 8007a28:	ed94 7b12 	vldr	d7, [r4, #72]	@ 0x48
 8007a2c:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8007a30:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007a34:	d133      	bne.n	8007a9e <_printf_float+0x23e>
 8007a36:	4a38      	ldr	r2, [pc, #224]	@ (8007b18 <_printf_float+0x2b8>)
 8007a38:	2301      	movs	r3, #1
 8007a3a:	4631      	mov	r1, r6
 8007a3c:	4628      	mov	r0, r5
 8007a3e:	47b8      	blx	r7
 8007a40:	3001      	adds	r0, #1
 8007a42:	f43f af59 	beq.w	80078f8 <_printf_float+0x98>
 8007a46:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8007a4a:	4543      	cmp	r3, r8
 8007a4c:	db02      	blt.n	8007a54 <_printf_float+0x1f4>
 8007a4e:	6823      	ldr	r3, [r4, #0]
 8007a50:	07d8      	lsls	r0, r3, #31
 8007a52:	d50f      	bpl.n	8007a74 <_printf_float+0x214>
 8007a54:	9b05      	ldr	r3, [sp, #20]
 8007a56:	465a      	mov	r2, fp
 8007a58:	4631      	mov	r1, r6
 8007a5a:	4628      	mov	r0, r5
 8007a5c:	47b8      	blx	r7
 8007a5e:	3001      	adds	r0, #1
 8007a60:	f43f af4a 	beq.w	80078f8 <_printf_float+0x98>
 8007a64:	f04f 0900 	mov.w	r9, #0
 8007a68:	f108 38ff 	add.w	r8, r8, #4294967295
 8007a6c:	f104 0a1a 	add.w	sl, r4, #26
 8007a70:	45c8      	cmp	r8, r9
 8007a72:	dc09      	bgt.n	8007a88 <_printf_float+0x228>
 8007a74:	6823      	ldr	r3, [r4, #0]
 8007a76:	079b      	lsls	r3, r3, #30
 8007a78:	f100 8107 	bmi.w	8007c8a <_printf_float+0x42a>
 8007a7c:	68e0      	ldr	r0, [r4, #12]
 8007a7e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007a80:	4298      	cmp	r0, r3
 8007a82:	bfb8      	it	lt
 8007a84:	4618      	movlt	r0, r3
 8007a86:	e739      	b.n	80078fc <_printf_float+0x9c>
 8007a88:	2301      	movs	r3, #1
 8007a8a:	4652      	mov	r2, sl
 8007a8c:	4631      	mov	r1, r6
 8007a8e:	4628      	mov	r0, r5
 8007a90:	47b8      	blx	r7
 8007a92:	3001      	adds	r0, #1
 8007a94:	f43f af30 	beq.w	80078f8 <_printf_float+0x98>
 8007a98:	f109 0901 	add.w	r9, r9, #1
 8007a9c:	e7e8      	b.n	8007a70 <_printf_float+0x210>
 8007a9e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007aa0:	2b00      	cmp	r3, #0
 8007aa2:	dc3b      	bgt.n	8007b1c <_printf_float+0x2bc>
 8007aa4:	4a1c      	ldr	r2, [pc, #112]	@ (8007b18 <_printf_float+0x2b8>)
 8007aa6:	2301      	movs	r3, #1
 8007aa8:	4631      	mov	r1, r6
 8007aaa:	4628      	mov	r0, r5
 8007aac:	47b8      	blx	r7
 8007aae:	3001      	adds	r0, #1
 8007ab0:	f43f af22 	beq.w	80078f8 <_printf_float+0x98>
 8007ab4:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8007ab8:	ea59 0303 	orrs.w	r3, r9, r3
 8007abc:	d102      	bne.n	8007ac4 <_printf_float+0x264>
 8007abe:	6823      	ldr	r3, [r4, #0]
 8007ac0:	07d9      	lsls	r1, r3, #31
 8007ac2:	d5d7      	bpl.n	8007a74 <_printf_float+0x214>
 8007ac4:	9b05      	ldr	r3, [sp, #20]
 8007ac6:	465a      	mov	r2, fp
 8007ac8:	4631      	mov	r1, r6
 8007aca:	4628      	mov	r0, r5
 8007acc:	47b8      	blx	r7
 8007ace:	3001      	adds	r0, #1
 8007ad0:	f43f af12 	beq.w	80078f8 <_printf_float+0x98>
 8007ad4:	f04f 0a00 	mov.w	sl, #0
 8007ad8:	f104 0b1a 	add.w	fp, r4, #26
 8007adc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007ade:	425b      	negs	r3, r3
 8007ae0:	4553      	cmp	r3, sl
 8007ae2:	dc01      	bgt.n	8007ae8 <_printf_float+0x288>
 8007ae4:	464b      	mov	r3, r9
 8007ae6:	e794      	b.n	8007a12 <_printf_float+0x1b2>
 8007ae8:	2301      	movs	r3, #1
 8007aea:	465a      	mov	r2, fp
 8007aec:	4631      	mov	r1, r6
 8007aee:	4628      	mov	r0, r5
 8007af0:	47b8      	blx	r7
 8007af2:	3001      	adds	r0, #1
 8007af4:	f43f af00 	beq.w	80078f8 <_printf_float+0x98>
 8007af8:	f10a 0a01 	add.w	sl, sl, #1
 8007afc:	e7ee      	b.n	8007adc <_printf_float+0x27c>
 8007afe:	bf00      	nop
 8007b00:	ffffffff 	.word	0xffffffff
 8007b04:	7fefffff 	.word	0x7fefffff
 8007b08:	0800a2e0 	.word	0x0800a2e0
 8007b0c:	0800a2dc 	.word	0x0800a2dc
 8007b10:	0800a2e8 	.word	0x0800a2e8
 8007b14:	0800a2e4 	.word	0x0800a2e4
 8007b18:	0800a2ec 	.word	0x0800a2ec
 8007b1c:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8007b1e:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8007b22:	4553      	cmp	r3, sl
 8007b24:	bfa8      	it	ge
 8007b26:	4653      	movge	r3, sl
 8007b28:	2b00      	cmp	r3, #0
 8007b2a:	4699      	mov	r9, r3
 8007b2c:	dc37      	bgt.n	8007b9e <_printf_float+0x33e>
 8007b2e:	2300      	movs	r3, #0
 8007b30:	9307      	str	r3, [sp, #28]
 8007b32:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007b36:	f104 021a 	add.w	r2, r4, #26
 8007b3a:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8007b3c:	9907      	ldr	r1, [sp, #28]
 8007b3e:	9306      	str	r3, [sp, #24]
 8007b40:	eba3 0309 	sub.w	r3, r3, r9
 8007b44:	428b      	cmp	r3, r1
 8007b46:	dc31      	bgt.n	8007bac <_printf_float+0x34c>
 8007b48:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007b4a:	459a      	cmp	sl, r3
 8007b4c:	dc3b      	bgt.n	8007bc6 <_printf_float+0x366>
 8007b4e:	6823      	ldr	r3, [r4, #0]
 8007b50:	07da      	lsls	r2, r3, #31
 8007b52:	d438      	bmi.n	8007bc6 <_printf_float+0x366>
 8007b54:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007b56:	ebaa 0903 	sub.w	r9, sl, r3
 8007b5a:	9b06      	ldr	r3, [sp, #24]
 8007b5c:	ebaa 0303 	sub.w	r3, sl, r3
 8007b60:	4599      	cmp	r9, r3
 8007b62:	bfa8      	it	ge
 8007b64:	4699      	movge	r9, r3
 8007b66:	f1b9 0f00 	cmp.w	r9, #0
 8007b6a:	dc34      	bgt.n	8007bd6 <_printf_float+0x376>
 8007b6c:	f04f 0800 	mov.w	r8, #0
 8007b70:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007b74:	f104 0b1a 	add.w	fp, r4, #26
 8007b78:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007b7a:	ebaa 0303 	sub.w	r3, sl, r3
 8007b7e:	eba3 0309 	sub.w	r3, r3, r9
 8007b82:	4543      	cmp	r3, r8
 8007b84:	f77f af76 	ble.w	8007a74 <_printf_float+0x214>
 8007b88:	2301      	movs	r3, #1
 8007b8a:	465a      	mov	r2, fp
 8007b8c:	4631      	mov	r1, r6
 8007b8e:	4628      	mov	r0, r5
 8007b90:	47b8      	blx	r7
 8007b92:	3001      	adds	r0, #1
 8007b94:	f43f aeb0 	beq.w	80078f8 <_printf_float+0x98>
 8007b98:	f108 0801 	add.w	r8, r8, #1
 8007b9c:	e7ec      	b.n	8007b78 <_printf_float+0x318>
 8007b9e:	4642      	mov	r2, r8
 8007ba0:	4631      	mov	r1, r6
 8007ba2:	4628      	mov	r0, r5
 8007ba4:	47b8      	blx	r7
 8007ba6:	3001      	adds	r0, #1
 8007ba8:	d1c1      	bne.n	8007b2e <_printf_float+0x2ce>
 8007baa:	e6a5      	b.n	80078f8 <_printf_float+0x98>
 8007bac:	2301      	movs	r3, #1
 8007bae:	4631      	mov	r1, r6
 8007bb0:	4628      	mov	r0, r5
 8007bb2:	9206      	str	r2, [sp, #24]
 8007bb4:	47b8      	blx	r7
 8007bb6:	3001      	adds	r0, #1
 8007bb8:	f43f ae9e 	beq.w	80078f8 <_printf_float+0x98>
 8007bbc:	9b07      	ldr	r3, [sp, #28]
 8007bbe:	9a06      	ldr	r2, [sp, #24]
 8007bc0:	3301      	adds	r3, #1
 8007bc2:	9307      	str	r3, [sp, #28]
 8007bc4:	e7b9      	b.n	8007b3a <_printf_float+0x2da>
 8007bc6:	9b05      	ldr	r3, [sp, #20]
 8007bc8:	465a      	mov	r2, fp
 8007bca:	4631      	mov	r1, r6
 8007bcc:	4628      	mov	r0, r5
 8007bce:	47b8      	blx	r7
 8007bd0:	3001      	adds	r0, #1
 8007bd2:	d1bf      	bne.n	8007b54 <_printf_float+0x2f4>
 8007bd4:	e690      	b.n	80078f8 <_printf_float+0x98>
 8007bd6:	9a06      	ldr	r2, [sp, #24]
 8007bd8:	464b      	mov	r3, r9
 8007bda:	4442      	add	r2, r8
 8007bdc:	4631      	mov	r1, r6
 8007bde:	4628      	mov	r0, r5
 8007be0:	47b8      	blx	r7
 8007be2:	3001      	adds	r0, #1
 8007be4:	d1c2      	bne.n	8007b6c <_printf_float+0x30c>
 8007be6:	e687      	b.n	80078f8 <_printf_float+0x98>
 8007be8:	f8dd 9028 	ldr.w	r9, [sp, #40]	@ 0x28
 8007bec:	f1b9 0f01 	cmp.w	r9, #1
 8007bf0:	dc01      	bgt.n	8007bf6 <_printf_float+0x396>
 8007bf2:	07db      	lsls	r3, r3, #31
 8007bf4:	d536      	bpl.n	8007c64 <_printf_float+0x404>
 8007bf6:	2301      	movs	r3, #1
 8007bf8:	4642      	mov	r2, r8
 8007bfa:	4631      	mov	r1, r6
 8007bfc:	4628      	mov	r0, r5
 8007bfe:	47b8      	blx	r7
 8007c00:	3001      	adds	r0, #1
 8007c02:	f43f ae79 	beq.w	80078f8 <_printf_float+0x98>
 8007c06:	9b05      	ldr	r3, [sp, #20]
 8007c08:	465a      	mov	r2, fp
 8007c0a:	4631      	mov	r1, r6
 8007c0c:	4628      	mov	r0, r5
 8007c0e:	47b8      	blx	r7
 8007c10:	3001      	adds	r0, #1
 8007c12:	f43f ae71 	beq.w	80078f8 <_printf_float+0x98>
 8007c16:	ed94 7b12 	vldr	d7, [r4, #72]	@ 0x48
 8007c1a:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8007c1e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007c22:	f109 39ff 	add.w	r9, r9, #4294967295
 8007c26:	d018      	beq.n	8007c5a <_printf_float+0x3fa>
 8007c28:	464b      	mov	r3, r9
 8007c2a:	f108 0201 	add.w	r2, r8, #1
 8007c2e:	4631      	mov	r1, r6
 8007c30:	4628      	mov	r0, r5
 8007c32:	47b8      	blx	r7
 8007c34:	3001      	adds	r0, #1
 8007c36:	d10c      	bne.n	8007c52 <_printf_float+0x3f2>
 8007c38:	e65e      	b.n	80078f8 <_printf_float+0x98>
 8007c3a:	2301      	movs	r3, #1
 8007c3c:	465a      	mov	r2, fp
 8007c3e:	4631      	mov	r1, r6
 8007c40:	4628      	mov	r0, r5
 8007c42:	47b8      	blx	r7
 8007c44:	3001      	adds	r0, #1
 8007c46:	f43f ae57 	beq.w	80078f8 <_printf_float+0x98>
 8007c4a:	f108 0801 	add.w	r8, r8, #1
 8007c4e:	45c8      	cmp	r8, r9
 8007c50:	dbf3      	blt.n	8007c3a <_printf_float+0x3da>
 8007c52:	4653      	mov	r3, sl
 8007c54:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8007c58:	e6dc      	b.n	8007a14 <_printf_float+0x1b4>
 8007c5a:	f04f 0800 	mov.w	r8, #0
 8007c5e:	f104 0b1a 	add.w	fp, r4, #26
 8007c62:	e7f4      	b.n	8007c4e <_printf_float+0x3ee>
 8007c64:	2301      	movs	r3, #1
 8007c66:	4642      	mov	r2, r8
 8007c68:	e7e1      	b.n	8007c2e <_printf_float+0x3ce>
 8007c6a:	2301      	movs	r3, #1
 8007c6c:	464a      	mov	r2, r9
 8007c6e:	4631      	mov	r1, r6
 8007c70:	4628      	mov	r0, r5
 8007c72:	47b8      	blx	r7
 8007c74:	3001      	adds	r0, #1
 8007c76:	f43f ae3f 	beq.w	80078f8 <_printf_float+0x98>
 8007c7a:	f108 0801 	add.w	r8, r8, #1
 8007c7e:	68e3      	ldr	r3, [r4, #12]
 8007c80:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8007c82:	1a5b      	subs	r3, r3, r1
 8007c84:	4543      	cmp	r3, r8
 8007c86:	dcf0      	bgt.n	8007c6a <_printf_float+0x40a>
 8007c88:	e6f8      	b.n	8007a7c <_printf_float+0x21c>
 8007c8a:	f04f 0800 	mov.w	r8, #0
 8007c8e:	f104 0919 	add.w	r9, r4, #25
 8007c92:	e7f4      	b.n	8007c7e <_printf_float+0x41e>

08007c94 <_printf_common>:
 8007c94:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007c98:	4616      	mov	r6, r2
 8007c9a:	4698      	mov	r8, r3
 8007c9c:	688a      	ldr	r2, [r1, #8]
 8007c9e:	690b      	ldr	r3, [r1, #16]
 8007ca0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8007ca4:	4293      	cmp	r3, r2
 8007ca6:	bfb8      	it	lt
 8007ca8:	4613      	movlt	r3, r2
 8007caa:	6033      	str	r3, [r6, #0]
 8007cac:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8007cb0:	4607      	mov	r7, r0
 8007cb2:	460c      	mov	r4, r1
 8007cb4:	b10a      	cbz	r2, 8007cba <_printf_common+0x26>
 8007cb6:	3301      	adds	r3, #1
 8007cb8:	6033      	str	r3, [r6, #0]
 8007cba:	6823      	ldr	r3, [r4, #0]
 8007cbc:	0699      	lsls	r1, r3, #26
 8007cbe:	bf42      	ittt	mi
 8007cc0:	6833      	ldrmi	r3, [r6, #0]
 8007cc2:	3302      	addmi	r3, #2
 8007cc4:	6033      	strmi	r3, [r6, #0]
 8007cc6:	6825      	ldr	r5, [r4, #0]
 8007cc8:	f015 0506 	ands.w	r5, r5, #6
 8007ccc:	d106      	bne.n	8007cdc <_printf_common+0x48>
 8007cce:	f104 0a19 	add.w	sl, r4, #25
 8007cd2:	68e3      	ldr	r3, [r4, #12]
 8007cd4:	6832      	ldr	r2, [r6, #0]
 8007cd6:	1a9b      	subs	r3, r3, r2
 8007cd8:	42ab      	cmp	r3, r5
 8007cda:	dc26      	bgt.n	8007d2a <_printf_common+0x96>
 8007cdc:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8007ce0:	6822      	ldr	r2, [r4, #0]
 8007ce2:	3b00      	subs	r3, #0
 8007ce4:	bf18      	it	ne
 8007ce6:	2301      	movne	r3, #1
 8007ce8:	0692      	lsls	r2, r2, #26
 8007cea:	d42b      	bmi.n	8007d44 <_printf_common+0xb0>
 8007cec:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8007cf0:	4641      	mov	r1, r8
 8007cf2:	4638      	mov	r0, r7
 8007cf4:	47c8      	blx	r9
 8007cf6:	3001      	adds	r0, #1
 8007cf8:	d01e      	beq.n	8007d38 <_printf_common+0xa4>
 8007cfa:	6823      	ldr	r3, [r4, #0]
 8007cfc:	6922      	ldr	r2, [r4, #16]
 8007cfe:	f003 0306 	and.w	r3, r3, #6
 8007d02:	2b04      	cmp	r3, #4
 8007d04:	bf02      	ittt	eq
 8007d06:	68e5      	ldreq	r5, [r4, #12]
 8007d08:	6833      	ldreq	r3, [r6, #0]
 8007d0a:	1aed      	subeq	r5, r5, r3
 8007d0c:	68a3      	ldr	r3, [r4, #8]
 8007d0e:	bf0c      	ite	eq
 8007d10:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007d14:	2500      	movne	r5, #0
 8007d16:	4293      	cmp	r3, r2
 8007d18:	bfc4      	itt	gt
 8007d1a:	1a9b      	subgt	r3, r3, r2
 8007d1c:	18ed      	addgt	r5, r5, r3
 8007d1e:	2600      	movs	r6, #0
 8007d20:	341a      	adds	r4, #26
 8007d22:	42b5      	cmp	r5, r6
 8007d24:	d11a      	bne.n	8007d5c <_printf_common+0xc8>
 8007d26:	2000      	movs	r0, #0
 8007d28:	e008      	b.n	8007d3c <_printf_common+0xa8>
 8007d2a:	2301      	movs	r3, #1
 8007d2c:	4652      	mov	r2, sl
 8007d2e:	4641      	mov	r1, r8
 8007d30:	4638      	mov	r0, r7
 8007d32:	47c8      	blx	r9
 8007d34:	3001      	adds	r0, #1
 8007d36:	d103      	bne.n	8007d40 <_printf_common+0xac>
 8007d38:	f04f 30ff 	mov.w	r0, #4294967295
 8007d3c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007d40:	3501      	adds	r5, #1
 8007d42:	e7c6      	b.n	8007cd2 <_printf_common+0x3e>
 8007d44:	18e1      	adds	r1, r4, r3
 8007d46:	1c5a      	adds	r2, r3, #1
 8007d48:	2030      	movs	r0, #48	@ 0x30
 8007d4a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8007d4e:	4422      	add	r2, r4
 8007d50:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8007d54:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8007d58:	3302      	adds	r3, #2
 8007d5a:	e7c7      	b.n	8007cec <_printf_common+0x58>
 8007d5c:	2301      	movs	r3, #1
 8007d5e:	4622      	mov	r2, r4
 8007d60:	4641      	mov	r1, r8
 8007d62:	4638      	mov	r0, r7
 8007d64:	47c8      	blx	r9
 8007d66:	3001      	adds	r0, #1
 8007d68:	d0e6      	beq.n	8007d38 <_printf_common+0xa4>
 8007d6a:	3601      	adds	r6, #1
 8007d6c:	e7d9      	b.n	8007d22 <_printf_common+0x8e>
	...

08007d70 <_printf_i>:
 8007d70:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007d74:	7e0f      	ldrb	r7, [r1, #24]
 8007d76:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8007d78:	2f78      	cmp	r7, #120	@ 0x78
 8007d7a:	4691      	mov	r9, r2
 8007d7c:	4680      	mov	r8, r0
 8007d7e:	460c      	mov	r4, r1
 8007d80:	469a      	mov	sl, r3
 8007d82:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8007d86:	d807      	bhi.n	8007d98 <_printf_i+0x28>
 8007d88:	2f62      	cmp	r7, #98	@ 0x62
 8007d8a:	d80a      	bhi.n	8007da2 <_printf_i+0x32>
 8007d8c:	2f00      	cmp	r7, #0
 8007d8e:	f000 80d1 	beq.w	8007f34 <_printf_i+0x1c4>
 8007d92:	2f58      	cmp	r7, #88	@ 0x58
 8007d94:	f000 80b8 	beq.w	8007f08 <_printf_i+0x198>
 8007d98:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007d9c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8007da0:	e03a      	b.n	8007e18 <_printf_i+0xa8>
 8007da2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8007da6:	2b15      	cmp	r3, #21
 8007da8:	d8f6      	bhi.n	8007d98 <_printf_i+0x28>
 8007daa:	a101      	add	r1, pc, #4	@ (adr r1, 8007db0 <_printf_i+0x40>)
 8007dac:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007db0:	08007e09 	.word	0x08007e09
 8007db4:	08007e1d 	.word	0x08007e1d
 8007db8:	08007d99 	.word	0x08007d99
 8007dbc:	08007d99 	.word	0x08007d99
 8007dc0:	08007d99 	.word	0x08007d99
 8007dc4:	08007d99 	.word	0x08007d99
 8007dc8:	08007e1d 	.word	0x08007e1d
 8007dcc:	08007d99 	.word	0x08007d99
 8007dd0:	08007d99 	.word	0x08007d99
 8007dd4:	08007d99 	.word	0x08007d99
 8007dd8:	08007d99 	.word	0x08007d99
 8007ddc:	08007f1b 	.word	0x08007f1b
 8007de0:	08007e47 	.word	0x08007e47
 8007de4:	08007ed5 	.word	0x08007ed5
 8007de8:	08007d99 	.word	0x08007d99
 8007dec:	08007d99 	.word	0x08007d99
 8007df0:	08007f3d 	.word	0x08007f3d
 8007df4:	08007d99 	.word	0x08007d99
 8007df8:	08007e47 	.word	0x08007e47
 8007dfc:	08007d99 	.word	0x08007d99
 8007e00:	08007d99 	.word	0x08007d99
 8007e04:	08007edd 	.word	0x08007edd
 8007e08:	6833      	ldr	r3, [r6, #0]
 8007e0a:	1d1a      	adds	r2, r3, #4
 8007e0c:	681b      	ldr	r3, [r3, #0]
 8007e0e:	6032      	str	r2, [r6, #0]
 8007e10:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007e14:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8007e18:	2301      	movs	r3, #1
 8007e1a:	e09c      	b.n	8007f56 <_printf_i+0x1e6>
 8007e1c:	6833      	ldr	r3, [r6, #0]
 8007e1e:	6820      	ldr	r0, [r4, #0]
 8007e20:	1d19      	adds	r1, r3, #4
 8007e22:	6031      	str	r1, [r6, #0]
 8007e24:	0606      	lsls	r6, r0, #24
 8007e26:	d501      	bpl.n	8007e2c <_printf_i+0xbc>
 8007e28:	681d      	ldr	r5, [r3, #0]
 8007e2a:	e003      	b.n	8007e34 <_printf_i+0xc4>
 8007e2c:	0645      	lsls	r5, r0, #25
 8007e2e:	d5fb      	bpl.n	8007e28 <_printf_i+0xb8>
 8007e30:	f9b3 5000 	ldrsh.w	r5, [r3]
 8007e34:	2d00      	cmp	r5, #0
 8007e36:	da03      	bge.n	8007e40 <_printf_i+0xd0>
 8007e38:	232d      	movs	r3, #45	@ 0x2d
 8007e3a:	426d      	negs	r5, r5
 8007e3c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007e40:	4858      	ldr	r0, [pc, #352]	@ (8007fa4 <_printf_i+0x234>)
 8007e42:	230a      	movs	r3, #10
 8007e44:	e011      	b.n	8007e6a <_printf_i+0xfa>
 8007e46:	6821      	ldr	r1, [r4, #0]
 8007e48:	6833      	ldr	r3, [r6, #0]
 8007e4a:	0608      	lsls	r0, r1, #24
 8007e4c:	f853 5b04 	ldr.w	r5, [r3], #4
 8007e50:	d402      	bmi.n	8007e58 <_printf_i+0xe8>
 8007e52:	0649      	lsls	r1, r1, #25
 8007e54:	bf48      	it	mi
 8007e56:	b2ad      	uxthmi	r5, r5
 8007e58:	2f6f      	cmp	r7, #111	@ 0x6f
 8007e5a:	4852      	ldr	r0, [pc, #328]	@ (8007fa4 <_printf_i+0x234>)
 8007e5c:	6033      	str	r3, [r6, #0]
 8007e5e:	bf14      	ite	ne
 8007e60:	230a      	movne	r3, #10
 8007e62:	2308      	moveq	r3, #8
 8007e64:	2100      	movs	r1, #0
 8007e66:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8007e6a:	6866      	ldr	r6, [r4, #4]
 8007e6c:	60a6      	str	r6, [r4, #8]
 8007e6e:	2e00      	cmp	r6, #0
 8007e70:	db05      	blt.n	8007e7e <_printf_i+0x10e>
 8007e72:	6821      	ldr	r1, [r4, #0]
 8007e74:	432e      	orrs	r6, r5
 8007e76:	f021 0104 	bic.w	r1, r1, #4
 8007e7a:	6021      	str	r1, [r4, #0]
 8007e7c:	d04b      	beq.n	8007f16 <_printf_i+0x1a6>
 8007e7e:	4616      	mov	r6, r2
 8007e80:	fbb5 f1f3 	udiv	r1, r5, r3
 8007e84:	fb03 5711 	mls	r7, r3, r1, r5
 8007e88:	5dc7      	ldrb	r7, [r0, r7]
 8007e8a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8007e8e:	462f      	mov	r7, r5
 8007e90:	42bb      	cmp	r3, r7
 8007e92:	460d      	mov	r5, r1
 8007e94:	d9f4      	bls.n	8007e80 <_printf_i+0x110>
 8007e96:	2b08      	cmp	r3, #8
 8007e98:	d10b      	bne.n	8007eb2 <_printf_i+0x142>
 8007e9a:	6823      	ldr	r3, [r4, #0]
 8007e9c:	07df      	lsls	r7, r3, #31
 8007e9e:	d508      	bpl.n	8007eb2 <_printf_i+0x142>
 8007ea0:	6923      	ldr	r3, [r4, #16]
 8007ea2:	6861      	ldr	r1, [r4, #4]
 8007ea4:	4299      	cmp	r1, r3
 8007ea6:	bfde      	ittt	le
 8007ea8:	2330      	movle	r3, #48	@ 0x30
 8007eaa:	f806 3c01 	strble.w	r3, [r6, #-1]
 8007eae:	f106 36ff 	addle.w	r6, r6, #4294967295
 8007eb2:	1b92      	subs	r2, r2, r6
 8007eb4:	6122      	str	r2, [r4, #16]
 8007eb6:	f8cd a000 	str.w	sl, [sp]
 8007eba:	464b      	mov	r3, r9
 8007ebc:	aa03      	add	r2, sp, #12
 8007ebe:	4621      	mov	r1, r4
 8007ec0:	4640      	mov	r0, r8
 8007ec2:	f7ff fee7 	bl	8007c94 <_printf_common>
 8007ec6:	3001      	adds	r0, #1
 8007ec8:	d14a      	bne.n	8007f60 <_printf_i+0x1f0>
 8007eca:	f04f 30ff 	mov.w	r0, #4294967295
 8007ece:	b004      	add	sp, #16
 8007ed0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007ed4:	6823      	ldr	r3, [r4, #0]
 8007ed6:	f043 0320 	orr.w	r3, r3, #32
 8007eda:	6023      	str	r3, [r4, #0]
 8007edc:	4832      	ldr	r0, [pc, #200]	@ (8007fa8 <_printf_i+0x238>)
 8007ede:	2778      	movs	r7, #120	@ 0x78
 8007ee0:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8007ee4:	6823      	ldr	r3, [r4, #0]
 8007ee6:	6831      	ldr	r1, [r6, #0]
 8007ee8:	061f      	lsls	r7, r3, #24
 8007eea:	f851 5b04 	ldr.w	r5, [r1], #4
 8007eee:	d402      	bmi.n	8007ef6 <_printf_i+0x186>
 8007ef0:	065f      	lsls	r7, r3, #25
 8007ef2:	bf48      	it	mi
 8007ef4:	b2ad      	uxthmi	r5, r5
 8007ef6:	6031      	str	r1, [r6, #0]
 8007ef8:	07d9      	lsls	r1, r3, #31
 8007efa:	bf44      	itt	mi
 8007efc:	f043 0320 	orrmi.w	r3, r3, #32
 8007f00:	6023      	strmi	r3, [r4, #0]
 8007f02:	b11d      	cbz	r5, 8007f0c <_printf_i+0x19c>
 8007f04:	2310      	movs	r3, #16
 8007f06:	e7ad      	b.n	8007e64 <_printf_i+0xf4>
 8007f08:	4826      	ldr	r0, [pc, #152]	@ (8007fa4 <_printf_i+0x234>)
 8007f0a:	e7e9      	b.n	8007ee0 <_printf_i+0x170>
 8007f0c:	6823      	ldr	r3, [r4, #0]
 8007f0e:	f023 0320 	bic.w	r3, r3, #32
 8007f12:	6023      	str	r3, [r4, #0]
 8007f14:	e7f6      	b.n	8007f04 <_printf_i+0x194>
 8007f16:	4616      	mov	r6, r2
 8007f18:	e7bd      	b.n	8007e96 <_printf_i+0x126>
 8007f1a:	6833      	ldr	r3, [r6, #0]
 8007f1c:	6825      	ldr	r5, [r4, #0]
 8007f1e:	6961      	ldr	r1, [r4, #20]
 8007f20:	1d18      	adds	r0, r3, #4
 8007f22:	6030      	str	r0, [r6, #0]
 8007f24:	062e      	lsls	r6, r5, #24
 8007f26:	681b      	ldr	r3, [r3, #0]
 8007f28:	d501      	bpl.n	8007f2e <_printf_i+0x1be>
 8007f2a:	6019      	str	r1, [r3, #0]
 8007f2c:	e002      	b.n	8007f34 <_printf_i+0x1c4>
 8007f2e:	0668      	lsls	r0, r5, #25
 8007f30:	d5fb      	bpl.n	8007f2a <_printf_i+0x1ba>
 8007f32:	8019      	strh	r1, [r3, #0]
 8007f34:	2300      	movs	r3, #0
 8007f36:	6123      	str	r3, [r4, #16]
 8007f38:	4616      	mov	r6, r2
 8007f3a:	e7bc      	b.n	8007eb6 <_printf_i+0x146>
 8007f3c:	6833      	ldr	r3, [r6, #0]
 8007f3e:	1d1a      	adds	r2, r3, #4
 8007f40:	6032      	str	r2, [r6, #0]
 8007f42:	681e      	ldr	r6, [r3, #0]
 8007f44:	6862      	ldr	r2, [r4, #4]
 8007f46:	2100      	movs	r1, #0
 8007f48:	4630      	mov	r0, r6
 8007f4a:	f7f8 f9c9 	bl	80002e0 <memchr>
 8007f4e:	b108      	cbz	r0, 8007f54 <_printf_i+0x1e4>
 8007f50:	1b80      	subs	r0, r0, r6
 8007f52:	6060      	str	r0, [r4, #4]
 8007f54:	6863      	ldr	r3, [r4, #4]
 8007f56:	6123      	str	r3, [r4, #16]
 8007f58:	2300      	movs	r3, #0
 8007f5a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007f5e:	e7aa      	b.n	8007eb6 <_printf_i+0x146>
 8007f60:	6923      	ldr	r3, [r4, #16]
 8007f62:	4632      	mov	r2, r6
 8007f64:	4649      	mov	r1, r9
 8007f66:	4640      	mov	r0, r8
 8007f68:	47d0      	blx	sl
 8007f6a:	3001      	adds	r0, #1
 8007f6c:	d0ad      	beq.n	8007eca <_printf_i+0x15a>
 8007f6e:	6823      	ldr	r3, [r4, #0]
 8007f70:	079b      	lsls	r3, r3, #30
 8007f72:	d413      	bmi.n	8007f9c <_printf_i+0x22c>
 8007f74:	68e0      	ldr	r0, [r4, #12]
 8007f76:	9b03      	ldr	r3, [sp, #12]
 8007f78:	4298      	cmp	r0, r3
 8007f7a:	bfb8      	it	lt
 8007f7c:	4618      	movlt	r0, r3
 8007f7e:	e7a6      	b.n	8007ece <_printf_i+0x15e>
 8007f80:	2301      	movs	r3, #1
 8007f82:	4632      	mov	r2, r6
 8007f84:	4649      	mov	r1, r9
 8007f86:	4640      	mov	r0, r8
 8007f88:	47d0      	blx	sl
 8007f8a:	3001      	adds	r0, #1
 8007f8c:	d09d      	beq.n	8007eca <_printf_i+0x15a>
 8007f8e:	3501      	adds	r5, #1
 8007f90:	68e3      	ldr	r3, [r4, #12]
 8007f92:	9903      	ldr	r1, [sp, #12]
 8007f94:	1a5b      	subs	r3, r3, r1
 8007f96:	42ab      	cmp	r3, r5
 8007f98:	dcf2      	bgt.n	8007f80 <_printf_i+0x210>
 8007f9a:	e7eb      	b.n	8007f74 <_printf_i+0x204>
 8007f9c:	2500      	movs	r5, #0
 8007f9e:	f104 0619 	add.w	r6, r4, #25
 8007fa2:	e7f5      	b.n	8007f90 <_printf_i+0x220>
 8007fa4:	0800a2ee 	.word	0x0800a2ee
 8007fa8:	0800a2ff 	.word	0x0800a2ff

08007fac <std>:
 8007fac:	2300      	movs	r3, #0
 8007fae:	b510      	push	{r4, lr}
 8007fb0:	4604      	mov	r4, r0
 8007fb2:	e9c0 3300 	strd	r3, r3, [r0]
 8007fb6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007fba:	6083      	str	r3, [r0, #8]
 8007fbc:	8181      	strh	r1, [r0, #12]
 8007fbe:	6643      	str	r3, [r0, #100]	@ 0x64
 8007fc0:	81c2      	strh	r2, [r0, #14]
 8007fc2:	6183      	str	r3, [r0, #24]
 8007fc4:	4619      	mov	r1, r3
 8007fc6:	2208      	movs	r2, #8
 8007fc8:	305c      	adds	r0, #92	@ 0x5c
 8007fca:	f000 faad 	bl	8008528 <memset>
 8007fce:	4b0d      	ldr	r3, [pc, #52]	@ (8008004 <std+0x58>)
 8007fd0:	6263      	str	r3, [r4, #36]	@ 0x24
 8007fd2:	4b0d      	ldr	r3, [pc, #52]	@ (8008008 <std+0x5c>)
 8007fd4:	62a3      	str	r3, [r4, #40]	@ 0x28
 8007fd6:	4b0d      	ldr	r3, [pc, #52]	@ (800800c <std+0x60>)
 8007fd8:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8007fda:	4b0d      	ldr	r3, [pc, #52]	@ (8008010 <std+0x64>)
 8007fdc:	6323      	str	r3, [r4, #48]	@ 0x30
 8007fde:	4b0d      	ldr	r3, [pc, #52]	@ (8008014 <std+0x68>)
 8007fe0:	6224      	str	r4, [r4, #32]
 8007fe2:	429c      	cmp	r4, r3
 8007fe4:	d006      	beq.n	8007ff4 <std+0x48>
 8007fe6:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8007fea:	4294      	cmp	r4, r2
 8007fec:	d002      	beq.n	8007ff4 <std+0x48>
 8007fee:	33d0      	adds	r3, #208	@ 0xd0
 8007ff0:	429c      	cmp	r4, r3
 8007ff2:	d105      	bne.n	8008000 <std+0x54>
 8007ff4:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8007ff8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007ffc:	f000 bb10 	b.w	8008620 <__retarget_lock_init_recursive>
 8008000:	bd10      	pop	{r4, pc}
 8008002:	bf00      	nop
 8008004:	08008379 	.word	0x08008379
 8008008:	0800839b 	.word	0x0800839b
 800800c:	080083d3 	.word	0x080083d3
 8008010:	080083f7 	.word	0x080083f7
 8008014:	24000438 	.word	0x24000438

08008018 <stdio_exit_handler>:
 8008018:	4a02      	ldr	r2, [pc, #8]	@ (8008024 <stdio_exit_handler+0xc>)
 800801a:	4903      	ldr	r1, [pc, #12]	@ (8008028 <stdio_exit_handler+0x10>)
 800801c:	4803      	ldr	r0, [pc, #12]	@ (800802c <stdio_exit_handler+0x14>)
 800801e:	f000 b869 	b.w	80080f4 <_fwalk_sglue>
 8008022:	bf00      	nop
 8008024:	24000010 	.word	0x24000010
 8008028:	08009e75 	.word	0x08009e75
 800802c:	24000020 	.word	0x24000020

08008030 <cleanup_stdio>:
 8008030:	6841      	ldr	r1, [r0, #4]
 8008032:	4b0c      	ldr	r3, [pc, #48]	@ (8008064 <cleanup_stdio+0x34>)
 8008034:	4299      	cmp	r1, r3
 8008036:	b510      	push	{r4, lr}
 8008038:	4604      	mov	r4, r0
 800803a:	d001      	beq.n	8008040 <cleanup_stdio+0x10>
 800803c:	f001 ff1a 	bl	8009e74 <_fflush_r>
 8008040:	68a1      	ldr	r1, [r4, #8]
 8008042:	4b09      	ldr	r3, [pc, #36]	@ (8008068 <cleanup_stdio+0x38>)
 8008044:	4299      	cmp	r1, r3
 8008046:	d002      	beq.n	800804e <cleanup_stdio+0x1e>
 8008048:	4620      	mov	r0, r4
 800804a:	f001 ff13 	bl	8009e74 <_fflush_r>
 800804e:	68e1      	ldr	r1, [r4, #12]
 8008050:	4b06      	ldr	r3, [pc, #24]	@ (800806c <cleanup_stdio+0x3c>)
 8008052:	4299      	cmp	r1, r3
 8008054:	d004      	beq.n	8008060 <cleanup_stdio+0x30>
 8008056:	4620      	mov	r0, r4
 8008058:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800805c:	f001 bf0a 	b.w	8009e74 <_fflush_r>
 8008060:	bd10      	pop	{r4, pc}
 8008062:	bf00      	nop
 8008064:	24000438 	.word	0x24000438
 8008068:	240004a0 	.word	0x240004a0
 800806c:	24000508 	.word	0x24000508

08008070 <global_stdio_init.part.0>:
 8008070:	b510      	push	{r4, lr}
 8008072:	4b0b      	ldr	r3, [pc, #44]	@ (80080a0 <global_stdio_init.part.0+0x30>)
 8008074:	4c0b      	ldr	r4, [pc, #44]	@ (80080a4 <global_stdio_init.part.0+0x34>)
 8008076:	4a0c      	ldr	r2, [pc, #48]	@ (80080a8 <global_stdio_init.part.0+0x38>)
 8008078:	601a      	str	r2, [r3, #0]
 800807a:	4620      	mov	r0, r4
 800807c:	2200      	movs	r2, #0
 800807e:	2104      	movs	r1, #4
 8008080:	f7ff ff94 	bl	8007fac <std>
 8008084:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8008088:	2201      	movs	r2, #1
 800808a:	2109      	movs	r1, #9
 800808c:	f7ff ff8e 	bl	8007fac <std>
 8008090:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8008094:	2202      	movs	r2, #2
 8008096:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800809a:	2112      	movs	r1, #18
 800809c:	f7ff bf86 	b.w	8007fac <std>
 80080a0:	24000570 	.word	0x24000570
 80080a4:	24000438 	.word	0x24000438
 80080a8:	08008019 	.word	0x08008019

080080ac <__sfp_lock_acquire>:
 80080ac:	4801      	ldr	r0, [pc, #4]	@ (80080b4 <__sfp_lock_acquire+0x8>)
 80080ae:	f000 bab8 	b.w	8008622 <__retarget_lock_acquire_recursive>
 80080b2:	bf00      	nop
 80080b4:	24000579 	.word	0x24000579

080080b8 <__sfp_lock_release>:
 80080b8:	4801      	ldr	r0, [pc, #4]	@ (80080c0 <__sfp_lock_release+0x8>)
 80080ba:	f000 bab3 	b.w	8008624 <__retarget_lock_release_recursive>
 80080be:	bf00      	nop
 80080c0:	24000579 	.word	0x24000579

080080c4 <__sinit>:
 80080c4:	b510      	push	{r4, lr}
 80080c6:	4604      	mov	r4, r0
 80080c8:	f7ff fff0 	bl	80080ac <__sfp_lock_acquire>
 80080cc:	6a23      	ldr	r3, [r4, #32]
 80080ce:	b11b      	cbz	r3, 80080d8 <__sinit+0x14>
 80080d0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80080d4:	f7ff bff0 	b.w	80080b8 <__sfp_lock_release>
 80080d8:	4b04      	ldr	r3, [pc, #16]	@ (80080ec <__sinit+0x28>)
 80080da:	6223      	str	r3, [r4, #32]
 80080dc:	4b04      	ldr	r3, [pc, #16]	@ (80080f0 <__sinit+0x2c>)
 80080de:	681b      	ldr	r3, [r3, #0]
 80080e0:	2b00      	cmp	r3, #0
 80080e2:	d1f5      	bne.n	80080d0 <__sinit+0xc>
 80080e4:	f7ff ffc4 	bl	8008070 <global_stdio_init.part.0>
 80080e8:	e7f2      	b.n	80080d0 <__sinit+0xc>
 80080ea:	bf00      	nop
 80080ec:	08008031 	.word	0x08008031
 80080f0:	24000570 	.word	0x24000570

080080f4 <_fwalk_sglue>:
 80080f4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80080f8:	4607      	mov	r7, r0
 80080fa:	4688      	mov	r8, r1
 80080fc:	4614      	mov	r4, r2
 80080fe:	2600      	movs	r6, #0
 8008100:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008104:	f1b9 0901 	subs.w	r9, r9, #1
 8008108:	d505      	bpl.n	8008116 <_fwalk_sglue+0x22>
 800810a:	6824      	ldr	r4, [r4, #0]
 800810c:	2c00      	cmp	r4, #0
 800810e:	d1f7      	bne.n	8008100 <_fwalk_sglue+0xc>
 8008110:	4630      	mov	r0, r6
 8008112:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008116:	89ab      	ldrh	r3, [r5, #12]
 8008118:	2b01      	cmp	r3, #1
 800811a:	d907      	bls.n	800812c <_fwalk_sglue+0x38>
 800811c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008120:	3301      	adds	r3, #1
 8008122:	d003      	beq.n	800812c <_fwalk_sglue+0x38>
 8008124:	4629      	mov	r1, r5
 8008126:	4638      	mov	r0, r7
 8008128:	47c0      	blx	r8
 800812a:	4306      	orrs	r6, r0
 800812c:	3568      	adds	r5, #104	@ 0x68
 800812e:	e7e9      	b.n	8008104 <_fwalk_sglue+0x10>

08008130 <iprintf>:
 8008130:	b40f      	push	{r0, r1, r2, r3}
 8008132:	b507      	push	{r0, r1, r2, lr}
 8008134:	4906      	ldr	r1, [pc, #24]	@ (8008150 <iprintf+0x20>)
 8008136:	ab04      	add	r3, sp, #16
 8008138:	6808      	ldr	r0, [r1, #0]
 800813a:	f853 2b04 	ldr.w	r2, [r3], #4
 800813e:	6881      	ldr	r1, [r0, #8]
 8008140:	9301      	str	r3, [sp, #4]
 8008142:	f001 fcfb 	bl	8009b3c <_vfiprintf_r>
 8008146:	b003      	add	sp, #12
 8008148:	f85d eb04 	ldr.w	lr, [sp], #4
 800814c:	b004      	add	sp, #16
 800814e:	4770      	bx	lr
 8008150:	2400001c 	.word	0x2400001c

08008154 <_puts_r>:
 8008154:	6a03      	ldr	r3, [r0, #32]
 8008156:	b570      	push	{r4, r5, r6, lr}
 8008158:	6884      	ldr	r4, [r0, #8]
 800815a:	4605      	mov	r5, r0
 800815c:	460e      	mov	r6, r1
 800815e:	b90b      	cbnz	r3, 8008164 <_puts_r+0x10>
 8008160:	f7ff ffb0 	bl	80080c4 <__sinit>
 8008164:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8008166:	07db      	lsls	r3, r3, #31
 8008168:	d405      	bmi.n	8008176 <_puts_r+0x22>
 800816a:	89a3      	ldrh	r3, [r4, #12]
 800816c:	0598      	lsls	r0, r3, #22
 800816e:	d402      	bmi.n	8008176 <_puts_r+0x22>
 8008170:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008172:	f000 fa56 	bl	8008622 <__retarget_lock_acquire_recursive>
 8008176:	89a3      	ldrh	r3, [r4, #12]
 8008178:	0719      	lsls	r1, r3, #28
 800817a:	d502      	bpl.n	8008182 <_puts_r+0x2e>
 800817c:	6923      	ldr	r3, [r4, #16]
 800817e:	2b00      	cmp	r3, #0
 8008180:	d135      	bne.n	80081ee <_puts_r+0x9a>
 8008182:	4621      	mov	r1, r4
 8008184:	4628      	mov	r0, r5
 8008186:	f000 f979 	bl	800847c <__swsetup_r>
 800818a:	b380      	cbz	r0, 80081ee <_puts_r+0x9a>
 800818c:	f04f 35ff 	mov.w	r5, #4294967295
 8008190:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8008192:	07da      	lsls	r2, r3, #31
 8008194:	d405      	bmi.n	80081a2 <_puts_r+0x4e>
 8008196:	89a3      	ldrh	r3, [r4, #12]
 8008198:	059b      	lsls	r3, r3, #22
 800819a:	d402      	bmi.n	80081a2 <_puts_r+0x4e>
 800819c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800819e:	f000 fa41 	bl	8008624 <__retarget_lock_release_recursive>
 80081a2:	4628      	mov	r0, r5
 80081a4:	bd70      	pop	{r4, r5, r6, pc}
 80081a6:	2b00      	cmp	r3, #0
 80081a8:	da04      	bge.n	80081b4 <_puts_r+0x60>
 80081aa:	69a2      	ldr	r2, [r4, #24]
 80081ac:	429a      	cmp	r2, r3
 80081ae:	dc17      	bgt.n	80081e0 <_puts_r+0x8c>
 80081b0:	290a      	cmp	r1, #10
 80081b2:	d015      	beq.n	80081e0 <_puts_r+0x8c>
 80081b4:	6823      	ldr	r3, [r4, #0]
 80081b6:	1c5a      	adds	r2, r3, #1
 80081b8:	6022      	str	r2, [r4, #0]
 80081ba:	7019      	strb	r1, [r3, #0]
 80081bc:	68a3      	ldr	r3, [r4, #8]
 80081be:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80081c2:	3b01      	subs	r3, #1
 80081c4:	60a3      	str	r3, [r4, #8]
 80081c6:	2900      	cmp	r1, #0
 80081c8:	d1ed      	bne.n	80081a6 <_puts_r+0x52>
 80081ca:	2b00      	cmp	r3, #0
 80081cc:	da11      	bge.n	80081f2 <_puts_r+0x9e>
 80081ce:	4622      	mov	r2, r4
 80081d0:	210a      	movs	r1, #10
 80081d2:	4628      	mov	r0, r5
 80081d4:	f000 f913 	bl	80083fe <__swbuf_r>
 80081d8:	3001      	adds	r0, #1
 80081da:	d0d7      	beq.n	800818c <_puts_r+0x38>
 80081dc:	250a      	movs	r5, #10
 80081de:	e7d7      	b.n	8008190 <_puts_r+0x3c>
 80081e0:	4622      	mov	r2, r4
 80081e2:	4628      	mov	r0, r5
 80081e4:	f000 f90b 	bl	80083fe <__swbuf_r>
 80081e8:	3001      	adds	r0, #1
 80081ea:	d1e7      	bne.n	80081bc <_puts_r+0x68>
 80081ec:	e7ce      	b.n	800818c <_puts_r+0x38>
 80081ee:	3e01      	subs	r6, #1
 80081f0:	e7e4      	b.n	80081bc <_puts_r+0x68>
 80081f2:	6823      	ldr	r3, [r4, #0]
 80081f4:	1c5a      	adds	r2, r3, #1
 80081f6:	6022      	str	r2, [r4, #0]
 80081f8:	220a      	movs	r2, #10
 80081fa:	701a      	strb	r2, [r3, #0]
 80081fc:	e7ee      	b.n	80081dc <_puts_r+0x88>
	...

08008200 <puts>:
 8008200:	4b02      	ldr	r3, [pc, #8]	@ (800820c <puts+0xc>)
 8008202:	4601      	mov	r1, r0
 8008204:	6818      	ldr	r0, [r3, #0]
 8008206:	f7ff bfa5 	b.w	8008154 <_puts_r>
 800820a:	bf00      	nop
 800820c:	2400001c 	.word	0x2400001c

08008210 <setvbuf>:
 8008210:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8008214:	461d      	mov	r5, r3
 8008216:	4b57      	ldr	r3, [pc, #348]	@ (8008374 <setvbuf+0x164>)
 8008218:	681f      	ldr	r7, [r3, #0]
 800821a:	4604      	mov	r4, r0
 800821c:	460e      	mov	r6, r1
 800821e:	4690      	mov	r8, r2
 8008220:	b127      	cbz	r7, 800822c <setvbuf+0x1c>
 8008222:	6a3b      	ldr	r3, [r7, #32]
 8008224:	b913      	cbnz	r3, 800822c <setvbuf+0x1c>
 8008226:	4638      	mov	r0, r7
 8008228:	f7ff ff4c 	bl	80080c4 <__sinit>
 800822c:	f1b8 0f02 	cmp.w	r8, #2
 8008230:	d006      	beq.n	8008240 <setvbuf+0x30>
 8008232:	f1b8 0f01 	cmp.w	r8, #1
 8008236:	f200 809a 	bhi.w	800836e <setvbuf+0x15e>
 800823a:	2d00      	cmp	r5, #0
 800823c:	f2c0 8097 	blt.w	800836e <setvbuf+0x15e>
 8008240:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8008242:	07d9      	lsls	r1, r3, #31
 8008244:	d405      	bmi.n	8008252 <setvbuf+0x42>
 8008246:	89a3      	ldrh	r3, [r4, #12]
 8008248:	059a      	lsls	r2, r3, #22
 800824a:	d402      	bmi.n	8008252 <setvbuf+0x42>
 800824c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800824e:	f000 f9e8 	bl	8008622 <__retarget_lock_acquire_recursive>
 8008252:	4621      	mov	r1, r4
 8008254:	4638      	mov	r0, r7
 8008256:	f001 fe0d 	bl	8009e74 <_fflush_r>
 800825a:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800825c:	b141      	cbz	r1, 8008270 <setvbuf+0x60>
 800825e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8008262:	4299      	cmp	r1, r3
 8008264:	d002      	beq.n	800826c <setvbuf+0x5c>
 8008266:	4638      	mov	r0, r7
 8008268:	f000 ffc4 	bl	80091f4 <_free_r>
 800826c:	2300      	movs	r3, #0
 800826e:	6363      	str	r3, [r4, #52]	@ 0x34
 8008270:	2300      	movs	r3, #0
 8008272:	61a3      	str	r3, [r4, #24]
 8008274:	6063      	str	r3, [r4, #4]
 8008276:	89a3      	ldrh	r3, [r4, #12]
 8008278:	061b      	lsls	r3, r3, #24
 800827a:	d503      	bpl.n	8008284 <setvbuf+0x74>
 800827c:	6921      	ldr	r1, [r4, #16]
 800827e:	4638      	mov	r0, r7
 8008280:	f000 ffb8 	bl	80091f4 <_free_r>
 8008284:	89a3      	ldrh	r3, [r4, #12]
 8008286:	f423 634a 	bic.w	r3, r3, #3232	@ 0xca0
 800828a:	f023 0303 	bic.w	r3, r3, #3
 800828e:	f1b8 0f02 	cmp.w	r8, #2
 8008292:	81a3      	strh	r3, [r4, #12]
 8008294:	d061      	beq.n	800835a <setvbuf+0x14a>
 8008296:	ab01      	add	r3, sp, #4
 8008298:	466a      	mov	r2, sp
 800829a:	4621      	mov	r1, r4
 800829c:	4638      	mov	r0, r7
 800829e:	f001 fe11 	bl	8009ec4 <__swhatbuf_r>
 80082a2:	89a3      	ldrh	r3, [r4, #12]
 80082a4:	4318      	orrs	r0, r3
 80082a6:	81a0      	strh	r0, [r4, #12]
 80082a8:	bb2d      	cbnz	r5, 80082f6 <setvbuf+0xe6>
 80082aa:	9d00      	ldr	r5, [sp, #0]
 80082ac:	4628      	mov	r0, r5
 80082ae:	f000 ffeb 	bl	8009288 <malloc>
 80082b2:	4606      	mov	r6, r0
 80082b4:	2800      	cmp	r0, #0
 80082b6:	d152      	bne.n	800835e <setvbuf+0x14e>
 80082b8:	f8dd 9000 	ldr.w	r9, [sp]
 80082bc:	45a9      	cmp	r9, r5
 80082be:	d140      	bne.n	8008342 <setvbuf+0x132>
 80082c0:	f04f 35ff 	mov.w	r5, #4294967295
 80082c4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80082c8:	f043 0202 	orr.w	r2, r3, #2
 80082cc:	81a2      	strh	r2, [r4, #12]
 80082ce:	2200      	movs	r2, #0
 80082d0:	60a2      	str	r2, [r4, #8]
 80082d2:	f104 0247 	add.w	r2, r4, #71	@ 0x47
 80082d6:	6022      	str	r2, [r4, #0]
 80082d8:	6122      	str	r2, [r4, #16]
 80082da:	2201      	movs	r2, #1
 80082dc:	6162      	str	r2, [r4, #20]
 80082de:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80082e0:	07d6      	lsls	r6, r2, #31
 80082e2:	d404      	bmi.n	80082ee <setvbuf+0xde>
 80082e4:	0598      	lsls	r0, r3, #22
 80082e6:	d402      	bmi.n	80082ee <setvbuf+0xde>
 80082e8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80082ea:	f000 f99b 	bl	8008624 <__retarget_lock_release_recursive>
 80082ee:	4628      	mov	r0, r5
 80082f0:	b003      	add	sp, #12
 80082f2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80082f6:	2e00      	cmp	r6, #0
 80082f8:	d0d8      	beq.n	80082ac <setvbuf+0x9c>
 80082fa:	6a3b      	ldr	r3, [r7, #32]
 80082fc:	b913      	cbnz	r3, 8008304 <setvbuf+0xf4>
 80082fe:	4638      	mov	r0, r7
 8008300:	f7ff fee0 	bl	80080c4 <__sinit>
 8008304:	f1b8 0f01 	cmp.w	r8, #1
 8008308:	bf08      	it	eq
 800830a:	89a3      	ldrheq	r3, [r4, #12]
 800830c:	6026      	str	r6, [r4, #0]
 800830e:	bf04      	itt	eq
 8008310:	f043 0301 	orreq.w	r3, r3, #1
 8008314:	81a3      	strheq	r3, [r4, #12]
 8008316:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800831a:	f013 0208 	ands.w	r2, r3, #8
 800831e:	e9c4 6504 	strd	r6, r5, [r4, #16]
 8008322:	d01e      	beq.n	8008362 <setvbuf+0x152>
 8008324:	07d9      	lsls	r1, r3, #31
 8008326:	bf41      	itttt	mi
 8008328:	2200      	movmi	r2, #0
 800832a:	426d      	negmi	r5, r5
 800832c:	60a2      	strmi	r2, [r4, #8]
 800832e:	61a5      	strmi	r5, [r4, #24]
 8008330:	bf58      	it	pl
 8008332:	60a5      	strpl	r5, [r4, #8]
 8008334:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8008336:	07d2      	lsls	r2, r2, #31
 8008338:	d401      	bmi.n	800833e <setvbuf+0x12e>
 800833a:	059b      	lsls	r3, r3, #22
 800833c:	d513      	bpl.n	8008366 <setvbuf+0x156>
 800833e:	2500      	movs	r5, #0
 8008340:	e7d5      	b.n	80082ee <setvbuf+0xde>
 8008342:	4648      	mov	r0, r9
 8008344:	f000 ffa0 	bl	8009288 <malloc>
 8008348:	4606      	mov	r6, r0
 800834a:	2800      	cmp	r0, #0
 800834c:	d0b8      	beq.n	80082c0 <setvbuf+0xb0>
 800834e:	89a3      	ldrh	r3, [r4, #12]
 8008350:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008354:	81a3      	strh	r3, [r4, #12]
 8008356:	464d      	mov	r5, r9
 8008358:	e7cf      	b.n	80082fa <setvbuf+0xea>
 800835a:	2500      	movs	r5, #0
 800835c:	e7b2      	b.n	80082c4 <setvbuf+0xb4>
 800835e:	46a9      	mov	r9, r5
 8008360:	e7f5      	b.n	800834e <setvbuf+0x13e>
 8008362:	60a2      	str	r2, [r4, #8]
 8008364:	e7e6      	b.n	8008334 <setvbuf+0x124>
 8008366:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008368:	f000 f95c 	bl	8008624 <__retarget_lock_release_recursive>
 800836c:	e7e7      	b.n	800833e <setvbuf+0x12e>
 800836e:	f04f 35ff 	mov.w	r5, #4294967295
 8008372:	e7bc      	b.n	80082ee <setvbuf+0xde>
 8008374:	2400001c 	.word	0x2400001c

08008378 <__sread>:
 8008378:	b510      	push	{r4, lr}
 800837a:	460c      	mov	r4, r1
 800837c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008380:	f000 f900 	bl	8008584 <_read_r>
 8008384:	2800      	cmp	r0, #0
 8008386:	bfab      	itete	ge
 8008388:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800838a:	89a3      	ldrhlt	r3, [r4, #12]
 800838c:	181b      	addge	r3, r3, r0
 800838e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8008392:	bfac      	ite	ge
 8008394:	6563      	strge	r3, [r4, #84]	@ 0x54
 8008396:	81a3      	strhlt	r3, [r4, #12]
 8008398:	bd10      	pop	{r4, pc}

0800839a <__swrite>:
 800839a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800839e:	461f      	mov	r7, r3
 80083a0:	898b      	ldrh	r3, [r1, #12]
 80083a2:	05db      	lsls	r3, r3, #23
 80083a4:	4605      	mov	r5, r0
 80083a6:	460c      	mov	r4, r1
 80083a8:	4616      	mov	r6, r2
 80083aa:	d505      	bpl.n	80083b8 <__swrite+0x1e>
 80083ac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80083b0:	2302      	movs	r3, #2
 80083b2:	2200      	movs	r2, #0
 80083b4:	f000 f8d4 	bl	8008560 <_lseek_r>
 80083b8:	89a3      	ldrh	r3, [r4, #12]
 80083ba:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80083be:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80083c2:	81a3      	strh	r3, [r4, #12]
 80083c4:	4632      	mov	r2, r6
 80083c6:	463b      	mov	r3, r7
 80083c8:	4628      	mov	r0, r5
 80083ca:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80083ce:	f000 b8eb 	b.w	80085a8 <_write_r>

080083d2 <__sseek>:
 80083d2:	b510      	push	{r4, lr}
 80083d4:	460c      	mov	r4, r1
 80083d6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80083da:	f000 f8c1 	bl	8008560 <_lseek_r>
 80083de:	1c43      	adds	r3, r0, #1
 80083e0:	89a3      	ldrh	r3, [r4, #12]
 80083e2:	bf15      	itete	ne
 80083e4:	6560      	strne	r0, [r4, #84]	@ 0x54
 80083e6:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80083ea:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80083ee:	81a3      	strheq	r3, [r4, #12]
 80083f0:	bf18      	it	ne
 80083f2:	81a3      	strhne	r3, [r4, #12]
 80083f4:	bd10      	pop	{r4, pc}

080083f6 <__sclose>:
 80083f6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80083fa:	f000 b8a1 	b.w	8008540 <_close_r>

080083fe <__swbuf_r>:
 80083fe:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008400:	460e      	mov	r6, r1
 8008402:	4614      	mov	r4, r2
 8008404:	4605      	mov	r5, r0
 8008406:	b118      	cbz	r0, 8008410 <__swbuf_r+0x12>
 8008408:	6a03      	ldr	r3, [r0, #32]
 800840a:	b90b      	cbnz	r3, 8008410 <__swbuf_r+0x12>
 800840c:	f7ff fe5a 	bl	80080c4 <__sinit>
 8008410:	69a3      	ldr	r3, [r4, #24]
 8008412:	60a3      	str	r3, [r4, #8]
 8008414:	89a3      	ldrh	r3, [r4, #12]
 8008416:	071a      	lsls	r2, r3, #28
 8008418:	d501      	bpl.n	800841e <__swbuf_r+0x20>
 800841a:	6923      	ldr	r3, [r4, #16]
 800841c:	b943      	cbnz	r3, 8008430 <__swbuf_r+0x32>
 800841e:	4621      	mov	r1, r4
 8008420:	4628      	mov	r0, r5
 8008422:	f000 f82b 	bl	800847c <__swsetup_r>
 8008426:	b118      	cbz	r0, 8008430 <__swbuf_r+0x32>
 8008428:	f04f 37ff 	mov.w	r7, #4294967295
 800842c:	4638      	mov	r0, r7
 800842e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008430:	6823      	ldr	r3, [r4, #0]
 8008432:	6922      	ldr	r2, [r4, #16]
 8008434:	1a98      	subs	r0, r3, r2
 8008436:	6963      	ldr	r3, [r4, #20]
 8008438:	b2f6      	uxtb	r6, r6
 800843a:	4283      	cmp	r3, r0
 800843c:	4637      	mov	r7, r6
 800843e:	dc05      	bgt.n	800844c <__swbuf_r+0x4e>
 8008440:	4621      	mov	r1, r4
 8008442:	4628      	mov	r0, r5
 8008444:	f001 fd16 	bl	8009e74 <_fflush_r>
 8008448:	2800      	cmp	r0, #0
 800844a:	d1ed      	bne.n	8008428 <__swbuf_r+0x2a>
 800844c:	68a3      	ldr	r3, [r4, #8]
 800844e:	3b01      	subs	r3, #1
 8008450:	60a3      	str	r3, [r4, #8]
 8008452:	6823      	ldr	r3, [r4, #0]
 8008454:	1c5a      	adds	r2, r3, #1
 8008456:	6022      	str	r2, [r4, #0]
 8008458:	701e      	strb	r6, [r3, #0]
 800845a:	6962      	ldr	r2, [r4, #20]
 800845c:	1c43      	adds	r3, r0, #1
 800845e:	429a      	cmp	r2, r3
 8008460:	d004      	beq.n	800846c <__swbuf_r+0x6e>
 8008462:	89a3      	ldrh	r3, [r4, #12]
 8008464:	07db      	lsls	r3, r3, #31
 8008466:	d5e1      	bpl.n	800842c <__swbuf_r+0x2e>
 8008468:	2e0a      	cmp	r6, #10
 800846a:	d1df      	bne.n	800842c <__swbuf_r+0x2e>
 800846c:	4621      	mov	r1, r4
 800846e:	4628      	mov	r0, r5
 8008470:	f001 fd00 	bl	8009e74 <_fflush_r>
 8008474:	2800      	cmp	r0, #0
 8008476:	d0d9      	beq.n	800842c <__swbuf_r+0x2e>
 8008478:	e7d6      	b.n	8008428 <__swbuf_r+0x2a>
	...

0800847c <__swsetup_r>:
 800847c:	b538      	push	{r3, r4, r5, lr}
 800847e:	4b29      	ldr	r3, [pc, #164]	@ (8008524 <__swsetup_r+0xa8>)
 8008480:	4605      	mov	r5, r0
 8008482:	6818      	ldr	r0, [r3, #0]
 8008484:	460c      	mov	r4, r1
 8008486:	b118      	cbz	r0, 8008490 <__swsetup_r+0x14>
 8008488:	6a03      	ldr	r3, [r0, #32]
 800848a:	b90b      	cbnz	r3, 8008490 <__swsetup_r+0x14>
 800848c:	f7ff fe1a 	bl	80080c4 <__sinit>
 8008490:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008494:	0719      	lsls	r1, r3, #28
 8008496:	d422      	bmi.n	80084de <__swsetup_r+0x62>
 8008498:	06da      	lsls	r2, r3, #27
 800849a:	d407      	bmi.n	80084ac <__swsetup_r+0x30>
 800849c:	2209      	movs	r2, #9
 800849e:	602a      	str	r2, [r5, #0]
 80084a0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80084a4:	81a3      	strh	r3, [r4, #12]
 80084a6:	f04f 30ff 	mov.w	r0, #4294967295
 80084aa:	e033      	b.n	8008514 <__swsetup_r+0x98>
 80084ac:	0758      	lsls	r0, r3, #29
 80084ae:	d512      	bpl.n	80084d6 <__swsetup_r+0x5a>
 80084b0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80084b2:	b141      	cbz	r1, 80084c6 <__swsetup_r+0x4a>
 80084b4:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80084b8:	4299      	cmp	r1, r3
 80084ba:	d002      	beq.n	80084c2 <__swsetup_r+0x46>
 80084bc:	4628      	mov	r0, r5
 80084be:	f000 fe99 	bl	80091f4 <_free_r>
 80084c2:	2300      	movs	r3, #0
 80084c4:	6363      	str	r3, [r4, #52]	@ 0x34
 80084c6:	89a3      	ldrh	r3, [r4, #12]
 80084c8:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80084cc:	81a3      	strh	r3, [r4, #12]
 80084ce:	2300      	movs	r3, #0
 80084d0:	6063      	str	r3, [r4, #4]
 80084d2:	6923      	ldr	r3, [r4, #16]
 80084d4:	6023      	str	r3, [r4, #0]
 80084d6:	89a3      	ldrh	r3, [r4, #12]
 80084d8:	f043 0308 	orr.w	r3, r3, #8
 80084dc:	81a3      	strh	r3, [r4, #12]
 80084de:	6923      	ldr	r3, [r4, #16]
 80084e0:	b94b      	cbnz	r3, 80084f6 <__swsetup_r+0x7a>
 80084e2:	89a3      	ldrh	r3, [r4, #12]
 80084e4:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80084e8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80084ec:	d003      	beq.n	80084f6 <__swsetup_r+0x7a>
 80084ee:	4621      	mov	r1, r4
 80084f0:	4628      	mov	r0, r5
 80084f2:	f001 fd0d 	bl	8009f10 <__smakebuf_r>
 80084f6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80084fa:	f013 0201 	ands.w	r2, r3, #1
 80084fe:	d00a      	beq.n	8008516 <__swsetup_r+0x9a>
 8008500:	2200      	movs	r2, #0
 8008502:	60a2      	str	r2, [r4, #8]
 8008504:	6962      	ldr	r2, [r4, #20]
 8008506:	4252      	negs	r2, r2
 8008508:	61a2      	str	r2, [r4, #24]
 800850a:	6922      	ldr	r2, [r4, #16]
 800850c:	b942      	cbnz	r2, 8008520 <__swsetup_r+0xa4>
 800850e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8008512:	d1c5      	bne.n	80084a0 <__swsetup_r+0x24>
 8008514:	bd38      	pop	{r3, r4, r5, pc}
 8008516:	0799      	lsls	r1, r3, #30
 8008518:	bf58      	it	pl
 800851a:	6962      	ldrpl	r2, [r4, #20]
 800851c:	60a2      	str	r2, [r4, #8]
 800851e:	e7f4      	b.n	800850a <__swsetup_r+0x8e>
 8008520:	2000      	movs	r0, #0
 8008522:	e7f7      	b.n	8008514 <__swsetup_r+0x98>
 8008524:	2400001c 	.word	0x2400001c

08008528 <memset>:
 8008528:	4402      	add	r2, r0
 800852a:	4603      	mov	r3, r0
 800852c:	4293      	cmp	r3, r2
 800852e:	d100      	bne.n	8008532 <memset+0xa>
 8008530:	4770      	bx	lr
 8008532:	f803 1b01 	strb.w	r1, [r3], #1
 8008536:	e7f9      	b.n	800852c <memset+0x4>

08008538 <_localeconv_r>:
 8008538:	4800      	ldr	r0, [pc, #0]	@ (800853c <_localeconv_r+0x4>)
 800853a:	4770      	bx	lr
 800853c:	2400015c 	.word	0x2400015c

08008540 <_close_r>:
 8008540:	b538      	push	{r3, r4, r5, lr}
 8008542:	4d06      	ldr	r5, [pc, #24]	@ (800855c <_close_r+0x1c>)
 8008544:	2300      	movs	r3, #0
 8008546:	4604      	mov	r4, r0
 8008548:	4608      	mov	r0, r1
 800854a:	602b      	str	r3, [r5, #0]
 800854c:	f7f9 fd13 	bl	8001f76 <_close>
 8008550:	1c43      	adds	r3, r0, #1
 8008552:	d102      	bne.n	800855a <_close_r+0x1a>
 8008554:	682b      	ldr	r3, [r5, #0]
 8008556:	b103      	cbz	r3, 800855a <_close_r+0x1a>
 8008558:	6023      	str	r3, [r4, #0]
 800855a:	bd38      	pop	{r3, r4, r5, pc}
 800855c:	24000574 	.word	0x24000574

08008560 <_lseek_r>:
 8008560:	b538      	push	{r3, r4, r5, lr}
 8008562:	4d07      	ldr	r5, [pc, #28]	@ (8008580 <_lseek_r+0x20>)
 8008564:	4604      	mov	r4, r0
 8008566:	4608      	mov	r0, r1
 8008568:	4611      	mov	r1, r2
 800856a:	2200      	movs	r2, #0
 800856c:	602a      	str	r2, [r5, #0]
 800856e:	461a      	mov	r2, r3
 8008570:	f7f9 fd28 	bl	8001fc4 <_lseek>
 8008574:	1c43      	adds	r3, r0, #1
 8008576:	d102      	bne.n	800857e <_lseek_r+0x1e>
 8008578:	682b      	ldr	r3, [r5, #0]
 800857a:	b103      	cbz	r3, 800857e <_lseek_r+0x1e>
 800857c:	6023      	str	r3, [r4, #0]
 800857e:	bd38      	pop	{r3, r4, r5, pc}
 8008580:	24000574 	.word	0x24000574

08008584 <_read_r>:
 8008584:	b538      	push	{r3, r4, r5, lr}
 8008586:	4d07      	ldr	r5, [pc, #28]	@ (80085a4 <_read_r+0x20>)
 8008588:	4604      	mov	r4, r0
 800858a:	4608      	mov	r0, r1
 800858c:	4611      	mov	r1, r2
 800858e:	2200      	movs	r2, #0
 8008590:	602a      	str	r2, [r5, #0]
 8008592:	461a      	mov	r2, r3
 8008594:	f7f9 fcd2 	bl	8001f3c <_read>
 8008598:	1c43      	adds	r3, r0, #1
 800859a:	d102      	bne.n	80085a2 <_read_r+0x1e>
 800859c:	682b      	ldr	r3, [r5, #0]
 800859e:	b103      	cbz	r3, 80085a2 <_read_r+0x1e>
 80085a0:	6023      	str	r3, [r4, #0]
 80085a2:	bd38      	pop	{r3, r4, r5, pc}
 80085a4:	24000574 	.word	0x24000574

080085a8 <_write_r>:
 80085a8:	b538      	push	{r3, r4, r5, lr}
 80085aa:	4d07      	ldr	r5, [pc, #28]	@ (80085c8 <_write_r+0x20>)
 80085ac:	4604      	mov	r4, r0
 80085ae:	4608      	mov	r0, r1
 80085b0:	4611      	mov	r1, r2
 80085b2:	2200      	movs	r2, #0
 80085b4:	602a      	str	r2, [r5, #0]
 80085b6:	461a      	mov	r2, r3
 80085b8:	f7f9 faca 	bl	8001b50 <_write>
 80085bc:	1c43      	adds	r3, r0, #1
 80085be:	d102      	bne.n	80085c6 <_write_r+0x1e>
 80085c0:	682b      	ldr	r3, [r5, #0]
 80085c2:	b103      	cbz	r3, 80085c6 <_write_r+0x1e>
 80085c4:	6023      	str	r3, [r4, #0]
 80085c6:	bd38      	pop	{r3, r4, r5, pc}
 80085c8:	24000574 	.word	0x24000574

080085cc <__errno>:
 80085cc:	4b01      	ldr	r3, [pc, #4]	@ (80085d4 <__errno+0x8>)
 80085ce:	6818      	ldr	r0, [r3, #0]
 80085d0:	4770      	bx	lr
 80085d2:	bf00      	nop
 80085d4:	2400001c 	.word	0x2400001c

080085d8 <__libc_init_array>:
 80085d8:	b570      	push	{r4, r5, r6, lr}
 80085da:	4d0d      	ldr	r5, [pc, #52]	@ (8008610 <__libc_init_array+0x38>)
 80085dc:	4c0d      	ldr	r4, [pc, #52]	@ (8008614 <__libc_init_array+0x3c>)
 80085de:	1b64      	subs	r4, r4, r5
 80085e0:	10a4      	asrs	r4, r4, #2
 80085e2:	2600      	movs	r6, #0
 80085e4:	42a6      	cmp	r6, r4
 80085e6:	d109      	bne.n	80085fc <__libc_init_array+0x24>
 80085e8:	4d0b      	ldr	r5, [pc, #44]	@ (8008618 <__libc_init_array+0x40>)
 80085ea:	4c0c      	ldr	r4, [pc, #48]	@ (800861c <__libc_init_array+0x44>)
 80085ec:	f001 fdbc 	bl	800a168 <_init>
 80085f0:	1b64      	subs	r4, r4, r5
 80085f2:	10a4      	asrs	r4, r4, #2
 80085f4:	2600      	movs	r6, #0
 80085f6:	42a6      	cmp	r6, r4
 80085f8:	d105      	bne.n	8008606 <__libc_init_array+0x2e>
 80085fa:	bd70      	pop	{r4, r5, r6, pc}
 80085fc:	f855 3b04 	ldr.w	r3, [r5], #4
 8008600:	4798      	blx	r3
 8008602:	3601      	adds	r6, #1
 8008604:	e7ee      	b.n	80085e4 <__libc_init_array+0xc>
 8008606:	f855 3b04 	ldr.w	r3, [r5], #4
 800860a:	4798      	blx	r3
 800860c:	3601      	adds	r6, #1
 800860e:	e7f2      	b.n	80085f6 <__libc_init_array+0x1e>
 8008610:	0800a65c 	.word	0x0800a65c
 8008614:	0800a65c 	.word	0x0800a65c
 8008618:	0800a65c 	.word	0x0800a65c
 800861c:	0800a660 	.word	0x0800a660

08008620 <__retarget_lock_init_recursive>:
 8008620:	4770      	bx	lr

08008622 <__retarget_lock_acquire_recursive>:
 8008622:	4770      	bx	lr

08008624 <__retarget_lock_release_recursive>:
 8008624:	4770      	bx	lr

08008626 <quorem>:
 8008626:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800862a:	6903      	ldr	r3, [r0, #16]
 800862c:	690c      	ldr	r4, [r1, #16]
 800862e:	42a3      	cmp	r3, r4
 8008630:	4607      	mov	r7, r0
 8008632:	db7e      	blt.n	8008732 <quorem+0x10c>
 8008634:	3c01      	subs	r4, #1
 8008636:	f101 0814 	add.w	r8, r1, #20
 800863a:	00a3      	lsls	r3, r4, #2
 800863c:	f100 0514 	add.w	r5, r0, #20
 8008640:	9300      	str	r3, [sp, #0]
 8008642:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008646:	9301      	str	r3, [sp, #4]
 8008648:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800864c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008650:	3301      	adds	r3, #1
 8008652:	429a      	cmp	r2, r3
 8008654:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8008658:	fbb2 f6f3 	udiv	r6, r2, r3
 800865c:	d32e      	bcc.n	80086bc <quorem+0x96>
 800865e:	f04f 0a00 	mov.w	sl, #0
 8008662:	46c4      	mov	ip, r8
 8008664:	46ae      	mov	lr, r5
 8008666:	46d3      	mov	fp, sl
 8008668:	f85c 3b04 	ldr.w	r3, [ip], #4
 800866c:	b298      	uxth	r0, r3
 800866e:	fb06 a000 	mla	r0, r6, r0, sl
 8008672:	0c02      	lsrs	r2, r0, #16
 8008674:	0c1b      	lsrs	r3, r3, #16
 8008676:	fb06 2303 	mla	r3, r6, r3, r2
 800867a:	f8de 2000 	ldr.w	r2, [lr]
 800867e:	b280      	uxth	r0, r0
 8008680:	b292      	uxth	r2, r2
 8008682:	1a12      	subs	r2, r2, r0
 8008684:	445a      	add	r2, fp
 8008686:	f8de 0000 	ldr.w	r0, [lr]
 800868a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800868e:	b29b      	uxth	r3, r3
 8008690:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8008694:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8008698:	b292      	uxth	r2, r2
 800869a:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800869e:	45e1      	cmp	r9, ip
 80086a0:	f84e 2b04 	str.w	r2, [lr], #4
 80086a4:	ea4f 4b23 	mov.w	fp, r3, asr #16
 80086a8:	d2de      	bcs.n	8008668 <quorem+0x42>
 80086aa:	9b00      	ldr	r3, [sp, #0]
 80086ac:	58eb      	ldr	r3, [r5, r3]
 80086ae:	b92b      	cbnz	r3, 80086bc <quorem+0x96>
 80086b0:	9b01      	ldr	r3, [sp, #4]
 80086b2:	3b04      	subs	r3, #4
 80086b4:	429d      	cmp	r5, r3
 80086b6:	461a      	mov	r2, r3
 80086b8:	d32f      	bcc.n	800871a <quorem+0xf4>
 80086ba:	613c      	str	r4, [r7, #16]
 80086bc:	4638      	mov	r0, r7
 80086be:	f001 f90b 	bl	80098d8 <__mcmp>
 80086c2:	2800      	cmp	r0, #0
 80086c4:	db25      	blt.n	8008712 <quorem+0xec>
 80086c6:	4629      	mov	r1, r5
 80086c8:	2000      	movs	r0, #0
 80086ca:	f858 2b04 	ldr.w	r2, [r8], #4
 80086ce:	f8d1 c000 	ldr.w	ip, [r1]
 80086d2:	fa1f fe82 	uxth.w	lr, r2
 80086d6:	fa1f f38c 	uxth.w	r3, ip
 80086da:	eba3 030e 	sub.w	r3, r3, lr
 80086de:	4403      	add	r3, r0
 80086e0:	0c12      	lsrs	r2, r2, #16
 80086e2:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 80086e6:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 80086ea:	b29b      	uxth	r3, r3
 80086ec:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80086f0:	45c1      	cmp	r9, r8
 80086f2:	f841 3b04 	str.w	r3, [r1], #4
 80086f6:	ea4f 4022 	mov.w	r0, r2, asr #16
 80086fa:	d2e6      	bcs.n	80086ca <quorem+0xa4>
 80086fc:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008700:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008704:	b922      	cbnz	r2, 8008710 <quorem+0xea>
 8008706:	3b04      	subs	r3, #4
 8008708:	429d      	cmp	r5, r3
 800870a:	461a      	mov	r2, r3
 800870c:	d30b      	bcc.n	8008726 <quorem+0x100>
 800870e:	613c      	str	r4, [r7, #16]
 8008710:	3601      	adds	r6, #1
 8008712:	4630      	mov	r0, r6
 8008714:	b003      	add	sp, #12
 8008716:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800871a:	6812      	ldr	r2, [r2, #0]
 800871c:	3b04      	subs	r3, #4
 800871e:	2a00      	cmp	r2, #0
 8008720:	d1cb      	bne.n	80086ba <quorem+0x94>
 8008722:	3c01      	subs	r4, #1
 8008724:	e7c6      	b.n	80086b4 <quorem+0x8e>
 8008726:	6812      	ldr	r2, [r2, #0]
 8008728:	3b04      	subs	r3, #4
 800872a:	2a00      	cmp	r2, #0
 800872c:	d1ef      	bne.n	800870e <quorem+0xe8>
 800872e:	3c01      	subs	r4, #1
 8008730:	e7ea      	b.n	8008708 <quorem+0xe2>
 8008732:	2000      	movs	r0, #0
 8008734:	e7ee      	b.n	8008714 <quorem+0xee>
	...

08008738 <_dtoa_r>:
 8008738:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800873c:	ed2d 8b02 	vpush	{d8}
 8008740:	69c7      	ldr	r7, [r0, #28]
 8008742:	b091      	sub	sp, #68	@ 0x44
 8008744:	ed8d 0b02 	vstr	d0, [sp, #8]
 8008748:	ec55 4b10 	vmov	r4, r5, d0
 800874c:	9e1c      	ldr	r6, [sp, #112]	@ 0x70
 800874e:	9107      	str	r1, [sp, #28]
 8008750:	4681      	mov	r9, r0
 8008752:	9209      	str	r2, [sp, #36]	@ 0x24
 8008754:	930d      	str	r3, [sp, #52]	@ 0x34
 8008756:	b97f      	cbnz	r7, 8008778 <_dtoa_r+0x40>
 8008758:	2010      	movs	r0, #16
 800875a:	f000 fd95 	bl	8009288 <malloc>
 800875e:	4602      	mov	r2, r0
 8008760:	f8c9 001c 	str.w	r0, [r9, #28]
 8008764:	b920      	cbnz	r0, 8008770 <_dtoa_r+0x38>
 8008766:	4ba0      	ldr	r3, [pc, #640]	@ (80089e8 <_dtoa_r+0x2b0>)
 8008768:	21ef      	movs	r1, #239	@ 0xef
 800876a:	48a0      	ldr	r0, [pc, #640]	@ (80089ec <_dtoa_r+0x2b4>)
 800876c:	f001 fc4c 	bl	800a008 <__assert_func>
 8008770:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8008774:	6007      	str	r7, [r0, #0]
 8008776:	60c7      	str	r7, [r0, #12]
 8008778:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800877c:	6819      	ldr	r1, [r3, #0]
 800877e:	b159      	cbz	r1, 8008798 <_dtoa_r+0x60>
 8008780:	685a      	ldr	r2, [r3, #4]
 8008782:	604a      	str	r2, [r1, #4]
 8008784:	2301      	movs	r3, #1
 8008786:	4093      	lsls	r3, r2
 8008788:	608b      	str	r3, [r1, #8]
 800878a:	4648      	mov	r0, r9
 800878c:	f000 fe72 	bl	8009474 <_Bfree>
 8008790:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8008794:	2200      	movs	r2, #0
 8008796:	601a      	str	r2, [r3, #0]
 8008798:	1e2b      	subs	r3, r5, #0
 800879a:	bfbb      	ittet	lt
 800879c:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 80087a0:	9303      	strlt	r3, [sp, #12]
 80087a2:	2300      	movge	r3, #0
 80087a4:	2201      	movlt	r2, #1
 80087a6:	bfac      	ite	ge
 80087a8:	6033      	strge	r3, [r6, #0]
 80087aa:	6032      	strlt	r2, [r6, #0]
 80087ac:	4b90      	ldr	r3, [pc, #576]	@ (80089f0 <_dtoa_r+0x2b8>)
 80087ae:	9e03      	ldr	r6, [sp, #12]
 80087b0:	43b3      	bics	r3, r6
 80087b2:	d110      	bne.n	80087d6 <_dtoa_r+0x9e>
 80087b4:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80087b6:	f242 730f 	movw	r3, #9999	@ 0x270f
 80087ba:	6013      	str	r3, [r2, #0]
 80087bc:	f3c6 0313 	ubfx	r3, r6, #0, #20
 80087c0:	4323      	orrs	r3, r4
 80087c2:	f000 84e6 	beq.w	8009192 <_dtoa_r+0xa5a>
 80087c6:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 80087c8:	4f8a      	ldr	r7, [pc, #552]	@ (80089f4 <_dtoa_r+0x2bc>)
 80087ca:	2b00      	cmp	r3, #0
 80087cc:	f000 84e8 	beq.w	80091a0 <_dtoa_r+0xa68>
 80087d0:	1cfb      	adds	r3, r7, #3
 80087d2:	f000 bce3 	b.w	800919c <_dtoa_r+0xa64>
 80087d6:	ed9d 8b02 	vldr	d8, [sp, #8]
 80087da:	eeb5 8b40 	vcmp.f64	d8, #0.0
 80087de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80087e2:	d10a      	bne.n	80087fa <_dtoa_r+0xc2>
 80087e4:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80087e6:	2301      	movs	r3, #1
 80087e8:	6013      	str	r3, [r2, #0]
 80087ea:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 80087ec:	b113      	cbz	r3, 80087f4 <_dtoa_r+0xbc>
 80087ee:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 80087f0:	4b81      	ldr	r3, [pc, #516]	@ (80089f8 <_dtoa_r+0x2c0>)
 80087f2:	6013      	str	r3, [r2, #0]
 80087f4:	4f81      	ldr	r7, [pc, #516]	@ (80089fc <_dtoa_r+0x2c4>)
 80087f6:	f000 bcd3 	b.w	80091a0 <_dtoa_r+0xa68>
 80087fa:	aa0e      	add	r2, sp, #56	@ 0x38
 80087fc:	a90f      	add	r1, sp, #60	@ 0x3c
 80087fe:	4648      	mov	r0, r9
 8008800:	eeb0 0b48 	vmov.f64	d0, d8
 8008804:	f001 f918 	bl	8009a38 <__d2b>
 8008808:	f3c6 530a 	ubfx	r3, r6, #20, #11
 800880c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800880e:	9001      	str	r0, [sp, #4]
 8008810:	2b00      	cmp	r3, #0
 8008812:	d045      	beq.n	80088a0 <_dtoa_r+0x168>
 8008814:	eeb0 7b48 	vmov.f64	d7, d8
 8008818:	ee18 1a90 	vmov	r1, s17
 800881c:	f3c1 0113 	ubfx	r1, r1, #0, #20
 8008820:	f041 517f 	orr.w	r1, r1, #1069547520	@ 0x3fc00000
 8008824:	f441 1140 	orr.w	r1, r1, #3145728	@ 0x300000
 8008828:	f2a3 33ff 	subw	r3, r3, #1023	@ 0x3ff
 800882c:	2500      	movs	r5, #0
 800882e:	ee07 1a90 	vmov	s15, r1
 8008832:	eeb7 6b08 	vmov.f64	d6, #120	@ 0x3fc00000  1.5
 8008836:	ed9f 5b66 	vldr	d5, [pc, #408]	@ 80089d0 <_dtoa_r+0x298>
 800883a:	ee37 7b46 	vsub.f64	d7, d7, d6
 800883e:	ed9f 6b66 	vldr	d6, [pc, #408]	@ 80089d8 <_dtoa_r+0x2a0>
 8008842:	eea7 6b05 	vfma.f64	d6, d7, d5
 8008846:	ed9f 5b66 	vldr	d5, [pc, #408]	@ 80089e0 <_dtoa_r+0x2a8>
 800884a:	ee07 3a90 	vmov	s15, r3
 800884e:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 8008852:	eeb0 7b46 	vmov.f64	d7, d6
 8008856:	eea4 7b05 	vfma.f64	d7, d4, d5
 800885a:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 800885e:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8008862:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008866:	ee16 8a90 	vmov	r8, s13
 800886a:	d508      	bpl.n	800887e <_dtoa_r+0x146>
 800886c:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 8008870:	eeb4 6b47 	vcmp.f64	d6, d7
 8008874:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008878:	bf18      	it	ne
 800887a:	f108 38ff 	addne.w	r8, r8, #4294967295
 800887e:	f1b8 0f16 	cmp.w	r8, #22
 8008882:	d82b      	bhi.n	80088dc <_dtoa_r+0x1a4>
 8008884:	495e      	ldr	r1, [pc, #376]	@ (8008a00 <_dtoa_r+0x2c8>)
 8008886:	eb01 01c8 	add.w	r1, r1, r8, lsl #3
 800888a:	ed91 7b00 	vldr	d7, [r1]
 800888e:	eeb4 8bc7 	vcmpe.f64	d8, d7
 8008892:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008896:	d501      	bpl.n	800889c <_dtoa_r+0x164>
 8008898:	f108 38ff 	add.w	r8, r8, #4294967295
 800889c:	2100      	movs	r1, #0
 800889e:	e01e      	b.n	80088de <_dtoa_r+0x1a6>
 80088a0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80088a2:	4413      	add	r3, r2
 80088a4:	f203 4132 	addw	r1, r3, #1074	@ 0x432
 80088a8:	2920      	cmp	r1, #32
 80088aa:	bfc1      	itttt	gt
 80088ac:	f1c1 0140 	rsbgt	r1, r1, #64	@ 0x40
 80088b0:	408e      	lslgt	r6, r1
 80088b2:	f203 4112 	addwgt	r1, r3, #1042	@ 0x412
 80088b6:	fa24 f101 	lsrgt.w	r1, r4, r1
 80088ba:	bfd6      	itet	le
 80088bc:	f1c1 0120 	rsble	r1, r1, #32
 80088c0:	4331      	orrgt	r1, r6
 80088c2:	fa04 f101 	lslle.w	r1, r4, r1
 80088c6:	ee07 1a90 	vmov	s15, r1
 80088ca:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 80088ce:	3b01      	subs	r3, #1
 80088d0:	ee17 1a90 	vmov	r1, s15
 80088d4:	2501      	movs	r5, #1
 80088d6:	f1a1 71f8 	sub.w	r1, r1, #32505856	@ 0x1f00000
 80088da:	e7a8      	b.n	800882e <_dtoa_r+0xf6>
 80088dc:	2101      	movs	r1, #1
 80088de:	1ad2      	subs	r2, r2, r3
 80088e0:	1e53      	subs	r3, r2, #1
 80088e2:	9306      	str	r3, [sp, #24]
 80088e4:	bf45      	ittet	mi
 80088e6:	f1c2 0301 	rsbmi	r3, r2, #1
 80088ea:	9304      	strmi	r3, [sp, #16]
 80088ec:	2300      	movpl	r3, #0
 80088ee:	2300      	movmi	r3, #0
 80088f0:	bf4c      	ite	mi
 80088f2:	9306      	strmi	r3, [sp, #24]
 80088f4:	9304      	strpl	r3, [sp, #16]
 80088f6:	f1b8 0f00 	cmp.w	r8, #0
 80088fa:	910c      	str	r1, [sp, #48]	@ 0x30
 80088fc:	db18      	blt.n	8008930 <_dtoa_r+0x1f8>
 80088fe:	9b06      	ldr	r3, [sp, #24]
 8008900:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 8008904:	4443      	add	r3, r8
 8008906:	9306      	str	r3, [sp, #24]
 8008908:	2300      	movs	r3, #0
 800890a:	9a07      	ldr	r2, [sp, #28]
 800890c:	2a09      	cmp	r2, #9
 800890e:	d845      	bhi.n	800899c <_dtoa_r+0x264>
 8008910:	2a05      	cmp	r2, #5
 8008912:	bfc4      	itt	gt
 8008914:	3a04      	subgt	r2, #4
 8008916:	9207      	strgt	r2, [sp, #28]
 8008918:	9a07      	ldr	r2, [sp, #28]
 800891a:	f1a2 0202 	sub.w	r2, r2, #2
 800891e:	bfcc      	ite	gt
 8008920:	2400      	movgt	r4, #0
 8008922:	2401      	movle	r4, #1
 8008924:	2a03      	cmp	r2, #3
 8008926:	d844      	bhi.n	80089b2 <_dtoa_r+0x27a>
 8008928:	e8df f002 	tbb	[pc, r2]
 800892c:	0b173634 	.word	0x0b173634
 8008930:	9b04      	ldr	r3, [sp, #16]
 8008932:	2200      	movs	r2, #0
 8008934:	eba3 0308 	sub.w	r3, r3, r8
 8008938:	9304      	str	r3, [sp, #16]
 800893a:	920a      	str	r2, [sp, #40]	@ 0x28
 800893c:	f1c8 0300 	rsb	r3, r8, #0
 8008940:	e7e3      	b.n	800890a <_dtoa_r+0x1d2>
 8008942:	2201      	movs	r2, #1
 8008944:	9208      	str	r2, [sp, #32]
 8008946:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008948:	eb08 0b02 	add.w	fp, r8, r2
 800894c:	f10b 0a01 	add.w	sl, fp, #1
 8008950:	4652      	mov	r2, sl
 8008952:	2a01      	cmp	r2, #1
 8008954:	bfb8      	it	lt
 8008956:	2201      	movlt	r2, #1
 8008958:	e006      	b.n	8008968 <_dtoa_r+0x230>
 800895a:	2201      	movs	r2, #1
 800895c:	9208      	str	r2, [sp, #32]
 800895e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008960:	2a00      	cmp	r2, #0
 8008962:	dd29      	ble.n	80089b8 <_dtoa_r+0x280>
 8008964:	4693      	mov	fp, r2
 8008966:	4692      	mov	sl, r2
 8008968:	f8d9 701c 	ldr.w	r7, [r9, #28]
 800896c:	2100      	movs	r1, #0
 800896e:	2004      	movs	r0, #4
 8008970:	f100 0614 	add.w	r6, r0, #20
 8008974:	4296      	cmp	r6, r2
 8008976:	d926      	bls.n	80089c6 <_dtoa_r+0x28e>
 8008978:	6079      	str	r1, [r7, #4]
 800897a:	4648      	mov	r0, r9
 800897c:	9305      	str	r3, [sp, #20]
 800897e:	f000 fd39 	bl	80093f4 <_Balloc>
 8008982:	9b05      	ldr	r3, [sp, #20]
 8008984:	4607      	mov	r7, r0
 8008986:	2800      	cmp	r0, #0
 8008988:	d13e      	bne.n	8008a08 <_dtoa_r+0x2d0>
 800898a:	4b1e      	ldr	r3, [pc, #120]	@ (8008a04 <_dtoa_r+0x2cc>)
 800898c:	4602      	mov	r2, r0
 800898e:	f240 11af 	movw	r1, #431	@ 0x1af
 8008992:	e6ea      	b.n	800876a <_dtoa_r+0x32>
 8008994:	2200      	movs	r2, #0
 8008996:	e7e1      	b.n	800895c <_dtoa_r+0x224>
 8008998:	2200      	movs	r2, #0
 800899a:	e7d3      	b.n	8008944 <_dtoa_r+0x20c>
 800899c:	2401      	movs	r4, #1
 800899e:	2200      	movs	r2, #0
 80089a0:	e9cd 2407 	strd	r2, r4, [sp, #28]
 80089a4:	f04f 3bff 	mov.w	fp, #4294967295
 80089a8:	2100      	movs	r1, #0
 80089aa:	46da      	mov	sl, fp
 80089ac:	2212      	movs	r2, #18
 80089ae:	9109      	str	r1, [sp, #36]	@ 0x24
 80089b0:	e7da      	b.n	8008968 <_dtoa_r+0x230>
 80089b2:	2201      	movs	r2, #1
 80089b4:	9208      	str	r2, [sp, #32]
 80089b6:	e7f5      	b.n	80089a4 <_dtoa_r+0x26c>
 80089b8:	f04f 0b01 	mov.w	fp, #1
 80089bc:	46da      	mov	sl, fp
 80089be:	465a      	mov	r2, fp
 80089c0:	f8cd b024 	str.w	fp, [sp, #36]	@ 0x24
 80089c4:	e7d0      	b.n	8008968 <_dtoa_r+0x230>
 80089c6:	3101      	adds	r1, #1
 80089c8:	0040      	lsls	r0, r0, #1
 80089ca:	e7d1      	b.n	8008970 <_dtoa_r+0x238>
 80089cc:	f3af 8000 	nop.w
 80089d0:	636f4361 	.word	0x636f4361
 80089d4:	3fd287a7 	.word	0x3fd287a7
 80089d8:	8b60c8b3 	.word	0x8b60c8b3
 80089dc:	3fc68a28 	.word	0x3fc68a28
 80089e0:	509f79fb 	.word	0x509f79fb
 80089e4:	3fd34413 	.word	0x3fd34413
 80089e8:	0800a31d 	.word	0x0800a31d
 80089ec:	0800a334 	.word	0x0800a334
 80089f0:	7ff00000 	.word	0x7ff00000
 80089f4:	0800a319 	.word	0x0800a319
 80089f8:	0800a2ed 	.word	0x0800a2ed
 80089fc:	0800a2ec 	.word	0x0800a2ec
 8008a00:	0800a488 	.word	0x0800a488
 8008a04:	0800a38c 	.word	0x0800a38c
 8008a08:	f8d9 201c 	ldr.w	r2, [r9, #28]
 8008a0c:	f1ba 0f0e 	cmp.w	sl, #14
 8008a10:	6010      	str	r0, [r2, #0]
 8008a12:	d86e      	bhi.n	8008af2 <_dtoa_r+0x3ba>
 8008a14:	2c00      	cmp	r4, #0
 8008a16:	d06c      	beq.n	8008af2 <_dtoa_r+0x3ba>
 8008a18:	f1b8 0f00 	cmp.w	r8, #0
 8008a1c:	f340 80b4 	ble.w	8008b88 <_dtoa_r+0x450>
 8008a20:	4ac8      	ldr	r2, [pc, #800]	@ (8008d44 <_dtoa_r+0x60c>)
 8008a22:	f008 010f 	and.w	r1, r8, #15
 8008a26:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 8008a2a:	f418 7f80 	tst.w	r8, #256	@ 0x100
 8008a2e:	ed92 7b00 	vldr	d7, [r2]
 8008a32:	ea4f 1128 	mov.w	r1, r8, asr #4
 8008a36:	f000 809b 	beq.w	8008b70 <_dtoa_r+0x438>
 8008a3a:	4ac3      	ldr	r2, [pc, #780]	@ (8008d48 <_dtoa_r+0x610>)
 8008a3c:	ed92 6b08 	vldr	d6, [r2, #32]
 8008a40:	ee88 6b06 	vdiv.f64	d6, d8, d6
 8008a44:	ed8d 6b02 	vstr	d6, [sp, #8]
 8008a48:	f001 010f 	and.w	r1, r1, #15
 8008a4c:	2203      	movs	r2, #3
 8008a4e:	48be      	ldr	r0, [pc, #760]	@ (8008d48 <_dtoa_r+0x610>)
 8008a50:	2900      	cmp	r1, #0
 8008a52:	f040 808f 	bne.w	8008b74 <_dtoa_r+0x43c>
 8008a56:	ed9d 6b02 	vldr	d6, [sp, #8]
 8008a5a:	ee86 7b07 	vdiv.f64	d7, d6, d7
 8008a5e:	ed8d 7b02 	vstr	d7, [sp, #8]
 8008a62:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8008a64:	ed9d 7b02 	vldr	d7, [sp, #8]
 8008a68:	2900      	cmp	r1, #0
 8008a6a:	f000 80b3 	beq.w	8008bd4 <_dtoa_r+0x49c>
 8008a6e:	eeb7 6b00 	vmov.f64	d6, #112	@ 0x3f800000  1.0
 8008a72:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8008a76:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008a7a:	f140 80ab 	bpl.w	8008bd4 <_dtoa_r+0x49c>
 8008a7e:	f1ba 0f00 	cmp.w	sl, #0
 8008a82:	f000 80a7 	beq.w	8008bd4 <_dtoa_r+0x49c>
 8008a86:	f1bb 0f00 	cmp.w	fp, #0
 8008a8a:	dd30      	ble.n	8008aee <_dtoa_r+0x3b6>
 8008a8c:	eeb2 6b04 	vmov.f64	d6, #36	@ 0x41200000  10.0
 8008a90:	ee27 7b06 	vmul.f64	d7, d7, d6
 8008a94:	ed8d 7b02 	vstr	d7, [sp, #8]
 8008a98:	f108 31ff 	add.w	r1, r8, #4294967295
 8008a9c:	9105      	str	r1, [sp, #20]
 8008a9e:	3201      	adds	r2, #1
 8008aa0:	465c      	mov	r4, fp
 8008aa2:	ed9d 6b02 	vldr	d6, [sp, #8]
 8008aa6:	eeb1 5b0c 	vmov.f64	d5, #28	@ 0x40e00000  7.0
 8008aaa:	ee07 2a90 	vmov	s15, r2
 8008aae:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8008ab2:	eea7 5b06 	vfma.f64	d5, d7, d6
 8008ab6:	ee15 2a90 	vmov	r2, s11
 8008aba:	ec51 0b15 	vmov	r0, r1, d5
 8008abe:	f1a2 7150 	sub.w	r1, r2, #54525952	@ 0x3400000
 8008ac2:	2c00      	cmp	r4, #0
 8008ac4:	f040 808a 	bne.w	8008bdc <_dtoa_r+0x4a4>
 8008ac8:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
 8008acc:	ee36 6b47 	vsub.f64	d6, d6, d7
 8008ad0:	ec41 0b17 	vmov	d7, r0, r1
 8008ad4:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8008ad8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008adc:	f300 826a 	bgt.w	8008fb4 <_dtoa_r+0x87c>
 8008ae0:	eeb1 7b47 	vneg.f64	d7, d7
 8008ae4:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8008ae8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008aec:	d423      	bmi.n	8008b36 <_dtoa_r+0x3fe>
 8008aee:	ed8d 8b02 	vstr	d8, [sp, #8]
 8008af2:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8008af4:	2a00      	cmp	r2, #0
 8008af6:	f2c0 8129 	blt.w	8008d4c <_dtoa_r+0x614>
 8008afa:	f1b8 0f0e 	cmp.w	r8, #14
 8008afe:	f300 8125 	bgt.w	8008d4c <_dtoa_r+0x614>
 8008b02:	4b90      	ldr	r3, [pc, #576]	@ (8008d44 <_dtoa_r+0x60c>)
 8008b04:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8008b08:	ed93 6b00 	vldr	d6, [r3]
 8008b0c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008b0e:	2b00      	cmp	r3, #0
 8008b10:	f280 80c8 	bge.w	8008ca4 <_dtoa_r+0x56c>
 8008b14:	f1ba 0f00 	cmp.w	sl, #0
 8008b18:	f300 80c4 	bgt.w	8008ca4 <_dtoa_r+0x56c>
 8008b1c:	d10b      	bne.n	8008b36 <_dtoa_r+0x3fe>
 8008b1e:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
 8008b22:	ee26 6b07 	vmul.f64	d6, d6, d7
 8008b26:	ed9d 7b02 	vldr	d7, [sp, #8]
 8008b2a:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8008b2e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008b32:	f2c0 823c 	blt.w	8008fae <_dtoa_r+0x876>
 8008b36:	2400      	movs	r4, #0
 8008b38:	4625      	mov	r5, r4
 8008b3a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008b3c:	43db      	mvns	r3, r3
 8008b3e:	9305      	str	r3, [sp, #20]
 8008b40:	463e      	mov	r6, r7
 8008b42:	f04f 0800 	mov.w	r8, #0
 8008b46:	4621      	mov	r1, r4
 8008b48:	4648      	mov	r0, r9
 8008b4a:	f000 fc93 	bl	8009474 <_Bfree>
 8008b4e:	2d00      	cmp	r5, #0
 8008b50:	f000 80a2 	beq.w	8008c98 <_dtoa_r+0x560>
 8008b54:	f1b8 0f00 	cmp.w	r8, #0
 8008b58:	d005      	beq.n	8008b66 <_dtoa_r+0x42e>
 8008b5a:	45a8      	cmp	r8, r5
 8008b5c:	d003      	beq.n	8008b66 <_dtoa_r+0x42e>
 8008b5e:	4641      	mov	r1, r8
 8008b60:	4648      	mov	r0, r9
 8008b62:	f000 fc87 	bl	8009474 <_Bfree>
 8008b66:	4629      	mov	r1, r5
 8008b68:	4648      	mov	r0, r9
 8008b6a:	f000 fc83 	bl	8009474 <_Bfree>
 8008b6e:	e093      	b.n	8008c98 <_dtoa_r+0x560>
 8008b70:	2202      	movs	r2, #2
 8008b72:	e76c      	b.n	8008a4e <_dtoa_r+0x316>
 8008b74:	07cc      	lsls	r4, r1, #31
 8008b76:	d504      	bpl.n	8008b82 <_dtoa_r+0x44a>
 8008b78:	ed90 6b00 	vldr	d6, [r0]
 8008b7c:	3201      	adds	r2, #1
 8008b7e:	ee27 7b06 	vmul.f64	d7, d7, d6
 8008b82:	1049      	asrs	r1, r1, #1
 8008b84:	3008      	adds	r0, #8
 8008b86:	e763      	b.n	8008a50 <_dtoa_r+0x318>
 8008b88:	d022      	beq.n	8008bd0 <_dtoa_r+0x498>
 8008b8a:	f1c8 0100 	rsb	r1, r8, #0
 8008b8e:	4a6d      	ldr	r2, [pc, #436]	@ (8008d44 <_dtoa_r+0x60c>)
 8008b90:	f001 000f 	and.w	r0, r1, #15
 8008b94:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 8008b98:	ed92 7b00 	vldr	d7, [r2]
 8008b9c:	ee28 7b07 	vmul.f64	d7, d8, d7
 8008ba0:	ed8d 7b02 	vstr	d7, [sp, #8]
 8008ba4:	4868      	ldr	r0, [pc, #416]	@ (8008d48 <_dtoa_r+0x610>)
 8008ba6:	1109      	asrs	r1, r1, #4
 8008ba8:	2400      	movs	r4, #0
 8008baa:	2202      	movs	r2, #2
 8008bac:	b929      	cbnz	r1, 8008bba <_dtoa_r+0x482>
 8008bae:	2c00      	cmp	r4, #0
 8008bb0:	f43f af57 	beq.w	8008a62 <_dtoa_r+0x32a>
 8008bb4:	ed8d 7b02 	vstr	d7, [sp, #8]
 8008bb8:	e753      	b.n	8008a62 <_dtoa_r+0x32a>
 8008bba:	07ce      	lsls	r6, r1, #31
 8008bbc:	d505      	bpl.n	8008bca <_dtoa_r+0x492>
 8008bbe:	ed90 6b00 	vldr	d6, [r0]
 8008bc2:	3201      	adds	r2, #1
 8008bc4:	2401      	movs	r4, #1
 8008bc6:	ee27 7b06 	vmul.f64	d7, d7, d6
 8008bca:	1049      	asrs	r1, r1, #1
 8008bcc:	3008      	adds	r0, #8
 8008bce:	e7ed      	b.n	8008bac <_dtoa_r+0x474>
 8008bd0:	2202      	movs	r2, #2
 8008bd2:	e746      	b.n	8008a62 <_dtoa_r+0x32a>
 8008bd4:	f8cd 8014 	str.w	r8, [sp, #20]
 8008bd8:	4654      	mov	r4, sl
 8008bda:	e762      	b.n	8008aa2 <_dtoa_r+0x36a>
 8008bdc:	4a59      	ldr	r2, [pc, #356]	@ (8008d44 <_dtoa_r+0x60c>)
 8008bde:	eb02 02c4 	add.w	r2, r2, r4, lsl #3
 8008be2:	ed12 4b02 	vldr	d4, [r2, #-8]
 8008be6:	9a08      	ldr	r2, [sp, #32]
 8008be8:	ec41 0b17 	vmov	d7, r0, r1
 8008bec:	443c      	add	r4, r7
 8008bee:	b34a      	cbz	r2, 8008c44 <_dtoa_r+0x50c>
 8008bf0:	eeb6 3b00 	vmov.f64	d3, #96	@ 0x3f000000  0.5
 8008bf4:	eeb7 2b00 	vmov.f64	d2, #112	@ 0x3f800000  1.0
 8008bf8:	463e      	mov	r6, r7
 8008bfa:	ee83 5b04 	vdiv.f64	d5, d3, d4
 8008bfe:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
 8008c02:	ee35 7b47 	vsub.f64	d7, d5, d7
 8008c06:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8008c0a:	ee14 2a90 	vmov	r2, s9
 8008c0e:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8008c12:	3230      	adds	r2, #48	@ 0x30
 8008c14:	ee36 6b45 	vsub.f64	d6, d6, d5
 8008c18:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8008c1c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008c20:	f806 2b01 	strb.w	r2, [r6], #1
 8008c24:	d438      	bmi.n	8008c98 <_dtoa_r+0x560>
 8008c26:	ee32 5b46 	vsub.f64	d5, d2, d6
 8008c2a:	eeb4 5bc7 	vcmpe.f64	d5, d7
 8008c2e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008c32:	d46e      	bmi.n	8008d12 <_dtoa_r+0x5da>
 8008c34:	42a6      	cmp	r6, r4
 8008c36:	f43f af5a 	beq.w	8008aee <_dtoa_r+0x3b6>
 8008c3a:	ee27 7b03 	vmul.f64	d7, d7, d3
 8008c3e:	ee26 6b03 	vmul.f64	d6, d6, d3
 8008c42:	e7e0      	b.n	8008c06 <_dtoa_r+0x4ce>
 8008c44:	4621      	mov	r1, r4
 8008c46:	463e      	mov	r6, r7
 8008c48:	ee27 7b04 	vmul.f64	d7, d7, d4
 8008c4c:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
 8008c50:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8008c54:	ee14 2a90 	vmov	r2, s9
 8008c58:	3230      	adds	r2, #48	@ 0x30
 8008c5a:	f806 2b01 	strb.w	r2, [r6], #1
 8008c5e:	42a6      	cmp	r6, r4
 8008c60:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8008c64:	ee36 6b45 	vsub.f64	d6, d6, d5
 8008c68:	d119      	bne.n	8008c9e <_dtoa_r+0x566>
 8008c6a:	eeb6 5b00 	vmov.f64	d5, #96	@ 0x3f000000  0.5
 8008c6e:	ee37 4b05 	vadd.f64	d4, d7, d5
 8008c72:	eeb4 6bc4 	vcmpe.f64	d6, d4
 8008c76:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008c7a:	dc4a      	bgt.n	8008d12 <_dtoa_r+0x5da>
 8008c7c:	ee35 5b47 	vsub.f64	d5, d5, d7
 8008c80:	eeb4 6bc5 	vcmpe.f64	d6, d5
 8008c84:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008c88:	f57f af31 	bpl.w	8008aee <_dtoa_r+0x3b6>
 8008c8c:	460e      	mov	r6, r1
 8008c8e:	3901      	subs	r1, #1
 8008c90:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8008c94:	2b30      	cmp	r3, #48	@ 0x30
 8008c96:	d0f9      	beq.n	8008c8c <_dtoa_r+0x554>
 8008c98:	f8dd 8014 	ldr.w	r8, [sp, #20]
 8008c9c:	e027      	b.n	8008cee <_dtoa_r+0x5b6>
 8008c9e:	ee26 6b03 	vmul.f64	d6, d6, d3
 8008ca2:	e7d5      	b.n	8008c50 <_dtoa_r+0x518>
 8008ca4:	ed9d 7b02 	vldr	d7, [sp, #8]
 8008ca8:	eeb2 4b04 	vmov.f64	d4, #36	@ 0x41200000  10.0
 8008cac:	463e      	mov	r6, r7
 8008cae:	ee87 5b06 	vdiv.f64	d5, d7, d6
 8008cb2:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 8008cb6:	ee15 3a10 	vmov	r3, s10
 8008cba:	3330      	adds	r3, #48	@ 0x30
 8008cbc:	f806 3b01 	strb.w	r3, [r6], #1
 8008cc0:	1bf3      	subs	r3, r6, r7
 8008cc2:	459a      	cmp	sl, r3
 8008cc4:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 8008cc8:	eea3 7b46 	vfms.f64	d7, d3, d6
 8008ccc:	d132      	bne.n	8008d34 <_dtoa_r+0x5fc>
 8008cce:	ee37 7b07 	vadd.f64	d7, d7, d7
 8008cd2:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8008cd6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008cda:	dc18      	bgt.n	8008d0e <_dtoa_r+0x5d6>
 8008cdc:	eeb4 7b46 	vcmp.f64	d7, d6
 8008ce0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008ce4:	d103      	bne.n	8008cee <_dtoa_r+0x5b6>
 8008ce6:	ee15 3a10 	vmov	r3, s10
 8008cea:	07db      	lsls	r3, r3, #31
 8008cec:	d40f      	bmi.n	8008d0e <_dtoa_r+0x5d6>
 8008cee:	9901      	ldr	r1, [sp, #4]
 8008cf0:	4648      	mov	r0, r9
 8008cf2:	f000 fbbf 	bl	8009474 <_Bfree>
 8008cf6:	2300      	movs	r3, #0
 8008cf8:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8008cfa:	7033      	strb	r3, [r6, #0]
 8008cfc:	f108 0301 	add.w	r3, r8, #1
 8008d00:	6013      	str	r3, [r2, #0]
 8008d02:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8008d04:	2b00      	cmp	r3, #0
 8008d06:	f000 824b 	beq.w	80091a0 <_dtoa_r+0xa68>
 8008d0a:	601e      	str	r6, [r3, #0]
 8008d0c:	e248      	b.n	80091a0 <_dtoa_r+0xa68>
 8008d0e:	f8cd 8014 	str.w	r8, [sp, #20]
 8008d12:	4633      	mov	r3, r6
 8008d14:	461e      	mov	r6, r3
 8008d16:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008d1a:	2a39      	cmp	r2, #57	@ 0x39
 8008d1c:	d106      	bne.n	8008d2c <_dtoa_r+0x5f4>
 8008d1e:	429f      	cmp	r7, r3
 8008d20:	d1f8      	bne.n	8008d14 <_dtoa_r+0x5dc>
 8008d22:	9a05      	ldr	r2, [sp, #20]
 8008d24:	3201      	adds	r2, #1
 8008d26:	9205      	str	r2, [sp, #20]
 8008d28:	2230      	movs	r2, #48	@ 0x30
 8008d2a:	703a      	strb	r2, [r7, #0]
 8008d2c:	781a      	ldrb	r2, [r3, #0]
 8008d2e:	3201      	adds	r2, #1
 8008d30:	701a      	strb	r2, [r3, #0]
 8008d32:	e7b1      	b.n	8008c98 <_dtoa_r+0x560>
 8008d34:	ee27 7b04 	vmul.f64	d7, d7, d4
 8008d38:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8008d3c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008d40:	d1b5      	bne.n	8008cae <_dtoa_r+0x576>
 8008d42:	e7d4      	b.n	8008cee <_dtoa_r+0x5b6>
 8008d44:	0800a488 	.word	0x0800a488
 8008d48:	0800a460 	.word	0x0800a460
 8008d4c:	9908      	ldr	r1, [sp, #32]
 8008d4e:	2900      	cmp	r1, #0
 8008d50:	f000 80e9 	beq.w	8008f26 <_dtoa_r+0x7ee>
 8008d54:	9907      	ldr	r1, [sp, #28]
 8008d56:	2901      	cmp	r1, #1
 8008d58:	f300 80cb 	bgt.w	8008ef2 <_dtoa_r+0x7ba>
 8008d5c:	2d00      	cmp	r5, #0
 8008d5e:	f000 80c4 	beq.w	8008eea <_dtoa_r+0x7b2>
 8008d62:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 8008d66:	9e04      	ldr	r6, [sp, #16]
 8008d68:	461c      	mov	r4, r3
 8008d6a:	9305      	str	r3, [sp, #20]
 8008d6c:	9b04      	ldr	r3, [sp, #16]
 8008d6e:	4413      	add	r3, r2
 8008d70:	9304      	str	r3, [sp, #16]
 8008d72:	9b06      	ldr	r3, [sp, #24]
 8008d74:	2101      	movs	r1, #1
 8008d76:	4413      	add	r3, r2
 8008d78:	4648      	mov	r0, r9
 8008d7a:	9306      	str	r3, [sp, #24]
 8008d7c:	f000 fc2e 	bl	80095dc <__i2b>
 8008d80:	9b05      	ldr	r3, [sp, #20]
 8008d82:	4605      	mov	r5, r0
 8008d84:	b166      	cbz	r6, 8008da0 <_dtoa_r+0x668>
 8008d86:	9a06      	ldr	r2, [sp, #24]
 8008d88:	2a00      	cmp	r2, #0
 8008d8a:	dd09      	ble.n	8008da0 <_dtoa_r+0x668>
 8008d8c:	42b2      	cmp	r2, r6
 8008d8e:	9904      	ldr	r1, [sp, #16]
 8008d90:	bfa8      	it	ge
 8008d92:	4632      	movge	r2, r6
 8008d94:	1a89      	subs	r1, r1, r2
 8008d96:	9104      	str	r1, [sp, #16]
 8008d98:	9906      	ldr	r1, [sp, #24]
 8008d9a:	1ab6      	subs	r6, r6, r2
 8008d9c:	1a8a      	subs	r2, r1, r2
 8008d9e:	9206      	str	r2, [sp, #24]
 8008da0:	b30b      	cbz	r3, 8008de6 <_dtoa_r+0x6ae>
 8008da2:	9a08      	ldr	r2, [sp, #32]
 8008da4:	2a00      	cmp	r2, #0
 8008da6:	f000 80c5 	beq.w	8008f34 <_dtoa_r+0x7fc>
 8008daa:	2c00      	cmp	r4, #0
 8008dac:	f000 80bf 	beq.w	8008f2e <_dtoa_r+0x7f6>
 8008db0:	4629      	mov	r1, r5
 8008db2:	4622      	mov	r2, r4
 8008db4:	4648      	mov	r0, r9
 8008db6:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008db8:	f000 fcc8 	bl	800974c <__pow5mult>
 8008dbc:	9a01      	ldr	r2, [sp, #4]
 8008dbe:	4601      	mov	r1, r0
 8008dc0:	4605      	mov	r5, r0
 8008dc2:	4648      	mov	r0, r9
 8008dc4:	f000 fc20 	bl	8009608 <__multiply>
 8008dc8:	9901      	ldr	r1, [sp, #4]
 8008dca:	9005      	str	r0, [sp, #20]
 8008dcc:	4648      	mov	r0, r9
 8008dce:	f000 fb51 	bl	8009474 <_Bfree>
 8008dd2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008dd4:	1b1b      	subs	r3, r3, r4
 8008dd6:	f000 80b0 	beq.w	8008f3a <_dtoa_r+0x802>
 8008dda:	9905      	ldr	r1, [sp, #20]
 8008ddc:	461a      	mov	r2, r3
 8008dde:	4648      	mov	r0, r9
 8008de0:	f000 fcb4 	bl	800974c <__pow5mult>
 8008de4:	9001      	str	r0, [sp, #4]
 8008de6:	2101      	movs	r1, #1
 8008de8:	4648      	mov	r0, r9
 8008dea:	f000 fbf7 	bl	80095dc <__i2b>
 8008dee:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008df0:	4604      	mov	r4, r0
 8008df2:	2b00      	cmp	r3, #0
 8008df4:	f000 81da 	beq.w	80091ac <_dtoa_r+0xa74>
 8008df8:	461a      	mov	r2, r3
 8008dfa:	4601      	mov	r1, r0
 8008dfc:	4648      	mov	r0, r9
 8008dfe:	f000 fca5 	bl	800974c <__pow5mult>
 8008e02:	9b07      	ldr	r3, [sp, #28]
 8008e04:	2b01      	cmp	r3, #1
 8008e06:	4604      	mov	r4, r0
 8008e08:	f300 80a0 	bgt.w	8008f4c <_dtoa_r+0x814>
 8008e0c:	9b02      	ldr	r3, [sp, #8]
 8008e0e:	2b00      	cmp	r3, #0
 8008e10:	f040 8096 	bne.w	8008f40 <_dtoa_r+0x808>
 8008e14:	9b03      	ldr	r3, [sp, #12]
 8008e16:	f3c3 0213 	ubfx	r2, r3, #0, #20
 8008e1a:	2a00      	cmp	r2, #0
 8008e1c:	f040 8092 	bne.w	8008f44 <_dtoa_r+0x80c>
 8008e20:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8008e24:	0d12      	lsrs	r2, r2, #20
 8008e26:	0512      	lsls	r2, r2, #20
 8008e28:	2a00      	cmp	r2, #0
 8008e2a:	f000 808d 	beq.w	8008f48 <_dtoa_r+0x810>
 8008e2e:	9b04      	ldr	r3, [sp, #16]
 8008e30:	3301      	adds	r3, #1
 8008e32:	9304      	str	r3, [sp, #16]
 8008e34:	9b06      	ldr	r3, [sp, #24]
 8008e36:	3301      	adds	r3, #1
 8008e38:	9306      	str	r3, [sp, #24]
 8008e3a:	2301      	movs	r3, #1
 8008e3c:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008e3e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008e40:	2b00      	cmp	r3, #0
 8008e42:	f000 81b9 	beq.w	80091b8 <_dtoa_r+0xa80>
 8008e46:	6922      	ldr	r2, [r4, #16]
 8008e48:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8008e4c:	6910      	ldr	r0, [r2, #16]
 8008e4e:	f000 fb79 	bl	8009544 <__hi0bits>
 8008e52:	f1c0 0020 	rsb	r0, r0, #32
 8008e56:	9b06      	ldr	r3, [sp, #24]
 8008e58:	4418      	add	r0, r3
 8008e5a:	f010 001f 	ands.w	r0, r0, #31
 8008e5e:	f000 8081 	beq.w	8008f64 <_dtoa_r+0x82c>
 8008e62:	f1c0 0220 	rsb	r2, r0, #32
 8008e66:	2a04      	cmp	r2, #4
 8008e68:	dd73      	ble.n	8008f52 <_dtoa_r+0x81a>
 8008e6a:	9b04      	ldr	r3, [sp, #16]
 8008e6c:	f1c0 001c 	rsb	r0, r0, #28
 8008e70:	4403      	add	r3, r0
 8008e72:	9304      	str	r3, [sp, #16]
 8008e74:	9b06      	ldr	r3, [sp, #24]
 8008e76:	4406      	add	r6, r0
 8008e78:	4403      	add	r3, r0
 8008e7a:	9306      	str	r3, [sp, #24]
 8008e7c:	9b04      	ldr	r3, [sp, #16]
 8008e7e:	2b00      	cmp	r3, #0
 8008e80:	dd05      	ble.n	8008e8e <_dtoa_r+0x756>
 8008e82:	9901      	ldr	r1, [sp, #4]
 8008e84:	461a      	mov	r2, r3
 8008e86:	4648      	mov	r0, r9
 8008e88:	f000 fcba 	bl	8009800 <__lshift>
 8008e8c:	9001      	str	r0, [sp, #4]
 8008e8e:	9b06      	ldr	r3, [sp, #24]
 8008e90:	2b00      	cmp	r3, #0
 8008e92:	dd05      	ble.n	8008ea0 <_dtoa_r+0x768>
 8008e94:	4621      	mov	r1, r4
 8008e96:	461a      	mov	r2, r3
 8008e98:	4648      	mov	r0, r9
 8008e9a:	f000 fcb1 	bl	8009800 <__lshift>
 8008e9e:	4604      	mov	r4, r0
 8008ea0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8008ea2:	2b00      	cmp	r3, #0
 8008ea4:	d060      	beq.n	8008f68 <_dtoa_r+0x830>
 8008ea6:	9801      	ldr	r0, [sp, #4]
 8008ea8:	4621      	mov	r1, r4
 8008eaa:	f000 fd15 	bl	80098d8 <__mcmp>
 8008eae:	2800      	cmp	r0, #0
 8008eb0:	da5a      	bge.n	8008f68 <_dtoa_r+0x830>
 8008eb2:	f108 33ff 	add.w	r3, r8, #4294967295
 8008eb6:	9305      	str	r3, [sp, #20]
 8008eb8:	9901      	ldr	r1, [sp, #4]
 8008eba:	2300      	movs	r3, #0
 8008ebc:	220a      	movs	r2, #10
 8008ebe:	4648      	mov	r0, r9
 8008ec0:	f000 fafa 	bl	80094b8 <__multadd>
 8008ec4:	9b08      	ldr	r3, [sp, #32]
 8008ec6:	9001      	str	r0, [sp, #4]
 8008ec8:	2b00      	cmp	r3, #0
 8008eca:	f000 8177 	beq.w	80091bc <_dtoa_r+0xa84>
 8008ece:	4629      	mov	r1, r5
 8008ed0:	2300      	movs	r3, #0
 8008ed2:	220a      	movs	r2, #10
 8008ed4:	4648      	mov	r0, r9
 8008ed6:	f000 faef 	bl	80094b8 <__multadd>
 8008eda:	f1bb 0f00 	cmp.w	fp, #0
 8008ede:	4605      	mov	r5, r0
 8008ee0:	dc6e      	bgt.n	8008fc0 <_dtoa_r+0x888>
 8008ee2:	9b07      	ldr	r3, [sp, #28]
 8008ee4:	2b02      	cmp	r3, #2
 8008ee6:	dc48      	bgt.n	8008f7a <_dtoa_r+0x842>
 8008ee8:	e06a      	b.n	8008fc0 <_dtoa_r+0x888>
 8008eea:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8008eec:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 8008ef0:	e739      	b.n	8008d66 <_dtoa_r+0x62e>
 8008ef2:	f10a 34ff 	add.w	r4, sl, #4294967295
 8008ef6:	42a3      	cmp	r3, r4
 8008ef8:	db07      	blt.n	8008f0a <_dtoa_r+0x7d2>
 8008efa:	f1ba 0f00 	cmp.w	sl, #0
 8008efe:	eba3 0404 	sub.w	r4, r3, r4
 8008f02:	db0b      	blt.n	8008f1c <_dtoa_r+0x7e4>
 8008f04:	9e04      	ldr	r6, [sp, #16]
 8008f06:	4652      	mov	r2, sl
 8008f08:	e72f      	b.n	8008d6a <_dtoa_r+0x632>
 8008f0a:	1ae2      	subs	r2, r4, r3
 8008f0c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008f0e:	9e04      	ldr	r6, [sp, #16]
 8008f10:	4413      	add	r3, r2
 8008f12:	930a      	str	r3, [sp, #40]	@ 0x28
 8008f14:	4652      	mov	r2, sl
 8008f16:	4623      	mov	r3, r4
 8008f18:	2400      	movs	r4, #0
 8008f1a:	e726      	b.n	8008d6a <_dtoa_r+0x632>
 8008f1c:	9a04      	ldr	r2, [sp, #16]
 8008f1e:	eba2 060a 	sub.w	r6, r2, sl
 8008f22:	2200      	movs	r2, #0
 8008f24:	e721      	b.n	8008d6a <_dtoa_r+0x632>
 8008f26:	9e04      	ldr	r6, [sp, #16]
 8008f28:	9d08      	ldr	r5, [sp, #32]
 8008f2a:	461c      	mov	r4, r3
 8008f2c:	e72a      	b.n	8008d84 <_dtoa_r+0x64c>
 8008f2e:	9a01      	ldr	r2, [sp, #4]
 8008f30:	9205      	str	r2, [sp, #20]
 8008f32:	e752      	b.n	8008dda <_dtoa_r+0x6a2>
 8008f34:	9901      	ldr	r1, [sp, #4]
 8008f36:	461a      	mov	r2, r3
 8008f38:	e751      	b.n	8008dde <_dtoa_r+0x6a6>
 8008f3a:	9b05      	ldr	r3, [sp, #20]
 8008f3c:	9301      	str	r3, [sp, #4]
 8008f3e:	e752      	b.n	8008de6 <_dtoa_r+0x6ae>
 8008f40:	2300      	movs	r3, #0
 8008f42:	e77b      	b.n	8008e3c <_dtoa_r+0x704>
 8008f44:	9b02      	ldr	r3, [sp, #8]
 8008f46:	e779      	b.n	8008e3c <_dtoa_r+0x704>
 8008f48:	920b      	str	r2, [sp, #44]	@ 0x2c
 8008f4a:	e778      	b.n	8008e3e <_dtoa_r+0x706>
 8008f4c:	2300      	movs	r3, #0
 8008f4e:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008f50:	e779      	b.n	8008e46 <_dtoa_r+0x70e>
 8008f52:	d093      	beq.n	8008e7c <_dtoa_r+0x744>
 8008f54:	9b04      	ldr	r3, [sp, #16]
 8008f56:	321c      	adds	r2, #28
 8008f58:	4413      	add	r3, r2
 8008f5a:	9304      	str	r3, [sp, #16]
 8008f5c:	9b06      	ldr	r3, [sp, #24]
 8008f5e:	4416      	add	r6, r2
 8008f60:	4413      	add	r3, r2
 8008f62:	e78a      	b.n	8008e7a <_dtoa_r+0x742>
 8008f64:	4602      	mov	r2, r0
 8008f66:	e7f5      	b.n	8008f54 <_dtoa_r+0x81c>
 8008f68:	f1ba 0f00 	cmp.w	sl, #0
 8008f6c:	f8cd 8014 	str.w	r8, [sp, #20]
 8008f70:	46d3      	mov	fp, sl
 8008f72:	dc21      	bgt.n	8008fb8 <_dtoa_r+0x880>
 8008f74:	9b07      	ldr	r3, [sp, #28]
 8008f76:	2b02      	cmp	r3, #2
 8008f78:	dd1e      	ble.n	8008fb8 <_dtoa_r+0x880>
 8008f7a:	f1bb 0f00 	cmp.w	fp, #0
 8008f7e:	f47f addc 	bne.w	8008b3a <_dtoa_r+0x402>
 8008f82:	4621      	mov	r1, r4
 8008f84:	465b      	mov	r3, fp
 8008f86:	2205      	movs	r2, #5
 8008f88:	4648      	mov	r0, r9
 8008f8a:	f000 fa95 	bl	80094b8 <__multadd>
 8008f8e:	4601      	mov	r1, r0
 8008f90:	4604      	mov	r4, r0
 8008f92:	9801      	ldr	r0, [sp, #4]
 8008f94:	f000 fca0 	bl	80098d8 <__mcmp>
 8008f98:	2800      	cmp	r0, #0
 8008f9a:	f77f adce 	ble.w	8008b3a <_dtoa_r+0x402>
 8008f9e:	463e      	mov	r6, r7
 8008fa0:	2331      	movs	r3, #49	@ 0x31
 8008fa2:	f806 3b01 	strb.w	r3, [r6], #1
 8008fa6:	9b05      	ldr	r3, [sp, #20]
 8008fa8:	3301      	adds	r3, #1
 8008faa:	9305      	str	r3, [sp, #20]
 8008fac:	e5c9      	b.n	8008b42 <_dtoa_r+0x40a>
 8008fae:	f8cd 8014 	str.w	r8, [sp, #20]
 8008fb2:	4654      	mov	r4, sl
 8008fb4:	4625      	mov	r5, r4
 8008fb6:	e7f2      	b.n	8008f9e <_dtoa_r+0x866>
 8008fb8:	9b08      	ldr	r3, [sp, #32]
 8008fba:	2b00      	cmp	r3, #0
 8008fbc:	f000 8102 	beq.w	80091c4 <_dtoa_r+0xa8c>
 8008fc0:	2e00      	cmp	r6, #0
 8008fc2:	dd05      	ble.n	8008fd0 <_dtoa_r+0x898>
 8008fc4:	4629      	mov	r1, r5
 8008fc6:	4632      	mov	r2, r6
 8008fc8:	4648      	mov	r0, r9
 8008fca:	f000 fc19 	bl	8009800 <__lshift>
 8008fce:	4605      	mov	r5, r0
 8008fd0:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008fd2:	2b00      	cmp	r3, #0
 8008fd4:	d058      	beq.n	8009088 <_dtoa_r+0x950>
 8008fd6:	6869      	ldr	r1, [r5, #4]
 8008fd8:	4648      	mov	r0, r9
 8008fda:	f000 fa0b 	bl	80093f4 <_Balloc>
 8008fde:	4606      	mov	r6, r0
 8008fe0:	b928      	cbnz	r0, 8008fee <_dtoa_r+0x8b6>
 8008fe2:	4b82      	ldr	r3, [pc, #520]	@ (80091ec <_dtoa_r+0xab4>)
 8008fe4:	4602      	mov	r2, r0
 8008fe6:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8008fea:	f7ff bbbe 	b.w	800876a <_dtoa_r+0x32>
 8008fee:	692a      	ldr	r2, [r5, #16]
 8008ff0:	3202      	adds	r2, #2
 8008ff2:	0092      	lsls	r2, r2, #2
 8008ff4:	f105 010c 	add.w	r1, r5, #12
 8008ff8:	300c      	adds	r0, #12
 8008ffa:	f000 fff7 	bl	8009fec <memcpy>
 8008ffe:	2201      	movs	r2, #1
 8009000:	4631      	mov	r1, r6
 8009002:	4648      	mov	r0, r9
 8009004:	f000 fbfc 	bl	8009800 <__lshift>
 8009008:	1c7b      	adds	r3, r7, #1
 800900a:	9304      	str	r3, [sp, #16]
 800900c:	eb07 030b 	add.w	r3, r7, fp
 8009010:	9309      	str	r3, [sp, #36]	@ 0x24
 8009012:	9b02      	ldr	r3, [sp, #8]
 8009014:	f003 0301 	and.w	r3, r3, #1
 8009018:	46a8      	mov	r8, r5
 800901a:	9308      	str	r3, [sp, #32]
 800901c:	4605      	mov	r5, r0
 800901e:	9b04      	ldr	r3, [sp, #16]
 8009020:	9801      	ldr	r0, [sp, #4]
 8009022:	4621      	mov	r1, r4
 8009024:	f103 3bff 	add.w	fp, r3, #4294967295
 8009028:	f7ff fafd 	bl	8008626 <quorem>
 800902c:	4641      	mov	r1, r8
 800902e:	9002      	str	r0, [sp, #8]
 8009030:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
 8009034:	9801      	ldr	r0, [sp, #4]
 8009036:	f000 fc4f 	bl	80098d8 <__mcmp>
 800903a:	462a      	mov	r2, r5
 800903c:	9006      	str	r0, [sp, #24]
 800903e:	4621      	mov	r1, r4
 8009040:	4648      	mov	r0, r9
 8009042:	f000 fc65 	bl	8009910 <__mdiff>
 8009046:	68c2      	ldr	r2, [r0, #12]
 8009048:	4606      	mov	r6, r0
 800904a:	b9fa      	cbnz	r2, 800908c <_dtoa_r+0x954>
 800904c:	4601      	mov	r1, r0
 800904e:	9801      	ldr	r0, [sp, #4]
 8009050:	f000 fc42 	bl	80098d8 <__mcmp>
 8009054:	4602      	mov	r2, r0
 8009056:	4631      	mov	r1, r6
 8009058:	4648      	mov	r0, r9
 800905a:	920a      	str	r2, [sp, #40]	@ 0x28
 800905c:	f000 fa0a 	bl	8009474 <_Bfree>
 8009060:	9b07      	ldr	r3, [sp, #28]
 8009062:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8009064:	9e04      	ldr	r6, [sp, #16]
 8009066:	ea42 0103 	orr.w	r1, r2, r3
 800906a:	9b08      	ldr	r3, [sp, #32]
 800906c:	4319      	orrs	r1, r3
 800906e:	d10f      	bne.n	8009090 <_dtoa_r+0x958>
 8009070:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 8009074:	d028      	beq.n	80090c8 <_dtoa_r+0x990>
 8009076:	9b06      	ldr	r3, [sp, #24]
 8009078:	2b00      	cmp	r3, #0
 800907a:	dd02      	ble.n	8009082 <_dtoa_r+0x94a>
 800907c:	9b02      	ldr	r3, [sp, #8]
 800907e:	f103 0a31 	add.w	sl, r3, #49	@ 0x31
 8009082:	f88b a000 	strb.w	sl, [fp]
 8009086:	e55e      	b.n	8008b46 <_dtoa_r+0x40e>
 8009088:	4628      	mov	r0, r5
 800908a:	e7bd      	b.n	8009008 <_dtoa_r+0x8d0>
 800908c:	2201      	movs	r2, #1
 800908e:	e7e2      	b.n	8009056 <_dtoa_r+0x91e>
 8009090:	9b06      	ldr	r3, [sp, #24]
 8009092:	2b00      	cmp	r3, #0
 8009094:	db04      	blt.n	80090a0 <_dtoa_r+0x968>
 8009096:	9907      	ldr	r1, [sp, #28]
 8009098:	430b      	orrs	r3, r1
 800909a:	9908      	ldr	r1, [sp, #32]
 800909c:	430b      	orrs	r3, r1
 800909e:	d120      	bne.n	80090e2 <_dtoa_r+0x9aa>
 80090a0:	2a00      	cmp	r2, #0
 80090a2:	ddee      	ble.n	8009082 <_dtoa_r+0x94a>
 80090a4:	9901      	ldr	r1, [sp, #4]
 80090a6:	2201      	movs	r2, #1
 80090a8:	4648      	mov	r0, r9
 80090aa:	f000 fba9 	bl	8009800 <__lshift>
 80090ae:	4621      	mov	r1, r4
 80090b0:	9001      	str	r0, [sp, #4]
 80090b2:	f000 fc11 	bl	80098d8 <__mcmp>
 80090b6:	2800      	cmp	r0, #0
 80090b8:	dc03      	bgt.n	80090c2 <_dtoa_r+0x98a>
 80090ba:	d1e2      	bne.n	8009082 <_dtoa_r+0x94a>
 80090bc:	f01a 0f01 	tst.w	sl, #1
 80090c0:	d0df      	beq.n	8009082 <_dtoa_r+0x94a>
 80090c2:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 80090c6:	d1d9      	bne.n	800907c <_dtoa_r+0x944>
 80090c8:	2339      	movs	r3, #57	@ 0x39
 80090ca:	f88b 3000 	strb.w	r3, [fp]
 80090ce:	4633      	mov	r3, r6
 80090d0:	461e      	mov	r6, r3
 80090d2:	3b01      	subs	r3, #1
 80090d4:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 80090d8:	2a39      	cmp	r2, #57	@ 0x39
 80090da:	d052      	beq.n	8009182 <_dtoa_r+0xa4a>
 80090dc:	3201      	adds	r2, #1
 80090de:	701a      	strb	r2, [r3, #0]
 80090e0:	e531      	b.n	8008b46 <_dtoa_r+0x40e>
 80090e2:	2a00      	cmp	r2, #0
 80090e4:	dd07      	ble.n	80090f6 <_dtoa_r+0x9be>
 80090e6:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 80090ea:	d0ed      	beq.n	80090c8 <_dtoa_r+0x990>
 80090ec:	f10a 0301 	add.w	r3, sl, #1
 80090f0:	f88b 3000 	strb.w	r3, [fp]
 80090f4:	e527      	b.n	8008b46 <_dtoa_r+0x40e>
 80090f6:	9b04      	ldr	r3, [sp, #16]
 80090f8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80090fa:	f803 ac01 	strb.w	sl, [r3, #-1]
 80090fe:	4293      	cmp	r3, r2
 8009100:	d029      	beq.n	8009156 <_dtoa_r+0xa1e>
 8009102:	9901      	ldr	r1, [sp, #4]
 8009104:	2300      	movs	r3, #0
 8009106:	220a      	movs	r2, #10
 8009108:	4648      	mov	r0, r9
 800910a:	f000 f9d5 	bl	80094b8 <__multadd>
 800910e:	45a8      	cmp	r8, r5
 8009110:	9001      	str	r0, [sp, #4]
 8009112:	f04f 0300 	mov.w	r3, #0
 8009116:	f04f 020a 	mov.w	r2, #10
 800911a:	4641      	mov	r1, r8
 800911c:	4648      	mov	r0, r9
 800911e:	d107      	bne.n	8009130 <_dtoa_r+0x9f8>
 8009120:	f000 f9ca 	bl	80094b8 <__multadd>
 8009124:	4680      	mov	r8, r0
 8009126:	4605      	mov	r5, r0
 8009128:	9b04      	ldr	r3, [sp, #16]
 800912a:	3301      	adds	r3, #1
 800912c:	9304      	str	r3, [sp, #16]
 800912e:	e776      	b.n	800901e <_dtoa_r+0x8e6>
 8009130:	f000 f9c2 	bl	80094b8 <__multadd>
 8009134:	4629      	mov	r1, r5
 8009136:	4680      	mov	r8, r0
 8009138:	2300      	movs	r3, #0
 800913a:	220a      	movs	r2, #10
 800913c:	4648      	mov	r0, r9
 800913e:	f000 f9bb 	bl	80094b8 <__multadd>
 8009142:	4605      	mov	r5, r0
 8009144:	e7f0      	b.n	8009128 <_dtoa_r+0x9f0>
 8009146:	f1bb 0f00 	cmp.w	fp, #0
 800914a:	bfcc      	ite	gt
 800914c:	465e      	movgt	r6, fp
 800914e:	2601      	movle	r6, #1
 8009150:	443e      	add	r6, r7
 8009152:	f04f 0800 	mov.w	r8, #0
 8009156:	9901      	ldr	r1, [sp, #4]
 8009158:	2201      	movs	r2, #1
 800915a:	4648      	mov	r0, r9
 800915c:	f000 fb50 	bl	8009800 <__lshift>
 8009160:	4621      	mov	r1, r4
 8009162:	9001      	str	r0, [sp, #4]
 8009164:	f000 fbb8 	bl	80098d8 <__mcmp>
 8009168:	2800      	cmp	r0, #0
 800916a:	dcb0      	bgt.n	80090ce <_dtoa_r+0x996>
 800916c:	d102      	bne.n	8009174 <_dtoa_r+0xa3c>
 800916e:	f01a 0f01 	tst.w	sl, #1
 8009172:	d1ac      	bne.n	80090ce <_dtoa_r+0x996>
 8009174:	4633      	mov	r3, r6
 8009176:	461e      	mov	r6, r3
 8009178:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800917c:	2a30      	cmp	r2, #48	@ 0x30
 800917e:	d0fa      	beq.n	8009176 <_dtoa_r+0xa3e>
 8009180:	e4e1      	b.n	8008b46 <_dtoa_r+0x40e>
 8009182:	429f      	cmp	r7, r3
 8009184:	d1a4      	bne.n	80090d0 <_dtoa_r+0x998>
 8009186:	9b05      	ldr	r3, [sp, #20]
 8009188:	3301      	adds	r3, #1
 800918a:	9305      	str	r3, [sp, #20]
 800918c:	2331      	movs	r3, #49	@ 0x31
 800918e:	703b      	strb	r3, [r7, #0]
 8009190:	e4d9      	b.n	8008b46 <_dtoa_r+0x40e>
 8009192:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8009194:	4f16      	ldr	r7, [pc, #88]	@ (80091f0 <_dtoa_r+0xab8>)
 8009196:	b11b      	cbz	r3, 80091a0 <_dtoa_r+0xa68>
 8009198:	f107 0308 	add.w	r3, r7, #8
 800919c:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 800919e:	6013      	str	r3, [r2, #0]
 80091a0:	4638      	mov	r0, r7
 80091a2:	b011      	add	sp, #68	@ 0x44
 80091a4:	ecbd 8b02 	vpop	{d8}
 80091a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80091ac:	9b07      	ldr	r3, [sp, #28]
 80091ae:	2b01      	cmp	r3, #1
 80091b0:	f77f ae2c 	ble.w	8008e0c <_dtoa_r+0x6d4>
 80091b4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80091b6:	930b      	str	r3, [sp, #44]	@ 0x2c
 80091b8:	2001      	movs	r0, #1
 80091ba:	e64c      	b.n	8008e56 <_dtoa_r+0x71e>
 80091bc:	f1bb 0f00 	cmp.w	fp, #0
 80091c0:	f77f aed8 	ble.w	8008f74 <_dtoa_r+0x83c>
 80091c4:	463e      	mov	r6, r7
 80091c6:	9801      	ldr	r0, [sp, #4]
 80091c8:	4621      	mov	r1, r4
 80091ca:	f7ff fa2c 	bl	8008626 <quorem>
 80091ce:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
 80091d2:	f806 ab01 	strb.w	sl, [r6], #1
 80091d6:	1bf2      	subs	r2, r6, r7
 80091d8:	4593      	cmp	fp, r2
 80091da:	ddb4      	ble.n	8009146 <_dtoa_r+0xa0e>
 80091dc:	9901      	ldr	r1, [sp, #4]
 80091de:	2300      	movs	r3, #0
 80091e0:	220a      	movs	r2, #10
 80091e2:	4648      	mov	r0, r9
 80091e4:	f000 f968 	bl	80094b8 <__multadd>
 80091e8:	9001      	str	r0, [sp, #4]
 80091ea:	e7ec      	b.n	80091c6 <_dtoa_r+0xa8e>
 80091ec:	0800a38c 	.word	0x0800a38c
 80091f0:	0800a310 	.word	0x0800a310

080091f4 <_free_r>:
 80091f4:	b538      	push	{r3, r4, r5, lr}
 80091f6:	4605      	mov	r5, r0
 80091f8:	2900      	cmp	r1, #0
 80091fa:	d041      	beq.n	8009280 <_free_r+0x8c>
 80091fc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009200:	1f0c      	subs	r4, r1, #4
 8009202:	2b00      	cmp	r3, #0
 8009204:	bfb8      	it	lt
 8009206:	18e4      	addlt	r4, r4, r3
 8009208:	f000 f8e8 	bl	80093dc <__malloc_lock>
 800920c:	4a1d      	ldr	r2, [pc, #116]	@ (8009284 <_free_r+0x90>)
 800920e:	6813      	ldr	r3, [r2, #0]
 8009210:	b933      	cbnz	r3, 8009220 <_free_r+0x2c>
 8009212:	6063      	str	r3, [r4, #4]
 8009214:	6014      	str	r4, [r2, #0]
 8009216:	4628      	mov	r0, r5
 8009218:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800921c:	f000 b8e4 	b.w	80093e8 <__malloc_unlock>
 8009220:	42a3      	cmp	r3, r4
 8009222:	d908      	bls.n	8009236 <_free_r+0x42>
 8009224:	6820      	ldr	r0, [r4, #0]
 8009226:	1821      	adds	r1, r4, r0
 8009228:	428b      	cmp	r3, r1
 800922a:	bf01      	itttt	eq
 800922c:	6819      	ldreq	r1, [r3, #0]
 800922e:	685b      	ldreq	r3, [r3, #4]
 8009230:	1809      	addeq	r1, r1, r0
 8009232:	6021      	streq	r1, [r4, #0]
 8009234:	e7ed      	b.n	8009212 <_free_r+0x1e>
 8009236:	461a      	mov	r2, r3
 8009238:	685b      	ldr	r3, [r3, #4]
 800923a:	b10b      	cbz	r3, 8009240 <_free_r+0x4c>
 800923c:	42a3      	cmp	r3, r4
 800923e:	d9fa      	bls.n	8009236 <_free_r+0x42>
 8009240:	6811      	ldr	r1, [r2, #0]
 8009242:	1850      	adds	r0, r2, r1
 8009244:	42a0      	cmp	r0, r4
 8009246:	d10b      	bne.n	8009260 <_free_r+0x6c>
 8009248:	6820      	ldr	r0, [r4, #0]
 800924a:	4401      	add	r1, r0
 800924c:	1850      	adds	r0, r2, r1
 800924e:	4283      	cmp	r3, r0
 8009250:	6011      	str	r1, [r2, #0]
 8009252:	d1e0      	bne.n	8009216 <_free_r+0x22>
 8009254:	6818      	ldr	r0, [r3, #0]
 8009256:	685b      	ldr	r3, [r3, #4]
 8009258:	6053      	str	r3, [r2, #4]
 800925a:	4408      	add	r0, r1
 800925c:	6010      	str	r0, [r2, #0]
 800925e:	e7da      	b.n	8009216 <_free_r+0x22>
 8009260:	d902      	bls.n	8009268 <_free_r+0x74>
 8009262:	230c      	movs	r3, #12
 8009264:	602b      	str	r3, [r5, #0]
 8009266:	e7d6      	b.n	8009216 <_free_r+0x22>
 8009268:	6820      	ldr	r0, [r4, #0]
 800926a:	1821      	adds	r1, r4, r0
 800926c:	428b      	cmp	r3, r1
 800926e:	bf04      	itt	eq
 8009270:	6819      	ldreq	r1, [r3, #0]
 8009272:	685b      	ldreq	r3, [r3, #4]
 8009274:	6063      	str	r3, [r4, #4]
 8009276:	bf04      	itt	eq
 8009278:	1809      	addeq	r1, r1, r0
 800927a:	6021      	streq	r1, [r4, #0]
 800927c:	6054      	str	r4, [r2, #4]
 800927e:	e7ca      	b.n	8009216 <_free_r+0x22>
 8009280:	bd38      	pop	{r3, r4, r5, pc}
 8009282:	bf00      	nop
 8009284:	24000580 	.word	0x24000580

08009288 <malloc>:
 8009288:	4b02      	ldr	r3, [pc, #8]	@ (8009294 <malloc+0xc>)
 800928a:	4601      	mov	r1, r0
 800928c:	6818      	ldr	r0, [r3, #0]
 800928e:	f000 b825 	b.w	80092dc <_malloc_r>
 8009292:	bf00      	nop
 8009294:	2400001c 	.word	0x2400001c

08009298 <sbrk_aligned>:
 8009298:	b570      	push	{r4, r5, r6, lr}
 800929a:	4e0f      	ldr	r6, [pc, #60]	@ (80092d8 <sbrk_aligned+0x40>)
 800929c:	460c      	mov	r4, r1
 800929e:	6831      	ldr	r1, [r6, #0]
 80092a0:	4605      	mov	r5, r0
 80092a2:	b911      	cbnz	r1, 80092aa <sbrk_aligned+0x12>
 80092a4:	f000 fe92 	bl	8009fcc <_sbrk_r>
 80092a8:	6030      	str	r0, [r6, #0]
 80092aa:	4621      	mov	r1, r4
 80092ac:	4628      	mov	r0, r5
 80092ae:	f000 fe8d 	bl	8009fcc <_sbrk_r>
 80092b2:	1c43      	adds	r3, r0, #1
 80092b4:	d103      	bne.n	80092be <sbrk_aligned+0x26>
 80092b6:	f04f 34ff 	mov.w	r4, #4294967295
 80092ba:	4620      	mov	r0, r4
 80092bc:	bd70      	pop	{r4, r5, r6, pc}
 80092be:	1cc4      	adds	r4, r0, #3
 80092c0:	f024 0403 	bic.w	r4, r4, #3
 80092c4:	42a0      	cmp	r0, r4
 80092c6:	d0f8      	beq.n	80092ba <sbrk_aligned+0x22>
 80092c8:	1a21      	subs	r1, r4, r0
 80092ca:	4628      	mov	r0, r5
 80092cc:	f000 fe7e 	bl	8009fcc <_sbrk_r>
 80092d0:	3001      	adds	r0, #1
 80092d2:	d1f2      	bne.n	80092ba <sbrk_aligned+0x22>
 80092d4:	e7ef      	b.n	80092b6 <sbrk_aligned+0x1e>
 80092d6:	bf00      	nop
 80092d8:	2400057c 	.word	0x2400057c

080092dc <_malloc_r>:
 80092dc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80092e0:	1ccd      	adds	r5, r1, #3
 80092e2:	f025 0503 	bic.w	r5, r5, #3
 80092e6:	3508      	adds	r5, #8
 80092e8:	2d0c      	cmp	r5, #12
 80092ea:	bf38      	it	cc
 80092ec:	250c      	movcc	r5, #12
 80092ee:	2d00      	cmp	r5, #0
 80092f0:	4606      	mov	r6, r0
 80092f2:	db01      	blt.n	80092f8 <_malloc_r+0x1c>
 80092f4:	42a9      	cmp	r1, r5
 80092f6:	d904      	bls.n	8009302 <_malloc_r+0x26>
 80092f8:	230c      	movs	r3, #12
 80092fa:	6033      	str	r3, [r6, #0]
 80092fc:	2000      	movs	r0, #0
 80092fe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009302:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80093d8 <_malloc_r+0xfc>
 8009306:	f000 f869 	bl	80093dc <__malloc_lock>
 800930a:	f8d8 3000 	ldr.w	r3, [r8]
 800930e:	461c      	mov	r4, r3
 8009310:	bb44      	cbnz	r4, 8009364 <_malloc_r+0x88>
 8009312:	4629      	mov	r1, r5
 8009314:	4630      	mov	r0, r6
 8009316:	f7ff ffbf 	bl	8009298 <sbrk_aligned>
 800931a:	1c43      	adds	r3, r0, #1
 800931c:	4604      	mov	r4, r0
 800931e:	d158      	bne.n	80093d2 <_malloc_r+0xf6>
 8009320:	f8d8 4000 	ldr.w	r4, [r8]
 8009324:	4627      	mov	r7, r4
 8009326:	2f00      	cmp	r7, #0
 8009328:	d143      	bne.n	80093b2 <_malloc_r+0xd6>
 800932a:	2c00      	cmp	r4, #0
 800932c:	d04b      	beq.n	80093c6 <_malloc_r+0xea>
 800932e:	6823      	ldr	r3, [r4, #0]
 8009330:	4639      	mov	r1, r7
 8009332:	4630      	mov	r0, r6
 8009334:	eb04 0903 	add.w	r9, r4, r3
 8009338:	f000 fe48 	bl	8009fcc <_sbrk_r>
 800933c:	4581      	cmp	r9, r0
 800933e:	d142      	bne.n	80093c6 <_malloc_r+0xea>
 8009340:	6821      	ldr	r1, [r4, #0]
 8009342:	1a6d      	subs	r5, r5, r1
 8009344:	4629      	mov	r1, r5
 8009346:	4630      	mov	r0, r6
 8009348:	f7ff ffa6 	bl	8009298 <sbrk_aligned>
 800934c:	3001      	adds	r0, #1
 800934e:	d03a      	beq.n	80093c6 <_malloc_r+0xea>
 8009350:	6823      	ldr	r3, [r4, #0]
 8009352:	442b      	add	r3, r5
 8009354:	6023      	str	r3, [r4, #0]
 8009356:	f8d8 3000 	ldr.w	r3, [r8]
 800935a:	685a      	ldr	r2, [r3, #4]
 800935c:	bb62      	cbnz	r2, 80093b8 <_malloc_r+0xdc>
 800935e:	f8c8 7000 	str.w	r7, [r8]
 8009362:	e00f      	b.n	8009384 <_malloc_r+0xa8>
 8009364:	6822      	ldr	r2, [r4, #0]
 8009366:	1b52      	subs	r2, r2, r5
 8009368:	d420      	bmi.n	80093ac <_malloc_r+0xd0>
 800936a:	2a0b      	cmp	r2, #11
 800936c:	d917      	bls.n	800939e <_malloc_r+0xc2>
 800936e:	1961      	adds	r1, r4, r5
 8009370:	42a3      	cmp	r3, r4
 8009372:	6025      	str	r5, [r4, #0]
 8009374:	bf18      	it	ne
 8009376:	6059      	strne	r1, [r3, #4]
 8009378:	6863      	ldr	r3, [r4, #4]
 800937a:	bf08      	it	eq
 800937c:	f8c8 1000 	streq.w	r1, [r8]
 8009380:	5162      	str	r2, [r4, r5]
 8009382:	604b      	str	r3, [r1, #4]
 8009384:	4630      	mov	r0, r6
 8009386:	f000 f82f 	bl	80093e8 <__malloc_unlock>
 800938a:	f104 000b 	add.w	r0, r4, #11
 800938e:	1d23      	adds	r3, r4, #4
 8009390:	f020 0007 	bic.w	r0, r0, #7
 8009394:	1ac2      	subs	r2, r0, r3
 8009396:	bf1c      	itt	ne
 8009398:	1a1b      	subne	r3, r3, r0
 800939a:	50a3      	strne	r3, [r4, r2]
 800939c:	e7af      	b.n	80092fe <_malloc_r+0x22>
 800939e:	6862      	ldr	r2, [r4, #4]
 80093a0:	42a3      	cmp	r3, r4
 80093a2:	bf0c      	ite	eq
 80093a4:	f8c8 2000 	streq.w	r2, [r8]
 80093a8:	605a      	strne	r2, [r3, #4]
 80093aa:	e7eb      	b.n	8009384 <_malloc_r+0xa8>
 80093ac:	4623      	mov	r3, r4
 80093ae:	6864      	ldr	r4, [r4, #4]
 80093b0:	e7ae      	b.n	8009310 <_malloc_r+0x34>
 80093b2:	463c      	mov	r4, r7
 80093b4:	687f      	ldr	r7, [r7, #4]
 80093b6:	e7b6      	b.n	8009326 <_malloc_r+0x4a>
 80093b8:	461a      	mov	r2, r3
 80093ba:	685b      	ldr	r3, [r3, #4]
 80093bc:	42a3      	cmp	r3, r4
 80093be:	d1fb      	bne.n	80093b8 <_malloc_r+0xdc>
 80093c0:	2300      	movs	r3, #0
 80093c2:	6053      	str	r3, [r2, #4]
 80093c4:	e7de      	b.n	8009384 <_malloc_r+0xa8>
 80093c6:	230c      	movs	r3, #12
 80093c8:	6033      	str	r3, [r6, #0]
 80093ca:	4630      	mov	r0, r6
 80093cc:	f000 f80c 	bl	80093e8 <__malloc_unlock>
 80093d0:	e794      	b.n	80092fc <_malloc_r+0x20>
 80093d2:	6005      	str	r5, [r0, #0]
 80093d4:	e7d6      	b.n	8009384 <_malloc_r+0xa8>
 80093d6:	bf00      	nop
 80093d8:	24000580 	.word	0x24000580

080093dc <__malloc_lock>:
 80093dc:	4801      	ldr	r0, [pc, #4]	@ (80093e4 <__malloc_lock+0x8>)
 80093de:	f7ff b920 	b.w	8008622 <__retarget_lock_acquire_recursive>
 80093e2:	bf00      	nop
 80093e4:	24000578 	.word	0x24000578

080093e8 <__malloc_unlock>:
 80093e8:	4801      	ldr	r0, [pc, #4]	@ (80093f0 <__malloc_unlock+0x8>)
 80093ea:	f7ff b91b 	b.w	8008624 <__retarget_lock_release_recursive>
 80093ee:	bf00      	nop
 80093f0:	24000578 	.word	0x24000578

080093f4 <_Balloc>:
 80093f4:	b570      	push	{r4, r5, r6, lr}
 80093f6:	69c6      	ldr	r6, [r0, #28]
 80093f8:	4604      	mov	r4, r0
 80093fa:	460d      	mov	r5, r1
 80093fc:	b976      	cbnz	r6, 800941c <_Balloc+0x28>
 80093fe:	2010      	movs	r0, #16
 8009400:	f7ff ff42 	bl	8009288 <malloc>
 8009404:	4602      	mov	r2, r0
 8009406:	61e0      	str	r0, [r4, #28]
 8009408:	b920      	cbnz	r0, 8009414 <_Balloc+0x20>
 800940a:	4b18      	ldr	r3, [pc, #96]	@ (800946c <_Balloc+0x78>)
 800940c:	4818      	ldr	r0, [pc, #96]	@ (8009470 <_Balloc+0x7c>)
 800940e:	216b      	movs	r1, #107	@ 0x6b
 8009410:	f000 fdfa 	bl	800a008 <__assert_func>
 8009414:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009418:	6006      	str	r6, [r0, #0]
 800941a:	60c6      	str	r6, [r0, #12]
 800941c:	69e6      	ldr	r6, [r4, #28]
 800941e:	68f3      	ldr	r3, [r6, #12]
 8009420:	b183      	cbz	r3, 8009444 <_Balloc+0x50>
 8009422:	69e3      	ldr	r3, [r4, #28]
 8009424:	68db      	ldr	r3, [r3, #12]
 8009426:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800942a:	b9b8      	cbnz	r0, 800945c <_Balloc+0x68>
 800942c:	2101      	movs	r1, #1
 800942e:	fa01 f605 	lsl.w	r6, r1, r5
 8009432:	1d72      	adds	r2, r6, #5
 8009434:	0092      	lsls	r2, r2, #2
 8009436:	4620      	mov	r0, r4
 8009438:	f000 fe04 	bl	800a044 <_calloc_r>
 800943c:	b160      	cbz	r0, 8009458 <_Balloc+0x64>
 800943e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8009442:	e00e      	b.n	8009462 <_Balloc+0x6e>
 8009444:	2221      	movs	r2, #33	@ 0x21
 8009446:	2104      	movs	r1, #4
 8009448:	4620      	mov	r0, r4
 800944a:	f000 fdfb 	bl	800a044 <_calloc_r>
 800944e:	69e3      	ldr	r3, [r4, #28]
 8009450:	60f0      	str	r0, [r6, #12]
 8009452:	68db      	ldr	r3, [r3, #12]
 8009454:	2b00      	cmp	r3, #0
 8009456:	d1e4      	bne.n	8009422 <_Balloc+0x2e>
 8009458:	2000      	movs	r0, #0
 800945a:	bd70      	pop	{r4, r5, r6, pc}
 800945c:	6802      	ldr	r2, [r0, #0]
 800945e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8009462:	2300      	movs	r3, #0
 8009464:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8009468:	e7f7      	b.n	800945a <_Balloc+0x66>
 800946a:	bf00      	nop
 800946c:	0800a31d 	.word	0x0800a31d
 8009470:	0800a39d 	.word	0x0800a39d

08009474 <_Bfree>:
 8009474:	b570      	push	{r4, r5, r6, lr}
 8009476:	69c6      	ldr	r6, [r0, #28]
 8009478:	4605      	mov	r5, r0
 800947a:	460c      	mov	r4, r1
 800947c:	b976      	cbnz	r6, 800949c <_Bfree+0x28>
 800947e:	2010      	movs	r0, #16
 8009480:	f7ff ff02 	bl	8009288 <malloc>
 8009484:	4602      	mov	r2, r0
 8009486:	61e8      	str	r0, [r5, #28]
 8009488:	b920      	cbnz	r0, 8009494 <_Bfree+0x20>
 800948a:	4b09      	ldr	r3, [pc, #36]	@ (80094b0 <_Bfree+0x3c>)
 800948c:	4809      	ldr	r0, [pc, #36]	@ (80094b4 <_Bfree+0x40>)
 800948e:	218f      	movs	r1, #143	@ 0x8f
 8009490:	f000 fdba 	bl	800a008 <__assert_func>
 8009494:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009498:	6006      	str	r6, [r0, #0]
 800949a:	60c6      	str	r6, [r0, #12]
 800949c:	b13c      	cbz	r4, 80094ae <_Bfree+0x3a>
 800949e:	69eb      	ldr	r3, [r5, #28]
 80094a0:	6862      	ldr	r2, [r4, #4]
 80094a2:	68db      	ldr	r3, [r3, #12]
 80094a4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80094a8:	6021      	str	r1, [r4, #0]
 80094aa:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80094ae:	bd70      	pop	{r4, r5, r6, pc}
 80094b0:	0800a31d 	.word	0x0800a31d
 80094b4:	0800a39d 	.word	0x0800a39d

080094b8 <__multadd>:
 80094b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80094bc:	690d      	ldr	r5, [r1, #16]
 80094be:	4607      	mov	r7, r0
 80094c0:	460c      	mov	r4, r1
 80094c2:	461e      	mov	r6, r3
 80094c4:	f101 0c14 	add.w	ip, r1, #20
 80094c8:	2000      	movs	r0, #0
 80094ca:	f8dc 3000 	ldr.w	r3, [ip]
 80094ce:	b299      	uxth	r1, r3
 80094d0:	fb02 6101 	mla	r1, r2, r1, r6
 80094d4:	0c1e      	lsrs	r6, r3, #16
 80094d6:	0c0b      	lsrs	r3, r1, #16
 80094d8:	fb02 3306 	mla	r3, r2, r6, r3
 80094dc:	b289      	uxth	r1, r1
 80094de:	3001      	adds	r0, #1
 80094e0:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80094e4:	4285      	cmp	r5, r0
 80094e6:	f84c 1b04 	str.w	r1, [ip], #4
 80094ea:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80094ee:	dcec      	bgt.n	80094ca <__multadd+0x12>
 80094f0:	b30e      	cbz	r6, 8009536 <__multadd+0x7e>
 80094f2:	68a3      	ldr	r3, [r4, #8]
 80094f4:	42ab      	cmp	r3, r5
 80094f6:	dc19      	bgt.n	800952c <__multadd+0x74>
 80094f8:	6861      	ldr	r1, [r4, #4]
 80094fa:	4638      	mov	r0, r7
 80094fc:	3101      	adds	r1, #1
 80094fe:	f7ff ff79 	bl	80093f4 <_Balloc>
 8009502:	4680      	mov	r8, r0
 8009504:	b928      	cbnz	r0, 8009512 <__multadd+0x5a>
 8009506:	4602      	mov	r2, r0
 8009508:	4b0c      	ldr	r3, [pc, #48]	@ (800953c <__multadd+0x84>)
 800950a:	480d      	ldr	r0, [pc, #52]	@ (8009540 <__multadd+0x88>)
 800950c:	21ba      	movs	r1, #186	@ 0xba
 800950e:	f000 fd7b 	bl	800a008 <__assert_func>
 8009512:	6922      	ldr	r2, [r4, #16]
 8009514:	3202      	adds	r2, #2
 8009516:	f104 010c 	add.w	r1, r4, #12
 800951a:	0092      	lsls	r2, r2, #2
 800951c:	300c      	adds	r0, #12
 800951e:	f000 fd65 	bl	8009fec <memcpy>
 8009522:	4621      	mov	r1, r4
 8009524:	4638      	mov	r0, r7
 8009526:	f7ff ffa5 	bl	8009474 <_Bfree>
 800952a:	4644      	mov	r4, r8
 800952c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8009530:	3501      	adds	r5, #1
 8009532:	615e      	str	r6, [r3, #20]
 8009534:	6125      	str	r5, [r4, #16]
 8009536:	4620      	mov	r0, r4
 8009538:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800953c:	0800a38c 	.word	0x0800a38c
 8009540:	0800a39d 	.word	0x0800a39d

08009544 <__hi0bits>:
 8009544:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8009548:	4603      	mov	r3, r0
 800954a:	bf36      	itet	cc
 800954c:	0403      	lslcc	r3, r0, #16
 800954e:	2000      	movcs	r0, #0
 8009550:	2010      	movcc	r0, #16
 8009552:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8009556:	bf3c      	itt	cc
 8009558:	021b      	lslcc	r3, r3, #8
 800955a:	3008      	addcc	r0, #8
 800955c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009560:	bf3c      	itt	cc
 8009562:	011b      	lslcc	r3, r3, #4
 8009564:	3004      	addcc	r0, #4
 8009566:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800956a:	bf3c      	itt	cc
 800956c:	009b      	lslcc	r3, r3, #2
 800956e:	3002      	addcc	r0, #2
 8009570:	2b00      	cmp	r3, #0
 8009572:	db05      	blt.n	8009580 <__hi0bits+0x3c>
 8009574:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8009578:	f100 0001 	add.w	r0, r0, #1
 800957c:	bf08      	it	eq
 800957e:	2020      	moveq	r0, #32
 8009580:	4770      	bx	lr

08009582 <__lo0bits>:
 8009582:	6803      	ldr	r3, [r0, #0]
 8009584:	4602      	mov	r2, r0
 8009586:	f013 0007 	ands.w	r0, r3, #7
 800958a:	d00b      	beq.n	80095a4 <__lo0bits+0x22>
 800958c:	07d9      	lsls	r1, r3, #31
 800958e:	d421      	bmi.n	80095d4 <__lo0bits+0x52>
 8009590:	0798      	lsls	r0, r3, #30
 8009592:	bf49      	itett	mi
 8009594:	085b      	lsrmi	r3, r3, #1
 8009596:	089b      	lsrpl	r3, r3, #2
 8009598:	2001      	movmi	r0, #1
 800959a:	6013      	strmi	r3, [r2, #0]
 800959c:	bf5c      	itt	pl
 800959e:	6013      	strpl	r3, [r2, #0]
 80095a0:	2002      	movpl	r0, #2
 80095a2:	4770      	bx	lr
 80095a4:	b299      	uxth	r1, r3
 80095a6:	b909      	cbnz	r1, 80095ac <__lo0bits+0x2a>
 80095a8:	0c1b      	lsrs	r3, r3, #16
 80095aa:	2010      	movs	r0, #16
 80095ac:	b2d9      	uxtb	r1, r3
 80095ae:	b909      	cbnz	r1, 80095b4 <__lo0bits+0x32>
 80095b0:	3008      	adds	r0, #8
 80095b2:	0a1b      	lsrs	r3, r3, #8
 80095b4:	0719      	lsls	r1, r3, #28
 80095b6:	bf04      	itt	eq
 80095b8:	091b      	lsreq	r3, r3, #4
 80095ba:	3004      	addeq	r0, #4
 80095bc:	0799      	lsls	r1, r3, #30
 80095be:	bf04      	itt	eq
 80095c0:	089b      	lsreq	r3, r3, #2
 80095c2:	3002      	addeq	r0, #2
 80095c4:	07d9      	lsls	r1, r3, #31
 80095c6:	d403      	bmi.n	80095d0 <__lo0bits+0x4e>
 80095c8:	085b      	lsrs	r3, r3, #1
 80095ca:	f100 0001 	add.w	r0, r0, #1
 80095ce:	d003      	beq.n	80095d8 <__lo0bits+0x56>
 80095d0:	6013      	str	r3, [r2, #0]
 80095d2:	4770      	bx	lr
 80095d4:	2000      	movs	r0, #0
 80095d6:	4770      	bx	lr
 80095d8:	2020      	movs	r0, #32
 80095da:	4770      	bx	lr

080095dc <__i2b>:
 80095dc:	b510      	push	{r4, lr}
 80095de:	460c      	mov	r4, r1
 80095e0:	2101      	movs	r1, #1
 80095e2:	f7ff ff07 	bl	80093f4 <_Balloc>
 80095e6:	4602      	mov	r2, r0
 80095e8:	b928      	cbnz	r0, 80095f6 <__i2b+0x1a>
 80095ea:	4b05      	ldr	r3, [pc, #20]	@ (8009600 <__i2b+0x24>)
 80095ec:	4805      	ldr	r0, [pc, #20]	@ (8009604 <__i2b+0x28>)
 80095ee:	f240 1145 	movw	r1, #325	@ 0x145
 80095f2:	f000 fd09 	bl	800a008 <__assert_func>
 80095f6:	2301      	movs	r3, #1
 80095f8:	6144      	str	r4, [r0, #20]
 80095fa:	6103      	str	r3, [r0, #16]
 80095fc:	bd10      	pop	{r4, pc}
 80095fe:	bf00      	nop
 8009600:	0800a38c 	.word	0x0800a38c
 8009604:	0800a39d 	.word	0x0800a39d

08009608 <__multiply>:
 8009608:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800960c:	4617      	mov	r7, r2
 800960e:	690a      	ldr	r2, [r1, #16]
 8009610:	693b      	ldr	r3, [r7, #16]
 8009612:	429a      	cmp	r2, r3
 8009614:	bfa8      	it	ge
 8009616:	463b      	movge	r3, r7
 8009618:	4689      	mov	r9, r1
 800961a:	bfa4      	itt	ge
 800961c:	460f      	movge	r7, r1
 800961e:	4699      	movge	r9, r3
 8009620:	693d      	ldr	r5, [r7, #16]
 8009622:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8009626:	68bb      	ldr	r3, [r7, #8]
 8009628:	6879      	ldr	r1, [r7, #4]
 800962a:	eb05 060a 	add.w	r6, r5, sl
 800962e:	42b3      	cmp	r3, r6
 8009630:	b085      	sub	sp, #20
 8009632:	bfb8      	it	lt
 8009634:	3101      	addlt	r1, #1
 8009636:	f7ff fedd 	bl	80093f4 <_Balloc>
 800963a:	b930      	cbnz	r0, 800964a <__multiply+0x42>
 800963c:	4602      	mov	r2, r0
 800963e:	4b41      	ldr	r3, [pc, #260]	@ (8009744 <__multiply+0x13c>)
 8009640:	4841      	ldr	r0, [pc, #260]	@ (8009748 <__multiply+0x140>)
 8009642:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8009646:	f000 fcdf 	bl	800a008 <__assert_func>
 800964a:	f100 0414 	add.w	r4, r0, #20
 800964e:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 8009652:	4623      	mov	r3, r4
 8009654:	2200      	movs	r2, #0
 8009656:	4573      	cmp	r3, lr
 8009658:	d320      	bcc.n	800969c <__multiply+0x94>
 800965a:	f107 0814 	add.w	r8, r7, #20
 800965e:	f109 0114 	add.w	r1, r9, #20
 8009662:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 8009666:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 800966a:	9302      	str	r3, [sp, #8]
 800966c:	1beb      	subs	r3, r5, r7
 800966e:	3b15      	subs	r3, #21
 8009670:	f023 0303 	bic.w	r3, r3, #3
 8009674:	3304      	adds	r3, #4
 8009676:	3715      	adds	r7, #21
 8009678:	42bd      	cmp	r5, r7
 800967a:	bf38      	it	cc
 800967c:	2304      	movcc	r3, #4
 800967e:	9301      	str	r3, [sp, #4]
 8009680:	9b02      	ldr	r3, [sp, #8]
 8009682:	9103      	str	r1, [sp, #12]
 8009684:	428b      	cmp	r3, r1
 8009686:	d80c      	bhi.n	80096a2 <__multiply+0x9a>
 8009688:	2e00      	cmp	r6, #0
 800968a:	dd03      	ble.n	8009694 <__multiply+0x8c>
 800968c:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8009690:	2b00      	cmp	r3, #0
 8009692:	d055      	beq.n	8009740 <__multiply+0x138>
 8009694:	6106      	str	r6, [r0, #16]
 8009696:	b005      	add	sp, #20
 8009698:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800969c:	f843 2b04 	str.w	r2, [r3], #4
 80096a0:	e7d9      	b.n	8009656 <__multiply+0x4e>
 80096a2:	f8b1 a000 	ldrh.w	sl, [r1]
 80096a6:	f1ba 0f00 	cmp.w	sl, #0
 80096aa:	d01f      	beq.n	80096ec <__multiply+0xe4>
 80096ac:	46c4      	mov	ip, r8
 80096ae:	46a1      	mov	r9, r4
 80096b0:	2700      	movs	r7, #0
 80096b2:	f85c 2b04 	ldr.w	r2, [ip], #4
 80096b6:	f8d9 3000 	ldr.w	r3, [r9]
 80096ba:	fa1f fb82 	uxth.w	fp, r2
 80096be:	b29b      	uxth	r3, r3
 80096c0:	fb0a 330b 	mla	r3, sl, fp, r3
 80096c4:	443b      	add	r3, r7
 80096c6:	f8d9 7000 	ldr.w	r7, [r9]
 80096ca:	0c12      	lsrs	r2, r2, #16
 80096cc:	0c3f      	lsrs	r7, r7, #16
 80096ce:	fb0a 7202 	mla	r2, sl, r2, r7
 80096d2:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 80096d6:	b29b      	uxth	r3, r3
 80096d8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80096dc:	4565      	cmp	r5, ip
 80096de:	f849 3b04 	str.w	r3, [r9], #4
 80096e2:	ea4f 4712 	mov.w	r7, r2, lsr #16
 80096e6:	d8e4      	bhi.n	80096b2 <__multiply+0xaa>
 80096e8:	9b01      	ldr	r3, [sp, #4]
 80096ea:	50e7      	str	r7, [r4, r3]
 80096ec:	9b03      	ldr	r3, [sp, #12]
 80096ee:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 80096f2:	3104      	adds	r1, #4
 80096f4:	f1b9 0f00 	cmp.w	r9, #0
 80096f8:	d020      	beq.n	800973c <__multiply+0x134>
 80096fa:	6823      	ldr	r3, [r4, #0]
 80096fc:	4647      	mov	r7, r8
 80096fe:	46a4      	mov	ip, r4
 8009700:	f04f 0a00 	mov.w	sl, #0
 8009704:	f8b7 b000 	ldrh.w	fp, [r7]
 8009708:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 800970c:	fb09 220b 	mla	r2, r9, fp, r2
 8009710:	4452      	add	r2, sl
 8009712:	b29b      	uxth	r3, r3
 8009714:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009718:	f84c 3b04 	str.w	r3, [ip], #4
 800971c:	f857 3b04 	ldr.w	r3, [r7], #4
 8009720:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8009724:	f8bc 3000 	ldrh.w	r3, [ip]
 8009728:	fb09 330a 	mla	r3, r9, sl, r3
 800972c:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 8009730:	42bd      	cmp	r5, r7
 8009732:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8009736:	d8e5      	bhi.n	8009704 <__multiply+0xfc>
 8009738:	9a01      	ldr	r2, [sp, #4]
 800973a:	50a3      	str	r3, [r4, r2]
 800973c:	3404      	adds	r4, #4
 800973e:	e79f      	b.n	8009680 <__multiply+0x78>
 8009740:	3e01      	subs	r6, #1
 8009742:	e7a1      	b.n	8009688 <__multiply+0x80>
 8009744:	0800a38c 	.word	0x0800a38c
 8009748:	0800a39d 	.word	0x0800a39d

0800974c <__pow5mult>:
 800974c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009750:	4615      	mov	r5, r2
 8009752:	f012 0203 	ands.w	r2, r2, #3
 8009756:	4607      	mov	r7, r0
 8009758:	460e      	mov	r6, r1
 800975a:	d007      	beq.n	800976c <__pow5mult+0x20>
 800975c:	4c25      	ldr	r4, [pc, #148]	@ (80097f4 <__pow5mult+0xa8>)
 800975e:	3a01      	subs	r2, #1
 8009760:	2300      	movs	r3, #0
 8009762:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8009766:	f7ff fea7 	bl	80094b8 <__multadd>
 800976a:	4606      	mov	r6, r0
 800976c:	10ad      	asrs	r5, r5, #2
 800976e:	d03d      	beq.n	80097ec <__pow5mult+0xa0>
 8009770:	69fc      	ldr	r4, [r7, #28]
 8009772:	b97c      	cbnz	r4, 8009794 <__pow5mult+0x48>
 8009774:	2010      	movs	r0, #16
 8009776:	f7ff fd87 	bl	8009288 <malloc>
 800977a:	4602      	mov	r2, r0
 800977c:	61f8      	str	r0, [r7, #28]
 800977e:	b928      	cbnz	r0, 800978c <__pow5mult+0x40>
 8009780:	4b1d      	ldr	r3, [pc, #116]	@ (80097f8 <__pow5mult+0xac>)
 8009782:	481e      	ldr	r0, [pc, #120]	@ (80097fc <__pow5mult+0xb0>)
 8009784:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8009788:	f000 fc3e 	bl	800a008 <__assert_func>
 800978c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8009790:	6004      	str	r4, [r0, #0]
 8009792:	60c4      	str	r4, [r0, #12]
 8009794:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8009798:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800979c:	b94c      	cbnz	r4, 80097b2 <__pow5mult+0x66>
 800979e:	f240 2171 	movw	r1, #625	@ 0x271
 80097a2:	4638      	mov	r0, r7
 80097a4:	f7ff ff1a 	bl	80095dc <__i2b>
 80097a8:	2300      	movs	r3, #0
 80097aa:	f8c8 0008 	str.w	r0, [r8, #8]
 80097ae:	4604      	mov	r4, r0
 80097b0:	6003      	str	r3, [r0, #0]
 80097b2:	f04f 0900 	mov.w	r9, #0
 80097b6:	07eb      	lsls	r3, r5, #31
 80097b8:	d50a      	bpl.n	80097d0 <__pow5mult+0x84>
 80097ba:	4631      	mov	r1, r6
 80097bc:	4622      	mov	r2, r4
 80097be:	4638      	mov	r0, r7
 80097c0:	f7ff ff22 	bl	8009608 <__multiply>
 80097c4:	4631      	mov	r1, r6
 80097c6:	4680      	mov	r8, r0
 80097c8:	4638      	mov	r0, r7
 80097ca:	f7ff fe53 	bl	8009474 <_Bfree>
 80097ce:	4646      	mov	r6, r8
 80097d0:	106d      	asrs	r5, r5, #1
 80097d2:	d00b      	beq.n	80097ec <__pow5mult+0xa0>
 80097d4:	6820      	ldr	r0, [r4, #0]
 80097d6:	b938      	cbnz	r0, 80097e8 <__pow5mult+0x9c>
 80097d8:	4622      	mov	r2, r4
 80097da:	4621      	mov	r1, r4
 80097dc:	4638      	mov	r0, r7
 80097de:	f7ff ff13 	bl	8009608 <__multiply>
 80097e2:	6020      	str	r0, [r4, #0]
 80097e4:	f8c0 9000 	str.w	r9, [r0]
 80097e8:	4604      	mov	r4, r0
 80097ea:	e7e4      	b.n	80097b6 <__pow5mult+0x6a>
 80097ec:	4630      	mov	r0, r6
 80097ee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80097f2:	bf00      	nop
 80097f4:	0800a450 	.word	0x0800a450
 80097f8:	0800a31d 	.word	0x0800a31d
 80097fc:	0800a39d 	.word	0x0800a39d

08009800 <__lshift>:
 8009800:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009804:	460c      	mov	r4, r1
 8009806:	6849      	ldr	r1, [r1, #4]
 8009808:	6923      	ldr	r3, [r4, #16]
 800980a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800980e:	68a3      	ldr	r3, [r4, #8]
 8009810:	4607      	mov	r7, r0
 8009812:	4691      	mov	r9, r2
 8009814:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8009818:	f108 0601 	add.w	r6, r8, #1
 800981c:	42b3      	cmp	r3, r6
 800981e:	db0b      	blt.n	8009838 <__lshift+0x38>
 8009820:	4638      	mov	r0, r7
 8009822:	f7ff fde7 	bl	80093f4 <_Balloc>
 8009826:	4605      	mov	r5, r0
 8009828:	b948      	cbnz	r0, 800983e <__lshift+0x3e>
 800982a:	4602      	mov	r2, r0
 800982c:	4b28      	ldr	r3, [pc, #160]	@ (80098d0 <__lshift+0xd0>)
 800982e:	4829      	ldr	r0, [pc, #164]	@ (80098d4 <__lshift+0xd4>)
 8009830:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8009834:	f000 fbe8 	bl	800a008 <__assert_func>
 8009838:	3101      	adds	r1, #1
 800983a:	005b      	lsls	r3, r3, #1
 800983c:	e7ee      	b.n	800981c <__lshift+0x1c>
 800983e:	2300      	movs	r3, #0
 8009840:	f100 0114 	add.w	r1, r0, #20
 8009844:	f100 0210 	add.w	r2, r0, #16
 8009848:	4618      	mov	r0, r3
 800984a:	4553      	cmp	r3, sl
 800984c:	db33      	blt.n	80098b6 <__lshift+0xb6>
 800984e:	6920      	ldr	r0, [r4, #16]
 8009850:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8009854:	f104 0314 	add.w	r3, r4, #20
 8009858:	f019 091f 	ands.w	r9, r9, #31
 800985c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8009860:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8009864:	d02b      	beq.n	80098be <__lshift+0xbe>
 8009866:	f1c9 0e20 	rsb	lr, r9, #32
 800986a:	468a      	mov	sl, r1
 800986c:	2200      	movs	r2, #0
 800986e:	6818      	ldr	r0, [r3, #0]
 8009870:	fa00 f009 	lsl.w	r0, r0, r9
 8009874:	4310      	orrs	r0, r2
 8009876:	f84a 0b04 	str.w	r0, [sl], #4
 800987a:	f853 2b04 	ldr.w	r2, [r3], #4
 800987e:	459c      	cmp	ip, r3
 8009880:	fa22 f20e 	lsr.w	r2, r2, lr
 8009884:	d8f3      	bhi.n	800986e <__lshift+0x6e>
 8009886:	ebac 0304 	sub.w	r3, ip, r4
 800988a:	3b15      	subs	r3, #21
 800988c:	f023 0303 	bic.w	r3, r3, #3
 8009890:	3304      	adds	r3, #4
 8009892:	f104 0015 	add.w	r0, r4, #21
 8009896:	4560      	cmp	r0, ip
 8009898:	bf88      	it	hi
 800989a:	2304      	movhi	r3, #4
 800989c:	50ca      	str	r2, [r1, r3]
 800989e:	b10a      	cbz	r2, 80098a4 <__lshift+0xa4>
 80098a0:	f108 0602 	add.w	r6, r8, #2
 80098a4:	3e01      	subs	r6, #1
 80098a6:	4638      	mov	r0, r7
 80098a8:	612e      	str	r6, [r5, #16]
 80098aa:	4621      	mov	r1, r4
 80098ac:	f7ff fde2 	bl	8009474 <_Bfree>
 80098b0:	4628      	mov	r0, r5
 80098b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80098b6:	f842 0f04 	str.w	r0, [r2, #4]!
 80098ba:	3301      	adds	r3, #1
 80098bc:	e7c5      	b.n	800984a <__lshift+0x4a>
 80098be:	3904      	subs	r1, #4
 80098c0:	f853 2b04 	ldr.w	r2, [r3], #4
 80098c4:	f841 2f04 	str.w	r2, [r1, #4]!
 80098c8:	459c      	cmp	ip, r3
 80098ca:	d8f9      	bhi.n	80098c0 <__lshift+0xc0>
 80098cc:	e7ea      	b.n	80098a4 <__lshift+0xa4>
 80098ce:	bf00      	nop
 80098d0:	0800a38c 	.word	0x0800a38c
 80098d4:	0800a39d 	.word	0x0800a39d

080098d8 <__mcmp>:
 80098d8:	690a      	ldr	r2, [r1, #16]
 80098da:	4603      	mov	r3, r0
 80098dc:	6900      	ldr	r0, [r0, #16]
 80098de:	1a80      	subs	r0, r0, r2
 80098e0:	b530      	push	{r4, r5, lr}
 80098e2:	d10e      	bne.n	8009902 <__mcmp+0x2a>
 80098e4:	3314      	adds	r3, #20
 80098e6:	3114      	adds	r1, #20
 80098e8:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 80098ec:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 80098f0:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80098f4:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80098f8:	4295      	cmp	r5, r2
 80098fa:	d003      	beq.n	8009904 <__mcmp+0x2c>
 80098fc:	d205      	bcs.n	800990a <__mcmp+0x32>
 80098fe:	f04f 30ff 	mov.w	r0, #4294967295
 8009902:	bd30      	pop	{r4, r5, pc}
 8009904:	42a3      	cmp	r3, r4
 8009906:	d3f3      	bcc.n	80098f0 <__mcmp+0x18>
 8009908:	e7fb      	b.n	8009902 <__mcmp+0x2a>
 800990a:	2001      	movs	r0, #1
 800990c:	e7f9      	b.n	8009902 <__mcmp+0x2a>
	...

08009910 <__mdiff>:
 8009910:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009914:	4689      	mov	r9, r1
 8009916:	4606      	mov	r6, r0
 8009918:	4611      	mov	r1, r2
 800991a:	4648      	mov	r0, r9
 800991c:	4614      	mov	r4, r2
 800991e:	f7ff ffdb 	bl	80098d8 <__mcmp>
 8009922:	1e05      	subs	r5, r0, #0
 8009924:	d112      	bne.n	800994c <__mdiff+0x3c>
 8009926:	4629      	mov	r1, r5
 8009928:	4630      	mov	r0, r6
 800992a:	f7ff fd63 	bl	80093f4 <_Balloc>
 800992e:	4602      	mov	r2, r0
 8009930:	b928      	cbnz	r0, 800993e <__mdiff+0x2e>
 8009932:	4b3f      	ldr	r3, [pc, #252]	@ (8009a30 <__mdiff+0x120>)
 8009934:	f240 2137 	movw	r1, #567	@ 0x237
 8009938:	483e      	ldr	r0, [pc, #248]	@ (8009a34 <__mdiff+0x124>)
 800993a:	f000 fb65 	bl	800a008 <__assert_func>
 800993e:	2301      	movs	r3, #1
 8009940:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8009944:	4610      	mov	r0, r2
 8009946:	b003      	add	sp, #12
 8009948:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800994c:	bfbc      	itt	lt
 800994e:	464b      	movlt	r3, r9
 8009950:	46a1      	movlt	r9, r4
 8009952:	4630      	mov	r0, r6
 8009954:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8009958:	bfba      	itte	lt
 800995a:	461c      	movlt	r4, r3
 800995c:	2501      	movlt	r5, #1
 800995e:	2500      	movge	r5, #0
 8009960:	f7ff fd48 	bl	80093f4 <_Balloc>
 8009964:	4602      	mov	r2, r0
 8009966:	b918      	cbnz	r0, 8009970 <__mdiff+0x60>
 8009968:	4b31      	ldr	r3, [pc, #196]	@ (8009a30 <__mdiff+0x120>)
 800996a:	f240 2145 	movw	r1, #581	@ 0x245
 800996e:	e7e3      	b.n	8009938 <__mdiff+0x28>
 8009970:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8009974:	6926      	ldr	r6, [r4, #16]
 8009976:	60c5      	str	r5, [r0, #12]
 8009978:	f109 0310 	add.w	r3, r9, #16
 800997c:	f109 0514 	add.w	r5, r9, #20
 8009980:	f104 0e14 	add.w	lr, r4, #20
 8009984:	f100 0b14 	add.w	fp, r0, #20
 8009988:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800998c:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8009990:	9301      	str	r3, [sp, #4]
 8009992:	46d9      	mov	r9, fp
 8009994:	f04f 0c00 	mov.w	ip, #0
 8009998:	9b01      	ldr	r3, [sp, #4]
 800999a:	f85e 0b04 	ldr.w	r0, [lr], #4
 800999e:	f853 af04 	ldr.w	sl, [r3, #4]!
 80099a2:	9301      	str	r3, [sp, #4]
 80099a4:	fa1f f38a 	uxth.w	r3, sl
 80099a8:	4619      	mov	r1, r3
 80099aa:	b283      	uxth	r3, r0
 80099ac:	1acb      	subs	r3, r1, r3
 80099ae:	0c00      	lsrs	r0, r0, #16
 80099b0:	4463      	add	r3, ip
 80099b2:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 80099b6:	eb00 4023 	add.w	r0, r0, r3, asr #16
 80099ba:	b29b      	uxth	r3, r3
 80099bc:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 80099c0:	4576      	cmp	r6, lr
 80099c2:	f849 3b04 	str.w	r3, [r9], #4
 80099c6:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80099ca:	d8e5      	bhi.n	8009998 <__mdiff+0x88>
 80099cc:	1b33      	subs	r3, r6, r4
 80099ce:	3b15      	subs	r3, #21
 80099d0:	f023 0303 	bic.w	r3, r3, #3
 80099d4:	3415      	adds	r4, #21
 80099d6:	3304      	adds	r3, #4
 80099d8:	42a6      	cmp	r6, r4
 80099da:	bf38      	it	cc
 80099dc:	2304      	movcc	r3, #4
 80099de:	441d      	add	r5, r3
 80099e0:	445b      	add	r3, fp
 80099e2:	461e      	mov	r6, r3
 80099e4:	462c      	mov	r4, r5
 80099e6:	4544      	cmp	r4, r8
 80099e8:	d30e      	bcc.n	8009a08 <__mdiff+0xf8>
 80099ea:	f108 0103 	add.w	r1, r8, #3
 80099ee:	1b49      	subs	r1, r1, r5
 80099f0:	f021 0103 	bic.w	r1, r1, #3
 80099f4:	3d03      	subs	r5, #3
 80099f6:	45a8      	cmp	r8, r5
 80099f8:	bf38      	it	cc
 80099fa:	2100      	movcc	r1, #0
 80099fc:	440b      	add	r3, r1
 80099fe:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8009a02:	b191      	cbz	r1, 8009a2a <__mdiff+0x11a>
 8009a04:	6117      	str	r7, [r2, #16]
 8009a06:	e79d      	b.n	8009944 <__mdiff+0x34>
 8009a08:	f854 1b04 	ldr.w	r1, [r4], #4
 8009a0c:	46e6      	mov	lr, ip
 8009a0e:	0c08      	lsrs	r0, r1, #16
 8009a10:	fa1c fc81 	uxtah	ip, ip, r1
 8009a14:	4471      	add	r1, lr
 8009a16:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8009a1a:	b289      	uxth	r1, r1
 8009a1c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8009a20:	f846 1b04 	str.w	r1, [r6], #4
 8009a24:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8009a28:	e7dd      	b.n	80099e6 <__mdiff+0xd6>
 8009a2a:	3f01      	subs	r7, #1
 8009a2c:	e7e7      	b.n	80099fe <__mdiff+0xee>
 8009a2e:	bf00      	nop
 8009a30:	0800a38c 	.word	0x0800a38c
 8009a34:	0800a39d 	.word	0x0800a39d

08009a38 <__d2b>:
 8009a38:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8009a3c:	460f      	mov	r7, r1
 8009a3e:	2101      	movs	r1, #1
 8009a40:	ec59 8b10 	vmov	r8, r9, d0
 8009a44:	4616      	mov	r6, r2
 8009a46:	f7ff fcd5 	bl	80093f4 <_Balloc>
 8009a4a:	4604      	mov	r4, r0
 8009a4c:	b930      	cbnz	r0, 8009a5c <__d2b+0x24>
 8009a4e:	4602      	mov	r2, r0
 8009a50:	4b23      	ldr	r3, [pc, #140]	@ (8009ae0 <__d2b+0xa8>)
 8009a52:	4824      	ldr	r0, [pc, #144]	@ (8009ae4 <__d2b+0xac>)
 8009a54:	f240 310f 	movw	r1, #783	@ 0x30f
 8009a58:	f000 fad6 	bl	800a008 <__assert_func>
 8009a5c:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8009a60:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8009a64:	b10d      	cbz	r5, 8009a6a <__d2b+0x32>
 8009a66:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8009a6a:	9301      	str	r3, [sp, #4]
 8009a6c:	f1b8 0300 	subs.w	r3, r8, #0
 8009a70:	d023      	beq.n	8009aba <__d2b+0x82>
 8009a72:	4668      	mov	r0, sp
 8009a74:	9300      	str	r3, [sp, #0]
 8009a76:	f7ff fd84 	bl	8009582 <__lo0bits>
 8009a7a:	e9dd 1200 	ldrd	r1, r2, [sp]
 8009a7e:	b1d0      	cbz	r0, 8009ab6 <__d2b+0x7e>
 8009a80:	f1c0 0320 	rsb	r3, r0, #32
 8009a84:	fa02 f303 	lsl.w	r3, r2, r3
 8009a88:	430b      	orrs	r3, r1
 8009a8a:	40c2      	lsrs	r2, r0
 8009a8c:	6163      	str	r3, [r4, #20]
 8009a8e:	9201      	str	r2, [sp, #4]
 8009a90:	9b01      	ldr	r3, [sp, #4]
 8009a92:	61a3      	str	r3, [r4, #24]
 8009a94:	2b00      	cmp	r3, #0
 8009a96:	bf0c      	ite	eq
 8009a98:	2201      	moveq	r2, #1
 8009a9a:	2202      	movne	r2, #2
 8009a9c:	6122      	str	r2, [r4, #16]
 8009a9e:	b1a5      	cbz	r5, 8009aca <__d2b+0x92>
 8009aa0:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8009aa4:	4405      	add	r5, r0
 8009aa6:	603d      	str	r5, [r7, #0]
 8009aa8:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8009aac:	6030      	str	r0, [r6, #0]
 8009aae:	4620      	mov	r0, r4
 8009ab0:	b003      	add	sp, #12
 8009ab2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009ab6:	6161      	str	r1, [r4, #20]
 8009ab8:	e7ea      	b.n	8009a90 <__d2b+0x58>
 8009aba:	a801      	add	r0, sp, #4
 8009abc:	f7ff fd61 	bl	8009582 <__lo0bits>
 8009ac0:	9b01      	ldr	r3, [sp, #4]
 8009ac2:	6163      	str	r3, [r4, #20]
 8009ac4:	3020      	adds	r0, #32
 8009ac6:	2201      	movs	r2, #1
 8009ac8:	e7e8      	b.n	8009a9c <__d2b+0x64>
 8009aca:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8009ace:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8009ad2:	6038      	str	r0, [r7, #0]
 8009ad4:	6918      	ldr	r0, [r3, #16]
 8009ad6:	f7ff fd35 	bl	8009544 <__hi0bits>
 8009ada:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8009ade:	e7e5      	b.n	8009aac <__d2b+0x74>
 8009ae0:	0800a38c 	.word	0x0800a38c
 8009ae4:	0800a39d 	.word	0x0800a39d

08009ae8 <__sfputc_r>:
 8009ae8:	6893      	ldr	r3, [r2, #8]
 8009aea:	3b01      	subs	r3, #1
 8009aec:	2b00      	cmp	r3, #0
 8009aee:	b410      	push	{r4}
 8009af0:	6093      	str	r3, [r2, #8]
 8009af2:	da08      	bge.n	8009b06 <__sfputc_r+0x1e>
 8009af4:	6994      	ldr	r4, [r2, #24]
 8009af6:	42a3      	cmp	r3, r4
 8009af8:	db01      	blt.n	8009afe <__sfputc_r+0x16>
 8009afa:	290a      	cmp	r1, #10
 8009afc:	d103      	bne.n	8009b06 <__sfputc_r+0x1e>
 8009afe:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009b02:	f7fe bc7c 	b.w	80083fe <__swbuf_r>
 8009b06:	6813      	ldr	r3, [r2, #0]
 8009b08:	1c58      	adds	r0, r3, #1
 8009b0a:	6010      	str	r0, [r2, #0]
 8009b0c:	7019      	strb	r1, [r3, #0]
 8009b0e:	4608      	mov	r0, r1
 8009b10:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009b14:	4770      	bx	lr

08009b16 <__sfputs_r>:
 8009b16:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009b18:	4606      	mov	r6, r0
 8009b1a:	460f      	mov	r7, r1
 8009b1c:	4614      	mov	r4, r2
 8009b1e:	18d5      	adds	r5, r2, r3
 8009b20:	42ac      	cmp	r4, r5
 8009b22:	d101      	bne.n	8009b28 <__sfputs_r+0x12>
 8009b24:	2000      	movs	r0, #0
 8009b26:	e007      	b.n	8009b38 <__sfputs_r+0x22>
 8009b28:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009b2c:	463a      	mov	r2, r7
 8009b2e:	4630      	mov	r0, r6
 8009b30:	f7ff ffda 	bl	8009ae8 <__sfputc_r>
 8009b34:	1c43      	adds	r3, r0, #1
 8009b36:	d1f3      	bne.n	8009b20 <__sfputs_r+0xa>
 8009b38:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08009b3c <_vfiprintf_r>:
 8009b3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009b40:	460d      	mov	r5, r1
 8009b42:	b09d      	sub	sp, #116	@ 0x74
 8009b44:	4614      	mov	r4, r2
 8009b46:	4698      	mov	r8, r3
 8009b48:	4606      	mov	r6, r0
 8009b4a:	b118      	cbz	r0, 8009b54 <_vfiprintf_r+0x18>
 8009b4c:	6a03      	ldr	r3, [r0, #32]
 8009b4e:	b90b      	cbnz	r3, 8009b54 <_vfiprintf_r+0x18>
 8009b50:	f7fe fab8 	bl	80080c4 <__sinit>
 8009b54:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009b56:	07d9      	lsls	r1, r3, #31
 8009b58:	d405      	bmi.n	8009b66 <_vfiprintf_r+0x2a>
 8009b5a:	89ab      	ldrh	r3, [r5, #12]
 8009b5c:	059a      	lsls	r2, r3, #22
 8009b5e:	d402      	bmi.n	8009b66 <_vfiprintf_r+0x2a>
 8009b60:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8009b62:	f7fe fd5e 	bl	8008622 <__retarget_lock_acquire_recursive>
 8009b66:	89ab      	ldrh	r3, [r5, #12]
 8009b68:	071b      	lsls	r3, r3, #28
 8009b6a:	d501      	bpl.n	8009b70 <_vfiprintf_r+0x34>
 8009b6c:	692b      	ldr	r3, [r5, #16]
 8009b6e:	b99b      	cbnz	r3, 8009b98 <_vfiprintf_r+0x5c>
 8009b70:	4629      	mov	r1, r5
 8009b72:	4630      	mov	r0, r6
 8009b74:	f7fe fc82 	bl	800847c <__swsetup_r>
 8009b78:	b170      	cbz	r0, 8009b98 <_vfiprintf_r+0x5c>
 8009b7a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009b7c:	07dc      	lsls	r4, r3, #31
 8009b7e:	d504      	bpl.n	8009b8a <_vfiprintf_r+0x4e>
 8009b80:	f04f 30ff 	mov.w	r0, #4294967295
 8009b84:	b01d      	add	sp, #116	@ 0x74
 8009b86:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009b8a:	89ab      	ldrh	r3, [r5, #12]
 8009b8c:	0598      	lsls	r0, r3, #22
 8009b8e:	d4f7      	bmi.n	8009b80 <_vfiprintf_r+0x44>
 8009b90:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8009b92:	f7fe fd47 	bl	8008624 <__retarget_lock_release_recursive>
 8009b96:	e7f3      	b.n	8009b80 <_vfiprintf_r+0x44>
 8009b98:	2300      	movs	r3, #0
 8009b9a:	9309      	str	r3, [sp, #36]	@ 0x24
 8009b9c:	2320      	movs	r3, #32
 8009b9e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8009ba2:	f8cd 800c 	str.w	r8, [sp, #12]
 8009ba6:	2330      	movs	r3, #48	@ 0x30
 8009ba8:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8009d58 <_vfiprintf_r+0x21c>
 8009bac:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8009bb0:	f04f 0901 	mov.w	r9, #1
 8009bb4:	4623      	mov	r3, r4
 8009bb6:	469a      	mov	sl, r3
 8009bb8:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009bbc:	b10a      	cbz	r2, 8009bc2 <_vfiprintf_r+0x86>
 8009bbe:	2a25      	cmp	r2, #37	@ 0x25
 8009bc0:	d1f9      	bne.n	8009bb6 <_vfiprintf_r+0x7a>
 8009bc2:	ebba 0b04 	subs.w	fp, sl, r4
 8009bc6:	d00b      	beq.n	8009be0 <_vfiprintf_r+0xa4>
 8009bc8:	465b      	mov	r3, fp
 8009bca:	4622      	mov	r2, r4
 8009bcc:	4629      	mov	r1, r5
 8009bce:	4630      	mov	r0, r6
 8009bd0:	f7ff ffa1 	bl	8009b16 <__sfputs_r>
 8009bd4:	3001      	adds	r0, #1
 8009bd6:	f000 80a7 	beq.w	8009d28 <_vfiprintf_r+0x1ec>
 8009bda:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009bdc:	445a      	add	r2, fp
 8009bde:	9209      	str	r2, [sp, #36]	@ 0x24
 8009be0:	f89a 3000 	ldrb.w	r3, [sl]
 8009be4:	2b00      	cmp	r3, #0
 8009be6:	f000 809f 	beq.w	8009d28 <_vfiprintf_r+0x1ec>
 8009bea:	2300      	movs	r3, #0
 8009bec:	f04f 32ff 	mov.w	r2, #4294967295
 8009bf0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009bf4:	f10a 0a01 	add.w	sl, sl, #1
 8009bf8:	9304      	str	r3, [sp, #16]
 8009bfa:	9307      	str	r3, [sp, #28]
 8009bfc:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8009c00:	931a      	str	r3, [sp, #104]	@ 0x68
 8009c02:	4654      	mov	r4, sl
 8009c04:	2205      	movs	r2, #5
 8009c06:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009c0a:	4853      	ldr	r0, [pc, #332]	@ (8009d58 <_vfiprintf_r+0x21c>)
 8009c0c:	f7f6 fb68 	bl	80002e0 <memchr>
 8009c10:	9a04      	ldr	r2, [sp, #16]
 8009c12:	b9d8      	cbnz	r0, 8009c4c <_vfiprintf_r+0x110>
 8009c14:	06d1      	lsls	r1, r2, #27
 8009c16:	bf44      	itt	mi
 8009c18:	2320      	movmi	r3, #32
 8009c1a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009c1e:	0713      	lsls	r3, r2, #28
 8009c20:	bf44      	itt	mi
 8009c22:	232b      	movmi	r3, #43	@ 0x2b
 8009c24:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009c28:	f89a 3000 	ldrb.w	r3, [sl]
 8009c2c:	2b2a      	cmp	r3, #42	@ 0x2a
 8009c2e:	d015      	beq.n	8009c5c <_vfiprintf_r+0x120>
 8009c30:	9a07      	ldr	r2, [sp, #28]
 8009c32:	4654      	mov	r4, sl
 8009c34:	2000      	movs	r0, #0
 8009c36:	f04f 0c0a 	mov.w	ip, #10
 8009c3a:	4621      	mov	r1, r4
 8009c3c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009c40:	3b30      	subs	r3, #48	@ 0x30
 8009c42:	2b09      	cmp	r3, #9
 8009c44:	d94b      	bls.n	8009cde <_vfiprintf_r+0x1a2>
 8009c46:	b1b0      	cbz	r0, 8009c76 <_vfiprintf_r+0x13a>
 8009c48:	9207      	str	r2, [sp, #28]
 8009c4a:	e014      	b.n	8009c76 <_vfiprintf_r+0x13a>
 8009c4c:	eba0 0308 	sub.w	r3, r0, r8
 8009c50:	fa09 f303 	lsl.w	r3, r9, r3
 8009c54:	4313      	orrs	r3, r2
 8009c56:	9304      	str	r3, [sp, #16]
 8009c58:	46a2      	mov	sl, r4
 8009c5a:	e7d2      	b.n	8009c02 <_vfiprintf_r+0xc6>
 8009c5c:	9b03      	ldr	r3, [sp, #12]
 8009c5e:	1d19      	adds	r1, r3, #4
 8009c60:	681b      	ldr	r3, [r3, #0]
 8009c62:	9103      	str	r1, [sp, #12]
 8009c64:	2b00      	cmp	r3, #0
 8009c66:	bfbb      	ittet	lt
 8009c68:	425b      	neglt	r3, r3
 8009c6a:	f042 0202 	orrlt.w	r2, r2, #2
 8009c6e:	9307      	strge	r3, [sp, #28]
 8009c70:	9307      	strlt	r3, [sp, #28]
 8009c72:	bfb8      	it	lt
 8009c74:	9204      	strlt	r2, [sp, #16]
 8009c76:	7823      	ldrb	r3, [r4, #0]
 8009c78:	2b2e      	cmp	r3, #46	@ 0x2e
 8009c7a:	d10a      	bne.n	8009c92 <_vfiprintf_r+0x156>
 8009c7c:	7863      	ldrb	r3, [r4, #1]
 8009c7e:	2b2a      	cmp	r3, #42	@ 0x2a
 8009c80:	d132      	bne.n	8009ce8 <_vfiprintf_r+0x1ac>
 8009c82:	9b03      	ldr	r3, [sp, #12]
 8009c84:	1d1a      	adds	r2, r3, #4
 8009c86:	681b      	ldr	r3, [r3, #0]
 8009c88:	9203      	str	r2, [sp, #12]
 8009c8a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8009c8e:	3402      	adds	r4, #2
 8009c90:	9305      	str	r3, [sp, #20]
 8009c92:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8009d68 <_vfiprintf_r+0x22c>
 8009c96:	7821      	ldrb	r1, [r4, #0]
 8009c98:	2203      	movs	r2, #3
 8009c9a:	4650      	mov	r0, sl
 8009c9c:	f7f6 fb20 	bl	80002e0 <memchr>
 8009ca0:	b138      	cbz	r0, 8009cb2 <_vfiprintf_r+0x176>
 8009ca2:	9b04      	ldr	r3, [sp, #16]
 8009ca4:	eba0 000a 	sub.w	r0, r0, sl
 8009ca8:	2240      	movs	r2, #64	@ 0x40
 8009caa:	4082      	lsls	r2, r0
 8009cac:	4313      	orrs	r3, r2
 8009cae:	3401      	adds	r4, #1
 8009cb0:	9304      	str	r3, [sp, #16]
 8009cb2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009cb6:	4829      	ldr	r0, [pc, #164]	@ (8009d5c <_vfiprintf_r+0x220>)
 8009cb8:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8009cbc:	2206      	movs	r2, #6
 8009cbe:	f7f6 fb0f 	bl	80002e0 <memchr>
 8009cc2:	2800      	cmp	r0, #0
 8009cc4:	d03f      	beq.n	8009d46 <_vfiprintf_r+0x20a>
 8009cc6:	4b26      	ldr	r3, [pc, #152]	@ (8009d60 <_vfiprintf_r+0x224>)
 8009cc8:	bb1b      	cbnz	r3, 8009d12 <_vfiprintf_r+0x1d6>
 8009cca:	9b03      	ldr	r3, [sp, #12]
 8009ccc:	3307      	adds	r3, #7
 8009cce:	f023 0307 	bic.w	r3, r3, #7
 8009cd2:	3308      	adds	r3, #8
 8009cd4:	9303      	str	r3, [sp, #12]
 8009cd6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009cd8:	443b      	add	r3, r7
 8009cda:	9309      	str	r3, [sp, #36]	@ 0x24
 8009cdc:	e76a      	b.n	8009bb4 <_vfiprintf_r+0x78>
 8009cde:	fb0c 3202 	mla	r2, ip, r2, r3
 8009ce2:	460c      	mov	r4, r1
 8009ce4:	2001      	movs	r0, #1
 8009ce6:	e7a8      	b.n	8009c3a <_vfiprintf_r+0xfe>
 8009ce8:	2300      	movs	r3, #0
 8009cea:	3401      	adds	r4, #1
 8009cec:	9305      	str	r3, [sp, #20]
 8009cee:	4619      	mov	r1, r3
 8009cf0:	f04f 0c0a 	mov.w	ip, #10
 8009cf4:	4620      	mov	r0, r4
 8009cf6:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009cfa:	3a30      	subs	r2, #48	@ 0x30
 8009cfc:	2a09      	cmp	r2, #9
 8009cfe:	d903      	bls.n	8009d08 <_vfiprintf_r+0x1cc>
 8009d00:	2b00      	cmp	r3, #0
 8009d02:	d0c6      	beq.n	8009c92 <_vfiprintf_r+0x156>
 8009d04:	9105      	str	r1, [sp, #20]
 8009d06:	e7c4      	b.n	8009c92 <_vfiprintf_r+0x156>
 8009d08:	fb0c 2101 	mla	r1, ip, r1, r2
 8009d0c:	4604      	mov	r4, r0
 8009d0e:	2301      	movs	r3, #1
 8009d10:	e7f0      	b.n	8009cf4 <_vfiprintf_r+0x1b8>
 8009d12:	ab03      	add	r3, sp, #12
 8009d14:	9300      	str	r3, [sp, #0]
 8009d16:	462a      	mov	r2, r5
 8009d18:	4b12      	ldr	r3, [pc, #72]	@ (8009d64 <_vfiprintf_r+0x228>)
 8009d1a:	a904      	add	r1, sp, #16
 8009d1c:	4630      	mov	r0, r6
 8009d1e:	f7fd fd9f 	bl	8007860 <_printf_float>
 8009d22:	4607      	mov	r7, r0
 8009d24:	1c78      	adds	r0, r7, #1
 8009d26:	d1d6      	bne.n	8009cd6 <_vfiprintf_r+0x19a>
 8009d28:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009d2a:	07d9      	lsls	r1, r3, #31
 8009d2c:	d405      	bmi.n	8009d3a <_vfiprintf_r+0x1fe>
 8009d2e:	89ab      	ldrh	r3, [r5, #12]
 8009d30:	059a      	lsls	r2, r3, #22
 8009d32:	d402      	bmi.n	8009d3a <_vfiprintf_r+0x1fe>
 8009d34:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8009d36:	f7fe fc75 	bl	8008624 <__retarget_lock_release_recursive>
 8009d3a:	89ab      	ldrh	r3, [r5, #12]
 8009d3c:	065b      	lsls	r3, r3, #25
 8009d3e:	f53f af1f 	bmi.w	8009b80 <_vfiprintf_r+0x44>
 8009d42:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8009d44:	e71e      	b.n	8009b84 <_vfiprintf_r+0x48>
 8009d46:	ab03      	add	r3, sp, #12
 8009d48:	9300      	str	r3, [sp, #0]
 8009d4a:	462a      	mov	r2, r5
 8009d4c:	4b05      	ldr	r3, [pc, #20]	@ (8009d64 <_vfiprintf_r+0x228>)
 8009d4e:	a904      	add	r1, sp, #16
 8009d50:	4630      	mov	r0, r6
 8009d52:	f7fe f80d 	bl	8007d70 <_printf_i>
 8009d56:	e7e4      	b.n	8009d22 <_vfiprintf_r+0x1e6>
 8009d58:	0800a3f6 	.word	0x0800a3f6
 8009d5c:	0800a400 	.word	0x0800a400
 8009d60:	08007861 	.word	0x08007861
 8009d64:	08009b17 	.word	0x08009b17
 8009d68:	0800a3fc 	.word	0x0800a3fc

08009d6c <__sflush_r>:
 8009d6c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8009d70:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009d74:	0716      	lsls	r6, r2, #28
 8009d76:	4605      	mov	r5, r0
 8009d78:	460c      	mov	r4, r1
 8009d7a:	d454      	bmi.n	8009e26 <__sflush_r+0xba>
 8009d7c:	684b      	ldr	r3, [r1, #4]
 8009d7e:	2b00      	cmp	r3, #0
 8009d80:	dc02      	bgt.n	8009d88 <__sflush_r+0x1c>
 8009d82:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8009d84:	2b00      	cmp	r3, #0
 8009d86:	dd48      	ble.n	8009e1a <__sflush_r+0xae>
 8009d88:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8009d8a:	2e00      	cmp	r6, #0
 8009d8c:	d045      	beq.n	8009e1a <__sflush_r+0xae>
 8009d8e:	2300      	movs	r3, #0
 8009d90:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8009d94:	682f      	ldr	r7, [r5, #0]
 8009d96:	6a21      	ldr	r1, [r4, #32]
 8009d98:	602b      	str	r3, [r5, #0]
 8009d9a:	d030      	beq.n	8009dfe <__sflush_r+0x92>
 8009d9c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8009d9e:	89a3      	ldrh	r3, [r4, #12]
 8009da0:	0759      	lsls	r1, r3, #29
 8009da2:	d505      	bpl.n	8009db0 <__sflush_r+0x44>
 8009da4:	6863      	ldr	r3, [r4, #4]
 8009da6:	1ad2      	subs	r2, r2, r3
 8009da8:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8009daa:	b10b      	cbz	r3, 8009db0 <__sflush_r+0x44>
 8009dac:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8009dae:	1ad2      	subs	r2, r2, r3
 8009db0:	2300      	movs	r3, #0
 8009db2:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8009db4:	6a21      	ldr	r1, [r4, #32]
 8009db6:	4628      	mov	r0, r5
 8009db8:	47b0      	blx	r6
 8009dba:	1c43      	adds	r3, r0, #1
 8009dbc:	89a3      	ldrh	r3, [r4, #12]
 8009dbe:	d106      	bne.n	8009dce <__sflush_r+0x62>
 8009dc0:	6829      	ldr	r1, [r5, #0]
 8009dc2:	291d      	cmp	r1, #29
 8009dc4:	d82b      	bhi.n	8009e1e <__sflush_r+0xb2>
 8009dc6:	4a2a      	ldr	r2, [pc, #168]	@ (8009e70 <__sflush_r+0x104>)
 8009dc8:	40ca      	lsrs	r2, r1
 8009dca:	07d6      	lsls	r6, r2, #31
 8009dcc:	d527      	bpl.n	8009e1e <__sflush_r+0xb2>
 8009dce:	2200      	movs	r2, #0
 8009dd0:	6062      	str	r2, [r4, #4]
 8009dd2:	04d9      	lsls	r1, r3, #19
 8009dd4:	6922      	ldr	r2, [r4, #16]
 8009dd6:	6022      	str	r2, [r4, #0]
 8009dd8:	d504      	bpl.n	8009de4 <__sflush_r+0x78>
 8009dda:	1c42      	adds	r2, r0, #1
 8009ddc:	d101      	bne.n	8009de2 <__sflush_r+0x76>
 8009dde:	682b      	ldr	r3, [r5, #0]
 8009de0:	b903      	cbnz	r3, 8009de4 <__sflush_r+0x78>
 8009de2:	6560      	str	r0, [r4, #84]	@ 0x54
 8009de4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8009de6:	602f      	str	r7, [r5, #0]
 8009de8:	b1b9      	cbz	r1, 8009e1a <__sflush_r+0xae>
 8009dea:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8009dee:	4299      	cmp	r1, r3
 8009df0:	d002      	beq.n	8009df8 <__sflush_r+0x8c>
 8009df2:	4628      	mov	r0, r5
 8009df4:	f7ff f9fe 	bl	80091f4 <_free_r>
 8009df8:	2300      	movs	r3, #0
 8009dfa:	6363      	str	r3, [r4, #52]	@ 0x34
 8009dfc:	e00d      	b.n	8009e1a <__sflush_r+0xae>
 8009dfe:	2301      	movs	r3, #1
 8009e00:	4628      	mov	r0, r5
 8009e02:	47b0      	blx	r6
 8009e04:	4602      	mov	r2, r0
 8009e06:	1c50      	adds	r0, r2, #1
 8009e08:	d1c9      	bne.n	8009d9e <__sflush_r+0x32>
 8009e0a:	682b      	ldr	r3, [r5, #0]
 8009e0c:	2b00      	cmp	r3, #0
 8009e0e:	d0c6      	beq.n	8009d9e <__sflush_r+0x32>
 8009e10:	2b1d      	cmp	r3, #29
 8009e12:	d001      	beq.n	8009e18 <__sflush_r+0xac>
 8009e14:	2b16      	cmp	r3, #22
 8009e16:	d11e      	bne.n	8009e56 <__sflush_r+0xea>
 8009e18:	602f      	str	r7, [r5, #0]
 8009e1a:	2000      	movs	r0, #0
 8009e1c:	e022      	b.n	8009e64 <__sflush_r+0xf8>
 8009e1e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009e22:	b21b      	sxth	r3, r3
 8009e24:	e01b      	b.n	8009e5e <__sflush_r+0xf2>
 8009e26:	690f      	ldr	r7, [r1, #16]
 8009e28:	2f00      	cmp	r7, #0
 8009e2a:	d0f6      	beq.n	8009e1a <__sflush_r+0xae>
 8009e2c:	0793      	lsls	r3, r2, #30
 8009e2e:	680e      	ldr	r6, [r1, #0]
 8009e30:	bf08      	it	eq
 8009e32:	694b      	ldreq	r3, [r1, #20]
 8009e34:	600f      	str	r7, [r1, #0]
 8009e36:	bf18      	it	ne
 8009e38:	2300      	movne	r3, #0
 8009e3a:	eba6 0807 	sub.w	r8, r6, r7
 8009e3e:	608b      	str	r3, [r1, #8]
 8009e40:	f1b8 0f00 	cmp.w	r8, #0
 8009e44:	dde9      	ble.n	8009e1a <__sflush_r+0xae>
 8009e46:	6a21      	ldr	r1, [r4, #32]
 8009e48:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8009e4a:	4643      	mov	r3, r8
 8009e4c:	463a      	mov	r2, r7
 8009e4e:	4628      	mov	r0, r5
 8009e50:	47b0      	blx	r6
 8009e52:	2800      	cmp	r0, #0
 8009e54:	dc08      	bgt.n	8009e68 <__sflush_r+0xfc>
 8009e56:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009e5a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009e5e:	81a3      	strh	r3, [r4, #12]
 8009e60:	f04f 30ff 	mov.w	r0, #4294967295
 8009e64:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009e68:	4407      	add	r7, r0
 8009e6a:	eba8 0800 	sub.w	r8, r8, r0
 8009e6e:	e7e7      	b.n	8009e40 <__sflush_r+0xd4>
 8009e70:	20400001 	.word	0x20400001

08009e74 <_fflush_r>:
 8009e74:	b538      	push	{r3, r4, r5, lr}
 8009e76:	690b      	ldr	r3, [r1, #16]
 8009e78:	4605      	mov	r5, r0
 8009e7a:	460c      	mov	r4, r1
 8009e7c:	b913      	cbnz	r3, 8009e84 <_fflush_r+0x10>
 8009e7e:	2500      	movs	r5, #0
 8009e80:	4628      	mov	r0, r5
 8009e82:	bd38      	pop	{r3, r4, r5, pc}
 8009e84:	b118      	cbz	r0, 8009e8e <_fflush_r+0x1a>
 8009e86:	6a03      	ldr	r3, [r0, #32]
 8009e88:	b90b      	cbnz	r3, 8009e8e <_fflush_r+0x1a>
 8009e8a:	f7fe f91b 	bl	80080c4 <__sinit>
 8009e8e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009e92:	2b00      	cmp	r3, #0
 8009e94:	d0f3      	beq.n	8009e7e <_fflush_r+0xa>
 8009e96:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8009e98:	07d0      	lsls	r0, r2, #31
 8009e9a:	d404      	bmi.n	8009ea6 <_fflush_r+0x32>
 8009e9c:	0599      	lsls	r1, r3, #22
 8009e9e:	d402      	bmi.n	8009ea6 <_fflush_r+0x32>
 8009ea0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8009ea2:	f7fe fbbe 	bl	8008622 <__retarget_lock_acquire_recursive>
 8009ea6:	4628      	mov	r0, r5
 8009ea8:	4621      	mov	r1, r4
 8009eaa:	f7ff ff5f 	bl	8009d6c <__sflush_r>
 8009eae:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8009eb0:	07da      	lsls	r2, r3, #31
 8009eb2:	4605      	mov	r5, r0
 8009eb4:	d4e4      	bmi.n	8009e80 <_fflush_r+0xc>
 8009eb6:	89a3      	ldrh	r3, [r4, #12]
 8009eb8:	059b      	lsls	r3, r3, #22
 8009eba:	d4e1      	bmi.n	8009e80 <_fflush_r+0xc>
 8009ebc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8009ebe:	f7fe fbb1 	bl	8008624 <__retarget_lock_release_recursive>
 8009ec2:	e7dd      	b.n	8009e80 <_fflush_r+0xc>

08009ec4 <__swhatbuf_r>:
 8009ec4:	b570      	push	{r4, r5, r6, lr}
 8009ec6:	460c      	mov	r4, r1
 8009ec8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009ecc:	2900      	cmp	r1, #0
 8009ece:	b096      	sub	sp, #88	@ 0x58
 8009ed0:	4615      	mov	r5, r2
 8009ed2:	461e      	mov	r6, r3
 8009ed4:	da0d      	bge.n	8009ef2 <__swhatbuf_r+0x2e>
 8009ed6:	89a3      	ldrh	r3, [r4, #12]
 8009ed8:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8009edc:	f04f 0100 	mov.w	r1, #0
 8009ee0:	bf14      	ite	ne
 8009ee2:	2340      	movne	r3, #64	@ 0x40
 8009ee4:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8009ee8:	2000      	movs	r0, #0
 8009eea:	6031      	str	r1, [r6, #0]
 8009eec:	602b      	str	r3, [r5, #0]
 8009eee:	b016      	add	sp, #88	@ 0x58
 8009ef0:	bd70      	pop	{r4, r5, r6, pc}
 8009ef2:	466a      	mov	r2, sp
 8009ef4:	f000 f848 	bl	8009f88 <_fstat_r>
 8009ef8:	2800      	cmp	r0, #0
 8009efa:	dbec      	blt.n	8009ed6 <__swhatbuf_r+0x12>
 8009efc:	9901      	ldr	r1, [sp, #4]
 8009efe:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8009f02:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8009f06:	4259      	negs	r1, r3
 8009f08:	4159      	adcs	r1, r3
 8009f0a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8009f0e:	e7eb      	b.n	8009ee8 <__swhatbuf_r+0x24>

08009f10 <__smakebuf_r>:
 8009f10:	898b      	ldrh	r3, [r1, #12]
 8009f12:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009f14:	079d      	lsls	r5, r3, #30
 8009f16:	4606      	mov	r6, r0
 8009f18:	460c      	mov	r4, r1
 8009f1a:	d507      	bpl.n	8009f2c <__smakebuf_r+0x1c>
 8009f1c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8009f20:	6023      	str	r3, [r4, #0]
 8009f22:	6123      	str	r3, [r4, #16]
 8009f24:	2301      	movs	r3, #1
 8009f26:	6163      	str	r3, [r4, #20]
 8009f28:	b003      	add	sp, #12
 8009f2a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009f2c:	ab01      	add	r3, sp, #4
 8009f2e:	466a      	mov	r2, sp
 8009f30:	f7ff ffc8 	bl	8009ec4 <__swhatbuf_r>
 8009f34:	9f00      	ldr	r7, [sp, #0]
 8009f36:	4605      	mov	r5, r0
 8009f38:	4639      	mov	r1, r7
 8009f3a:	4630      	mov	r0, r6
 8009f3c:	f7ff f9ce 	bl	80092dc <_malloc_r>
 8009f40:	b948      	cbnz	r0, 8009f56 <__smakebuf_r+0x46>
 8009f42:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009f46:	059a      	lsls	r2, r3, #22
 8009f48:	d4ee      	bmi.n	8009f28 <__smakebuf_r+0x18>
 8009f4a:	f023 0303 	bic.w	r3, r3, #3
 8009f4e:	f043 0302 	orr.w	r3, r3, #2
 8009f52:	81a3      	strh	r3, [r4, #12]
 8009f54:	e7e2      	b.n	8009f1c <__smakebuf_r+0xc>
 8009f56:	89a3      	ldrh	r3, [r4, #12]
 8009f58:	6020      	str	r0, [r4, #0]
 8009f5a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009f5e:	81a3      	strh	r3, [r4, #12]
 8009f60:	9b01      	ldr	r3, [sp, #4]
 8009f62:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8009f66:	b15b      	cbz	r3, 8009f80 <__smakebuf_r+0x70>
 8009f68:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009f6c:	4630      	mov	r0, r6
 8009f6e:	f000 f81d 	bl	8009fac <_isatty_r>
 8009f72:	b128      	cbz	r0, 8009f80 <__smakebuf_r+0x70>
 8009f74:	89a3      	ldrh	r3, [r4, #12]
 8009f76:	f023 0303 	bic.w	r3, r3, #3
 8009f7a:	f043 0301 	orr.w	r3, r3, #1
 8009f7e:	81a3      	strh	r3, [r4, #12]
 8009f80:	89a3      	ldrh	r3, [r4, #12]
 8009f82:	431d      	orrs	r5, r3
 8009f84:	81a5      	strh	r5, [r4, #12]
 8009f86:	e7cf      	b.n	8009f28 <__smakebuf_r+0x18>

08009f88 <_fstat_r>:
 8009f88:	b538      	push	{r3, r4, r5, lr}
 8009f8a:	4d07      	ldr	r5, [pc, #28]	@ (8009fa8 <_fstat_r+0x20>)
 8009f8c:	2300      	movs	r3, #0
 8009f8e:	4604      	mov	r4, r0
 8009f90:	4608      	mov	r0, r1
 8009f92:	4611      	mov	r1, r2
 8009f94:	602b      	str	r3, [r5, #0]
 8009f96:	f7f7 fffa 	bl	8001f8e <_fstat>
 8009f9a:	1c43      	adds	r3, r0, #1
 8009f9c:	d102      	bne.n	8009fa4 <_fstat_r+0x1c>
 8009f9e:	682b      	ldr	r3, [r5, #0]
 8009fa0:	b103      	cbz	r3, 8009fa4 <_fstat_r+0x1c>
 8009fa2:	6023      	str	r3, [r4, #0]
 8009fa4:	bd38      	pop	{r3, r4, r5, pc}
 8009fa6:	bf00      	nop
 8009fa8:	24000574 	.word	0x24000574

08009fac <_isatty_r>:
 8009fac:	b538      	push	{r3, r4, r5, lr}
 8009fae:	4d06      	ldr	r5, [pc, #24]	@ (8009fc8 <_isatty_r+0x1c>)
 8009fb0:	2300      	movs	r3, #0
 8009fb2:	4604      	mov	r4, r0
 8009fb4:	4608      	mov	r0, r1
 8009fb6:	602b      	str	r3, [r5, #0]
 8009fb8:	f7f7 fff9 	bl	8001fae <_isatty>
 8009fbc:	1c43      	adds	r3, r0, #1
 8009fbe:	d102      	bne.n	8009fc6 <_isatty_r+0x1a>
 8009fc0:	682b      	ldr	r3, [r5, #0]
 8009fc2:	b103      	cbz	r3, 8009fc6 <_isatty_r+0x1a>
 8009fc4:	6023      	str	r3, [r4, #0]
 8009fc6:	bd38      	pop	{r3, r4, r5, pc}
 8009fc8:	24000574 	.word	0x24000574

08009fcc <_sbrk_r>:
 8009fcc:	b538      	push	{r3, r4, r5, lr}
 8009fce:	4d06      	ldr	r5, [pc, #24]	@ (8009fe8 <_sbrk_r+0x1c>)
 8009fd0:	2300      	movs	r3, #0
 8009fd2:	4604      	mov	r4, r0
 8009fd4:	4608      	mov	r0, r1
 8009fd6:	602b      	str	r3, [r5, #0]
 8009fd8:	f7f8 f802 	bl	8001fe0 <_sbrk>
 8009fdc:	1c43      	adds	r3, r0, #1
 8009fde:	d102      	bne.n	8009fe6 <_sbrk_r+0x1a>
 8009fe0:	682b      	ldr	r3, [r5, #0]
 8009fe2:	b103      	cbz	r3, 8009fe6 <_sbrk_r+0x1a>
 8009fe4:	6023      	str	r3, [r4, #0]
 8009fe6:	bd38      	pop	{r3, r4, r5, pc}
 8009fe8:	24000574 	.word	0x24000574

08009fec <memcpy>:
 8009fec:	440a      	add	r2, r1
 8009fee:	4291      	cmp	r1, r2
 8009ff0:	f100 33ff 	add.w	r3, r0, #4294967295
 8009ff4:	d100      	bne.n	8009ff8 <memcpy+0xc>
 8009ff6:	4770      	bx	lr
 8009ff8:	b510      	push	{r4, lr}
 8009ffa:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009ffe:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a002:	4291      	cmp	r1, r2
 800a004:	d1f9      	bne.n	8009ffa <memcpy+0xe>
 800a006:	bd10      	pop	{r4, pc}

0800a008 <__assert_func>:
 800a008:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800a00a:	4614      	mov	r4, r2
 800a00c:	461a      	mov	r2, r3
 800a00e:	4b09      	ldr	r3, [pc, #36]	@ (800a034 <__assert_func+0x2c>)
 800a010:	681b      	ldr	r3, [r3, #0]
 800a012:	4605      	mov	r5, r0
 800a014:	68d8      	ldr	r0, [r3, #12]
 800a016:	b14c      	cbz	r4, 800a02c <__assert_func+0x24>
 800a018:	4b07      	ldr	r3, [pc, #28]	@ (800a038 <__assert_func+0x30>)
 800a01a:	9100      	str	r1, [sp, #0]
 800a01c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800a020:	4906      	ldr	r1, [pc, #24]	@ (800a03c <__assert_func+0x34>)
 800a022:	462b      	mov	r3, r5
 800a024:	f000 f842 	bl	800a0ac <fiprintf>
 800a028:	f000 f852 	bl	800a0d0 <abort>
 800a02c:	4b04      	ldr	r3, [pc, #16]	@ (800a040 <__assert_func+0x38>)
 800a02e:	461c      	mov	r4, r3
 800a030:	e7f3      	b.n	800a01a <__assert_func+0x12>
 800a032:	bf00      	nop
 800a034:	2400001c 	.word	0x2400001c
 800a038:	0800a411 	.word	0x0800a411
 800a03c:	0800a41e 	.word	0x0800a41e
 800a040:	0800a44c 	.word	0x0800a44c

0800a044 <_calloc_r>:
 800a044:	b570      	push	{r4, r5, r6, lr}
 800a046:	fba1 5402 	umull	r5, r4, r1, r2
 800a04a:	b934      	cbnz	r4, 800a05a <_calloc_r+0x16>
 800a04c:	4629      	mov	r1, r5
 800a04e:	f7ff f945 	bl	80092dc <_malloc_r>
 800a052:	4606      	mov	r6, r0
 800a054:	b928      	cbnz	r0, 800a062 <_calloc_r+0x1e>
 800a056:	4630      	mov	r0, r6
 800a058:	bd70      	pop	{r4, r5, r6, pc}
 800a05a:	220c      	movs	r2, #12
 800a05c:	6002      	str	r2, [r0, #0]
 800a05e:	2600      	movs	r6, #0
 800a060:	e7f9      	b.n	800a056 <_calloc_r+0x12>
 800a062:	462a      	mov	r2, r5
 800a064:	4621      	mov	r1, r4
 800a066:	f7fe fa5f 	bl	8008528 <memset>
 800a06a:	e7f4      	b.n	800a056 <_calloc_r+0x12>

0800a06c <__ascii_mbtowc>:
 800a06c:	b082      	sub	sp, #8
 800a06e:	b901      	cbnz	r1, 800a072 <__ascii_mbtowc+0x6>
 800a070:	a901      	add	r1, sp, #4
 800a072:	b142      	cbz	r2, 800a086 <__ascii_mbtowc+0x1a>
 800a074:	b14b      	cbz	r3, 800a08a <__ascii_mbtowc+0x1e>
 800a076:	7813      	ldrb	r3, [r2, #0]
 800a078:	600b      	str	r3, [r1, #0]
 800a07a:	7812      	ldrb	r2, [r2, #0]
 800a07c:	1e10      	subs	r0, r2, #0
 800a07e:	bf18      	it	ne
 800a080:	2001      	movne	r0, #1
 800a082:	b002      	add	sp, #8
 800a084:	4770      	bx	lr
 800a086:	4610      	mov	r0, r2
 800a088:	e7fb      	b.n	800a082 <__ascii_mbtowc+0x16>
 800a08a:	f06f 0001 	mvn.w	r0, #1
 800a08e:	e7f8      	b.n	800a082 <__ascii_mbtowc+0x16>

0800a090 <__ascii_wctomb>:
 800a090:	4603      	mov	r3, r0
 800a092:	4608      	mov	r0, r1
 800a094:	b141      	cbz	r1, 800a0a8 <__ascii_wctomb+0x18>
 800a096:	2aff      	cmp	r2, #255	@ 0xff
 800a098:	d904      	bls.n	800a0a4 <__ascii_wctomb+0x14>
 800a09a:	228a      	movs	r2, #138	@ 0x8a
 800a09c:	601a      	str	r2, [r3, #0]
 800a09e:	f04f 30ff 	mov.w	r0, #4294967295
 800a0a2:	4770      	bx	lr
 800a0a4:	700a      	strb	r2, [r1, #0]
 800a0a6:	2001      	movs	r0, #1
 800a0a8:	4770      	bx	lr
	...

0800a0ac <fiprintf>:
 800a0ac:	b40e      	push	{r1, r2, r3}
 800a0ae:	b503      	push	{r0, r1, lr}
 800a0b0:	4601      	mov	r1, r0
 800a0b2:	ab03      	add	r3, sp, #12
 800a0b4:	4805      	ldr	r0, [pc, #20]	@ (800a0cc <fiprintf+0x20>)
 800a0b6:	f853 2b04 	ldr.w	r2, [r3], #4
 800a0ba:	6800      	ldr	r0, [r0, #0]
 800a0bc:	9301      	str	r3, [sp, #4]
 800a0be:	f7ff fd3d 	bl	8009b3c <_vfiprintf_r>
 800a0c2:	b002      	add	sp, #8
 800a0c4:	f85d eb04 	ldr.w	lr, [sp], #4
 800a0c8:	b003      	add	sp, #12
 800a0ca:	4770      	bx	lr
 800a0cc:	2400001c 	.word	0x2400001c

0800a0d0 <abort>:
 800a0d0:	b508      	push	{r3, lr}
 800a0d2:	2006      	movs	r0, #6
 800a0d4:	f000 f82c 	bl	800a130 <raise>
 800a0d8:	2001      	movs	r0, #1
 800a0da:	f7f7 ff24 	bl	8001f26 <_exit>

0800a0de <_raise_r>:
 800a0de:	291f      	cmp	r1, #31
 800a0e0:	b538      	push	{r3, r4, r5, lr}
 800a0e2:	4605      	mov	r5, r0
 800a0e4:	460c      	mov	r4, r1
 800a0e6:	d904      	bls.n	800a0f2 <_raise_r+0x14>
 800a0e8:	2316      	movs	r3, #22
 800a0ea:	6003      	str	r3, [r0, #0]
 800a0ec:	f04f 30ff 	mov.w	r0, #4294967295
 800a0f0:	bd38      	pop	{r3, r4, r5, pc}
 800a0f2:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800a0f4:	b112      	cbz	r2, 800a0fc <_raise_r+0x1e>
 800a0f6:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800a0fa:	b94b      	cbnz	r3, 800a110 <_raise_r+0x32>
 800a0fc:	4628      	mov	r0, r5
 800a0fe:	f000 f831 	bl	800a164 <_getpid_r>
 800a102:	4622      	mov	r2, r4
 800a104:	4601      	mov	r1, r0
 800a106:	4628      	mov	r0, r5
 800a108:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a10c:	f000 b818 	b.w	800a140 <_kill_r>
 800a110:	2b01      	cmp	r3, #1
 800a112:	d00a      	beq.n	800a12a <_raise_r+0x4c>
 800a114:	1c59      	adds	r1, r3, #1
 800a116:	d103      	bne.n	800a120 <_raise_r+0x42>
 800a118:	2316      	movs	r3, #22
 800a11a:	6003      	str	r3, [r0, #0]
 800a11c:	2001      	movs	r0, #1
 800a11e:	e7e7      	b.n	800a0f0 <_raise_r+0x12>
 800a120:	2100      	movs	r1, #0
 800a122:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800a126:	4620      	mov	r0, r4
 800a128:	4798      	blx	r3
 800a12a:	2000      	movs	r0, #0
 800a12c:	e7e0      	b.n	800a0f0 <_raise_r+0x12>
	...

0800a130 <raise>:
 800a130:	4b02      	ldr	r3, [pc, #8]	@ (800a13c <raise+0xc>)
 800a132:	4601      	mov	r1, r0
 800a134:	6818      	ldr	r0, [r3, #0]
 800a136:	f7ff bfd2 	b.w	800a0de <_raise_r>
 800a13a:	bf00      	nop
 800a13c:	2400001c 	.word	0x2400001c

0800a140 <_kill_r>:
 800a140:	b538      	push	{r3, r4, r5, lr}
 800a142:	4d07      	ldr	r5, [pc, #28]	@ (800a160 <_kill_r+0x20>)
 800a144:	2300      	movs	r3, #0
 800a146:	4604      	mov	r4, r0
 800a148:	4608      	mov	r0, r1
 800a14a:	4611      	mov	r1, r2
 800a14c:	602b      	str	r3, [r5, #0]
 800a14e:	f7f7 feda 	bl	8001f06 <_kill>
 800a152:	1c43      	adds	r3, r0, #1
 800a154:	d102      	bne.n	800a15c <_kill_r+0x1c>
 800a156:	682b      	ldr	r3, [r5, #0]
 800a158:	b103      	cbz	r3, 800a15c <_kill_r+0x1c>
 800a15a:	6023      	str	r3, [r4, #0]
 800a15c:	bd38      	pop	{r3, r4, r5, pc}
 800a15e:	bf00      	nop
 800a160:	24000574 	.word	0x24000574

0800a164 <_getpid_r>:
 800a164:	f7f7 bec7 	b.w	8001ef6 <_getpid>

0800a168 <_init>:
 800a168:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a16a:	bf00      	nop
 800a16c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a16e:	bc08      	pop	{r3}
 800a170:	469e      	mov	lr, r3
 800a172:	4770      	bx	lr

0800a174 <_fini>:
 800a174:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a176:	bf00      	nop
 800a178:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a17a:	bc08      	pop	{r3}
 800a17c:	469e      	mov	lr, r3
 800a17e:	4770      	bx	lr
